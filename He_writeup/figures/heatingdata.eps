%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: heatingdata.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: steven schowalter
%%CreationDate: 4/15/09
%%BoundingBox: 0 0 297 185
%%HiResBoundingBox: 0 0 296.1661 184.1607
%%CropBox: 0 0 296.1661 184.1607
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 80 8%%BeginData: 7420 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD07FF52A8FFFD06A8FD77FF7D7DFF527D5227527DFFFD04A8FFA8%A8A8FFA8FFA8A8A8FFA8A8A8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8%FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8%A8A8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8FFA8A8A8FFA8A8A8FFA8A8A8%FFA8A8A8FFA8FFA8A8A8FFFD04A8FD07FF527DA87DA87D527DA8FFA8FD07%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD05FFA8FFFFFFA8FD05FFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FD05FFA8FFFFFFA8FD05FFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FD05FFA8FFFFFFA8FD05FFA8FFFFFFA8FFFFFFA8%FFA8FD06FFA8A8A8FFA8FFA8FFA8FFA8FD4DFFA8FD7EFFA9A8FD20FFA8FD%10FFA8FD4DFF7DFD20FFA8FD5EFF7EFD20FFA8FD10FFA8FD4DFF7EFD20FF%A8FD5EFFA9A8FD1FFFA8FD10FFA8FD4DFFA2A9FD1FFFA8FD5DFFA9FFA8FD%1FFFA8FD10FFA8FD4CFFA9A8A9A8FD30FFA8FD4BFFA8FFFFA9FD1EFFA8FD%10FFA8FD3AFFA87DFD04A8FF52FF52A8A8FD06FFA9A8FF7EFD1EFFA8FD4B%FF7D5252FF527DFF7D7D27277DFD06FFA9FFFFFFA8FD1DFFA8FD10FFA8FD%39FFA87D527DFD04FF7DFF7D7DA8FD07FFA8FFFFA9FD1DFFA8FD11FFA8FD%34FFA8FD14FFA8A8FD04FFA8CBFD1CFFA8FD10FFA8FD33FFA95252A87DA8%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87DA8277DA9FFFFFF7EA9FD23FF7D%A8FFA8A87D7D7DA8FD34FFA87D7DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA87C7DFD05FFA2A9FD1AFFA8FD06FFA87D7DFF527D277D27FD04%A8FD31FF7EFF7DFD14FFA8A8FFA8FD05FF7EA27EA9A9FD15FFA8A8FD07FF%527DA87D7D7D527D7DFFA8FD32FF7EFD18FFA8FD07FFA9FFA9A8A8FD15FF%A8FD06FFA8A8A8FFA8FFA8FFA8FFA8FD33FF7EFD18FFA9A8FD0AFF7E7EFD%15FFA87D7DA8FD40FFA9A8FD17FFA8FD0CFFA97EFD13FFA87DA87DA8FD0C%FFA8FD33FF7EA9FD17FFA9A8FD0CFFA97EA97EA27EA9A87E7E7EA8A9A8A9%A8A97EA8FFFD04A87DFD41FFA8A9FD16FFA8FD0FFF7EFFFFFFA8A9A8FFA9%A97EA97EA9A8FFFFFFA8A85227A8FD0CFFA8FD33FFA8FF7EFD16FFA9A9FD%21FF7D527D7DFD0DFFA8FD32FFA9FFFFA8FD15FFA8FD21FFA8A87D7DFD0D%FFA8FD33FFA8FFFFA8A8FD14FFA9A8FD20FFA8FD44FFA9FFFFFFA9A8FD13%FFA8FD21FFA8FF7D27A8FD0CFFA8FD33FFA8FD04FFA2A8FD12FFA9A8FD20%FFA8FF7D7DA8FD0DFFA8FD31FFA9A9FD05FFA8A9FD11FFA8FD21FFA8FF7D%52A8FD0CFFA8FD33FFA8FD05FFA97EA2FD10FFA9A8FD20FFA8FF7D527DFD%40FFCBFD07FFA97EA9A8A9CBFD07FFA9A9A2A9A2FD21FFA8FFA852A8FD0C%FFA8FD33FFA8FD09FFA87E7EA87EA87E7E7EA87EA2A8FFA9FD22FFA8FF52%52A8FD0DFFA8FD31FFA9FD11FFA9FD29FFA8FF7DF8A8FFFFFFA8FFFFA8FF%A8FFA8FFA8FD33FFA8FD3CFFA8A8A8FFFFFF52A8FF7D7D52527DA8FFA8FD%31FFA9FD3BFFA8FF7D52A8FFFFFF7D7DFF527D2727527DA8A8FD32FFA8FD%39FFA8A8FF7D52A8FFFFFF52A8A8A87DA87DA8A8FD33FFA8FD3BFFA8FFA8%27FD0DFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFA9A8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFA8FF7D5252%FD0DFF7DA8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8%FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FF7EFD04A8FFA8A8%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A87DFFA8277DA8FD0B%FFFD2AA87DFD07A87E7E7DFD3BA8FF7D52A8FD0CFFA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8A8A87DA8%7DA87D7E7DA8A7A87D7D537777A87DA87DA87DA87DA87DA87DA87DA87DA8%7DA8A8A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%A8A87DA87DA87DA87DA87DA87DFF7D27A8FD0CFFA852FD047D527D527D52%7D52FD057D527D527D527D527D527D7D7D527D527D527D527D527D7D7D52%535253527D527D52FD057D527D527D527D52FD077D527D527D527D52FD05%7D527D527D527D52FD057D527D527D527D7D7D527D7D7D527D527D527DFF%A87DA8FD0CFFA87DFFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8%A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFFD04A87E7E7EFFA8FFA8FFA8A8A8FF%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF7DFFA827%A8FD0CFFFD06A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DFD05%A87E7E7DA87DA87DA8A8A87DFD07A87DA8A8A87DA8A8A87DA8A8A87DA8A8%A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87D%A8A8A87DA8A8A87DA8A8A87DFD05A8FFA87DA8FD0DFFA8FFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF7EA2A8A87EA87E7E%7EA87E7EA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA87D7D7DA8FD0CFFA8FD15FFA9FD07FFA8A8%FD08FFA8FF7EFD44FFA8A87DA8A8FD0DFFA8FD13FFA9A9FD07FFA9FD0BFF%A9FD16FFA8FD07FFA8FD05FFA8FD13FFA8FFFFFFA8FFA8FD05FFA8A8FD0F%FFA8FD15FF7EA87EFFFFFFA8FFA8FD0BFFA8FD14FFA827527DFFA8FFA8FF%7D527DFF7D52A87D527D277DFFFFA8FFFFA8277DFFA827A87D52A852A8FF%7D52527DFD2BFFA97EA8FF7EA97E7E7EA9FD21FFA87DFFA852277DFFFF7D%A8FFFF52FFFFA8A852A8FF7D527DFF52A87DFF52A8527D7DA87DA8FFFF27%A8FD06FFA8FD10FFA8A8FD14FFA8FFFFFFA8FFFFFFA8FD21FF7D52A8FD04%7DFFA87DA8FFA852FFA87DA8277DFF7D2752FF7D527DFF7DFD0452A8527D%FF7D52527DFD05FFA8FD26FFCBFD29FFA87DFF7DFD04FFA852A8A8FF7DFF%A8FFA87DA8FFA8FFA8FFFF7DA8A8A87DFFA87DFF7DA8FFA87DA852FD05FF%A8FD0AFFA8FFA8FFA8FFA8FD13FFA9A9A8FD2BFFA8527DFD32FF52A8FF7D%7D525252A8FD0CFFA97EA87EA9A2A97EA97ECBFD2CFF7DA8FD2AFFA8FD07%FF7D7DFF52FF7DA8527DA8A8FFFFA8FD07FF7EFFA8FFA8FFA8A9FFA9A8FD%57FFA8A8FD07FF52A8A87DA8FFA8A8A8FD04FFA9FD07FFCBFD08FFA8FD59%FFA8FD10FFA8FFFFFF7EFFFFFFA9FFFFA9A2FD09FFA9FD6AFFA8FFFF7EA8%A9A8A87EA9A2FD63FFA8FD10FFA8FFFFFF7E7E7ECBFFFF7EFD64FFA8FD14%FFA9FD6AFFA8FD10FFA8FFFFFFA8FD6AFFA8FD11FFA8FD6DFFA8FD10FFA8%FFFF7E7EFD6AFFA8FD13FFA8A2FD6AFFA8FD10FFA8FFFFFF7EFD6AFFA8FD%11FFA8FFFFA9FD6AFFA8FD10FFA8FFFFFFA8FDEAFFA8FD10FFA8A8A8FFFF%FFA8FFFFFFA8FFFFA8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFA8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFA8A8FFA8A8A8FFA8FFA8FFA8FFFFA8A8FFA8%FFFFFFA8FFFFFFA8FFFFA8A8FFFFA8A8A8FD11FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FDFCFFFDFCFFFD4BFFA8527DA8FD05FFA8A8FF%FFA87DA8FD70FFA87DA87D527D7D7DA8A8FD047D527D7DFD70FF52A82752%275227A87D7D27527D7D527DA8FD72FFA8FD05FFA8FFA8FFFFFFA8FDABFF%FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-04-12T23:03:40-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-04-15T13:51:57-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-04-15T13:51:57-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>160</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qx/z7DdzeU9Qis7W8&#xA;vbl0Cx2unz/Vrh2JAFJRLbsqg/E3GRSQCO9MVY9dW3nG5tvKEEC6ravb+tb6zdyyW4mMbaZLFHcT&#xA;pFM8Lv8AWnjenxUdTTbcqsd0Hyr+bNprkE95dTvYtcWDWSfWCVt4YZFXUfrKPNMWa7iQsoDyBWb9&#xA;k4q9OhfXppDIk1sLczyx8DA/NI42dQS3rAMSVXooxVEtHrPJONxb8a/vKwPXjQ9P33WtMVcY9Z9R&#xA;aXFv6dDy/cPy5VHGn77p1rirhHrPqNW4t/ToOP7h+XKp5V/fdOlMVcses8n5XFvxr+7pA9eNB1/f&#xA;da1xVbCmtFCZZ7dW5OABC/2QxCn++7rQ4q709d+r/wC9Fr9Y4f74k4c6f8Zq8a4qukj1niPTuLfl&#xA;Va8oHpxqOXSbrTpirmj1nknG4t+Nf3lYHrxoen77rWmKrSmteugE9v6JVi7ei9QwK8R/fdxyxVcY&#xA;9Z9RaXFv6dDy/cPy5VHGn77p1rirhHrPqNW4t/ToOP7h+XKp5V/fdOlMVcses8n5XFvxr+7pA9eN&#xA;B1/fda1xV0ces8T6lxb8qtTjA9ONTx6zdadcVU0TXjaqWntlujGCVMLlBJTptN0riqpJHrPEencW&#xA;/Kq15QPTjUcuk3WnTFXNHrPJONxb8a/vKwPXjQ9P33WtMVcY9Z9RaXFv6dDy/cPy5VHGn77p1riq&#xA;0prXroBPb+iVYu3ovUMCvEf33ccsVarqgufSa7tQXTlFH6L8zxNHNPW+yOSffjSr1j1nk/K4t+Nf&#xA;3dIHrxoOv77rWuKujj1nifUuLflVqcYHpxqePWbrTriqm6a8LVis9s10IyQohcIZKdN5ulcVVJI9&#xA;Z4j07i35VWvKB6cajl0m606Yq5o9Z5JxuLfjX95WB68aHp++61pirjHrPqLS4t/ToeX7h+XKo40/&#xA;fdOtcVcI9Z9Rq3Fv6dBx/cPy5VPKv77p0piqEv38www3M0VxahIYvUUvbyNyZQxZdp1p0XfFU3xV&#xA;2KuxV2KoPSkZYJSXLBri4IBpRf377CgH44qjMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirHdZZ4vOPl2VSQrR30Eu/wAPCRYWFf8AnpGgGX4/7uXw/SrIsoV2KuxV2KuxV2KuxVBa0jPp&#xA;F6Fdoz6Eh5Lxrsp2+IMMVRuKuxV2KuxVB6UjLBKS5YNcXBANKL+/fYUA/HFUZirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVY35qV2uFmjHKTT7SW84+LQ3FvOif7P6uy7ZkYeXvNfYf1qy&#xA;NHR0V0YMjAFWBqCD0IOY6t4q7FXYq7FXYq7FUFrSM+kXoV2jPoSHkvGuynb4gwxVG4q7FXYq7FUH&#xA;pUarBKQTV7i4JqxI/v3GwJNPoxVGYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlPmzVp9J8vXl9boz&#xA;3KKI7YLG8tJZmEUbMqBm4K7hn22WuKsK8l+cvzD1zRNWb6hF+lrH6pFZLeW9zZwzsEEd3KJHVQyN&#xA;Mkhj4jYUr1GKprqetedrK40BmszcX89tqDX2kWXA2808UQe3T6zMo9IlhQFpFBqa12xVLfyu86+e&#xA;tYvX0vzRo09lNBDPLJezQNDylS6KLHROcIHpOOIWR6ha8mPLiq9IxVLv+mh/6NP+ZuWfw/FVPQOV&#xA;tFNpMhBOmlYoD0LWzKDAxHsKxk92Qnbpjk39Xf8Aeqa5WrsVdirsVdirsVQWtRrJpF6rFgPQkPws&#xA;ynZSeqkHFUbiqX6/qzaRpFzqC2c1+1uhf6rbmNXYDcnlM8UahRViWcbe9BiqW3HnjTIbbQbg212y&#xA;eYY3ksUWIeovCze+4Sxlg4cxRMAoB+LY4qx7R/zr8vavc6TBZ2VzTV7prSC4la3jgBWOOQkStLxd&#xA;v33D00q/NXXj8OKsz0d7ThcJC0frC4uDOqFeVTM4BcDf78VTDFXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq8wt5fPOuebNM1pJ4INGntnXSI3s57qK1u0Dpcm59K6t/jkVW9GVgVC1T4WNZbMsOGRCsv+pef/&#xA;APq86V/3Crn/ALyOVq76l5//AOrzpX/cKuf+8jirvqXn/wD6vOlf9wq5/wC8jirvqXn/AP6vOlf9&#xA;wq5/7yOKqF/Y+djY3IudV0ua2MTieFdIu5GdOJ5KETUGZiRtxAqcVSv8tLPzXaQxxeZJhLceg5sU&#xA;ZWWeKzMv7iK5LSz8pVXr8bEbAs7AsZ/w/FWUalYX4u01LTDH9cSMwywTFlinjryVWdQxRkavFuLU&#xA;q22+GEhVHkqlB5t8vun+kXsNlcI3pzWt1IkMscgFWRlcitPEVB6gkYThl0FqnAIIqOmVK7FXYq7F&#xA;XYql3mB7MaPdrdNGEaKQKJStCwQkU5d8VSlPO87XkaN5c1aPTZbhbaPV3S1EHJ5PSVmgFwb1FL7V&#xA;e3FOpoN8VTfXtDsdd0mfS75pltbkASm3mkt5KKwagkiZHANN99xiqXXHkLy7cxWEV0tzdJpzySW/&#xA;1i7uZiWmtzay+o0kjM/OJ2B5H9onqTiqjp/5b+U7CYSwW8xpNFctFJc3EkTT23AQSvEzlGeJYkCs&#xA;R+yO4GKp3pUitBKADVLi4BqpA/v3OxIFfoxVGYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWOeQv3egx2&#xA;f/LOI2UnqRcQpclvlzmZfoy/UfVf47lZHlCuxV2KuxV2KpdHV/MU/YQ2kP0+rLL+r0vxyw/R8VTH&#xA;K1WmOMuHKguAVDUFaGlRXwNMbVITpuqaLK0mjKtzpPFS+kMaSRlSq/6K7EIAUqfTfblShWpy/ijP&#xA;6vq7/wBaouXzVoMVvbXEl0BHdx+rDRXdvTopLMqhiqqHHItQDvkBhkSRXJV7+ZfL6ac+pfpG3ewQ&#xA;8TcRSLIpb+ReBbkx7KN8fCldVurtO8yaBqU00NhqEF1LAEMyRSKxUS/3Z27PtxPeo8RjLFKPMKi5&#xA;tQsIfU9a5ii9EVm5uq8BsatU7dR1yIiT0VLrnXNIv9G1KSwu472OCOSKZrZvXCycD8J9PlvvvjKE&#xA;o8xSvJ/Q8yzed4IXtbo6cut/XF0drDVRHFI12Ha7N9x+osViFeImaLc8VLmuRV7hirsVdiqD0p2a&#xA;CUFCoW4uACaUb9++4oT+OKozFXYq7FXYq7FXYq7FXYq7FXYq7FXYqxW0jGn6VpOvRhikVhBDqaAk&#xA;1tRGGEgXu0LEt48Sw3NMyZHikY+e3v8A2qyoEEAg1B3BGYyuxV2KuxV2KpdB/wApDe/8wlp/yduc&#xA;sP0j3n9CpjlauxV2Koa10vTLSeae1tIbee5YvcSxRojyMSWLOygFiSSd8kZk7Eq0+k6XJdpeSWcD&#xA;3cYVY7ho0MihKlQrEVHHkaY8cqq9lU9T0LRNVRE1Owt71I29RFuIkkAfjx5DkDvTvhhklHkaVQtv&#xA;Kfla1mSe20eyhmjJaOVLeJXUtQHiwWorxHTwwnNM7En5qr6vSHRrwRRFgIJAI4+I6qancqMrVhXm&#xA;fzHrdt+ZmkaTBqiWemSR27z2rwSuZWmmkQCNo4ZFJcIUb1JUCVDAE4q9DxV2KuxVB6UZDBLzUAC4&#xA;uOBBJJHrvudhT8cVRmKuxV2KuxV2KuxV2KuxV2KuxV2KuxVLvLgB8u6WD0+qQf8AJpcsy/WfeqBe&#xA;NfLkpnQsPL7Lxnhq7izYEkSIPiKwEHiyj4Y6AgBeREr8Tb+L7/2/eqeQzQzxJNC6yxSAMkiEMrA9&#xA;CCNiMqIpV+BXYq7FUugr/iK+8Pqlp/yducsP0D3n9CpjlauxV2KuxV2KuxV2KoLWjKNIvTGqs3oS&#xA;bMxUU4mu4DfqxV5B50vo2/PnRLS4tLgFBZG3uYwjQsvqOayS+nK0VJDx4bcttxyrir2tmVVLMQqq&#xA;Ksx2AA7nFW8VWiaFuPF1PKoWhG5XrT5YqhdKEggl5sCDcXHAAEED132O5r+GKozFXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FVO6mMNtNMBUxozgHvxFcIFlUPosIh0ewhB5CO3iSvjxQDJZDcj71RhAIIIqDsQc&#xA;gqSXnlHTpC76fJLotxKW+sXOmiKF5Q4+ISco5FO+4anJT0Iqa3RzHr6verceg6vDxWHX7xoRsyzx&#xA;2srgVr8D+ipr2q/Lb33xOSJ/hH2/rVZ+h/NHrMR5gPoqQIla0gLlQD/esOILFj+wqigG1akvHD+b&#xA;9qtp5bup3aTVdWurvkxYQQMbOFQVChVEBEm32vikO+PigfSAPtVMNP0fTdOMps4BE03H1DVmJ41p&#xA;uxP8x+/ISmZc1RmQV2KuxV2KuxV2KuxVBa0JTpF6I2VW9CTdlLCnE12BX9eKvNPOuoXEX5zeXdNQ&#xA;hzexW00MDw283+8s8vrSI80btCVhmb4ldWPQVOKs6896Tdav5Vv9OtLC11K4uECx2d+/C2Y8h8T/&#xA;ALuYHh9tQUI5AYqxq/8AJvmS7sfKdtHa2kB0ITwyiS8muD6Euly2SAzCKCWQ+pMC5+EnjyqCdlWL&#xA;+UfyW81aNqsd1NeW5jNzp8yyCRmngWwdGmoVijjc3Uaeg3FU/dhefNuRxV65pKlYpmMzOrT3FIzw&#xA;4rSd+lAD95OKo7kviMVdyXxGKu5L4jFXcl8RiruS+IxV3JfEYq7kviMVdyXxGKu5L4jFXcl8Riru&#xA;S+IxVD6k6/o663H9zJ3/AMk5KPMK7TXX9HWu4/uY+/8AkjGXMqiOS+IyKu5L4jFXcl8RiruS+IxV&#xA;3JfEYq7kviMVdyXxGKu5L4jFXcl8RiruS+IxV3JfEYq7kviMVdyXxGKoHXF56Td8Z2ipDISU4Go4&#xA;HY81bFXkH5lxxXP5v6VpwmltDdxaas8tvO8MjD63MI2FHio8ZrxID/R3Ve1WsH1e2ig9R5fSRU9W&#xA;VuUjcRTk7d2Pc4qqYq7FXlWo69Z2OqanEy3zNHdSmT0rW9nT95K1PTaON0b34HbvTFVP/E9pz4cL&#xA;6vq+jX6je05eNfSpw/y/s++KtDzVZFQ3DUKMjyCthfA0jJBqPRqG2+Ferdq4q03muyVGcpqFFRJC&#xA;BYX5NHpQACGpbfdRuO4GKr/8TWnqFON9yEghr9SvacmFQeXpU47fb+yPHFVq+arJgpCahRw7Cthf&#xA;A0j61Bh2P8oP2u1cVaPmuyClimoUEYl2sL8nixoBQQ15eK/aHhiq4+Z7QPxKX1fUWLaxvSOTioNR&#xA;FTj4t9kdzirS+abNigCX/wAZcCthfD+7FWrWHav7Nftfs1xVafNlkF5cNQp6fq/8c+/J4luNKejX&#xA;lX9j7VN6UxVL9a822MF1pkkhvIoob0JM72d4q/vbWcLRjFQjkRUr070y3ELEh5fpCq0nn7SBK1vB&#xA;9eurxSwNpDaXXq/CFYkh40CrRwVZiFbsTgGM8zsO9UBeectTu7aWO30y9ihnt5Csk1vfpKgJMYZk&#xA;W2feu/AEvTelMsgIA2Ty8lToeZrGJSix34WL01oLC+Io4qvGkO9B9qn2f2qZjkqu/wAUWfLjwv6+&#xA;o0P+8N9TkoqTX0acfB/snscVWjzXZFQwTUKGMy72F+DxU0IoYa8vBftHwxVtvNVkoYlNQogRjSwv&#xA;iaSdKAQ7n+YD7PemKtjzPaGX0uF/y9QxV+o3vHkBWvL0uPH/ACq8ffFVq+a7JkVwmoUZHkANhfg0&#xA;StQQYahttlO57A4q2fNVkFLcNQoqJIaWF8TSQgCg9Gpbf4l6r3pirf8Aie058OF9X1fRr9RvacvG&#xA;vpU4f5f2ffFWl81WTBSE1Cjh2FbC+BpH1qDDsf5Qftdq4q03muyWMyFNQ4hFkIFhflqOaABRDUt4&#xA;r1HcYquPme0DlCl9USrDUWN6RyboeQipw8X+yO5xVpfNNmxQBL/4y4FbC+H92KtWsO1f2a/a/Zri&#xA;rR812QUsU1CgjEu1hfk8WNAKCGvLxX7Q8MVXN5os1ZlKX9VdIzSxviKuKihENCPFhsO9MVUrnX7O&#xA;7he2436mUyRgm0voV5ItTykMaKq+DMeLdq4qmGq6lFq35h6fPaatpEFrY3C2N3Z3nofpFp7ecilv&#xA;GUeVw5YopMi8T8aqepVenYq7FXYqxKHyrJPLdXMbxx+vdXDMOO5PrOKkjr0xVV/whc/8tCfccVd/&#xA;hC5/5aE+44q7/CFz/wAtCfccVd/hC5/5aE+44qtPlOYOEN1GHYFlWhqQtASB7chiq7/CFz/y0J9x&#xA;xVA6tok+nQRvVrqaeQQ21rAtZJJGBag5FVUBVLFmYAAZOEOI9yoI+W/O/BZltbEiRa/VnuJEkjNK&#xA;0Z1ikRj2+HYHuQaizhx95+X7VWy6P5viqX0qN1jHOZobkPVeQHGFSiM78SSQwQbUDHEQgf4vs/H6&#xA;VQr6TrN1rml2l1YNZQPLKwlneNiXW2kqvCFpVK8ZOvPqCKbVyQgBEkGz+1WQ2vkRbSL0bUwW8VSf&#xA;Tij4LU9TRQBlEpGRsm1Vv8IXP/LQn3HIq7/CFz/y0J9xxV3+ELn/AJaE+44q7/CFz/y0J9xxV3+E&#xA;Ln/loT7jirv8IXP/AC0J9xxV3+ELn/loT7jirv8ACFz/AMtCfccVd/hC5/5aE+44q7/CFz/y0J9x&#xA;xV3+ELn/AJaE+44q7/CFz/y0J9xxV3+ELn/loT7jirv8IXP/AC0J9xxV3+ELn/loT7jiqF1TyfJ+&#xA;jrlpZI5USJ34MtQeKkjriqd2vlLy3bXEtymnwvczXLXjTyoJZBM7eoWR35Mvx/EADsemKpvirsVd&#xA;iqA0f6v6M/pcOf1m49bhSvL1n+1TvTxxVH4q7FXYq7FWN+YYtdbzHpz6P9WExsL+Iy3RfjEXlsys&#xA;gjQfvOPA/ByWv8wzIxGPAeK+Y/Sqrc6r5nszLbfov9J3R+O1uLYrBbstd1l9aRmjdfbly2p34gQg&#xA;d7oK3bya7fXlib/TPqX1WZ7h5UnjmiKtDLEqAjhJz/ejl8HHwJwERANG7VPspV2KoW60+O4u7K5Y&#xA;kSWUjulO/ONoyD/wVfoyQlQI71RWRV2KuxV2KqV5FcS2k8VtN9WuJI2WG44h/TcqQr8G2bid6Hri&#xA;rzjyxq+saXf6/f8AmTzZeX2k6NqTaUttcWlmQwe2tZkmJsbWGUMjTPyO6BN2A4lsVTHyj+YPmLW9&#xA;ajsL7y/+j7d0djc8NbWhUVArfaPp0G/vMD4A4qjtEl8xL531G3m1j9J6N9X5NC8VvELa8MtRBAYl&#xA;WRlW3ZTIJWcglTUcqYqhbG41+/1jzlpTa9NZwWF3aGzvRFaGW1glto7iWOMvD6RG5AaZHIHjirDb&#xA;rzd51sbjyyknmCU29xHb32oyzwWXNLa+1NIrf9IIkETcXt5PQQ2wQiUcpKJVlVZJ51/ObSvK3muz&#xA;0GeBJC+907X2kwMFaItHxS6v7aRPipUyRgH9mpxVS8/+bvMWl+Z2hsL36ra6Za6Zdiy9OJxqL6hq&#xA;TWUkBLo8i+miDj6RB5utajYqtec/N/mLT/OMkFne/VrPTP0Hx0r04nOo/pjUZLOerOrSr6KICnpM&#xA;Pirzqu2Ksbt/PvnW48leYtROsOt//hb/ABNbPHBa8tNugbhvqVGhZHjP1fgRKrSfC/xdOKrNPzT1&#xA;TzPYeVNOvfL93cQanJqGn2/o2wtA1wt3OkLRcryG4jjLep8LUFDSu1RiqYflxqF1qGjT3l3rsms3&#xA;UlxIJ7eSGC3bT5FYhrFo44oZOUJ+FjKOTfa2Bpiqea/9W/Q179Z4el6L/wB5TjXieP2tq16Yqj8V&#xA;SzzNqd9peh3d/YwRXNzbxl0iuJTBFQbkvIqTMNugVCSaDvUKpVe+cb+3j8tKNJIvfMQlT6nNOI3t&#xA;riOwlvPRkIR1J5QGJjtxO+/TFUgtPzJ81JfafbarodtbW11qsulT6rBcXFxZq0bpAiowtlf1JLkv&#xA;EPUVE5L9rfFWc6TMjxTRgMGSe45EoyrvO/RiAG+jFUXDPDOheJw6BmQsOnJGKMPoZSMJFKvwKkFv&#xA;5l1S5VWg0C7aKVibe5aW1ELx1qklfWMqhl33j9suOIDnIfb+pVRtf1VUq/l+9VmDBF52r1flxRW9&#xA;OaTiGqPi6L32GPhx/nD7f1KpWN1qk/mlodQtYbdrax5wmCdp1YXE1GryihII9BcMgBDY9fx96sgy&#xA;hXYq7FXYq7FXYq7FXYq7FXYqxLzH5EtJPLus6b5Ws7HRL3zCVh1W/ghjgdoZX43MpMcZ9WYQySen&#xA;z/aO5GKsg0QawNJtV1lYRqipxujbO0sTMppzVnSFvjA5EcfhJpU0qVUDF5G8kw3N3dReX9Njub+o&#xA;vp0s4FknDOJT6rBKvWRQ/wAX7Qr1xVFQ+XPL0Fxf3MOl2kVxqoA1SZIIle6ABUC4YLWXZiPjr1xV&#xA;q+8s+W7+9s76+0mzu73T6HT7qe3ikltyCCPRdlLR7gH4SMVTLFUFeaJot9e2l9e2FtdXtgxewupo&#xA;Y5JYGbZjC7AshNN+JxVQTyt5YS4s7lNIsludPMrWEwt4g8DTsXmMLcaxmRmJfjTkeuKrT5R8pm1v&#xA;7Q6LYG11WT1tTgNrD6d1JXlznXjSVqitXrireoeU/KupWFrp2o6NY3un2PH6lZ3FtDLDD6a8E9KN&#xA;1KpxX4RxGwxVfpflny5pFzd3WlaVZ6fc37c76e1t4oZJ2BLcpWjVS5q7GreJxVU1ydItJuywc8oZ&#xA;AOCM+/A9eINPpxVHYqg9X0bSdZ0+XTtWtIr6wm4+ra3CCSNuLBlqrVGzAHFULb+UvLFsLIW+lWsI&#xA;01/UsBHCiCF/TEPKMKBxPpqFqO22KqieWvLqXcN2mmWq3NsvG3mWGMNGObP8BA+H43Ztu5PicVVt&#xA;KdmglBQqFuLgAmlG/fvuKE/jirGPK3meNNJ+qwafe3l1DPd+rFBCVUKLuVVYSzmCFuVNuLn8My82&#xA;L1WSANvuVNzr2sCZLRtFlS8nLG3Z5YzbFFNaySx+q0bKlKj0z8RopYfFlXhx58W32qmOj2ktnpNl&#xA;aTFTLbW8UUhUkryRApoSASKjuMrnK5Eqi8iqh9Sh+vm939cxCE9KFQxYdq9T45Li2pVfIq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgtadk0i9Ko0h9CQcV413U7/EVGKo3FXY&#xA;q7FXYqlltfQWWnXN1fSR21rFcT1mZ9qGdgK1AoSxoAK1wxiSaCteWJop9CtJoXWSGVWeORSCrKzE&#xA;hgR1BGTyipFU0ytXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FU&#xA;FrRlGkXpjVWb0JNmYqKcTXcBv1YqjcVdirsVdiqB0yIvbyetwkUXM7RDj9mk706k7177Y2qE8mWg&#xA;s/Kej24bmEtIfiIpWqA/xy3PK5k+apzlSuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KoLWhKdIvRGyq3oSbspYU4muwK/rxVG4q7FXYq7FUrjttYgfjF6ckX1iWY85&#xA;SpKSFyEosR6M4O5PTFVdm1gGMRwW6op+NfWfdeJAA/dbb0xVxfWfVUiC39MKwZfWepYkcTX0u2+K&#xA;uD6z6rEwW/plVCr6z1DAnka+l32xVyPrIZ+cFuVLVjAmcUXiNj+6/mrirUB1lEIkhgdi7sD67/ZZ&#xA;yVH9z2UgYq1y136rx9K2+s8Kep6z8edPtcfS6V7YqukfWSo9OC3VuSkkzOfhDDkP7rutcVc76yWT&#xA;hBbhQ1ZAZnNV4nYfuv5qYq0x1k3COIYBGqMrR+u+7EqVP9z2ofvxVsvrPqqRBb+mFYMvrPUsSOJr&#xA;6XbfFXB9Z9ViYLf0yqhV9Z6hgTyNfS77Yq5H1kM/OC3KlqxgTOKLxGx/dfzVxV0b6yFPqQW7NyYg&#xA;iZx8JY8R/ddlpiqmn6dWzWP07drlYwvrGZyC4WnIj0vHfFVSR9ZKj04LdW5KSTM5+EMOQ/uu61xV&#xA;zvrJZOEFuFDVkBmc1Xidh+6/mpiri+s+qpEFv6YVgy+s9SxI4mvpdt8VaY6ybhHEMAjVGVo/Xfdi&#xA;VKn+57UP34q2H1n1WJgt/TKqFX1nqGBPI19LvtirkfWQz84LcqWrGBM4ovEbH91/NXFXRvrIU+pB&#xA;bs3JiCJnHwljxH912WmKqb/p1rNo/Tt1uWjK+sJnADlacgPS8d8VVJH1kqPTgt1bkpJMzn4Qw5D+&#xA;67rXFXO+slk4QW4UNWQGZzVeJ2H7r+amKuL6z6qkQW/phWDL6z1LEjia+l23xVwfWfVYmC39MqoV&#xA;fWeoYE8jX0u+2Koa+ttbuormECKFJ4REpWYkqfi5NRoSDUMPuxVNsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdiqje31nY2sl3eTJb2sI5SzSMFVR03J98VQGk+avLmsMq6VqMF6WDsPQcOKRhC2&#xA;422Eyffiqa4qpx3FvJJLHHKjyQMEnRWBZGKhwGA+ySrA79jiqHXWtINzc231yEXFpJFBcxlwGSW4&#xA;AaFGr+1IHHEd64qjMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVadeSkbV6ioqKjcGnzxV5ddfk9q02h+X9NTWIYjo8bxXREEnC5DX9rdrUCVSPgtDHvXZzi&#xA;qn5Y/JnXNIvNJnufMbXcWmTpO0AS4RXZbe0idwVuB+8drJieXJSJXBBruqq6z+U/mLUbxmh1xLO3&#xA;iv769ib0WkklXUJkmZHcSR8OCc4BQH4OPiVCqEl/I66SOf6rqvCa7sYbGZ41aM+oYY4J52Yu/Ohj&#xA;9eNSK+rT4h1xV65irsVdirsVdirsVdirsVdirsVdir//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:08D9DAB33A29DE119710A600F9FD5254</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:447342EC402BDE1190A9BEFE60315351</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>True</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.0d6e5</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPSMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.3x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times New Roman.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Mathematica2</stFnt:fontName>
                  <stFnt:fontFamily>Mathematica2</stFnt:fontFamily>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>Version 2.007;PS 002.000;Core 1.0.38;makeotf.lib1.7.9032</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -184.161 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 184.161 li
296.166 184.161 li
296.166 0 li
cp
clp
[1 0 0 1 0 0 ]ct
295.164 106.83 mo
39.168 106.83 li
39.168 92.835 li
295.164 92.835 li
295.164 106.83 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.164706 0.12549 0.129412 0 cmyk
f
296.163 107.838 mo
38.169 107.838 li
38.169 91.836 li
295.668 91.836 li
295.668 92.331 li
295.668 91.836 li
296.163 91.836 li
296.163 107.838 li
39.168 92.835 mo
39.168 106.83 li
295.164 106.83 li
295.164 92.835 li
39.168 92.835 li
0 0 0 0 cmyk
f
44.1428 148.753 mo
44.4837 147.828 li
44.6089 147.89 li
44.7126 147.942 li
45.2567 147.709 li
45.2816 147.698 li
45.741 147.37 li
45.7579 147.358 li
45.9707 147.145 li
46.2314 147.406 li
46.5378 147.712 li
46.971 157.365 li
47.4707 157.357 li
47.7307 136.943 li
47.7834 138.177 li
48.2533 138.285 li
48.62 137.604 li
48.7944 137.604 li
49.1847 137.771 li
49.3853 137.857 li
49.6383 137.436 li
49.8721 137.903 li
50.0758 138.311 li
50.6642 137.33 li
51.0529 136.997 li
51.3039 136.853 li
51.5439 137.093 li
51.7546 137.304 li
52.3156 136.503 li
52.4915 136.444 li
52.8254 136.682 li
53.0457 136.84 li
53.3618 136.313 li
53.5784 136.622 li
53.6665 136.748 li
54.2561 136.664 li
54.3385 136.652 li
54.6088 136.382 li
54.8705 136.606 li
55.0731 136.78 li
55.5681 136.12 li
55.9346 135.963 li
56.2998 135.841 li
56.3095 135.838 li
56.7421 135.653 li
57.1644 135.532 li
57.2787 135.499 li
57.4731 135.046 li
57.6792 135.517 li
57.7085 135.584 li
58.1445 135.875 li
58.224 135.927 li
58.6218 135.871 li
58.9701 136.269 li
59.146 136.47 li
59.5097 136.106 li
59.7734 136.445 li
59.8992 136.607 li
60.3378 136.387 li
60.5708 136.521 li
61.1087 138.403 li
61.7971 136.83 li
62.1785 136.557 li
62.2252 136.524 li
62.6145 135.81 li
62.975 135.398 li
63.2618 135.351 li
63.3189 135.341 li
63.681 135.082 li
63.9214 135.203 li
63.9422 135.213 li
64.402 135.344 li
64.4357 135.354 li
64.9082 135.354 li
65.0232 135.354 li
65.473 134.829 li
65.5268 134.766 li
65.9693 128.446 li
66.3291 126.287 li
66.4489 126.167 li
66.6784 126.702 li
66.7114 126.779 li
67.2217 127.071 li
67.4099 127.179 li
67.7796 126.703 li
67.9582 126.941 li
68.1183 127.155 li
68.6882 126.666 li
68.8484 126.666 li
69.2109 127.132 li
69.4082 127.386 li
69.8551 126.812 li
70.0309 127.017 li
70.0316 127.018 li
70.4701 127.519 li
70.696 127.777 li
71.214 126.914 li
71.5947 126.696 li
71.6396 126.67 li
71.8606 126.376 li
72.0951 126.644 li
72.2442 126.814 li
72.8354 126.392 li
73.1014 126.303 li
73.4645 126.407 li
73.5757 126.439 li
73.788 126.297 li
74.1127 127.132 li
74.2121 127.388 li
74.7455 127.121 li
75.0895 127.219 li
75.1582 127.239 li
75.6644 127.094 li
75.7747 127.063 li
75.9879 126.601 li
76.1881 126.973 li
76.3031 127.186 li
76.8587 126.908 li
77.2561 126.851 li
77.2593 126.851 li
77.6368 126.788 li
77.7055 126.777 li
78.0938 126.444 li
78.402 126.532 li
78.4562 126.547 li
78.8868 126.476 li
78.9008 126.473 li
79.118 126.411 li
79.4198 127.367 li
79.5337 127.727 li
80.1698 127.182 li
80.4157 127.223 li
80.787 127.329 li
81.183 127.669 li
81.1944 127.679 li
81.582 127.937 li
81.8176 128.094 li
82.3127 127.104 li
82.5332 127.104 li
82.6967 127.104 li
83.1721 126.017 li
83.431 125.832 li
83.6714 125.953 li
83.7413 125.988 li
84.2385 125.916 li
84.5957 125.916 li
84.7091 125.916 li
85.077 125.496 li
85.2695 125.625 li
85.3325 125.666 li
85.8279 125.666 li
86.1372 125.711 li
86.4502 126.18 li
86.5244 126.291 li
87.0957 126.291 li
87.2689 126.291 li
87.2875 126.242 li
87.6586 132.868 li
88.1582 132.858 li
88.4382 115.965 li
88.4713 116.434 li
88.4807 116.567 li
89.0342 116.884 li
89.2556 117.01 li
89.7025 116.191 li
89.9282 116.126 li
90.207 116.312 li
90.2261 116.325 li
90.6847 116.521 li
90.7521 116.55 li
91.1993 116.476 li
91.361 116.449 li
91.6539 115.277 li
91.802 115.637 li
92.0112 116.145 li
92.5732 115.02 li
92.8427 114.982 li
93.1796 115.038 li
93.1822 115.039 li
93.5901 115.097 li
93.9972 115.271 li
94.0068 115.275 li
94.2976 115.372 li
94.6881 116.098 li
94.8031 116.311 li
95.3422 116.041 li
95.5558 116.041 li
95.8659 116.765 li
95.8675 116.769 li
96.3217 117.742 li
96.7826 118.269 li
96.8572 118.354 li
97.3457 118.354 li
97.4591 118.354 li
97.7176 118.059 li
97.9312 118.521 li
98.1232 118.937 li
98.7971 117.878 li
98.9978 117.644 li
99.2455 117.856 li
99.3315 117.93 li
99.8811 117.851 li
100.028 117.831 li
100.45 116.704 li
100.58 116.445 li
100.791 117.29 li
100.907 117.753 li
101.614 116.945 li
101.925 116.841 li
101.935 116.838 li
102.159 116.742 li
102.494 117.46 li
102.722 117.948 li
103.304 116.687 li
103.71 116.281 li
103.82 116.171 li
104.115 116.887 li
104.137 116.942 li
104.62 117.356 li
104.764 117.48 li
105.139 117.23 li
105.433 117.481 li
105.577 117.605 li
105.952 117.355 li
106.245 117.606 li
106.298 117.652 li
106.742 117.726 li
106.745 117.726 li
107.185 117.789 li
107.221 117.794 li
107.694 117.726 li
107.891 117.698 li
108.282 112.817 li
108.712 109.256 li
108.861 109.031 li
109.086 109.32 li
109.299 109.594 li
109.877 108.727 li
110.129 108.185 li
110.322 108.488 li
110.382 108.582 li
110.867 108.663 li
110.905 108.669 li
111.381 108.601 li
111.464 108.59 li
111.897 108.156 li
111.935 108.119 li
112.318 107.134 li
112.492 107.163 li
112.548 107.172 li
113.039 107.032 li
113.102 107.014 li
113.394 106.722 li
113.593 106.954 li
113.742 107.128 li
114.282 106.743 li
114.555 106.788 li
114.61 106.797 li
115.102 106.657 li
115.19 106.632 li
115.394 106.326 li
115.63 106.73 li
115.638 106.744 li
116.086 107.32 li
116.26 107.544 li
116.685 107.118 li
116.926 107.29 li
117.281 107.704 li
117.4 107.844 li
118.007 107.584 li
118.032 107.573 li
118.334 107.357 li
118.561 107.546 li
118.779 107.728 li
119.152 107.142 li
119.319 107.42 li
119.335 107.446 li
119.794 107.906 li
119.885 107.997 li
120.387 107.913 li
120.466 107.9 li
120.926 107.44 li
121.164 107.338 li
121.419 107.593 li
121.619 107.794 li
122.105 107.169 li
122.246 107.24 li
122.648 107.757 li
122.74 107.875 li
123.16 107.805 li
123.513 108.057 li
123.562 108.093 li
124.06 108.164 li
124.184 108.182 li
124.427 107.939 li
124.697 108.363 li
124.979 108.806 li
125.392 107.567 li
125.544 107.718 li
125.748 107.922 li
126.256 107.245 li
126.55 107.119 li
126.902 107.219 li
127.029 107.256 li
127.42 106.93 li
127.583 106.953 li
127.923 108.255 li
128.527 109.464 li
129.222 108.768 li
129.462 108.449 li
129.7 108.62 li
129.823 108.707 li
130.333 108.453 li
130.376 108.431 li
130.737 108.019 li
130.954 108.091 li
131.044 108.121 li
131.455 107.945 li
131.711 108.092 li
132.053 108.89 li
132.152 109.12 li
132.819 108.834 li
132.893 108.802 li
133.294 108.134 li
133.71 107.718 li
134.085 107.343 li
134.387 107.041 li
134.571 107.146 li
134.91 108.334 li
135.346 115.12 li
135.846 115.108 li
136.106 99.5643 li
136.159 100.493 li
136.18 100.873 li
136.678 100.624 li
137.001 101.223 li
137.014 101.247 li
137.47 101.769 li
137.529 101.836 li
137.962 101.908 li
138.372 102.084 li
138.497 102.137 li
138.781 101.948 li
139.078 102.372 li
139.081 102.376 li
139.458 102.879 li
139.605 103.074 li
140.231 102.627 li
140.541 102.45 li
140.796 102.578 li
140.833 102.596 li
141.31 102.664 li
141.541 102.697 li
141.877 101.13 li
141.995 101.231 li
142.025 101.256 li
142.497 101.459 li
142.544 101.479 li
142.936 101.479 li
143.34 101.594 li
143.539 101.651 li
143.876 100.977 li
144.075 101.12 li
144.216 101.22 li
144.734 100.875 li
144.747 100.866 li
145.11 100.555 li
145.435 100.601 li
145.62 100.628 li
146.05 99.6958 li
146.357 99.4323 li
146.617 99.4756 li
146.689 99.4876 li
147.185 99.2754 li
147.365 99.2154 li
147.697 99.7382 li
147.876 100.02 li
148.331 99.5007 li
148.521 99.754 li
148.522 99.7552 li
148.961 100.32 li
149.221 100.654 li
149.761 99.3938 li
150.152 98.5572 li
150.425 98.4662 li
150.448 98.4584 li
150.816 98.2483 li
151.101 98.3299 li
151.436 98.6086 li
151.584 98.7321 li
152.163 98.3188 li
152.52 98.1401 li
152.591 98.1047 li
152.854 97.6151 li
153.067 97.98 li
153.071 97.9865 li
153.45 98.5552 li
153.653 98.8596 li
154.069 98.2652 li
154.251 98.5987 li
154.423 98.9133 li
155.022 98.229 li
155.18 98.229 li
155.544 98.5933 li
155.694 98.743 li
156.238 98.354 li
156.533 98.354 li
156.647 98.354 li
157.159 97.7686 li
157.215 97.7046 li
157.596 91.6761 li
158.033 48.4243 li
158.338 42.6843 li
158.351 42.7247 li
158.785 45.7626 li
159.161 48.7641 li
159.6 51.5293 li
159.979 53.0433 li
160.417 54.6094 li
160.794 55.9261 li
161.357 57.6968 li
161.817 57.2369 li
162.051 57.8223 li
162.105 57.9565 li
162.517 58.0155 li
162.882 59.5348 li
163.343 59.7324 li
163.678 60.5155 li
163.683 60.5257 li
164.126 61.348 li
164.153 61.3992 li
164.581 61.7048 li
164.928 62.5155 li
164.956 62.5798 li
165.388 62.8886 li
165.737 63.8173 li
165.741 63.8296 li
166.185 64.7163 li
166.212 64.7718 li
166.676 65.1028 li
167.031 65.5172 li
167.032 65.5183 li
167.47 66.0191 li
167.502 66.0561 li
167.865 66.2373 li
168.266 66.8104 li
168.302 66.8623 li
168.734 67.0781 li
168.77 67.0962 li
169.248 67.1645 li
169.301 67.172 li
169.624 67.0796 li
169.896 67.442 li
169.999 67.5796 li
170.353 67.4784 li
170.685 68.8049 li
171.183 69.2318 li
171.22 69.2637 li
171.533 69.368 li
171.96 70.404 li
172.406 70.659 li
172.747 71.3413 li
172.775 71.3968 li
173.246 71.7334 li
173.587 72.0744 li
174.01 72.7387 li
174.131 72.9289 li
174.491 72.7491 li
174.813 73.348 li
174.815 73.3523 li
175.255 74.1055 li
175.373 74.3079 li
175.951 74.0189 li
176.314 73.8631 li
176.487 73.892 li
176.869 74.7102 li
176.959 74.9035 li
177.602 74.7199 li
177.653 74.7054 li
177.859 74.5331 li
178.141 74.9354 li
178.168 74.9739 li
178.582 75.25 li
178.726 75.3457 li
179.238 74.9795 li
179.533 74.9795 li
179.551 74.9795 li
179.937 74.9244 li
180.248 75.0579 li
180.583 75.5045 li
180.594 75.5187 li
181.044 75.9688 li
181.073 75.9974 li
181.406 76.1641 li
181.807 77.0227 li
181.843 77.1016 li
182.296 77.3281 li
182.48 77.4197 li
182.869 76.919 li
183.106 77.1563 li
183.124 77.1737 li
183.52 77.4375 li
183.723 77.5731 li
184.305 76.7407 li
184.443 76.5114 li
184.682 77.0227 li
184.94 77.577 li
185.367 76.369 li
185.523 76.5705 li
185.528 76.5763 li
185.97 77.0816 li
186.079 77.2067 li
186.506 77.0645 li
186.847 77.259 li
187.076 77.3902 li
187.382 76.7792 li
187.578 77.0604 li
187.653 77.167 li
188.158 77.167 li
188.492 77.167 li
188.856 77.5313 li
189.047 77.7222 li
189.57 77.1125 li
189.836 76.9607 li
190.03 77.0904 li
190.438 77.848 li
190.509 77.9795 li
191.037 77.9795 li
191.359 78.1406 li
191.552 78.2371 li
192.053 77.5213 li
192.209 77.4953 li
192.558 77.7943 li
192.761 77.968 li
193.256 77.3079 li
193.601 77.1598 li
193.896 77.1177 li
194.186 77.359 li
194.348 77.4943 li
194.77 77.1325 li
194.981 77.3438 li
195.055 77.417 li
195.505 77.417 li
195.811 77.6715 li
195.959 77.7951 li
196.358 77.5099 li
196.631 77.8603 li
196.994 78.6468 li
197.12 78.921 li
197.804 78.4329 li
197.863 78.3904 li
198.124 77.7368 li
198.294 77.9063 li
198.547 78.1598 li
198.911 77.3715 li
199.095 77.5816 li
199.114 77.6035 li
199.575 77.9329 li
199.679 78.0069 li
200.054 77.8819 li
200.388 78.1204 li
200.634 78.296 li
201.107 77.2694 li
201.276 77.1487 li
201.572 77.6137 li
201.601 77.6582 li
202.02 77.9375 li
202.052 77.9591 li
202.527 78.0949 li
202.692 78.1422 li
203.038 77.681 li
203.284 77.8215 li
203.29 77.825 li
203.671 78.0156 li
203.775 78.0674 li
204.19 77.8897 li
204.513 78.1204 li
204.543 78.1423 li
204.954 78.2792 li
205.131 78.3381 li
205.639 77.6123 li
205.958 77.4531 li
206.019 77.4221 li
206.225 77.099 li
206.424 77.6298 li
206.654 78.2427 li
207.212 76.8074 li
207.388 76.9329 li
207.528 77.0332 li
207.934 76.7626 li
208.247 76.8968 li
208.428 76.9742 li
208.832 76.4354 li
209.012 76.4612 li
209.325 76.9307 li
209.564 77.2891 li
210.167 76.0843 li
210.523 75.8298 li
210.789 75.7411 li
211.152 75.8449 li
211.306 75.8889 li
211.598 75.5489 li
211.845 75.8316 li
211.867 75.8566 li
212.27 76.125 li
212.398 76.2107 li
212.97 75.884 li
213.407 75.634 li
213.445 75.6126 li
213.773 75.2295 li
213.981 75.2295 li
214.281 75.5797 li
214.469 75.7989 li
215.059 75.1244 li
215.227 75.0521 li
215.497 75.5913 li
215.546 75.6897 li
216.09 75.8449 li
216.183 75.8716 li
216.645 75.6406 li
216.702 75.6123 li
217.176 74.9354 li
217.219 74.8726 li
217.596 51.296 li
218.033 12.5568 li
218.244 10.5941 li
218.348 11.3868 li
218.349 11.3928 li
218.788 13.8396 li
219.162 15.6496 li
219.6 18.4033 li
219.978 19.977 li
220.416 21.6672 li
220.854 23.4196 li
221.228 24.7274 li
221.669 26.8054 li
222.044 27.6812 li
222.482 29.6846 li
222.869 30.5218 li
223.325 31.5001 li
223.772 31.947 li
224.131 32.5456 li
224.133 32.5481 li
224.555 33.211 li
224.921 34.371 li
225.359 35.6218 li
225.793 36.9861 li
226.24 38.6987 li
226.69 38.5055 li
226.982 39.4298 li
227.001 39.488 li
227.434 39.9218 li
227.859 41.4769 li
228.423 41.3155 li
228.726 41.5313 li
229.075 42.0557 li
229.191 42.2287 li
229.791 41.9711 li
229.974 41.9408 li
230.322 42.4887 li
230.427 42.6534 li
230.841 42.5155 li
231.153 42.8283 li
231.577 43.4329 li
231.95 43.9932 li
231.959 44.0068 li
232.408 44.5191 li
232.452 44.5702 li
232.793 44.6839 li
233.185 45.4663 li
233.388 45.8736 li
233.771 45.235 li
234.001 45.6605 li
234.096 45.8376 li
234.542 45.7101 li
234.819 46.1706 li
234.904 46.313 li
235.468 46.2324 li
235.716 46.2739 li
236.095 46.7066 li
236.324 46.9683 li
236.899 45.9823 li
237.073 45.8954 li
237.388 46.1204 li
237.56 46.2435 li
238.061 45.7424 li
238.412 45.542 li
238.703 45.542 li
239.04 45.5902 li
239.419 45.9688 li
239.528 46.078 li
239.944 45.9395 li
240.233 46.1048 li
240.575 46.6182 li
240.584 46.6318 li
241.018 47.1272 li
241.381 47.7331 li
241.494 47.9202 li
242.05 47.6818 li
242.402 47.7824 li
242.476 47.8036 li
242.708 47.7264 li
243.054 48.5172 li
243.061 48.532 li
243.444 49.1706 li
243.609 49.4452 li
243.977 49.0772 li
244.231 49.9263 li
244.293 50.1324 li
244.76 50.0657 li
245.119 50.8352 li
245.338 51.304 li
245.674 50.6311 li
245.921 51.371 li
246.049 51.7548 li
246.651 51.1527 li
246.948 51.1103 li
247.267 51.2167 li
247.305 51.2295 li
247.691 51.2295 li
248.002 51.4966 li
248.41 52.8545 li
249.033 52.8545 li
249.092 52.8545 li
249.29 52.7555 li
249.619 53.4602 li
249.709 53.6535 li
250.087 53.5457 li
250.444 55.514 li
250.978 55.5902 li
251.288 55.9003 li
251.72 56.3941 li
251.91 56.6114 li
252.453 55.9778 li
252.671 55.8224 li
252.961 56.1955 li
253.069 56.3351 li
253.491 56.1944 li
253.825 56.4329 li
253.91 56.4931 li
254.387 56.4136 li
254.535 56.3888 li
255.015 54.9504 li
255.204 54.5711 li
255.398 54.8205 li
255.531 54.9916 li
256.1 54.667 li
256.408 54.667 li
256.522 54.667 li
256.975 54.1489 li
257.241 54.1045 li
257.51 54.1045 li
257.814 54.6617 li
257.949 54.9095 li
258.411 54.5796 li
258.703 54.9979 li
258.827 55.1746 li
259.342 54.917 li
259.566 54.917 li
259.872 55.5288 li
260.049 55.8836 li
260.544 55.2471 li
260.783 55.5191 li
260.857 55.6045 li
261.346 55.6045 li
261.783 55.6045 li
261.842 55.6045 li
262.15 55.4504 li
262.391 55.5879 li
262.735 56.5627 li
262.835 56.8451 li
263.491 56.4702 li
263.843 56.4199 li
264.18 56.4761 li
264.2 56.4795 li
264.658 56.4795 li
264.699 56.4795 li
265.112 56.3417 li
265.202 56.3119 li
265.523 55.7606 li
265.669 55.9063 li
265.693 55.9299 li
266.159 56.1966 li
266.401 56.3346 li
266.931 55.1229 li
267.272 54.7813 li
267.301 54.7525 li
267.602 54.1515 li
267.696 54.2459 li
268.257 55.6089 li
268.793 55.0728 li
269.09 55.1574 li
269.205 55.1905 li
269.725 54.8193 li
270.062 54.651 li
270.477 54.5324 li
270.482 54.5308 li
270.625 54.4832 li
271.165 56.1034 li
271.719 55.0873 li
271.965 55.1574 li
272.158 55.2126 li
272.43 54.7076 li
272.612 55.1923 li
272.628 55.2349 li
273.095 55.7691 li
273.187 55.874 li
273.644 55.7979 li
273.998 55.8991 li
274.343 56.0965 li
274.685 56.7788 li
274.872 57.1543 li
275.555 56.1782 li
275.686 55.961 li
275.929 56.5172 li
276.089 56.8821 li
276.547 56.3471 li
276.794 56.5938 li
276.809 56.6084 li
277.263 56.9329 li
277.501 57.103 li
277.958 56.1897 li
278.178 56.1266 li
278.429 56.2941 li
278.845 56.7691 li
278.989 56.9341 li
279.547 56.5625 li
279.581 56.54 li
279.993 56.0099 li
280.159 55.9623 li
280.439 56.4742 li
280.696 56.9463 li
281.154 55.7682 li
281.263 55.9307 li
281.337 56.042 li
281.908 56.042 li
281.999 56.042 li
282.201 55.8736 li
282.497 56.4663 li
282.712 56.8971 li
283.15 56.0845 li
283.31 56.4038 li
283.497 56.7793 li
284.069 55.9631 li
284.267 56.0292 li
284.323 56.0478 li
284.819 55.977 li
284.851 55.9723 li
285.319 55.7718 li
285.326 55.7689 li
285.638 55.613 li
285.998 55.6645 li
286.056 55.6728 li
286.487 55.5292 li
286.497 55.5259 li
286.944 55.3343 li
286.965 55.3252 li
287.177 55.1841 li
287.47 55.5191 li
287.482 55.5325 li
287.933 55.9193 li
288.167 56.1202 li
288.581 55.3614 li
288.81 55.4593 li
289.026 55.5521 li
289.329 54.9461 li
289.523 55.1955 li
289.558 55.2402 li
289.984 55.4531 li
290.214 55.568 li
290.865 54.1712 li
290.412 53.9597 li
289.978 54.891 li
289.883 54.8438 li
289.481 54.326 li
289.237 54.0129 li
288.79 54.9068 li
288.569 54.8122 li
288.36 54.7226 li
288.024 55.3388 li
287.835 55.1764 li
287.409 54.6899 li
287.264 54.5248 li
286.726 54.8837 li
286.319 55.0581 li
286.01 55.1612 li
285.631 55.107 li
285.554 55.096 li
285.115 55.3151 li
284.715 55.4867 li
284.369 55.5362 li
284.05 55.4298 li
283.873 55.3708 li
283.569 55.8047 li
283.382 55.4302 li
283.166 54.9994 li
282.729 55.8119 li
282.507 55.3677 li
282.366 55.0853 li
281.818 55.542 li
281.604 55.542 li
281.304 55.0908 li
281.037 54.6907 li
280.62 55.7626 li
280.503 55.5473 li
280.407 55.3716 li
279.777 55.5516 li
279.698 55.5741 li
279.236 56.169 li
279.077 56.2748 li
278.784 55.9399 li
278.762 55.9149 li
278.359 55.6465 li
278.263 55.5823 li
277.715 55.7391 li
277.609 55.7693 li
277.315 56.356 li
277.133 56.2256 li
276.71 55.8027 li
276.519 55.6118 li
276.228 55.9519 li
275.95 55.3168 li
275.756 54.8729 li
275.136 55.9056 li
274.944 56.1797 li
274.757 55.8052 li
274.723 55.7375 li
274.22 55.4499 li
274.193 55.4349 li
273.727 55.3016 li
273.673 55.2861 li
273.38 55.335 li
273.064 54.9741 li
272.705 54.0167 li
272.511 53.5014 li
271.908 54.6213 li
271.664 54.5516 li
271.472 54.4967 li
271.276 54.8555 li
271.02 54.0879 li
270.941 53.8508 li
270.334 54.0531 li
269.902 54.1766 li
269.88 54.183 li
269.484 54.3809 li
269.466 54.3897 li
269.111 54.6435 li
268.789 54.5516 li
268.648 54.5112 li
268.434 54.725 li
268.139 54.0093 li
268.12 53.963 li
267.71 53.5527 li
267.465 53.3075 li
266.89 54.4565 li
266.544 54.8027 li
266.51 54.8361 li
266.166 55.6244 li
265.999 55.529 li
265.647 55.1777 li
265.418 54.9484 li
264.865 55.8971 li
264.618 55.9795 li
264.241 55.9795 li
263.887 55.9204 li
263.849 55.914 li
263.373 55.982 li
263.326 55.9888 li
263.107 56.1138 li
262.831 55.3338 li
262.8 55.2461 li
262.282 54.9499 li
262.166 54.8835 li
261.724 55.1045 li
261.346 55.1045 li
261.084 55.1045 li
260.721 54.6899 li
260.522 54.4619 li
260.142 54.9504 li
259.944 54.5552 li
259.875 54.417 li
259.283 54.417 li
259.224 54.417 li
258.989 54.5344 li
258.676 54.0861 li
258.531 53.8793 li
258.117 54.1745 li
257.878 53.7348 li
257.807 53.6045 li
257.221 53.6045 li
257.2 53.6045 li
256.805 53.6704 li
256.716 53.6851 li
256.295 54.167 li
256.033 54.167 li
255.967 54.167 li
255.66 54.3423 li
255.356 53.951 li
255.112 53.6379 li
254.552 54.7585 li
254.156 55.9451 li
254.032 55.9659 li
253.679 55.7136 li
253.575 55.6395 li
253.247 55.7489 li
252.918 55.326 li
252.771 55.1365 li
252.138 55.5886 li
252.113 55.6062 li
251.906 55.8476 li
251.659 55.5649 li
251.653 55.5585 li
251.272 55.1777 li
251.214 55.1188 li
250.872 55.07 li
250.48 52.9133 li
249.982 53.0555 li
249.635 52.3113 li
249.526 52.0785 li
248.974 52.3545 li
248.782 52.3545 li
248.439 51.2124 li
247.946 50.7897 li
247.876 50.7295 li
247.386 50.7295 li
247.05 50.6173 li
246.994 50.5987 li
246.498 50.6695 li
246.415 50.6813 li
246.267 50.8292 li
245.958 49.9004 li
245.767 49.3279 li
245.353 50.1549 li
245.135 49.6863 li
245.056 49.5183 li
244.648 49.5766 li
244.215 48.1317 li
243.708 48.6388 li
243.506 48.3022 li
242.983 47.1076 li
242.465 47.2804 li
242.102 47.1766 li
242.016 47.1522 li
241.698 47.2887 li
241.435 46.8509 li
241.424 46.8316 li
240.982 46.3273 li
240.616 45.7783 li
240.583 45.7292 li
240.095 45.4499 li
239.998 45.3945 li
239.663 45.506 li
239.335 45.1777 li
239.276 45.1188 li
238.756 45.0445 li
238.738 45.042 li
238.346 45.042 li
238.279 45.042 li
237.784 45.3249 li
237.755 45.3416 li
237.506 45.5905 li
237.241 45.4011 li
237.119 45.3136 li
236.609 45.5684 li
236.542 45.6017 li
236.242 46.1157 li
236.034 45.8774 li
235.975 45.8101 li
235.512 45.7329 li
235.474 45.7265 li
235.162 45.771 li
234.873 45.2884 li
234.774 45.1239 li
234.345 45.2463 li
234.003 44.611 li
233.795 44.224 li
233.428 44.8353 li
233.194 44.3677 li
233.148 44.2751 li
232.739 44.1388 li
232.357 43.7023 li
231.991 43.1533 li
231.99 43.1511 li
231.551 42.5236 li
231.538 42.5057 li
231.085 42.0527 li
230.976 41.9435 li
230.639 42.0556 li
230.307 41.5328 li
230.218 41.3932 li
229.68 41.4829 li
229.65 41.4878 li
229.376 41.6053 li
229.116 41.2158 li
229.091 41.1777 li
228.616 40.8386 li
228.518 40.7685 li
228.208 40.8571 li
227.882 39.6622 li
227.441 39.221 li
227.001 37.8285 li
226.577 38.0103 li
226.273 36.8475 li
225.833 35.4626 li
225.396 34.2135 li
225.012 32.9979 li
224.559 32.2861 li
224.185 31.6634 li
224.169 31.637 li
223.741 31.2089 li
223.322 30.3113 li
223.324 30.3145 li
222.959 29.5244 li
222.522 27.5278 li
222.148 26.6536 li
221.713 24.6065 li
221.337 23.2902 li
220.9 21.5421 li
220.463 19.8573 li
220.091 18.3055 li
219.654 15.5597 li
219.279 13.7441 li
218.843 11.316 li
218.469 8.44716 li
217.972 8.45272 li
217.533 12.5272 li
217.096 51.2892 li
216.722 74.7114 li
216.365 75.2217 li
216.133 75.3374 li
215.895 75.2693 li
215.569 74.6177 li
215.464 74.4068 li
214.81 74.6872 li
214.757 74.7096 li
214.473 75.0351 li
214.286 74.8168 li
214.211 74.7295 li
213.658 74.7295 li
213.543 74.7295 li
213.122 75.2214 li
212.722 75.4499 li
212.418 75.6233 li
212.199 75.4774 li
211.784 75.0024 li
211.594 74.7851 li
211.135 75.3201 li
210.852 75.2391 li
210.777 75.2178 li
210.329 75.3673 li
210.293 75.3792 li
209.825 75.7136 li
209.775 75.7496 li
209.502 76.2949 li
209.366 76.0908 li
209.304 75.9978 li
208.756 75.9195 li
208.609 75.8986 li
208.264 76.3598 li
208.007 76.2497 li
207.882 76.1964 li
207.538 76.4258 li
207.241 76.2136 li
206.979 76.0266 li
206.662 76.8413 li
206.517 76.4542 li
206.341 75.985 li
205.672 77.0368 li
205.359 77.1934 li
205.302 77.2217 li
204.935 77.7458 li
204.773 77.6917 li
204.366 77.4011 li
204.252 77.3193 li
203.791 77.5165 li
203.526 77.3839 li
203.095 77.1374 li
202.903 77.0279 li
202.499 77.5668 li
202.264 77.4998 li
201.966 77.3007 li
201.557 76.6578 li
201.415 76.4352 li
200.763 76.9011 li
200.709 76.9396 li
200.433 77.538 li
200.241 77.4011 li
200.137 77.327 li
199.762 77.4521 li
199.452 77.2305 li
199.034 76.7524 li
198.78 76.4624 li
198.394 77.2992 li
198.21 77.1152 li
197.942 76.8471 li
197.453 78.0686 li
197.321 78.163 li
197.073 77.6247 li
197.061 77.5987 li
196.606 77.0135 li
196.458 76.824 li
195.982 77.1638 li
195.756 76.9749 li
195.686 76.917 li
195.262 76.917 li
194.96 76.6152 li
194.796 76.4515 li
194.343 76.8397 li
194.131 76.6624 li
194.045 76.5913 li
193.498 76.6695 li
193.465 76.6742 li
192.997 76.8747 li
192.936 76.901 li
192.681 77.241 li
192.446 77.0397 li
192.357 76.9637 li
191.867 77.0454 li
191.764 77.0626 li
191.39 77.5969 li
191.208 77.5059 li
191.155 77.4795 li
190.808 77.4795 li
190.441 76.7985 li
190.411 76.7436 li
189.984 76.459 li
189.856 76.3733 li
189.284 76.6999 li
189.247 76.7214 li
189.019 76.9868 li
188.772 76.7402 li
188.699 76.667 li
188.158 76.667 li
187.913 76.667 li
187.551 76.1486 li
187.31 75.8047 li
186.865 76.6938 li
186.657 76.5749 li
186.56 76.5195 li
186.237 76.6272 li
185.913 76.2577 li
185.481 75.701 li
185.2 75.3399 li
184.876 76.2569 li
184.697 75.8738 li
184.498 75.4475 li
183.886 76.4683 li
183.594 76.8859 li
183.442 76.7852 li
183.022 76.3652 li
182.822 76.165 li
182.337 76.7892 li
182.223 76.7323 li
181.822 75.8738 li
181.785 75.7948 li
181.369 75.5865 li
180.973 75.1903 li
180.608 74.7045 li
180.568 74.651 li
180.069 74.4372 li
180.005 74.4096 li
179.515 74.4795 li
179.158 74.4795 li
179.078 74.4795 li
178.716 74.7383 li
178.524 74.6101 li
178.113 74.0236 li
177.957 73.8008 li
177.414 74.2536 li
177.232 74.3055 li
176.885 73.5613 li
176.829 73.442 li
176.324 73.3579 li
176.252 73.3458 li
175.747 73.5622 li
175.74 73.5652 li
175.569 73.651 li
175.251 73.1073 li
174.816 72.2985 li
174.701 72.0849 li
174.311 72.28 li
173.994 71.7828 li
173.979 71.7596 li
173.585 71.3652 li
173.57 71.3506 li
173.167 71.0621 li
172.819 70.3677 li
172.785 70.3 li
172.357 70.055 li
171.908 68.966 li
171.471 68.8203 li
171.131 68.529 li
170.713 66.8556 li
170.192 67.0043 li
169.921 66.642 li
169.817 66.5043 li
169.266 66.662 li
168.921 66.6127 li
168.639 66.4717 li
168.238 65.8986 li
168.202 65.8467 li
167.814 65.6529 li
167.41 65.1913 li
167.036 64.7543 li
167.016 64.7312 li
166.604 64.4371 li
166.2 63.6294 li
165.803 62.5703 li
165.36 62.2542 li
165.013 61.4435 li
164.985 61.3792 li
164.538 61.0598 li
164.134 60.3084 li
163.763 59.4435 li
163.724 59.3516 li
163.309 59.1741 li
162.924 57.5685 li
162.462 57.5024 li
162.14 56.6991 li
161.999 56.3471 li
161.584 56.7622 li
161.273 55.7823 li
160.899 54.476 li
160.462 52.9155 li
160.091 51.4295 li
159.656 48.6944 li
159.281 45.6967 li
158.84 42.6093 li
158.395 41.2754 li
157.909 41.3412 li
157.533 48.4094 li
157.096 91.6579 li
156.727 97.5034 li
156.42 97.854 li
156.158 97.854 li
156.078 97.854 li
155.748 98.09 li
155.46 97.8022 li
155.387 97.729 li
154.908 97.729 li
154.795 97.729 li
154.519 98.0446 li
154.315 97.6718 li
154.122 97.3178 li
153.663 97.9734 li
153.495 97.7215 li
153.062 96.978 li
152.837 96.5929 li
152.226 97.7283 li
151.921 97.8804 li
151.904 97.8892 li
151.607 98.1009 li
151.381 97.9119 li
151.34 97.8781 li
150.852 97.7386 li
150.751 97.7097 li
150.243 97.9996 li
149.892 98.1168 li
149.79 98.1508 li
149.305 99.1888 li
149.095 99.6785 li
148.92 99.4524 li
148.546 98.954 li
148.361 98.7073 li
147.94 99.1881 li
147.682 98.7823 li
147.577 98.6176 li
147.017 98.8043 li
147.007 98.8076 li
146.627 98.9704 li
146.324 98.9199 li
146.209 98.9007 li
145.683 99.3517 li
145.642 99.3872 li
145.322 100.08 li
145.069 100.044 li
144.956 100.028 li
144.444 100.467 li
144.226 100.613 li
143.929 100.401 li
143.69 100.23 li
143.277 101.057 li
143.039 100.989 li
143.006 100.979 li
142.647 100.979 li
142.292 100.827 li
141.883 100.477 li
141.564 100.203 li
141.15 102.136 li
140.984 102.112 li
140.645 101.943 li
140.525 101.883 li
139.972 102.199 li
139.961 102.206 li
139.712 102.384 li
139.486 102.082 li
139.051 101.461 li
138.91 101.26 li
138.445 101.571 li
138.132 101.437 li
138.104 101.425 li
137.787 101.372 li
137.427 100.961 li
137.003 100.173 li
136.888 99.9594 li
136.636 100.085 li
136.22 92.7154 li
135.721 92.7253 li
135.449 108.923 li
135.408 108.275 li
135.406 108.249 li
134.996 106.812 li
134.47 106.512 li
134.304 106.417 li
133.731 106.99 li
133.356 107.365 li
132.919 107.802 li
132.897 107.824 li
132.548 108.406 li
132.414 108.463 li
132.138 107.818 li
132.105 107.741 li
131.595 107.449 li
131.487 107.388 li
131.022 107.587 li
130.737 107.492 li
130.58 107.439 li
130.065 108.027 li
129.869 108.126 li
129.554 107.901 li
129.355 107.759 li
128.844 108.44 li
128.664 108.619 li
128.393 108.078 li
127.983 106.505 li
127.381 106.419 li
127.271 106.403 li
126.912 106.702 li
126.602 106.614 li
126.516 106.589 li
125.997 106.812 li
125.936 106.838 li
125.694 107.161 li
125.46 106.927 li
125.174 106.641 li
124.837 107.652 li
124.682 107.407 li
124.514 107.144 li
124.007 107.651 li
123.754 107.615 li
123.366 107.338 li
123.282 107.278 li
122.952 107.333 li
122.606 106.888 li
122.571 106.843 li
122.145 106.63 li
121.962 106.539 li
121.572 107.039 li
121.397 106.865 li
121.278 106.745 li
120.685 106.999 li
120.64 107.018 li
120.226 107.433 li
120.056 107.461 li
119.732 107.136 li
119.373 106.538 li
119.164 106.191 li
118.662 106.98 li
118.506 106.849 li
118.357 106.726 li
117.785 107.135 li
117.541 107.239 li
117.286 106.941 li
117.266 106.918 li
116.804 106.588 li
116.631 106.465 li
116.307 106.789 li
116.053 106.464 li
115.624 105.728 li
115.422 105.382 li
114.876 106.201 li
114.581 106.286 li
114.262 106.232 li
114.16 106.215 li
113.824 106.455 li
113.598 106.191 li
113.422 105.986 li
112.84 106.569 li
112.519 106.661 li
112.199 106.607 li
111.999 106.574 li
111.507 107.839 li
111.228 108.118 li
110.911 108.164 li
110.684 108.126 li
110.307 107.532 li
110.062 107.148 li
109.44 108.481 li
109.268 108.739 li
109.043 108.451 li
108.83 108.177 li
108.23 109.077 li
107.784 112.767 li
107.425 117.26 li
107.221 117.289 li
106.822 117.232 li
106.518 117.181 li
106.133 116.852 li
105.99 116.728 li
105.615 116.978 li
105.321 116.727 li
105.177 116.603 li
104.802 116.853 li
104.554 116.641 li
103.997 115.287 li
103.356 115.927 li
102.919 116.365 li
102.887 116.396 li
102.719 116.76 li
102.51 116.311 li
102.407 116.091 li
101.757 116.37 li
101.392 116.492 li
101.327 116.513 li
101.16 116.705 li
100.901 115.668 li
100.737 115.013 li
99.9912 116.504 li
99.6636 117.377 li
99.4849 117.403 li
99.1334 117.102 li
98.9436 116.939 li
98.4059 117.566 li
98.3943 117.58 li
98.1932 117.896 li
98.0102 117.499 li
97.8487 117.149 li
97.2323 117.854 li
97.0841 117.854 li
96.7447 117.466 li
96.3239 116.564 li
95.9505 115.693 li
95.8855 115.542 li
95.2832 115.542 li
95.2242 115.542 li
95.0133 115.647 li
94.6908 115.048 li
94.6438 114.961 li
94.1846 114.808 li
93.7567 114.624 li
93.7263 114.611 li
93.259 114.544 li
92.8868 114.482 li
92.8486 114.476 li
92.3728 114.544 li
92.2431 114.563 li
92.0552 114.938 li
91.8269 114.384 li
91.5375 113.681 li
90.9554 116.009 li
90.8143 116.033 li
90.4653 115.883 li
90.1094 115.646 li
90.0132 115.582 li
89.4645 115.739 li
89.3639 115.767 li
89.0608 116.323 li
88.9607 116.266 li
88.5326 110.211 li
88.0332 110.225 li
87.7724 125.959 li
87.7203 125.028 li
87.2366 124.954 li
86.9224 125.791 li
86.792 125.791 li
86.4912 125.34 li
86.4292 125.247 li
85.8811 125.169 li
85.8635 125.167 li
85.4839 125.167 li
85.1719 124.958 li
84.9894 124.837 li
84.4823 125.416 li
84.2207 125.417 li
84.2029 125.417 li
83.8251 125.47 li
83.52 125.318 li
83.3854 125.251 li
82.8254 125.651 li
82.7693 125.691 li
82.3697 126.604 li
82.1582 126.604 li
82.0037 126.604 li
81.6237 127.364 li
81.497 127.279 li
81.0709 126.914 li
81.0294 126.879 li
80.5394 126.739 li
80.5257 126.735 li
80.1368 126.67 li
80.0216 126.651 li
79.7827 126.856 li
79.5216 126.029 li
79.4483 125.797 li
78.7906 125.985 li
78.4852 126.036 li
78.1019 125.926 li
77.9726 125.889 li
77.4859 126.306 li
77.1825 126.357 li
76.7478 126.419 li
76.7077 126.425 li
76.5133 126.522 li
76.1908 125.923 li
75.9535 125.482 li
75.4168 126.645 li
75.1582 126.719 li
74.7894 126.614 li
74.6959 126.587 li
74.4793 126.695 li
74.1412 125.826 li
74.0284 125.536 li
73.4907 125.894 li
73.1644 125.801 li
73.09 125.78 li
72.6416 125.929 li
72.6059 125.941 li
72.3222 126.144 li
72.0338 125.814 li
71.8307 125.582 li
71.3017 126.288 li
70.9092 126.512 li
70.8524 126.544 li
70.6204 126.931 li
70.4099 126.691 li
70.0355 126.254 li
69.8363 126.021 li
69.4082 126.572 li
69.168 126.263 li
69.093 126.167 li
68.5957 126.167 li
68.5032 126.167 li
68.1981 126.428 li
67.9832 126.142 li
67.7868 125.88 li
67.2815 126.529 li
67.105 126.429 li
66.763 125.631 li
66.6175 125.291 li
65.8623 126.046 li
65.4721 128.387 li
65.0396 134.567 li
64.7932 134.854 li
64.5057 134.854 li
64.1242 134.745 li
63.77 134.568 li
63.6354 134.501 li
63.1225 134.867 li
62.8046 134.92 li
62.7164 134.935 li
62.2201 135.502 li
62.2019 135.523 li
61.8412 136.184 li
61.4504 136.463 li
61.3943 136.503 li
61.2077 136.93 li
61.0236 136.285 li
60.9956 136.187 li
60.4697 135.887 li
60.3536 135.821 li
60.0422 135.976 li
59.7305 135.576 li
59.5567 135.352 li
59.1704 135.738 li
58.9088 135.439 li
58.8195 135.337 li
58.3424 135.405 li
58.1079 135.249 li
57.4683 133.787 li
56.9127 135.084 li
56.5895 135.176 li
56.5742 135.18 li
56.1317 135.37 li
55.7666 135.492 li
55.7569 135.495 li
55.3097 135.687 li
55.2483 135.713 li
54.9933 136.053 li
54.7584 135.852 li
54.5826 135.701 li
54.1029 136.181 li
53.8999 136.21 li
53.5505 135.711 li
53.3296 135.395 li
52.8956 136.118 li
52.6785 135.963 li
52.5749 135.889 li
52.0791 136.054 li
52.0008 136.08 li
51.6868 136.529 li
51.5225 136.365 li
51.3874 136.23 li
50.7842 136.574 li
50.7636 136.586 li
50.308 136.977 li
50.2772 137.003 li
50.1156 137.272 li
49.8818 136.805 li
49.6781 136.397 li
49.1811 137.226 li
48.9442 137.124 li
48.897 137.104 li
48.4707 137.104 li
48.3214 137.104 li
48.2442 137.247 li
47.8455 127.906 li
47.3457 127.913 li
47.0813 148.67 li
47.033 147.593 li
47.0286 147.496 li
46.585 147.052 li
46.1475 146.615 li
45.9707 146.438 li
45.4336 146.975 li
45.0349 147.26 li
44.7288 147.391 li
44.4575 147.255 li
44.2077 147.13 li
43.5872 148.815 li
44.0564 148.988 li
cp
0.905882 0.901961 0.00392157 0 cmyk
f
295.564 3.44824 mo
295.564 162.385 li
295.752 162.385 li
295.752 3.44824 li
cp
38.6895 3.63574 mo
295.752 3.63574 li
295.752 3.44824 li
38.6895 3.44824 li
cp
38.877 162.385 mo
38.877 3.44824 li
38.6895 3.44824 li
38.6895 162.385 li
cp
295.752 162.198 mo
38.6895 162.198 li
38.6895 162.385 li
295.752 162.385 li
cp
0 0 0 1 cmyk
f
44.002 162.292 mo
44.002 159.292 li
43.8145 159.292 li
43.8145 162.292 li
f
85.127 162.292 mo
85.127 159.292 li
84.9395 159.292 li
84.9395 162.292 li
cp
76.877 162.292 mo
76.877 160.479 li
76.6895 160.479 li
76.6895 162.292 li
cp
68.6895 162.292 mo
68.6895 160.479 li
68.502 160.479 li
68.502 162.292 li
cp
60.4395 162.292 mo
60.4395 160.479 li
60.252 160.479 li
60.252 162.292 li
cp
52.252 162.292 mo
52.252 160.479 li
52.0645 160.479 li
52.0645 162.292 li
cp
f
126.189 162.292 mo
126.189 159.292 li
126.002 159.292 li
126.002 162.292 li
cp
118.002 162.292 mo
118.002 160.479 li
117.814 160.479 li
117.814 162.292 li
cp
109.752 162.292 mo
109.752 160.479 li
109.564 160.479 li
109.564 162.292 li
cp
101.564 162.292 mo
101.564 160.479 li
101.377 160.479 li
101.377 162.292 li
cp
93.3145 162.292 mo
93.3145 160.479 li
93.127 160.479 li
93.127 162.292 li
cp
f
167.314 162.292 mo
167.314 159.292 li
167.127 159.292 li
167.127 162.292 li
cp
159.127 162.292 mo
159.127 160.479 li
158.939 160.479 li
158.939 162.292 li
cp
150.877 162.292 mo
150.877 160.479 li
150.689 160.479 li
150.689 162.292 li
cp
142.689 162.292 mo
142.689 160.479 li
142.502 160.479 li
142.502 162.292 li
cp
134.439 162.292 mo
134.439 160.479 li
134.252 160.479 li
134.252 162.292 li
cp
f
208.439 162.292 mo
208.439 159.292 li
208.252 159.292 li
208.252 162.292 li
cp
200.189 162.292 mo
200.189 160.479 li
200.002 160.479 li
200.002 162.292 li
cp
192.002 162.292 mo
192.002 160.479 li
191.814 160.479 li
191.814 162.292 li
cp
183.752 162.292 mo
183.752 160.479 li
183.564 160.479 li
183.564 162.292 li
cp
175.564 162.292 mo
175.564 160.479 li
175.377 160.479 li
175.377 162.292 li
cp
f
249.502 162.292 mo
249.502 159.292 li
249.314 159.292 li
249.314 162.292 li
cp
241.314 162.292 mo
241.314 160.479 li
241.127 160.479 li
241.127 162.292 li
cp
233.064 162.292 mo
233.064 160.479 li
232.877 160.479 li
232.877 162.292 li
cp
224.877 162.292 mo
224.877 160.479 li
224.689 160.479 li
224.689 162.292 li
cp
216.627 162.292 mo
216.627 160.479 li
216.439 160.479 li
216.439 162.292 li
cp
f
290.627 162.292 mo
290.627 159.292 li
290.439 159.292 li
290.439 162.292 li
cp
282.377 162.292 mo
282.377 160.479 li
282.189 160.479 li
282.189 162.292 li
cp
274.189 162.292 mo
274.189 160.479 li
274.002 160.479 li
274.002 162.292 li
cp
265.939 162.292 mo
265.939 160.479 li
265.752 160.479 li
265.752 162.292 li
cp
257.752 162.292 mo
257.752 160.479 li
257.564 160.479 li
257.564 162.292 li
cp
f
38.7832 127.635 mo
41.8457 127.635 li
41.8457 127.448 li
38.7832 127.448 li
cp
38.7832 135.823 mo
40.5957 135.823 li
40.5957 135.635 li
38.7832 135.635 li
cp
38.7832 144.01 mo
40.5957 144.01 li
40.5957 143.823 li
38.7832 143.823 li
cp
38.7832 152.198 mo
40.5957 152.198 li
40.5957 152.01 li
38.7832 152.01 li
cp
38.7832 160.448 mo
40.5957 160.448 li
40.5957 160.26 li
38.7832 160.26 li
cp
f
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 49 /one putdup 50 /two putdup 53 /five putdup 55 /seven putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings6 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-/five <1C60D8A8C9B7A73D986C0D7DE9D329253DCB6E971CF9F86B9AEBF9128F879E3BA076A7524F8AC6EF0948A0BD36A1BBAD3176809EA5D8C10BC04F27D1FCF8D9BA3577509C082FF1EE49DF22B08F8B21F3A6C3932A3BC82C6C594431B4032E2BEF80E15787B3E427A047FD8FD191291F42BAC74588B21DCB1EB3232C29BA67B72B9A00CCBC571F0227C6EF50964CF91F1B0EC573A04AE3E4DF9447B77BD2A0A959F534BEC79AECEF51C27F8D677FD06B99742B747A695088E88EBCC4A6BCCC7402ABFDFE9926161D96> |-/seven <1C60D8A8C9B7A73D94A9F40BC631635D93782351ED8A5F0B041154B50ADFD67B52AFA0970AEE10CFF4587FA64B7C1AB4D8B074E00A1BB2BDDE2ECD9CC66A> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SGFHFI+Times-Roman /Times-Roman findfont ct_VMDictPut/SGFHFI+Times-Roman*1 [46{/.notdef}rp /period 2{/.notdef}rp /one /two 2{/.notdef}rp /five /.notdef /seven 200{/.notdef}rp]SGFHFI+Times-Roman nfSGFHFI+Times-Roman*1 [9 0 0 -9 0 0 ]msf15.5332 130.518 mo(2.175)[4.5 2.25 4.5 4.5 0 ]xsh38.7832 86.5732 mo
41.8457 86.5732 li
41.8457 86.3857 li
38.7832 86.3857 li
cp
38.7832 94.8232 mo
40.5957 94.8232 li
40.5957 94.6357 li
38.7832 94.6357 li
cp
38.7832 103.01 mo
40.5957 103.01 li
40.5957 102.823 li
38.7832 102.823 li
cp
38.7832 111.198 mo
40.5957 111.198 li
40.5957 111.01 li
38.7832 111.01 li
cp
38.7832 119.385 mo
40.5957 119.385 li
40.5957 119.198 li
38.7832 119.198 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginSGFHFI+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-/eight <1C60D8A8C9B7A73DB9AA6386F0D433AA59FB601CE68D9D6220D80F865EFA1568339E25269162989F3B16CF5E1B85465E9B09AD3E1F38EB0BC3CC5B97FD7D595D378E5AF532DAC1C0173C6C74DAC1A5EFEB2094038777E094111D458CECDBEE2BFAFA1B194747D5AC182EDAECA7759C2CF7DA7B573AFBC7EB901C25328CA8529A5AF9870597DA9D6CE71ED45E3423137009ACC2E00FA606E5775C8BEB1D188095A69B5C3B51980741130E91409210303836D6B9BCD44F7FE0CC1ED555E839C2D5D70041FF279A3E977285D9F41DC64AB105D99B2CC098F9CEE3C23260EF9612DAD441A57B770C0516F587622E5D85261682E95C452BF079> |-systemdict /gcheck known {setglobal} if end {end} ifendSGFHFI+Times-Roman /Encoding getdup 48 /zero putdup 56 /eight putpop%ADOEndSubsetFont
/SGFHFI+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five /.notdef /seven /eight 199{/.notdef}rp]SGFHFI+Times-Roman nfSGFHFI+Times-Roman*1 [9 0 0 -9 0 0 ]msf15.5332 89.5024 mo(2.180)[4.5 2.25 4.5 4.5 0 ]xsh38.7832 45.5732 mo
41.8457 45.5732 li
41.8457 45.3857 li
38.7832 45.3857 li
cp
38.7832 53.7607 mo
40.5957 53.7607 li
40.5957 53.5732 li
38.7832 53.5732 li
cp
38.7832 62.0107 mo
40.5957 62.0107 li
40.5957 61.8232 li
38.7832 61.8232 li
cp
38.7832 70.1982 mo
40.5957 70.1982 li
40.5957 70.0107 li
38.7832 70.0107 li
cp
38.7832 78.3857 mo
40.5957 78.3857 li
40.5957 78.1982 li
38.7832 78.1982 li
cp
f
SGFHFI+Times-Roman*1 [9 0 0 -9 0 0 ]msf15.5332 48.4946 mo(2.185)[4.5 2.25 4.5 4.5 0 ]xsh38.7832 4.57324 mo
41.8457 4.57324 li
41.8457 4.38574 li
38.7832 4.38574 li
cp
38.7832 12.7607 mo
40.5957 12.7607 li
40.5957 12.5732 li
38.7832 12.5732 li
cp
38.7832 20.9482 mo
40.5957 20.9482 li
40.5957 20.7607 li
38.7832 20.7607 li
cp
38.7832 29.1982 mo
40.5957 29.1982 li
40.5957 29.0107 li
38.7832 29.0107 li
cp
38.7832 37.3857 mo
40.5957 37.3857 li
40.5957 37.1982 li
38.7832 37.1982 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginSGFHFI+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B7A73DB9A896D23FCC66190904632D73F98CB9610A16993F6B122D7E1E78C0FD3CFB4BA7B04573F85C6AAF2DBC5FF0782821FB24CB9148C8554B2F1030920B61B0FCD80181994622E333F98E453CE9ADDE1282743A6D28C02F5A1E762172EE000BA8345C747F4D035036F2F72356957E99A085687800E644D881E70A8EFBE3A3E6E4B170FA116E5327D2CD42DA986FA6C800B44A5CE5DF369C3295EA45945F8EE425ED3E5B812A8DD33EE2E3340844A5314FF5267F47524653D6A9344C2AEC57094DFAB247907C47ADE2EB> |-systemdict /gcheck known {setglobal} if end {end} ifendSGFHFI+Times-Roman /Encoding getdup 57 /nine putpop%ADOEndSubsetFont
/SGFHFI+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five /.notdef /seven /eight /nine 198{/.notdef}rp]SGFHFI+Times-Roman nfSGFHFI+Times-Roman*1 [9 0 0 -9 0 0 ]msf15.5332 7.479 mo(2.190)[4.5 2.25 4.5 4.5 0 ]xsh295.658 4.38574 mo
292.658 4.38574 li
292.658 4.57324 li
295.658 4.57324 li
cp
295.658 12.5732 mo
293.846 12.5732 li
293.846 12.7607 li
295.658 12.7607 li
cp
295.658 20.7607 mo
293.846 20.7607 li
293.846 20.9482 li
295.658 20.9482 li
cp
295.658 29.0107 mo
293.846 29.0107 li
293.846 29.1982 li
295.658 29.1982 li
cp
295.658 37.1982 mo
293.846 37.1982 li
293.846 37.3857 li
295.658 37.3857 li
cp
295.658 45.3857 mo
292.658 45.3857 li
292.658 45.5732 li
295.658 45.5732 li
cp
295.658 53.5732 mo
293.846 53.5732 li
293.846 53.7607 li
295.658 53.7607 li
cp
295.658 61.8232 mo
293.846 61.8232 li
293.846 62.0107 li
295.658 62.0107 li
cp
295.658 70.0107 mo
293.846 70.0107 li
293.846 70.1982 li
295.658 70.1982 li
cp
295.658 78.1982 mo
293.846 78.1982 li
293.846 78.3857 li
295.658 78.3857 li
cp
295.658 86.3857 mo
292.658 86.3857 li
292.658 86.5732 li
295.658 86.5732 li
cp
295.658 94.6357 mo
293.846 94.6357 li
293.846 94.8232 li
295.658 94.8232 li
cp
295.658 102.823 mo
293.846 102.823 li
293.846 103.01 li
295.658 103.01 li
cp
295.658 111.01 mo
293.846 111.01 li
293.846 111.198 li
295.658 111.198 li
cp
295.658 119.198 mo
293.846 119.198 li
293.846 119.385 li
295.658 119.385 li
cp
295.658 127.448 mo
292.658 127.448 li
292.658 127.635 li
295.658 127.635 li
cp
295.658 135.635 mo
293.846 135.635 li
293.846 135.823 li
295.658 135.823 li
cp
295.658 143.823 mo
293.846 143.823 li
293.846 144.01 li
295.658 144.01 li
cp
295.658 152.01 mo
293.846 152.01 li
293.846 152.198 li
295.658 152.198 li
cp
295.658 160.26 mo
293.846 160.26 li
293.846 160.448 li
295.658 160.448 li
cp
290.439 3.54199 mo
290.439 6.60449 li
290.627 6.60449 li
290.627 3.54199 li
cp
282.189 3.54199 mo
282.189 5.35449 li
282.377 5.35449 li
282.377 3.54199 li
cp
274.002 3.54199 mo
274.002 5.35449 li
274.189 5.35449 li
274.189 3.54199 li
cp
265.752 3.54199 mo
265.752 5.35449 li
265.939 5.35449 li
265.939 3.54199 li
cp
257.564 3.54199 mo
257.564 5.35449 li
257.752 5.35449 li
257.752 3.54199 li
cp
249.314 3.54199 mo
249.314 6.60449 li
249.502 6.60449 li
249.502 3.54199 li
cp
241.127 3.54199 mo
241.127 5.35449 li
241.314 5.35449 li
241.314 3.54199 li
cp
232.877 3.54199 mo
232.877 5.35449 li
233.064 5.35449 li
233.064 3.54199 li
cp
224.689 3.54199 mo
224.689 5.35449 li
224.877 5.35449 li
224.877 3.54199 li
cp
216.439 3.54199 mo
216.439 5.35449 li
216.627 5.35449 li
216.627 3.54199 li
cp
208.252 3.54199 mo
208.252 6.60449 li
208.439 6.60449 li
208.439 3.54199 li
cp
200.002 3.54199 mo
200.002 5.35449 li
200.189 5.35449 li
200.189 3.54199 li
cp
191.814 3.54199 mo
191.814 5.35449 li
192.002 5.35449 li
192.002 3.54199 li
cp
183.564 3.54199 mo
183.564 5.35449 li
183.752 5.35449 li
183.752 3.54199 li
cp
175.377 3.54199 mo
175.377 5.35449 li
175.564 5.35449 li
175.564 3.54199 li
cp
167.127 3.54199 mo
167.127 6.60449 li
167.314 6.60449 li
167.314 3.54199 li
cp
158.939 3.54199 mo
158.939 5.35449 li
159.127 5.35449 li
159.127 3.54199 li
cp
150.689 3.54199 mo
150.689 5.35449 li
150.877 5.35449 li
150.877 3.54199 li
cp
142.502 3.54199 mo
142.502 5.35449 li
142.689 5.35449 li
142.689 3.54199 li
cp
134.252 3.54199 mo
134.252 5.35449 li
134.439 5.35449 li
134.439 3.54199 li
cp
126.002 3.54199 mo
126.002 6.60449 li
126.189 6.60449 li
126.189 3.54199 li
cp
117.814 3.54199 mo
117.814 5.35449 li
118.002 5.35449 li
118.002 3.54199 li
cp
109.564 3.54199 mo
109.564 5.35449 li
109.752 5.35449 li
109.752 3.54199 li
cp
101.377 3.54199 mo
101.377 5.35449 li
101.564 5.35449 li
101.564 3.54199 li
cp
93.127 3.54199 mo
93.127 5.35449 li
93.3145 5.35449 li
93.3145 3.54199 li
cp
84.9395 3.54199 mo
84.9395 6.60449 li
85.127 6.60449 li
85.127 3.54199 li
cp
76.6895 3.54199 mo
76.6895 5.35449 li
76.877 5.35449 li
76.877 3.54199 li
cp
68.502 3.54199 mo
68.502 5.35449 li
68.6895 5.35449 li
68.6895 3.54199 li
cp
60.252 3.54199 mo
60.252 5.35449 li
60.4395 5.35449 li
60.4395 3.54199 li
cp
52.0645 3.54199 mo
52.0645 5.35449 li
52.252 5.35449 li
52.252 3.54199 li
cp
43.8145 3.54199 mo
43.8145 6.60449 li
44.002 6.60449 li
44.002 3.54199 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginSGFHFI+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B8707C25> |-/parenleft <1C60D8A8C9B81F2C7477F0B9BCB3EBA4BD58438260E6F0349575D982C091745F57E6DE656DBD360F903D8BB7BA1F42E7A2D05B5102174895284A8AFE5BF20A5DC15D43366CD93FB67607779C4A32BA> |-/parenright <1C60D8A8C9B81F2C3A0B9AE48BDC8A210A6BC24B132D0FFA37976CAF0AD48341BA40F2639F857493B96FE8C9C6A5DBA67902E1141CAD31E1E1F2EAFA78B4F0B158589755ABC3F5D48640211E0BE78E8AD3F692526A7797DC309ED92AB9> |-/K <1C60D8A8C9B6079F09F1D7F7073BA030A5B298362C104C626251E20BF741A2F5A3FFD4DD910B3F2994038057165AE5CDB094D3261983DF26B688B4D637C4880CE39343C04CB6768316BF4D5DACDA69739425254FF1A828B58F056A0A537F2C5F651643F6B244C68FCCF1CDC1A0AF52991E3E614097D504F6AD160CA7D8477E4CA2E234B203219213B83621F055A07FA149AFA72246E6B6C390204F79B5D9B2398D3736BEF77FE1FFBDDB45C9A136C86F883C0C90AA239B911A6CB725AAED297F7C492C978F73F44F4C7096002D> |-/T <1C60D8A8C9B7D8BE78D1A55798F2D8A97091B992B92C1EAFCF350F806FED434693C4DF3F67D8893A99EF75622FE8BA13F907674F882E140E60489CEAA2BB6107D8446BF6FC3EF0730B190972991631B35D792933869F4716BD279183A943DE125368> |-/a <1C60D8A8C9B77FE2CEADADAD35C681D96377E0B82CC8ACDB5762353EDBADFFACD451A553C5C39302A9F1D177F76B983509B429688ADF52AFA30F8E4A0B23F2282503B97D206C7C183FDE8BFD6ACD2BE6A3B9069791DF8E2CF592523922EFD64768CD99A1F5F1400DB305C4171EAA77202618276E378016C7BA0833F29752C2A461C11A88BC4E527507EEDA9C848EEAD89D80551320178A864EFC8B3562DEDC4F695E8824160B87CA7F395997B47C0C71BBFE9F871E4F5046857D22F807C04061C73B2C0BBB7B44E0200581C40A3AC55C8229AC23B2FBE040B0F089F70BE38746A5E0285A22E4825D9ECD39D6C15171D3EBB391B1AC132DA188B28262B67971885F8F1CB6195A6A7B0FFC> |-/b <1C60D8A8C9B7A73DEA51CB4AB782EC4CF13FD26F41FC8CB88DC14FD82E5280D80A6DCEF24DFC67DDE70F479EF61F4A2F59FB7C44A2DA70AA9DBE3F3332B05CF7A2A04A2009B46D9C510350AE718270C9D98B76F9594F5A2CEFABA8989AB9C1A83073103E665B7D0C1FB0D95DD2CF6B3624FBE8C4DC08D6FA9DA1460775A9F8E2451D08E82D20D83F7AACFD6C43C3765095FFA99CCEBE8373741BF9BE5B927D964DEAC7210DBA744ADF394D6C616E3DDB8D63> |-/e <1C60D8A8C9B77FE2CE67108D1280ADC9682165E381A1DB7E740A05B18E65167A034DB250F6D5492B270110B05E60263A42B2C42DDF9AB2E4A276D8ABFFBD6680C39C89C62CEAE031CFF89EF16FD9FC76CF19CB9F9E34BA9AA837F4D55163017EBBAC9FCE57F666560D76840A1E9FB941AF2DF15742DAEB79EA2886404B2375DA19EFBEAC2017EDAD03B37508> |-/i <1C60D8A8C9B854D0DE8FF03001C7DDCDF6D3A68A6B597D794E646C678EE584A1666CB56CA9FE75811CEA2087E2C341C7E1E2BD6147E5E1B64DFF133BC2DEFF475DA598F822B2BE3A9DBFD7105A3889BD250D9F71DE0C91B5EA539C526B6489E8D9E79757A61E2352A71C3AC0EEEBBBD4B096AC9707E6604D45F8B4EB690BCE5B5F037666EE3D29DC12074786C8164E88903799783957677A476A9FAD9CB291219231A21175873BB2> |-/m <1C60D8A8C9B6FF8699A9E0957D16E85AF3EF7FB5550D53F58119CA6FE9A7D4C98706545F58540E72C4F6DBF95879F02D97A7F35AB5AF3C971237293FF5B2FB844191681255BE21478456D24EE31A2A7143B10FBA09BC00C8AED529FA7A252F5274921E1C121C49F9A6BDE50E747AC4CD0AF6F6706D6A4E730F5719639E692B7DF9539A8C86290A899FD897C44E8C098306316B6B9696B686A9B83249EF96A00A2FF0F972C35DB6BF3C3D779B038A947CE308FE712510B0F53C629676A77F97F98DDA7B37D2628E8FEEC42D36B6A15BF9FD22B2B8F078CF5BFE089DE548DB0501AFAFBA32D2143AC07A22D2DF86E9C0B50FA99CAFD1EE8BB0E72F1F0DA0CAB73F3C0DBE795764A811F4BC8FDB7CE3365A061791255C37B34ED2B69FAF3B52D7BAE8CD2D2E8A84097361CCD8E917EDDDA32F45C31D> |-/p <1C60D8A8C9B7A73DB91641F6BA5486CB0712FFF8C326A20926BA28A071CD0FFCD4BDCDE0C44AA39367FAC8C71A39B0507E6FBE92EF479F1F2157486F55AAE915EDBBFC8AB4F6ABE34EECC784D333D526F3EA5559C73D1624B2F3DCE5E44F60A831A8E502DF5DA28E74DD48A45198849C8DE213E2FE4E0A1787AE987D40470D9B397703069AE4CF0F4FA65EF586834864FB9B5616439B96E2FDF7EE91EBD164132EB5760D047D5E96F3A228E48459DCF4120D33BB6B48C8A10CD605E653E229921D2C4C571224A04CF9D3CB95F244ED16B0C299C503EB8F189CFABBE5056C928EB45A907FB0C0> |-/r <1C60D8A8C9B81F2C5DE210A78B7176966966FB4A2E70036BAA4A8956D597954FF33C419645546BDDA5A1C075630C88C9E9E0B6B2EB6B2FC3FF0331B1902616E9791F7398738E2F17D5E54890C7A065EB2198D4708DA7213806F12669F67678CAD7B30B1926E6F30FE45B0DAB7BE403E568FB7F28C7F3631BA5B608F502310C8C5FF767FCF95E7EC0C2EC9F2F173FF41F0C7459D2154243B15CA53A73779F93E107279F803A71F8179756E718854D0BA7BCB1168643F72763D9FF> |-/t <1C60D8A8C9B854D0F41C7D11C14207BE1C0BA04724483030493967288AC8D5095C0BB34E8B56A5C53BD1B7A25A11F231F6182B9300CAF4CFD46C1EFFF4B0E38766187499A1973473DBAE4D98649DB8F7DCCE25964559B9BA93E6803E419984755899DE68C87EC2F530AC81AF61BCF42839E59E8A14B5E2DDDE3A4AFB0D7D86FA4DD21DF5669B371465EBE7C64497A6C50C0C5658D7> |-/u <1C60D8A8C9B7A73DDDD5393BA7D7831D75F13A25B59F8CAE59E13B1DBD301256F09A2A2FA0610BB05DE2ECE6E35EA4ADC086161AFF85B0FD2437640FDD80398C4C0B32C179538489C2DFE344A56B831FF47DC8684534892DA6A169CBD1177876492AD2C2BDD7A6B08127B6A645642A5FAF8AB73C40BA1FE9FB481006D45C77AAEB57B47F60A9B165A96B82FB4F1ABC3AAEF73B36D7075B83620B1F07B444F8EF540AE2E9744CDCFFE07D> |-systemdict /gcheck known {setglobal} if end {end} ifendSGFHFI+Times-Roman /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 75 /K putdup 84 /T putdup 97 /a putdup 98 /b putdup 101 /e putdup 105 /i putdup 109 /m putdup 112 /p putdup 114 /r putdup 116 /t putdup 117 /u putpop%ADOEndSubsetFont
/SGFHFI+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five /.notdef /seven /eight /nine 17{/.notdef}rp /K 8{/.notdef}rp /T 12{/.notdef}rp /a /b 2{/.notdef}rp /e 3{/.notdef}rp /i 3{/.notdef}rp /m 2{/.notdef}rp /p /.notdef /r /.notdef /t /u 138{/.notdef}rp]SGFHFI+Times-Roman nfSGFHFI+Times-Roman*1 [9 0 0 -9 0 0 ]msf155.791 180.307 mo(Time \(arb\))[5.49805 2.5 7 3.99414 2.25 2.99707 3.99512 2.99707 4.5 0 ]xshSGFHFI+Times-Roman*1 [0 -9 -9 0 0 0 ]msf7.5332 112.924 mo(Temperature)[-5.49805 -3.99414 -7 -4.5 -3.99463 -2.99707 -3.99463 -2.50049 -4.5 -2.99707 0 ]ysh%ADOBeginSubsetFont: Mathematica2 Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /Mathematica2 def/FontInfo 7 dict dup begin/Notice (Copyright 2000, 2004 , 2005Adobe Systems Incorporated. All Rights Reserved. U.S. Patent D454,582.Myriad is a registered trademark of Adobe Systems Incorporated.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private15 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/FamilyBlues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604583 def/StdHW [67] def/StdVW [88] def/StemSnapH [67] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/space <1C60D8A8C9B896187A> |-/parenleft <1C60D8A8C9B84E0A47D7FED6098F93D599A35099EC3AF2C571CE3F6788F74B615B747D0C4950E0757D67CC4B6F86A79106B4F6AF8262CBC77CA155FEEB> |-/parenright <1C60D8A8C9B84E0A47D7FED609B36B98A489D0C883687FC8C4BD7FF8A57C9949E56F26DF53030280BC0E024A6F3F65DFBA65966BEA7D55AEB539EB378E> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SGFHFJ+Mathematica2 /Mathematica2 findfont ct_VMDictPut/SGFHFJ+Mathematica2*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]SGFHFJ+Mathematica2 nfSGFHFJ+Mathematica2*1 [0 -9 -9 0 0 0 ]msf7.5332 65.1118 mo(\( )[-2.55615 0 ]yshSGFHFI+Times-Roman*1 [0 -9 -9 0 0 0 ]msf7.5332 61.2446 mo(K)shSGFHFJ+Mathematica2*1 [0 -9 -9 0 0 0 ]msf7.5332 54.7993 mo(\))sh39.833 100 mo
294.833 100 li
f
39.833 100.5 mo
41.833 100.5 li
41.833 99.5005 li
39.833 99.5005 li
cp
43.833 100.5 mo
45.833 100.5 li
45.833 99.5005 li
43.833 99.5005 li
cp
47.833 100.5 mo
49.833 100.5 li
49.833 99.5005 li
47.833 99.5005 li
cp
51.833 100.5 mo
53.833 100.5 li
53.833 99.5005 li
51.833 99.5005 li
cp
55.833 100.5 mo
57.833 100.5 li
57.833 99.5005 li
55.833 99.5005 li
cp
59.833 100.5 mo
61.833 100.5 li
61.833 99.5005 li
59.833 99.5005 li
cp
63.833 100.5 mo
65.833 100.5 li
65.833 99.5005 li
63.833 99.5005 li
cp
67.833 100.5 mo
69.833 100.5 li
69.833 99.5005 li
67.833 99.5005 li
cp
71.833 100.5 mo
73.833 100.5 li
73.833 99.5005 li
71.833 99.5005 li
cp
75.833 100.5 mo
77.833 100.5 li
77.833 99.5005 li
75.833 99.5005 li
cp
79.833 100.5 mo
81.833 100.5 li
81.833 99.5005 li
79.833 99.5005 li
cp
83.833 100.5 mo
85.833 100.5 li
85.833 99.5005 li
83.833 99.5005 li
cp
87.833 100.5 mo
89.833 100.5 li
89.833 99.5005 li
87.833 99.5005 li
cp
91.833 100.5 mo
93.833 100.5 li
93.833 99.5005 li
91.833 99.5005 li
cp
95.833 100.5 mo
97.833 100.5 li
97.833 99.5005 li
95.833 99.5005 li
cp
99.833 100.5 mo
101.833 100.5 li
101.833 99.5005 li
99.833 99.5005 li
cp
103.833 100.5 mo
105.833 100.5 li
105.833 99.5005 li
103.833 99.5005 li
cp
107.833 100.5 mo
109.833 100.5 li
109.833 99.5005 li
107.833 99.5005 li
cp
111.833 100.5 mo
113.833 100.5 li
113.833 99.5005 li
111.833 99.5005 li
cp
115.833 100.5 mo
117.833 100.5 li
117.833 99.5005 li
115.833 99.5005 li
cp
119.833 100.5 mo
121.833 100.5 li
121.833 99.5005 li
119.833 99.5005 li
cp
123.833 100.5 mo
125.833 100.5 li
125.833 99.5005 li
123.833 99.5005 li
cp
127.833 100.5 mo
129.833 100.5 li
129.833 99.5005 li
127.833 99.5005 li
cp
131.833 100.5 mo
133.833 100.5 li
133.833 99.5005 li
131.833 99.5005 li
cp
135.833 100.5 mo
137.833 100.5 li
137.833 99.5005 li
135.833 99.5005 li
cp
139.833 100.5 mo
141.833 100.5 li
141.833 99.5005 li
139.833 99.5005 li
cp
143.833 100.5 mo
145.833 100.5 li
145.833 99.5005 li
143.833 99.5005 li
cp
147.833 100.5 mo
149.833 100.5 li
149.833 99.5005 li
147.833 99.5005 li
cp
151.833 100.5 mo
153.833 100.5 li
153.833 99.5005 li
151.833 99.5005 li
cp
155.833 100.5 mo
157.833 100.5 li
157.833 99.5005 li
155.833 99.5005 li
cp
159.833 100.5 mo
161.833 100.5 li
161.833 99.5005 li
159.833 99.5005 li
cp
163.833 100.5 mo
165.833 100.5 li
165.833 99.5005 li
163.833 99.5005 li
cp
167.833 100.5 mo
169.833 100.5 li
169.833 99.5005 li
167.833 99.5005 li
cp
171.833 100.5 mo
173.833 100.5 li
173.833 99.5005 li
171.833 99.5005 li
cp
175.833 100.5 mo
177.833 100.5 li
177.833 99.5005 li
175.833 99.5005 li
cp
179.833 100.5 mo
181.833 100.5 li
181.833 99.5005 li
179.833 99.5005 li
cp
183.833 100.5 mo
185.833 100.5 li
185.833 99.5005 li
183.833 99.5005 li
cp
187.833 100.5 mo
189.833 100.5 li
189.833 99.5005 li
187.833 99.5005 li
cp
191.833 100.5 mo
193.833 100.5 li
193.833 99.5005 li
191.833 99.5005 li
cp
195.833 100.5 mo
197.833 100.5 li
197.833 99.5005 li
195.833 99.5005 li
cp
199.833 100.5 mo
201.833 100.5 li
201.833 99.5005 li
199.833 99.5005 li
cp
203.833 100.5 mo
205.833 100.5 li
205.833 99.5005 li
203.833 99.5005 li
cp
207.833 100.5 mo
209.833 100.5 li
209.833 99.5005 li
207.833 99.5005 li
cp
211.833 100.5 mo
213.833 100.5 li
213.833 99.5005 li
211.833 99.5005 li
cp
215.833 100.5 mo
217.833 100.5 li
217.833 99.5005 li
215.833 99.5005 li
cp
219.833 100.5 mo
221.833 100.5 li
221.833 99.5005 li
219.833 99.5005 li
cp
223.833 100.5 mo
225.833 100.5 li
225.833 99.5005 li
223.833 99.5005 li
cp
227.833 100.5 mo
229.833 100.5 li
229.833 99.5005 li
227.833 99.5005 li
cp
231.833 100.5 mo
233.833 100.5 li
233.833 99.5005 li
231.833 99.5005 li
cp
235.833 100.5 mo
237.833 100.5 li
237.833 99.5005 li
235.833 99.5005 li
cp
239.833 100.5 mo
241.833 100.5 li
241.833 99.5005 li
239.833 99.5005 li
cp
243.833 100.5 mo
245.833 100.5 li
245.833 99.5005 li
243.833 99.5005 li
cp
247.833 100.5 mo
249.833 100.5 li
249.833 99.5005 li
247.833 99.5005 li
cp
251.833 100.5 mo
253.833 100.5 li
253.833 99.5005 li
251.833 99.5005 li
cp
255.833 100.5 mo
257.833 100.5 li
257.833 99.5005 li
255.833 99.5005 li
cp
259.833 100.5 mo
261.833 100.5 li
261.833 99.5005 li
259.833 99.5005 li
cp
263.833 100.5 mo
265.833 100.5 li
265.833 99.5005 li
263.833 99.5005 li
cp
267.833 100.5 mo
269.833 100.5 li
269.833 99.5005 li
267.833 99.5005 li
cp
271.833 100.5 mo
273.833 100.5 li
273.833 99.5005 li
271.833 99.5005 li
cp
275.833 100.5 mo
277.833 100.5 li
277.833 99.5005 li
275.833 99.5005 li
cp
279.833 100.5 mo
281.833 100.5 li
281.833 99.5005 li
279.833 99.5005 li
cp
283.833 100.5 mo
285.833 100.5 li
285.833 99.5005 li
283.833 99.5005 li
cp
287.833 100.5 mo
289.833 100.5 li
289.833 99.5005 li
287.833 99.5005 li
cp
291.833 100.5 mo
293.833 100.5 li
293.833 99.5005 li
291.833 99.5005 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TimesNewRomanPSMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 55 /seven putdup 56 /eight putdup 61 /equal putdup 75 /K putdup 84 /T putdup 127 /lambda putdup 177 /plusminus putdef/FontBBox {-568 -307 2000 1007} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings13 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB222483BD74F8B> |-/space <1C60D8A8C9B8707C25> |-/period <1C60D8A8C9B8707CC95A9B5DFDE3A4AF8C8BB7D0C82C30C322ED94985BC6C2F162CD480F8280AD954FE8DC511B40B423DB4A6012D9C419E4DF4F375C6ADD098717CA70F621> |-/zero <1C60D8A8C9B7A73DAAFDCA97EBBC8D8E35A41D9404C5638B059E1CA50B5366543C3D584AD9E19987218AC5999BB0F2477597AB6F8DD868788C8440CBF4A338EF64ACD9BF2268656755741DB71FD86387D4A7AA1CFD19937BFD209E4FBCD1952717C8CF8C0555CB2D0238DC43B2A6A2DE4D7366DB210D2673870D0B0C58344E6AEF91B916BAAEAEF37B22F065E870AFE6638E56D0B4AE01785D59EE23402242D396440157FC51> |-/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F589D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C02720FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF41DB28C0847307B8DCBC66> |-/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11EC41D90433CE0F55F0A42A96AF852FD50FA> |-/seven <1C60D8A8C9B7A73DFE31854B8CA51F015562FECC80A8475F282F772252E10D05B7D43981266F60616595AB1BFBC47BFB03D1BE> |-/eight <1C60D8A8C9B7A73DAB2BA6B835CAFB4C9A41096F555C470FE6294A707AE711C017C95446B200870C2B6A47FB931BCEBEB5BBC6B53605850C75701306FD83F9DC906687C2B3A2C9C0DB9DB68E95D3478DEA01153491C8534F5AD899980F04C195BFB522EDEF282420AA1F12E08397ECA941D5934294BD451B3952E6229D3E7987DD36FC8E43559904E0205D3416EDD1402AB05184D2018B2C7B816330FD0C2740A24C74F80E34F93317BBB1D6B8C4D916C15B7FF1D533D7762324A1017022A27246D93B9768262BFCC673CAD6781894C98679A5889F9338F377D1995AEDF5695FBA7A65628522691535557B2045419DD63F87D7A64B6A962B> |-/equal <1C60D8A8C9B7E7C1C5666C28B48CD4A694178AF152D7001F5F174D4D8F120B3533D4> |-/K <1C60D8A8C9B6079F6DAD6439E719A5649ADA7D8B9E734C715565956F15B5C4CFBB8891AD82AF5B965DC9DBF0762D43C17265BBD3CD422561D8093800D47C30E7401B7FF953462B20D5841B49861E5477C9C06DC8DEA98C62C73A16DCD10A99A3BB2728EF5C45B4F29723E3FD20A045034CDC5B2823010371DE4EA42A5365F63BDAAE6E06349967F6DD5B6C651FF133F1AC111407BA069118B1E1EF88ECE867D30D2AC6A5EEB5F5B14A4020A8D1688A963E3E2FF5DFE6441AA27FDF0183EE620579E7103491C7EBC49E5703B87C43F0A841871BC2D6A7D289877EB3748B6B80FD93562885CC9F2182E80755BBCE3303DAD528BFBDFEB3202E48EDCFB93BC1> |-/T <1C60D8A8C9B7D8BE514ED6977CE9F9E5860FEBB6D8EBF5879FDED6C1E48F6AFEEE7B65DB6C9D492058CAA103CB13A7A80B0015E85F272BB9775991CD97556EC3CFB46A4E1606F006216EABEB711074247C72C159202F32CC7F5F403FAE58110685510DDB32C57700D5067C975D7063A496FE85C1E5> |-/lambda <1C60D8A8C9B756EDA5D77568A0FA18386A6AD49BD8704311ACC8EC594A8E55D853B735863EADAE5174B8F61AF42D1EBFEF18D11F56095D56D220F8853BB59C9C6F118D0506F2F12650503C7A1EE01EE772A9E0562047AA435C0F6D6801DF0973002B18758FDB64745C73DF334FB7B085B8917A2872C70168A2153CA76CA35980C5485892B4BECBD288F8C11406F3A514A30E53289C742E> |-/plusminus <1C60D8A8C9B79676FB1F1C3483630A3E746B8D92259F8E9B8C36D901B78257C6EC5CBED7BFBCAAD6F9FE91B7B7741966EAEA858767D1> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SGFHFK+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut/SGFHFK+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 4{/.notdef}rp /seven /eight 4{/.notdef}rp /equal 13{/.notdef}rp /K 8{/.notdef}rp /T 42{/.notdef}rp /lambda 49{/.notdef}rp /plusminus 78{/.notdef}rp]SGFHFK+TimesNewRomanPSMT nfSGFHFK+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf184.333 122.001 mo(T = 2.178 \261 0.001 K)[7.11328 3 6.76758 3 6 3 6 6 6 3 6.58594 3 6 3 6 6 6 3 0 ]xshSGFHFK+TimesNewRomanPSMT*1 [10 0 0 -10 0 0 ]msf191.333 126 mo(\177)sh216 40.7505 mo
160 40.7505 li
160 41.7505 li
216 41.7505 li
0 0 0 1 cmyk
f
163.555 37.2954 mo
160.019 40.8305 li
160.727 41.5376 li
164.262 38.0025 li
f
159.701 41.2193 mo
163.555 45.0728 li
164.262 44.3657 li
160.408 40.5122 li
f
211.951 38.0025 mo
215.486 41.5376 li
216.193 40.8305 li
212.658 37.2954 li
f
215.805 40.5122 mo
211.951 44.3657 li
212.658 45.0728 li
216.512 41.2193 li
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginSGFHFK+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A73DB6B62B7A95EE6C20B94EAC94CA9AB50BFD020369D6A63C8EA15A0D9A89B2ED9293078F8D3EE629592E255C65B246> |-/s <1C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC22ACE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A039A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF40BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359FAAB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C593B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF509B93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |-/t <1C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED29448713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC43DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E798B36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |-/increment <1C60D8A8C9B7D7E8D377148A2E02501DFB017040347B4419EC7866C4A0AE1CD26995325B7D5F> |-systemdict /gcheck known {setglobal} if end {end} ifendSGFHFK+TimesNewRomanPSMT /Encoding getdup 52 /four putdup 115 /s putdup 116 /t putdup 198 /increment putpop%ADOEndSubsetFont
/SGFHFK+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 2{/.notdef}rp /seven /eight 4{/.notdef}rp /equal 13{/.notdef}rp /K 8{/.notdef}rp /T 30{/.notdef}rp /s /t 10{/.notdef}rp /lambda 49{/.notdef}rp /plusminus 20{/.notdef}rp /increment 57{/.notdef}rp]SGFHFK+TimesNewRomanPSMT nfSGFHFK+TimesNewRomanPSMT*1 [8 0 0 -8 0 0 ]msf173.333 36.3335 mo(\306t = 14s)[4.89453 2.22266 2 4.51172 2 4 4 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/SGFHFJ+Mathematica2*1 uf/SGFHFJ+Mathematica2 uf/Mathematica2 uf/SGFHFK+TimesNewRomanPSMT*1 uf/SGFHFK+TimesNewRomanPSMT uf/TimesNewRomanPSMT uf/SGFHFI+Times-Roman*1 uf/SGFHFI+Times-Roman uf/Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (steven schowalter) ()%%Title: (heatingdata.eps)%%CreationDate: 4/15/09 1:51 PM%AI9_DataStream%Gb!R&q0q>7dOoobJ9uel,S2;`?tTsJk'?/!h+<eq&ip.$_qKINIsflIWANA^`XMaGrLR?176m/=;Q8qYWMG^:nR?.`XuG,(`Ql6M%U7/&L2-#X)7NnedKh+>?hn3dt^%,\ch6p/"HreMT;<E7,;%s\W;=;(,^DcLUH*?hnkk@`@<i=PVMjF@F[A,+WGP%[H]l18]SUX(d%XkN*=oLcO?*h]S^[D>AnX#=Y*ehm"U'tnL62>W`ac<%,"I\/OtKi?:#:9LEKY(kbMX4aGt:tG&cq-7dF)V%Rn]c"5a$DaZTF)fiK%ePCs-09+gle55^tX?Y_\hXj[o:b1Kd8Nph&[YFIp3GN'!Idi%4pYeEs)1TD9$jMN_W.le%7d9"58ESN-<65ma>LCgTI).R['n9(S%b<fQP7CD`%2">hDG]39\4k.&<qcArB]l&4?>I?a!pQ_F#=Ym)22YrZPe"!@n31$X[d>XKSk#(B!)L3gDZ11o%nLrh]CU61foKPm!%c^V+k;nK`Z<V(]:gFYjNjqWTG?4L2!hG(TgI=V-(PLiPjogT<JR_E!CeUS#7r_F9$,f=c,pYH`0&aZlZcq6uc4@9!c>l2.\ldO;K%kHf'$IGMHQ[FGZp[FgB%;*/-@(0!Aqj`05_oZO%@<(r2#"l=uX=eQu:kGY<(HHl1rH];(*n@[@gej]$B[&?DWE36I4oY8ZM-e1R9%*=Nj'>$WCKV%Z]9lC=%g6K%\B8Q`UU"?'s0C2al08\BlU\m;HJC5Aa\.FJ+6^SAc_#9Zu:nJ#8ac[6ctD&YZ3-'kRsn5n6#WNO-;%>piFK<Ht"GQ-Vh#Hldauo8kJpLKsY&[E?Y!D9-5AON0iji,.5'>db*Pi#@&1Y#5RHPtLOXW<?!h--0#e_UE6WT80nV<HqiPP'9HV%8UX0Y#Y":uhIOrT4VENGa9?F4:WN]V@P&nPTLJ>VH([Uq$12>p+R_Xdi"LQ*Mr57@,((R\6]9k9g'rNT("rdI#r`0=a9Cs_:WQJ:%65o/3W&`fki?I4nI$-E[b=V(mh+?E.Ff7=d,F3u[K3Zbepk4f$&!BtWB;ET+0B@`YYoY5s+n%bpi"LQ*lU_&n-`K,%^aJ2pp;&-@%73X%2YCo)9A24-BBC`t:N7<o-*HDb+0tra8PM/CK8\GC8;DRPkP(W^c4O?,9RF"!>S$\VHL%`>1j<F.(m3=_:n%pI5J_!9L9X:)S%&C(jp7(Scp1Ke/7"uRck6=bZ3"m]+(G>^N>F[DGa%;O17KXHfh*HEn"Uic/kGu"@$RM3pkdS0M-n:m0(`W(bl$>h0Z7,gmEKk<&'%$/$]Sc/`3P+1s19LhXHaA]A</%o=Lj8U+HYK@Q7;QdI,@OuHB@_>iFH5t.(<dkpV`r$D@OKDZL7ahLC%1eET"9E#Y5jL=nWr`L$4%D-;h+7K;cCOsf6Bq,],1hr6<b(Q"L%,XqVWs!ecS>PofI'`O0O3V4>>P("^lfe;n4[8/SNL06)YKkf/fFtJq\<q>Hm\U[Qbj['j5%$Y<8c$Leir2^%!1(^LoQ#62$u6##mskZ<mfdLr(W-S9nr*mI..7_)AEmone%nf?m^cWJHNT?#ip@Kudc\#4S:o[pNh1>;M;hVEY[%J(Z66^P*$kCVr)*+XrP`We`c.(AJOVj[K"@Db!![%R!:%P#BiqB\m$3f+q.U8?k0lGQ&4(M3OmDe08Z]/udj5\\8H$U$b=+9o[4W%k6dH.lce3CMSM*2!Ksog-@2@#ZiVj-:MS!2YEkaP6oKWkB]=4J?-GB8#*UpD`p@Q-^MV=3KCg$1@FltD;-M(5$d`kEL7/asNPpAT%O^Z#>],%c+[@g?I>%ftH&,-p<a`8U5#&+Is#N,R7gGjZh\(p%-]IV1!5T-MW<e(quC!fr9(Kf75qmh*L\nY&K>b]?N;]rRs=pa'o%PcqYfH^AM(Pqec@%HS/T5ro'pk+uJ];g';fdZCPu&s(1i_Blo]Bk#3'n*;5Hq&c1^%4)^-b6jaDI1Q?R>&F@8oZ\SKJ5HoME\%=<%)-E2D=a=2'.cDn?=X*J4D-"5"0Or]9m-"#/PVFa53b(Oh23mA3k&smi3)69-nJ>\m.O5Dmb3c([?u`/iTTESQqF:7[ZaWN*:^bSf%'@"qo4.7Ra@4Kl"<caP6NM%`_T^&BWZK=a%UqNU%rKLM`AS;X3K7&2%'1jI^hmGl[qG2bD"\n3C;/*iq"DP).OT5-#NV"qT73eXr%)R$]H]sNc\dq3a)>0aCkXl#iWH:_cZr$+*'d6`*m7CYgdkXE<"p6LXC`9nbrTPI:rFh^G.>\K@sAjoa),cLt(C;7%+pFdE!-[SeU%'B.[+--SX/@\X`c)n28V7RFR<J"8LH\A&.eR&*@?[7Mg)^Vnh6qZal_4K<sSj7+'[o.D'X$WJe%+;9n@;%4:AT,9pc;oej_Ul`8!%oMA_B+J,RM>[`"/jDA%o-i'BRc24IZ,EZhqHAeF/q&a;1<)ZO,s0Ij<3uqafNatm$:V9;OhXF&l$#Omd2gom5LpXDVPk=/b&gq9,%Smsu(=#%#':Ss7RpYY5BKZQ<`>=qmVLQc9spb1SddgNW!;k44GL%.8F4ni='2=Hur[Q;Fj),QHSKjoEtZ;tCDk5QGi(4Us+"(?7,%b6$En2OcF/6nTu&g):155:dUu>fTmBc/42h78-po#aoOE9(,;n'$p&+2@mcL,5cND/^iedO\MR<XQPt"1[HF&n9dhH\&`L_96*k@%LV?LL-Oo99MjN)!\0l-*/Wg[]JgG!7=UgepOnLIJL"(q.L\rIn6=g]+j#TZ?7cn!NSKiPcAi;AmbCH%&=XL(O'lu'\acIjZ")kH5%Lj:D@9`]r1Yobim[?o,n8]qr;0PkaSgmBt73)uXF!R"&rQd:M38+;U5(TpDn:rQqF-EKG_A(!>P;nE`J\"r2+.nZ$i)R#Q>P'3$Q%+]#X;=;B9M6=W'S"'a/(E4IPS)j.OjVAhk.YiSU6B%gM8'cB;Ns,pLo[`u)=NCq:\EkYR..bYSPE3?kA<>tdjW03=eGs:-+ZpgCC%\)92@VfS$6_t--TM9JP::.ub]`1p!d-^r#S>S@5):iW;;4rO#k"coWX7/-D:Ke:-u46Kt&GSW\OaG['E;g6HB-N=%[o'LH4gCrYs%i;1,;NsCp4,dj;Ln%q7u=sglaO:*lWn.+Sj`5b.@C*X=b;P8(pk0]EiDmr8N8)j&2]+1m9jBJVT"`)\;[U+::la/_Aj;IuXT3O5X%_f"NiU>*6I@;!sN2r!f'7b#`HhKuZF)R/e$gT<CR4nPPBg[1]T\^G8ghJBT7\Ou733,%AJ#L-;_OZR(+,.SZl7ZCrXiR2bSf4OJo%q"<3Qr&[snH-#k?>kfg"]Ret!j;R+0L@f55^Y0sP2bBU<Pc)XpZuPVu>_hD-OLuS_DhmNCOK&^\efi-r'NlZk+jXAr]tZLP\N6`u%UQKmlr6Fs?NEuurd;Q\714AS%fP38J\SeMS*9_k4cl6?"G5\7k\CAFN(/S`<ghWhbGH^iA0usfM[<gl6f)*[R3cK,mG%XWi]]F;e%\[-acf)LQqUi'u#s(\ut+qskNGGC`+)S2+W,Pg!L:9XZJ5XdQb%J]p&lb<p6n:P;NTl`p*He@OL,O:nM[<%=W^U@lapa_N1k%h)Q%?Job8[5t7-8#u/D6s\XDl3pjU[t4<C372EIRU'TP^KZ&%jE=+-lr%8eIk%u=a@Nq'Wg%:HiBLG+&W:Y&lj"sQrt=QAZ/5DZ#m.u3%`d*$Z^V0;TUdlrQ?3f'rCC77(re68gjPH?(_,NN.j]iVLl-r!aE*iu9H`?ZW]Ron`au]=]%/WR`,.UuN6n?^[>p:.$?F^DOblLC#%ON$mCB0%0'c:FfgWBAc"1QpdQjLC>1\KR%!cr9ml1FKk13o[46g&lWh2+Y10.olqMdR9iT\W:1r^"+-O[;*S[d_ehlnX4a+U%]b_%'tj@\4FFm2&&0#ud8T\!Cr!k@<GB3k@-?'DoNC%mjP8>YQubC63HC:R0%UW0:kXJ&aQRbbfXUpmgB_'eC$V!n)\o)#rQNC:aL7]9%;3s4VH#2;G23APnUG%A#eYAR7.E"[*Jt>?(deFm7>3JI?f5/2FW#5Fa!>(%lc@Eoq7L]JAIRI.."WTig3,$lHp#b"5%^km9n(>d*%H_($&'qo.OPrJcV8&\\Umd."E?Ah9PgWUg;"AFZPFs0rQU)3f'CLLGXEhbLj75`VgMMqQ!Ii@_K7T;/XaP9+^rI";4f1W%7S0NM(%/N3uoT+T8mOhAP#Ur[6dSlj>%XW`"tfBWjW#OSuq,dCSB]JQAG8@"u/(4r*+1.p$:cR=&@V&hSqC65f=Xk?DQQ?V/;9kEe@Z^3mi%i'8sE"S(kofGl`f(Nf<WH`MJ?@W0p!LgG9d/RC[),@4*5N)Lo"Ig:sSr'L:^9fP:.M.U^*g?f@Kl_pK3rY3_ss5qa&2)GSKbGG%"%7DRqDVaR+N5ci\>obuh<r0.'g+dQ6:S,Fu`NDdnZ+O=i(EV28r\A#tL<c5QmH=%<>E,)6J=/4=18sSHdBZ,r1W:d_f770!W`2k0m%_>5_8f_OgLhW!bL8$1O]eK'$:ER(Tr@bdukCV;,kk=#IM+SeHNk(G"C`X=X)p1<I2A:cOUiYQG%"Lc>\r^Odm,^7a-Ag73d>siIB%G>R+9VmW]t1`a\D289]3Z_pFf%/p2I@9[3+khY.[a!(<M#:9=!C.(jlO2$om*MqUuid>skF<V0$O$qCZn:ppgd#>!%oafHXru&Cn%jWC4tr^1e8Iu(9,&(*96+hHh9D7YcV[5Mh1IZ5MpG14?YG;YV8.#\ZbTG?8l?#.ugeen>s>RKg:$_Z[j<Wh"p\F/N5iG7`hK##XF%qk(r#E5_QfjLiS"_8o?&i5_cU\I1lqM).g]<2^.L6j@NWk5We=<0/WXVf5g@(:?G5@a@(.)bC83C>udOXnT<fD`o2e>rL'r,13OC%lU`@,nRj/:.j?2bReWoU5=q$\P5="[^m1sTbRTe8d%\&Q6o\'42R=[NTII(8<fa&XUJ^n2\iUmRU6d`V#rVa\i@5Es/_WY55qgr1%ILTMk4*`u.EKC9*3A6q,Y9&+G+;=TV;0WRNM8#,A$WKq5PKNfWVAu.5oVI;dLf[2lKLNMd?B'>$FhMOsp1jcKe)Lq,P^ro0nT4Q0%GMWF@IiO^7SFY_+g.SII<,!M"-c`-UHGd(Ad!PflC:2IL$u/G=q(`pHqBNrYdm_KSHn!\58$c4a2/&U;Tj^aUA+4]/p.f)-h1,F)%f'BLar4<ktPJrs_Y?G__nj7Z[-XRg8*Ua?(1&\kY4"j;JV5K&U%V"Et@rR=Y0V1XPmPtU<Zu&25Y@!RVp9crbT8e/a[]u?DlM_Z*%Y6MF!<51<l:r3M;fUi#uV!)TDKiW?;q@?4R2",S>+*>6r=X<mjal-F<#%f=:+UC-GMW91k02PsRMlQ@JJsQ,frq0V\)ZR]icu1dK%s0lLCAs3dU3]6DBlG&e\_+0k&VA]D:"BI)V2+eb@WfI?8D2)a?bP;[XMbT]=)YDGqTMam^nMVM0m9uGAqT_=[8:LERR*PRj9]Q-O%a'3%'iu7LW:r)m61%8\k]BTfOY75koa?MlZU[dT@Y/47M:obg.B\%L^1Y-'@:;&r%`(A,<o#E_;.@oDtp;o]-NIMID&EM"0g1kf+%Y8shSruHeF5TMc.O"7h,k]K(W&Gm4"m5=a"hHu7UkH@@Y$be?Vda]a]<OCHJ^bI:c(Kd]W9?t%hTo@o13be4N\7Z/\Stb3qP/-'A%gLsoM)A%<EX&G*[<ucpd%0p1'+h7<[C$MS!UFW@=qQp1OUhkZiXkiHsOQa@VNN1@,8,M)L2RZ0/oK^NfR\<m`Gr:HVfW:8NgLF1Q%Z'FE2<C]QL1NBooJf1]?RtKEfZdg&nc$PFq#1Y,GP2]2edGnF-I9:i77*dr#eochiP=E5Gr0$m]I.0)^jss=LVG(<m<OmeB.Li,M%P*R8*GjY.gNB4mgH.[u9:-/QuA#H,&cEBKbY_$-'asYnsZadA.k)pM94lBmVa\"J*-C@D#N%he,SX1nm'@80e*kAV"&Ta(^^,MR)%G%^,j2S1WE>5L)n8/-5Rp%f,rSa9@r1'#K1LRf5`1l_nbX5_/%:Hjp]rbSs:m>_1;BX<[aY1%;E7ek&b,W(lVJ=qjC=p_F?7'ZA^%`mTJ'W]>Wsgb!Mh(M.6g"7/SH4kO]V_@+Q`"T;SU1qkh8n,f'=^d1<](t]A22LmD\=Z9W/7/HkM0UgTlb%4nACn[7cZB+17Z`3#f%nSOg`rOUfkQ?\YlPm[*3am'TE=2]Ji4*Nl&Q<(5<F30W;7(MiB>#p]ur#IB`RX]lH\cL7X^9BR20+tIkReUNY/)nMhS-]^`['IMj%"'fiqD7%)Z0DgI[%]WX7T'c1,Z[nC>H)OA6<IAl\?YcbJ.r/t8^B//11Ncp*J,;kGan+6S#I,!)))PRQFRk[=pTMnZ+4`p%j?ZgK%UHU$NCTl4[YOYnEOKGu3?/h9M5C?nAd_%"$ZRn#,Zi]O@cb;5%2$:1l)t1k@q^\W$I5G9=#C&BV+AYXaiM8@K_%Tnar^X(#4.\Hf%4EH(eghuc?!%@%,G;nhi'(o]laoge=J&P9>:A;.P-::"jkr;%Y3/RImH9GA]HhAFha0>L\$4q1E>.`#p]Y0:DS80)O^OAbiOgrM>%AYVI.05)IqQ;]sC1NE*Jm/1KOqNht&,?.@Gf6M/?)ZIU4o"`9)-C_q6p5]?ANU/V;aPj?h7`t01>&6I?`Xal@`\8'4U\R>#KmBS#%#L9a2Te"ZqLG#*=)h15_r5QAr*8d0<!/PSS#7S"6gBc*X'4Y.\oGr!E?K..f4*Gf(hYN5J\837iCn>fn^!Uc4[qh"lY@g>[[4g&*%1H)!R_L_MtrKl[)Wtp4GOHnnkNR#p7#B5@2a@mJe5*g`!6;DFU^VGu>_1Q3p#<(NX7R>$Q"JHp.hZ$FBnB$B^&oq,=<WoF2X4A;0%D:!Y2('5Oo)f8]Q$E$+!GfC(9H8Ec,W65Ci!Up&iApR'4A47sW(;/*7oWC7!0:QXt2^Va)g)r<!oDiOA9<HeV@'6_DO>]]*&0`oc%L_+iY%RYGFDAael^=a[rY4&H7Ls3N_+nA75%[#KLDEbL8\+eHf#:V:6YeC)HqS?HrXJa(RBc?5nO&=>HK+"7fHKBMb"%-Hf&JQ.B%3$5g)&T?kM_oAC`T#MnXJ*8/khtO%-%1V;jHi<e&#l@$0cJZUp)7.Ml9CA2?d2B+>6L*@Q#UPUmN\GB`cQYA?QW%;C]R*X>33^VI%!tY`19l6<5$`WOJQ^j43SZJ]s56a/rdu99E24ZtAi8=$VFaa.5:b9B7H_:1nQ^bDRRrZ9_T5(@MbPXj]g$9N\o^1*n,Tb-2)(V#!%c!JAP^Y^S5Xi/Z6FYf>"I^W_-6*[EM2Xcis]GW4G09!Wr5=(PbIi@'S^UNj0V-EbNr7AhUk'+43pn93\nPn1kDNl@8?>lmqhT64a%a2NpZ>qRe]LR"mQZuE_MG26G*;k$uGF`k1?V?HOf.9_GZ_V9cJQ#=\QWgVP.Rt2LjM=7iis1B%qT3UaNVE<=-j[X%D0"8UmE4!6L%h_%p4[uEK!dZ$G:qs[83s*\557*eD@ERU05P,5,"IBW:OpG97)p2k^]h5D0?nC'oJ2=A!3lY6<$/G5)aN2?6^[pk3*P)X%U[Vqkk%PZ[eBcZLd;]JlKt$+Xb>q@^LW&Q=2Iib!#[qb)E.qP>;2[8PRV[MI#g9\E\.g=*JHpRfgY]p;Q'^+ZfFJU4HmDgO]Qerc+OXpAT9%/:'+$Vsdk9''M1fED1+.FB%^1Bltf(+'ZY4em</qF9Eq*F=scNIRKfS^RdZm]SN;j=F6OPc0s2cK#tT\533m3rJ9kp[U*tbhF';3%O8[&Pqf>FFBr/GD(RlpZCSf'=0;>H==(B.'BRXskp>ONn+q"0Ugcm4;@fFT8_$edXel#^Z5PHA%<8V$VI>KRl`dJ"(75F"CX)VKJ%p@`h,hS!+k^<oR)0CYFX)<oV8Y;JrEHt>_XNPoh?lFks-#:>?sntk@4e]6OMnh"HmE`A9^?cF48POU!Rh*8hG!A,=&1"#ouZG,Nm%oX4F(WH[2e:FiK(htc5fM^Y;$AG_;@@b%N]=Hp8%[eeoVe4AGoelt)2SjXBp2%pX_GVWC#*aKJ.LuoN6VIaZB&A<QoWh&Hk(K!SS%OPO-p>X!%QgisIf]<H1$>Ip>]ASIc;IXY<<9!aWGYO&(DY^]&aFel/:cX0@E$XG^=j+GffPj!NBiG*)Cb[qr%6oeEh%n5UTl_<<3%oO)*@*T+V8Sj^n.NI>0.8(m>`)3I)9C-8AXX5iZB2pilKl*spQNd28N5%l"ILghium+"],qR7QoZ?!!.g"o,X1Q0lXkLF]NU:3pf%W*ar,HCJS1GQ!>h-pKKA73A7he;kWN<t[nGEJa$LqYJ=#kb!Rpj.[(3T6]O"m<?^Bkiket')u3pT;Fd+qXen(lq=_7fM9*V&Ns!?%=,tIU-u+[AX#K=\h;I;.MeK;<RTZFS?hC-eBi=Y>741K=$\LV*8@+&4J#J\J+IaEdle,n0ql+VFK8=F=g`t'Ik<;UsIbLhTU@G_5%Kf;\)/)I<30T*sPEN)o4+8:;!AeYSJ1Mij9%G^<P<;pD7dHs=Jm3$-fHYfOMU8Xk@Xd+p::tS<U>,REH1cJ#`+(*[5hqppl%q@5d%0s,]o6&DaMA5U*$g\RhS=ns=2[r7:fSI@sil^s4J*o<i,-D"t)YF)cLIdq^k,I044Np65?Y4p[?&h2(kg$j@B6c*fjoQc=qMos%B%KqN!dFBF"E</u0E%6kj:pkN_Jpi>-YHb-6tf8oL^WN5b89$0`lLZS8R76,]X\Fb.EXB_#S#@:32%J,rfY&5%c5&WYtQ0Y!)K\o^,%\VY`I]q92\Phn)paAS%D+P"2HHP>-Z:Ygn?+D^B<4gXPMoN:poAFGDR/ri)d.R3KhP2G$Wb/7]IQf$7Vb-/F4<Ni<f@m:@DY<Qr>%T=9=(b1"VHme:fnH-SY/5#7etC3K9kA/lP6?;%6jDsbL+l-#f)>^i^L4hXaS/f"qF3VM0(:Hu7aceJ,gHN3/Ag&%cEe@o8H(d.S5%9^A=k<g&6jVFmML9OcnQe,A*)G(4._49b(mC4%P?@3#::IVL-XVDbgU$d(2bkJ'n6lX-",do'fNP0RAGU2>#dp$5S^dm#/B[C+\I%92i1>cULdU]'-XWcSi8_31<C@^m)-D?[es1?^Dia)d/E&<(k3sCT1:W*Mq+u='b[Vms#4TUD%qdj[FS$:Ig7!^;"pAD*86]bahl'%'f:]Y)rg)l!nXmj56"s52)em*8-9YXBX4sfmJuS0K!qt1SmdhRZP1BhccP2:?o>Y1lZa(#mdL(1/l_-s0;?r7=/slk$YbQ]M'Bk4%XEd_8,PjKPk[)8PN;N;0j[ISJ?@OQWk<sFt;/>(!q`%np7/'jpp+@V$U;k^r-5q_NZG#482(Q)b8JFge%oG0Q7!"-UhF*?Md\g>#%)-Ou;0?oh3Sic][Kpb<a725BJP&5HOQ&=#S`LT4jYXa)o$hhZJ)#)j']bp"a`O.NKO2"OP?OMu,&8!/q*i_WgkAe"Za`EW+TS7QZ%(MLqg=d&&NLFo@:nlVX7?b7juqi?78j/gW&*Ar8?VYS9-n1RVq"gGBbldP<%)iD.i4GmA+b8mN&f^`**1,&b)6Sfe(+4-QCA-3b9%Mkl905%U*A<cKHUmr4c5hVQL;qRITD+142PhKJ_Y;!,g(>5?^hAua,f7]Q#[,u-\Q-QU&E@e2B8(+hca=E6)lk'JiWd4!&o@keVJ%<jn9Gi(EMj\p'FfPr/<0r)DKI:-<kL9HT!s3rYf>_fKkEp796/m:.,WZk.^l\pD`ZJ&obr):sAa_c9ram(4Ar,*s78#Slf=+(g5m%5E(ooW<o!S0+@/\YG/g"1031#KRN=')a^i`>Y/,`Q7V,l?+:Egq-^p0OusE@JQ[j`h]q[]b]6$G[PItJpZ\i5!,k$dMb)LWW'E04%U`t&K*RL!T`_u'!Q1sN/E.'FKit'9olu_pY?016dbQZa2[?=424IW^\*Z^#Q)StK3_77fB"uhNh1sWGN>M\@0f:0g-k?k`!P'*IF%Ztc#9b$3Mj.S?K9q'/:[,&sgC'!`b%#kp*B,j0MEb:[#Td7n3%qt"4>Zi;GU1^5mp$C)Vaa^fk\=kHA3\1lg78FJY5:@4)*h2CtI%U<UDU-V8=n>YkY+IJH!16+5WARU]747kACTmFSRe,e?p[PT1\N+11UWM*3=-W-qDLFN?q_R%RGG*thbSHu#UlQ*QH7NBFiBZGN-F%gNBYFrAMA[]&_?*"cmXHTSJP:W*OUq^OaMaB(V2(4ZBCXYXE--PP/pC:TZ4Nm"`!?Y]V[05;?d'Z#S"AHqB!i''fGTK72rh.:/W3%PE&^Y0jq'sSJPc)5lCOb$8a:La4U<1%urC/-Km[j;1$$N.jK*`lqcZm[j\mu2+_6%!@;9ipfQc3lttk]DGH/oX);epHWs-*b`-*b%7%9ENe?d-l0S?KGf>LZ>hEC[dOJd4Pl72],;17<qSHF;%60g[!n&+G7INXZm#.CG3J/\'j0IO!XLGb<k8LDTORoqF`oVM5UA)atf%RQD[jIDf%Sj3D^(Zl?ib/Jo0'od*9j4o<Q/6q&<[W\Ob^6<-Epfp5S,,Z*lJ73^$fiS(d8&2i,*#E3h41IJgNadO!%;ZWW]A8nB`%2Bl+m56hGtC6e8k7\(IALABA<]A4BVnDU8fIh'-8%R/n\=".1H_;[i_^j"UnW8,5E!8u0h,`X$U(8fRS%8n^jm>Jn1@QLq4-LbYE%9-02P.CIoenj$J4ri+2:IJj[NfTtKDSN_+81um9dq&M#YOmpR5YMrm4_MrZ]P(6[KWjm[a:'JrN"W(\1f:c-^I:h;F]hA4Mg;6/n%%nWEIiTi1*T',-sp$n,[X2Ijhc4Mbe-&\4hY!h8u;u"^6e$j8!:P'H))<9Z%QgAX%<qjTWVK1FZ\O#X<e`eT?0Z<SQd]m[N*'+[[%1;=>??[slnA3LPHJ'F[R^W'38(VMs@:/cIcm<mhIV=j5F\D*Fmp*bq[VB(*34dt/=k4Dr@qP_6Ym:clRnErgUK4=5ub82")+RC.0%LV`6IAc$'q3MW*gO-#=2L;-<md8\EC/n3+GceY6b(_8"8N\LnA&/dPJ)=OG3N-h5XCdDb!4k0;[ZG7LD5W<j+6FJGS/k1T,'h!=e%79YR;hb#:KnMS&*DQWO$.bn=SZ9CQY[<MTr7QZ2U@E(D/_OUU+5CEjsDafA6:qgq:$qd;?3`n\O,njU]N3)Q/05#Fug:5bQEB1#/%Zq=N4FO$!r/12*SggdshI7?D*=E]EbP];Xb]uf@!Pk+6g4t@$Y@8LC8H.UQ`%Ff08d:_eaT.__\b??O"q8mGGkPX+hBP?[?-=)F^%dagaPE<O\MrVR`(^R5>$h2\R;c[]]<*FD4p@qF:-,ZNFWLc/]kJR;TQ=nc>JIWZ.35J$_8TG6h]nLc0tL5`<1G4r=F>`Ma(j@Odf%UQaDjE%1AOCcOR.'so53/KNtY2@?cCkZ0@:.PU$gF`6P3Bjj%HbatjJH?A)Wp)ML9]=W3:XR%*uFJT$R((t.&+^k"eU>6>db)C3:%qeh5CFKd3RHd0+#aVSC*Q4n)gqj,+>8m]fE>9HHcc3^o9b59h3-JE\I*:m)r>hBJ!C,$J::[\W/GkY,(dBL&u*+DZ!ITClP/Z%,j%_k06,(8s)3H8J$DNOSAi`kkRp//1"#I8B`>>qkFrMU`J;jt_gfEl&Zsj(gH+*CRE-0oih9fQ,L"d4ferF<Z[TOI:,GoH"Cl&nsHD%3iT2,-CdO"C]Z/]MEDB%7QXX>h4(=\2@Nq(>"eWd7g1E2<fU=26^*4,/6sVM6XeGX[o^7rDYn\oK!<hJZ$_A!N.c/N6=8T(SuMS4%q!J2hf428<GuVm;&[E[;:bUEG9e5)VB3`@&aNfY4raao;krrc_)VMYZDSD0Hp>P7lSk-DZ+6K\i*A]V]]3u&(E]`k5#W'Tf%29RI%LdQGY[,V&$ng#Q:k8m#8anK9AD2?&VPl7HI]D34@O_&"g`^j>\J%)Y[E^eto4s2SO.Cn`MV`<-h+D8$NII+@ZCX;?`R@U8@p""CW%7*nB^o80.KNh@U/6aOh[N=qL$kigadbV=4U&Tg!9E"4UE9W5TKkh,YcCCFKf"<EI;S2l>LMl;H)o8XTV4GGIJJrW;.c5]1f*'krT%(Gj%W"\6qeIBYNJd!9H<O<Wo(G;5-q3Yt1=aIj,e:4$en%%VH,E^89HF/qri4n/H55i6"N'^Y'QPo@,OqkOlL?4(Yql,fQD1[JW)%C&LY(Rb6)9^,")BErS#2a0O151bG=^U23;CRQ76M5s]bUpZ"]Zb#;s.5-1FN8JZ,uaLT[bF,?cL^4^+pF)[MF<2FSsO5i?(!EJDG%mGt6uk/(QO;[*%.V)e*g!E<]a&6hHI-oQ6)87gqk3O)6EWA:fp$8q56U0#h!]5GUm]1o[J`$re>lo(ETf[6@tgX"k89,\W52W7[J%0=4-+n_4I-kqiO#.V0\B*lZ5.F%%mtBH<EG+^E"cOcSHTlU;bIR.O9LBhXV&D;j0]KlYE.ZZA4/1QHBi#\-uW)>G>^!)Kf9:#b1m%F#jfIdS2gZ,^[=mMK=!^oW^7S,F]nb9R(l3j1qb43-/P\352<Lj:Na\3kOQdH+Du1<b81oIqW$'2[IFPPkNu:^DF6^rp3O9BSME)%)n-&9HlSc.a9I\p%ir^RnmI1b#'lQ(Z`l.b2NuY6]k/ut@:N(>R%uG9eVbk9VTl<,qJ7-m3e#PWOc<-)qq+p[N8t=WbO0]\mCH7[%1.AjG2d5tlJ,j4Uj<N5nFf]c$n,#lRSGQ\]9_J\F@loh+cE74n`6_n=H-.=!(ma0*1^\./mqG"X"NSgmpCOT;pIA7R!p2VZ+`@;E%.\5BML)lud$\#h[nPO>0iQ]D`JHcuu%?gIG3i?%F>PSroSi\Fq=9!^,bAnXY,h\;DP)P.@M;/lp<65k\lQ%,2O#m7P;=5Gm;qkf3%%Y?RpiO]rMVpO_o]+54kfUmf<gcGP!A'S'o-3DW.18G27O,P$[P%QoJ_5&-?TIPLL9e_G.n7eC_#54(3X41Z$)+TtIB6S/%g`@==%8Xe<WK4XE8E9@+(qU/PVa`gWR&LQSGiG_DMN7WIWlYpHs$u25nnDE%64q)9@O,S"ai8JWeNsl/bl)oilC#\a$H=S5iEUe>R*guN6%3M8$]4-PH_p_h8c;.CKa=H//)%:q(4"n11R)3_RR0kLYmnD$;&_Wff6Kp>f23`=Fs4(g_MoS.*aEh^fqT&\!kaK5j1_T2H&L#?X\%Z#On05rRZ6$](hk'0dD6\4:e&$POsOAqL?uY4FlR8s3^LrH2u-6Q!An?:RFu@tZ!<Eq*SHGW7l'F%!r@^8K8]1M.mRDMIc'-A[Eb%OKggc_p)VFC5@,E:chWhNe\j&Z9'7JL/rTf1(62UFFNb!hRfJKWB%/,38\dIk8Fkdj"1,[&EXZ;2]BXaD<[No4IkkFb\pWsn$Y$-%aEe]]`^Bi^h@ka';T%1R+ne<u_R)>e52u<:L_VFi1P"hF]U=O8JP5Oi)*H:R0.t:*Gn*mpQQHEu1NSL</k&f-10.#*1_]8$%R(!I%[0JnFNb;mYDlpV$Yk#+7bWqnUOg1BT:e/_lK16i->8_X"9),O1/)Qqe'8U/4>E`.&-OV<p[)PbQ>8nmt)4\`]^pon2B?LG(??&!S%W1g7+4GqCdL:>!/U$$,n^>#`-7uirSG8aZ-l%a9GDa<\/fi8/hdnQc2,>r:bQbE\ALLoD)Gt+V/QtJhPO822>rqr?T7&mh[R7fpt%.VC@GWDLn,&ZJUL4<dZHH7do,d*fWlhtSe!+9@7pL>QO[Dp1KI0rfuS]t*pG9%Z*%kdrcl:8)WK'FV7Ba4\OjVX8qI6-h+sNm:uu%:#)WWKpu[\3I*$Ck8?[/%ttD\.a0U]DN'&rjS\A@*rnt?$HQD6CVs"Gi0/577*$&#^$W(eUP5U0:^r<Y?4,^i%,jI+_?U!.9kM;u%]+5bh\[^Q4N=J6j+dR)!:?Md/c\Wgk,OT]%E3lT;XrCV.,_GB7%NZ\0]X`hop@+_&hsR)G>UmPFi)_XD0-.r1iQmX2D"VIINMXgb%5N#$'/%FU;3js@JRtkqFOL#YE*'Kc`md@DH#G]PhVd*fqEH5A%-cKPWH)2b<m6%;f>^"&VoiIG?o&Zjr@(4(tdcIB6KUn8')&2H2%Pjp&W0@fb>RU6b;;4\AC:I2g71"2aC>cQ&*lD++Dq8]%C`-qkpU3<e_.1p].(C+#99@egbN[EQWZ.ejY!P8jLG'd<'M":H<IdR#&%fYp'r[kE1uCB6itPVn55l&I*<5@!h,)Z.(4^[YfP3[hj_TmEs0l;^[4$mq%MYt2N94]K/%`J/G0Y@#S/ZcuU.&pqOZcaYfR6CV88%./:iMlCtc:$.j\Gj?"Etj`\Ro4^\2/Dj5Hm<2U5nl%V5\?1s`^hda(SIoNc+Sh'h5NP2++BCX1,l^PddEkG#mee@5[U6Bni]P`n%%c3nj1Z7p>V,kgjoQH,O@mb68/E0ZjS'lnk3\4J?9o5.jm]l2p`)[Y7_pK;60LS0C4B-_;i`n\KD?=/r+A)h2M506G.@kOFlV`)dW%RVk#J9\=#>YBbZQ$TEDhSS23Jo3nMRVXs?bqWc8Rd<'D_=Y/CQOcLa7FC)a%R<pc](L(:l@_U63?:BQ1+_61<\pur$F,[!f>,N6@%H_!0cNb=Yekr`$:Ar<JWo!<S3$TD9HS_)_8mNJ!&1u7qJY3$<jk7pYQ?59"oRa,\&iofsZ/Xjtc8n>>UT$_XdZ#n81F64'/kLG(7%#<UON3q!g?Gt6>CNu=?U1u/icRj+<HT4@JOVONQT@AE)(`E:A':$37)-,ip2.@SP_!.Jk'gnO&G<_NAY'V7LWc7>4+HhKKn1n@_C%R+KL%Csd?2Z#nj_b:M%_?Hhp.NR&G9k7pYQ)9Fa71n@^#Lc+U5PX;3YT)c%e#o,u":80l%`#'F97`+Ba"H_mI["2$3clt6bT/6:k%FoKt24R]<Y@9nQHe(C.,*C>Xnj:`p?X8h..JG_eZJ--M*6p8.4j]A95K<9KuIF.A%c@r5hW[.'$J4bMrkAaLBbV7'^9E:^Ui=X(R%7\h]jT/l(nkg2I;)Voi&kl_s=/^*1K]?+R6>l,h[cFF9pP#$,Ch)L)((Z!?kZq,T,NDLe$\I5`.q/GJ3mV!;In3qOW?ZR%?UH$FS%GA`J9k='URA!MGE\T>a(H!bYPg#<S^(D^:nT&Q9@UH-=sFH>R+=uU3M*+F2R6L;[IKF+IGh0TufY;PtJbZEjF"n2DTG,gM7T[&$#%8(aasHoKlKm;:f?OTBA-Td2YnL+P=O-PN6gAVe8D*U!RNL@SL9!S@6[JR.-EThn1;@#oQrh,)V`T?hC'*;_t,N$3Y*fa&<:no5.4%+h3caj1q5!+0qDnLHMc2>u8i=)CUrhVQbW6_BCO+a+X[#eoJ,+)d*!8OVeD+rR2UiQBVc*.NfE@lH3JK*<?Y'6%uFq!]+QWnn$o_%>HfmTIBPq09?:9Uh*HH>*I@$u94k+ce0@%FVMe-YRHG$62tMs[]^Z>>QsBB(4-SFfSro)5REZ%C9&Qkt8]mJ"PQ4V,%(B5p;V_!l%:3[A390rIW)5^Ws7CLgH)PT('5_dBCnC-65kDl`fhf1SB4ONO9n#[(B_qeF1HnIA5OiU&m479sUh?;YR2sF%^e&;u[hNTt*)LC1X%k80I!,!KOh)t(T!pH$h6G@=9)hu!44Qb]bsR#q[WCXiUgH"/*@_U*9<2T794?BL9Xs22=_7m8u.gS[0s$C;F_S)o,h`/hG3f)EH?%'P8sU^)[/oiQ0T=#a;"Qna.QjCVjGF(Q!L<TuZ:6#aW%.*l.^P=sNdU"c"g,'#\l><gpZjZ%+MT0309k04UMr2#\dp(t6Xi7u6Pa%T%!BFX[IkkL="'S5tlK3mQU6To!oQG!Zr:!`jD&Q#"7m61CSt=!EEl^(t/VBiCdMpL4Tb)SP+pB<kPID>obH_]9kFp[?M]<cd(hr%pje1)R?+5.3B"A4*aecH#hKr1Qr;N&T(I/#L:CIW3W.Q%55KPcG=0V,`YDK&kj4>V0s3ii\'1&E-U$/ca8K=?)_BqZ]gt8O3OJ5u%]'gP$G%.H&llh&TQ#LPH<^4$ZGh4OZ3(CYC6IU7/2;XPiF&?;\rPIu2>L:r;n&sTH(7'C/iHiE!=oTVWe;![GiP9!U4`#SVlTpcf%6Vuk$+4Wdomo&2NIrD5d^-n=<_rk)cU@j$Z][Pl*_ft&J:$XH]2#Q@lXSo9iV(^\'=$0a9*J?r6pGmjb2.*(MeQ,FnLuoM?0#+b@%^EC0rOa'^h?f1?#\sNDElUu>rOXPS_U8TZ(0YD35dGksKU:pQN<m6mYd[-M3R;5<r2JgrZr/GkfZLgun$BspmpsjQLUH%DWR:#l@%Wna/)/^aKhE^tmV#a+qnlS:N?NekX*Lf^E6m.h/hI%UkXD)+E3i`H_;/<@Cu/F8'ok:9QqMUf3g6NJ"M3G`$J.QQo2p9.HJNL2m;%>nm*3^K#p4isE=c<VG-KjlM+(iCS>HO1bZbmQ+m<qsnI,X]5B&@&n@,8djFJ.F./e,u<qtYE8,jN>Y#6*4mR]Ct'K3]D_@J4O_47%As</76'_"*n7G"8=V&$-T!2mMDlaVT4:]8VWjqLkR;scS$#psPGTZ:#H8)[HMfGiho/:hO*Hp8M17)"4qi#kpbnU/^aumsdKGZt0%p.fb523%a.`1cG/G8-bO`uN_lIeQHGP'F6OZ^+5A0!.tL1$>DGF`_K`7Je,RkMZuL<h8+fq*eWrdh*b_i+i]Jm_c3geV"5>]0a^K%3""R%ZBI6`jAl#_]'a?Fg^_=HH\>RN!RYc.EZ52\n:>+p-*b0CeoD-;87i=E`fDQYXBrc6F!.LD(]X&?qk%p@_A[Vtl!r-*)kSSo%O9PbIn_PdF5P2pNA+.)#mQZcG4eGbnCnOO:@H`ET.kQ-W_7/WQ7Fq_Y2P%d5F)5YD:\]6-;)WJD/9']k6B23PUlC$84'$T=M#n*$%*V-hjVMYH9=udo6d!;Y2UeuYN@fV552bb!ZGQ3ZB!06DBSL=h!GRiiE/iIDXi$d*#`rPu'K+/V#(cDTF&S3b<'O]Q15bAlD?Zo+e%UYa'3H(l_&YVCZ7F6'YHmoE/4.Gs2FZ;#BhT3"GGr%I1'pF=DY;SG[Md$XK(5,"8Aa\2H*Q,N^\V0r(13T!HRlV]pVB4O3s'Qbe]%7/'bXI4:fCWrSE"pg0u26Y\D01jJ(^5C/7@4O/Zg\CGM\8?SV4r?aTFC>+%5]UCa6Z_:XuqG"LrBu55q]VUeIl8RJN:uYfr?t[EF%Z_9_ClSgH1E^'6o"lJV.PiV)toaBUo&ddmN*HSDkkX_j:m8ikje^$Cm9REsME7=aQYFP5k5AqUhis$(j?GGD&dG#Q:)AN$S5C^Y+%>Q*[r?TJ*0X@UDqBB/FQ$eAW*RkWm9I_c,WYfC@ff2%')H+AX,4+V/=?GGEt/m_8>_nCL"d2]RWZ+H[HhWm+Ib^5_(rBfD^2q,Hh%]G/[rrC0RtSaKh!i4rLQLsub"oaALacYMFW2#$kBD1a(BqDlhER6Eap3qQ-91Yq@5YYKgE#^Q)[Q@&R^2dC\uUeZ!7hh]96DY8(B%%l84\6\F4\2qGF-bIr@uFFWG"rO)cGopbkC^1g@4n@F[!p:(A%Xa\_gF1C]3o87l+X1I>7gP3Dn0A)GSI'>E_lPFr?#N!okLO8uO%DtT%,-W<CIHi8QJS%X"X9Ra1;B:n`>Q=mpm0@V>.&GP_>G*pPj^Q3:Cp\G'>V*gm30RBp0\?#Be&SBaDrOfTCYZq'2&OTLSlfT$:%kH01h7&<Ucjq'#Khs2(pk)d[\g$eT,"lAN'iI-)P7cBBaa#DhfIdU+(kWAHcHkSs-qP!#l]m_a?_a@,WI.$Z;C?U)H+3Z7u'(Zf^%WulR#kAd\4n4"e?r@jGllPDBp#EI%\jsf4h^JKAP-c\@<op]Q"3Vg@;*Z-<]l8SV._:%P8d/g/icZZML\6./Sh!5ar&F1C"VnL^.%PEl&H5C\#rZ?uPeGSFf*f5ED`B%hV1]R!I,i.Qri%<J^[TL;=0)9m?.?h!"3N.'Gr\5sS?RfD;2a+]Wr+&9j/N++_]3O`c?V$3f=%nA]fVfHNkMKO\;S%h!O*GtFsJ_r[.ub:LG;!^$Uc[a6X(I^5]X%J/@'om0i/c(3Wtj)A)-IU$S;>75#4$0%rX;qL3??7c(3[2]9=%:i,6-s!*icr3Mkrhtjc[)s`jbWU&\Z8#]JejHRfZbaMEm\gT)Z:@f<BD"#6d.)uRjccYe0gUhLWC4%F2-b?Eb+#Io$S,UHtEiTUP%b3d[?;#-6a9dgP:S##W@A`6=.HFeH%ShKbfnlrk5;1>,_/pb3;-.hJ_m&]r9CAYFuI'sZMG^lQo$mrgP!+J#k1<o[pg&@uL[WD?3%iB=W\*5=RBZIW7!q"`IsiUY$%Hssk:SL,+VYOM_4?9W`3F'%4#AV#B:@Cg6Erl/510"fr@?6b,[.nbj_8j2Wf@L2?;*+.Fg6TF=M%/5s2?UamSP4b@H<04lA.XVlq)\'"2Eq7Z<_m.F+0.9Ba8Q5[lWe:t]CUK!.A7A]kSHDp2$SUU5JTCOWH\Jh78[_=8k:$_FKa]4sC%&<hn]7]G/YT(+[f9(&dCG3P2hI2l>^rD%_HJ#h'U1&>iQ^s/%r?oaP.3&P05gr_4egm2GCALeQi-[0_Vm4aj;=?)#=gJ`@$*R!g7%oiV(ODEkT+]nfiqqmMkcVq^.`9EB#`WN.=f^!s.F<1(F"T:^>YO(1?.3Rs"1@\I^A>rDT[^4j;WIcG.UP5AM*ij\S,qeMiQM/3\%%"Ahe=Dgr\+k`,Nd\ZYO@jZ<W1;_TEUKXF2P&i0+BYsF:5-nqU4IX^$Dc9+pH^H0F6h4l&VIN]CBfXRYJDQAj5%n$fPK?Y*Z&;cT@%[AD:uHW8.DGI6AIbr0ofO:r.dmIe3:*h95-_%Z+<GY?0GD6AaQfFK3?n!2>\O\C&h+H-#c?:@67cP.jA0rb-:ru%O9QR`!6Dr8L[%cgr/Sp+nT=;-Gi:@sJhkOd4`N@Pe*6Zk/ZI>6p>9:tM;2jhS3m`WImjH%V#\-(U5]J(/Ne=._O"pDW_@il30)9d'Sk0-tglS<5f)%Ro0!@3^3S*.HbFbbA6S6Q(.&.`V:ZD-3;W0]*ioDb%@j$oK0K!ACC#mnX3$\W/=5A*a0Ag[9)0eBj?u8lL\g`OQ?:#Q-&L&Q7Afm%_eNZ\i'9rDSenANh:E(\n!Ye604u/1;&V0scpg6<E`DC4mM,?Up`PF-4fW>;.eiM0D:o.4lE-DANk[SE^61V*+XrT)Snk0Xg1-t?%`')V!"25ema#;?DoQU&R>OC7Uk2qu'BaHhU5etT+n-H^.Ym-pgp1b>O+(BJ!E,I\kl"MWW#^uS?V,i">4s#9\B0h4bjDrL7rtDgu%n#oWK<Yod[3V/V)HG#ZcI=XPpT^g)s5cLS2QmHre%ZNZ8e2fLg3H(5i_?2,-i7VN+%A]sm!_dg6Ar4H0,gQ%+%6#N*<hAT;\B8R_%3!H7%6r6BJ58>(FmuDFfXhsISl1a@Y*R7c*'jD(5Wg['Opg@6"PIP\</V%qmms$!K>I_/+K)RnFAr4:U6#E=U%EWQ-or&l\LP,FU%f)708<OB3:VOq@R=IrVCp>OW%^&Use:=e$fr##X.-^CJ"Q#gj_e8^Z.f7TBjB6I5.>11h3mrt8D;5nJajaBLs[s<Hlqo\1&5ZF&W%9'gX_G@D"tIC[tanQC@()QYM0g@KbVXY6m?pX+pQ[DksQV&.)p_mj#"HKTB",:]<)>"*eiEm=3.Z<kad)W!BeZrpiuVB:A2B9^D/%a]@89=-%!&V2)NMo"uII:t(9AD6<`GHAGO<:JkI@Q/X2TlpC%F7jS)BODC9i'dS?i<A^n,Ial]J5JY2!(W*J;\@>D\2=GIl5q7$=%n?ZGs]!6O!5X'hHQPKj*3G7l=#6>h;ib.\$l_(1>+06M-HB24I?KIPKjrF>T>ll_V7,kN=#`6+g>RM^KR&S/=GhgZ/9Dp)BVM[Hi%r7RMFgIT94asB"l9)<T!bYlpI):Y>NC'gW^0iH-+/NMFK1$&Qroi^"fSCMgbo+bWgE+h^E7@eM(+,T<q)nLc=TqL(7H>Q;84SsC;%6:$jU?tWd$HX8a%/AGN]ErjJ]`Xe3IStUA"hKOLZ)DV$(.*1j6*]4^0q_l`>KgY'Q&p4/SW:"f[$HcQSR0eO%Sl^q^C'LB\jXMI^%;FWE`E?caLH-.!G?UpWh<,(,H4lY/LB'p1!Ccl!%)@L.PL]pP3)lI8Oq<RQo).i95A6Hl?Ci!HM73)5!B:VJ=Cu%4W<nIh]J)`LE%L<OlX;49A<\!G(#+1+C,:@NNUQ&RRs`5QC%6W+%=@"3H/[Q'3rEXiDa4L'D&<.b?O(manpn1Di4E]ad?ropJ%,r\BeM"QF;rWd.H%_qP$n)W-ALQ;3#4'*I,=Dgis<Q7dY2K@&7<O4:7H1;r?b^SE=1`qn:5Rr.+oBC&(=*V-R!OTE>rV3jA;Yu=?iIq9Gqgn5FYWoW@c%R+U?N,SSpn/^ZRh9c.qF0:[I=o3\ku$:G[YdFY]<@OWmf*.sG9=d>BDf[F1E'@p,@!CfIM&+q<i!p;j;^Q!0WJgYrs%;1:dI_hHA%+>X&K7qTVGl['TZC)a(&"UJNX>H0"*[e[!(P*LmP"+Pd1R,H#:XH<Cm==71d/:cDhnbuB>+\3)dL.nh,0u8I/d=5E`/@b;7"+JQX%*.lK2psW$'4H!SN>d\tf+EQW67GtMdVlg,-8"NF"a:`8R*M?cZ1ul,*,:d-B/S;=G"8a4]eUcqB?P+C/$5G(a'uL2_5Kn4<SDO[I%H4&5?MYn^QI=C&[>D,cQ5J+6Gbk^k>G9)&V!juTm'/.$:S'gH3\s&,=Ec8$38O[H^^,q?!5/ISjX#lldnak)cCq=WCM0\Ul[3baD%f3;WOgjb/)Pl6gC=,.Id-^UA#T/+HOlE>WVK(/_[Qh+7CjI?X8+^0$GkfkSepE0?j39q_tpRbCVYG6XAd+(-M/&O<@(RlCeS2,7P%>aS5c?=(3l1)@HWO(m.0O2ruHPBH([DnNF^^8r"nEhLFeHr$`E?0pO%&UCUO!k40Rj/VDU@VMrj&kfoM/n1mMSTDFTZu]d84iJ1/%]*gnWIPDW@g@A[?aBGKZqH[k?S*\@?GM]%]a1G.4aknUtk>=8.BAfdVf'%N090>u%EDMn5W-?b$8s#kck)<L8G=G/`1s/Nd&!n[[%bb.(Pp^W4+cY9=iNpfu`rkZk)Vj?,p=bdXAp$M'2d2\Z02>2J^]_j4eX@3MS>m)e2@d3(P2>VQGLb0PNH>M:$<98rUG%78')kQ?c%S\t#_o7AOsm^6F?U*(6@^h%59$)"k5H@,_5i.H8A9`IPk-.0jfSHT[F*d0c?hrEf1i[eZSMVD3`L9EiZ>2S;Xpj1GJeuo0-=[+s%%WP/h*fl\nBQoE\9&U;-'Fk=hu9>&&6GEBSYCs.c$-u2H#>YF0Rc*^:5pZWX@8b^\),(:r&\<bpRP-nBNSWP\d%RZX,bHK<&mqqF7%'u9q+M>`&tM3;,L'_O5fJThZN&@`f3g@JAXc1fc#$Jf'3pN`7^C+[H4hs9qE<:%2J:V9$b\XQ)?17,AjqH&7*Dt?N4UMnKSI5n#!%2Kj[8(>A6"p:e,1>q,kZ%Id)_B][9nXtT,<(V/[Vm?k#957]k;_U>%Mqdo0*^8.D\^mVWR\#2A"05[BQS_qn_J%VB#.[t1)/M=g?%fA^LBI6AubiG/nL7-cP'0;"h>@b*-7;,^V>5B-)Sf>N&$QL+:/=ShaUROmp([Q]c2\D8OJRP!^M\mr*+''CsE1]9H6U-O;eJH/8Y%i@p,?LfbGGnL`PQpa=Mb`u\TY1%F%Sl-$R_%_7^t)&OcZpSeLfPN-V=mIfSB[._QW)e&d!T*CgmGFb#<0=TTk8DUBAp``XlE,h_$%ZV1iW?7Hb;Z/s]O#&]TTbDROU\OL$@.DcehqPhts7+ikV^u6(A&GZdL(PAgpOR5"QOpcX.Y\#&he?-.T_tLdPZ?c7/U0\'Tl[WL0%;4$Y>Q6*65<fso31s%&e(76n&rP\k+S-64VSNTC:Y!;Jbok5.`.#Cp"]*F_!TR8s[=P1_f2iE$J1]iS5/qGg0rn]_Fm?0_u*$XuP%)6Kd(&Hm(CLgu[bXc[D5r2D/a:HRdprDOGP<*S$^h:%N'`tg/p>X^-6>L8sG`tk[q"-%KXqQdij>hXqmX@sB8pp9G[hW"mR4[jdE%^Y)Z:8p^^]mJFHVhG"<0:K7l02]KDD5H-;B<t8&miuRJE<Xq?Tf<f)f.u0\XqX/+"V!d&$J^[l-iX3$*4fH:P[e+D^S`mc0JU,ET%6TcH0mtuL60m:r\h-=<1_qHGG/X+7L[Y]gmA9u5^$u&,lBAEj>CHqN.V9JUdm<#9:@@,\VNim!Ro`kX"ZuQGk1!2N-]\/25mR?@p%&hb=I`3)qAS,9nUf&fVN4*>[OhG2QBPi$[8R_Ej*8-l(Z@4P*VoqgCknRs1N'qGCi[$@c35'>;7"V9,[%f"+iXQ[HE]t(6b^/S$;%n.>^a&=$)]d4Z^Z8>KW0#heY1dV^YIZW(HCdHMCSl&_(K*:pI,Z5ktQ4m;cp*JH^.qcdP*Mio_Vk1#aXS!(?ifNqKTT:9$d2t5qC%Hl)DtJZOUFMi:]nY*BPV*,i^bV2g;*[2lQ]Zb1#pjdPG)P5:V#+cRRKY-TTf@ft;b8l$CV$tTns>Bg<&'$%5,.WAYBId9K^^d:KV%LK<\sbBphWhZ$gmPt)9:XHImj7faZ89co@tGEM9.O"J#_+a1!pBlgDt!J5]/>Es%_bUo$L.djtR*]jamU`:R]H^h&c,-o24KsX56%a[U!dR#oT;R&;t'1+'NFKJb.FC3Bl(_?C+]\eo:]R9a8!L,2O_mot$AOR0&GK.fs2)]%c\6S+[_k:[`H>Eg.'h)MNRD^$ZbhWTj&%I>eB]H5/qtM%sTr@3,d$FPfYt]m+gLK%FX?&+'8l+U%)s+oj<X&&\l&G^^9nA;3GEEfS0BABc\"hDUHqqnB9&2G`qK]>HKnGo<nD%)`Slal^:*sXmMGl*c,`2/H?[$:p%GI<Xu@>UVX]OAejHQYkA5Z9(+[A&(()mY;o:84@58/`sSDe3)'el4J7reGX-"<c,r[n:[]-)%_.WZ,?mVkT]VQl:GE0QB)=XVUHlOL&J`bhm!&j;fY!CLb>s.8P15nJ^B9HhE/P105BZC:p2G8`_FQ/eBg?ci4$Er)64pTsK\[Go&%^5JGJp%;DmItdK9+Qe/m2U)q@L<4!f<Oofth`\PL(>\<2&fN)HBtF+^oDXWL]TXN6I,SBc_4`km)P[eD!+t:4h,qrY:HQ^]$HKOu%3<opMlZ-!e>m)rF/%3s@Vg8iR0H&OlJs%,p.6%]]X1G&Gp'5<qZ5#Ps##?]]^4$D:bQ.I:,4tm179W>j(,+TMP4"XV-ig<+/uue0%*J[XV`s>l"b/;8BQW8Q[Wf6@[iH>6("hRstrG`WV8q42sXTIW`$?SFiZO2/0R`$]6,H8j9E6g)L-*N\W1fPAH7c(E9#$_?lid\%j%Nd41.]l_aAjYcsq*W2'lB3WI6*rt9lg(rJbAg6)4@=-5I(0=5bCJ]Z2mW;DC7N?^[q9^EhUYghY\JGO]O"Y_HI=-93XW/YDpL)Hh%6B"iVDBIV%;Y6boJONDMZ_`rQ)9l4`Ug5q<<+'KS'D9]QRLHn-;UsCBi\:kM#pbVOI<ekA&6$ML#ZR<UH5_Fr2<F>AZjji5Go6Oh%eCXKD!T_^,]ar9^mdGRf:RMa@[,??Kp&J)8Mh^<%@&rPP0:c4r+.\rC`3JF\lAkG$\Cj^QGP9@^)S03o1+TU[Nj4a/]7[IU*\715%&dGSf2@3Dk58J/R;R,=J?gHpR]ani7OL?'[TMW^2T^urS'9$(u+mi;b4_D^.l'ruF:EHA&`H1k]MO#%\`C.TH3L\'8lKm+uA0dI!%LmDjmBcZ[2S<$GbW/-"6Y?KMK^[,HJ1M4&P5@/9!UI>C"6@/^G3iGgufA*u"!a"rnYLt>L*DQFC[UjmG("lnHkE0Fa<kr`IC6d<k%=#@@SH+-'TF5Y^M`]b\C_0Z5k#I96,gia**5_gj.%'o'Tm:f'Xe'J5XfBDh\"!>4"lR?bm:Rc+q,6gM3%b(aW-mCOMJbRnO4.8pW%hla]ATWbf2h_Em8QT+I?BVa=\W-du&?;6c(f&R#q'Ft$:Y#BXdq:?JoT#<*KZel`ELE(Pj'b4q(=#=^Lr[Qm/MG39<b(T7cq:WkB%IhcdpT>=k\]N)17`U0j4e[:'Y^GMLr.cU[ljHR!tr[PY\4cI-JGcO)mCX3<R^ImkV<mtig3I\)2`<SU'c;0(*Vic5^r"Mj5TE"-5%Y>U1;fkHlF/-a'3mY5m#)MtZtqKb=>rY:+Wl9P]"2fj/7B<Vt-1-:376#XdJ"TG4er8mjQ-V[[=mIn,?Qtr;Nm"6$i+M5$c!i)"D%\T3@*8]&fqr_DA&enU[.,+h&(,<]C<"8g/+?*^grDbp)JSmDple@rNLl_]f#/#H3I5M&4q='_"iG0e7"VlR=(d`$$^mm"&+m[C5o%$La3Pm2,#>&//-eF*6Hlb\8H-jSU3W4i4jN+Y47:/?d-bPlaX:-V.sW(?fDUbFL6_an&jK'A<iW>#2XHQ4>opA]f/p@ti]BXh#:b%^p0+jG/gFHG-8Yb)1II-]lGMia1RroQ&ur7DulJ,Yc(mE'-Lh5?WYWkUN/uY/!2].HK=st*Zt)+>4V"=#0.C.bFkrN4r,O;@Ca)&%e(P>^HKb*?0C*&J2*R@t3-^HG#Q#[sHGHuN*:*n`lTqZ0m4HC;s311(Yk>eE(4<Z_\],u&+2E2)osGk!/->KY$SUi(!HUm1+kXD$%f(d,W[jUZ_(O@_&2U]`5s#+WQVCb%?FR]k3Q/r=oqkhAoc[$:fL_,??^cG0n&E`b%#7reSb5P>VdsjO[qGl%:l`6I2X`qM#?RroQ%,O0nnB88Ig52NTW/Gp$<@PCiEGiYKqcZ9uW!*f9E&o7rdY9qo4"a9HKj!sg"Ga$Q7eDKC>b?quA?f\SXl'B)-qI0-H0H?S*nsAh)%(Y`^g\sp^,I/1stO_?Qf1\&i8?W6b",&u`Gb]^XnDmALULG,.*^ARl[qNS,kY?a*4%=16Jq>VHk$Pc1/ZsqlJMqI_0%]okd_%<IG%1'qhVe<fnoWWt<?o\F-@&BuT6"tF"j&))6KI!q!@ZVB(9Zhkit*YXA8:+H5oFF(^&.GHgXU5r8LrH3J?&,(X&_#mgRGPf2W/Mf!]%>'?9,C-ZhZB'gd(V+V>P39M$3.\]aJrIr:c:9lGsN"oXDHr]h#b'jB($=j19["G-3*<LSP5ZVRgKUL9Q'j,*[QYsFXD@Z3]:q"Re%R"#F&@F]M"ghO"&GIFE`Ai<XgWGY^1X*%^tL6%cL=QS5Sc9'\&P,%&M.;fE0SVXF;e)R0n]S+OCRducCDPOW]SRFa^*j95MQ,_`)%"^EZ)*NC-cd?&_@cIHd-kH@B0fW%J60<;&1H3*qj($M!Ng6%i4;3uh)*N@#]'6]grb<[`tM"dq;X\oA?)1H(>W/fNbA5fkfItP4r%KE$B(,k-Y]S8cml-_!q(rpf#-i`I_sYZ:.=oUZWpQ`S)L78l<W`kok(4e2]"(pG0@)Ka?FP(S8DIB!"'$2.O[a8)C$Ic3eKW9KQX%Id50T;LW!aCA^@iIW1g'jUX-;"35s*:+G)J4+F%u&("iqQ-9o;[%"uA5BS/%5Bo-Pr';+eE's?OrmD9r$E3ii.NJ)$WfdH:p9u^6%kCm17bBjRUH]]XX?C)"7F97Rg+oA1AlpI'Y2Jq!rm/qBP`s"'gp#6/lX%ULTY`S`./X\<n'Ws7_Yq*+Mij.4Z^*?'kI65GI%f%@W%^?FYcrH:mgM?*;g+\MAV0B,pi`UW)hf>N!m]c&L\.hD;o"^7`0q:0p'T6BF,,POtp5B"QW%?JG!e'$JL/hB6._'<.ZU'*Etr5^V/%s.R5s)]2sI<+\Jr^t@LpD`[\`0Xpmp$3q%&=Ffd!T-IY:WD0.C\tnJ4Ul0V9\a*(Y3?IF:oYp8qQ_5R/qZ#GRUen;GW+DW_guYcj%kahC8n'-#4*EeHaFq7RFVHrXiH]?$fj55K0kB6RMBFghQdG4.il/9?4bDk+K]b*sPIoAY%"-\bA(9$Za+=)PAI^Ac4pD5JACZRM:%IVU325i:IP6\/Xq,dm<U&PJ]ZfZ6s/U.;uUZE_num0X=/.`X<eM2%Rl^;jVhb;0*Zs*E>=r2t2M5BNai0n\36I+_5<:EeAi^LceN%r5_o#&&rI_p[^["5?.*TX.-_jY8FI6-R7#mFC0MGDU@[P.afW1CYV2e6j6Tia'C6YW@dU<OOiCCUN=rMjel4dg"M<pg(uss=9>ql%fl<AK"m9AtGh`qpFibP[XP^4R=LaILgm_&WCPHQicb@m(\g"ap@H0(?T%0(c4=%"$Bs(+*/Cq3[Ikf!;jeoh@gFY1S2\OOnBMNE+%N^9^.X_k9I4,Ac9g=aXBnJ6INbt8Kl!8BQ#%U5.=n#[nXUfF.JPX@Jhlq+(f<u'o"4lOSu;;-#Mq9@5"!1jlfRr%O__u=fSoW@^_%$D1p"a7o1XN&Y<eaAh:!3(o8o,=^ejV#i`F?n&Jn5OV.J871(R3[cRkPLQnJ5=cGPQumT-rE5Fa+b$!%;t@'_Oft?RQaq'mj#uK6%Vmq,!^,UE!r\EY:?6h^_M)U<fPrG1JV;7X&p"uU,_GPOOHFNj*S<$]u>^\r%N9*"oHIl[mGHHdc9CC](j0Wn:)EAQ#jc\8-YTTJ^%heEP.jA[rjR*[]Hm)MSiZuP$<[4ph>X+4amY4bu^62.qD,;;d;ispi[kFh_LZ#k$`g-b7oghIq@\.`j5n'o'-fG[1a@O-UYap5Qo%EnCSbOf#'_%DsJVjH-J[,;XFQ-h`IWX[q?upnZj>1hKdkGrNg-;f0m_.YU%GfH'F',6N+u9*[D<gD(@o)nL7FE?ZU@V\=/bCGWr0%Hpl5moSj2p3QfLAl2,(qI(7R$0FB5jbL*bROm;2Y?;-LaJm<3N^f0],$cK3I1H3r]jd=]Q;WZ"/3qK5@OjC[c[>nLIk/:_]"@"i<%J*ncdT7sP]QSnJ\^Y%d7S^l-:I59mU@(b\/X6I4UFJ&J?/7)R2ZN=I">m9/M:i]GGi)3XQX`$W'?pk2D0%\miWSmFQ4RL/ZajP(A%=k\9Wf0!gn5i()fN<P<Ebm;V@(4;+h#oZ3mo-&n3Hpltp4$Qb]lsq+f<'D\q@)(asPBFMJPp&3tOsuH%AL9B97eM^l(Er/+,a=rM%peRs6R'<=n-BQ-*-ju!(?ied>;`[tb[`1!mp1;,7g1Qm0@5[I8=XTC?4CLgc!3\/(0k&NqL-CP9Cp0B?`8O%FG\Z4OQKWI?KT#V%%,fW8UOQ6HenW>$p1_LH:0iC::1[-B>Sk^$3#__cL?5aEW&+[8a?jiiDC<#"3,4/B\9.L+&-tP2u2ab;H&_t7Vfp[If!V\UZ$;T7^%;8gqD1<[48YaVujOdJSL@<"FJ>Q@*X0h'`Ie_04aMPo)5BW`OGp'/a:din!A,<WYTEMI+m3eGRu!#\JfM+D'89d<WiRL(L0<;/n?%ka%I<X:-$<1.qj%/tft`[pKh_R9tWBiP).YaKS:bSCKj(a9O4)^ZBj`$`f5mGhf'a,m,?XYoq'Q4_;P'YCH$/]c.h4@oINq??[t0%AB6Og/n0<E-T=s[p+o^&ak2i5"n(Q7eZa1X:-XtYna[Bd:#fTlWmmTfL`F-bf;1fG[LjB^`S$Y9r\\&'X)#cg))$'!C4`R0MKK2@%o8[%15TC/:M3uUM"O*!\<[-\4%Y8sk?mT8GlO]*L%$-[0q5cs1HddCE,#WJbLEI0gPH>ct^();V7YNL8dWGhCqc(@'`-g,ZY`&ae%7*K9aJpORH5?pB0aZ;i.ID8&"_rW7LLPWmH4C!?j3WtUP=DiAd[-R9\6R3^C.9DMFYR;>mk@3JbfflS;h<7;W./?Y)s1r?aNiJN_%eP$YT0Hp,a-'H&hUM;Q1glB=FF1]+O\bS:"G1s@\hpF;P\iVpd3@IDLU*T1`b.A]hT\:g?-oZI:K_:=;<5[mT'&?"Vhu*ophsI.V%B+ZFoYUiL-U[RF0AOMA)ZpO9>*TU8,Q:=gAr^OX5d?d)]iP2*VoHa;.98V5nbfbfVR+ZjN+4V)Hs8@ggQ3H/>SocNHkSKK%hA]0$%YJ!>Y:jH%'XK@j*e-LJ"m6'B5<`*sC_fa1<7R8bGpk"[Y4Sk3gX\_G"1h]5,6k.Kd>P'28ffCSl'oH>DlFI!r[uIJ,Qj&^bAPGlV%UFi!:ckMWIfc\D\W[<0nb%>6[S%`Y-Cj#ioBkK<B`_$!-U!P_+"o;gPFb``?F?<:H$<[fOeId-:Sjk-hXfPtD$L!rhYF5VieB/\s%W%#E:We?ifVkH.[W[Q+GD46^0bqa-.5Z\MlD>GSn![MaeKI.rV:7=)eV,C'_,Z6`M&OoC3CQsr0WBah?Z6j:Kc&:1%+&NY^2[B^=%5HeTtdNh@.N0NoOP`_%sM&MV>.*8>d1Dq9'/sGuC,,"ENMp^#][/<$<+/RB1K/CG8Pf?<G:d1U!f$FK[@pYF@fo#)aMfobuYHt%A%#YA5SdLp8IPB(e__+IlA<=qC5?<%`V8LcF*W\P2\%j6^MOsOgoPPe-LYYo#lXJEP2l@P54*]i>Waok?p-ioR.cq[&EPa0[tL>X@R%1DquK?4iAUZbT\Gk#l&2#t.@<Pm+urPXYu3]Go?%P=h<;,t]DpbR9_@Pa-Ns0.=qQ6s2Z(g/h18brBEq`nQH;4I`3%<f1Xb1s/FN%!P5-`?J<%p.*^[L24d9.T]S&9R`9S$jjP&&3Ti5)0U!t*8hq8aOc/_7^m.W(:lO\_?8P(?]NM+>-*NadGU_b7b[e]S"Z(G4]]^mr%+^./cPP)7_&/6P(BpR['CR$2J8UFdM6t[5Oa)/Xa-E3FcHAfM;.tWtL8%KlMYf>u;Mp\#q1gLj/A:::11e)2\mr_>YPAs"B6uPY2%KUDuE^:I(MM:*eFFG@i!f'!O'$QKOrL<!1)_rCfR#Mg*U;_clu+dOZ.:O*7<XJHnsH.VA9&ZO7t*2>G]&nRmlR`Y'O13j,i%$1j%%"*K@="YN;+K4@P&Oj;n;&r\Xa*Z'Jh(^uH5>`oLq:gb"m(`lm2DnWseg#Ds>0Kcd'WYu;,+c2K(!*RIan/*JAqAPTb(2'/RnCZaV%B.u<2>&Q)S7VRe]K4??e_6ICE_;Ubc9TV_TZ67f>i7OGe=Xh&-n@67=!JB?N6)]RT!4fn1dU7T1i.Ic?n5plB1-dJEEZ4&9cjl6?%Ee0^8O@BE&QLe6Q7X01eOG+C;%$(bto1`MpPKJO"!*PIE;]#DOW>\)YC$2-7c;!$AVC;Y3ifn-aAl?X:VVibc)Da$kaVp6W`A<''%)'0SFhLGZ=V4<P(Z).'71-E#9]Wqs,Xb'q+_db,7K4??7T&Hrn],o0S6F4K'SS*1`ES8Jj30pm*3(B`!rQ$cS[KQ6b)&ukN]6T.N%(@RPO"(Ou+@<mUI;Dna!Q5IO2%#lhk+*iU\(72*b6Xs=#=.[75-%n&"nCZakO_8VaeY=6haTO<DnCZaVS7d(_$#rG0(Zcs0UV%mT%ag9ZPQ)q;O*cn%!F#Xq-?Vgk+qIY;PYpHcaTJBR=H5&=WF*TBOJs2.1"cgU^9od3p641:H5l":8BP`OR%)GOc*sH/-P6F;Z-#\>`%FVQ-9$<FH6o7DM;PK].ijb6MdGqLd1(7e8M84(EJ_U-qEP?LMOXNYa[2IiR[aT=h>9Ak67()fqp_.%(/[GFda03L^pL;jjU/QFKg%[K.[oZ(rq[(`">'<5pME`DV+9?0Wu`,YJq_8QfrqJcKA<AI)?-l5G8@]JNRVOp\b=^t985,E&9N9VG='3/O=`3&XlQ%$"1'.ug7-%D2?UW*.p>,V(jra1ti-<a!ceNQf54I.`5b#(Z!%1g"(HGD$J'0NV9a(!#[([cIiVe;%c5$RfThe-Gs?C<*EXu_(hr/'ge-QGR7+h%<Xf8REZ2i*PfARFJsi^>2?RKS7RbF2GUujJiN_SNoSrFi'Ef6oK@>\.QbfrOLGkX<0t<oZFVu7T>hs3#a7,&=N576k`>cVN(^PpS%b"=*)_dfVjXU)gSW!I5T_df/HP_R'Ef]L<aBp=lfNsp^CZH]WSdO6ad()RBGA2tSrA=G#),Z.lO,+HlFal*9K-oV;5L<)8oTg9<(%VTJ,H+B`T7.4@`$"kG:q+jZN)[=Mbl1QA](%kEB$0c@W5BYqd;0K[*O2D(@e5oD4;e.jeHEt`@Yr[L?JD"1sWJL&H6-qtsqDSiIT%[3(Q2MTIQk:j<W8,tr(_e&(4I'TuloUloJk'TqoBN0LMD7#(N&VU.7N,i]a^bsiio-a@J%P4>W9&tk$h8\?**UL8*XW>(P)6H^iF%+W6I<Wt^_*HH]`mQjd]1EX\,YA=FlB8B17H4&;%G-W-&D$DW[kXoR#UMTCmtfL>lZ>R`Tl)F\1-@m-hi7#!Pl.Ks?Ri^@Y+922Wq%UOWbZO+KnIbQL]I-)"1,#.FpaX&2ClNsr(\VD9'8nLauVE:?]$CD<#<+%Tm5KUEbI)N@'=,dFN"-mV.uCR@R7)15DJl'fEoL`Y&>%`_MLl0Guf,-IS@)R&LBEjV^!7:4Qe/:1=Ya0P9n$#;6dbWUbcZ(b8V&,)`^('gsXn8k#u9Aunt"`+cZQ+He-'<F.WR6SYT?7Wa?h%Opdtd1/9=3*kKKrWA#CX'Tp5:aZ;_cL^ZIEM_nb<Ll?bVZirKZAGdo/N<1lJ8c(rSJ./t:-Zt&aQ)Fo+@n/CMel>t7F:-'MNQHcI%n_!@]`FDI!NMh#[4h[p'%$*]J'V8@0g`3R]BJ;];dhj4.(@MJ4aNeUlS#f[##0Bb,6P8[\!eJ^dZ;XLR=Msp'%$OZl"pVtUd5_EK%ACY.[A*AMp`KO!)N1`#M9b(,,6Y'2INF<*)ZApUU,g6!#,WjJ"LJ`a]nrdOhC^cOSN\F-r8Bdm[@%aS:Gj?s/>F\9N@&CrMn_W9M%[fnEZOiEe\?SrS79Zg_+6*f!EVBU>Eo%[2uA2;/uZiVUI(h.63Q].dg=@mkZe-%.u=IQhZ,cd=cMWZ6&*_Y/p+dBV?%$)!AR;SFi%i1qgmn\1`g@-.WMYeDmaJcnk"#TVgB'dPZ7`>&N;0HOAKPt]q+9)o83,h!N$c73IfieY]"=lJboF%B=KS+71;du*3487oCX6tZ,5%1J!7:,)m8o6l@>pq/h1UN(\F#b*pK22K+E19dF^Tk&2/II,e1#Bm_.1b*ujb@ngO-/2`]$Z:lAoL,[-04Mt^F%Zs5JM'hCZ+CHK!%;mct&.YD8iS'?55aHj%2ndL[5;)sBPK`ZV-^]57"0XSOt#06t#]ie`n>gW88%$1j+cn7";c>ui70KdX%h't*@cKBHc_rJD6I1$IF%o=UUtL<&4`V!T]e5gBb\WPAKOUk_iUGRRnUp+!siODN'YhufBa#TPBL5W/f'(`q^C&i:O0A<YdD"bt%t!/rB0A:u]8<<gOA_4_%F%fSX`r<+(5m$=gBW!#\UlnD%K'Cl/Od`=U_P=_SWRA5d,;?njp4k$Jl+A8qLr2HUBM!Ld_:%$;-PkBR^)/s@6<(.2VrgMdoqA<Z>J%`;nR**Fgfl2MGaG%$:uRiNO.CS)!G;(a.#T(a9n#OhhjQaKj[.(a>GSN@Y:TVLU+R+gP?_#0E_d(hX-f4H2Y4`"SUp;lU.VA5aVE%XU'*UWn7`D%6cc(%$M-<`7bW`%Bc$UK4I?.ALNOWdh%.rbog07`unNRhqJR&%5HbG)($:+:6o<Db!osaArpg7[BUSp_\+%'':V9C%XQRuC0h@ULeRk1bR"@m<PJL"h6jnSH.uem-6kTT4K57=.!86;Z3L^&T,Dl7J"A[Y*Bu+3-<#!>C2X,i>b""'?VSW>d;#$LgO:C>"%JL'Zj@"g<t2Rm9`)W`1_g.XqJ*X/]%OCg7<$0<D-;3um-^jR!Rl@:_682cqn'aD`-M-r.c;+C+"`DdZq_a:`LdjQ^eBq1I$EX\$=%NDjD=/1"GNK#*nun//",Ahc92R_[i`XtPE;.8<f1B<h<5%$*hs.*6'A8Gc@tGjIsNYRY28%#k^6?U:,@6;nPg7Jg5!GV&\%-2mkG%S6p3h2AF+pJ\QhD!i3`f8u2G_gJ\2r6\,4ViYF,M-_p4[!4<h,cFSH$M%\,t8!:J8J_,\-Va",>e^a=)8MNoB?\*e[)!\@s.*''@%,qUSn--k)AZ/o[s1F[AMal3R4V7=H_7?g[aS[I#;3oM=cUM)dtC`iC;d5!#16U`LcR@6JdQLo5Y;\Ji'bF.u^XKtN8\!egl"It<i%bXn=]F3MbU1$9BG8=lOI-<^:4K"I0pM):3%:t,<rQ)l+J<P6.F)dF[8"Q-=a6U]rh;ZCOS8mi+W10mu50^nPV^gO$daIsA*"^T<Q%oHm`4.4\[S=dcFEcR"mVo0-g@VltEG`T^.e>)UcHMQpnoNDhl_)aWTe4R[2n5]7mg2Q.9H.j0#L-$.t(=u)<k\oAPoTsR0d/0R!:%RUbHh<o0i2J"D$N92'9CfF"3gR$]iu?n?;4J[%VSq7p)VjALpKb*GVUDjL4c@[0iK;[8VH+6#?O?Pd!WKr3#,%84h?)3ME3/T9+<%oO3b.8b%-`;7JTHQ\)h3U2G4;&NNoOo@)sMq*SCf0<<HF$C#;b&$fBm:m#R[Ft$(1#uV[mQrb*N,R&$j,XG$0g<)R1P\TT6m#`kS%,>Cb![7*mp.?2,dHK@Rnck_fVUnjY8GT]Okeg$ZO-V[1%[AdYfPQ^(.VL]qN^igWBOVB@8C",S?p;j*cKVkQi@]3Qt8d]#U=?oIc%@^&`q8g?#`UFsur7i:t4RZ]ReTa:`K.>Wal!@]IRLH>McNBf%+&^[=fO3B&:(.jrP5:7R""lVHEUnf,^'a:D/+=ajNPbpU,b+'5(%`4D?-r^b35["`diUS$dO'&&_S>X,Eq@$8ML?CXiR02mhN@BiQ1Yr&f,qOP>rrPisL/[=Z?Y3s&bgXF,YlEVLe:TMb:h=c0nGPAYi%?7ui$rBL)To4!j=]BWbQqK0ELZh#!dViSaAhUUhfO)Hu1WAV*^Y+Q:7_bDbJoC.J)=STJbVePph2#aW$LG:"3+AKB)#tKRPl,gaL%V[Zrs23Wem:eVgP,#7O6oa"7>R.G#K:dK"EKM%PEnlNr]-A7YcnlYsnr-8<Z:E7/"bQCt$@f`[s=TFXBk*f]i8@\rb6HTHr%q"hH%_UfR0n?p7,_H5frM'":A\4C?8cULPG5QO<+<>SH0+>j>m<2Q=&!l=pe852>d5Qsm2cG9<+8539@pJ[0BK'gdAM^BRZT7YPqK_JEl%2!k]fT7YRg7G'd-W=^uA-_P,[[^1LB-D2q*'$rK"%+hcj8539pobIU,'@>;4#Y7ZTS$<`jRY"r`E,+)ES+dSXR^?a,;Z]i1cmDNk%UaD`DmL)Q[6&^+<BX<BY$jTAcH'9.NjA;Fue-*/;-3:(PBEKF[;A7Cug@^jNRWaDrb3&Q#daOhWlQ]!Q7oEV78TT:_`V#@glQ`@2%:Ir"0.aA@!2!3#6YsGX&jCl@8WWaV](6"ng0FgF:"Z&n*QuK9;ee>H!jQMBOT_]gpk(a5"+!O3>6r<gn8bsTnlA%p!+(B0,%ga'7%]hri;d``"`0dl&+S<+D*6B:2]TUHN37Oi"uH*01's5)fCL1fB*ZeKLJCs/HTXn'lJ4riIW_r]]UYL]bXEGLRmHagQ?m17mhmU:Hj%hu3"_fPQ@k3a@r"+1tkYGo3dN^TacnRkKU[O5"0_s'EW"hqr<iZLa!42kN<!Cp%r:<BS5$N.q#<%DL`UaY"cSl>"(`#W<0<eWanl%\)jQX;#6pd9AHL62X2,;i-;U'UT7SlVr']a^8DUVNsksaoIfO[jl58+Q`$E^*c+[DbR7`?HGSRq@G&c5ECkNqEj/A#5$[e6$cY?@%OfG>bjHXZ]Ycae#b8rd76g)kT<PAp'?-E3s`HLjQN-23P42).%Z0_6kkmrJ4ftlsVqW;?Fl<&EAY\W1h4gP;sdPIK1Bm]Q,qKJ_8%*\"%S(W09=Dn"?sL-71s0$_ak?eqg@moQu*fDEP3rT^S/[b>WZafOsBJ&uU%lhdjHFa!drpFRlN=+Hp6^&@>b`P6Y4A2a~>%AI9_PrivateDataEnd