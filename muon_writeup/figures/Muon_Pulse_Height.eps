%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Muon_Pulse_Height.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: steven schowalter
%%CreationDate: 3/8/09
%%BoundingBox: 0 0 301 192
%%HiResBoundingBox: 0 0 300.5059 191.9375
%%CropBox: 0 0 300.5059 191.9375
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 84 8%%BeginData: 8482 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0FFFA8FFA8FFA8FFA8FFA8FFA8FFA87DA8FFA8FFA8A8A8FFA8FF%A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FD%0FFFA8A8FD0AFF7D537DFD1EFFA8FD41FFA8A8FD0FFFA8FD0BFF525453FD%61FFA8FD1BFFA852A8527DA8FD5DFFA8FD10FFA8FD0CFFA9FF7D7DA8A8FD%5DFFA8FD10FFA8FD09FF7EA9A9FF7DFFA87D7DFD5BFFA8FD10FFA8FD0AFF%5478FD06FFA87DA8FD5AFFA8FD0FFFA8A8FD09FFA9FFA3FD07FF7D7D7DFD%57FFA8A8FD0FFFA8FD0AFFA9A9CBFD09FFA852A8FD56FFA8FD10FFA8FD07%FFA8A2A9FFA9FD0BFF7D7DA8FD5EFFFD07A8FD08FFA84DA9FFA929FD0BFF%A87D7DFD53FFA8FD07FF7D5252527D5252527DFD06FFCBFFFFA9A9FF7F78%A8FD0CFFA8527DA8FD4FFFA8FD08FFA87DA87D7DA852A87DFD07FFA87EA9%FFCBA9A9FD0FFFA87D7DFD4FFFA8FD07FFA87D7D527D527D52A8FD07FFA8%29A9A9FFA9A9FD11FFA852A8FD4CFFA8FD10FFA8FD08FFA9A9CBA9A9A9FD%13FFA87D7DFD4BFFA8FD0FFFA8A8FD07FF7FFFA94D4DA9FD14FFA87D52A8%FD08FFA8A8A8FF7DA8FD17FFA87DFD21FFA8A8FF7D7D7DFD0BFFA8FD08FF%A9A2A97EA3A9FD17FF7D7DA8FFFFA8A8FF7D2727525227F8A8FFFFA8FFFF%FFA8FD0DFFA8A8527DFD22FFA8A87D527DA8FD0BFFA8FD07FF7F4D54A97F%A9FD18FFA87D7DFF7D7DA8527D7D7DA87D7DA8FFA85252FF7D27A8A8FF7D%27FFFFA87DA8FF527D52527D7D7D527D52A852FD1EFF52527DFD0BFFA8FD%08FFA97FA9A3A9A9FD1DFF527D7DA8A8FD05FF52A87D52A87D527D27FFA8%7D7DFFFF27A8FF7D7D7DA8FFFF527D527D527DFD1CFFA8A8527DFD0CFFA8%A8FD07FF7F7FA3A97FA9A9FD1CFF7D52FF277DFD04FFA852A87D52A87D7D%52277DA852A8FFA827A8FFA87D5252FFA8FD047D52A8FD1BFFA8A8FF7D7D%A8FD0BFFA8FD08FFA97FA9A3A9A9FD20FFA8FD08FFA8FD05FFA8FD0BFFA8%FD25FFA8FF7DF87DFD14FFA37FA3A97FA9FD60FFA8FFFF7D527DFD0BFFA8%FD08FFA97FA97FA9A9FD61FFA8A87D7D7DA8FD0AFFA8A8FD06FFA27EA3A9%A97FA9A27EA8FD5DFFA8A8FFA8A8A8FD0BFFA8FD07FF297FA3CB7FA9A9A8%2254FD5EFFA8FFFFA8FD0DFFA8FD06FFA37F7F54A97FA9FFA37EFD60FF52%527DFD0BFFA8FD07FFA9A95454A9A97E7E7FFF7EA9FD5CFFA8FF7DF8A8FD%0BFFA8A8FD06FFA97F7F79A9A378017FA34D7EFD5BFFA8A8FF527DA8FD0B%FFA8FD07FFA3A97FA3A9A9A37FA97E29FD5DFFA8FF7D27A8FFFFFFA87D7D%527D527D52A8FD07FFA97F7F79A9A3A955A92954FD5FFF7D527DFFFFFFFD%047D52A852A852FD07FF7FA97F7FA97F7E7F7F7F79FD5DFFA8FFA852A8FF%FFFFA8527DFD05527DA8FD06FFA97F7F5478295455A9797FFD5CFFA8A8FF%A8527DFD05FFFD07A8FD06FF7E7EA97F7929A37F7FA3A37FFD5DFFA8FFA8%527DFD0CFFA8FD05FF537F7F7F557F7F7F55A9797FFD5EFFA8F827A8FD0B%FFA8FD07FFA3A9FD067FA97F79FD5DFFA8A87D27A8FD0BFFA8A8FD05FFA9%A9547F557F7F7F55A97F79297EFD5AFFA8A8A82727A8FD0BFFA8FD07FFA9%29547F7FA37F7F4D7F54292953A8FD59FFFD04A8FD13FFA9A9557F557F7F%7F794E547F557E54FD59FFA8FFA852A8A8FD0BFFA8FD06FFCBA37F797F79%A37F7F797F797FA9FD5BFFA8A87D52A8FD0BFFA8A8FD05FFA9A9557F557F%797F797F557F55A9A8A9FD58FFA8A8FF7D7D7DFD0BFFA8FD06FFCBA37F79%7F7FA37F7F797F797FA9A9297EFD58FFA8FF7D52A8FD0BFFA8A8FD05FFA9%A9557F557F7F7F797F557F55A9A97853FD57FFA8A8FFA8FD0DFFA8FD07FF%A97F79FD057F797F797F7E5329A9FD58FFA8FF7D27A8FD12FFA9A9557F55%7F7F7F557F557F554E29797FFD57FFA8FFFF7D277DFD0BFFA8FD06FFCB7F%7F797F7FA37F7F797F79FD047F797EFD57FFA8FF7D27A8FD0CFFA8FD05FF%534E797F557F7F7F797F557F557F7F7F544DA8FD55FFA8A8FFA87DA8FD0B%FFA8FD06FFA9547F797F79A37F7F797F79FD047FA94D53A8FD55FFA8A852%277DFD06FFA8FFA8FFFFFFA8FFFFFFA853547F557F557F797F7979557F55%7F797F4D7F53297EFD53FFA8A8FF27277DFD05FF527D527D527DA8FD05FF%4D547F7F797F7FA37F7F797F797F7FA37F4E54A9784DFD54FFA8FF7D52A8%FD04FFA87D527D527D7D7DA8FD04FFA37F7F557F557F7F7F797F557F557F%797F795429A954FD53FFA8A8FF527DA8FD05FF7D7D527D527DA8FD04FF7E%29A97F7F79FD057F797F79FD057F797F7FA9A8FD53FFA8FF52F8A8FD05FF%FD05A87DFD05FF7E547F7F557F557F7F7F557F557F557F7F7F557F54297E%53A8FF53A9FD4EFFA8FFFF7D527DFD0BFFA8FD05FF79A37F7F797F7FA37F%7F797F79FD057F797F547F5353777EA8FD4FFFA8FFA852A8FD0BFFA8A8FF%FFFFA9797F7F557F557F7F7F797F557F557F7F7F557F797F2929014D54FD%4FFFA8A8A85252A8FD0BFFA8FD05FF797F797F797F79A37F7F797F79FD05%7F797F79A37F7F7854A9FFFFFFA9FD4BFFA8A85227A8FD0CFFA8FFFFFFA9%797F7F557F557F797F7979557F557F797F557F55FD047F5454537EFF5354%FD4BFFA8A8527DA8FD0BFFA8FD05FF79A37F7F797F7FA37F7F797F797F7F%A37F7F797F79A37FA3297F7E5429537EFD4BFFA8FD0FFFA8A8FFFF77547F%7F7F557F557F7F7F797F557F557F797F557F55FD067F7E01534DA9FD4AFF%A8A8FD0FFFA8FFFFFF7E7F79A37F7F79FD057F797F79FD057F797F55A37F%7F7954295529545478FFFF53FD47FFA8FD10FFA8FFFFA97E797F7F557F55%7F7F7F557F557F557F7F7F557F55797F7F7F795479797F4E2901532953FD%46FFA8FD10FFA8FFFFFF7E2955A97F7F797F7FA37F7F797F79FD057F797F%79A37FA379FD047FA37F5422297FFF7EA8A9FD43FFA8FD10FFA8FFFFA954%7F7F7F557F557F7F7F797F557F557F7F7F557F55797F7F7F79557F557F7F%A35579555428292353A8FD41FFA8A8FD0FFFA8FFFFFFA9A37F7F797F797F%79A37F7F797F79FD057F797F797F7FA3797F79FD057F797F4E294E7E2929%297EA8FD3FFFA8FD10FFA8FFFF7F797F7F7F557F557F797F7979557F557F%797F557F55FD057F557F557F7F7F557F557F4E7829544E4E2329017E7EFF%7EFD3AFFA8FD0FFFA8FFFFA929A37FA37F7F797F7FA37F7F797F797F7FA3%7F7F797F79A37FA3797F79FD057F797F79A3FD057F4E29782329532929A9%FFFFA9A9FD34FFA8FD0FFFA8A8FFFF55FD047F557F557F7F7F797F557F55%7F797F557F55FD057F557F557F7F7F557F557F797F7F7F557F557F7F794D%2929292229222901537E537EFD2FFFA8A8FD0DFF52A8FFFFCB7E54A379A3%7F7F79FD057F797F79FD057F797F55A37F7F557F79FD057F797F797F7FA3%7F7F79FD047FA9797F795529544D5429290129294D53544D537EA97EA8A2%FFA8FFA8FFA8FFA9FD1DFFA8FD0CFF7D5252FFFFA801547F79797F557955%7F797F55795579557F797F55795579797F79795579557F557F5579557955%7F797F5579557FFD04795579557F7F7F5579545429542929012923230123%0123012322290129012929292229222922294D5329534D534D534D545353%53787E7E537E7EA9A8FD0DFFA87D7DA8FFFFA9A3A97FA9A9A97FA9A3A9A9%A9A3A97FFD05A9A3A97FA9A9A97FA9A3FD05A97FA9A3A9A9A9A3A97FA9A3%A97FA97FA97FFD05A9A3A9A3A9A9A9A3A9A3A97EA97FA97E7F7E7E787E7E%7E5354547E537E537853544D78535453534D54FD044D2929294D292953FF%A8FD0CFFA8527DFD2DFFCFFD15FFCFFD25FFA8FFCBFFA8A9FD11FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8A8A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8A8FFCFFFA8FFFFFFA8%FFA8FFA8FFFFA8A8FFCFFFA8FFFFFFAEFFA8FFA8FD10FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD10FFA852A8FF52A8FD10FF7D52FF7D%52FD10FFA852A8FF7DA8FD10FF7D52FF7DA8FD10FFA852A8FF52FD11FFA8%A8FF7D52FD0FFFA87DA87D7D7DFD0FFFA87D7DA8A87DA8FD0FFF7D7D7DFF%27A8FD10FF7D7D7D527DFD10FFFD047D527DFD10FFA852FF7D7DFD0FFFA8%527D7D527DFD10FF527D7D5252FD10FFA8527D52277DFD10FF7D52A8527D%A8FD0FFF7D527D7D52A8FD10FFA87DA85252FD10FF7DFD04A8FD10FFA87D%A87DA8A8FD0FFFA87DA8FFA8FD11FFFD04A87DFD11FF7DFD04A8FD11FFA8%A87DA8FDFCFFFDBDFF7D52A8A8FF7DA8A8FFA8FF7DFF7DFFFD04A87DA87D%FFA8A8A8FF7DFF7D7DA8FD60FF527D27A87D52527D277DFFFD06527DFD04%52FFA8FD04527D7D52A8FD60FF52527D5252275227527DFF52A827525252%7D52527D52FFFD057D527DA87DFD60FFA8FFFF7D7DA87DA87DFFFFA8FFA8%7DA8A85252FFA8A8FF7D7DFFA8FFA8FF7DA8FD71FF52A8FD04FFA8FD06FF%A8FD27FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-03-08T15:57:44-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-03-08T15:57:44-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-03-08T15:57:44-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>164</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqhNYFdIvh428&#xA;o/4Q+OKqcWg6SkhkNrE8jIqMzRx7hCxBoFAr8ZxVfJoujyKFeygIBVh+7TqpDDt4jFUi892Etv5V&#xA;vZdGs1F8phHOC3SWZIDMguXiTg/KRIC7IAjGo2VjsSFYF+W3mqzstLB82RrE2oMf0TaG2mnuJrhJ&#xA;JDdR2sZje5njRDCxb46O7Ly24rbqIRjMiJsK9Xi0rR5liufqESsyfCHhVWUPRiGUjY7CtcpVubQ9&#xA;IlQK1nCAGR9o0G6MGHbxGKqn6J0r/lig/wCRSf0xVbHoujxqVSygAJZj+7TqxLHt4nFXHRdHMiyG&#xA;yg5qCoPpp0Ygnt/kjFXSaLo8kbRvZQFHBVh6aCoIoegxVd+idK/5YoP+RSf0xVTh0PSIkKrZwkFn&#xA;feNDu7Fj28Tiq46Lo5kWQ2UHNQVB9NOjEE9v8kYq6TRdHkjaN7KAo4KsPTQVBFD0GKrv0TpX/LFB&#xA;/wAik/piq1dF0dWdlsoAZDyf92m5oF8PBRiq06HpBnSb6nDyRWQD00pRypPb/IxVdJoujyRtG9lA&#xA;UcFWHpoKgih6DFV36J0r/lig/wCRSf0xVaui6OrOy2UAMh5P+7Tc0C+HgoxVzaLo7MjNZQExnkn7&#xA;tNjQr4eDHFVs+h6RNBJC1nCFkUoxEaA0YUNNsVVP0TpX/LFB/wAik/piq1dF0dWdlsoAZDyf92m5&#xA;oF8PBRirm0XR2ZGaygJjPJP3abGhXw8GOKrv0TpX/LFB/wAik/piq2PRdHjjWNLKAIgCqPTQ0AFB&#xA;1GKoO+0XTYVWaCCOKRru2lLJHGDUSRpQErUCi9t8VTjFXYq7FUJq4rpN6PGCXpt+wcVRSIEQIKkK&#xA;KAsSx+kmpOKt4qkPme/8zWt9oUWiw2ssF5fCDU2uS4ZLYRvI7RcafFxjale9NtzTIwY4yjIyv0xv&#xA;7QP0qgf8KaV5g0rRjqEaTR2E8sxhkRZElV1liMbhh0q6yAjcMinDq/7w/jooVP0N5n0MtJol4dVs&#xA;BuNG1ORjIo8Le+IeT/Yzh6nbmgzGVHaP5t0zUbn6hKsum6wAWbSb5RFc0X7TRgFkmQd3hZ198VTr&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUHq0avbxVJHG5t2FGK7+unWhF&#xA;R7HFUZiqH1C+hsLGe9mWR4rdDI6QRvNIQorRI4wzsfYDFWCTfnh5WSSGNLS7mebS4NXWNZLBZvTu&#xA;YvViiFvJdJO8jfCp4RsilhycCpCrdx+a2l3vraW+j6jbSSK1reyTizMdpcSyXNvHDP6dzIzNI9o9&#xA;DErrQqSRXFXoKIkaBI1CIooqqKADwAGKt4qw2wuPNEvmWePWJLV7K31gxaStsriRYTp00v70tsTx&#xA;kXp35dqZseCIxExu5Y7P/KyI/Qhf5I1zWLu/1DSrjS/q2nacsZtNT9UN9YM3JmHp0BXiduuDX4hE&#xA;iV7y6e5Qy/NelA6zoWka1afVNVtI7u3DCRFkFSki/ZkjYfEjr+yykEdjiqTfUPN2iPy064/T2lDr&#xA;p164W+jA7QXbUWb2W4+I95cVTDRPNWkavLJawu9vqUArc6Zdo0F1GK05GJ6Fkr0kSqN+yxxVN8Vd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQerRxvbxF1DcLm3ZKgGjCdBUV774qizI&#xA;gdULAO9eKk7mnWg9sVakjEkbRt0cFTTrQimKsIufyk0m406z0x9X1QabYWkNraWnqwMkctvbG0iu&#xA;05wMyyiJjVQfSLfEYycVQlx+U2lWYuNTk1nUrqQBru+iuDZ+ld3ET3E8cs4S2jKlGumoITGuwqD3&#xA;VegWyWywqLZUWA7p6YASh3qOO2KqepWMWoaddWEzOkV3DJBI8TFJAsilCUYbqwB2OSjLhIPcrzfR&#xA;bqw8p+UbK8l+s3Nnpk8dxLT99cMv6EDtSpWvX2AHgM3moxmc5RH80j/pchkn5eX0d/p730SPHHdR&#xA;QTIkq8XUOrMAy9iK5idoiiB7/wBChlmaxLsVdiqXa15e0fW4Eh1K3E3pNzt5lLRzwv8AzwTRlZYn&#xA;/wApGBxVKPS846DxFuT5l0tdmjlZIdTjX/IkPC3uaeD+m3i7nFU00XzNoustLHZXFbu2oLuxlVob&#xA;qEnp6sEgWRK9iVoe1RiqaYqlureZ/LWjTW8Gr6tZadPdki1iu7iKBpSCARGsjKX3YdPHFUuu/wAy&#xA;fy+tGt1uPMemx/WjKIXN1EU/cEiUs4bigRl4ksQOXw/a2xVkYIYBlNQdwR0IxV2KuxV2KuxVQ1C+&#xA;trCynvbksLe3QySemjyvReyxxh3dvBVUk9sVW6ZqVlqmnW2pWEvrWV5Gs1vLRl5I45KeLBWGx6EV&#xA;xVE4q7FXYq7FXYq7FXYql+spaGK3edY/UFzbiBnAqGM6GiE9zTtirxfzDoc+q/m3JHJptmghu7Lk&#xA;1zPYSXDW8sretNzm5agjNGo+rrbyoIyKcTuCq93RQiKgqQoABJLHbxJqT9OKt4qhNXNNJvT4QS9N&#xA;/wBg4qikcOgcVAYVAYFT9INCMVbxV4ta6ZIup6hqJvbhojp1rEtgXrbKzaHMTIE/npEBX3OdZKgR&#xA;5yl9maP62L0Xyd/x+f8APP8A42zS9ofw/H9CQyTNal2KuxV2KuxVLNZ8taPrBjkvISLuAEWt/CzQ&#xA;3UNevpTxlZFr3AND3BGKpH520LU28nRvZyzaprmgSw6pp8six+vcTWbc2jIiSNOU8POE8VH2u2Kv&#xA;L9d0qK71G01bWfL91f6x5qOp3dvamC+NxbQJNY2NrFNFbshhRbGQvIZFHGQ9evJVnN3/AM49/lTe&#xA;Wy21xpDyQosahDc3BBEPIQAjnv6KSMkf8qnj0xVd5k1HzVPpevaLa6HdaPp2ki0/RuqQTzub6COa&#xA;NpreFdPjnvYDJCrRepGjOleQG2KsW1ybz3cfl3o9qG1az1WKa6luJraHV7iURv8AWDp0LPF9Vu5C&#xA;UMdZJjRGA+sISaYqnWl+ePOeov5ssNQ0m+slSORNCngtNQkm5i2VQIzLY6dbuTKHbkbkDn8IPDjJ&#xA;iqeflwNTg8oXsd7LeyCCWUWmo3EOpLdzxejGxm+qarJeXcbLKXQRsSrceSrxYDFUp8t3f5g6x+V2&#xA;tvrk2o2Hmn051hWO1itZ09OBWgFuAkoczrRpCpYrI7ohUoKKpDZ+WtQ8w+b0sPMUOtSglzO8zajH&#xA;ZRWh0u2WF7eWq2sdx9ZaSrRn1q8+W2KovzPD+ZWl31xYeWL7UrbRtOiFrptvDZwXSlINIluY39Wa&#xA;3mkctdwRwn4qfGVFGKkKpr5Lj87S+bF0/Vjfx6ZoAu7lbuZphHfHU2SW0jLttMLON5omU1KsEJ7E&#xA;qvS8VdirsVdirsVdiqD1aRUt4qgnlc26iilt/XTrQGg9zirxvz3Zpcfmxp2snURbtYTWirpUlndf&#xA;WpVt7gvI1uIIH+siRQAjepQcjypwoVXt6MWRWKlCQCUNKivY0JH3HFW8VQmrmmk3p8IJem/7BxVF&#xA;I4dA4qAwqAwKn6QaEYqg9a1rStE0yfVNVuVtLC2Cme4evFebBF6AndmAyePHKZ4Yiyry+0kSS1vJ&#xA;I2DI9lZsrDoQdCuSDnUy5x/rS/6bQYsjs/Nfl7yzZTX2u3i2VrPPBbRSsrsDK4kZV+BWpshNTsM1&#xA;OrwyyECIs7/oSGYaXqmnarp8Go6dcJdWVyvOCeM1VlrTb6RmrnAxNHYpRWRV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoPVpFS3iqCeVzbqKKW39dOtAaD3OKvOvNHnrzjaf&#xA;mnp/lvSxHJpbtZPd8LWe44pPMUlWeaJXWEmLm68uIqqb8S9FXqOKuxVCauaaTemlf3Euw/1DiqKR&#xA;iyBipQkVKNSo9jQkfjiqU+b7W2uvKurwXMKTwtaTFopFDqSsZZSVao2YAjMnRH99D+sPvUvIGXVh&#xA;5piSC7EWk/oYNcWIRfjkTRnWNg1KjiJDnUmAMBLqMn35f2MUw1LXr4eY9M8ryaCmoaPq9zZtc38z&#xA;K0aelcAsvpsrA7UrU71zC8C4nID9EZfbFIZD+Wfm36/qkvlnS7O3XQ9A02zE11CSjpeSqCYTEVUU&#xA;PFzyWoqOtTtre0dPwkzJ3lOW3kCoei5rEuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxVB6szLbxUQvyubcGlPhHrpuakbfLFXk3nK1gH52aRcLe2EF05sFW3e/toXkVZX5i4tn&#xA;lS6kk4sPqohQqW+3tir1vVYJ7jTbqG3uJbSeSNljuYAhlRqbMnqLIlfmpxV4He/8rC+pWHI+Zv0u&#xA;bGxFz6P6T9IWP6DY3hPD9x9c+vf9HHOnHFUXbN5m/S37pfMn1USgaL9d/TH1c6f9a1D6yb316pz9&#xA;ExBfrn7ygTjir3iEzFAZlVJO6oxcfeVT9WKpT5sv7GDRL61nuIorm6s7oWsDuqvKUhYv6ak1biNz&#xA;TpmVook5oGuUo/egvGte1/TtCvhf6gzJbnTIoAUUuec+lrEgoP8AKYZ1sYk4v+ShPyy2xRekavqe&#xA;peYtNN9Yiy+q6v8AV4AHD+pGksVHOwpWuUnHw4cnnC/sKU9/IfSYNNi1yOKSSYyvbyPLMwdySJAB&#xA;yoNgBtmB29GuD/O/QkF6tnOpdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;qB1YziGERorIbi39RmYqQPXSnEBWr94xV4Trmv8AmDUfzvsdMu9Xsr7S7fU4Eh0/SkmnMAt5+cYv&#xA;nM0KwSq32uJbfbgRVcVfQmKuxVCavX9E3tNz6EtAf9Q4qikLlAZAFenxKp5AH2JC1+7FWG/mDoek&#xA;3slrf3dqk15YWmotaTNWqFrY1pQ0PTv0zadmzIND+dD/AHSC8ik17S9eKXmnuZbdIbe3YspX95Bb&#xA;xxuKMB+0udXp4kR/zpfbIliU9W9s7HWbO8vZ0trSDVneaeVgiIolhqWY7AZjZAThkB/qf6JKh/Kv&#xA;5qeXfJ16LbUllddYe3CXEQX0oogXVpXYkfCOYO1dsxu2NJLKImP8N/oSHtui65pGuaemoaTdx3tl&#xA;IWVJ4jVSUPFh9BGcrkxygakKLJHZBXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FUHqxkFvFwUNW5t+dSRRfXTcUBqfbFXmTzT6Z+ZX1LU7fyxIbq9Sezu1s7hdQjS4mcxCadIXgS&#xA;4agSIvKpkYVG5pir1nFXYqhNXr+ib2mx9CWhP+ocVRSBwgEhDPT4mUcQT7AlqffirHPOn+8rf8wd&#xA;/wD9Q5zZdnfV/nQ/3SC8RVVUUUACtaDbc7nO1YI3zFaW15bz21zGJYJLy5Dxt0NDGR+IzFwD/cx/&#xA;SlboOnWFzrGl2VzbRT2ZurdGtpUV4yokUcSjArSmHVmsM6/mn7lD1HyH5n8nR3D+TdMaK11PTUMs&#xA;tgkforSVjITHsqts4LcfHOR12GfFxn6SyDNs16XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FUHqwkNvFwYLS5t+dQTVfXTYUIoffFXmnmfXvLlt+b+n6dqWjRXN7N9SNnqEd06BG&#xA;MpSM3duD6LvHI4Nv6g5VPwb4q9XxV2KoTVxXSb0Vp+4l3H+ocVRSKVQKWLkChdqVPuaAD8MVY352&#xA;ZVtCWIFbS+ArtubcgDNl2d9X+dD/AHSC8TztGCZav/uz/mMuv+ZeY+Dp/Vj+lKAt7nUbW4hudMjj&#xA;m1GGRJLSKYkRtKrAorkEbE9d8nniJY5A8iD9yhNvy61ZNO8xp5i8831nFd3Nq1vp8pRUFuJbmi26&#xA;uBVt+fxGu1ammabtHTHweGA349/9Kyt7xnLpdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVQerKzW8VHKcbm3JpT4h66bGoO3yxV4j5u826Q/566XaS6KDqFrcWNpC09pdlp1nuGR&#xA;rkzRyrbqLfiJITJDJXqGTqqr3rFWOap+YPlfS7u9tbyW6EmnmJbt4rG9niSSf0/ShE0MLxNNJ68f&#xA;GJWLnkKLiqAP5leTdYSXS7C8mku7uCZYla0vIlDiGSQwvLJEkccwSJ29J2D0B+HFWYogRAgqQooC&#xA;xLH6Sak4q8S/NjWoPMOvTeVtR0W6hj0VkvrPU+f7mVjwFdgKCkhX7R+jOk7H0/DU72l+i0Esczom&#xA;CZav/uz/AJjLr/mXmPg6f1Y/pShtM/46Vp/xmj/4kMszfRL3FCXeZbq3/Rdvpk1vM51K29OC/hUH&#xA;6pJFeCYTFj9n4UYVG9K5RLHxy8hLf/SV+lkHoX5d/mNrQ8xW3lHzHPaXn1qGeTRNbt5jILpLeVoF&#xA;Q7HkzCCR/UJFfnnM6vRgQ8SN9LHdYB/SGT1fNUrsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVQerRq9vFUkcbm3YUYrv66daEVHscVeR+cbjVdK/Oqxu/QnOm6i+lWrzwX/ANVRW9d4&#xA;x6ttDcwtcAtLT97E3huNsVe0Yq868zflJJrPmKbXIL+ysrv6xa3tpcLpqfWvWs5IJYorq5imga6t&#xA;Q9qG9JgGB/3Z8KgKoKx/KXUNHklvZtahubQXV1rV5bJZvDJJqE9rcwO0cv1mT04aXRYRlGaoHx4q&#xA;9PhiWJAiliB3dmc7/wCUxJxV4Tq8euR655iTV9Q/SMquwt5fTWLhB60Zjjov8oztNDGIxY6FX+os&#xA;Ck+bJCZav/uz/mMuv+ZeY+Dp/Vj+lKG0z/jpWn/GaP8A4kMszfRL3FCzUIo5bO1ikXlHJbsrqehV&#xA;pZARjDnL3/oCUBpfm668rW088FlpunTaNaG08vS3zNKJRLd+tOVCH1A/pyvsCM1+s0gkK34ZTvb+&#xA;rX6AyD1zSPze0jW7jS49As7nVre8vDY3t7DG8cVs4iEvNhKqsUI5EbDZT7A81PQyiCZGqF/bSWfZ&#xA;hK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgdWhR4YXJYGO4tyoV2Ubzp9oKQG+n&#xA;FXk8lp5xuvzdS7kttTi0a1vAqXs2l6VP6qcyOEdwIUuILZQdpDK8hXsp3xV7NirsVQmscf0Rfcqc&#xA;fq8vKvSnA9cVVke1jtg8bIlsi8gykCMIBWtRtSmKvF/NRB8x6+Qag0II/wCMsWdrof7nH+OhYFje&#xA;bFCZav8A7s/5jLr/AJl5j4On9WP6UobTP+Olaf8AGaP/AIkMszfRL3FDrv8AuLL/AIwn/k9JjDnL&#xA;3/oCoc6fY3lvcC7t47gQxiSL1VD8X9VF5LUbGhIxnzj7/wBBSgtFjHljzVdT6BpEon8vxX89o9xc&#xA;uLOZDAWYFW/ajVXqeXxbA0oDmv1GHjxb8pCA/wBl+Pcyt6Fb/nzbatfaNpPl+2juNWvLq2gvVnLJ&#xA;btHJGXuWtJtufot8PxhT0ordtD/JpiJSl9IBI/al63mrV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KoDWfq/wBXg9bhX61belzp9v1lpxr+1SvTFUfirsVdiqE1cgaTekmgEEpJP+ocVSvz&#xA;xaWGpeSNbhuENxaS2M7lYySW4Rl14lTuaqKZk6I/vof1h96vFLG/0+/tLq4020nsNP8Aq0cdnaXQ&#xA;IlSGKSKOMNUtX4VFDU1zssMZRhAS52b+UmBUMy0Jlq/+7P8AmMuv+ZeY+Dp/Vj+lKG0z/jpWn/Ga&#xA;P/iQyzN9EvcUOu/7iy/4wn/k9JjDnL3/AKArrT+4vf8AjCP+T0eM+cff+gqg/M9lc3lzdQ297NYu&#xA;Z5OcsDFWZGLI8ZoRVXViCO+RxxBxxvuCQaSyDy3q+kxm+8sXf1eYG5eztJBWOGb009WeJzyKuYth&#xA;t2HbKsuKBJBHMD7Sm010z83PzNurXTPKkyNp+oLdxRXPmtwrp9WWSkkkizJ6ZAUgluQrT3zU5eyo&#xA;xMp1YAPpTb2aL82Py3lvYrKLzDZyXE/D0lWSoJkNFXkBx5VPStc0Z0eWr4SllmYyuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxVB6tJGlvEHYLzubdUqQKsZ0NBXvtiqMxV2KuxVCauaaTenwgl6b&#xA;/sHFUg/MjzNbaH5Kvr+W1ubqO4jNqsdvHV1a4UorOrFeKgnfM3s/GZ5410N/LdS8ql/4+v8AmDt/&#xA;+ZGdjHp/Wl/vmCW5kITLV/8Adn/MZdf8y8x8HT+rH9KUNpn/AB0rT/jNH/xIZZm+iXuKHXf9xZf8&#xA;YT/yekxhzl7/ANAV1p/cXv8AxhH/ACejxnzj7/0FXan/AMdK7/4zSf8AEjjh+iPuComz/wB5Yv8A&#xA;o9/6h1yvJ9R/zP8AdJSW/sbe/s5bS5BaGYcXAJB616jMghQUi/5V5NFZLDBcW5tZl+sXM7W8a3Ua&#xA;RzCOJYJaMwYFfiaoqD3zEOMGVf0v0Wm0bY+ZfzP8oTQ/ovVrrW7WRZIo7K6BljjZlojMXZiArHkK&#xA;EDbfbMbUdl459Egs20b/AJyMvNMu00rzzpBtLqKVo7nUrTkYAoB4sI/jLEstPhb39s1Gbsg84Hbo&#xA;CrJfJX/OQPkfzDHMuoTpoN3E7BIb2UBJIv2XWUhEqR1U7j365iZ+zckOXqHklk8X5n/l7Nc29rD5&#xA;hsZZ7qY28CJMrcpFANKioFaihOxOw3zHOkygXwnZU/TUtOe+ewS6ha+jQSyWiyKZVjJ4h2jB5Ba7&#xA;VplPCautlRGRV2KuxV2KuxV2KuxV2KuxV2KuxVB6tIqW8VQTyubdRRS2/rp1oDQe5xVGYq7FXYq8&#xA;qt/N2rXPnvWtHk1n60qJqaT+Xgtqps4LeK3NrcfDGtz++9Vt5JCrcvhpTFUZ+Zui/mLrt7pkGhTL&#xA;BoijnqtgTCJ3dXqnIliCjAbUbYgk12zbdlZsOORlM1Icuf6EFKZPIXmw/WKWP27aGNf3sO7p6XIf&#xA;b7cDm4Hamn29X8R6Hz8mNIH/AJVz5y/6t/8AyWg/5ry/+V9N/O+yX6lpHaj5C82Tc/TseVbmeQfv&#xA;YR8D8OJ3fvxOUYu1NOOcv4R0Pn5LShY/l75vivbeV7CiJKjMfWgNAGBPR8sy9q6cxIEuncf1LTV1&#xA;+X/m0w2o+ogGOPg9ZoBRmlcgbv35DGHaunBPq69x7h5LTdv+Xvm9IblWsKGSIKg9aDc+ojfz+CnG&#xA;faunJHq69x7j5LTr78vfN8t7cSpYVR5XZT60AqCxI6vji7V04iAZdO4/qWle28hebEt0RrGjD61U&#xA;erD/ALshVE/b7sMrn2ppyfq/m9D0PuWkD/yrnzl/1b/+S0H/ADXl/wDK+m/nfZL9S0jv8BebPqnp&#xA;/Ufj+renT1Yft/WfUp9v+XfKP5U0/FfF/F3H+bXctIBfy784MKrYAipFRNAdwaEf3njl/wDK+m/n&#xA;fZL9S0i9S/LnzJdpepJpiTJLdLNGryQMCo9T4qM/+WMox9qaccNy5R7j5eSaKTXP5KajqU0C6hoq&#xA;GJGQM6SwowjDCoDI4alO2Tydq6YxNS39x/Uu6BvP+cfJZIYxDopikaLjK6XKVD+oxBHORlrx49si&#xA;O0tNZuX2S7vcu6E0/wDIDzxpt611o19e6TMY3UTwXEQkpTkELRSxGjOor/ZleXXaSQom/eD+pKPn&#xA;/L//AJyGjdLWDzNdSwUDB3u1WWnws3WVmbi54/a6explAy6E77f6U/qVMLHR/wDnKGygFnBqVtLC&#xA;jj07m7a3kmKmv2mZZWoO9ST4ZTk/Ik3f+6CqwP8AzlTGpi42Exf4vrB+qApSvwUBTr/qn55Aw0P8&#xA;7/dfqSr/AKW/5yjlNP0LpkFUEdecBoRv6n+9D7t93tkBi0X84/b/AMSro/M//OTcSm3l8rafNPKP&#xA;3M/qRBU4ijFuN1x36itP4ZE4dHz4z9v6lXjzZ/zkwoZW8paWTDvLKZUVCpFRQm8A270/DAcOj/ny&#xA;/H+aq+Lzr/zkVb/72eSrK49XeH0JlXh7PS4l/GmJ0+lPKZ/HwVePPP8AzkFGeEvkW1dzuDHcJx26&#xA;1ImcfLfB+X0v+qH5fsVw/MD8+qcj5BhpQvT1xXivUf3n2vD9Rx/Lab/VFWn8zfzrX4j+XjFJzztw&#xA;JWJSMdVlpX4vCoX5Y/lNP/qirh+cP5nsPUX8sb8RjYqZZeXTsDbg/hj+Sw/6qPx8VZT5W85a75j0&#xA;uSXVfLN3oM8F7bxGK4YMCPVjYN8awP8AtdkzD1OGOMgRkJKzfMdXYq7FUNqcltFpt3LdEi1SGRpy&#xA;KkiMKS1Ke2KsDtfzEtp7E6hHY62upT3FtYRaOy6Z9bkNxAbuBl/em3CGF2arSg7EEVFMVZXpE0Wv&#xA;aHp+q2t9c/U9QhgvbcOsCuFcLKnILGaEbVFcVTD6lc/8t8//AAMH/VLFVkWnTRqVS+uACzMaiA7u&#xA;xY9YvE4q46dMZVlN9cc1VlBpB0Ygnb0v8kYqxrUPNNrH5ph8tzfpJ+ctvG+pKtkLSO5lSS4ghcsV&#xA;nLMtvWqxFdwCd8VRHlzzIdb1G/08LqunXNgkUxS/htYzLBcPKkUyKgkZQ7W7/DKEfxXfFU9i06aN&#xA;SqX1wAWZjUQHd2LHrF4nFXHTpjKspvrjmqsoNIOjEE7el/kjFXS6dNLE8T31wUkUqwAgGxFDuIsV&#xA;SrzPrEmg2ltMW1DUbi9uUtLSxs1svWkldWegM/oRABI2YlnHTFUsg86aCqeWUgv71n820n02FY7c&#xA;uiTRNcmSf4KIu/HqfiNB3oqyg6dMZVlN9cc1VlBpB0Ygnb0v8kYq6XTppYnie+uCkilWAEA2Iodx&#xA;Fiq/6lc/8t8//Awf9UsVWJp0yNIy31xWRuT7QdQoX/fXgoxVgafmjoJ0vUdeum1Oxt9Lt7eeJroa&#xA;dH9Zt9QuGt7eSEhzGqyzQcaztHx6txG+Kst0addf0G31CG8uFtdQh5qnOxmPBwR/e2vrwt845GHv&#xA;iqZfUrn/AJb5/wDgYP8AqliqxNOmRpGW+uKyNyfaDqFC/wC+vBRirn06Z2jZr64rG3JNoOpUr/vr&#xA;wY4qxnzJ5qtNL1eDQro6lcrdrbi6u4FsvQtkvrkWUBmMhjkpJM3H92jU6mgxVdoHnTTtb8z6t5ct&#xA;Lq9S90ckXDv9RKHi/pn4Y/Umj+L7PrRpzHxJyXfFWSJp0yNIy31xWRuT7QdQoX/fXgoxVz6dM7Rs&#xA;19cVjbkm0HUqV/314McVX/Urn/lvn/4GD/qliqGmt20+weU3l20FrFXhFEk8pVF6LHHC8jtQbBQS&#xA;cVYde/mFolppOkawYtVvbXW7Q640SJZK0Fnai3Mk9zzeGixevFyWNmbwB3xV6JirsVdiqleWsN5a&#xA;T2k45QXEbRSqDQlHUqwqPY4qwiD8pbaC3iSPzHq31uCeO6ivyNOMwkt4EtoNjZ+kRFCrIAU35sW5&#xA;HiVVZdoWj2miaJp+jWZY2mm20VpAZCC5SFAilyAAWIXc064qjsVdirsVYtqv5fWmoeYf02uqX1nL&#xA;8EhtIPqpgNzDDLDDc0mgmk9SNZyQOfAkDkh3qqr+UvJo8tvqDjWL7VW1Gb6xM2oC0LiXcFvUt7e3&#xA;kf4eKj1Gbiqqq0AxVkWKuxV2KpR5l8uR67a20RvbnTriyuUu7S9s/RMscqKyVAuIriIgpIykMh64&#xA;qx20/J7ytbXmj3i3OotcaH9TSxP1uSNPRsIWhghkhi9OKRaySSMzIXLOw5cDwxVnOKuxV2KuxVgU&#xA;H5P6TDaTWq6zqTRSC0SDl9SJgi06aW5s4ov9F+zBcTeqC/JmKqHLJVSqyzy/okGiaVHp8M0twFea&#xA;aW5n4erLNcTPPNI/prHGC8sjNREVR2AGKpjirsVdirGfMPkKw1vWrbVZr67tmh+rCe1tzb+jcrZX&#xA;QvLdZvVhlkok45fu3WvQ1GKu8t+Q7PQ9SfUF1G9v5SlwsKXf1cJEb64F3eOnoQwEm4uB6jcywU7I&#xA;EX4cVZNirsVdirsVYLeflHpNzYaZp41fUobLTNNOjJBGbMiWyl9P6xHKz2zt+/8Aq8XMqVI4jhxq&#xA;1VWdYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXm3mnz95t0/wA6z6PpNvHd29rHp0psl02+uJJl&#xA;u5nScvqMMgtbMRRxlwZozXfFUmv/AM+72ObTTZaLFcLfabb3ptfXkaQz3psTFEjQwyyH01vmqscE&#xA;jvQcVHTFWQ+R/wA2H81681hb6NMumCMlNYjS8a3MyRxSMpea0toQj+qfTPq82pVo0qMVY0/56+Yr&#xA;WDy9Jd+WZQ2tWM8sTEViublbmzhja3Fi+p3SQhLpywe2MhPDiPtYqq2/5564816knl5IjaS2/wBY&#xA;gu53sp7eG5SyRV9OWJ2mlW4vW5AiL4ANuRoVUX5F/NLzh5h1/wAvadqGk2Vil9pxv7+SG5klLLJa&#xA;288DxI0S8DynIaMu1P52puq035yeYDOiWmgW17DOI5IZnvXtSq3cl6LVGT0Lmv7vTyZGB2LUCmmK&#xA;rbf82/Ml/bCGxsbVdXWO81SW3lWUp+io7BLy0IKuP3jveW8LPXjyEhC9gq9SsLyK9sbe8iBEVzEk&#xA;0YPXjIoYV+g4qr4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhYP0V&#xA;+krr0PQ/SXCL67w4ev6fx+j6tPj4/b4cvenfFWFxf8qF+oXfo/4V/R/GT6/w/R3o8fUi9X1qfDT1&#xA;fS5cv2uNd6Yqm+if8qx/T3+4P9C/4g+qRf7w/VPrn1Lgno/3X730fT4cP2eNKbUxVbqv/Krv0Pb/&#xA;AKW/Qn6G+qSfVfrf1T6r9S9WD1fT9T936Pq+hyp8PLhXfjirBfPX/Kpv0l5Y9T0f0b9cg+rfoj9B&#xA;+h63+i+nz9T/AHIcfQ9Dl9T/AN005fBTFWf2f/KuP0jpf1P9D/pLgv6F9H6r6/p/VTw+q8fj4/VK&#xA;04f7r/ycVS/y5/yrv6rJ6P1Wn1qT0vr31f1f96Lr0fTr8fo8/rP1fl+xy47Yq3r/APyr79Car6P1&#xA;Xn+hR9b/AET9W+vfoXi3H0uPx+hw5enx268PipirMIPQ9CP6vx9DivpenThwp8PGm1KdKYqvxV2K&#xA;uxV2KuxV2KuxV2KuxV//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:CE5E6A708A0DDE11949D893042A0D4D2</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:CF5E6A708A0DDE11949D893042A0D4D2</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.2x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -191.938 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 191.938 li
300.506 191.938 li
300.506 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.5 lw
2 lc
0 lj
3.239 ml
[] 0 dsh
true sadj
293.75 157 mo
293.75 156.75 li
292.5 157 mo
292.5 156.438 li
291.25 157 mo
291.25 156.625 li
289.938 157 mo
289.938 156.438 li
288.688 157 mo
288.688 156.438 li
287.438 157 mo
287.438 156.188 li
286.188 157 mo
286.188 156.375 li
284.938 157 mo
284.938 156.438 li
283.688 157 mo
283.688 156.625 li
282.375 157 mo
282.375 156.563 li
281.125 157 mo
281.125 156.188 li
279.875 157 mo
279.875 155.938 li
278.625 157 mo
278.625 156.438 li
277.375 157 mo
277.375 156.313 li
276.125 157 mo
276.125 155.938 li
274.813 157 mo
274.813 155.75 li
273.563 157 mo
273.563 156.375 li
272.313 157 mo
272.313 156.375 li
271.063 157 mo
271.063 155.875 li
269.813 157 mo
269.813 155.938 li
268.5 157 mo
268.5 156.125 li
267.25 157 mo
267.25 156.063 li
266 157 mo
266 155.938 li
264.75 157 mo
264.75 155.938 li
263.5 157 mo
263.5 156.125 li
262.25 157 mo
262.25 155.875 li
260.938 157 mo
260.938 155.938 li
259.688 157 mo
259.688 156.063 li
258.438 157 mo
258.438 156.125 li
257.188 157 mo
257.188 155.75 li
255.938 157 mo
255.938 155.938 li
254.688 157 mo
254.688 155.75 li
253.375 157 mo
253.375 155.938 li
252.125 157 mo
252.125 156.063 li
250.875 157 mo
250.875 156.063 li
249.625 157 mo
249.625 156.125 li
248.375 157 mo
248.375 155.688 li
247.125 157 mo
247.125 155.25 li
245.813 157 mo
245.813 155.25 li
244.563 157 mo
244.563 155.938 li
243.313 157 mo
243.313 155.5 li
242.063 157 mo
242.063 155.75 li
240.813 157 mo
240.813 155.25 li
239.563 157 mo
239.563 155.75 li
238.25 157 mo
238.25 156.125 li
237 157 mo
237 155.25 li
235.75 157 mo
235.75 155.375 li
234.5 157 mo
234.5 155 li
233.25 157 mo
233.25 155.5 li
232 157 mo
232 155.875 li
230.688 157 mo
230.688 156.125 li
229.438 157 mo
229.438 155.375 li
228.188 157 mo
228.188 154.938 li
226.938 157 mo
226.938 155.75 li
225.688 157 mo
225.688 154.938 li
224.438 157 mo
224.438 154.75 li
223.125 157 mo
223.125 155.25 li
221.875 157 mo
221.875 155.25 li
220.625 157 mo
220.625 154.75 li
219.375 157 mo
219.375 155.188 li
218.125 157 mo
218.125 155.688 li
216.813 157 mo
216.813 155.25 li
215.563 157 mo
215.563 154.688 li
214.313 157 mo
214.313 154.75 li
213.063 157 mo
213.063 154.75 li
211.813 157 mo
211.813 155.25 li
210.563 157 mo
210.563 154.75 li
209.25 157 mo
209.25 154.563 li
208 157 mo
208 154.438 li
206.75 157 mo
206.75 154.75 li
205.5 157 mo
205.5 154.563 li
204.25 157 mo
204.25 154.438 li
203 157 mo
203 154.813 li
201.688 157 mo
201.688 154.688 li
200.438 157 mo
200.438 154.813 li
199.188 157 mo
199.188 153.813 li
197.938 157 mo
197.938 153.313 li
196.688 157 mo
196.688 153.75 li
195.438 157 mo
195.438 153.125 li
194.125 157 mo
194.125 154.5 li
192.875 157 mo
192.875 153.313 li
191.625 157 mo
191.625 153.875 li
190.375 157 mo
190.375 153.75 li
189.125 157 mo
189.125 153.063 li
187.875 157 mo
187.875 153.313 li
186.563 157 mo
186.563 153.063 li
185.313 157 mo
185.313 152.75 li
184.063 157 mo
184.063 153.063 li
182.813 157 mo
182.813 150.75 li
181.563 157 mo
181.563 152.688 li
180.313 157 mo
180.313 151.688 li
179 157 mo
179 151.938 li
177.75 157 mo
177.75 151.938 li
176.5 157 mo
176.5 150.813 li
175.25 157 mo
175.25 149.75 li
174 157 mo
174 151.25 li
172.75 157 mo
172.75 151.125 li
171.438 157 mo
171.438 150.125 li
170.188 157 mo
170.188 150.75 li
168.938 157 mo
168.938 150.438 li
167.688 157 mo
167.688 151.438 li
166.438 157 mo
166.438 150.313 li
165.125 157 mo
165.125 150.188 li
163.875 157 mo
163.875 149.625 li
162.625 157 mo
162.625 148.5 li
161.375 157 mo
161.375 147.188 li
160.125 157 mo
160.125 149.188 li
158.875 157 mo
158.875 149.188 li
157.563 157 mo
157.563 149.438 li
156.313 157 mo
156.313 147.438 li
155.063 157 mo
155.063 148.25 li
153.813 157 mo
153.813 147.625 li
152.563 157 mo
152.563 146.625 li
151.313 157 mo
151.313 145.813 li
150 157 mo
150 145.438 li
148.75 157 mo
148.75 146.75 li
147.5 157 mo
147.5 147.313 li
146.25 157 mo
146.25 144.375 li
145 157 mo
145 144.125 li
143.75 157 mo
143.75 144.063 li
142.438 157 mo
142.438 143.438 li
141.188 157 mo
141.188 143.125 li
139.938 157 mo
139.938 143 li
138.688 157 mo
138.688 140.688 li
137.438 157 mo
137.438 145 li
136.188 157 mo
136.188 140.375 li
134.875 157 mo
134.875 140.875 li
133.625 157 mo
133.625 143.938 li
132.375 157 mo
132.375 140.875 li
131.125 157 mo
131.125 142.063 li
129.875 157 mo
129.875 135.063 li
128.625 157 mo
128.625 137.375 li
127.313 157 mo
127.313 138.438 li
126.063 157 mo
126.063 137.438 li
124.813 157 mo
124.813 138.063 li
123.563 157 mo
123.563 136.313 li
122.313 157 mo
122.313 134.625 li
121.063 157 mo
121.063 136.25 li
119.75 157 mo
119.75 127.438 li
118.5 157 mo
118.5 130.75 li
117.25 157 mo
117.25 134.438 li
116 157 mo
116 129.5 li
114.75 157 mo
114.75 132.5 li
113.438 157 mo
113.438 131 li
112.188 157 mo
112.188 127.5 li
110.938 157 mo
110.938 134.188 li
109.688 157 mo
109.688 119.25 li
108.438 157 mo
108.438 123.813 li
107.188 157 mo
107.188 128.5 li
105.875 157 mo
105.875 120.75 li
104.625 157 mo
104.625 123.125 li
103.375 157 mo
103.375 121.188 li
102.125 157 mo
102.125 117.5 li
100.875 157 mo
100.875 121.875 li
99.625 157 mo
99.625 112.063 li
98.3125 157 mo
98.3125 109.25 li
97.0625 157 mo
97.0625 118.313 li
95.8125 157 mo
95.8125 107.813 li
94.5625 157 mo
94.5625 113.25 li
93.3125 157 mo
93.3125 105.75 li
92.0625 157 mo
92.0625 102.938 li
90.75 157 mo
90.75 110.188 li
89.5 157 mo
89.5 94.0625 li
88.25 157 mo
88.25 92.625 li
87 157 mo
87 97.6875 li
85.75 157 mo
85.75 84.25 li
84.5 157 mo
84.5 99.0625 li
83.1875 157 mo
83.1875 84.125 li
81.9375 157 mo
81.9375 82.0625 li
80.6875 157 mo
80.6875 83 li
79.4375 157 mo
79.4375 61.875 li
78.1875 157 mo
78.1875 64.875 li
76.9375 157 mo
76.9375 67.75 li
75.625 157 mo
75.625 56.0625 li
74.375 157 mo
74.375 84.75 li
73.125 157 mo
73.125 55.5 li
71.875 157 mo
71.875 62.1875 li
70.625 157 mo
70.625 62.4375 li
69.375 157 mo
69.375 24.6875 li
68.0625 157 mo
68.0625 71.5625 li
66.8125 157 mo
66.8125 5.125 li
65.5625 157 mo
65.5625 35.625 li
64.3125 157 mo
64.3125 73.75 li
63.0625 157 mo
63.0625 14.375 li
61.75 157 mo
61.75 60 li
60.5 157 mo
60.5 39.9375 li
59.25 157 mo
59.25 23.3125 li
58 157 mo
58 83.3125 li
56.75 157 mo
56.75 30 li
55.5 157 mo
55.5 55.875 li
54.1875 157 mo
54.1875 104.625 li
52.9375 157 mo
52.9375 75.6875 li
51.6875 157 mo
51.6875 110.188 li
50.4375 157 mo
50.4375 109.75 li
49.1875 157 mo
49.1875 116.25 li
47.9375 157 mo
47.9375 138.563 li
46.625 157 mo
46.625 132.625 li
45.375 157 mo
45.375 148.063 li
44.125 157 mo
44.125 153.625 li
42.875 157 mo
42.875 154.5 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.882353 0.768627 0 0 cmyk
@
44.375 154.5 mo
44.375 154.125 44.1875 153.75 43.9375 153.438 cv
43.625 153.188 43.25 153 42.875 153 cv
42.5 153 42.125 153.188 41.8125 153.438 cv
41.5625 153.75 41.375 154.125 41.375 154.5 cv
41.375 154.875 41.5625 155.25 41.8125 155.563 cv
42.125 155.813 42.5 156 42.875 156 cv
43.25 156 43.625 155.813 43.9375 155.563 cv
44.1875 155.25 44.375 154.875 44.375 154.5 cv
44.375 154.5 li
cp
0.905882 0.901961 0.00392157 0 cmyk
f
45.625 153.625 mo
45.625 153.25 45.4375 152.875 45.1875 152.563 cv
44.875 152.313 44.5 152.125 44.125 152.125 cv
43.75 152.125 43.375 152.313 43.0625 152.563 cv
42.8125 152.875 42.625 153.25 42.625 153.625 cv
42.625 154 42.8125 154.375 43.0625 154.688 cv
43.375 154.938 43.75 155.125 44.125 155.125 cv
44.5 155.125 44.875 154.938 45.1875 154.688 cv
45.4375 154.375 45.625 154 45.625 153.625 cv
45.625 153.625 li
cp
f
46.875 148.063 mo
46.875 147.688 46.6875 147.313 46.4375 147 cv
46.125 146.75 45.75 146.563 45.375 146.563 cv
45 146.563 44.625 146.75 44.3125 147 cv
44.0625 147.313 43.875 147.688 43.875 148.063 cv
43.875 148.438 44.0625 148.813 44.3125 149.125 cv
44.625 149.375 45 149.563 45.375 149.563 cv
45.75 149.563 46.125 149.375 46.4375 149.125 cv
46.6875 148.813 46.875 148.438 46.875 148.063 cv
46.875 148.063 li
cp
f
48.125 132.625 mo
48.125 132.25 47.9375 131.875 47.6875 131.563 cv
47.375 131.313 47 131.125 46.625 131.125 cv
46.25 131.125 45.875 131.313 45.5625 131.563 cv
45.3125 131.875 45.125 132.25 45.125 132.625 cv
45.125 133 45.3125 133.375 45.5625 133.688 cv
45.875 133.938 46.25 134.125 46.625 134.125 cv
47 134.125 47.375 133.938 47.6875 133.688 cv
47.9375 133.375 48.125 133 48.125 132.625 cv
48.125 132.625 li
cp
f
49.4375 138.563 mo
49.4375 138.188 49.25 137.813 49 137.5 cv
48.6875 137.25 48.3125 137.063 47.9375 137.063 cv
47.5625 137.063 47.1875 137.25 46.875 137.5 cv
46.625 137.813 46.4375 138.188 46.4375 138.563 cv
46.4375 138.938 46.625 139.313 46.875 139.625 cv
47.1875 139.875 47.5625 140.063 47.9375 140.063 cv
48.3125 140.063 48.6875 139.875 49 139.625 cv
49.25 139.313 49.4375 138.938 49.4375 138.563 cv
49.4375 138.563 li
cp
f
50.6875 116.25 mo
50.6875 115.875 50.5 115.5 50.25 115.188 cv
49.9375 114.938 49.5625 114.75 49.1875 114.75 cv
48.8125 114.75 48.4375 114.938 48.125 115.188 cv
47.875 115.5 47.6875 115.875 47.6875 116.25 cv
47.6875 116.625 47.875 117 48.125 117.313 cv
48.4375 117.563 48.8125 117.75 49.1875 117.75 cv
49.5625 117.75 49.9375 117.563 50.25 117.313 cv
50.5 117 50.6875 116.625 50.6875 116.25 cv
50.6875 116.25 li
cp
f
51.9375 109.75 mo
51.9375 109.375 51.75 109 51.5 108.688 cv
51.1875 108.438 50.8125 108.25 50.4375 108.25 cv
50.0625 108.25 49.6875 108.438 49.375 108.688 cv
49.125 109 48.9375 109.375 48.9375 109.75 cv
48.9375 110.125 49.125 110.5 49.375 110.813 cv
49.6875 111.063 50.0625 111.25 50.4375 111.25 cv
50.8125 111.25 51.1875 111.063 51.5 110.813 cv
51.75 110.5 51.9375 110.125 51.9375 109.75 cv
51.9375 109.75 li
cp
f
53.1875 110.188 mo
53.1875 109.813 53 109.438 52.75 109.125 cv
52.4375 108.875 52.0625 108.688 51.6875 108.688 cv
51.3125 108.688 50.9375 108.875 50.625 109.125 cv
50.375 109.438 50.1875 109.813 50.1875 110.188 cv
50.1875 110.563 50.375 110.938 50.625 111.25 cv
50.9375 111.5 51.3125 111.688 51.6875 111.688 cv
52.0625 111.688 52.4375 111.5 52.75 111.25 cv
53 110.938 53.1875 110.563 53.1875 110.188 cv
53.1875 110.188 li
cp
f
54.4375 75.6875 mo
54.4375 75.3125 54.25 74.9375 54 74.625 cv
53.6875 74.375 53.3125 74.1875 52.9375 74.1875 cv
52.5625 74.1875 52.1875 74.375 51.875 74.625 cv
51.625 74.9375 51.4375 75.3125 51.4375 75.6875 cv
51.4375 76.0625 51.625 76.4375 51.875 76.75 cv
52.1875 77 52.5625 77.1875 52.9375 77.1875 cv
53.3125 77.1875 53.6875 77 54 76.75 cv
54.25 76.4375 54.4375 76.0625 54.4375 75.6875 cv
54.4375 75.6875 li
cp
f
55.6875 104.625 mo
55.6875 104.25 55.5 103.875 55.25 103.563 cv
54.9375 103.313 54.5625 103.125 54.1875 103.125 cv
53.8125 103.125 53.4375 103.313 53.125 103.563 cv
52.875 103.875 52.6875 104.25 52.6875 104.625 cv
52.6875 105 52.875 105.375 53.125 105.688 cv
53.4375 105.938 53.8125 106.125 54.1875 106.125 cv
54.5625 106.125 54.9375 105.938 55.25 105.688 cv
55.5 105.375 55.6875 105 55.6875 104.625 cv
55.6875 104.625 li
cp
f
57 55.875 mo
57 55.5 56.8125 55.125 56.5625 54.8125 cv
56.25 54.5625 55.875 54.375 55.5 54.375 cv
55.125 54.375 54.75 54.5625 54.4375 54.8125 cv
54.1875 55.125 54 55.5 54 55.875 cv
54 56.25 54.1875 56.625 54.4375 56.9375 cv
54.75 57.1875 55.125 57.375 55.5 57.375 cv
55.875 57.375 56.25 57.1875 56.5625 56.9375 cv
56.8125 56.625 57 56.25 57 55.875 cv
57 55.875 li
cp
f
58.25 30 mo
58.25 29.625 58.0625 29.25 57.8125 28.9375 cv
57.5 28.6875 57.125 28.5 56.75 28.5 cv
56.375 28.5 56 28.6875 55.6875 28.9375 cv
55.4375 29.25 55.25 29.625 55.25 30 cv
55.25 30.375 55.4375 30.75 55.6875 31.0625 cv
56 31.3125 56.375 31.5 56.75 31.5 cv
57.125 31.5 57.5 31.3125 57.8125 31.0625 cv
58.0625 30.75 58.25 30.375 58.25 30 cv
58.25 30 li
cp
f
59.5 83.3125 mo
59.5 82.9375 59.3125 82.5625 59.0625 82.25 cv
58.75 82 58.375 81.8125 58 81.8125 cv
57.625 81.8125 57.25 82 56.9375 82.25 cv
56.6875 82.5625 56.5 82.9375 56.5 83.3125 cv
56.5 83.6875 56.6875 84.0625 56.9375 84.375 cv
57.25 84.625 57.625 84.8125 58 84.8125 cv
58.375 84.8125 58.75 84.625 59.0625 84.375 cv
59.3125 84.0625 59.5 83.6875 59.5 83.3125 cv
59.5 83.3125 li
cp
f
60.75 23.3125 mo
60.75 22.9375 60.5625 22.5625 60.3125 22.25 cv
60 22 59.625 21.8125 59.25 21.8125 cv
58.875 21.8125 58.5 22 58.1875 22.25 cv
57.9375 22.5625 57.75 22.9375 57.75 23.3125 cv
57.75 23.6875 57.9375 24.0625 58.1875 24.375 cv
58.5 24.625 58.875 24.8125 59.25 24.8125 cv
59.625 24.8125 60 24.625 60.3125 24.375 cv
60.5625 24.0625 60.75 23.6875 60.75 23.3125 cv
60.75 23.3125 li
cp
f
62 39.9375 mo
62 39.5625 61.8125 39.1875 61.5625 38.875 cv
61.25 38.625 60.875 38.4375 60.5 38.4375 cv
60.125 38.4375 59.75 38.625 59.4375 38.875 cv
59.1875 39.1875 59 39.5625 59 39.9375 cv
59 40.3125 59.1875 40.6875 59.4375 41 cv
59.75 41.25 60.125 41.4375 60.5 41.4375 cv
60.875 41.4375 61.25 41.25 61.5625 41 cv
61.8125 40.6875 62 40.3125 62 39.9375 cv
62 39.9375 li
cp
f
63.25 60 mo
63.25 59.625 63.0625 59.25 62.8125 58.9375 cv
62.5 58.6875 62.125 58.5 61.75 58.5 cv
61.375 58.5 61 58.6875 60.6875 58.9375 cv
60.4375 59.25 60.25 59.625 60.25 60 cv
60.25 60.375 60.4375 60.75 60.6875 61.0625 cv
61 61.3125 61.375 61.5 61.75 61.5 cv
62.125 61.5 62.5 61.3125 62.8125 61.0625 cv
63.0625 60.75 63.25 60.375 63.25 60 cv
63.25 60 li
cp
f
64.5625 14.375 mo
64.5625 14 64.375 13.625 64.125 13.3125 cv
63.8125 13.0625 63.4375 12.875 63.0625 12.875 cv
62.6875 12.875 62.3125 13.0625 62 13.3125 cv
61.75 13.625 61.5625 14 61.5625 14.375 cv
61.5625 14.75 61.75 15.125 62 15.4375 cv
62.3125 15.6875 62.6875 15.875 63.0625 15.875 cv
63.4375 15.875 63.8125 15.6875 64.125 15.4375 cv
64.375 15.125 64.5625 14.75 64.5625 14.375 cv
64.5625 14.375 li
cp
f
65.8125 73.75 mo
65.8125 73.375 65.625 73 65.375 72.6875 cv
65.0625 72.4375 64.6875 72.25 64.3125 72.25 cv
63.9375 72.25 63.5625 72.4375 63.25 72.6875 cv
63 73 62.8125 73.375 62.8125 73.75 cv
62.8125 74.125 63 74.5 63.25 74.8125 cv
63.5625 75.0625 63.9375 75.25 64.3125 75.25 cv
64.6875 75.25 65.0625 75.0625 65.375 74.8125 cv
65.625 74.5 65.8125 74.125 65.8125 73.75 cv
65.8125 73.75 li
cp
f
67.0625 35.625 mo
67.0625 35.25 66.875 34.875 66.625 34.5625 cv
66.3125 34.3125 65.9375 34.125 65.5625 34.125 cv
65.1875 34.125 64.8125 34.3125 64.5 34.5625 cv
64.25 34.875 64.0625 35.25 64.0625 35.625 cv
64.0625 36 64.25 36.375 64.5 36.6875 cv
64.8125 36.9375 65.1875 37.125 65.5625 37.125 cv
65.9375 37.125 66.3125 36.9375 66.625 36.6875 cv
66.875 36.375 67.0625 36 67.0625 35.625 cv
67.0625 35.625 li
cp
f
68.3125 5.125 mo
68.3125 4.75 68.125 4.375 67.875 4.0625 cv
67.5625 3.8125 67.1875 3.625 66.8125 3.625 cv
66.4375 3.625 66.0625 3.8125 65.75 4.0625 cv
65.5 4.375 65.3125 4.75 65.3125 5.125 cv
65.3125 5.5 65.5 5.875 65.75 6.1875 cv
66.0625 6.4375 66.4375 6.625 66.8125 6.625 cv
67.1875 6.625 67.5625 6.4375 67.875 6.1875 cv
68.125 5.875 68.3125 5.5 68.3125 5.125 cv
68.3125 5.125 li
cp
f
69.5625 71.5625 mo
69.5625 71.1875 69.375 70.8125 69.125 70.5 cv
68.8125 70.25 68.4375 70.0625 68.0625 70.0625 cv
67.6875 70.0625 67.3125 70.25 67 70.5 cv
66.75 70.8125 66.5625 71.1875 66.5625 71.5625 cv
66.5625 71.9375 66.75 72.3125 67 72.625 cv
67.3125 72.875 67.6875 73.0625 68.0625 73.0625 cv
68.4375 73.0625 68.8125 72.875 69.125 72.625 cv
69.375 72.3125 69.5625 71.9375 69.5625 71.5625 cv
69.5625 71.5625 li
cp
f
70.875 24.6875 mo
70.875 24.3125 70.6875 23.9375 70.4375 23.625 cv
70.125 23.375 69.75 23.1875 69.375 23.1875 cv
69 23.1875 68.625 23.375 68.3125 23.625 cv
68.0625 23.9375 67.875 24.3125 67.875 24.6875 cv
67.875 25.0625 68.0625 25.4375 68.3125 25.75 cv
68.625 26 69 26.1875 69.375 26.1875 cv
69.75 26.1875 70.125 26 70.4375 25.75 cv
70.6875 25.4375 70.875 25.0625 70.875 24.6875 cv
70.875 24.6875 li
cp
f
72.125 62.4375 mo
72.125 62.0625 71.9375 61.6875 71.6875 61.375 cv
71.375 61.125 71 60.9375 70.625 60.9375 cv
70.25 60.9375 69.875 61.125 69.5625 61.375 cv
69.3125 61.6875 69.125 62.0625 69.125 62.4375 cv
69.125 62.8125 69.3125 63.1875 69.5625 63.5 cv
69.875 63.75 70.25 63.9375 70.625 63.9375 cv
71 63.9375 71.375 63.75 71.6875 63.5 cv
71.9375 63.1875 72.125 62.8125 72.125 62.4375 cv
72.125 62.4375 li
cp
f
73.375 62.1875 mo
73.375 61.8125 73.1875 61.4375 72.9375 61.125 cv
72.625 60.875 72.25 60.6875 71.875 60.6875 cv
71.5 60.6875 71.125 60.875 70.8125 61.125 cv
70.5625 61.4375 70.375 61.8125 70.375 62.1875 cv
70.375 62.5625 70.5625 62.9375 70.8125 63.25 cv
71.125 63.5 71.5 63.6875 71.875 63.6875 cv
72.25 63.6875 72.625 63.5 72.9375 63.25 cv
73.1875 62.9375 73.375 62.5625 73.375 62.1875 cv
73.375 62.1875 li
cp
f
74.625 55.5 mo
74.625 55.125 74.4375 54.75 74.1875 54.4375 cv
73.875 54.1875 73.5 54 73.125 54 cv
72.75 54 72.375 54.1875 72.0625 54.4375 cv
71.8125 54.75 71.625 55.125 71.625 55.5 cv
71.625 55.875 71.8125 56.25 72.0625 56.5625 cv
72.375 56.8125 72.75 57 73.125 57 cv
73.5 57 73.875 56.8125 74.1875 56.5625 cv
74.4375 56.25 74.625 55.875 74.625 55.5 cv
74.625 55.5 li
cp
f
75.875 84.75 mo
75.875 84.375 75.6875 84 75.4375 83.6875 cv
75.125 83.4375 74.75 83.25 74.375 83.25 cv
74 83.25 73.625 83.4375 73.3125 83.6875 cv
73.0625 84 72.875 84.375 72.875 84.75 cv
72.875 85.125 73.0625 85.5 73.3125 85.8125 cv
73.625 86.0625 74 86.25 74.375 86.25 cv
74.75 86.25 75.125 86.0625 75.4375 85.8125 cv
75.6875 85.5 75.875 85.125 75.875 84.75 cv
75.875 84.75 li
cp
f
77.125 56.0625 mo
77.125 55.6875 76.9375 55.3125 76.6875 55 cv
76.375 54.75 76 54.5625 75.625 54.5625 cv
75.25 54.5625 74.875 54.75 74.5625 55 cv
74.3125 55.3125 74.125 55.6875 74.125 56.0625 cv
74.125 56.4375 74.3125 56.8125 74.5625 57.125 cv
74.875 57.375 75.25 57.5625 75.625 57.5625 cv
76 57.5625 76.375 57.375 76.6875 57.125 cv
76.9375 56.8125 77.125 56.4375 77.125 56.0625 cv
77.125 56.0625 li
cp
f
78.4375 67.75 mo
78.4375 67.375 78.25 67 78 66.6875 cv
77.6875 66.4375 77.3125 66.25 76.9375 66.25 cv
76.5625 66.25 76.1875 66.4375 75.875 66.6875 cv
75.625 67 75.4375 67.375 75.4375 67.75 cv
75.4375 68.125 75.625 68.5 75.875 68.8125 cv
76.1875 69.0625 76.5625 69.25 76.9375 69.25 cv
77.3125 69.25 77.6875 69.0625 78 68.8125 cv
78.25 68.5 78.4375 68.125 78.4375 67.75 cv
78.4375 67.75 li
cp
f
79.6875 64.875 mo
79.6875 64.5 79.5 64.125 79.25 63.8125 cv
78.9375 63.5625 78.5625 63.375 78.1875 63.375 cv
77.8125 63.375 77.4375 63.5625 77.125 63.8125 cv
76.875 64.125 76.6875 64.5 76.6875 64.875 cv
76.6875 65.25 76.875 65.625 77.125 65.9375 cv
77.4375 66.1875 77.8125 66.375 78.1875 66.375 cv
78.5625 66.375 78.9375 66.1875 79.25 65.9375 cv
79.5 65.625 79.6875 65.25 79.6875 64.875 cv
79.6875 64.875 li
cp
f
80.9375 61.875 mo
80.9375 61.5 80.75 61.125 80.5 60.8125 cv
80.1875 60.5625 79.8125 60.375 79.4375 60.375 cv
79.0625 60.375 78.6875 60.5625 78.375 60.8125 cv
78.125 61.125 77.9375 61.5 77.9375 61.875 cv
77.9375 62.25 78.125 62.625 78.375 62.9375 cv
78.6875 63.1875 79.0625 63.375 79.4375 63.375 cv
79.8125 63.375 80.1875 63.1875 80.5 62.9375 cv
80.75 62.625 80.9375 62.25 80.9375 61.875 cv
80.9375 61.875 li
cp
f
82.1875 83 mo
82.1875 82.625 82 82.25 81.75 81.9375 cv
81.4375 81.6875 81.0625 81.5 80.6875 81.5 cv
80.3125 81.5 79.9375 81.6875 79.625 81.9375 cv
79.375 82.25 79.1875 82.625 79.1875 83 cv
79.1875 83.375 79.375 83.75 79.625 84.0625 cv
79.9375 84.3125 80.3125 84.5 80.6875 84.5 cv
81.0625 84.5 81.4375 84.3125 81.75 84.0625 cv
82 83.75 82.1875 83.375 82.1875 83 cv
82.1875 83 li
cp
f
83.4375 82.0625 mo
83.4375 81.6875 83.25 81.3125 83 81 cv
82.6875 80.75 82.3125 80.5625 81.9375 80.5625 cv
81.5625 80.5625 81.1875 80.75 80.875 81 cv
80.625 81.3125 80.4375 81.6875 80.4375 82.0625 cv
80.4375 82.4375 80.625 82.8125 80.875 83.125 cv
81.1875 83.375 81.5625 83.5625 81.9375 83.5625 cv
82.3125 83.5625 82.6875 83.375 83 83.125 cv
83.25 82.8125 83.4375 82.4375 83.4375 82.0625 cv
83.4375 82.0625 li
cp
f
84.6875 84.125 mo
84.6875 83.75 84.5 83.375 84.25 83.0625 cv
83.9375 82.8125 83.5625 82.625 83.1875 82.625 cv
82.8125 82.625 82.4375 82.8125 82.125 83.0625 cv
81.875 83.375 81.6875 83.75 81.6875 84.125 cv
81.6875 84.5 81.875 84.875 82.125 85.1875 cv
82.4375 85.4375 82.8125 85.625 83.1875 85.625 cv
83.5625 85.625 83.9375 85.4375 84.25 85.1875 cv
84.5 84.875 84.6875 84.5 84.6875 84.125 cv
84.6875 84.125 li
cp
f
86 99.0625 mo
86 98.6875 85.8125 98.3125 85.5625 98 cv
85.25 97.75 84.875 97.5625 84.5 97.5625 cv
84.125 97.5625 83.75 97.75 83.4375 98 cv
83.1875 98.3125 83 98.6875 83 99.0625 cv
83 99.4375 83.1875 99.8125 83.4375 100.125 cv
83.75 100.375 84.125 100.563 84.5 100.563 cv
84.875 100.563 85.25 100.375 85.5625 100.125 cv
85.8125 99.8125 86 99.4375 86 99.0625 cv
86 99.0625 li
cp
f
87.25 84.25 mo
87.25 83.875 87.0625 83.5 86.8125 83.1875 cv
86.5 82.9375 86.125 82.75 85.75 82.75 cv
85.375 82.75 85 82.9375 84.6875 83.1875 cv
84.4375 83.5 84.25 83.875 84.25 84.25 cv
84.25 84.625 84.4375 85 84.6875 85.3125 cv
85 85.5625 85.375 85.75 85.75 85.75 cv
86.125 85.75 86.5 85.5625 86.8125 85.3125 cv
87.0625 85 87.25 84.625 87.25 84.25 cv
87.25 84.25 li
cp
f
88.5 97.6875 mo
88.5 97.3125 88.3125 96.9375 88.0625 96.625 cv
87.75 96.375 87.375 96.1875 87 96.1875 cv
86.625 96.1875 86.25 96.375 85.9375 96.625 cv
85.6875 96.9375 85.5 97.3125 85.5 97.6875 cv
85.5 98.0625 85.6875 98.4375 85.9375 98.75 cv
86.25 99 86.625 99.1875 87 99.1875 cv
87.375 99.1875 87.75 99 88.0625 98.75 cv
88.3125 98.4375 88.5 98.0625 88.5 97.6875 cv
88.5 97.6875 li
cp
f
89.75 92.625 mo
89.75 92.25 89.5625 91.875 89.3125 91.5625 cv
89 91.3125 88.625 91.125 88.25 91.125 cv
87.875 91.125 87.5 91.3125 87.1875 91.5625 cv
86.9375 91.875 86.75 92.25 86.75 92.625 cv
86.75 93 86.9375 93.375 87.1875 93.6875 cv
87.5 93.9375 87.875 94.125 88.25 94.125 cv
88.625 94.125 89 93.9375 89.3125 93.6875 cv
89.5625 93.375 89.75 93 89.75 92.625 cv
89.75 92.625 li
cp
f
91 94.0625 mo
91 93.6875 90.8125 93.3125 90.5625 93 cv
90.25 92.75 89.875 92.5625 89.5 92.5625 cv
89.125 92.5625 88.75 92.75 88.4375 93 cv
88.1875 93.3125 88 93.6875 88 94.0625 cv
88 94.4375 88.1875 94.8125 88.4375 95.125 cv
88.75 95.375 89.125 95.5625 89.5 95.5625 cv
89.875 95.5625 90.25 95.375 90.5625 95.125 cv
90.8125 94.8125 91 94.4375 91 94.0625 cv
91 94.0625 li
cp
f
92.25 110.188 mo
92.25 109.813 92.0625 109.438 91.8125 109.125 cv
91.5 108.875 91.125 108.688 90.75 108.688 cv
90.375 108.688 90 108.875 89.6875 109.125 cv
89.4375 109.438 89.25 109.813 89.25 110.188 cv
89.25 110.563 89.4375 110.938 89.6875 111.25 cv
90 111.5 90.375 111.688 90.75 111.688 cv
91.125 111.688 91.5 111.5 91.8125 111.25 cv
92.0625 110.938 92.25 110.563 92.25 110.188 cv
92.25 110.188 li
cp
f
93.5625 102.938 mo
93.5625 102.563 93.375 102.188 93.125 101.875 cv
92.8125 101.625 92.4375 101.438 92.0625 101.438 cv
91.6875 101.438 91.3125 101.625 91 101.875 cv
90.75 102.188 90.5625 102.563 90.5625 102.938 cv
90.5625 103.313 90.75 103.688 91 104 cv
91.3125 104.25 91.6875 104.438 92.0625 104.438 cv
92.4375 104.438 92.8125 104.25 93.125 104 cv
93.375 103.688 93.5625 103.313 93.5625 102.938 cv
93.5625 102.938 li
cp
f
94.8125 105.75 mo
94.8125 105.375 94.625 105 94.375 104.688 cv
94.0625 104.438 93.6875 104.25 93.3125 104.25 cv
92.9375 104.25 92.5625 104.438 92.25 104.688 cv
92 105 91.8125 105.375 91.8125 105.75 cv
91.8125 106.125 92 106.5 92.25 106.813 cv
92.5625 107.063 92.9375 107.25 93.3125 107.25 cv
93.6875 107.25 94.0625 107.063 94.375 106.813 cv
94.625 106.5 94.8125 106.125 94.8125 105.75 cv
94.8125 105.75 li
cp
f
96.0625 113.25 mo
96.0625 112.875 95.875 112.5 95.625 112.188 cv
95.3125 111.938 94.9375 111.75 94.5625 111.75 cv
94.1875 111.75 93.8125 111.938 93.5 112.188 cv
93.25 112.5 93.0625 112.875 93.0625 113.25 cv
93.0625 113.625 93.25 114 93.5 114.313 cv
93.8125 114.563 94.1875 114.75 94.5625 114.75 cv
94.9375 114.75 95.3125 114.563 95.625 114.313 cv
95.875 114 96.0625 113.625 96.0625 113.25 cv
96.0625 113.25 li
cp
f
97.3125 107.813 mo
97.3125 107.438 97.125 107.063 96.875 106.75 cv
96.5625 106.5 96.1875 106.313 95.8125 106.313 cv
95.4375 106.313 95.0625 106.5 94.75 106.75 cv
94.5 107.063 94.3125 107.438 94.3125 107.813 cv
94.3125 108.188 94.5 108.563 94.75 108.875 cv
95.0625 109.125 95.4375 109.313 95.8125 109.313 cv
96.1875 109.313 96.5625 109.125 96.875 108.875 cv
97.125 108.563 97.3125 108.188 97.3125 107.813 cv
97.3125 107.813 li
cp
f
98.5625 118.313 mo
98.5625 117.938 98.375 117.563 98.125 117.25 cv
97.8125 117 97.4375 116.813 97.0625 116.813 cv
96.6875 116.813 96.3125 117 96 117.25 cv
95.75 117.563 95.5625 117.938 95.5625 118.313 cv
95.5625 118.688 95.75 119.063 96 119.375 cv
96.3125 119.625 96.6875 119.813 97.0625 119.813 cv
97.4375 119.813 97.8125 119.625 98.125 119.375 cv
98.375 119.063 98.5625 118.688 98.5625 118.313 cv
98.5625 118.313 li
cp
f
99.8125 109.25 mo
99.8125 108.875 99.625 108.5 99.375 108.188 cv
99.0625 107.938 98.6875 107.75 98.3125 107.75 cv
97.9375 107.75 97.5625 107.938 97.25 108.188 cv
97 108.5 96.8125 108.875 96.8125 109.25 cv
96.8125 109.625 97 110 97.25 110.313 cv
97.5625 110.563 97.9375 110.75 98.3125 110.75 cv
98.6875 110.75 99.0625 110.563 99.375 110.313 cv
99.625 110 99.8125 109.625 99.8125 109.25 cv
99.8125 109.25 li
cp
f
101.125 112.063 mo
101.125 111.688 100.938 111.313 100.688 111 cv
100.375 110.75 100 110.563 99.625 110.563 cv
99.25 110.563 98.875 110.75 98.5625 111 cv
98.3125 111.313 98.125 111.688 98.125 112.063 cv
98.125 112.438 98.3125 112.813 98.5625 113.125 cv
98.875 113.375 99.25 113.563 99.625 113.563 cv
100 113.563 100.375 113.375 100.688 113.125 cv
100.938 112.813 101.125 112.438 101.125 112.063 cv
101.125 112.063 li
cp
f
102.375 121.875 mo
102.375 121.5 102.188 121.125 101.938 120.813 cv
101.625 120.563 101.25 120.375 100.875 120.375 cv
100.5 120.375 100.125 120.563 99.8125 120.813 cv
99.5625 121.125 99.375 121.5 99.375 121.875 cv
99.375 122.25 99.5625 122.625 99.8125 122.938 cv
100.125 123.188 100.5 123.375 100.875 123.375 cv
101.25 123.375 101.625 123.188 101.938 122.938 cv
102.188 122.625 102.375 122.25 102.375 121.875 cv
102.375 121.875 li
cp
f
103.625 117.5 mo
103.625 117.125 103.438 116.75 103.188 116.438 cv
102.875 116.188 102.5 116 102.125 116 cv
101.75 116 101.375 116.188 101.063 116.438 cv
100.813 116.75 100.625 117.125 100.625 117.5 cv
100.625 117.875 100.813 118.25 101.063 118.563 cv
101.375 118.813 101.75 119 102.125 119 cv
102.5 119 102.875 118.813 103.188 118.563 cv
103.438 118.25 103.625 117.875 103.625 117.5 cv
103.625 117.5 li
cp
f
104.875 121.188 mo
104.875 120.813 104.688 120.438 104.438 120.125 cv
104.125 119.875 103.75 119.688 103.375 119.688 cv
103 119.688 102.625 119.875 102.313 120.125 cv
102.063 120.438 101.875 120.813 101.875 121.188 cv
101.875 121.563 102.063 121.938 102.313 122.25 cv
102.625 122.5 103 122.688 103.375 122.688 cv
103.75 122.688 104.125 122.5 104.438 122.25 cv
104.688 121.938 104.875 121.563 104.875 121.188 cv
104.875 121.188 li
cp
f
106.125 123.125 mo
106.125 122.75 105.938 122.375 105.688 122.063 cv
105.375 121.813 105 121.625 104.625 121.625 cv
104.25 121.625 103.875 121.813 103.563 122.063 cv
103.313 122.375 103.125 122.75 103.125 123.125 cv
103.125 123.5 103.313 123.875 103.563 124.188 cv
103.875 124.438 104.25 124.625 104.625 124.625 cv
105 124.625 105.375 124.438 105.688 124.188 cv
105.938 123.875 106.125 123.5 106.125 123.125 cv
106.125 123.125 li
cp
f
107.375 120.75 mo
107.375 120.375 107.188 120 106.938 119.688 cv
106.625 119.438 106.25 119.25 105.875 119.25 cv
105.5 119.25 105.125 119.438 104.813 119.688 cv
104.563 120 104.375 120.375 104.375 120.75 cv
104.375 121.125 104.563 121.5 104.813 121.813 cv
105.125 122.063 105.5 122.25 105.875 122.25 cv
106.25 122.25 106.625 122.063 106.938 121.813 cv
107.188 121.5 107.375 121.125 107.375 120.75 cv
107.375 120.75 li
cp
f
108.688 128.5 mo
108.688 128.125 108.5 127.75 108.25 127.438 cv
107.938 127.188 107.563 127 107.188 127 cv
106.813 127 106.438 127.188 106.125 127.438 cv
105.875 127.75 105.688 128.125 105.688 128.5 cv
105.688 128.875 105.875 129.25 106.125 129.563 cv
106.438 129.813 106.813 130 107.188 130 cv
107.563 130 107.938 129.813 108.25 129.563 cv
108.5 129.25 108.688 128.875 108.688 128.5 cv
108.688 128.5 li
cp
f
109.938 123.813 mo
109.938 123.438 109.75 123.063 109.5 122.75 cv
109.188 122.5 108.813 122.313 108.438 122.313 cv
108.063 122.313 107.688 122.5 107.375 122.75 cv
107.125 123.063 106.938 123.438 106.938 123.813 cv
106.938 124.188 107.125 124.563 107.375 124.875 cv
107.688 125.125 108.063 125.313 108.438 125.313 cv
108.813 125.313 109.188 125.125 109.5 124.875 cv
109.75 124.563 109.938 124.188 109.938 123.813 cv
109.938 123.813 li
cp
f
111.188 119.25 mo
111.188 118.875 111 118.5 110.75 118.188 cv
110.438 117.938 110.063 117.75 109.688 117.75 cv
109.313 117.75 108.938 117.938 108.625 118.188 cv
108.375 118.5 108.188 118.875 108.188 119.25 cv
108.188 119.625 108.375 120 108.625 120.313 cv
108.938 120.563 109.313 120.75 109.688 120.75 cv
110.063 120.75 110.438 120.563 110.75 120.313 cv
111 120 111.188 119.625 111.188 119.25 cv
111.188 119.25 li
cp
f
112.438 134.188 mo
112.438 133.813 112.25 133.438 112 133.125 cv
111.688 132.875 111.313 132.688 110.938 132.688 cv
110.563 132.688 110.188 132.875 109.875 133.125 cv
109.625 133.438 109.438 133.813 109.438 134.188 cv
109.438 134.563 109.625 134.938 109.875 135.25 cv
110.188 135.5 110.563 135.688 110.938 135.688 cv
111.313 135.688 111.688 135.5 112 135.25 cv
112.25 134.938 112.438 134.563 112.438 134.188 cv
112.438 134.188 li
cp
f
113.688 127.5 mo
113.688 127.125 113.5 126.75 113.25 126.438 cv
112.938 126.188 112.563 126 112.188 126 cv
111.813 126 111.438 126.188 111.125 126.438 cv
110.875 126.75 110.688 127.125 110.688 127.5 cv
110.688 127.875 110.875 128.25 111.125 128.563 cv
111.438 128.813 111.813 129 112.188 129 cv
112.563 129 112.938 128.813 113.25 128.563 cv
113.5 128.25 113.688 127.875 113.688 127.5 cv
113.688 127.5 li
cp
f
114.938 131 mo
114.938 130.625 114.75 130.25 114.5 129.938 cv
114.188 129.688 113.813 129.5 113.438 129.5 cv
113.063 129.5 112.688 129.688 112.375 129.938 cv
112.125 130.25 111.938 130.625 111.938 131 cv
111.938 131.375 112.125 131.75 112.375 132.063 cv
112.688 132.313 113.063 132.5 113.438 132.5 cv
113.813 132.5 114.188 132.313 114.5 132.063 cv
114.75 131.75 114.938 131.375 114.938 131 cv
114.938 131 li
cp
f
116.25 132.5 mo
116.25 132.125 116.063 131.75 115.813 131.438 cv
115.5 131.188 115.125 131 114.75 131 cv
114.375 131 114 131.188 113.688 131.438 cv
113.438 131.75 113.25 132.125 113.25 132.5 cv
113.25 132.875 113.438 133.25 113.688 133.563 cv
114 133.813 114.375 134 114.75 134 cv
115.125 134 115.5 133.813 115.813 133.563 cv
116.063 133.25 116.25 132.875 116.25 132.5 cv
116.25 132.5 li
cp
f
117.5 129.5 mo
117.5 129.125 117.313 128.75 117.063 128.438 cv
116.75 128.188 116.375 128 116 128 cv
115.625 128 115.25 128.188 114.938 128.438 cv
114.688 128.75 114.5 129.125 114.5 129.5 cv
114.5 129.875 114.688 130.25 114.938 130.563 cv
115.25 130.813 115.625 131 116 131 cv
116.375 131 116.75 130.813 117.063 130.563 cv
117.313 130.25 117.5 129.875 117.5 129.5 cv
117.5 129.5 li
cp
f
118.75 134.438 mo
118.75 134.063 118.563 133.688 118.313 133.375 cv
118 133.125 117.625 132.938 117.25 132.938 cv
116.875 132.938 116.5 133.125 116.188 133.375 cv
115.938 133.688 115.75 134.063 115.75 134.438 cv
115.75 134.813 115.938 135.188 116.188 135.5 cv
116.5 135.75 116.875 135.938 117.25 135.938 cv
117.625 135.938 118 135.75 118.313 135.5 cv
118.563 135.188 118.75 134.813 118.75 134.438 cv
118.75 134.438 li
cp
f
120 130.75 mo
120 130.375 119.813 130 119.563 129.688 cv
119.25 129.438 118.875 129.25 118.5 129.25 cv
118.125 129.25 117.75 129.438 117.438 129.688 cv
117.188 130 117 130.375 117 130.75 cv
117 131.125 117.188 131.5 117.438 131.813 cv
117.75 132.063 118.125 132.25 118.5 132.25 cv
118.875 132.25 119.25 132.063 119.563 131.813 cv
119.813 131.5 120 131.125 120 130.75 cv
120 130.75 li
cp
f
121.25 127.438 mo
121.25 127.063 121.063 126.688 120.813 126.375 cv
120.5 126.125 120.125 125.938 119.75 125.938 cv
119.375 125.938 119 126.125 118.688 126.375 cv
118.438 126.688 118.25 127.063 118.25 127.438 cv
118.25 127.813 118.438 128.188 118.688 128.5 cv
119 128.75 119.375 128.938 119.75 128.938 cv
120.125 128.938 120.5 128.75 120.813 128.5 cv
121.063 128.188 121.25 127.813 121.25 127.438 cv
121.25 127.438 li
cp
f
122.563 136.25 mo
122.563 135.875 122.375 135.5 122.125 135.188 cv
121.813 134.938 121.438 134.75 121.063 134.75 cv
120.688 134.75 120.313 134.938 120 135.188 cv
119.75 135.5 119.563 135.875 119.563 136.25 cv
119.563 136.625 119.75 137 120 137.313 cv
120.313 137.563 120.688 137.75 121.063 137.75 cv
121.438 137.75 121.813 137.563 122.125 137.313 cv
122.375 137 122.563 136.625 122.563 136.25 cv
122.563 136.25 li
cp
f
123.813 134.625 mo
123.813 134.25 123.625 133.875 123.375 133.563 cv
123.063 133.313 122.688 133.125 122.313 133.125 cv
121.938 133.125 121.563 133.313 121.25 133.563 cv
121 133.875 120.813 134.25 120.813 134.625 cv
120.813 135 121 135.375 121.25 135.688 cv
121.563 135.938 121.938 136.125 122.313 136.125 cv
122.688 136.125 123.063 135.938 123.375 135.688 cv
123.625 135.375 123.813 135 123.813 134.625 cv
123.813 134.625 li
cp
f
125.063 136.313 mo
125.063 135.938 124.875 135.563 124.625 135.25 cv
124.313 135 123.938 134.813 123.563 134.813 cv
123.188 134.813 122.813 135 122.5 135.25 cv
122.25 135.563 122.063 135.938 122.063 136.313 cv
122.063 136.688 122.25 137.063 122.5 137.375 cv
122.813 137.625 123.188 137.813 123.563 137.813 cv
123.938 137.813 124.313 137.625 124.625 137.375 cv
124.875 137.063 125.063 136.688 125.063 136.313 cv
125.063 136.313 li
cp
f
126.313 138.063 mo
126.313 137.688 126.125 137.313 125.875 137 cv
125.563 136.75 125.188 136.563 124.813 136.563 cv
124.438 136.563 124.063 136.75 123.75 137 cv
123.5 137.313 123.313 137.688 123.313 138.063 cv
123.313 138.438 123.5 138.813 123.75 139.125 cv
124.063 139.375 124.438 139.563 124.813 139.563 cv
125.188 139.563 125.563 139.375 125.875 139.125 cv
126.125 138.813 126.313 138.438 126.313 138.063 cv
126.313 138.063 li
cp
f
127.563 137.438 mo
127.563 137.063 127.375 136.688 127.125 136.375 cv
126.813 136.125 126.438 135.938 126.063 135.938 cv
125.688 135.938 125.313 136.125 125 136.375 cv
124.75 136.688 124.563 137.063 124.563 137.438 cv
124.563 137.813 124.75 138.188 125 138.5 cv
125.313 138.75 125.688 138.938 126.063 138.938 cv
126.438 138.938 126.813 138.75 127.125 138.5 cv
127.375 138.188 127.563 137.813 127.563 137.438 cv
127.563 137.438 li
cp
f
128.813 138.438 mo
128.813 138.063 128.625 137.688 128.375 137.375 cv
128.063 137.125 127.688 136.938 127.313 136.938 cv
126.938 136.938 126.563 137.125 126.25 137.375 cv
126 137.688 125.813 138.063 125.813 138.438 cv
125.813 138.813 126 139.188 126.25 139.5 cv
126.563 139.75 126.938 139.938 127.313 139.938 cv
127.688 139.938 128.063 139.75 128.375 139.5 cv
128.625 139.188 128.813 138.813 128.813 138.438 cv
128.813 138.438 li
cp
f
130.125 137.375 mo
130.125 137 129.938 136.625 129.688 136.313 cv
129.375 136.063 129 135.875 128.625 135.875 cv
128.25 135.875 127.875 136.063 127.563 136.313 cv
127.313 136.625 127.125 137 127.125 137.375 cv
127.125 137.75 127.313 138.125 127.563 138.438 cv
127.875 138.688 128.25 138.875 128.625 138.875 cv
129 138.875 129.375 138.688 129.688 138.438 cv
129.938 138.125 130.125 137.75 130.125 137.375 cv
130.125 137.375 li
cp
f
131.375 135.063 mo
131.375 134.688 131.188 134.313 130.938 134 cv
130.625 133.75 130.25 133.563 129.875 133.563 cv
129.5 133.563 129.125 133.75 128.813 134 cv
128.563 134.313 128.375 134.688 128.375 135.063 cv
128.375 135.438 128.563 135.813 128.813 136.125 cv
129.125 136.375 129.5 136.563 129.875 136.563 cv
130.25 136.563 130.625 136.375 130.938 136.125 cv
131.188 135.813 131.375 135.438 131.375 135.063 cv
131.375 135.063 li
cp
f
132.625 142.063 mo
132.625 141.688 132.438 141.313 132.188 141 cv
131.875 140.75 131.5 140.563 131.125 140.563 cv
130.75 140.563 130.375 140.75 130.063 141 cv
129.813 141.313 129.625 141.688 129.625 142.063 cv
129.625 142.438 129.813 142.813 130.063 143.125 cv
130.375 143.375 130.75 143.563 131.125 143.563 cv
131.5 143.563 131.875 143.375 132.188 143.125 cv
132.438 142.813 132.625 142.438 132.625 142.063 cv
132.625 142.063 li
cp
f
133.875 140.875 mo
133.875 140.5 133.688 140.125 133.438 139.813 cv
133.125 139.563 132.75 139.375 132.375 139.375 cv
132 139.375 131.625 139.563 131.313 139.813 cv
131.063 140.125 130.875 140.5 130.875 140.875 cv
130.875 141.25 131.063 141.625 131.313 141.938 cv
131.625 142.188 132 142.375 132.375 142.375 cv
132.75 142.375 133.125 142.188 133.438 141.938 cv
133.688 141.625 133.875 141.25 133.875 140.875 cv
133.875 140.875 li
cp
f
135.125 143.938 mo
135.125 143.563 134.938 143.188 134.688 142.875 cv
134.375 142.625 134 142.438 133.625 142.438 cv
133.25 142.438 132.875 142.625 132.563 142.875 cv
132.313 143.188 132.125 143.563 132.125 143.938 cv
132.125 144.313 132.313 144.688 132.563 145 cv
132.875 145.25 133.25 145.438 133.625 145.438 cv
134 145.438 134.375 145.25 134.688 145 cv
134.938 144.688 135.125 144.313 135.125 143.938 cv
135.125 143.938 li
cp
f
136.375 140.875 mo
136.375 140.5 136.188 140.125 135.938 139.813 cv
135.625 139.563 135.25 139.375 134.875 139.375 cv
134.5 139.375 134.125 139.563 133.813 139.813 cv
133.563 140.125 133.375 140.5 133.375 140.875 cv
133.375 141.25 133.563 141.625 133.813 141.938 cv
134.125 142.188 134.5 142.375 134.875 142.375 cv
135.25 142.375 135.625 142.188 135.938 141.938 cv
136.188 141.625 136.375 141.25 136.375 140.875 cv
136.375 140.875 li
cp
f
137.688 140.375 mo
137.688 140 137.5 139.625 137.25 139.313 cv
136.938 139.063 136.563 138.875 136.188 138.875 cv
135.813 138.875 135.438 139.063 135.125 139.313 cv
134.875 139.625 134.688 140 134.688 140.375 cv
134.688 140.75 134.875 141.125 135.125 141.438 cv
135.438 141.688 135.813 141.875 136.188 141.875 cv
136.563 141.875 136.938 141.688 137.25 141.438 cv
137.5 141.125 137.688 140.75 137.688 140.375 cv
137.688 140.375 li
cp
f
138.938 145 mo
138.938 144.625 138.75 144.25 138.5 143.938 cv
138.188 143.688 137.813 143.5 137.438 143.5 cv
137.063 143.5 136.688 143.688 136.375 143.938 cv
136.125 144.25 135.938 144.625 135.938 145 cv
135.938 145.375 136.125 145.75 136.375 146.063 cv
136.688 146.313 137.063 146.5 137.438 146.5 cv
137.813 146.5 138.188 146.313 138.5 146.063 cv
138.75 145.75 138.938 145.375 138.938 145 cv
138.938 145 li
cp
f
140.188 140.688 mo
140.188 140.313 140 139.938 139.75 139.625 cv
139.438 139.375 139.063 139.188 138.688 139.188 cv
138.313 139.188 137.938 139.375 137.625 139.625 cv
137.375 139.938 137.188 140.313 137.188 140.688 cv
137.188 141.063 137.375 141.438 137.625 141.75 cv
137.938 142 138.313 142.188 138.688 142.188 cv
139.063 142.188 139.438 142 139.75 141.75 cv
140 141.438 140.188 141.063 140.188 140.688 cv
140.188 140.688 li
cp
f
141.438 143 mo
141.438 142.625 141.25 142.25 141 141.938 cv
140.688 141.688 140.313 141.5 139.938 141.5 cv
139.563 141.5 139.188 141.688 138.875 141.938 cv
138.625 142.25 138.438 142.625 138.438 143 cv
138.438 143.375 138.625 143.75 138.875 144.063 cv
139.188 144.313 139.563 144.5 139.938 144.5 cv
140.313 144.5 140.688 144.313 141 144.063 cv
141.25 143.75 141.438 143.375 141.438 143 cv
141.438 143 li
cp
f
142.688 143.125 mo
142.688 142.75 142.5 142.375 142.25 142.063 cv
141.938 141.813 141.563 141.625 141.188 141.625 cv
140.813 141.625 140.438 141.813 140.125 142.063 cv
139.875 142.375 139.688 142.75 139.688 143.125 cv
139.688 143.5 139.875 143.875 140.125 144.188 cv
140.438 144.438 140.813 144.625 141.188 144.625 cv
141.563 144.625 141.938 144.438 142.25 144.188 cv
142.5 143.875 142.688 143.5 142.688 143.125 cv
142.688 143.125 li
cp
f
143.938 143.438 mo
143.938 143.063 143.75 142.688 143.5 142.375 cv
143.188 142.125 142.813 141.938 142.438 141.938 cv
142.063 141.938 141.688 142.125 141.375 142.375 cv
141.125 142.688 140.938 143.063 140.938 143.438 cv
140.938 143.813 141.125 144.188 141.375 144.5 cv
141.688 144.75 142.063 144.938 142.438 144.938 cv
142.813 144.938 143.188 144.75 143.5 144.5 cv
143.75 144.188 143.938 143.813 143.938 143.438 cv
143.938 143.438 li
cp
f
145.25 144.063 mo
145.25 143.688 145.063 143.313 144.813 143 cv
144.5 142.75 144.125 142.563 143.75 142.563 cv
143.375 142.563 143 142.75 142.688 143 cv
142.438 143.313 142.25 143.688 142.25 144.063 cv
142.25 144.438 142.438 144.813 142.688 145.125 cv
143 145.375 143.375 145.563 143.75 145.563 cv
144.125 145.563 144.5 145.375 144.813 145.125 cv
145.063 144.813 145.25 144.438 145.25 144.063 cv
145.25 144.063 li
cp
f
146.5 144.125 mo
146.5 143.75 146.313 143.375 146.063 143.063 cv
145.75 142.813 145.375 142.625 145 142.625 cv
144.625 142.625 144.25 142.813 143.938 143.063 cv
143.688 143.375 143.5 143.75 143.5 144.125 cv
143.5 144.5 143.688 144.875 143.938 145.188 cv
144.25 145.438 144.625 145.625 145 145.625 cv
145.375 145.625 145.75 145.438 146.063 145.188 cv
146.313 144.875 146.5 144.5 146.5 144.125 cv
146.5 144.125 li
cp
f
147.75 144.375 mo
147.75 144 147.563 143.625 147.313 143.313 cv
147 143.063 146.625 142.875 146.25 142.875 cv
145.875 142.875 145.5 143.063 145.188 143.313 cv
144.938 143.625 144.75 144 144.75 144.375 cv
144.75 144.75 144.938 145.125 145.188 145.438 cv
145.5 145.688 145.875 145.875 146.25 145.875 cv
146.625 145.875 147 145.688 147.313 145.438 cv
147.563 145.125 147.75 144.75 147.75 144.375 cv
147.75 144.375 li
cp
f
149 147.313 mo
149 146.938 148.813 146.563 148.563 146.25 cv
148.25 146 147.875 145.813 147.5 145.813 cv
147.125 145.813 146.75 146 146.438 146.25 cv
146.188 146.563 146 146.938 146 147.313 cv
146 147.688 146.188 148.063 146.438 148.375 cv
146.75 148.625 147.125 148.813 147.5 148.813 cv
147.875 148.813 148.25 148.625 148.563 148.375 cv
148.813 148.063 149 147.688 149 147.313 cv
149 147.313 li
cp
f
150.25 146.75 mo
150.25 146.375 150.063 146 149.813 145.688 cv
149.5 145.438 149.125 145.25 148.75 145.25 cv
148.375 145.25 148 145.438 147.688 145.688 cv
147.438 146 147.25 146.375 147.25 146.75 cv
147.25 147.125 147.438 147.5 147.688 147.813 cv
148 148.063 148.375 148.25 148.75 148.25 cv
149.125 148.25 149.5 148.063 149.813 147.813 cv
150.063 147.5 150.25 147.125 150.25 146.75 cv
150.25 146.75 li
cp
f
151.5 145.438 mo
151.5 145.063 151.313 144.688 151.063 144.375 cv
150.75 144.125 150.375 143.938 150 143.938 cv
149.625 143.938 149.25 144.125 148.938 144.375 cv
148.688 144.688 148.5 145.063 148.5 145.438 cv
148.5 145.813 148.688 146.188 148.938 146.5 cv
149.25 146.75 149.625 146.938 150 146.938 cv
150.375 146.938 150.75 146.75 151.063 146.5 cv
151.313 146.188 151.5 145.813 151.5 145.438 cv
151.5 145.438 li
cp
f
152.813 145.813 mo
152.813 145.438 152.625 145.063 152.375 144.75 cv
152.063 144.5 151.688 144.313 151.313 144.313 cv
150.938 144.313 150.563 144.5 150.25 144.75 cv
150 145.063 149.813 145.438 149.813 145.813 cv
149.813 146.188 150 146.563 150.25 146.875 cv
150.563 147.125 150.938 147.313 151.313 147.313 cv
151.688 147.313 152.063 147.125 152.375 146.875 cv
152.625 146.563 152.813 146.188 152.813 145.813 cv
152.813 145.813 li
cp
f
154.063 146.625 mo
154.063 146.25 153.875 145.875 153.625 145.563 cv
153.313 145.313 152.938 145.125 152.563 145.125 cv
152.188 145.125 151.813 145.313 151.5 145.563 cv
151.25 145.875 151.063 146.25 151.063 146.625 cv
151.063 147 151.25 147.375 151.5 147.688 cv
151.813 147.938 152.188 148.125 152.563 148.125 cv
152.938 148.125 153.313 147.938 153.625 147.688 cv
153.875 147.375 154.063 147 154.063 146.625 cv
154.063 146.625 li
cp
f
155.313 147.625 mo
155.313 147.25 155.125 146.875 154.875 146.563 cv
154.563 146.313 154.188 146.125 153.813 146.125 cv
153.438 146.125 153.063 146.313 152.75 146.563 cv
152.5 146.875 152.313 147.25 152.313 147.625 cv
152.313 148 152.5 148.375 152.75 148.688 cv
153.063 148.938 153.438 149.125 153.813 149.125 cv
154.188 149.125 154.563 148.938 154.875 148.688 cv
155.125 148.375 155.313 148 155.313 147.625 cv
155.313 147.625 li
cp
f
156.563 148.25 mo
156.563 147.875 156.375 147.5 156.125 147.188 cv
155.813 146.938 155.438 146.75 155.063 146.75 cv
154.688 146.75 154.313 146.938 154 147.188 cv
153.75 147.5 153.563 147.875 153.563 148.25 cv
153.563 148.625 153.75 149 154 149.313 cv
154.313 149.563 154.688 149.75 155.063 149.75 cv
155.438 149.75 155.813 149.563 156.125 149.313 cv
156.375 149 156.563 148.625 156.563 148.25 cv
156.563 148.25 li
cp
f
157.813 147.438 mo
157.813 147.063 157.625 146.688 157.375 146.375 cv
157.063 146.125 156.688 145.938 156.313 145.938 cv
155.938 145.938 155.563 146.125 155.25 146.375 cv
155 146.688 154.813 147.063 154.813 147.438 cv
154.813 147.813 155 148.188 155.25 148.5 cv
155.563 148.75 155.938 148.938 156.313 148.938 cv
156.688 148.938 157.063 148.75 157.375 148.5 cv
157.625 148.188 157.813 147.813 157.813 147.438 cv
157.813 147.438 li
cp
f
159.063 149.438 mo
159.063 149.063 158.875 148.688 158.625 148.375 cv
158.313 148.125 157.938 147.938 157.563 147.938 cv
157.188 147.938 156.813 148.125 156.5 148.375 cv
156.25 148.688 156.063 149.063 156.063 149.438 cv
156.063 149.813 156.25 150.188 156.5 150.5 cv
156.813 150.75 157.188 150.938 157.563 150.938 cv
157.938 150.938 158.313 150.75 158.625 150.5 cv
158.875 150.188 159.063 149.813 159.063 149.438 cv
159.063 149.438 li
cp
f
160.375 149.188 mo
160.375 148.813 160.188 148.438 159.938 148.125 cv
159.625 147.875 159.25 147.688 158.875 147.688 cv
158.5 147.688 158.125 147.875 157.813 148.125 cv
157.563 148.438 157.375 148.813 157.375 149.188 cv
157.375 149.563 157.563 149.938 157.813 150.25 cv
158.125 150.5 158.5 150.688 158.875 150.688 cv
159.25 150.688 159.625 150.5 159.938 150.25 cv
160.188 149.938 160.375 149.563 160.375 149.188 cv
160.375 149.188 li
cp
f
161.625 149.188 mo
161.625 148.813 161.438 148.438 161.188 148.125 cv
160.875 147.875 160.5 147.688 160.125 147.688 cv
159.75 147.688 159.375 147.875 159.063 148.125 cv
158.813 148.438 158.625 148.813 158.625 149.188 cv
158.625 149.563 158.813 149.938 159.063 150.25 cv
159.375 150.5 159.75 150.688 160.125 150.688 cv
160.5 150.688 160.875 150.5 161.188 150.25 cv
161.438 149.938 161.625 149.563 161.625 149.188 cv
161.625 149.188 li
cp
f
162.875 147.188 mo
162.875 146.813 162.688 146.438 162.438 146.125 cv
162.125 145.875 161.75 145.688 161.375 145.688 cv
161 145.688 160.625 145.875 160.313 146.125 cv
160.063 146.438 159.875 146.813 159.875 147.188 cv
159.875 147.563 160.063 147.938 160.313 148.25 cv
160.625 148.5 161 148.688 161.375 148.688 cv
161.75 148.688 162.125 148.5 162.438 148.25 cv
162.688 147.938 162.875 147.563 162.875 147.188 cv
162.875 147.188 li
cp
f
164.125 148.5 mo
164.125 148.125 163.938 147.75 163.688 147.438 cv
163.375 147.188 163 147 162.625 147 cv
162.25 147 161.875 147.188 161.563 147.438 cv
161.313 147.75 161.125 148.125 161.125 148.5 cv
161.125 148.875 161.313 149.25 161.563 149.563 cv
161.875 149.813 162.25 150 162.625 150 cv
163 150 163.375 149.813 163.688 149.563 cv
163.938 149.25 164.125 148.875 164.125 148.5 cv
164.125 148.5 li
cp
f
165.375 149.625 mo
165.375 149.25 165.188 148.875 164.938 148.563 cv
164.625 148.313 164.25 148.125 163.875 148.125 cv
163.5 148.125 163.125 148.313 162.813 148.563 cv
162.563 148.875 162.375 149.25 162.375 149.625 cv
162.375 150 162.563 150.375 162.813 150.688 cv
163.125 150.938 163.5 151.125 163.875 151.125 cv
164.25 151.125 164.625 150.938 164.938 150.688 cv
165.188 150.375 165.375 150 165.375 149.625 cv
165.375 149.625 li
cp
f
166.625 150.188 mo
166.625 149.813 166.438 149.438 166.188 149.125 cv
165.875 148.875 165.5 148.688 165.125 148.688 cv
164.75 148.688 164.375 148.875 164.063 149.125 cv
163.813 149.438 163.625 149.813 163.625 150.188 cv
163.625 150.563 163.813 150.938 164.063 151.25 cv
164.375 151.5 164.75 151.688 165.125 151.688 cv
165.5 151.688 165.875 151.5 166.188 151.25 cv
166.438 150.938 166.625 150.563 166.625 150.188 cv
166.625 150.188 li
cp
f
167.938 150.313 mo
167.938 149.938 167.75 149.563 167.5 149.25 cv
167.188 149 166.813 148.813 166.438 148.813 cv
166.063 148.813 165.688 149 165.375 149.25 cv
165.125 149.563 164.938 149.938 164.938 150.313 cv
164.938 150.688 165.125 151.063 165.375 151.375 cv
165.688 151.625 166.063 151.813 166.438 151.813 cv
166.813 151.813 167.188 151.625 167.5 151.375 cv
167.75 151.063 167.938 150.688 167.938 150.313 cv
167.938 150.313 li
cp
f
169.188 151.438 mo
169.188 151.063 169 150.688 168.75 150.375 cv
168.438 150.125 168.063 149.938 167.688 149.938 cv
167.313 149.938 166.938 150.125 166.625 150.375 cv
166.375 150.688 166.188 151.063 166.188 151.438 cv
166.188 151.813 166.375 152.188 166.625 152.5 cv
166.938 152.75 167.313 152.938 167.688 152.938 cv
168.063 152.938 168.438 152.75 168.75 152.5 cv
169 152.188 169.188 151.813 169.188 151.438 cv
169.188 151.438 li
cp
f
170.438 150.438 mo
170.438 150.063 170.25 149.688 170 149.375 cv
169.688 149.125 169.313 148.938 168.938 148.938 cv
168.563 148.938 168.188 149.125 167.875 149.375 cv
167.625 149.688 167.438 150.063 167.438 150.438 cv
167.438 150.813 167.625 151.188 167.875 151.5 cv
168.188 151.75 168.563 151.938 168.938 151.938 cv
169.313 151.938 169.688 151.75 170 151.5 cv
170.25 151.188 170.438 150.813 170.438 150.438 cv
170.438 150.438 li
cp
f
171.688 150.75 mo
171.688 150.375 171.5 150 171.25 149.688 cv
170.938 149.438 170.563 149.25 170.188 149.25 cv
169.813 149.25 169.438 149.438 169.125 149.688 cv
168.875 150 168.688 150.375 168.688 150.75 cv
168.688 151.125 168.875 151.5 169.125 151.813 cv
169.438 152.063 169.813 152.25 170.188 152.25 cv
170.563 152.25 170.938 152.063 171.25 151.813 cv
171.5 151.5 171.688 151.125 171.688 150.75 cv
171.688 150.75 li
cp
f
172.938 150.125 mo
172.938 149.75 172.75 149.375 172.5 149.063 cv
172.188 148.813 171.813 148.625 171.438 148.625 cv
171.063 148.625 170.688 148.813 170.375 149.063 cv
170.125 149.375 169.938 149.75 169.938 150.125 cv
169.938 150.5 170.125 150.875 170.375 151.188 cv
170.688 151.438 171.063 151.625 171.438 151.625 cv
171.813 151.625 172.188 151.438 172.5 151.188 cv
172.75 150.875 172.938 150.5 172.938 150.125 cv
172.938 150.125 li
cp
f
174.25 151.125 mo
174.25 150.75 174.063 150.375 173.813 150.063 cv
173.5 149.813 173.125 149.625 172.75 149.625 cv
172.375 149.625 172 149.813 171.688 150.063 cv
171.438 150.375 171.25 150.75 171.25 151.125 cv
171.25 151.5 171.438 151.875 171.688 152.188 cv
172 152.438 172.375 152.625 172.75 152.625 cv
173.125 152.625 173.5 152.438 173.813 152.188 cv
174.063 151.875 174.25 151.5 174.25 151.125 cv
174.25 151.125 li
cp
f
175.5 151.25 mo
175.5 150.875 175.313 150.5 175.063 150.188 cv
174.75 149.938 174.375 149.75 174 149.75 cv
173.625 149.75 173.25 149.938 172.938 150.188 cv
172.688 150.5 172.5 150.875 172.5 151.25 cv
172.5 151.625 172.688 152 172.938 152.313 cv
173.25 152.563 173.625 152.75 174 152.75 cv
174.375 152.75 174.75 152.563 175.063 152.313 cv
175.313 152 175.5 151.625 175.5 151.25 cv
175.5 151.25 li
cp
f
176.75 149.75 mo
176.75 149.375 176.563 149 176.313 148.688 cv
176 148.438 175.625 148.25 175.25 148.25 cv
174.875 148.25 174.5 148.438 174.188 148.688 cv
173.938 149 173.75 149.375 173.75 149.75 cv
173.75 150.125 173.938 150.5 174.188 150.813 cv
174.5 151.063 174.875 151.25 175.25 151.25 cv
175.625 151.25 176 151.063 176.313 150.813 cv
176.563 150.5 176.75 150.125 176.75 149.75 cv
176.75 149.75 li
cp
f
178 150.813 mo
178 150.438 177.813 150.063 177.563 149.75 cv
177.25 149.5 176.875 149.313 176.5 149.313 cv
176.125 149.313 175.75 149.5 175.438 149.75 cv
175.188 150.063 175 150.438 175 150.813 cv
175 151.188 175.188 151.563 175.438 151.875 cv
175.75 152.125 176.125 152.313 176.5 152.313 cv
176.875 152.313 177.25 152.125 177.563 151.875 cv
177.813 151.563 178 151.188 178 150.813 cv
178 150.813 li
cp
f
179.25 151.938 mo
179.25 151.563 179.063 151.188 178.813 150.875 cv
178.5 150.625 178.125 150.438 177.75 150.438 cv
177.375 150.438 177 150.625 176.688 150.875 cv
176.438 151.188 176.25 151.563 176.25 151.938 cv
176.25 152.313 176.438 152.688 176.688 153 cv
177 153.25 177.375 153.438 177.75 153.438 cv
178.125 153.438 178.5 153.25 178.813 153 cv
179.063 152.688 179.25 152.313 179.25 151.938 cv
179.25 151.938 li
cp
f
180.5 151.938 mo
180.5 151.563 180.313 151.188 180.063 150.875 cv
179.75 150.625 179.375 150.438 179 150.438 cv
178.625 150.438 178.25 150.625 177.938 150.875 cv
177.688 151.188 177.5 151.563 177.5 151.938 cv
177.5 152.313 177.688 152.688 177.938 153 cv
178.25 153.25 178.625 153.438 179 153.438 cv
179.375 153.438 179.75 153.25 180.063 153 cv
180.313 152.688 180.5 152.313 180.5 151.938 cv
180.5 151.938 li
cp
f
181.813 151.688 mo
181.813 151.313 181.625 150.938 181.375 150.625 cv
181.063 150.375 180.688 150.188 180.313 150.188 cv
179.938 150.188 179.563 150.375 179.25 150.625 cv
179 150.938 178.813 151.313 178.813 151.688 cv
178.813 152.063 179 152.438 179.25 152.75 cv
179.563 153 179.938 153.188 180.313 153.188 cv
180.688 153.188 181.063 153 181.375 152.75 cv
181.625 152.438 181.813 152.063 181.813 151.688 cv
181.813 151.688 li
cp
f
183.063 152.688 mo
183.063 152.313 182.875 151.938 182.625 151.625 cv
182.313 151.375 181.938 151.188 181.563 151.188 cv
181.188 151.188 180.813 151.375 180.5 151.625 cv
180.25 151.938 180.063 152.313 180.063 152.688 cv
180.063 153.063 180.25 153.438 180.5 153.75 cv
180.813 154 181.188 154.188 181.563 154.188 cv
181.938 154.188 182.313 154 182.625 153.75 cv
182.875 153.438 183.063 153.063 183.063 152.688 cv
183.063 152.688 li
cp
f
184.313 150.75 mo
184.313 150.375 184.125 150 183.875 149.688 cv
183.563 149.438 183.188 149.25 182.813 149.25 cv
182.438 149.25 182.063 149.438 181.75 149.688 cv
181.5 150 181.313 150.375 181.313 150.75 cv
181.313 151.125 181.5 151.5 181.75 151.813 cv
182.063 152.063 182.438 152.25 182.813 152.25 cv
183.188 152.25 183.563 152.063 183.875 151.813 cv
184.125 151.5 184.313 151.125 184.313 150.75 cv
184.313 150.75 li
cp
f
185.563 153.063 mo
185.563 152.688 185.375 152.313 185.125 152 cv
184.813 151.75 184.438 151.563 184.063 151.563 cv
183.688 151.563 183.313 151.75 183 152 cv
182.75 152.313 182.563 152.688 182.563 153.063 cv
182.563 153.438 182.75 153.813 183 154.125 cv
183.313 154.375 183.688 154.563 184.063 154.563 cv
184.438 154.563 184.813 154.375 185.125 154.125 cv
185.375 153.813 185.563 153.438 185.563 153.063 cv
185.563 153.063 li
cp
f
186.813 152.75 mo
186.813 152.375 186.625 152 186.375 151.688 cv
186.063 151.438 185.688 151.25 185.313 151.25 cv
184.938 151.25 184.563 151.438 184.25 151.688 cv
184 152 183.813 152.375 183.813 152.75 cv
183.813 153.125 184 153.5 184.25 153.813 cv
184.563 154.063 184.938 154.25 185.313 154.25 cv
185.688 154.25 186.063 154.063 186.375 153.813 cv
186.625 153.5 186.813 153.125 186.813 152.75 cv
186.813 152.75 li
cp
f
188.063 153.063 mo
188.063 152.688 187.875 152.313 187.625 152 cv
187.313 151.75 186.938 151.563 186.563 151.563 cv
186.188 151.563 185.813 151.75 185.5 152 cv
185.25 152.313 185.063 152.688 185.063 153.063 cv
185.063 153.438 185.25 153.813 185.5 154.125 cv
185.813 154.375 186.188 154.563 186.563 154.563 cv
186.938 154.563 187.313 154.375 187.625 154.125 cv
187.875 153.813 188.063 153.438 188.063 153.063 cv
188.063 153.063 li
cp
f
189.375 153.313 mo
189.375 152.938 189.188 152.563 188.938 152.25 cv
188.625 152 188.25 151.813 187.875 151.813 cv
187.5 151.813 187.125 152 186.813 152.25 cv
186.563 152.563 186.375 152.938 186.375 153.313 cv
186.375 153.688 186.563 154.063 186.813 154.375 cv
187.125 154.625 187.5 154.813 187.875 154.813 cv
188.25 154.813 188.625 154.625 188.938 154.375 cv
189.188 154.063 189.375 153.688 189.375 153.313 cv
189.375 153.313 li
cp
f
190.625 153.063 mo
190.625 152.688 190.438 152.313 190.188 152 cv
189.875 151.75 189.5 151.563 189.125 151.563 cv
188.75 151.563 188.375 151.75 188.063 152 cv
187.813 152.313 187.625 152.688 187.625 153.063 cv
187.625 153.438 187.813 153.813 188.063 154.125 cv
188.375 154.375 188.75 154.563 189.125 154.563 cv
189.5 154.563 189.875 154.375 190.188 154.125 cv
190.438 153.813 190.625 153.438 190.625 153.063 cv
190.625 153.063 li
cp
f
191.875 153.75 mo
191.875 153.375 191.688 153 191.438 152.688 cv
191.125 152.438 190.75 152.25 190.375 152.25 cv
190 152.25 189.625 152.438 189.313 152.688 cv
189.063 153 188.875 153.375 188.875 153.75 cv
188.875 154.125 189.063 154.5 189.313 154.813 cv
189.625 155.063 190 155.25 190.375 155.25 cv
190.75 155.25 191.125 155.063 191.438 154.813 cv
191.688 154.5 191.875 154.125 191.875 153.75 cv
191.875 153.75 li
cp
f
193.125 153.875 mo
193.125 153.5 192.938 153.125 192.688 152.813 cv
192.375 152.563 192 152.375 191.625 152.375 cv
191.25 152.375 190.875 152.563 190.563 152.813 cv
190.313 153.125 190.125 153.5 190.125 153.875 cv
190.125 154.25 190.313 154.625 190.563 154.938 cv
190.875 155.188 191.25 155.375 191.625 155.375 cv
192 155.375 192.375 155.188 192.688 154.938 cv
192.938 154.625 193.125 154.25 193.125 153.875 cv
193.125 153.875 li
cp
f
194.375 153.313 mo
194.375 152.938 194.188 152.563 193.938 152.25 cv
193.625 152 193.25 151.813 192.875 151.813 cv
192.5 151.813 192.125 152 191.813 152.25 cv
191.563 152.563 191.375 152.938 191.375 153.313 cv
191.375 153.688 191.563 154.063 191.813 154.375 cv
192.125 154.625 192.5 154.813 192.875 154.813 cv
193.25 154.813 193.625 154.625 193.938 154.375 cv
194.188 154.063 194.375 153.688 194.375 153.313 cv
194.375 153.313 li
cp
f
195.625 154.5 mo
195.625 154.125 195.438 153.75 195.188 153.438 cv
194.875 153.188 194.5 153 194.125 153 cv
193.75 153 193.375 153.188 193.063 153.438 cv
192.813 153.75 192.625 154.125 192.625 154.5 cv
192.625 154.875 192.813 155.25 193.063 155.563 cv
193.375 155.813 193.75 156 194.125 156 cv
194.5 156 194.875 155.813 195.188 155.563 cv
195.438 155.25 195.625 154.875 195.625 154.5 cv
195.625 154.5 li
cp
f
196.938 153.125 mo
196.938 152.75 196.75 152.375 196.5 152.063 cv
196.188 151.813 195.813 151.625 195.438 151.625 cv
195.063 151.625 194.688 151.813 194.375 152.063 cv
194.125 152.375 193.938 152.75 193.938 153.125 cv
193.938 153.5 194.125 153.875 194.375 154.188 cv
194.688 154.438 195.063 154.625 195.438 154.625 cv
195.813 154.625 196.188 154.438 196.5 154.188 cv
196.75 153.875 196.938 153.5 196.938 153.125 cv
196.938 153.125 li
cp
f
198.188 153.75 mo
198.188 153.375 198 153 197.75 152.688 cv
197.438 152.438 197.063 152.25 196.688 152.25 cv
196.313 152.25 195.938 152.438 195.625 152.688 cv
195.375 153 195.188 153.375 195.188 153.75 cv
195.188 154.125 195.375 154.5 195.625 154.813 cv
195.938 155.063 196.313 155.25 196.688 155.25 cv
197.063 155.25 197.438 155.063 197.75 154.813 cv
198 154.5 198.188 154.125 198.188 153.75 cv
198.188 153.75 li
cp
f
199.438 153.313 mo
199.438 152.938 199.25 152.563 199 152.25 cv
198.688 152 198.313 151.813 197.938 151.813 cv
197.563 151.813 197.188 152 196.875 152.25 cv
196.625 152.563 196.438 152.938 196.438 153.313 cv
196.438 153.688 196.625 154.063 196.875 154.375 cv
197.188 154.625 197.563 154.813 197.938 154.813 cv
198.313 154.813 198.688 154.625 199 154.375 cv
199.25 154.063 199.438 153.688 199.438 153.313 cv
199.438 153.313 li
cp
f
200.688 153.813 mo
200.688 153.438 200.5 153.063 200.25 152.75 cv
199.938 152.5 199.563 152.313 199.188 152.313 cv
198.813 152.313 198.438 152.5 198.125 152.75 cv
197.875 153.063 197.688 153.438 197.688 153.813 cv
197.688 154.188 197.875 154.563 198.125 154.875 cv
198.438 155.125 198.813 155.313 199.188 155.313 cv
199.563 155.313 199.938 155.125 200.25 154.875 cv
200.5 154.563 200.688 154.188 200.688 153.813 cv
200.688 153.813 li
cp
f
201.938 154.813 mo
201.938 154.438 201.75 154.063 201.5 153.75 cv
201.188 153.5 200.813 153.313 200.438 153.313 cv
200.063 153.313 199.688 153.5 199.375 153.75 cv
199.125 154.063 198.938 154.438 198.938 154.813 cv
198.938 155.188 199.125 155.563 199.375 155.875 cv
199.688 156.125 200.063 156.313 200.438 156.313 cv
200.813 156.313 201.188 156.125 201.5 155.875 cv
201.75 155.563 201.938 155.188 201.938 154.813 cv
201.938 154.813 li
cp
f
203.188 154.688 mo
203.188 154.313 203 153.938 202.75 153.625 cv
202.438 153.375 202.063 153.188 201.688 153.188 cv
201.313 153.188 200.938 153.375 200.625 153.625 cv
200.375 153.938 200.188 154.313 200.188 154.688 cv
200.188 155.063 200.375 155.438 200.625 155.75 cv
200.938 156 201.313 156.188 201.688 156.188 cv
202.063 156.188 202.438 156 202.75 155.75 cv
203 155.438 203.188 155.063 203.188 154.688 cv
203.188 154.688 li
cp
f
204.5 154.813 mo
204.5 154.438 204.313 154.063 204.063 153.75 cv
203.75 153.5 203.375 153.313 203 153.313 cv
202.625 153.313 202.25 153.5 201.938 153.75 cv
201.688 154.063 201.5 154.438 201.5 154.813 cv
201.5 155.188 201.688 155.563 201.938 155.875 cv
202.25 156.125 202.625 156.313 203 156.313 cv
203.375 156.313 203.75 156.125 204.063 155.875 cv
204.313 155.563 204.5 155.188 204.5 154.813 cv
204.5 154.813 li
cp
f
205.75 154.438 mo
205.75 154.063 205.563 153.688 205.313 153.375 cv
205 153.125 204.625 152.938 204.25 152.938 cv
203.875 152.938 203.5 153.125 203.188 153.375 cv
202.938 153.688 202.75 154.063 202.75 154.438 cv
202.75 154.813 202.938 155.188 203.188 155.5 cv
203.5 155.75 203.875 155.938 204.25 155.938 cv
204.625 155.938 205 155.75 205.313 155.5 cv
205.563 155.188 205.75 154.813 205.75 154.438 cv
205.75 154.438 li
cp
f
207 154.563 mo
207 154.188 206.813 153.813 206.563 153.5 cv
206.25 153.25 205.875 153.063 205.5 153.063 cv
205.125 153.063 204.75 153.25 204.438 153.5 cv
204.188 153.813 204 154.188 204 154.563 cv
204 154.938 204.188 155.313 204.438 155.625 cv
204.75 155.875 205.125 156.063 205.5 156.063 cv
205.875 156.063 206.25 155.875 206.563 155.625 cv
206.813 155.313 207 154.938 207 154.563 cv
207 154.563 li
cp
f
208.25 154.75 mo
208.25 154.375 208.063 154 207.813 153.688 cv
207.5 153.438 207.125 153.25 206.75 153.25 cv
206.375 153.25 206 153.438 205.688 153.688 cv
205.438 154 205.25 154.375 205.25 154.75 cv
205.25 155.125 205.438 155.5 205.688 155.813 cv
206 156.063 206.375 156.25 206.75 156.25 cv
207.125 156.25 207.5 156.063 207.813 155.813 cv
208.063 155.5 208.25 155.125 208.25 154.75 cv
208.25 154.75 li
cp
f
209.5 154.438 mo
209.5 154.063 209.313 153.688 209.063 153.375 cv
208.75 153.125 208.375 152.938 208 152.938 cv
207.625 152.938 207.25 153.125 206.938 153.375 cv
206.688 153.688 206.5 154.063 206.5 154.438 cv
206.5 154.813 206.688 155.188 206.938 155.5 cv
207.25 155.75 207.625 155.938 208 155.938 cv
208.375 155.938 208.75 155.75 209.063 155.5 cv
209.313 155.188 209.5 154.813 209.5 154.438 cv
209.5 154.438 li
cp
f
210.75 154.563 mo
210.75 154.188 210.563 153.813 210.313 153.5 cv
210 153.25 209.625 153.063 209.25 153.063 cv
208.875 153.063 208.5 153.25 208.188 153.5 cv
207.938 153.813 207.75 154.188 207.75 154.563 cv
207.75 154.938 207.938 155.313 208.188 155.625 cv
208.5 155.875 208.875 156.063 209.25 156.063 cv
209.625 156.063 210 155.875 210.313 155.625 cv
210.563 155.313 210.75 154.938 210.75 154.563 cv
210.75 154.563 li
cp
f
212.063 154.75 mo
212.063 154.375 211.875 154 211.625 153.688 cv
211.313 153.438 210.938 153.25 210.563 153.25 cv
210.188 153.25 209.813 153.438 209.5 153.688 cv
209.25 154 209.063 154.375 209.063 154.75 cv
209.063 155.125 209.25 155.5 209.5 155.813 cv
209.813 156.063 210.188 156.25 210.563 156.25 cv
210.938 156.25 211.313 156.063 211.625 155.813 cv
211.875 155.5 212.063 155.125 212.063 154.75 cv
212.063 154.75 li
cp
f
213.313 155.25 mo
213.313 154.875 213.125 154.5 212.875 154.188 cv
212.563 153.938 212.188 153.75 211.813 153.75 cv
211.438 153.75 211.063 153.938 210.75 154.188 cv
210.5 154.5 210.313 154.875 210.313 155.25 cv
210.313 155.625 210.5 156 210.75 156.313 cv
211.063 156.563 211.438 156.75 211.813 156.75 cv
212.188 156.75 212.563 156.563 212.875 156.313 cv
213.125 156 213.313 155.625 213.313 155.25 cv
213.313 155.25 li
cp
f
214.563 154.75 mo
214.563 154.375 214.375 154 214.125 153.688 cv
213.813 153.438 213.438 153.25 213.063 153.25 cv
212.688 153.25 212.313 153.438 212 153.688 cv
211.75 154 211.563 154.375 211.563 154.75 cv
211.563 155.125 211.75 155.5 212 155.813 cv
212.313 156.063 212.688 156.25 213.063 156.25 cv
213.438 156.25 213.813 156.063 214.125 155.813 cv
214.375 155.5 214.563 155.125 214.563 154.75 cv
214.563 154.75 li
cp
f
215.813 154.75 mo
215.813 154.375 215.625 154 215.375 153.688 cv
215.063 153.438 214.688 153.25 214.313 153.25 cv
213.938 153.25 213.563 153.438 213.25 153.688 cv
213 154 212.813 154.375 212.813 154.75 cv
212.813 155.125 213 155.5 213.25 155.813 cv
213.563 156.063 213.938 156.25 214.313 156.25 cv
214.688 156.25 215.063 156.063 215.375 155.813 cv
215.625 155.5 215.813 155.125 215.813 154.75 cv
215.813 154.75 li
cp
f
217.063 154.688 mo
217.063 154.313 216.875 153.938 216.625 153.625 cv
216.313 153.375 215.938 153.188 215.563 153.188 cv
215.188 153.188 214.813 153.375 214.5 153.625 cv
214.25 153.938 214.063 154.313 214.063 154.688 cv
214.063 155.063 214.25 155.438 214.5 155.75 cv
214.813 156 215.188 156.188 215.563 156.188 cv
215.938 156.188 216.313 156 216.625 155.75 cv
216.875 155.438 217.063 155.063 217.063 154.688 cv
217.063 154.688 li
cp
f
218.313 155.25 mo
218.313 154.875 218.125 154.5 217.875 154.188 cv
217.563 153.938 217.188 153.75 216.813 153.75 cv
216.438 153.75 216.063 153.938 215.75 154.188 cv
215.5 154.5 215.313 154.875 215.313 155.25 cv
215.313 155.625 215.5 156 215.75 156.313 cv
216.063 156.563 216.438 156.75 216.813 156.75 cv
217.188 156.75 217.563 156.563 217.875 156.313 cv
218.125 156 218.313 155.625 218.313 155.25 cv
218.313 155.25 li
cp
f
219.625 155.688 mo
219.625 155.313 219.438 154.938 219.188 154.625 cv
218.875 154.375 218.5 154.188 218.125 154.188 cv
217.75 154.188 217.375 154.375 217.063 154.625 cv
216.813 154.938 216.625 155.313 216.625 155.688 cv
216.625 156.063 216.813 156.438 217.063 156.75 cv
217.375 157 217.75 157.188 218.125 157.188 cv
218.5 157.188 218.875 157 219.188 156.75 cv
219.438 156.438 219.625 156.063 219.625 155.688 cv
219.625 155.688 li
cp
f
220.875 155.188 mo
220.875 154.813 220.688 154.438 220.438 154.125 cv
220.125 153.875 219.75 153.688 219.375 153.688 cv
219 153.688 218.625 153.875 218.313 154.125 cv
218.063 154.438 217.875 154.813 217.875 155.188 cv
217.875 155.563 218.063 155.938 218.313 156.25 cv
218.625 156.5 219 156.688 219.375 156.688 cv
219.75 156.688 220.125 156.5 220.438 156.25 cv
220.688 155.938 220.875 155.563 220.875 155.188 cv
220.875 155.188 li
cp
f
222.125 154.75 mo
222.125 154.375 221.938 154 221.688 153.688 cv
221.375 153.438 221 153.25 220.625 153.25 cv
220.25 153.25 219.875 153.438 219.563 153.688 cv
219.313 154 219.125 154.375 219.125 154.75 cv
219.125 155.125 219.313 155.5 219.563 155.813 cv
219.875 156.063 220.25 156.25 220.625 156.25 cv
221 156.25 221.375 156.063 221.688 155.813 cv
221.938 155.5 222.125 155.125 222.125 154.75 cv
222.125 154.75 li
cp
f
223.375 155.25 mo
223.375 154.875 223.188 154.5 222.938 154.188 cv
222.625 153.938 222.25 153.75 221.875 153.75 cv
221.5 153.75 221.125 153.938 220.813 154.188 cv
220.563 154.5 220.375 154.875 220.375 155.25 cv
220.375 155.625 220.563 156 220.813 156.313 cv
221.125 156.563 221.5 156.75 221.875 156.75 cv
222.25 156.75 222.625 156.563 222.938 156.313 cv
223.188 156 223.375 155.625 223.375 155.25 cv
223.375 155.25 li
cp
f
224.625 155.25 mo
224.625 154.875 224.438 154.5 224.188 154.188 cv
223.875 153.938 223.5 153.75 223.125 153.75 cv
222.75 153.75 222.375 153.938 222.063 154.188 cv
221.813 154.5 221.625 154.875 221.625 155.25 cv
221.625 155.625 221.813 156 222.063 156.313 cv
222.375 156.563 222.75 156.75 223.125 156.75 cv
223.5 156.75 223.875 156.563 224.188 156.313 cv
224.438 156 224.625 155.625 224.625 155.25 cv
224.625 155.25 li
cp
f
225.938 154.75 mo
225.938 154.375 225.75 154 225.5 153.688 cv
225.188 153.438 224.813 153.25 224.438 153.25 cv
224.063 153.25 223.688 153.438 223.375 153.688 cv
223.125 154 222.938 154.375 222.938 154.75 cv
222.938 155.125 223.125 155.5 223.375 155.813 cv
223.688 156.063 224.063 156.25 224.438 156.25 cv
224.813 156.25 225.188 156.063 225.5 155.813 cv
225.75 155.5 225.938 155.125 225.938 154.75 cv
225.938 154.75 li
cp
f
227.188 154.938 mo
227.188 154.563 227 154.188 226.75 153.875 cv
226.438 153.625 226.063 153.438 225.688 153.438 cv
225.313 153.438 224.938 153.625 224.625 153.875 cv
224.375 154.188 224.188 154.563 224.188 154.938 cv
224.188 155.313 224.375 155.688 224.625 156 cv
224.938 156.25 225.313 156.438 225.688 156.438 cv
226.063 156.438 226.438 156.25 226.75 156 cv
227 155.688 227.188 155.313 227.188 154.938 cv
227.188 154.938 li
cp
f
228.438 155.75 mo
228.438 155.375 228.25 155 228 154.688 cv
227.688 154.438 227.313 154.25 226.938 154.25 cv
226.563 154.25 226.188 154.438 225.875 154.688 cv
225.625 155 225.438 155.375 225.438 155.75 cv
225.438 156.125 225.625 156.5 225.875 156.813 cv
226.188 157.063 226.563 157.25 226.938 157.25 cv
227.313 157.25 227.688 157.063 228 156.813 cv
228.25 156.5 228.438 156.125 228.438 155.75 cv
228.438 155.75 li
cp
f
229.688 154.938 mo
229.688 154.563 229.5 154.188 229.25 153.875 cv
228.938 153.625 228.563 153.438 228.188 153.438 cv
227.813 153.438 227.438 153.625 227.125 153.875 cv
226.875 154.188 226.688 154.563 226.688 154.938 cv
226.688 155.313 226.875 155.688 227.125 156 cv
227.438 156.25 227.813 156.438 228.188 156.438 cv
228.563 156.438 228.938 156.25 229.25 156 cv
229.5 155.688 229.688 155.313 229.688 154.938 cv
229.688 154.938 li
cp
f
230.938 155.375 mo
230.938 155 230.75 154.625 230.5 154.313 cv
230.188 154.063 229.813 153.875 229.438 153.875 cv
229.063 153.875 228.688 154.063 228.375 154.313 cv
228.125 154.625 227.938 155 227.938 155.375 cv
227.938 155.75 228.125 156.125 228.375 156.438 cv
228.688 156.688 229.063 156.875 229.438 156.875 cv
229.813 156.875 230.188 156.688 230.5 156.438 cv
230.75 156.125 230.938 155.75 230.938 155.375 cv
230.938 155.375 li
cp
f
232.188 156.125 mo
232.188 155.75 232 155.375 231.75 155.063 cv
231.438 154.813 231.063 154.625 230.688 154.625 cv
230.313 154.625 229.938 154.813 229.625 155.063 cv
229.375 155.375 229.188 155.75 229.188 156.125 cv
229.188 156.5 229.375 156.875 229.625 157.188 cv
229.938 157.438 230.313 157.625 230.688 157.625 cv
231.063 157.625 231.438 157.438 231.75 157.188 cv
232 156.875 232.188 156.5 232.188 156.125 cv
232.188 156.125 li
cp
f
233.5 155.875 mo
233.5 155.5 233.313 155.125 233.063 154.813 cv
232.75 154.563 232.375 154.375 232 154.375 cv
231.625 154.375 231.25 154.563 230.938 154.813 cv
230.688 155.125 230.5 155.5 230.5 155.875 cv
230.5 156.25 230.688 156.625 230.938 156.938 cv
231.25 157.188 231.625 157.375 232 157.375 cv
232.375 157.375 232.75 157.188 233.063 156.938 cv
233.313 156.625 233.5 156.25 233.5 155.875 cv
233.5 155.875 li
cp
f
234.75 155.5 mo
234.75 155.125 234.563 154.75 234.313 154.438 cv
234 154.188 233.625 154 233.25 154 cv
232.875 154 232.5 154.188 232.188 154.438 cv
231.938 154.75 231.75 155.125 231.75 155.5 cv
231.75 155.875 231.938 156.25 232.188 156.563 cv
232.5 156.813 232.875 157 233.25 157 cv
233.625 157 234 156.813 234.313 156.563 cv
234.563 156.25 234.75 155.875 234.75 155.5 cv
234.75 155.5 li
cp
f
236 155 mo
236 154.625 235.813 154.25 235.563 153.938 cv
235.25 153.688 234.875 153.5 234.5 153.5 cv
234.125 153.5 233.75 153.688 233.438 153.938 cv
233.188 154.25 233 154.625 233 155 cv
233 155.375 233.188 155.75 233.438 156.063 cv
233.75 156.313 234.125 156.5 234.5 156.5 cv
234.875 156.5 235.25 156.313 235.563 156.063 cv
235.813 155.75 236 155.375 236 155 cv
236 155 li
cp
f
237.25 155.375 mo
237.25 155 237.063 154.625 236.813 154.313 cv
236.5 154.063 236.125 153.875 235.75 153.875 cv
235.375 153.875 235 154.063 234.688 154.313 cv
234.438 154.625 234.25 155 234.25 155.375 cv
234.25 155.75 234.438 156.125 234.688 156.438 cv
235 156.688 235.375 156.875 235.75 156.875 cv
236.125 156.875 236.5 156.688 236.813 156.438 cv
237.063 156.125 237.25 155.75 237.25 155.375 cv
237.25 155.375 li
cp
f
238.5 155.25 mo
238.5 154.875 238.313 154.5 238.063 154.188 cv
237.75 153.938 237.375 153.75 237 153.75 cv
236.625 153.75 236.25 153.938 235.938 154.188 cv
235.688 154.5 235.5 154.875 235.5 155.25 cv
235.5 155.625 235.688 156 235.938 156.313 cv
236.25 156.563 236.625 156.75 237 156.75 cv
237.375 156.75 237.75 156.563 238.063 156.313 cv
238.313 156 238.5 155.625 238.5 155.25 cv
238.5 155.25 li
cp
f
239.75 156.125 mo
239.75 155.75 239.563 155.375 239.313 155.063 cv
239 154.813 238.625 154.625 238.25 154.625 cv
237.875 154.625 237.5 154.813 237.188 155.063 cv
236.938 155.375 236.75 155.75 236.75 156.125 cv
236.75 156.5 236.938 156.875 237.188 157.188 cv
237.5 157.438 237.875 157.625 238.25 157.625 cv
238.625 157.625 239 157.438 239.313 157.188 cv
239.563 156.875 239.75 156.5 239.75 156.125 cv
239.75 156.125 li
cp
f
241.063 155.75 mo
241.063 155.375 240.875 155 240.625 154.688 cv
240.313 154.438 239.938 154.25 239.563 154.25 cv
239.188 154.25 238.813 154.438 238.5 154.688 cv
238.25 155 238.063 155.375 238.063 155.75 cv
238.063 156.125 238.25 156.5 238.5 156.813 cv
238.813 157.063 239.188 157.25 239.563 157.25 cv
239.938 157.25 240.313 157.063 240.625 156.813 cv
240.875 156.5 241.063 156.125 241.063 155.75 cv
241.063 155.75 li
cp
f
242.313 155.25 mo
242.313 154.875 242.125 154.5 241.875 154.188 cv
241.563 153.938 241.188 153.75 240.813 153.75 cv
240.438 153.75 240.063 153.938 239.75 154.188 cv
239.5 154.5 239.313 154.875 239.313 155.25 cv
239.313 155.625 239.5 156 239.75 156.313 cv
240.063 156.563 240.438 156.75 240.813 156.75 cv
241.188 156.75 241.563 156.563 241.875 156.313 cv
242.125 156 242.313 155.625 242.313 155.25 cv
242.313 155.25 li
cp
f
243.563 155.75 mo
243.563 155.375 243.375 155 243.125 154.688 cv
242.813 154.438 242.438 154.25 242.063 154.25 cv
241.688 154.25 241.313 154.438 241 154.688 cv
240.75 155 240.563 155.375 240.563 155.75 cv
240.563 156.125 240.75 156.5 241 156.813 cv
241.313 157.063 241.688 157.25 242.063 157.25 cv
242.438 157.25 242.813 157.063 243.125 156.813 cv
243.375 156.5 243.563 156.125 243.563 155.75 cv
243.563 155.75 li
cp
f
244.813 155.5 mo
244.813 155.125 244.625 154.75 244.375 154.438 cv
244.063 154.188 243.688 154 243.313 154 cv
242.938 154 242.563 154.188 242.25 154.438 cv
242 154.75 241.813 155.125 241.813 155.5 cv
241.813 155.875 242 156.25 242.25 156.563 cv
242.563 156.813 242.938 157 243.313 157 cv
243.688 157 244.063 156.813 244.375 156.563 cv
244.625 156.25 244.813 155.875 244.813 155.5 cv
244.813 155.5 li
cp
f
246.063 155.938 mo
246.063 155.563 245.875 155.188 245.625 154.875 cv
245.313 154.625 244.938 154.438 244.563 154.438 cv
244.188 154.438 243.813 154.625 243.5 154.875 cv
243.25 155.188 243.063 155.563 243.063 155.938 cv
243.063 156.313 243.25 156.688 243.5 157 cv
243.813 157.25 244.188 157.438 244.563 157.438 cv
244.938 157.438 245.313 157.25 245.625 157 cv
245.875 156.688 246.063 156.313 246.063 155.938 cv
246.063 155.938 li
cp
f
247.313 155.25 mo
247.313 154.875 247.125 154.5 246.875 154.188 cv
246.563 153.938 246.188 153.75 245.813 153.75 cv
245.438 153.75 245.063 153.938 244.75 154.188 cv
244.5 154.5 244.313 154.875 244.313 155.25 cv
244.313 155.625 244.5 156 244.75 156.313 cv
245.063 156.563 245.438 156.75 245.813 156.75 cv
246.188 156.75 246.563 156.563 246.875 156.313 cv
247.125 156 247.313 155.625 247.313 155.25 cv
247.313 155.25 li
cp
f
248.625 155.25 mo
248.625 154.875 248.438 154.5 248.188 154.188 cv
247.875 153.938 247.5 153.75 247.125 153.75 cv
246.75 153.75 246.375 153.938 246.063 154.188 cv
245.813 154.5 245.625 154.875 245.625 155.25 cv
245.625 155.625 245.813 156 246.063 156.313 cv
246.375 156.563 246.75 156.75 247.125 156.75 cv
247.5 156.75 247.875 156.563 248.188 156.313 cv
248.438 156 248.625 155.625 248.625 155.25 cv
248.625 155.25 li
cp
f
249.875 155.688 mo
249.875 155.313 249.688 154.938 249.438 154.625 cv
249.125 154.375 248.75 154.188 248.375 154.188 cv
248 154.188 247.625 154.375 247.313 154.625 cv
247.063 154.938 246.875 155.313 246.875 155.688 cv
246.875 156.063 247.063 156.438 247.313 156.75 cv
247.625 157 248 157.188 248.375 157.188 cv
248.75 157.188 249.125 157 249.438 156.75 cv
249.688 156.438 249.875 156.063 249.875 155.688 cv
249.875 155.688 li
cp
f
251.125 156.125 mo
251.125 155.75 250.938 155.375 250.688 155.063 cv
250.375 154.813 250 154.625 249.625 154.625 cv
249.25 154.625 248.875 154.813 248.563 155.063 cv
248.313 155.375 248.125 155.75 248.125 156.125 cv
248.125 156.5 248.313 156.875 248.563 157.188 cv
248.875 157.438 249.25 157.625 249.625 157.625 cv
250 157.625 250.375 157.438 250.688 157.188 cv
250.938 156.875 251.125 156.5 251.125 156.125 cv
251.125 156.125 li
cp
f
252.375 156.063 mo
252.375 155.688 252.188 155.313 251.938 155 cv
251.625 154.75 251.25 154.563 250.875 154.563 cv
250.5 154.563 250.125 154.75 249.813 155 cv
249.563 155.313 249.375 155.688 249.375 156.063 cv
249.375 156.438 249.563 156.813 249.813 157.125 cv
250.125 157.375 250.5 157.563 250.875 157.563 cv
251.25 157.563 251.625 157.375 251.938 157.125 cv
252.188 156.813 252.375 156.438 252.375 156.063 cv
252.375 156.063 li
cp
f
253.625 156.063 mo
253.625 155.688 253.438 155.313 253.188 155 cv
252.875 154.75 252.5 154.563 252.125 154.563 cv
251.75 154.563 251.375 154.75 251.063 155 cv
250.813 155.313 250.625 155.688 250.625 156.063 cv
250.625 156.438 250.813 156.813 251.063 157.125 cv
251.375 157.375 251.75 157.563 252.125 157.563 cv
252.5 157.563 252.875 157.375 253.188 157.125 cv
253.438 156.813 253.625 156.438 253.625 156.063 cv
253.625 156.063 li
cp
f
254.875 155.938 mo
254.875 155.563 254.688 155.188 254.438 154.875 cv
254.125 154.625 253.75 154.438 253.375 154.438 cv
253 154.438 252.625 154.625 252.313 154.875 cv
252.063 155.188 251.875 155.563 251.875 155.938 cv
251.875 156.313 252.063 156.688 252.313 157 cv
252.625 157.25 253 157.438 253.375 157.438 cv
253.75 157.438 254.125 157.25 254.438 157 cv
254.688 156.688 254.875 156.313 254.875 155.938 cv
254.875 155.938 li
cp
f
256.188 155.75 mo
256.188 155.375 256 155 255.75 154.688 cv
255.438 154.438 255.063 154.25 254.688 154.25 cv
254.313 154.25 253.938 154.438 253.625 154.688 cv
253.375 155 253.188 155.375 253.188 155.75 cv
253.188 156.125 253.375 156.5 253.625 156.813 cv
253.938 157.063 254.313 157.25 254.688 157.25 cv
255.063 157.25 255.438 157.063 255.75 156.813 cv
256 156.5 256.188 156.125 256.188 155.75 cv
256.188 155.75 li
cp
f
257.438 155.938 mo
257.438 155.563 257.25 155.188 257 154.875 cv
256.688 154.625 256.313 154.438 255.938 154.438 cv
255.563 154.438 255.188 154.625 254.875 154.875 cv
254.625 155.188 254.438 155.563 254.438 155.938 cv
254.438 156.313 254.625 156.688 254.875 157 cv
255.188 157.25 255.563 157.438 255.938 157.438 cv
256.313 157.438 256.688 157.25 257 157 cv
257.25 156.688 257.438 156.313 257.438 155.938 cv
257.438 155.938 li
cp
f
258.688 155.75 mo
258.688 155.375 258.5 155 258.25 154.688 cv
257.938 154.438 257.563 154.25 257.188 154.25 cv
256.813 154.25 256.438 154.438 256.125 154.688 cv
255.875 155 255.688 155.375 255.688 155.75 cv
255.688 156.125 255.875 156.5 256.125 156.813 cv
256.438 157.063 256.813 157.25 257.188 157.25 cv
257.563 157.25 257.938 157.063 258.25 156.813 cv
258.5 156.5 258.688 156.125 258.688 155.75 cv
258.688 155.75 li
cp
f
259.938 156.125 mo
259.938 155.75 259.75 155.375 259.5 155.063 cv
259.188 154.813 258.813 154.625 258.438 154.625 cv
258.063 154.625 257.688 154.813 257.375 155.063 cv
257.125 155.375 256.938 155.75 256.938 156.125 cv
256.938 156.5 257.125 156.875 257.375 157.188 cv
257.688 157.438 258.063 157.625 258.438 157.625 cv
258.813 157.625 259.188 157.438 259.5 157.188 cv
259.75 156.875 259.938 156.5 259.938 156.125 cv
259.938 156.125 li
cp
f
261.188 156.063 mo
261.188 155.688 261 155.313 260.75 155 cv
260.438 154.75 260.063 154.563 259.688 154.563 cv
259.313 154.563 258.938 154.75 258.625 155 cv
258.375 155.313 258.188 155.688 258.188 156.063 cv
258.188 156.438 258.375 156.813 258.625 157.125 cv
258.938 157.375 259.313 157.563 259.688 157.563 cv
260.063 157.563 260.438 157.375 260.75 157.125 cv
261 156.813 261.188 156.438 261.188 156.063 cv
261.188 156.063 li
cp
f
262.438 155.938 mo
262.438 155.563 262.25 155.188 262 154.875 cv
261.688 154.625 261.313 154.438 260.938 154.438 cv
260.563 154.438 260.188 154.625 259.875 154.875 cv
259.625 155.188 259.438 155.563 259.438 155.938 cv
259.438 156.313 259.625 156.688 259.875 157 cv
260.188 157.25 260.563 157.438 260.938 157.438 cv
261.313 157.438 261.688 157.25 262 157 cv
262.25 156.688 262.438 156.313 262.438 155.938 cv
262.438 155.938 li
cp
f
263.75 155.875 mo
263.75 155.5 263.563 155.125 263.313 154.813 cv
263 154.563 262.625 154.375 262.25 154.375 cv
261.875 154.375 261.5 154.563 261.188 154.813 cv
260.938 155.125 260.75 155.5 260.75 155.875 cv
260.75 156.25 260.938 156.625 261.188 156.938 cv
261.5 157.188 261.875 157.375 262.25 157.375 cv
262.625 157.375 263 157.188 263.313 156.938 cv
263.563 156.625 263.75 156.25 263.75 155.875 cv
263.75 155.875 li
cp
f
265 156.125 mo
265 155.75 264.813 155.375 264.563 155.063 cv
264.25 154.813 263.875 154.625 263.5 154.625 cv
263.125 154.625 262.75 154.813 262.438 155.063 cv
262.188 155.375 262 155.75 262 156.125 cv
262 156.5 262.188 156.875 262.438 157.188 cv
262.75 157.438 263.125 157.625 263.5 157.625 cv
263.875 157.625 264.25 157.438 264.563 157.188 cv
264.813 156.875 265 156.5 265 156.125 cv
265 156.125 li
cp
f
266.25 155.938 mo
266.25 155.563 266.063 155.188 265.813 154.875 cv
265.5 154.625 265.125 154.438 264.75 154.438 cv
264.375 154.438 264 154.625 263.688 154.875 cv
263.438 155.188 263.25 155.563 263.25 155.938 cv
263.25 156.313 263.438 156.688 263.688 157 cv
264 157.25 264.375 157.438 264.75 157.438 cv
265.125 157.438 265.5 157.25 265.813 157 cv
266.063 156.688 266.25 156.313 266.25 155.938 cv
266.25 155.938 li
cp
f
267.5 155.938 mo
267.5 155.563 267.313 155.188 267.063 154.875 cv
266.75 154.625 266.375 154.438 266 154.438 cv
265.625 154.438 265.25 154.625 264.938 154.875 cv
264.688 155.188 264.5 155.563 264.5 155.938 cv
264.5 156.313 264.688 156.688 264.938 157 cv
265.25 157.25 265.625 157.438 266 157.438 cv
266.375 157.438 266.75 157.25 267.063 157 cv
267.313 156.688 267.5 156.313 267.5 155.938 cv
267.5 155.938 li
cp
f
268.75 156.063 mo
268.75 155.688 268.563 155.313 268.313 155 cv
268 154.75 267.625 154.563 267.25 154.563 cv
266.875 154.563 266.5 154.75 266.188 155 cv
265.938 155.313 265.75 155.688 265.75 156.063 cv
265.75 156.438 265.938 156.813 266.188 157.125 cv
266.5 157.375 266.875 157.563 267.25 157.563 cv
267.625 157.563 268 157.375 268.313 157.125 cv
268.563 156.813 268.75 156.438 268.75 156.063 cv
268.75 156.063 li
cp
f
270 156.125 mo
270 155.75 269.813 155.375 269.563 155.063 cv
269.25 154.813 268.875 154.625 268.5 154.625 cv
268.125 154.625 267.75 154.813 267.438 155.063 cv
267.188 155.375 267 155.75 267 156.125 cv
267 156.5 267.188 156.875 267.438 157.188 cv
267.75 157.438 268.125 157.625 268.5 157.625 cv
268.875 157.625 269.25 157.438 269.563 157.188 cv
269.813 156.875 270 156.5 270 156.125 cv
270 156.125 li
cp
f
271.313 155.938 mo
271.313 155.563 271.125 155.188 270.875 154.875 cv
270.563 154.625 270.188 154.438 269.813 154.438 cv
269.438 154.438 269.063 154.625 268.75 154.875 cv
268.5 155.188 268.313 155.563 268.313 155.938 cv
268.313 156.313 268.5 156.688 268.75 157 cv
269.063 157.25 269.438 157.438 269.813 157.438 cv
270.188 157.438 270.563 157.25 270.875 157 cv
271.125 156.688 271.313 156.313 271.313 155.938 cv
271.313 155.938 li
cp
f
272.563 155.875 mo
272.563 155.5 272.375 155.125 272.125 154.813 cv
271.813 154.563 271.438 154.375 271.063 154.375 cv
270.688 154.375 270.313 154.563 270 154.813 cv
269.75 155.125 269.563 155.5 269.563 155.875 cv
269.563 156.25 269.75 156.625 270 156.938 cv
270.313 157.188 270.688 157.375 271.063 157.375 cv
271.438 157.375 271.813 157.188 272.125 156.938 cv
272.375 156.625 272.563 156.25 272.563 155.875 cv
272.563 155.875 li
cp
f
273.813 156.375 mo
273.813 156 273.625 155.625 273.375 155.313 cv
273.063 155.063 272.688 154.875 272.313 154.875 cv
271.938 154.875 271.563 155.063 271.25 155.313 cv
271 155.625 270.813 156 270.813 156.375 cv
270.813 156.75 271 157.125 271.25 157.438 cv
271.563 157.688 271.938 157.875 272.313 157.875 cv
272.688 157.875 273.063 157.688 273.375 157.438 cv
273.625 157.125 273.813 156.75 273.813 156.375 cv
273.813 156.375 li
cp
f
275.063 156.375 mo
275.063 156 274.875 155.625 274.625 155.313 cv
274.313 155.063 273.938 154.875 273.563 154.875 cv
273.188 154.875 272.813 155.063 272.5 155.313 cv
272.25 155.625 272.063 156 272.063 156.375 cv
272.063 156.75 272.25 157.125 272.5 157.438 cv
272.813 157.688 273.188 157.875 273.563 157.875 cv
273.938 157.875 274.313 157.688 274.625 157.438 cv
274.875 157.125 275.063 156.75 275.063 156.375 cv
275.063 156.375 li
cp
f
276.313 155.75 mo
276.313 155.375 276.125 155 275.875 154.688 cv
275.563 154.438 275.188 154.25 274.813 154.25 cv
274.438 154.25 274.063 154.438 273.75 154.688 cv
273.5 155 273.313 155.375 273.313 155.75 cv
273.313 156.125 273.5 156.5 273.75 156.813 cv
274.063 157.063 274.438 157.25 274.813 157.25 cv
275.188 157.25 275.563 157.063 275.875 156.813 cv
276.125 156.5 276.313 156.125 276.313 155.75 cv
276.313 155.75 li
cp
f
277.625 155.938 mo
277.625 155.563 277.438 155.188 277.188 154.875 cv
276.875 154.625 276.5 154.438 276.125 154.438 cv
275.75 154.438 275.375 154.625 275.063 154.875 cv
274.813 155.188 274.625 155.563 274.625 155.938 cv
274.625 156.313 274.813 156.688 275.063 157 cv
275.375 157.25 275.75 157.438 276.125 157.438 cv
276.5 157.438 276.875 157.25 277.188 157 cv
277.438 156.688 277.625 156.313 277.625 155.938 cv
277.625 155.938 li
cp
f
278.875 156.313 mo
278.875 155.938 278.688 155.563 278.438 155.25 cv
278.125 155 277.75 154.813 277.375 154.813 cv
277 154.813 276.625 155 276.313 155.25 cv
276.063 155.563 275.875 155.938 275.875 156.313 cv
275.875 156.688 276.063 157.063 276.313 157.375 cv
276.625 157.625 277 157.813 277.375 157.813 cv
277.75 157.813 278.125 157.625 278.438 157.375 cv
278.688 157.063 278.875 156.688 278.875 156.313 cv
278.875 156.313 li
cp
f
280.125 156.438 mo
280.125 156.063 279.938 155.688 279.688 155.375 cv
279.375 155.125 279 154.938 278.625 154.938 cv
278.25 154.938 277.875 155.125 277.563 155.375 cv
277.313 155.688 277.125 156.063 277.125 156.438 cv
277.125 156.813 277.313 157.188 277.563 157.5 cv
277.875 157.75 278.25 157.938 278.625 157.938 cv
279 157.938 279.375 157.75 279.688 157.5 cv
279.938 157.188 280.125 156.813 280.125 156.438 cv
280.125 156.438 li
cp
f
281.375 155.938 mo
281.375 155.563 281.188 155.188 280.938 154.875 cv
280.625 154.625 280.25 154.438 279.875 154.438 cv
279.5 154.438 279.125 154.625 278.813 154.875 cv
278.563 155.188 278.375 155.563 278.375 155.938 cv
278.375 156.313 278.563 156.688 278.813 157 cv
279.125 157.25 279.5 157.438 279.875 157.438 cv
280.25 157.438 280.625 157.25 280.938 157 cv
281.188 156.688 281.375 156.313 281.375 155.938 cv
281.375 155.938 li
cp
f
282.625 156.188 mo
282.625 155.813 282.438 155.438 282.188 155.125 cv
281.875 154.875 281.5 154.688 281.125 154.688 cv
280.75 154.688 280.375 154.875 280.063 155.125 cv
279.813 155.438 279.625 155.813 279.625 156.188 cv
279.625 156.563 279.813 156.938 280.063 157.25 cv
280.375 157.5 280.75 157.688 281.125 157.688 cv
281.5 157.688 281.875 157.5 282.188 157.25 cv
282.438 156.938 282.625 156.563 282.625 156.188 cv
282.625 156.188 li
cp
f
283.875 156.563 mo
283.875 156.188 283.688 155.813 283.438 155.5 cv
283.125 155.25 282.75 155.063 282.375 155.063 cv
282 155.063 281.625 155.25 281.313 155.5 cv
281.063 155.813 280.875 156.188 280.875 156.563 cv
280.875 156.938 281.063 157.313 281.313 157.625 cv
281.625 157.875 282 158.063 282.375 158.063 cv
282.75 158.063 283.125 157.875 283.438 157.625 cv
283.688 157.313 283.875 156.938 283.875 156.563 cv
283.875 156.563 li
cp
f
285.188 156.625 mo
285.188 156.25 285 155.875 284.75 155.563 cv
284.438 155.313 284.063 155.125 283.688 155.125 cv
283.313 155.125 282.938 155.313 282.625 155.563 cv
282.375 155.875 282.188 156.25 282.188 156.625 cv
282.188 157 282.375 157.375 282.625 157.688 cv
282.938 157.938 283.313 158.125 283.688 158.125 cv
284.063 158.125 284.438 157.938 284.75 157.688 cv
285 157.375 285.188 157 285.188 156.625 cv
285.188 156.625 li
cp
f
286.438 156.438 mo
286.438 156.063 286.25 155.688 286 155.375 cv
285.688 155.125 285.313 154.938 284.938 154.938 cv
284.563 154.938 284.188 155.125 283.875 155.375 cv
283.625 155.688 283.438 156.063 283.438 156.438 cv
283.438 156.813 283.625 157.188 283.875 157.5 cv
284.188 157.75 284.563 157.938 284.938 157.938 cv
285.313 157.938 285.688 157.75 286 157.5 cv
286.25 157.188 286.438 156.813 286.438 156.438 cv
286.438 156.438 li
cp
f
287.688 156.375 mo
287.688 156 287.5 155.625 287.25 155.313 cv
286.938 155.063 286.563 154.875 286.188 154.875 cv
285.813 154.875 285.438 155.063 285.125 155.313 cv
284.875 155.625 284.688 156 284.688 156.375 cv
284.688 156.75 284.875 157.125 285.125 157.438 cv
285.438 157.688 285.813 157.875 286.188 157.875 cv
286.563 157.875 286.938 157.688 287.25 157.438 cv
287.5 157.125 287.688 156.75 287.688 156.375 cv
287.688 156.375 li
cp
f
288.938 156.188 mo
288.938 155.813 288.75 155.438 288.5 155.125 cv
288.188 154.875 287.813 154.688 287.438 154.688 cv
287.063 154.688 286.688 154.875 286.375 155.125 cv
286.125 155.438 285.938 155.813 285.938 156.188 cv
285.938 156.563 286.125 156.938 286.375 157.25 cv
286.688 157.5 287.063 157.688 287.438 157.688 cv
287.813 157.688 288.188 157.5 288.5 157.25 cv
288.75 156.938 288.938 156.563 288.938 156.188 cv
288.938 156.188 li
cp
f
290.188 156.438 mo
290.188 156.063 290 155.688 289.75 155.375 cv
289.438 155.125 289.063 154.938 288.688 154.938 cv
288.313 154.938 287.938 155.125 287.625 155.375 cv
287.375 155.688 287.188 156.063 287.188 156.438 cv
287.188 156.813 287.375 157.188 287.625 157.5 cv
287.938 157.75 288.313 157.938 288.688 157.938 cv
289.063 157.938 289.438 157.75 289.75 157.5 cv
290 157.188 290.188 156.813 290.188 156.438 cv
290.188 156.438 li
cp
f
291.438 156.438 mo
291.438 156.063 291.25 155.688 291 155.375 cv
290.688 155.125 290.313 154.938 289.938 154.938 cv
289.563 154.938 289.188 155.125 288.875 155.375 cv
288.625 155.688 288.438 156.063 288.438 156.438 cv
288.438 156.813 288.625 157.188 288.875 157.5 cv
289.188 157.75 289.563 157.938 289.938 157.938 cv
290.313 157.938 290.688 157.75 291 157.5 cv
291.25 157.188 291.438 156.813 291.438 156.438 cv
291.438 156.438 li
cp
f
292.75 156.625 mo
292.75 156.25 292.563 155.875 292.313 155.563 cv
292 155.313 291.625 155.125 291.25 155.125 cv
290.875 155.125 290.5 155.313 290.188 155.563 cv
289.938 155.875 289.75 156.25 289.75 156.625 cv
289.75 157 289.938 157.375 290.188 157.688 cv
290.5 157.938 290.875 158.125 291.25 158.125 cv
291.625 158.125 292 157.938 292.313 157.688 cv
292.563 157.375 292.75 157 292.75 156.625 cv
292.75 156.625 li
cp
f
294 156.438 mo
294 156.063 293.813 155.688 293.563 155.375 cv
293.25 155.125 292.875 154.938 292.5 154.938 cv
292.125 154.938 291.75 155.125 291.438 155.375 cv
291.188 155.688 291 156.063 291 156.438 cv
291 156.813 291.188 157.188 291.438 157.5 cv
291.75 157.75 292.125 157.938 292.5 157.938 cv
292.875 157.938 293.25 157.75 293.563 157.5 cv
293.813 157.188 294 156.813 294 156.438 cv
294 156.438 li
cp
f
295.25 156.75 mo
295.25 156.375 295.063 156 294.813 155.688 cv
294.5 155.438 294.125 155.25 293.75 155.25 cv
293.375 155.25 293 155.438 292.688 155.688 cv
292.438 156 292.25 156.375 292.25 156.75 cv
292.25 157.125 292.438 157.5 292.688 157.813 cv
293 158.063 293.375 158.25 293.75 158.25 cv
294.125 158.25 294.5 158.063 294.813 157.813 cv
295.063 157.5 295.25 157.125 295.25 156.75 cv
295.25 156.75 li
cp
f
gsave
0 0 mo
0 191 li
300 191 li
300 0 li
0 0 li
cp
clp
0.1875 lw
299 0.125 mo
299 162 li
37 0.125 mo
299 0.125 li
37 162 mo
37 0.125 li
299 162 mo
37 162 li
0 0 0 1 cmyk
@
grestore
0.1875 lw
0 lc
42.25 162 mo
42.25 158.938 li
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ArialMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 48 /zero putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/period <1C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |-/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3ABC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A10425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E31D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A5B546505C954A88> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/JFFOIE+ArialMT /ArialMT findfont ct_VMDictPut/JFFOIE+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero 207{/.notdef}rp]JFFOIE+ArialMT nfJFFOIE+ArialMT*1 [9 0 0 -9 0 0 ]msf36.6172 173.016 mo(0.)[5.00537 0 ]xsh43.3672 173.016 mo(0)sh92.6875 162 mo
92.6875 158.938 li
80.0625 162 mo
80.0625 160.188 li
67.4375 162 mo
67.4375 160.188 li
54.875 162 mo
54.875 160.188 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIE+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIE+ArialMT /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/JFFOIE+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two 205{/.notdef}rp]JFFOIE+ArialMT nfJFFOIE+ArialMT*1 [9 0 0 -9 0 0 ]msf87.0391 173.016 mo(0.)[5.00537 0 ]xsh93.7969 173.016 mo(2)sh143.125 162 mo
143.125 158.938 li
130.5 162 mo
130.5 160.188 li
117.875 162 mo
117.875 160.188 li
105.25 162 mo
105.25 160.188 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIE+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIE+ArialMT /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/JFFOIE+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 203{/.notdef}rp]JFFOIE+ArialMT nfJFFOIE+ArialMT*1 [9 0 0 -9 0 0 ]msf137.469 173.016 mo(0.)[5.00537 0 ]xsh144.219 173.016 mo(4)sh193.5 162 mo
193.5 158.938 li
180.938 162 mo
180.938 160.188 li
168.313 162 mo
168.313 160.188 li
155.688 162 mo
155.688 160.188 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIE+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF193628C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766FA7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIE+ArialMT /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/JFFOIE+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]JFFOIE+ArialMT nfJFFOIE+ArialMT*1 [9 0 0 -9 0 0 ]msf187.898 173.016 mo(0.)[5.00586 0 ]xsh194.648 173.016 mo(6)sh243.938 162 mo
243.938 158.938 li
231.313 162 mo
231.313 160.188 li
218.75 162 mo
218.75 160.188 li
206.125 162 mo
206.125 160.188 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIE+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C071A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D17DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63B1FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F603BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A7EFB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C95219571FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A1A19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A55977C35> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIE+ArialMT /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/JFFOIE+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]JFFOIE+ArialMT nfJFFOIE+ArialMT*1 [9 0 0 -9 0 0 ]msf238.328 173.016 mo(0.)[5.00586 0 ]xsh245.07 173.016 mo(8)sh294.375 162 mo
294.375 158.938 li
281.75 162 mo
281.75 160.188 li
269.188 162 mo
269.188 160.188 li
256.563 162 mo
256.563 160.188 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIE+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92FE1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIE+ArialMT /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/JFFOIE+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]JFFOIE+ArialMT nfJFFOIE+ArialMT*1 [9 0 0 -9 0 0 ]msf288.75 173.016 mo(1.)[5.00586 0 ]xsh295.5 173.016 mo(0)sh37 157 mo
40.0625 157 li
@
JFFOIE+ArialMT*1 [9 0 0 -9 0 0 ]msf29.5 159.977 mo(0)sh37 114.125 mo
40.0625 114.125 li
37 122.688 mo
38.875 122.688 li
37 131.25 mo
38.875 131.25 li
37 139.813 mo
38.875 139.813 li
37 148.438 mo
38.875 148.438 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIE+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF322B11AFD4001C6D393B64E9DE4ADCB9C7DBD29001BCD9C24204BCA349E6D6727DDD519B4607896591269B0F423E62F04083C8D4AAB63F3153F8354DAF7BF13702FC0166656CF2542F30CE9F35F189C04CCF389EF200B50CB6EEE2DB668946DD84852A4BE0E462B71D963D0D41B1A42CCC4B98AFEC49372EF96DD9EB13A793559C13CFDFE477> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIE+ArialMT /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/JFFOIE+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 199{/.notdef}rp]JFFOIE+ArialMT nfJFFOIE+ArialMT*1 [9 0 0 -9 0 0 ]msf20.5 117.133 mo(500)[5.00537 5.00537 0 ]xsh37 71.3125 mo
40.0625 71.3125 li
37 79.875 mo
38.875 79.875 li
37 88.4375 mo
38.875 88.4375 li
37 97 mo
38.875 97 li
37 105.563 mo
38.875 105.563 li
@
JFFOIE+ArialMT*1 [9 0 0 -9 0 0 ]msf16 74.2891 mo(1000)[5.00537 5.00537 5.00537 0 ]xsh37 28.4375 mo
40.0625 28.4375 li
37 37 mo
38.875 37 li
37 45.5625 mo
38.875 45.5625 li
37 54.125 mo
38.875 54.125 li
37 62.75 mo
38.875 62.75 li
@
JFFOIE+ArialMT*1 [9 0 0 -9 0 0 ]msf16 31.4453 mo(1500)[5.00537 5.00537 5.00537 0 ]xshgsave
0 0 mo
0 191 li
300 191 li
300 0 li
0 0 li
cp
clp
299 2.75 mo
297.125 2.75 li
299 11.3125 mo
297.125 11.3125 li
299 19.875 mo
297.125 19.875 li
299 28.4375 mo
295.875 28.4375 li
299 37 mo
297.125 37 li
299 45.5625 mo
297.125 45.5625 li
299 54.125 mo
297.125 54.125 li
299 62.75 mo
297.125 62.75 li
299 71.3125 mo
295.875 71.3125 li
299 79.875 mo
297.125 79.875 li
299 88.4375 mo
297.125 88.4375 li
299 97 mo
297.125 97 li
299 105.563 mo
297.125 105.563 li
299 114.125 mo
295.875 114.125 li
299 122.688 mo
297.125 122.688 li
299 131.25 mo
297.125 131.25 li
299 139.813 mo
297.125 139.813 li
299 148.438 mo
297.125 148.438 li
299 157 mo
295.875 157 li
294.375 0.125 mo
294.375 3.1875 li
281.75 0.125 mo
281.75 1.9375 li
269.188 0.125 mo
269.188 1.9375 li
256.563 0.125 mo
256.563 1.9375 li
243.938 0.125 mo
243.938 3.1875 li
231.313 0.125 mo
231.313 1.9375 li
218.75 0.125 mo
218.75 1.9375 li
206.125 0.125 mo
206.125 1.9375 li
193.5 0.125 mo
193.5 3.1875 li
180.938 0.125 mo
180.938 1.9375 li
168.313 0.125 mo
168.313 1.9375 li
155.688 0.125 mo
155.688 1.9375 li
143.125 0.125 mo
143.125 3.1875 li
130.5 0.125 mo
130.5 1.9375 li
117.875 0.125 mo
117.875 1.9375 li
105.25 0.125 mo
105.25 1.9375 li
92.6875 0.125 mo
92.6875 3.1875 li
80.0625 0.125 mo
80.0625 1.9375 li
67.4375 0.125 mo
67.4375 1.9375 li
54.875 0.125 mo
54.875 1.9375 li
42.25 0.125 mo
42.25 3.1875 li
37 2.75 mo
38.875 2.75 li
37 11.3125 mo
38.875 11.3125 li
37 19.875 mo
38.875 19.875 li
@
grestore
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIE+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/parenleft <1C60D8A8C9B81F2C3A069EC278D0AA8AE7E32C29FB8AFD2B6368260D302C905A973F0B3449ED9E18E81E16B7B273530E9BC14ED76D4376A01C0A577DC235F833AFCC30669C812FBF097879E1> |-/parenright <1C60D8A8C9B81F2C3A30D3A3F0A8D738E712823A2480470C32A2885DCE4A77E926C520C7B7E1016BB28443D8E7B8AC0F7C4F3BD721C19F19D4714AF52ABD0227B6CDD854C568D5A6F3817645C5> |-/H <1C60D8A8C9B6079F62EE7568E8B09CBA01F57B4ACE6DA24AC6EA79287DF31270F7DC42D147A6FAB1DABB6C> |-/M <1C60D8A8C9B6B41CBB4B6664BFFC865F56E6FEAFA79E7B90883C1C68AFB379AC174B0F8DCC9294E2C26BD06BBA9FD3867F8768651EF4BA798B4F538FCE8F80AF5A83421F8F> |-/N <1C60D8A8C9B6079F629170873C67115641D0B6890161EC48F71E8D2106F3AC927984C1E464F121F968> |-/P <1C60D8A8C9B64EDFF4950CC53012D47AE97D5586315BA2F5162B63CEC117C5379A1B3DB174CB2C739C68916A1E99A346AFF71DBF25658867D9AEF1BF3C47CE1BA73978E8D0D40E52B85A56E08A1369D85E15B0A0C517291916FF6E61D0EFBF59B4862165C7DEA15B42BE3811C2CAA25C54> |-/V <1C60D8A8C9B64EDFFB759009DDECF50F0319B844741E3CEB2C0ABDDB89E7563FC0955B866D61D9CC736D3C346A5623E20C1E4D> |-/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177B5D88A> |-/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF626A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA1EAAF79B76AA2B52CCF0307B360E6D> |-/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37295284C077711C162623860AACA404F650F8D516970257> |-/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |-/g <1C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817A065D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D559B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0C247BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667DC9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FBD88F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF575C72F67F4BEBB98F8AFA57505EC9> |-/h <1C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E131450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD41AC970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2DFA8> |-/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B171C8A80AB> |-/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-/m <1C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519AD5BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD99C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176AFB9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D55C54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE37B> |-/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5203A8015DD09B7CE> |-/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F518C54BB58C51D6FB6D0C8> |-/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619ADD420F549AB7C795751D32E8EE6> |-/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F4172D53C8FCAF4D28F2B78D3A4BF03> |-/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F5C42C88FB43C> |-/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793990906DA8D7F8ACFF6D70790F06B02> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIE+ArialMT /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 72 /H putdup 77 /M putdup 78 /N putdup 80 /P putdup 86 /V putdup 97 /a putdup 98 /b putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putpop%ADOEndSubsetFont
/JFFOIE+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 15{/.notdef}rp /H 4{/.notdef}rp /M /N /.notdef /P 5{/.notdef}rp /V 10{/.notdef}rp /a /b 2{/.notdef}rp /e /f /g /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 138{/.notdef}rp]JFFOIE+ArialMT nfJFFOIE+ArialMT*1 [9 0 0 -9 0 0 ]msf134.25 189.016 mo(Pulse Height \(mV\))[6.00293 5.00537 1.99951 4.5 5.00586 2.5 6.5 5.00488 1.99902 5.00586 5.00586 2.5 2.5 2.99805 7.49609 6.00391 0 ]xshJFFOIE+ArialMT*1 [0 -9 -9 0 0 0 ]msf8 130.188 mo(Number of Muons \(arb\))[-6.5 -5.00488 -7.49707 -5.00586 -5.00488 -2.99707 -2.50049 -5.00537 -2.50049 -2.50049 -7.49707 -5.00537 -5.00537 -5.00537 -4.5 -2.50049 -2.99707 -5.00537 -2.99707 -5.00537 0 ]ysh1 lw
4 ml
69.8125 5.125 mo
69.8125 6.78223 68.4688 8.125 66.8125 8.125 cv
65.1563 8.125 63.8125 6.78223 63.8125 5.125 cv
63.8125 3.46777 65.1563 2.125 66.8125 2.125 cv
68.4688 2.125 69.8125 3.46777 69.8125 5.125 cv
cp
@
3.239 ml
70.9644 8.45996 mo
133.064 40.8594 li
@
72.6206 13.3467 mo
71.0757 8.5918 li
@
70.6475 8.73047 mo
75.8306 7.04688 li
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIE+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C3A78A5675B101A923F2D2A8AB56C> |-/nine <1C60D8A8C9B7EF322B1E3B1A79A1DA03E10E600D068C6F2A2C380B0F6DEBD4D4DD1CC12D66AEECD714986D0BB404BEEE797B931765A09DB6972620435C3E53C33E82E82293552FE3F4B4A9CF87D2D3960A335325D9064F969F569869D5BECFFFACFCA41CE671D232207B2A9F695CAD03F11715AE00BA6E4E4DDB0F807E169B9324CB5646DCC83A5DE270DE3BAEFD03D20E077B3A9C59CEC5C162A3BD3072425BBF0BAF6222E938CACE57A2C4D75634AE3A010D0148B506BD06198AAAA27D1742624D1FE8845D19FF21CDB94B022766F89FD7433D600DF30C7FA27B03E17188994F16> |-/equal <1C60D8A8C9B7F374869C4D81D9B128A787F701C3A1164A793E363981F7468DA1474C45> |-/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D9621458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-/x <1C60D8A8C9B7A73DB920A1A3B81DE7234ACAA5546B4C65820CF3C50E1629C5A6423BAA34A2ECA8C7FE4B71726AC6704CC23AF1725AFB30D2892FC1BDDAFEAD7BE7BD65F1051699CCF4B0> |-/plusminus <1C60D8A8C9B79676F4DD3F58FC397518D3361350FDA6D76C93E64F8E1A9BDBDD37CD798600C9B93F798A292852ABA36FFCF3B239D5291F1CA231> |-/mu <1C60D8A8C9B7FBE1CEC4CD4BA59BCF94FE8D589B193DD31C4A1413EF522D59949FCC4EF27C4E2D0A7BAF6AE00FC1DD991A3B60A48C3D2D3C6B9B49FA9AB401B38E076E26DB1B589B5DF0D3C8058C76C13C5B9C4BAD9671C45C7C1B9AD9496BABC2CE47DCD7DE9D2DBAEC1793> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIE+ArialMT /Encoding getdup 45 /hyphen putdup 57 /nine putdup 61 /equal putdup 100 /d putdup 120 /x putdup 177 /plusminus putdup 181 /mu putpop%ADOEndSubsetFont
/JFFOIE+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight /nine 3{/.notdef}rp /equal 10{/.notdef}rp /H 4{/.notdef}rp /M /N /.notdef /P 5{/.notdef}rp /V 10{/.notdef}rp /a /b /.notdef /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 2{/.notdef}rp /x 56{/.notdef}rp /plusminus 3{/.notdef}rp /mu 74{/.notdef}rp]JFFOIE+ArialMT nfJFFOIE+ArialMT*1 [12 0 0 -12 0 0 ]msf137.333 46.335 mo(V)shJFFOIE+ArialMT*1 [8 0 0 -8 0 0 ]msf145.337 46.335 mo(\265)shJFFOIE+ArialMT*1 [6 0 0 -6 0 0 ]msf145.333 40.335 mo(mode)[4.99805 3.33691 3.33691 0 ]xsh161.333 46.0015 mo(= )[3.50391 0 ]xshJFFOIE+ArialMT*1 [9 0 0 -9 0 0 ]msf166.504 46.0015 mo(9.8\261.5  x 10  mV)[5.00488 2.50098 5.00488 4.93945 2.50098 5.00488 2.50098 2.50098 4.5 2.5 5.00586 5.00488 2.50098 2.5 7.49707 0 ]xshJFFOIE+ArialMT*1 [6 0 0 -6 0 0 ]msf212.333 40.333 mo(-2)[1.99805 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/JFFOIE+ArialMT*1 uf/JFFOIE+ArialMT uf/ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (steven schowalter) ()%%Title: (Muon_Pulse_Height.eps)%%CreationDate: 3/8/09 3:57 PM%AI9_DataStream%Gb!R&pO;C"cRA_I!;?Ib8Eas`'LIS.oNhh)-R#1;ZCehf5L-[/d>Z*e)`Po'lZp7HhZ@VTVe@?8Ule,qIpk;UFLm+N_XR#q=%r*i%OcOi&$,J-'OrhBQf"I:qAn>G!;G<a8Hn<)]1.pfZYW_<qKB`2VfTmnKiik?]:U8j:5HTM2V"KS9[(HoiY;cB?\'SouJ!a:e_nd$%%c&]K=hT7YHi+b.got#1a=<LsH1b7CR>T&S!Xf45mj5HRP2@Hj/YB)bj^WYZ=2pNf0[a`6D\XB*cT`2`FEk=MKpLYHA*;)eheGJJ"%"<OA-q"L%9SYC,!Ad-\ZilT(m40krSO/:hR?:<\m<&uW<p]mE^VpUP604^5t2t1o<Is*3gEGO8K%UOa_fk\,_lF!KEL1m)I5kKr%%%/OL`.j`RSE@F0b^!T6rRmaZZf#Uc!i::5\q*/!bj`Yi%*DX>iJBtiE!ic*BHI_s92"icPH]pQfmU"1bo(ZhD"i+S,A]SX7_iENi%K3$j2oND4u*rcn\:K$,^2?&i<#Z6>i)2o3;66;hGBXIc$`tP;X9_3'G&$C\s\@81\TFn*7P#pR?BP>Mp=%qW-;j')):tcM#>=rPd%Fa0>*RR.[/Ni))Xh#6RLZ:^`ec0DgndAAQCHILpWG<;+&rb(GEdQ]S<ku8]PrC-K\4ONF[ZZC.U)S#c5-oPa]!D[+XRuVjCSG3J*%Z3R5W["Vm!:Q+(ur3s0)cP3U@7t6[)T?/@+AhrjY/CM.n"Q,@F:F-==8eQDQWPI9LX^i&:-'N;59L>^h&kXI6PmXWLPCYKW%$\l,%5Bo8RJPqmEP_*93$)NMJ-rhh8S&HR6.2JUNV#jFCQ"1NaY#O>)V*a#^4XU+Rr?3bUVsl$]/kI*KHpT8!'7<+q(_[o=Gm5LF:FH;i%Jkm4BK`lZ;`WVoQ"XAUpW/8<He-mRR:Dc$<_d+)mZq6o^g4rQ[0)1)TPmZ<Ao)h-'0IBUA:kDL6-5ei.4m>&m)eg==:?RG!+Fd2p%`Wr,4':D-AC@[>-(jn\"(a#;W!Yt8YN"8,2$:[PJ+$N9Bi=:6%.2X.SP$'&46JtJiLDD<K5gLnYcoE?L,>a.n"E"o+AE9Q\cu[Vg%dOqMec5.oqs.BdZNaa>o%c/P--;S&tn-PosI`(pd9ZXj8$"[Ld*^@V[8im/rU]lA+'Se-?:i(cU'20RZ5j<mG.=jSF*J$7cQbX&V%:1o6?NV"5`dFLnVjF-Thr/mQaas>V5k+'5Ae53u2"Fi:D-gu<XPZfreU2\P"T3sUsHO^#5D%27KV/*D2TrcK@oS>gHhU\>cqb$`Y%gElNU2[+cQJ+-1BU7hF@,'fo2PJ;@4>\i6Xcf7Od#QE2da^6MdY-i3=QVNb1FIKY/<rVZ8njN@%It[s7f"T7ua'U<Y45)Xh/!nAc%p.bO2ooJT`Qok'go1H1M(&:>Z'B@&VU/HR^q6\]P<(Zrrs2],c9UX\ds0dC%^26s*r41Y<Nr:CMkZ#V:2"H$jOt%cR<2ib.b2dhQ%:nJB1Pk[SAOq8;sKEQ3@"`dZm^ir+urtn5%6qM[@/+4WDc"E[QGYZta.g+,@q$\]Bi!m@k'Fa*oGfJ_lpmkCIV3K%Oca>K=8?7$c%><YJZLDnRpWO\/-gSjLK6$X!%#M#8"[%7=k7.6"Y;EKU>)&Fc^+9uIs8IX^*M3J[=Ot^Cg\0P6&L:dflZu7]Xe=-g0(Fi?TOng?N%<+-fF,>`BEoEP/QlbR'7aC62g^pPWO-9Y4A8C;d[-h(KTn*u;RdM#N2+D=T/(Ca25;eY=83sau#`3`X6Rk'!j*c&EA@9+$#Ucc#7%HEN3f?niP0T_,]k&h0]XF3GH-SfjtC@(m0\,[>C_S["(GSsU-h!.-G#8^f&?4")tO86I]0U.DEmS1&5f,Dha"ERZ1M)mu&6a'PIG%6[D@;Mnh(kP+L#a+df/W'ohra$mG)f)+&7MRT2)?T[GcjLD7sdUs*#!e3`D]:V\iA1T=;Pk*u"P;M"gDa:akRpjr60ObF4[:'FQN%/5Z5,dYeM_%<"SH\9sh+&a][Z)s2]\0g$h3+Cu1[!pM\`:r7cs09rsR/2"4^&6UPa@%b16\0dA#^kXUm@9f&(EE#P%T&L!/K(cY(%+rt`&T\)Rk"m.aS#(XUI"?-?cn2kTknkk-kl`a'9Z;Rqm>/:o1GVe;F.L%DJX0a+fC_4f9S2""j@nDIVEujA<#Rr"r+,B;a)?$TI%*f\l%C(O9^Xe6V1#$OVb^SFht(SI\r'"!s$k=VKhQ,]Ik!b4>o)!7c.i1A);U!O$I\M\2kj&\qOBFG4*^_eu`N0-?gH(<:pTd>;u%U^$a"`c\!/ZsHSQKUu+[%%*iN8VI2H<7!Pq+bf>\f[86A^<*Gr8UrS3);5c\ACf*e,lG+)"*MV@)BL7OdT7]`.Gnm@"=ja(RD9fr%<Q:NU0Md7CM4%YB%?.9"AGUIgDt+h1.E2Ej2<$4#/`O6<$:Z5`5]@?EN[0SX)%;KaVJSo@_ZXfcE@015]WAJI`q,X-k=*uH?:Sus%\;.$G"@a:"+(K@Xj5ssKeQPI[/+8T^5^0_m[,hY5[#]Q?0t*^P:eO^q2t$p)Gs[.oXr!L*)Pf,gZI.-MMQDD?DY\t:3eEqKB!`/K%oMlMlG3#I^Zp"1+7oZHq<_DD+$;]95S^*UBm$NFCn$5uLMJinu,<V=PANF#naH^)Nj$`l=BVV3[/XR^qESC8::I+VMn1R(/1g#=.%1e)%h9fBf^-;cfpBQ.OVQ;R-U;J'(+I0A8s[*PnRg:0G+:jZol)fcBe!-94eM)*B9%pk)l)2e>n=.d"6(7=*FL?CgeH,;SlI^=H5%V+"R/W_?qlatko&@t"MtV,\r]eQGIZj+_J@HA+9"":D^X:RGD-!Q'@=\44]kiaiQX%I4t_b[LU-Ll/0*?h+%dLpNu"WZ5*J6j'".%eK@6EZ\#=%T@#g[H+X.K$nG2f6MVs!3BAdIHcsXI&UtHtc]okl^^LB>1K<LkRWT=A4BL\"!fu%6'3YF9+9Bmm5UHssVU]UHLJ?aO%ij#("'0/]2]I==@!`7.3`W.f`JsddPaV*0@^QVJA0-G.a22ldOXMA#Q"<)Nu=*nbD^PM'QfReI<^hZ&GV'$j):)kW$NTrn70?Pi1%kBX)q3^ZDiC;h"n*#Eo30YuD)1q!C4(Gj3;CsI$crkj*s8?:NA_A"6sjKXr)f<r+F573crIF##L>W3"%rQ\(*,_6^C&]mM:7(DZT%]g9J/4hf:7S+%+Q?Gh2A)d5JK5\n0'#SfuIj2bmCel4o57)^PFGsgs2M(`1)/P@d1+O'qi!@CH#3s?Lq8E[jEf./OfBOlSif[>m)%,=[*sQia$0\pm/r7\ofA/ZEi/3hqqK3/r:qINYP>(7W/?7.MF=(uu0WL8\5T8jj?3f#n-A5)`;W[iHL;f&q%(GoNsVb,U2q't>mT%^[MPF5JALRaW'_V<+H7$^S4"mr^jLp\:[7>A.&I:N"0S?jhL5P_(HJ?['GFqYrp7[;c0.)1&')8+c-j.7cT5!peN#-8#a`7r.iZ$%Nki-p57T1aXJ)UM?nFVG>NJguP-LNf1qfL2Yd(kF5JcZq8L\[eH\3al;&u&%f4n\dimMD7$ug"/9lYZ6`aBk8>a,sS99XWIh_7*s%g@FGKJI)'H8;]9jZ*,>K6t8]Q,p>RgWF__n<]ehAVWe#*Cg"iRX4S.m=cKQ?G%sCNG856U/DG6p&nUaHatM#n?KV9;n_;2g$!1"U%9g#gi&\E\0N+/,ab08I(0o"?KEB2Pf9.`Q5I?s)nP[>re/"i5BD,DaP>Z8f_]uF*4$<o0g*3a#<2*3"l-5m43&\4r=M(2H)<]H\2%6E>lDpt2L_!m[t?lFmU[$n76A'm/oF:a=?&#[/^BB[8+)l22,tX&^<V>GDbS(/$5e7/*Jm<]kDI4/qEQEBN-3pW(s,PIIN.(9GUH%5GbGo`2X67,cqrf(pHme=qfE2g(VRkI(uCa.N'25IZb;=8fGF,Oe`,;WB=JJPE`6_>I)<<0+U,%4$e<1LOF,YR8C)EoC9%Dr$9V<%htY<Y4IqHo:ECt&rQ^-rH.!^\p1/(gaaK1RJ'$W@_<!aaH&S=g\GR1,k)+#de*Zg3>e/CV9kEa7g?j#nmYhqQE&[&$/Q/BuCZAUc%m^PFGJ+Vg:\X$9N]\gSk[qXqZIac3VjAhUn<E<JoP3TZT9U@3W<QbeiocA!Aapq"r+]EQ_Q5u-kbXg,!.6>q8HFTAH[aY*NPfI#6%F\nC72M*kHREFP2N++!?_4-4,TCmO$PT.$M!.iN6LYh7(#+bK0K$kK_2keqd>^JI,BAEI`RW?ksX!@@Ciua<R6#A54(f!0`#F@)b%B9QY;o&W_eNI%p&^H7fsL$87qnpp&PN41rkjllGXh"d%/<S`37^\b-)He*fW>+gT;/$8isj9Z7#1]5RLPQ,Op>(-;^@99qolCf$D%[m#+*1qE56pme%WQM\R6:]?_r<s0.VYLaf2a=!``>NYKe1@bdX.:6Y(#WOU'TIt5)++I]e7Nf^9dL/r#^=)G5S"8tS>sJr9BI_4J%e6a<X(7ES@CcoX!`K[+j)dhRh4PWFC%9Pn,e1rsLm0l(,+F(%H3dYd>A@7'b!Yq8T%;-?-+s&A_TP0bhSL9e%<]aA0TW+.PFV\9K%C8![;F@HV.1%iq6T90aFUr3^HbmesJJXMs#\fC<"R>?<m4U-9UbG87@N<t2u1neRnpGEn;[`5Y&Y;Mdn3ZJXj+0OEdms2(ZfL7B3%e@_BsqJt/6MB3Bp4j9eGKD#l3.'qd-il.jB1HogN(.TGY?b>Vo;?>d&oQBWqGU?et1Qjms6;gWNf.3XB%Y6nES[Ee-,0=s4+,C&s%s"K*0_o;ik?^+bKO`97kdK7c3U@0OG]$pWQi)'INfO9m]NJF'-)c;)$eMm^rL8n$^\?ipIg%'HB9S,XM%^b411+B@`68/8=oHKL]%8oek(nqob=5u9sOs!&%<AZls6Tl:O9D"HqarqiqOjN+fJj9Yn!-3E9hRKmfLo:1j!8\03(S"W@&nSgCd%mG`>5e]%%QbDRal'Jm+%6f^'1HBij<dS&F^G8oAQA9'?SlAgJ)oj*WpVt/;`pAU$g,'mD&U&DQkFf2Nd79=?q/0'!Ej4WM:HT`ABeGe\SWSLNkj1A.e^S?d0%r5.B.5Ti5IP#B*J;LUb,YA4<,[Vc+/r,8aOfKtK(?BMj:ZNa*pX"BHH$T(oK[DoNG5/*iM0$k50G'DBdY`ZJ;%\0HQPHXsOP!n3<%[Z^PC*;:>TiOe3f?ZL'E@QLLF5qA)lXu.9R<=RE13+`Cm#c;5DN5PW#*8nM3?`fHL]0#tki0%.od(%[G[)QF"?`asn&&M\lch&cF%gf#^t!8D-h?SlND'/S\U3."I$6/:>7*=n5gK.jl?e>9tm28u,pqQ`'>iNBb?`.7)NhKt"VIsS&G2t+H[#@/=C+5c;5J%TdiM>-7g%pNFp>qb(2^*j+pB*4m7F@eLo-gS@P^;Yi2o`rA`=M*KI*o$9.^qD6Bns%Kbe5LOA*s"hn,J#6B=cSYN3\5_b>E2h?ZiDQX>_kg7\%L.eBB%$sTb)(q3R1L)F.B=Lq;cZ#lUTA`]45Js>GItgUmrsY5dru!GSrdW4iT$Z<EX>bQIBUD8Z_S>s`\q+%(%_>Y$RWmS'_4oO`%Va="CVGT@RA`p1e4IsX)n)s0-HYX$(`l#Oj+4"0lnTil1?;UMbRp/96CnU(G.@;&$0!L99.e)L2dI*]ss%g1b.PfedW*JR;NGKs=%5u!AG,Kt\=/iI7L`rDE491^d\.CXW[^o5fJ";,\MS%P(<%#=%I^GYg1[fh"m1)`msV-:S#K\T1V?ET;,%Wk1r(qCA_m^.b_0tFWK%<;X6c5FW.rQS$i#l2H`[W"BK`4)0c9Z$4X`c['gseUHHATL<QXI35o;*H)kuZ,uUQdtulEcMCj!`#@k%B$bB*4,@:[5RhW>Jl`*h%h@oK1_9Ak&o<CE?Vd?#R;CQg>dPs\!RfX-1kO3k<J0%3X"lo%JCapsni:>oJ9*+q)>f@WHB1fSH]"QBk<a\ZMPs0n_ks$Br3.^J5%V"n)-4P</BV>t4drmg;YBN_i0Yp_P-iN;`_U:^8/$6?Kca=[JA)n(7WNZ6'dP&!D.A]OK#`TLJ30#iX-"-FED-g1$)V:RR&.mcS,%KnQMsG?aN!faZq&cKbEV6I5YmRae%p+3%t2?@+Su%f:aAPPoiQR%:TLC]la!OdK?pr7C07p#Wre/,t*ld`KOZrejk<5>29F?FTmJ%SJMYO+dS6g#qEPkNV,pK(DSl-9M>@f-7n]0+^#<8qG4RVrGj\FV;Rsd'q>Bg0VH0dOl7B(#X-DU@5S"o)9kBqH8MWsCGh(Fi=nic%%JaL+Nm)N"Wqgl<$W_`#nud_REEgEfeG\p6+"^<=\dNq3g?KePB[qQB<p[k=8$PFk_(MUh_-eJVh@J.g0q:tSMpjbQs.1-Jh,&+p%[Z9lbZ?Q)14<B&rBk%*/]@S'KgI%&Is7V%7l]=^C:7[eHa29!Vo`EI?Q5j2p0fB>,s,u-ciRn%alEpi`H1R+?GUXoNh8p5R#P>`_%P8\U&_[U9A(MlMfo&NG$2dq%G@j/.[rb$`qDDVRd-h0i,Q7995Ze9GR$J8E517#!*\2BY4=pTo;s.F\M*UcBRJgD':.:HrPnd9'#%1Uffhh,.lM+i_L.F]jj+f!4E_eW-W2_QgF^8O59Ik7g:e&Me^VSaNlXhX,H`s/<7nd:gh$f4YUWB<=t_HTiFsWLK+1FR8`omaYK>%<)"C'GO)(3IVQm$eWPo#]@@")"^@9EE".[.Zq;D`b\7U.*P!u`+YS%#SE_0]Z*Jb+"k\Rol'`o9%0j=u%5EdtHsNl7MPWo$Wg)(t%F(]J_3,Of<^5)/31rV_S7[@^=2F;J=.-"7W&'J'ko$\Vm,JNX\Zu$L^PK+=SHH03\0hT:5`R4/q][+7Ee1bhej0o5&`]G#P4O`%*%@%K?JFQk2*%+1";)E2)7Fe5)0,-]pu_Kmk<esf8KH;7QSG>#GZJ`WUe`^i^'_(?PG#+Y]!V_g(\*Q'*T2#oGJ0b[m1ZtXp0)$C(H%?,D++[KaTr=]6ka@7?'a"r8Z%.(%'"cJVlX[RR$3N0p]J.0dq:aS(n9Lsc,L]ebsa[&$aAZ4s>h#"nFk)Hk,Xrf=NFmf!BcB&%5X%^9:*b]NGnb6VjckYoPP$%k`Oe>,AS!I06@?le?f@]lC-7hR;b&\.]gA5@_-m=3CH[a?o$c->77YBjHb\rj(cK/i;k$s09QX;PlUE%fRXa%R<EqWQt;/?TDbD7"?&ajb+NlSmPpGFO,"tG/q4;,Yte(R-)P6#ZZeG[dB'09XG9i7SkWQ=Z1fl4VJVHHr/$*A^[/s'6&X]0%MDp6*b4Gg=:0Q+,IUX]aq.b$phFE9]Bdo.H#P,gS!818"O((.QgC2`5$qUEL*Cg9fU\<'.^r0jK\3O\=]7/C/0RDQHJB+38!lo-(%G/Y#3l.06-GJ)0H(L5+>$b-!Ais=GYY%$6Lq&M%t81a%NT*&/=BBRT,mpDf;O&.^/naN;H8]qO1;&KX(l;Ap*k<NKX2\OP0(o)!I%SZ@5qmEl(@$U7V%EW@H!VNf]paNZfA%R@0UE8@Kja*$KSg=/'7[+1VsKer.,&H:jqjHO\e6mceYEicBOWJ'B%9?In-P2k7Vr:lZ#%;l=)3L17#HF@VpE56id2Q>B_9:[Pc'>]MC:TWi:Df&XM+mC-nV%MU4#`q0&>klQn?0+q3\i5fBV<@Fihp[=2p_1#6$N^5"6!#-.F%5V2PC3;t!'4Y036<J%?r6Ae#km'T=.dY:ZF7RFnkXZQSpeK+UMjV\_n2OeU@5uT]/:=]0$C%gVuU55U2K%EYJk$85RZ&A67LLOc5%6d/-o!5la%CHSj&XsV13C1?sjMo$s%E)Ce['6Kd;ZYUh"=WE%=-i./].'3-r79QM>/kR(MRt[q&)Li/#G(bc"X?LTUM>\,5kt.K3%73dYu&5'r3k(4=8Z]^qufFUSOKF:N;N&]t]M"/t\YgH=OWA$m(+%>(Y9WVI<Jd*sB[JU!VnNO)5E;F-`C!"i`?C_tXW8VJTUjA(k%W/5a[K&01nGrW=[h>s`=IoWT%dts4r*!g9g+!f]@iS<f^a)g4':cS2,Q/IuGhn-s%l@TK;(OiS=jfYM8dRU22;qnt?Dj<N]LBI4K%(uE#$Iee.V2^)NrXQ2Nn?f^:>pB@IK0$ioL"E>pu?SQd;T88[Ee;)IJ4EpLB+;N=&3r,005OLtt.`9c,`-8SdI'"h6a5_g'T\@$V%IP8@)>ibL=@3o0m.rO-hr*1iRGatr`F2c:E/q/;k:%p!um@ujPHTNm\NLl7riW8ScXY_^#&*)Y>p">ZrHbI.mm$6VgFL[=PGUuTn%^@5Xja;;#Y*h]b@3df-f]uo1-U?O)pMgTq[qkAe"3".CS%P8a4KO4m+P^h!=@2rfm>Mk/99meTU-#r*UUSJX@o2>FAEKbKEb\bp;%d:K`+GIAScCsR8P\)ZXXqO$I*=/9E)g2tkp0-+@%!pDLM^^M20BDbX9*I@W<WKEd+&$!?\D'Eqon_rT[^oGf6nOrK>b+d;^\&<2u%`+t?Yr(OH#aiAJ'7VeL,GOEkkd66C9AFoNRgq;$mr>gt!+Bs4S1)k"R[iOA4BJd91H2DiT0Q/fInAnZ<aYU%r1`!4HNQQHkCEW#9%Rl/>i52%m;7^pA36eSKeNlTIIX5aHVYuZ<l`8^I%+2&L5cHYWL5H?Ve^9_=:;e^X&IGmX-6GAcuNp10KC&Cl?`;gCncYEA(5)nAd%bo7\RN[u.BplhWRm\\R:^<uZL2(dUQ2gSX;D>kkp-YA?52FiIYegQt'4Y#R3Jad@0BKZ&$hX0-hRPq`SBdG;LKk(h:(Bo`%-9(m[%F<YAFkX1Q;%'QkZ)m+#FD`?a\)r.C4Da^Ge7JbRB^pWR.0;cs.q>$q_,FXVMAEPX%JOW"]7Qpam7]k@A[$hmN)f=)#?^+#%U&i/&%;i+WCdCdm%@tARj02f;W^bN`/lPm0Pj.W#%D=jnWf.7k(Nr=t^ArV-7W7e(&J(==bR>l?pE@ed].[?OM[*e2c[r0m_eOf?.%6*SB%c]@au`8C-h)=p<:dEUuP1ULrOkj@^8`2lhSPG-[aJD;,I!;Pf3^Ph4](6+WtGDGF&dBq<AaRq'$'\8WHZ$pUr2[U=[4t$/mem$e>%dF4TQ:Y("60f4bk_9K^.hD["e4Hso<:THr\ppY:=ADV"]7bG5C?IV,eZa#P2VpS58d<@$Q+I[6r<0g(MXc7$p^X?Z51TAG_UCjV*%e-]p`Cd7Fd>/!3hNUDje.nt3^&5aAEab1(^qELQ05&d9+iBaF.fu#+C5(,cQ&t4g*Zbk0>?"o0pj/eQih_EPm/l7Sl)GPVHFM\A\%P.%[8A)&K>U9HsE]UqB9Jk!<H7[*h2rJ+Pc21"=>2!P_^B4"9+fo)5+Uu0)gndh$p:p[^%7RI\o7'>ES6bL&\Or5K\:&@+/4*\5Z%3ns@"Sc20,WaEa)5t!O7$/,7DG]8V'iM:8Z'M0,&]sBJ>WaD&HLO%\<)i'T4T?f=g`uO!Hbf-]Uk4qL03,/&maIi7qdU`'rSsT8Z%G5]kSBp6:]r_+o85"57IgJ+=6e,ZbO(k6sY'!Q[D_;G$:A*-S]I/J6O9.<Z]G]JeY^%(KRk=.dr,AHQ=1RbXrg>MG.13opuVu0i+%>bhq#It#[-DPgaASpp8apQ$JUVp?gkjng9s4Z,Lk3Q&Vglq1;s+7dZe1Los^3>Q(tj+Q)a%'`huaLm?W(2ps+$AIm!MUg0+iV6mB%aPpo\.%L9m>t]urK#5G"n[A8B`9Z?-GAm=kr`#DXqf[Q]=J?-F9dW]c6VO$2IBhMb!I8SDIH%WsgP[/%Rm2l;T>Q$8kCqSf%'e_`%G]1'@aZM4G6^R>"Zupp[g;,2a\IKF1P>f?3%e`DA7Pu\\b6:PhCcouLIZGR"Ouo=7VB/?jQ&"\R@sK_^mdZQO+kA7]$f#_=]m)D4%?@;A=TJmKtO(il<g;3&&;0HhH]dJ!Zk>'HX*Mc'Zc`k!5R-VeaWc`6#h>R'jU;2aD;KoG03bCP3&9mioUK#o,4(4L6gLpX[YTa%<%Dl>P:2B%(T[r-;_dbu_rjX\r:$f/D?2N%^uZgLE.WmNbp7]XoFdqEB@HW+\oc2Jt-SuBn+"ou^4^Da_kd:uG^hMhNiB`)U<CNM[c%'4SOq?f*ES2N(%e2MlO2BCeUQ%o8LNJi$fuMj@kl\q=RhTK@7s)O7^"$12Z9W-!?*Dqug4,aR?lH),0*.&P.BMn*!HbXRiZnLk'l%ZS'Gg)Tj4L0eF8mDRc]$*]th3#e(?a8\Kh9&2(@r*)pN@;r;jM.bNXi/7A:70GcdD)T<d*OW,I<IQXm8^1&0&l"/&In,TJuA1VU'%kM&Af*m!nRLFd4mk)U.(5Q62t]OM+Y]pT9$V?D3T7?PV=P<-i8Cp//+N\7g>b"(chOgbcX3`PmR,a;X_<G&a7LC_OVBE`g<%jEAg%!Z`KV;g,7%!+B84#=''q"n##9q;DE!A<*i4]#<n2\5R,cdnZUnPU#6VJL@_S>U]P[5sEa_Y#sZ,J;ujYnR8!DFF<78kOB^O_:PO$%$mI.t`+f4>ZOlLdd>++Z@@:Ig.Wpn+JE;+VG/FO^<:+1]^p9pjiYL2^9X[7]lGI:,b[OXaN*6(6Yjnq)j>FH:+fRLU$UUFlLbl!<%Mg=H;7M$NaZ(?`l8CrAQH99]Q=F9\H;2/LYR4?]=lW?r%)e5^)llI?L"'*Y>#P3-:Tth-W>tn^.I_PJXZ#)"k,`7Z)cuR!CA!N`"%43XQ0;"O7'D#7TSg`)[!\9d#@*#0>!rn&Qm1?\&.AR:u+gatN/'pB6tkgp*^SAS<e[gfXSDOO1f)-C:K>RW;\lW'C?V`1,t3@Z@S%NR+u;pW;E[=\tYC,4_+]mbYq?`Tb[DY8&`VeJ6dsT?HA5#K_9>&X=jM/C:+k&RT.(A,GMdlb:em@QU3[A2HJ5(XuG#.0PkfZ2G#6%Y5>=.s&"_<=Wm(aKp`We2^S!$4<^0e$D%#bO6q4p>LnErFjH]kTbh\\R8KI2Wfa>#QR+])*l$b5G,dlECT"UuoVBq7:WDQ#XSqmD%M_9j?a39[r>,h59NC`f-fsL+/2KdaO!@D$si6R^k@'Ss>rW("*769&mfr=O_X*J2U'p`8DY3]B,?)V*=\"'Wq^S%Y^82U2c42:N*%Js_g&[hQbEZ@U'(6-R-l()s&Yf@'">dt;"[i[P`3?RI?sa/Cqh28%.s<Qn=*0OLJgYWGd)+^TNnQEgQ1d*K^8W"Ri:"6JQ3'P13U%((;3tC\P>I"rgQ4G)"9DC7c(rMPPoudu:h<(9GMbaV7^#Z0R;$&bfIe^*AL^::fH#"^H1<2!`5QD!:p5#I6:'L=op6L+t5Vdt<M1%H=ruji[mmL`/W/7GpB=[I@<G@p#irI\3R+]^&\V:LA3MApoJ$D1\P6G+Q%;hZ%I5Aj'ZReSXOH!bQ&37U#PaQ0nA`()$@+npFXEE%%IYjbZ%JA.$c2ur=ht/T/L:-sTJZ?:Ki$a?Z4<],1*oKheDiJfHn9A[V"7QXIhr0Pin7lMX9D2N#$@8.?*9Ia^s\Ek%!P95i;Fm[%^kpUq6L/g%/kK:#N=BM.aYpPgQm5f7a@=K[^a';T/.b1"PD-s.,`@C(m$J6Ad!ig%RA><Xj_h7t(,p09ekp-3o?4=PpGkRBg^Xbq%U3dZ6%*5rU3no)F=0\971t-O<-1!eqQ@tI(cc?H8)SI1Qf(L#:'eh[hQj&UIQq!h&q:$NZ9=Z"V$Y(C>22(\*K^$nSau2'*)q_:$%m>kICpt3(bl7p09?XP#s*U=NYjle"7ZQF;*Q0e!fFDP4[QsCcben?=lqt03GRfVb:+VidhYK?j*%BH%;I9?h0L5!p;!RQN1mtiRC%X;Q-PZE3(IA0K,/8SJF;]t)%*;4q8bF>%$=mTr/4]tYa,p_ENNWong-e]tM:(*llACi;2;[[LkFW3R_+O247Q1kI6LCl>>JCVbO*%N!DOY;bq(,b/(K=4oVk='="a[j0kQC@^^db]#UoL\?a`oQ0HQQ_4W,nC>ACZ>2*OhEJFQpV-e*oLG:#@(X!9[b@]5DC6-\-L]@F4%VE7X5ihqg3WL0d6h%!=g&jZUi6hdlU6#Ij+`luWN3]Pj\d#=aa[9(s"%99hB8+ZMX<@Ok_%306U,HZOj@3aW['=jk9H1-LlHUIEA%>`TgFinPJOk-<Rq/$=Z6<9q)u@<eF(&1\-eX4Z3lKl)cZm+.laW(ofZ*5,>?%a]Jf7].k\ccnj;Dnm.9KDO4d)L%LkmVcAb=jUM\%Z.W?.WSX5g)YRL2Z5(%pYb-qAQe(W=\g1pU28)qP"&lG>0rS`)dGD5G_p6?Oof+JO*]NaOq8_0Fj>u#8Q*&;3]n;X,C04[J.3E>B%1k+%#hqsj(Ko9\nTOTQkbu--N-C$/1hj[X-nZTYFIL$mLFf]&SNK^cO@]1>,_Q.`rf&/iIlWM)$Vi0Q1oa$JZL/ns'[C%A8\f-1s%+.6=@Z[nJjO0,i/U5h?1m9QVPo8YYnj3Io4b:1hi;Bn`uh)D,\XN+@9WWLmtk59+q]/d<tD%g8l)i,f,e-G.j)9q9FHVN%B1#EpD%f1*rK$[4X!QeYu%a7[:p(@E9="sn-3F2HV%Cq25_fI:NP4P+]O53ggfV'0"I8f,EGN(N@+[Y;jDQ54XlZ/<6Gb*GJ*'8SefCbHuA%KPb=!kBq&^K-cdc&Gu@CcM<dF#\H$3[StM<,*ZkM<RqMtF-WUO3\,8:c=T*6WqL=7c-g3:<j#uA%UUa<#No[q#We#r4Y_'P&Tf)o%H=H+),O"Wb.Vjj6Z]Cd.7ggpk6Y@K,LZi;$0m*+$FE>i]9?,?38'o***UANTZ]CcKM\]PQL<_u7:5s[+0o!t;Jr\6s=,N\Md+KUp%cItUj=:CaK"<D8R[WP-L$%$`:FYW[,>=Sbn>3Z,@\tj&DW)HHOgF#?iiIQ:g'6q(OF_'*ir25]a\$[n"\?baumk!NmDEW,58(JQG%QA:YIb!tPtjIp?OUN5#jK=UQnS&Zihr<63`KUf3cVo6h7Zu>T4F#uQ%W9J:<]5$!B=gUh<jJ.q#ap(TN+`hlMfdUU[*Q#OV/R:[7%T#2$=<+hL([t?2e;<'11@Q$+Q:"*cm^!n$Vp:TY@Y&<J1$,LNNc6*K5"sMJ*88g@Y0*Jnt0mIu6KAEV?I[:u`Y@Z?(Z$$>>;ag!%%&-QLDpakbjmTc1:"mb)P*#aJ9HW0GY4S`9Q3Dlu6dQ?XHK0%P)iBlcQ`3c8D5F!TLYM4[=;RABHR!G^a(_/j[NTeV4<<,_G+AOJu%A(@R4XDEno@)b1?WKT=#3f`ZOk26@13Y'A-p<j$nV"]GLmZ_N*"QMPMOBCGAG!>D.QR3lEf(8(k"7JF6cbIj)fuNV#/=9'T"30D+%LB*eI0^I;3a.1tl=JR^-GalYpB"`Pr"N7D?r>-NNZl6mTL0nu:Us?CIZXtYeZPIdu=gmH4Zl:cY#@m+dNq%-*<Nm3?0H;G1&Q?0s%8DToGKp4`,45G"M\u.PYlDCkn<<Z'XJGI;=N`@&mG_`%ke9TX+ACmMqmUp3NB>d:&YmbVn,Zc!?bbNTkgD?q&`#qZ]^MtcCfL[\L%TX`_WRFoLgY5Ek!fGGA#1ARFmTOqA:10Q^T10Z_ka4Wojl+)gs7$NmkiE@<"XtNQ?(@i;oe+S+GA2*G=GS%E>PF[!>J-'n[.gYlQ%bT^QI-+kE`S7Q6L9C"35&[TG+Acnrb/2EOJl"X>UEcBH2AG5NoW;<h^+=(YA(7G/a_'64EQ^Y:H%;[V,Ohj"hW\tj!bp(V$>([%l%)Ho72YO?dBKqYV`OhoFs8$eJ/p`Ku>ZG[_@,1SD3DeY,gAq>a4]EQ/nCk?^>C^e-?<g`6r97iWLQ:JuA@G0.Kgl8Oc]XSci$&?W/%3-]_\<A^N,9kq`&%^V6okLbLOXN*aH>&`Tm0tb6QS/gZTY0QIj0J-JT0s5DJ(e@*UK=Es$/gl[!Fljhm`^jNN#8%6EZTb2-S9f=`%V86.Bn]2a2:+Ej<J.-#tSXKItJ$n]h3%I)jHK3shSj0Ym4<1aYkTf)Q__LJ%\-5#pQ]-]hoBX:+EU/X?>:Eb&[?i%"&_&RlCG#'q%C-8dS,#4u)29!IA43Uqtgq)P)9MYssHT[h=1a6fhnSgs'b\C@[H95@lZ6#;jc7*)D[8/'JbaNh@A4m_&Of1&$*M!AHdmNp]2huk7%`[]fSp4ROjBC8l[`HQQH4aQ48g"nua`B*:hesd+4n;\R9p1FB[LD)'I1Ql2Bq&j2n_t%lr*e;ggX*W"l9uQ=-pouW!B$/nce*^M*%GCEgpNfK0'\gHmuk_j>F4FBc-He/HP7(ZaNBu%5"pLIs:^#F?=-c9.E?$c%IDK%aVU;IkbhO;@;c5eY"FP;te<>t14cbFNbN,[*2%V-[8tL'XTuam+9?DOhB=GO(2Y]j!uplLXIJ,#X,SkZT0.;*A]N8;16u&WmFnX<So(in)s+")T*mVR%]PJ_1s2]!.A1@Lj@hC99>5%lQJX%:cO2j/K1at5U`-L_-5Irf+JG26>ULiY&g:U$ed3*&9Aj\jJ5k[-PR'>MtK]SVGK7kWo,)LFHoZ^`]iP1m1-7j2M.XAM=B(H%nq5=U@c=gX<Z[_l>'T96eGs'nVV==)MkUR]1/p/SZ&lS\@31A_$no0%!&Fp&W\1`!lqZ^I<mKALGmGWol,%=`@,gG[B77C6B2u(/%b4;3^lihdFLIli/p@H)]<XNl"?hoere::NW9jd+/=7AXNQZp0bmH^#jdY-EZ?g'PCK\trhZKR2f2\S;ts-$?HU]'-^gLY,>dKdAf%Csp:nF1`Y,0,o*ng"@:La]%lKDLqPab9)XM\)=SuK\],Z2/:em:9/6ZBQ@#f(1iH/HaSj;X83I[NC$N[[8CEbQ6GP;R#g^T-3W\p%n<.M8&F9V#VC`_*q=kHg66iNBYQqdJ[nkkd;82U!Z\u'Zs)>I9<fOP()QiR5b=3WshriCa`E8=n^?<c%NC>Cl04HlgqR55^O(K+4%2MsSHJ'hB2=iW5nk2jlHAc$LeZ8$7oCu=EM`pp/+_qJ'tb]A@a-!^([,_24[2BLOHWH*0m2+Xt7gO3po86P]M/?2?up5I5>:@ifJ%N:G=WO4Bs&;9d*5=a:OLD`d)pE>L+EplAQ<Ub%^$cE'Y[f1'*09QG$QE9B;%l[b7.R<SAj>9JcmZP@BR,]YNWVriDK8iG[PI&>3J%HN.NB5^1F.@dK8g<P_-'3;6]n`1Lm&9:EK)/s1\0`6u8,1nAtTbUV"^HI8;%dchm_Q=r=cTm>E1F]LC\@sV9n1u6<:O055Ab\Zgn%MS,g"3]#)6br3;=BKDJ-KWH"b\&aH>Ho.C63['g7NR`?[BK@q2$YZa0NM\LiV6f^Z=YcGk9JA<pm9)$0N\*q7l"n[G==Tcb9XmC:%pmRuBbdt`q0C+Il1Q/(c84mZRVDAl\2,!DLU?TnaO(Ob_?Sn<V/D\`9]U$reAlZBtY?WcMc2hBiMP`1fV-=78VU9MR+gt!"S_5oY%0lumMd<'1.e5WMpG-*9`c7G9AXN9^dVR,cC?ZS&p\b<W&BK@r*^l#e]BKGbXA_kaUB#$[!]]Nlg1LSk*E2Xk?lY&=8O]7s6&#k(0%.Y-3/;#qs<`RY_oVc*STE;(mppuF@,G2A[_P:kFLYE!_H<k;C#^,e(JUq<@eE,s0=CCMZB','lQ3A07X:r"gs/JIgDVGm2fl7BPX%Q!MZZ$15T8ME=Jk0&blYIFc2BCc[hdJn:tYOMYG%Xiq<Rf8,HG)UZ4tOW2I`:33nM2jC@"GP"QDH]`^+1jAf_EYaN"()iWERQH`2%PtlmPCH+K31st.="#AMN/[N[RL++^Ck0DbVBLm5X#oL-cmbD3U)_XVV1j@NUDlu!Zd(6IG@a#>F>TL"&c=1n.-5RsbZo,em*4td\%R)`!Ne8t?#[ug'P7D,DQkg;Mj=1Sd8>L<,rCor@-3bp)QpNcY+UXIpXOTBQ%Xt\O?L988(U(!0/mM7j]I5*G#Y9)>MA]qT9FkEfT%'UJRHjUHp=s&[2p"RkH.cOaH^D1k`3=gfB`Qs-U-O5HY&KlakpeH2WMY"F8@2g1>MC8A'QG;H16dD/r9DqlnJp0/$N"kJ.G%XUd5%[^EYE!MM8MZB1Q[YAZF3oMoj:].?6n26[=^BtdYQ+6qVV/R>l!lTm\;M-G]i(d1BTMbLZa?O"E;F_3>?E>uu,:]%W=,nj:bLc5&8%Hi,CP'=]+\5R(<%eYJee:C/0:XI?8[,c*:gXefc(mQqd.!a-e1_0LePa^4RLM!ci-aC&k9-TUVG&D2\md+0GY4W-:k\6CA"p!O`G%jrtmK-UX(+G=uSk>:?)a/lUUfi]/7';pL]2a$k_E=17Xa1Yg7<He%;hUTo%O3a10(5HS?<KFPP\OTbi&Kah+gYc=&mo3rS>.r;;W%,orX1Dlk>VdIFF\([#&^H<.@aOY\3Lee2)3BBeVjeA[sDEJeZn$Y!Qh;[hp]X:=QT#;P1#5,30."A@S'046DbR$qO>pe$Gu-7_pL%gBTGfr\/6,Qr'RHQH?tEeTUP06'Zl/E#3U2`3clNj,,<l,iQ>DfA.7k/">QFK:$cS1!#r"+3([<@#2CiC>WW(KuIP,hrf/fnNBl+%Zokb<?&WRX^,**a=G@P=k?U'LaMldEIWh%Jf_]2rkoN]%Wqk;uU?ErDomPiZBI]?(9JP\L4R"V"hL3lOfgutOq-^Yl=[bJ8a1.ir%\\ncn3bkr_B_6Y53#S*lVp%G:1*2A&/L<gR..[GDIFmt.kR4k07ijktp(_Rh?VG3F[a`FR2KVajV$g!::B^]bV,(B1>'r]]Am!fA%4qHDVAN\amp(jtE_@,ghT;ELh4FWHKbrWICr8H$Uc/#j:fdL5'35*c!Qm!!0E7A].2;5=Y_cF9V)HB/R&B&OPj5u]P7)TrCI.4bu%=%@"]LC78ji?@^YM`T.%%)^9X<j@.rc)o1'phCOsB,YZd7\s*3EO2o";3$dJ>K]K[j?W"R.L7])chh;__e\U@2EIGb*;D'(oc:b7%YB=n9B,#b9s4/M@=FBK-%4+`l^!?HVa)]9rO8ns^I"19\1@_4!S[(pULs0qs+EUM>9V?<+3ajS)g";`:WLB$IqP9HY9m2.3MqLFW%P;W`Tc?C`R-70*.M+q#5>Lt@J/fFEX9+/=3=[u[rQsHPR1:*53P+]&A>`Z3;l)Eap[E<OTLb;_3d'_"C.P52.>V-\Uk2;pnO%kpQ%&O9nCITd,?0=mPFTO!ACSX5Y_^IY7<nn)CCA2rfZ3p#S'jg%O<h.J?UL=2]>hcN%R1-#d7[;9Pe?7]_]H-,)[oeQP7A83d6\rK60%5Mu>0*+img\@e,5Sqj6`QQ!o_ENm?mHE`n1QF5b`ei4"U<J)XTZRE@FVUPo+Y2dKk[$L:<=`Nj>q-ge0hJ#BFhqNDmJ"?)a*J\?/%etjV+9,e'FZh1CZfEC"MG%L0P['H\S?l9Hl?cZa_&2REgIaTHN=rF)dED_"7d?1JQP1tS>A-TTh/8'k+:dBeW%Mjr,H=,a'"7n.]%m/LUtcT,qfNU+1JAa69kjKV-@!VQBI3L%uj;X.4%;]<9>^Thd.J#1:mj@XK#R:@#'\Z2ajOeFNX?"FV(3QCX"YKV%MEZ'Znk0mH9%@Q"7$F5b!%dU>PK>-APBkV`Xlp)F^c-pT.Wg<)L*Yp_lH0n>M[05F@,(BXs?@`q7B\r?`4Qc7/U->m;neX^oj8Tp$oF;k>G.a#aD%*,]6d/NLSH-pY6rJ;`[5<kE;D0n<mq*fETrDc/drN,7fPb-sVMVaE#/*QoR+"d_t[9./gWbK.-kUjQ3jCqWF94H9F\lU]/gUqZ]?%S<V>P>LrY6nlb+Y>U_+o^.\#rDcP/0KTQ0mKa'&QrR`1:BD#L"CoFnWI`qN'/Y:S?8jPF?j4R9-UG\PNjW^n#$U:IFjRok*lKA._%./UZ+Y0Vi+.Bf@%6hY.[Xd7SbhIR:&=[ud_H\(#&K4p+SIO:1^N8.l[;f\qsCO,mFrL#c`b3N\)1k=4>o(oI9",Kl^5PkK/<G^3u%IVQZhBt3N(nWaJ0s'R[tq3]*s_N2onO'9dK]Yh@9]RD4,2b[8eeY:LIRY@;.TQ6CNcX,/P]V&?Ll_d)(d0k8c]RGdX]J#c+c_Ql2%'=V4/YFg4pescACH2VP<<(KFB)Y3`%;:@Y.+0d2s-VDTDX.O\JabkBBm'e0)HX0-J5C80$6C"V7os8_L^)b'3h`C?)foOhH541_F%bNifUd:Eq@\l<!#UD(=)X5>E&ptR5'[a3"'ngPVP<kn=gj)Yjmh*c=oam3TS7Eg)4Y*.D_/FGgIlDJE/KtMjq17ZPQ[qo$46X[9P%#][kS2<=FO3e;$/H2[)j=C*BthpT'H%Jfd"-UZ@aIS8h`>>UYE4hY8fYMV[Gpu\pZ=^/$E4Aj-WX.O7iirXN)ee47VU6rjVfLgGf%m'HO?F_[+3?GC&fI>d:]Z`F=7Zdt8"cWLNoQ&fkF@!H]Y8CSsrGHmM_o;mD!S=OPaf8kci19kWJ=l:+<lXqgSYcHD;o(q$l'$pOq%o(m&31K3%&c@p<Qo/)fcDaD"3*b);DqDmf*lcJI*]?W%m4_UD<cX&;9q:I0BrTj^*q45Ico(lL?P%=6lg_j6KYFg5D5I+=mT%D<F%+4qdKG2^)_ee!I)!U%-AGBs/R2fO`'[EI_*ZX4^7U,\L`lY!I^aCLpjd#'rng%J7n"m\NLM.u_E-Hd88]<G>mA8TE@hXTG6[]%r@%(hklZAZ\@aF'dA;?>&g9%p0t40EF$6WjOQ0.e'5<1$,g?>TAe80"ZnoFRR<2cO9!L.rj`[UP'"@4B3t\IGPn>r6O>=*uKTW40Q%F%?Yoa(+5T0Uc%Ph70-A'_h4Git/q7qiq)b&,/&rGP^,#%5q!(9pauAU`9to$TpuKbIneZo1eVTOLYNt"Krat`o_;Fh4*e4'u5ND4,%[fQI_EYIM@hD`aTf@Tm1^3M/%q)@PeLOVAl>`?_`1,kde%sQ&M@;n<"2:I,u:21^NK$,T2G4%c1SJoqpCT!S]_qUNu:L@eiIt,1t%hX)'Uk?$3/mB7W3`^Y\E%;balrd$]5IJ3Yg?ePn8:dEnh15_^<i@,pYDu%QK[@c?>46YPs:u`ZZ9<U*(350JiJUl1'03WUV1FXH3%4G)7<"gG:P"H;"es0hY?*03mj@6@GKhgDNqi-fiGg,\4EL#W5Aq.Ll?e[*a(AFh\S%[!eUV7hN=Ed0fsqS[H?V@R,K0DP*TWelr;%n_BNPdHb6ID=l9,[LU[dIEgWk$r'rS=?'!`IDNVG\1c"lgd8qralE,4Q-u0U&j/:0]19U)`Ps>0hO_T:S1g=t3ki\WIE`T)h*`K)%rMC="Y0;E?MdbP5>=,8:lk[2b:4Q2!%sJu,0qOn-=Zf8cHFXq#OjD>Uo]u2eX7\ULZOt)n93[h`Pii-'%UT99$n/m)jUca5(*r-*%5B_LnE#D\/Z[jN07e%eOINu!pJ[iM&h#@,on6D^5kPN0:,_(2cpO]oj1o#0b+;NBIYTl-[%l4`">K)$eTGU*sWBLq&O#K)qW6T)f%OR2Y.V[q&Uot`/I0Ro/HWr!t,*nt_C(r6_Z/,0_*G-rAYn;`1K;YD)"okXiOQc\t14h)3qV3JU^U!*$pXmRMO&^e9a"H%koN%Gi"%0*+P0`j#i01h'!gBPPl>33Xr(nA:)9DfE*-1-+.cPJj"srCH/>CBXX]]hN_i7Ld<44SR3YWf=a?<o29`KB+8/=G^h\D.c'<4#`G<%Er;D8R=qD;mk7e^Q"mLEoke4fb>`45X&$![]<.39<Es&'.".4L="B%fno^qg;,U>e;;DTsIppQ1\.nJZ4T7sG<j.Ft??9%2YD6.`%*I<W4YP5@OJ1-#"RMqjB)br]rpNp4kDq'F'f98I1?LIbl4NQ#@1fs,t39^]tlW:eE]@7uT@`_rQ8sa'![(V6.+8nBTNuXklaRA?:%SEu5<F1H-)>!UIZ&7\aqE@-GprLkP2.YL;f@X*6=DE6eM9^oP!.<ej2<LUb%@j(I^&935rf9@XIi7M9B.3pN^E+19m'Lm2W+/-"A%'T[nMFKZM`U#_e[iohVc8B6PoB5S>Jr.#ss=>m+'"&Weq!2;P!ZToX+WAf`j&J3*gSL68kct+BK#QrsE-@A=>]V]5^nW(0L60bmZ%I/D$0i/I>8TslbT#godN(G0YG`03Q!JSJ[>VMq^)(l$^,@5SFFi5(3iMCd90@g&]TMqSbm/<#HqW?//ap5mOVASD\Q>eraYOc%.g%+8+fR#"*%XY8fB,mX2'N.bi8W2,mmt$@"=@D!as=e(6tdkku5(p*le=WoI90;]gSfIIZ^-IH0k8l0k$iZ`0-/Uq[3&_nC+N_^G9K%2$NSl]2_7NI&m882+>/=O+^'t1G<U+a4H-.^F.Ug'^It17#IP*=R$Sqf%lQFjrH>P,uoZac)?TP]8-0-RUWWL>uSLc),]s'*jOS%%\8kM;Wrh$To`f-RDrU)c&8?mA@PBjB.1CA!+V*Vn=J==3hqRG"%F&oL\!t0X*Gt9,NhN9Dn$_6!<0UF$7X:\5h`F]Jq:=:mP-uR)%A]<(rkXa*<f@u1)%)o">7qo"T^7B_Cr@;BOXiSug""F7nh=rqK'$<)9Gu!(ZC+!9\i:'Po4k<uWC4:(E<9TR&\>8!i,h>7@>m5$1%o@=u&N3IR>j$-kbbL6+=b:X\Ohk7D%>q;^?/D=PF6F2^OZoP0M$RVmHs"'h>q&l1@K7]<u8Om6hGLLXiQB0&OThp/c77pGM/I\\I%YBFYuk[E4mP.'fd7;+?..Z<[$[DVPf(q4CIdI0;)c&IEJ7r9N4Tb]l9#Wau+lUJ2W@PF3u1:)/g-;8/N[(+fPO/g("ZKYkM(<jKp%:i+_Z8C/5cH.(Gj/=JEOdU`P!0pn(#m=#aGV93q]2`7:WEV!cBWlK#^<Zr+.c_<`!7IK5JIinXSPd#RPcB:R(4`c`0RLR;F\K\J8%6_qr(B3:SrD't&QAd%nc7PVYDbo`-Rh/Q2cJfn8`Ug)FG.UX2]E@Y,14i8Tg0p$[B[!BL^2Du%c<PIK8PfDb^@>I@;VHfX-<%<@!%!aa_SE9p=D^3b?ZSl_uV"rK-5[`]<Z*ou)Ho.HJfh'W6*WMKlPB8dZ@nNA.Jh8[OLQUqk?_e5dY;F.uVe]Fq_45'^<l8_[[,ZA;B%0oiWe:-a`iQocFJl?;r!U!Vb(W26$<6k5,QN'iH*?m,2sFS:]='g3+;#,<0/Q^LXUaS=bYVep1-$/WRP9kkTX3RufI%NZer"_*2D%EL7ef<-sI=I,?&+Ke)4p0X,r'^$0607o$-3+=Kse<"M0=r%&Ck:M2-gme&gN1I-1'9CEPt=b-T>nZh[X6,9'jL@**^Yp0fH>7;'`%`S]WZ1`:g/BiI+U#u:j3!SGHZJ3[".iC9ZnfoH1;E@/36"6)_0cVd,$ll0tV!ebRPiCO,<i-jq^f`D\KX<==rr]T/.)'\#HY[=#:%'g]</=B,p\.e*5"X!2AQ#^^m5o4"dFZKa-<L'l/(d^G%c6GpSRkl(A7K&!BDi&,DOTbN+2!_=W)<T0YR/OsP$\-d@G"X2%r4FWVs%XNk5u&W8-oc:0'ohZlLFp;;]sQjr<L+qRR#B][P3'lY5oMF\K@>u]bPgK#K-!2\M7(D/NBRG?<5CU-f#0'Z&L.deQ@[g(:K3B`t<%0C$_p#bnDI$=ne0/<8DCMK>.l(HBFR<h(/TJRp5hAm5GR,.V^qK4E(VAXqtY%j&Jk0>s,(*\)t$/+Sj'\=QI='j9TuUj/#ic379[%lrh,J[LXb<WiNJU.nTsW`63M2+b0EsFFj0.<1b\Y2DG$RD]#q.kXN4#]6fXh6IlsciM7m$b'lWE<PAg?[u']o!jr_nN(+<;"U.1C%4G:o3Si@ARF1^0\Tld&jg"H7g@?%mZOW+&R<gji7c,j;eAp:?EkR<;i\21_L-Dpl_Q-pVcm76\;B8%RW&I?mT(9#h80/OE)GaD:&%Gs[-<Lua\;q=_Og5JH;><J[mi,,_f]O^He&"V"ZTJU"p!!.,u"4D$XFG\]m0n6@0G"(9g5.Ce,(V!g8.^7s9Hm%pOqWGoio6Ki<)%FM>cL1sF;eg\fg1MC/=O1A;o5S1!0G8-uJ<Q%bZV9>VVs6MT`L+@M*Z,2$0Ipp>=(b4U&4.bKQniis`i:NKOTc=Elc42V;8A>l>k%3&ueSX9u4<.<dqW.(^;6drcYm]'!^OTpE=7U>bP'V!ZocMX.u@'bGg8^0kIV1ZgLe&Q*@re%gSb`2]cA:.6Y.V*'6t*>NgEHF?Vn%g!03r[1_M`5ap#r>9ThJX!$NIVcQ]=9(I2#<W8c((&.K#h;p]L9cOo`(RKdd:q*$J/=`l@4Mn178:f6B:fhU0EV:6o3LA(tQBj%1%,</cK#hBsko<_%ORs(#Jq0[JnYEbSCatM%q$GSj98d\Q+^I_DNk8ASlMBm_-@>sP+@Ho-K/f5D(,;HS;h#=Tc2s(kiYXJ7mG"QF?%/q7$]!O@Q,`8M_'`AWup:6j*JB]Hd;h*,ijd6?6[c!M0W9#l)3'rlGl2BEt,^R'!"X6WY9d!6=HM2S6kQbn257WHs$VDk`YHbp(/%YJ?YlLBA@Q8seGSTb&\;4i.]ej.,@)GD\-2ZibqC6b):i(q]%8W/aKcg/H`L:),fohkRPa:6rh=.!LQq1]h@%;\Xj[aTS/jWtB0K%`q8q0i#0tgL/L$e.8)*5/s+//\^Nt?&=<Oe%@WXT$XSX"mn6\,/--7J5U7.5^P9<A177%arLsXTV+<Ik&#_FXqVJ1lW31@aKNV<E%>=gR=H'oD"LHM;ZNFr8dhd_QhU?""g!-p?UJi&R64qt"'Odeqt8Dn04HGi6K/+8J@JiST8p(*u$pNB.%HZU53/cL=E#A$8Lo!>*N%!0'/Wd^m`P^):-/F[e0\Gi*\S(p`<:]!]tP9<>uT0Sa)H7*(NaXMQ43rI%0giJpEu^7+Qt[2"$@U%@DNS4?tC&NXmh'';:X]Hm.H%!CC>HcO%"sBO0X1BWZBu-!&t:35^t20!PD;L^aeU!j0Q;>bYAjjMbO,3,?>Tr+R(Hs#`#g(db2Q6k"K#P?HQ)W$0iiN]>)$CK?7=%NcIJ@^N5&e>G^-BkqO[)+)tX0!Q5ZRre(i.r<*pflO2W3)-#uu!V%_?#'Hi+E15U<*ECb*W56T>7+f/aHU^rN79)=(i8,5LiH4!E%Lg[pBFaHQYSR:%KI?-0fKH")?c;E,`6>QH/`#fN;=rpUJ8<&*">U>*(fc]uq!@gYadS1,=N^RDE,!2jR3;0GMdWj?sKgk*5+;Mjg%>trJmP:fY<T>H!i41]ErRFT@oL)A,Tm]'r-85.@=jQaqKqfea#hS^8G$+<$;ddfhqSSMT.Q&%#mB]t1_<&E+XVlGK^U-Uf`iedqn%V$?TqbJg--(:Dc*=I($&f;NB0<`E)Z?VrZ,m-@X\-*#J.U6.pT1!L%_,koV8)G`;Z1LNnR]V52t>*SU<m]FJJ<6ikK\drF6E.:Ye%E!?Wl%-Uc:.qdcKi7kTg3ooCpbIe^2=:]$e4''qF_9s=.O>-f,$SGqL=ND<[[(hhc@Nf67%[5_:,IW!SZdQr^4Mp,cdMu]@,B10D%4HBJgETRn4Q&qS-JCLf'<EpgiGm("2A]t_onHdM9QSM&^A;icQ\VrPc#Vf@[!8fi:Yhd#9r`YsE5V%/%"F0eu^4*/d&k&"<pg\93%8/^%g?u;N^[`=#"*d`U)G&&7l4Q]hf:`djXIc,I8rLY#2O'p9Rr`;dZQq%.pXLSIjHsFd(WJoqG1KbnCd5u%*Hkb0[8XT#R`Y4MU%M4[IT8P&uH:keR),)t+BqgG]0\`4='n-Ejrq_q68WjQJFP/NnWa,m`*pI^5VKGq)/(aTKm5AU](pcKH&8YU0UMSou>DbQ]I+m&/J%FlGHZaq4ngCR-6ijG5g#ho_+8)3=:^f.BR]nVDI/gJoO+1EPNF4)p+#qKV+=%>)\p8J9KWfI`02epY[e$MP&C*LDRQBO0[pV<r:T%[3UeuZbL*D_Mgu-H<IR"@4"M&<Qnd40LC_\,[`0Y_Y\,L0X!-[D]Lg07Rm>+=@geCF)4>".s#&>)enhR)G%&@Z;bLe23VV;USCWD%kt9i/On`=<2]VK*c@C49C_Ek0UEHuJdN[fS2Mt5nrb8H+j4*4p=n=J-GJUtKND9l)"H5TdRkFso'uc_2o:dA`jphic4,[g-n)V`B%[[=h_hAmU(o!_i5>0KeV^%]fql*9eu*R;Up>MoRoV=fDD,LtnAStTn,&EXoj[2lZu+Uh/PZc2K02;F[Q!233^8<"H9F@t6mZCT%k%K5/&1#t_)am"0AEA"e^lM5:Var2OC0TcMrb)'T':p0'-tHf,/*SV,b8jm<A_M&IFGC(E*[_'dQ;dKKQe!EjIP<KcQciW.9Fd27d@%.2p3BD"OR]4OP!+,,ib+Zp^/F,Fbn\6/ms*LH4m9ne5NpQ2@1Xe?V3aZ\LLQ]/h6Zp<\'<7=;2dhlBs;M!Cp;'\\n#a!U-RUlbPF%$hcjI0j=jenrAIF^RfjLq]-.8JTnlt\a5=\54)kiqk!LC)BM,re!U*@>@r4#le0Z.OcQsJT)6uJG;O?Wd=g,D6.CBRZL2^,M#@+l%Msl#Hmq?Aib\I$Hp,a0Xqf[<)le0Znm$:+sl0,d7Up,XO+qbN_LZ[<F<5.;%OVC"A:XX"t=gX(JpN?n\qrldV:ZMJ_h,9bk(UHd&%BW.AR`Lb(qFu8h,pj!`i4ZaQMhm_Ik@!=Grm76(-A<MPsPGpi]@H.P$#JI+!>k9ii,lQ1E6cR(CLE8?H0mmOR"J"a0GG?P@1QObG%+`AALHC(3q:0Y8WeB6`dOgmqE&K-47T^3qUe8RIp3D<Q_KR(@a'?]lO`s7)<-N"EP<c7$'-\d:_I=YrBYXhR)&,Njj$,`I`$)j;m%:6)oEm[4A2q#'2rLd.?b=,c^m:+fL7FM:PrfT`gfb=@3nI!rs-5UJCP\<JX:F5kq\Tj]'_b[D2W!lpjgc)7\\4GPp\73^Pd<=H>)%G8E#;iiXM^XjptXI`\u>%sS2;E;!4N\*n%W,D\0oc6[REItrGJHQGI`bLQ>M9mB'(it94b`!r%e\%0$/&Sac;)X55i,7YL@2M1P'%Q<YDDA]Z19$F`Jr_G#si9O=nJ@4"KPgVrH@6qN6+@I9@66?I!@`Hr5j=YRH#>QRq!?,W"2GYfi^Smr:XKaJGX>#dO4_mlHB;4NXT%@V,8+dQV(Nc&4G_.lCNWU&F)SQ0riQfN?OD>:VR8-))2SCLpsW=efng,4iFU<`ZDiE1OkJJFaJ$Hg\h)f2:Dc$k-)1_-VH'Z#=E>%+7,g/7d=2LI^#.[^`2S30[@fOg6iDOkccSMJ)96_4eG5F-AWI'qk=Bq3!O[H#'S8D_A\hoa6uc<=H+bkS]!BI6d.9=q)uHA@gdom%i*C8C7_7^#R=Z(M[.m,R4B&a1=u$9HV.T*lM;Fgg2X+q:0SSG]YD<>Adkc?Ji:6ij8d/f6MY?o8.2A4!5V!Ud@?)dM8$"O:"n>=0%SUu3qLjho1;@=]G,SI\9F_nnD*$A'..[5X1IB/7OZbV,58;PnZ7/&HEnB<'#,1<EBZ1rTaF2PXj_5.Mc@rBp=mKn8dpKY)43@Lr\%^S4M;g'"dWf-g&Z]PGnB1i3;)b;JPuhu,\oRfgsZj$K@\-e0hbF.aClW8=q85(PjHoq>Rr`7FY"#W8Fk;L0:;i"6P`>It8r@<7Wl%J68-G"El!<D/R4NQ-K"LlpY1IMP]$_1Xd]_6CoG66ga^ATj'"bpbJSiRjpFr2iSY>^E<_j^(N?^TUoF1MSZlG``a^sj-9[Y]2F*]%Fp.!4+['^$3=mAnICu[*U40LB6MiI'eTNU1oD76[D_ASI6071pGWcD'(m0;Z$U_=+/ebf2EP$q@C.W1Lh(ieTi16#+Y`-WoO3Z0X%(t?r)gVQd8Y$?a""Y#u(c'+I58WTL4-h1=XY0QB;I"rC4oe!\o\bHZ41Ab[1SEO%IB"#`o_2/4;p\!K@_l6?:K<H!Or(kq397SuF%)M>P[VO]i$k5d6%0)GHeF)r9o)4^lJ)8G3N/6!XL\T&b![o-#%U@BW94&Kt!%[)(Ae3;k=+ULl]*h4F.MV"Sf%0+`McABfk<f%k4%\o`1p;^@]0Gisd!qn=@!DGbZWn+2@^Oj\`W8&W6@pcA?+?Ig>fcOZB4L]B3bodh*nNo#d5!^0Q5'ua(p=$r_5KW!Pi^D=S\E</KE%>DJ1nrbK'r8`F'9=q."SL=C_3`aU$"k::?p=N#b>6kDS=*e?Oe<\00$qcL0A+h%,aGQ>$9)GHSWYoGg<e-QoU=bf4;#UW]EQ^\6r%7A3nt.H/rFpmYt?"n6EUi"c?:bC<Nr_"*&smgG^Nm_N>U\%ZfCHJo5oKsl@@Yu69SgTNmBY!osCYdJ[Vb?lkNH][':22-_KAWHfm%C@R\];-]<R@]?.gjPr"18nOd!;'p`6(ka<=JYa&jHNo5!H:#2N.E,E=&/P[GGS08n&4Kp11i;O/rI<(LU%9C1e;CLuYfKrId:,RC%=V*m);Z=+7'L<:POM[.o%sGn#4'rIm]MHE'IM4Pi>:H'MMHf(En3-rYgP#kWcqjH+5qf_S6m#EVi=m4:F.?t?<9Kg+(eNf3=2fq,%9A=Bmg0>1[@o?-tahC(fD*M&07UM(H=,+eVC^0F?;=S"5nCG]8<]6'+p99c5D9A?5HnG/;)U9W&T(;9thoj6uokjsebN89C?M!+;%qW\qnP<\bp50"K>KkK3e>Ur1-WfTE5A%hkH<#)uhdG'm$43-@6oe%e\qW<(o%efa(dV9u?9\uOJV(`[cj*:S_Sope.fX3p[`,"Ff%lHO,$<5N?654)e3,CD1<Cl?PE,E6j,Vl@$ThP:_be]4=TmG\fC&O-QF^r&9opTq*FK*of6fTOM#8+RiV+[1$N!\Gf)60pHg];'[T%#$6pDd^q,U)'Iih?,nG1^HA"gf!B.n5h2pVmb=0?cEYm"E!5nl%D*6C+=S=]GdF[t<`CfgC>MeQ;'8-(9j+J,*kt&B-[Ij^49_I&%\>(G`E,#`0o[AZO]/\_o=]g7-N$5V.o(YmU+KEI%\kL]Jl3#I&LI)$m?AY6Wh0j2^60aEL<>5^n\,r9]3GEiqh?C7E0$*t&^,)WN%.X<1g^7I[O5=%&.cp,uLECs=t<>:7Ef:j+07'QR0G&mLX[9b"(3^d:Y'i\oCKWb2/f"7V)&CU8dq$>DG,fS]j:'kp7<^fsM&Gb*m%9Z&Ki@=\3ibNF#\mRqn`2>L8LAKe.R"ZiO_\r&)HIs<[7L?FjA48319'6e#7ito2<WKoJL^K)gM#"RD.YU?J)\uW#3%^Yc0MS?J=%YXk<]dJ#OMjkjB>a[+6b\>gNI?8(:e2A:HE\(!h'TW8MaN@KG3;5*h$3\_i_ck:TiV+%[D5LHPMT82(YL;qZ_JP_5X:9`HMp4W-<%%3cS`,$HKHLW8NZp$@%a]lBZ3.`V^GL@3TR8:!Y9U&8n:T%5],WP2BA3)GTg,5N\k.2:>"/[q=h<Yi.\:mCoBru`WaUu'3F(uTd\%YCf#:@kbn#_W?D'`!89.V*fHudW18$(6)fQC3of<G'?Bc<`MqEn\o0:)@&WGDJ<n;lQL1KN3K?2p:/R!.JVf`E>K=VP:53a?s%5/%,u]+Na#dgN.d>nFA*j3)h'o>CDX7c*?9A@pA^K2K!In?JV%H#e&)lHP.O?/aIi/-a\^+Y=F:ND'kapq'@0*G<@U-)_WNc>5l9-P4%AU]c_HN#]feGC[\qE4j,9h-K,*62\Y7XbXLdB>8CQ%',N_F^<h>Xj*eR,,e5/Hu7[5pRnFUAZis*-gR2aT`,[(2&eT<r(&T`$U_D%LNl(_&Fc6*APY<HiUq8!Ln+5i#jCHGpu^>QKB"?P02gCN`fUD+$TK.Jod1gtTL[Ob#lIU:Ngk.&I%//$,DHniRP!HU0&I#nd/<]n%_*#2KkscrBU@VP9)bC@']Ys&kOjHF(!'M2n&HqV!kD%2,R1j->Y0kom@_hL_:5lm5(*)l3Yn&W!,&.I[`UWS?QY;piiP#eiW%pE9%Et9^)S!C"\II\82IKbh[q;&j.:!BDQVj#NP"Cjh`nMHuniAI2R8<\e<iPQZhji9$@M?Jj6!MDk`b*<&:`*cq%i6=(9fE\AM@g5I2%K\U9Fb*VO)lYM5gk`i)lL_H=arCTE+T=KIs,9hs;O2<$UNdI,2BP1_@\qT,b8_Mdk@dR#$X9Foj7cK24WLp79*.$QT2]Nh?X,EY@%Fg'H&+HcUOVAJWNI6>?__o%5f?A7]7MH/:S9bV%ceU9m!4WqImU1LV%PgfFKd"):S_*]limKkb#ndHM.,iC"LaS8`SCE*UE81?aH%.7-3S89KdVCr>6.PY)Xs38^^6l\eUi@ZX"[]3\0"QMf_I2dheX3"/BVJg@\?1_pb3KVUTV--gQ\['ohWR+6af2kd^m8#a>jH(m78%ms+c38KQ/67>ru9en&u_.-ib)/B2W9aI)fBVqF#VClA]X)e2"'-!>p8W-!k7R@LD@fBaQ,E#<"=[dN2p#P:;.`]SL6]cPT,%A%Ej%m6ENJ,SinIjm$9A8`n1&>ch[2;-sn8DoV!IK;4H5B06Gc@@U[>gF[>3lk7>#&4J,hk@@S5Ln<4n<)T6?'T)Cn&L2!o#r=ZXjMCO:%TT9RfhNLPD#9Ca]GC"3Y(0#=:51Cgq7`cpLea:EFb-/XBi`EF+VJMi+3I/IHS!+61F31O^&$=rJ2q]3@gp6^?3ZdCdo7K,fdC&HX%H6p(YfNOVRgUrhO<-i%eo">WDd^G<ukk@`_0-.kI#Z&_d7D/SbjDi^jRUZ8S<B#RhHZ^f)SIG/=rrV`3Lo=W-,U%2Pj*Y'*Lch@@%d,_!^W05ICEF"rQn4bta@S)rc@@3iib(8&94J=:43.R>6P1O)p_/2`qoLK7IXrCP.2n\h#X./A.l3BF27MJ!Kp_>"Ni(Zpl)H%3A%(B%q?PqF;m_tJFGP;,ngjSajE7ZE@aI-G<_aNnKkT(e@28=YDL>tj"0q`b=W<%9,;drG#r?-[ceph\aaljgZ?c`W&Hf*1,Fcl#m(%Z@"8(4Y7,tZbAPhHF$p1IoWT%dts7C*d2(4KL?$B)#];uYFqn+AP4<'N2;S/or#6D\_elbn.,an.5!%!p0hIlP2tHTK5KG'0CmX^%O5<'0^@3\#"hVDn?^*beZ*1*$_I=P:#q\7dqi?*O\&pCI-h07D.BH&!4b\8oFF&%RS=(@mCO:91b4%-7>96!nnp&?TZCg#mA)>'^%8SD-;9@G=%94'/)1mZ57pUr5#qcZI[^Us4DU9+k^YOF.i&jAg\hL>,$]=e;RFE$aYfu5an"af!Q/Q/l,0=`"3?&Pq2mF&%tgU0S=%5CDG?aR*/!o7o!.)S'.31iL3A<[5(hO`#BsH549lk]J$Rg4sQ/0jg2.roIoP?_P]p-cI<QN@U7HqP6La)HS?0:$`NcgULmpA<2Qg%BO<'4`689.M)aL)k<So%?R2#N2BhrL,M=_h`c15[N'Rta1aVYl#l68l#uIJ\*P=?t0M>L[U>`Iq,W^\qHS'5:g"[0`%XfuuM+@1Z%_7ORI&I^4nHU!K=>8E?;(sDO'<\]@2n,RP69lNt*(F3_d,h(U9.`fbq$LJi"LM<*9,Ke_c,J[EA@uU%#q:t/sg=Y?Z`;;:Q'ZU8R%`5E6Xan\3M!ZN-;D"G^ep8SNJ8l/jr]!Kj>3c('g'5Fu!$^5Cn;)[0?4+5>?*:Q,K1b_cW3&ae:X&qJ`NQ#]/^1FarnTZ^5'"1Au%RG@H1$X4o\6$q?_!RC;V0i\LEql7GJBb99V'cEf0Y'Y+d`c<%Aa8s:VHLLQohKp)\h6R,kW-`l0MSBut(7gBiUQ,SO[60E,^"r[a%AMQj^G(_r>4H)6_OckLIj4?%@Op"4>aXBH,>VZg7Z%ZuXlBY(L"jRA\#[UXFi9[*B"F0WmO":i=IomikUdl+)LQViEP.X?e6(HCh%!583U5_*E\MTM/LaCTi*'F5ks4rL1OrSca]X7iHL-RE?KG1lJdQBKbX%kjH;'^Tp'p*i-6'mTXt<IDu@KrUN@@.Fsf<'^&3\ZGpQ%q2cI_f[BrrIo36X2SpsR"8hb[<+)@kgFC""DrG-/fmU[H+'WS!2d+E]cRm"E2c[YbcjHam@93\]**/_Mcr#Gh(#YU\[T-k8U"0!9%oS:7\AQ"6*f`7Y$Ll4HAr&26u&Y`%,dFp\4.Zg6J6CP%72+:=K6YmX9_U=BIXJ?^tNE(pp]H\ilQFuE^?,.1K2QF0:`\!CDOLFYF%.>\2.TMi)d/SO7]U[a<qf@U@+aPq><JLjq8h;grCag5'cZ0GsaWo;T.P>`K5h67;'a,F#[E2+/&;2\J"MIT<Af<-D=K%iIC)*Z_[%]YF;EU\OSG^e?,^,.k%Q]p4JX[N\)GFDN7\D^UH4Ecno:j3<R:&0Pk=n=nbl)M#o1*K[1+W=F;2:pm)GP9K)ul#48&cFXkXIUFb#%\fZ('NU8E;\"KcM\e[8*J]<J`YPJOnVVt0aF+$@n>+uk/031&4OlTY&D!.juRQ?)fK?U^!4p\J*)W<T'J7nmAb!(,Gam(r-qd<D$%<$)rV4Kqm1m>e`$'6pF/:Vh(j4Sk"\e426p-NIkDTF$!h3BRk/ed2fukjj>-qu&;ZOM+I);hU'3eaGA96?XIP]`9E433m,PcIDr3%(J;+&M]5p'"IiM_fVen4"a'Vb)@*(KB#(-0ClnGPb<dlU)9SS\58r0Gg-cB%lAaALJ?OPAXB"sNV^b&^=@Z]-`f%k9HrN]61Oh::%lBWMRk?r,@(,YAH35ug+*aU.M?Is1/kbVOa9df9[8iF1P(I_^BG8s'K4!$:F6/fBgW*Ss(])`<pNnm;%[pkK"1_VpZ+kNmh&WAC&%bN(/\l623=OE,R,Q5WEPC1?LBJ='B!glAM7RPC)FZ%\Rl<,.;"be^Z0OK"i-/#0*c#AF<QKu<=+G[@iC8*dmB*n>NSKG3-A54F2W%GQ@BFR)/?N7k0a14&<B(5`8K+KZ)/fkg/:%..A@%>:[Gdj?(djk,1^--'4M`V:(H>lm+Ks.L.gBn#je43Ue0XL$aV,H-g!/)E`I5%\oT/nB-SgdBGT[Tm\%u(7im![0DWY`J+/lKGQfhh'b^mqOat''G>A4*oa4!'A)Ql9\bp\UlF*VHiLi(-a.%cepEtriHHDZLP-Re]%G1RZu^#>HZ1jTjhrJ`/h@FN,@oB?5QIloM_BSLtAHMCT'/P6>kbK!N&FAbfkrfB>"6X`9k]`6"sHB6F6DcARPrJt$;M,M??idH.3%]cF'EdN`AB=?;`:_LoRG'c54)4jOkS'9<Hop0>.cM_QYL9-j"F>!fcWVd^OG82?KA.T*@3&lXWbS/.fbM,Z%/(!=Gt[^5T]Q&-qY%,b?CF8J1>FSW&E4L_*4VR3M8YSVX*G[?/K'8%k-T4sjutibX+ObD`)(9]?^?XT89bid=G#+W4eH`tqW/WB<hS&(4e6.-W((P_k7N%C\U4gYlt8:CDHl8'$1u_Us05Jdk&%k,c+X0+pI40j\e\Y1%"p!JH@Eu>Y:`h6<QQ`AZJZ\V'N7\7S"/Jdk](BPi6-+8CIA&.$p)6%f+::^1(4N<.k)buF+ks$WCFF],`-W$'G20[TN=rX6OQb#W.A9kN7-m/[Nip05Zk-2U$G07kse,e(.h3b:lepT@TofYX[>3s.7o,G%>%0rk$1q,Yi`[4Vf9$-J7$Fc9(N`rVQ[fcRIh@4`cHo3$[5s5E;69itSOp+e,T(nS(CF?/a!p[!qNXW.djh138g"o_YON?XXS*K[%"2/IZURBRL<\AKA!&6MMrRB#L`/mo&dZK0.M==V!'%`7uHC5Q!;8s81C/?S4b3Y9X.=H^0ALbYqIlsk%&%tXa[DjsQ*n%)G40Js^%,mSa]@aHJGZID.C;JA`4$&PJ_HA-+\i1#P/rLd4@;+$mB6Iu\..[<grMj=Vas4#5&9'o,P7geN-C.<hl,,:n:oeN?E%Il':*7W0-%^l0ZjlFN`s-<7:CFcYpMHC:STis\g8(T7mnRT(B&?cf*i5K-HNEe-9KYrCG=qAfN1C-YI)fJ^hT'N3gXb`kOYoeN5C]a1,Zg8UE1%AiWOV3]^(j.C_sC\;h3Ob60%g8?&E!6hE.-lZGhW-$kD_@LAr7*2HYm['ng7!J?e<H:@!=(J+uc/^UO$92K>b,mSaM0NuF97"7m+%kZ'r[GYL6EG(j8e.S8n::q]OJZiR"%3YYOH'8#d;XWn&C'%N]GhK24W%dIUl=Zub&D-s_e99N9M"ns,491aZ&9gnd34B8AS<<tuO%KA[38FsTRKFYY*jC#JH,8!pDi6QE%]8h"nD>I^.S)r07sLtM/Qa9,kU\_d9[3'@fghf[./n%mRTO[AZWpp-ggaS9u2/%!Z.-F8GL%$Mh;/(Q%Uk`^uI_?0F.gg[s1lf6`<!k.9qDnuVVh`%e0-L[P[QXG]6=DT-f(/"WLslSRK8XSAA.=J\MM.+[WKO,+%[g3og^,*8YT%D%*NCjuNT;Z-)Jq"&!PhY0,^L"%sBHH@9EL%L>[F.C@:T!Y-g4k(Rn!J6%&!@MmUCq!MNY9]K#bqX.b1g0CIao6nK5Ps]P>-_;@k%MmY:@lZ#$m%4TflSl\+Wf+U>]efR_eh.68X4h^iD9=9"-L)2ooFu/e,T<@gbC`rd]XOW&i>4rMX/0^pR8k8(W/34`9)EJ"Zorq;g%Q51(+p_H=_4lSa^nejV$;6"Ls<o9mSQaF8[2D0.D*<N(['ihBJmg^brK-PlJIP&lD!)ic9Sg?#`le@.XpfOUUB%M7>ptif\`u:98%<fC.tEo)](V.I&g"hbZ:mONu;]bRSP!S7"PK]aYjYHCr?Tt9$Y2I"/dhfZF$B5MN(O$_s&YI;Pc1G`?Dnq(C^h7!rH/3<Jq5>_SQ%=jKX(Yc,%*k7ZA<<qKBq`6o'PRCW'JVLO20qB/2*DOubndBiJJ@O(X:.sdL$gu6lV/3+]fYNB!Y'l""<(;5eF6BB*s]<Q:--+t&Z%AphIYhMRHAMKht!)`*pD_j]EuXU!1)O,p>!NB2uU7kJ\,UJ>%5lecj:-Z0*K69mF'E!-j#klmg>TWSiI/3;7^/OUS::<EpeGUn(m%@1dEHdsd!.]G9<]bXJR$0^TN-_hT7)^;BNYO&G0`bHKf/M2#f8?bX.89f[(^lZZG$<W!K$-*M=CWXh'>RVge@+^L[6ZhS`l_E-P2%SkiJ0qkDPd76"=iC@,FUDoD]i5:eWgE.+SMj_9eKDo8il<BLVNIHT(N*t9k@"cn-odIS]2q&$JJOE#pW]bS587p+19im[[U'tl93%3ak<m7H`BK[cqT"k9l(@O$tR%9$n-`P]nFCESKI(ngjr1`NSB/aX3W\r*%sBD!#W3KKsXuVq%ai%UII*/n%'7Me:o\(A,?)6-kA.%MI,"oOOe'+A-171/=9c4'[@cchnHX*cs$OUn-=I?AUF@:QZo(Wg3c[mk9'TdqtlFk/*f1?e#he[+h4q&rp_>KHdI,FH2RVBn!8Is%fH:.eW/n^'NiOj@\&Uueb<\k1Pk.j_(!BN/['),1%>hLrmF#/-SOE%YXB[V97?tU-2U'8_j4tIa=snpV*I+R0bZF+OrY\"Vk/[T1%,X%S/N17`!WKmc15[h)M2EI"@[F&,/)8Xi+hNr`kjWC[Y6>1j4q$<4C-.a3,R&pR\`T$rt_kg8,K+BJjU;L'JN5kQbNJk:*"<0XI%7&3=L79V,$iEGQ1D7T$1)G^MPm)&o0A@t3jNJ`Odp3amRbn<PSBpQN.P/1rn,pGdjel@a5kWTsm`sdk664>Q+].3,UN6tq^40)ds%9e,Z=H'noSF$1g7F08K.g-r,*c(t_SM+WU&6'=uSCljF>SF1cTr@t_Colj</4#NTS<9`0UlUS1CM4cS[UM$P(Y"g0tmrY8"kO'FC%EcK)S]kau,Cio>b3p=62Olrid'nG\'Uh)jO#c@i<ClLlZ(P/+oib/p:$]7I_V*&#KK2Jcq%c8!(#7pGf:/%B+3u&Y$.;ZfN1mAY>%CBDOu+QlIQ8.gn+jDbXg,LU[SOabZ]A6_c&6'SG<grnh;%StEVTX1[7e%u?`j_O77Ns6H_FInrfZ-+*1Ss5@LUsT^iW8#rJP5<YS%m3!QG'lLW4eP%Elc<<%7(p+oNm7JYi"ucAAonh!i:S&A"oJlA%0Df^Q.1,`?OHTNi87<^2OGD*:K^0M]jBoP0,A#8)O-$aRek="M%K?akQrQ>S)"h(-^Jg_fP8:g<=C]]?[>#=JR/,g[:0r$'n(@=OlX0D^:=Noj)4l7B6nPM:rOX]9GgjY@.6Q_H=&%PAQ(!$"1ob[K)%8PjnMGb.7O+4o)S]:CbeL,_XNVk-'@3%8N=/2WUWA]fNW&/Z-Sd4paMYDl6`cicZ<-jj7P31Mj?;G@hT<GTr"j<4`&(`KaVCDoI+%^%&]07sp'7.(I7diG#lDH;gtuH:=",M(/0Ecn2l\TNC3KP?f(7r[rQ!Kl$uKdS3=]9DA5kc#s3$-'b8DBoIP/C[49Po>lNE7"k[I%AYlCUFdSp3N);_W[2u.YO.k?:B)fM-nX4W"o)W1.qhR)>WO,s#o`_rDn+'I,!2J))r<Y`8;b\'$mUk?oJ96nhC@..Gh@=V4oSGle%Dd`=8Ou*j+^8t[HmIu<r:g*[A&t`L8=q:_Ic`@a-@L5oeC;DeEPNphZ9hg)M6-R&gIGupM,5/osp%f7l(GcqP%dbH\-AdW\_H<`%%_jml^iUI&%bM,V?cTTdo2&g%8X#\>N75<10$0r2ROX;26XSp.`'+rMb`3EGud@kS,Fd+"<d)k/0XMdR[k<t/<JYdXbmB/u(M>mc5%XF@Bq1;dBl?%ALLM&%)4]rhaF9$tqf6[@LEa@_%l5Q#Sj3ikJ2bf`ge)3@ILQ.W9tf0)cFhboOHJFT,5FiO#A@=M-nAU<iL'(Bu;%kG#VsLOm)H=HPk'JK+^hE#4:*^W9EqhCl@2TM0;p[Wgi/;Yi)hk:MRTTS'gN:tM6u?:5i1TIduDo^+JI!c*bf&DnZm'Xd@/BXF`s%'tUZR8E3-f72H08l>bE'F;1S4TkMZ91l>d;_l<DKd7o[l"nBWU[hP195=iTWl$$"Fhh#7e0K:KqIuUc,&g\bT,5&MK?7kGtc4PFf%AB_3C'mNB<r=J^L+hU<eh4p;P67@XqAUk`8-H(566J)mm$?>ei\;gq3m5aV5-Ms/5)Nc^S`4</pJT,mL^G[Wg?2h_iYf<hYlmG4L%4rmQtMD3nrGG/=UV(*LZ\+-M#oQjtHc8Dr8`l2fch/qUjZF:FnU$S!hKq2@lcqK[6[M097LC?;+C,g]/;cL;$T^Buh'OXu&Xmn"&%9V-LbHmAVOm,`p3(+Wia3cW&&]'H6gFU_H(>`7L'!#-5s>QMh@&Ha!D7IR9[ND2lQE7f,phILH6@Po:_E]CJB&b7J^BX=S\U0.5D%pJm=NLu<$$?Tn<I64Ge;7K66n_)c<tLqbJLFPcktkR?uVO]h+@LKJe1r/m'm1+r##B"R"=5(s!i:Xj%g^6t_e&4Qjdo^.`LHe',_%oa].KF=:n[X.U]N23j$6f\9qVafdTT(4GUilT@S3WX_MC\"lk@CDoseQ\_ehj=H*Oi,jBQkJNLDCVmT3lL!VI!g.-H#rN_dBq.`4%*)g3hZ'U%LHPs,(ej25R2FiuV<[*^__q_"*;OsW$N'&uO0BSaH!_V?$ZkVGaQ!fnhMHZR=fYCli(2O=+2'K)GAJ.R^VorFqNTq`d%`:Y#M8%JVboi>M<^LQ5^;ts:QY(2EW(K^ZY-7`0uCCN*X*YMpg:/M9e`chP#`"A1`DW-*DmJ,BTA$WT9VU7tlpc%-/L0B3f+:f=3%$#3_H98/&(h:.5pn^g%;\7'7?8J`W)kUCr3Gg_#X^2qE,lV6`0efe=LGD"AkbS8]BW)Ji)P0Gl>GY,3D-^L4*eu4V9!9o'sD)(^J%&q^5k)Da=&CbmN7"AqROAKBF@fVm31/@@"E$kII8'hK\@T,n9rIDZRkd]P+Tf4P\90"Gc,_&?Inii\63:RmZ$.+f%TL]T?[\2mi'%,O`Ho;:gtp=B`SqU,p_Q,W5VppO3tZ\[Y4!%(Kk]0]u'.-p\7aJ6<*m0fEc)0+4'LRMhgE]/#3g5(j3S&,HlPRM@<XUN,<fU`Sn0%h@kPci[\2O0274ek$>/X%r3=3!MA=]8/bqSq@.%4b"+&2fH#(Dep]enCaLJ=n@RC\5oqsb%TA&gkKQA("Ikg\`>JqcM)VZl5Hdk1%G'WZ2\-0WkY9S%CQTrJuK=p+`lro06eA.T]Yc*Ao!5aH25M$>a[R],@#[3<L&E/<-#TU3:g9Mq-ek.9)_o)X6kJ6eGfiM(H]07O0%Z3i1gGsd.h)0<,e2Zh2eH/7:%^-dXUoCk`tEIWB[8*1jTZYIaC%a1ViHi6Q`l"ahKaRKf'm0pJggG@>Q`/[Opi]plbWZs?9"VO<:%A`McBAK=RR&MV7(iTnsgc=-#)r]+e74JT<K]c#<G>nLW@bNnRGnR#-jKnj7c@FsK=dt6A?6Ueh.&*AF32bPH$.X8A@?E.oZ:fe"d%C[?ViB'UZIg!$E(g]VeY$:ub0GYXrKMKraLVZYk#\eIu%XNY+q*:RqSH*OeBb[\ef7P0q:-^a"u8g9*&-,O6^q]h?E,]<3Y#N$Q6%nI1Gp%=4'5BCW3/i;L.K3Uf9I(i+a(p5JMQ_Y41NGMo;]au$Lc6A@JB.(gco+D"^J9A.[YV.pos`]!6uJ;i=KJC]S8C'*kIiYt$"%OI_c"5X84Uq^i%r_06\tNN6g>SQ\H*'e<T-lri<$N!h^"M2R(PNhGC[M!jd%`RMI&pr(fm>GkfC`YB:dCcFdE.Q>q/ITo5?Zncd5%VTngGae'=_#V@39=bT*P0+A$jmP^5]G;&;u*#5gCJ\CTb?[V`,oWmo1YOK)`C25SM"k-JNm"+G5S>rPo$Li/WCBRb7'%.+4`_HPg%@BX/a(M5pao.3=6Al8hd96^D@%DhbBP7mt,)NKrRNk7?/,eg&+M([p=_FdR>NjIKdo3VlSVT;N6RSuS8+(8T61,!:"4n6l)o7F46%YZq_]Amhfo<*.4M'EapC0WZ'%"T]9LJ*%!C-Y$B6ou(?0+_jOK0f-gp;^52Y?OP8cj)E\8e;i/<0VZjf%L"4YZ=a4CO7/I04'g)[%*i?#qc/>,\bR.mccR[KdQ&uhSg0f(<UQE``59MtR^B<i-P!VbP1GB;9B-fHN4"!X:$S3f:?$CE(l1/99/H8WjHBL!N2I8:9ojHCW%_*K[=?J&7o/)JWoHQ4O0`'t7RSZH=A(EU906hNke()HHlAW"tt$7TT>Bh:@F^VujN(3$-I$qdi6:C"g[-4-P<._%pKff-+H]>TK[%D(:nPXGFj96dLljf3_=R@Gorf:+3XM[);o]02aKC)dR9b,(mdV(L=6\Kqo:n+Zb3Uf:j-&\P\Grqe?=F\":C!k+KcoK]YCe(:@pe%YiDqs67tnP@2'qSmtFhbMKjs_d=nQVd:iH0is*JA*>0bfDCqp%Jiu@.7NTu9:?VEK6E%9s4ui(_F*e%oh&pT,&SX^<6hh$6Y)[bJ%K@I`!^k;i;gf1TV?)IDUH=:>`Jt2Cj8BMBXp<Dn:Iu+utC#N#=\mrO.@hGEu7D-Mok.(`unWX4[5j0;a[;JjG<uX=51jbOr5I6%g%eig#X9jBn;%^q87Z2dO#6aGD+4]*^Y`9hqNg?PcXVEV=7SBYL]#Z0hmR7%Z0G5HC;LDH":'tijl)t>:E0.P8*A&C0O2\GRD4?e^:%q/jI=0<A%?&r2N1E5sh>'43l5@`Yb,=-55][l.]cj$ajEY65\E^pOH_H2)H6)@c.^@JX$jQjfFF5e>"hUCOFThVf1pFjE;X&eb[+%E\F'VdYR8nQZt6bFIiRbik^en/]0gH:%J\+=G/4%d(^0UL0eV1)>;#pj10(j:bP_BXjJ:SEbt_Q0j]_CNP"jLEi8Hgi^JAU&oq=p%cV0=8m-U"P7:?eK1LJ"S58R+aMS0^tmOVP]]b2iONaSO+4'isor%0TNN'G&B_]1JjCgIWddHl9+`rLm&`P%I'>V\o6$tAr\FAi2i%g2h[@cPq\!BuFH'q1*?poRS-Vdd*fU8^J&%(@G3_QJm.,a\I*'Ff!kuMZtTAU*t:M?j4)Rb4[f%oE)6R-&Na/G-?PJ(W+'I4W$Z2%hmUE:!d>N5E/uL$>QGjB@JSK]O:sl8!lZpJ/#*W.b=cu-nGS[a/KV>\`"rGrCC7E-G3,(]fnGW^8tO1sgRPDpo(OBYQiNpJL6k!O%(:5G5^nJ@I/hNA5_f^a.G?C=&\!X:_!5f,Q/]-C-r&K-6keGe7D*NU\1Eh:I_7:NJFmqiiNkEd.hE_2Hdi(Fr45ISqI1(QY#?AE7%L95NB50V=t^4M$AL:Jeb^@3^,$G\!tTocH3(f$=_D&oCugrcBp]^n91QkQY2&ReC+fIKJAP?#O0obji!hR"QhS+Y=f8(Jh\`+Sja%$!tsXLc"4in*)K1%-&]9\B_OD53TFu`>_a6]=E<-fWK'l]R=A!n:h\rm6Qb]H%AMp)qZaA,d$k0$jVP2AXN?G-mSu#j$aBj+d*SF%ZQ<&seXD%"?bEr7_k[E3D@j-m?D%!c]SKA,aL@L#,"9lB9Ddmf0NC>1Z0Zu[+"_U(MlD[QE9`8%X8!V.OJb%ROlRJh@F+`BTRuq^%^*%O+Sa5NLHZ>[9Z6qO3M/LUp?clhNmBKgs2D?1e-ne-YW'G+;=DqqBMYIROm?J2jIs;;q*;)2>.;+e>;2T).TbT6Y:Y\"1GWBM2%$>lEiY(hY6UT0Afic0Coabu9WUaV1b;3ml2e0bE0LD7jXB6J._Z'Ai*pS>]E3q/DR2,m.0?n<Z2eiZh%N3M3(L_TC4YkZmo,K%te%iq9oq(..jAs298=po5kh#i@M.fPIulTJ)A@Q<\3`JJb4gbL-sC$#!&u8>CdY<_(cAF"t?aCi1"nSBq:pF)+gSRlXN;[:g:/K&',O%?m_O[`XQhZdH_I\M)QegXWMp8`b;lUUgG(Lp[,#pfMCr3'*#P]Mt-t^Z1b#?2hKu2$<@P,-,,agcX&f+@e/7_@S;SL/(+boPD]st%EVic"$qZ`Afcq2?^F@UEAQ<#;CIUdtQcXhN$"_u/B&C6bnX"K?=_t&J8O<?3O8N@#RqggmhuL6&e>LnY0-CT55n$3-/K/gbnW;)K%Gr^L"HH+Ti)WD?,1tL!fNGgVr:j00o_2ejir9[''W.nJc=Z36Am!B!P"AAGY0KeW5'dDc1=$r-d)u;/L^!46p04RB02a]4;c//8_%q@Rnt6Z>H<o[DW.*1.8q#s:7(c((0IW._MZWV'qFCu^s(m]mL_/r"rLaNE.1rhV0;dh(6ilpMFt9]0kBcqEX#9q=rjhs&bl#*1nf%jlD&dHl0GgJT')2^KQ136U*neP#M\^7a#IE@1FfG#4_L1g,$mAONPnHi*+7n5[DKd!27ItMR>)d\;)Bi7"UDF"aVF_Gh`U";#utj%H^`+aThQ7.9eJu#:L5t5M<FN[G1TNSI"\dbWn=\$89r5YeI2aT$MTYNp,r*X.!&<E#9N*,qlJ%[ZXGXO@KLs%L]b03JX?3]_sH)`%h?PnU_g2cB%-n$o2Y?IQ789Q'fS3FHN+k9e?4sc2_#(G47SaE]CEFXY`:lgleZck+8ao=6_)$aF3R^=%:9t,ciX$D>s'.e?`V0)l%W=shoYMn+ie30fV`WrIeL,X3MR4M&J?I'gaCY<\./Qn4q'R>"^fqLT]Z,iI?-%_ROf"3,_,l[*f%-WAq.K&2\XBTlpFS'8W\BT?%%fMN!+!co+95CA/O?jp$F@*:m%2X]ej*bPe:8./8DlmT^].`=Lo6R98IW`FtVnFIUD5D9j=?!Wi?M4d"_UBd1bVFIA;fCXSZIS]2Q%&4A9;[Pn!$F5?[fB6R4SEkER1Rq+b9KPX1CT5RO"fXSN*ftpJNgTLqr?hFasD+"rT%*jDiJA%XP'KAN^N$W5S:880]j8SDM0ob6>%$qgo\_i,"_,:a?3i[JE<f4R',,!i`[O#fiVhW.%<p^JV0.C_Fqm(j(t7pjQhIArB=Vs[l%G>0r\4F_`VEMC&mGg.`]%7o+^B5.<`%#\A+IAdAMI/]68T%UCqmrT)X(:";Xl]i\+McO=`("Th!&Zs9NI39Y#ojmiLX"7H?!p#Po>\f*9U&\1TH3fnD*a.fBg37)CL)de#T%'aldU#<?f8lcW-Gn\N*+`&QIn0[i$lE;\E=9<i:A<e\0APhNcJW]FqC2IIf=1J)=c@TbY"fgi5Ar-!@lmi;7I<G`Ft>\:bMDKq07%/7=/!paR?Z-p#)32^Vn/SV(JS;KcCL?gApIrF%H7W(j.3;B]L+!XE.(.;Jdt;1<P"ir$S,%*cqr-u+>gb]MBrr+q\!#nL.^jBU:&%O'm43\n;`j7Jqk7#Q+eKLSs*3?'d_GNZdf2<?MEdl2hKsVB&g)rU?Fj?Mn4I?Y^12)LaWjAn53!FuM*#YXWUg^SB0q_?flK.1<?$%)k'KR<T.gSV<e:nVE/M?3l:%K,1Nd2i4Yfoci/3<i\U*M:*dD'eN?.1G\s-u=Y"XJ>48ngl8\FogQ4,[EP;q)T4K"3.Z/5c?C?"3%FW8-ff4?N6C`2*l'p&VF^u1SBL6l>,.Kb:!(NK0-FQc(L<gUt8Q("_0*.+r`MD#iRaU/0&GR5`/?$p0OmBufNQ#c]aq@;+;]4+Xp%/#R09=5dupPTm#P@+`&;Nc4A("'tSH.CuYcMEQSKJf7pQqAL1)lfSp(_,_6S"&lD^/5_Hp4m)1(<uWWRJ_8,e:fAj"RR,N'KI_qX%o^gX&HP;;]%Au<rO->H=kL9CPM*!pXJM1nf2lgU_IfJe>0Rb!?)Q&7<>b3*Nc"`"UR#;E>0naD5n3XpA+4(M8I&LqWbjg4TCdV,\%VDOVHmL`N]W*N8J0qO3Z%p'B`32;UCE92<:XqVO=P91Y-r.83U[H9i*'6^BNdW"2mG-49Ad@j]UA28N,hWj,5h%1lOe!B@`lsV`=%,%tT>cLC(WSaKsbA*hiV)7>.X8o(Ee&TE_[fh16-q2dUc,58uRo^aTcW5_?`:J*o,^hf2JqC)K:?>%(DoOZD]*F5`<B6,&3*9[N5%R;XKW_V'MfdRG[m2Wo8'N(XBYR$@4l*_&Tb'dDqc.ash^9,lAOQ>K;t1*W5I*?sV9fm@nn+"dJ"6%go#$H+L?=lFN%UbS_U72qP]%h(AOm2J+-*lNiK*9hQ2YQCdPsK/S8UWqF/'+h/<YTq5[[+]]m#>V%'RCH0h_:a<E'f]3<tBbi((\Uj`'-<5;&l^'QCpgF]&$Qkra%_YF#T*L@kg`XN*)p=M3U;h7^qoendP\?`n%,?D)CSZD9lS^T>Sp>CJ-hmQ+8_T67#`n6:J!#Gt_2&0OA;$luF<9VFRC'J*SAl@c'%8]Whp$c:taf?HP>1Sfd8^Hb%V[kFUdP`QM=0lls'oFj7afI_G7K&:d,%]m'*_30%Z5mT"g$]L?)P0i\FY,<Dha&Ni)c$g:UZE`"h%k[ZKjrN8-rjODOkbeujXjTXV`^#d-e&RY+IlfK/V=#!nqFdOCZN!bo4ikL*CL,7m=QE!Jf3=a5q5iAFBpq+d2#dK]JlrZYSeF&E7%$0`4j&RU(\OLBK8%@h8QC=5$K];5^,8i1uPRu4K]D*^(6!DcjPo,=VgR,tJ?,)Pc-)$mhu+-'s].q_uoUe9=_]X"_G_ABf;%YYf^%)b0IN_`=c?GR][G&9,G9%-7og8?,32dL&GRm/`+g/fiq:$[.u5d!,,oUeI7aR8m^uC-=Q/bfNbh)OP]#S,MsT`+S($>R5*B_(/%9%f:%"*!K%p5T)E"uZ[8bJ*K`q>:P:Cu'2Ik@XY'#k:FDr#"+kOq=ct8_LpVn]QQj+`M;XY=_k:Au1RS-<N:!^9b,e%,J.ZU0Z=$_-%kr6-*5Hdk1-D#=oBuI)!s3B"`J^)_[]!pKHC['t3TW/hu2P>r`81_QIZOI8.a=,31c\SCR^t,<E[#3[qI$d*rr=fr?V3#fC**JQh%178!?:!P*.B@(_J!bNa7EJ'\XoD6C<ilPoOkXe9Cj%KpkC-UP6FsFu5aW;9YAZ0(UI,rf?j?rTEACN=TZAhB&DI?[H8UN=8pe1(k%R%q>"T\,h-nNs_/Wn?0q.EkuEqKK.^jM7k80lJbPIpScBm.)EN<(cQMi@&?u[*6g)V.K)RYeA[teWe6'[$)0g:)o:5l9AeE@7)n@%\/7IW"$(r?;B;!8p@1h-5('#ugG)f=;m2"*EVre":D\@Z!J0'o,%s\uN,o@dP:p6$mtf#-Ak\R%8^bM.PJ@m.6PT)_AW1.t-#9Ks%c$:7HXCnQ<3sH*G@6^Wc73)sX+d0(_XC7oZSmY3P'\J^^XtW!e:n+^+isVlc[]BO?J-0Y"6Hl)finPYaZX7$_=,HtL3`351V^15)%-a$Gj\/fZhFS5oO/Nm+B'N?5=aCria4@0drY6bCm.;Z5fRMk\:8e=Ru%<=sRE.tU6NDGbUPn&or[([<>1)>eJY,a8Z#MR=Rd%EdI%,d>rTYIgjRItacWFi6+/]=u#9;%uU@dPI]LqTau[@e+OE1U24Ebf<P!\>ME$!*XmdbAJI2QZBJ'0Xm^03+?XH.F3u+O$`3V0LTAW%XM5*>M.0(>*Pnhmf#?X?,%sd1-kU+&.2")h[DjW3X+cS0<lD.d_`_+,]KR7KZ9Kk)dRHET8dm0MPJ_3kp=smH&R7m@a-!&:;&s?s%Utpca!Xa\tQ*kB8J[3+RLQmrWp7;.T=[%TeZoN!2X.@b-Phn12G#olM`-7b^'mcBI:-P4YitIC'XiIj)B,\'7BS/.#b!+kWe74E=%Z!=bUZ-S[8Ziign!TICc\(Kl$%E+ap9"d]EQDB?0\qUd_lA*l%BeCcd2?f6bOnP7oOWpA92AW%==hab]f/kDU^"9RnO2.>>KjK;G%e4m^l-kirOdrn`q-8pk?UaulRN!9c*NJ^8TP(MNU1IejE[2P'?I=hGml;VCu"pO:n`'u?A7#>K+AL+A;Y"g0ts!Bhtjh'dRoYjm,%Lmn;SaF'lA4Dc8hd"r5b`JP6D.$u*4VEHZtbSGT)*Y(W^+H<$h=;\M.9WmEGQVd'rQ\86+`ZoKS(%f"nU5.s3cX@)hE7rCW:fAj"%R6f,sKI^B#>+:M&pqVfcM:AprCn3R&;@YroekJtn.o@<:h![,\ZsZX%4smqT,,;uj(U=5YS./I2=AQciYgMqZ[Ud>6F+GmTBP_AI%_gsBuQ0^qL;k17/Rqe7AKZgHYDcR+]Rr;W*pe/9@PE+s5J?C;o/AEu\a?'Up;Ac^kjq=LrTeKsi*B7q%9o^dqI#e]ujI#*+FE\Sa%9Fr41X0[R+OO:ms"T+L?_-j!&S9raQ^BJ:s?I-k-?uT8k,f#??_5s^L]bb#&.H72A7]#_6%o8?I(tRZDjE87T%KTk?/&X:;Y<C1H%U*jR]6rm#u2C8[SSj";GF%*02[cNYs8I^mq="sBUGcpZFqS?_=)&;/YN@A^e<aqi4F/"\ma)V<]ff-+H]>TKDEdd:^HCFQ_K(Y"E%W8cV/\m"G?4,/QPq-$qAI7^aT>?YkL\K2XUH0qt^HBu6+_qgJRiY^)\Bu,-C$f,O+rhCrZn5<;%pI`ij>-"%.Sb4,%+Es3WD$HGW%o_QLEim!3#_3PEVa;\0d`'VKISrlPs7hU6k1YB:95enGZ.Wc6%ptcO"Wb$!s6't&^8&-cp0VI5Q^4SqrndU^f/7B[8/ZE,bAYPKl%+uTE+)TW%<MZcJr'$b[L,Z;Qf>pBBfB7IM_\D-S`.tPEU>h/\h&SF`5>;X<p"\"L!3qn#A0SbYU_Y8kk9[bf+>tb.EV6RKk(4^qc%1a-a3!IepMlL?<nfoh2^KPn-UY*BE*:\]?@Ho0270g$rEGa-/VFT$$t)U;u'3W.7RklG137FBKN[%-53Zo)&[:k7<(JQmu8HLt+g%%n5#o,kAG#%Y_.?&:tfd"eKO,7oU>>2(dkld#:4E!m$LH#R'\GHESM>Y;fcUS;F@^M\,:6fMJc]pTjFUA%TZV5G3!bOUi267b9?,%ro=]J+iQm2MXMTl2rn'-X&rb5D)s4sPl7747!K^\5uDe.pa?Js0\%)94?:bL-A*WjOQCJbW.QUlhPm!71s!]O5(*1eIhpFI:L5s7%Eg<l#TpIFd?h"Vl"DetTZ#;[>[NKds^;]sZROb]3<LsUuFiX/"`oLInk/]".XJXA0nAqFOHG[g6j(C2/S3ZLS\dJKI/+B:h?c`i<%RGD*@_\"MhB/+:qSeTIuSSXG*W78%1nKq@([)AWJ_4QLj5HVf`fA_iiM2'gX33Ci77HgFQJF>sp'^SgJ$8E#VU7Yaa<$&_O8b`-C%f\ER(gs(o\@$][4nAPS<JKWf1XDd;aSUo>pahdLKSTlin<Rrdd("%#p(u3t"eBBL`FRs<,\.L(Y%U'0NTWkaR)lhF\Rgkl?IWp+3%+oD@TTgL/,Ck+9pXk$qZBR6..=U-1G_Q4Vkp<W%<T8=qr`CEcq3mu!]KR*8B_l]B<Sg7(.e0@ZN-R$^9Jr"J19JdD%`#^5lIZb6#%4]9s:JFl+u3d&6QfN3P#f+?GgmW@+2(DTf!.'cID;p<k97ZHPAWEfh-HD'r680WojRRr,2*9dO")rDQ"<BhtWp^u*$6e(VUOp.dp%5t8%6`B]tGYrSCYeFE05NeI(]l:;#=*b[^.n-q,_Zfq\Wd-qCJB14irTsCUqc,X$!7WYjR-V:;c4OA7Q,a$#ph'Aus\d]rp,A_nR%bc8;8F^ed!18\hF5bVht9ZJ,LRIcO*<t^Q4Kue:76'R>5">uu=.7NVV##s107R>2b(t"/B-iEp7S`s1W0bY'7apEYGa!2EBos5!f%,5rK=5VQ2X1nEh7LM0C_#"N[WWp[f7WdJE3l@EiJ.]7W;>!cT*aJepYnS7*He/R&/<"bP9'Mk))bV'E^3^D(hqO$;O;Pak%Kr6o3%26?NVX$I6>8fZjq1]-A.M9j,(b@6@#F>Pl#N;``$`&5Y.Tl.Z]\Y"ba^MJX>T<T07N07%f7S00:,E*$KDGNkr/(/V1]ugdr'KPQ;%q?j"6$OX8se7i50<LU=/(ZbbB5n6R])!_A_qrm^0h_&j88:rufF'p94?h)m,#<n&Jnb\/l/mk-I!=E<pr"#uN,+-\U@h0PKFK67:%*N$ZK&M+7EL0u6+$o8?iTP*K#!H:-&%]Cs0dnH0`fI5+]]CsF\/H!bk^u/H@0XG\(GB\lSp%":?iQg;W52:#45qKM60gQK@>l?,r%n">*(K:LL;pi(5u9qc8bFB]=d!?].@i-]46aoQ+85,9b+&89u(mk[n_S>Ze,)UmE0_<Aem-IWDnNA.\W??^UM%hG,#5!53NWXfW`%4k,6WbTpOs/$;neO\U6,jl-R_+THiL.KsBfpG,EYD%+l`W$Jl@a@H_X0%m<2\G['Q`W#kHJ8u3V+tg3$?*28c9J[NDg^dUYDD5`*%H/'+U,k55aU-:nHHrk-%4/>Qt(npU][E/,;G[-/qSL[d,YD'!k-fnOu2IVcN><ntD#AC`%0(i)=U!_=YOMR9($qRj0Pq!8l(F>>M%30N[5&9CpYV:AOe:!dX,m`XUV7PVKuF-MSoZXFD-3O]Sj[H(mKOQ>4[Pa5s0^;or&%>#;R(<?d=JFj,I8.27V>\gnEj@$NJX`2A1%GSc`)WDTXLlA5k5PFAq`2QotKZZ/km2$^JDP_^%D>,N@#L7P*:`_3eW=%C.LQ_VD[3k%8i!+AMtU9A8>WKpq*R;%o]RT!(9=VKF#%'p;T?ktk=&@C32[W_`JdW/'HE(6U`/4!W:CY!!4`r\Q)ZoF/(`<CnJ+ThB4p=NAfK@EMH/c'NJ'd=I'5oXH0Qe)VA(l,ZG+b+Z3]%(JKn>rA@j?P[/2MCJmS`&L61;?PX@j<O!)i,iV<![bau`?DY3Q>/NJcm:MLc6=\u"L7A/5qS[%+a^r>niq#!lYWVN6>RPeR"dWgU%XWK833!!im#3R&Ij,/dHpc?;IWS28uHW!G(O[`[`UOq_FZH<hT(2BcT$FefT.]*n[B.[:Wq5F*3ApFgN"uH/>onh!I:EH!N!M8p?%1!ZK)oXaed/meeB9K,7bgnQjfa*e@n3c,>o1Ci$7X\^qMpAebH)6B_mCIT6>$bG!o,9$ml*pof^)Hp[JW[UBe=_h.NVsRFflj=0X%ncJFFT@YGS'2S0%6pG,o-l8+82X1,3Qa`\CjVT@Df!/@YVblTJ!G+:9WSd:M]Ju-rrkV4;?P\S+4b;-t4q&*R_HP8>%LO\/*=P?O%=ct-.GoNY3CTPSZ(,IscbmT8o>#?Vb]Pd]\T,hq8qX>c`N]dkGLL#g9d`Xa#_6R'sk+i:HS.c:8F%Sh2mtm$@/5XneDo0*elb9)S%iXD""niATPi6d1S"X6[o&@S)AP=!eK`!K<+*,2p8l("OO;pqhp"4ZA.9I>T,6UL]Z"PKh;WpN(X%%#JkYXQ7*VD$M97Yh(d]$HJq%A`)2Fg+r8=aFHuJaPH/)oa`/"Q@Kr@6?1#0fa4NFmg0>cV^[Q7=]FGDgDB1['];mH>qP@reuV.[Lo6@1Wh8"oH_4qCir*J,EsR.K%EgB'gXnYg/`7V$rKq'GWP(b.ZB&RL@8aK>6`]C\iB?fm(;nS^[)7j:ubEH-+_uiW<BsUcmltO*.0IroE_!R$=PQ!BPIe^5$aUX?6%!n.KO>Q&!bL.C9u>\.,21rBk`7'l"p<uX]PS\#?k10T3/*-/%EL'H8:4TkFj'1c,5kR:BMZ$GueFDg1fMR.$+i$J,8bC?K(i:Vc[%Qc1c0fR:!&[Miig4"8DXr5iq$j@(%%3QQD5!Pl6WWrBoia$WHR`u[^\$=,M'U+tHEn![8bl7g']IuJ?((B[Q3TQgVo->JNk:,er%%9ZF;.97]ctF%.0T;*;2s+WE1\;O$"C0bZ[oF$RR*$pe:!*:WW?AUtlMcSr\Jml$'.O.(2+78GmicpZSuF#0dGi.4Hj5e[1YSn_u=%H6a48;ZU(-MASVscq)$"foW,;=$jB6p`nnk=4s1m>pP4@b%>DoYuB=l(>?lTG^$:VM\U[%NXDKDiS2!;]g\dZZFegDG\]F*ZJuh(%iE!Gl$ns%XW$>EV7pi@]X-MMOi6DpNFR_766F^2:kb8l"fe)24T2"ToUSfQ=S[Oed^$N2P+FU]b.JkWbFV">9A+qf-a7S;c`6I(I%Gs>VP*"n0;JG#.94eHGSNhNb^d"2O8#/j=Z%cVJ,jId]o/o0k:/i+>4d%nHb<X6R4DdK(29>"A)^\rsFp#<f%=1ritU4jBol^0rF%ieUWY)r7Ecg1*W&Rrcd3K+X9T0PpOB[d]8K8ZN;+BON:q>tX2u:Gu#ha2>aKDp%EQ)-**4BU-IQN?Vb267=dSffuZ9HmYGdejn5N%N[!h0d*jYfa>P#FjsS+-[kfYPDDOXZ@+(`+[_u[*Ai\XU.=4Oo#:61O%JUjr;KBEe_nkE?0,ul#7NJ_<@9RCTg7alMAen@VW?RX&%.-jTi8.hKa.arrmf,Td&F5mP!n]a4<A]tXZ?=k[\PGVP"inUULS&$S=/:gTj">3D/*+Xjq;FF]NehCiP\B?B"P(8m\SG`>Bkj.GS%=cqMSTt7DXN/V-tPLVX"mP&>ZRsjo)`*_NCD@r^.cV]?5[_V5%2`G?q,M[hSV:.SbO3XHU*+)_3Q?[@o:H;DuP`2dK'uV%.rXdId%*92D@cG788_$:qe,Q@X5>LL,N9XH)e4ZZ.C75$foR=VX#e;+h/f1_t+LSll&7p;r-mY5)-8*V\^gee*eh0NAQbGrugn(#t'ROHHs%m09jB<M\/g$YAc\aRHkdFdR'q>ukS3b,j+a7de-tRE6A;o+]E]_9Mt)IH!'QUntaa/0tV#6tP'8XseQB_&6XlmQ&03[K1P]5E^BE%i6I@D2d2&jAW:\(Lcqa]X[#c[pKJI"d;&dl'_k$f8X8+2;/LOK7LpK9q%uGa"c":))=4pbPXq/@lLrFBOX,U)h/*(VDGYU8;3`pW%Up<AfZGV`<YnXh.jFA5f%isKGauBsBU#Hik,;%Q,brtQuErZNXO!<Dd19M:nB<![L#I>/!QpH;A\Y5]s<[a0MIlf`u9RMjCN,0=.%.`D:Bf@9l@V.f1`B.<Q(](&p+GoahE7@,MX^Qb0!SLYed^GhHoID+oW!aGs3$G:P*+l":<NTd!82Vm&.[o<S0c%6`7)H[S@&%o2@%`(Pe'3P*(KP`s/HQDm4WgmfJs40FZ9X,!M^eX!#%0RS=H2bp7(g)VO.(76CAkB..d\"JI4E&iVfYCi/JiJ/lkM(\7QFA&WM<98'p%%sh2Z+6FW%3,HeQ*$sSq2anoZ]N/rl>HMW!W&;n<[H+m#(7X&nM/ulaDKB#FSuDqW[^tY4XmUIPX*]T2hkgHF.W@\BgJ$+7DMWA'%!o:14Y3V<3\'YiNQ9;XE6&DCLYk>.qrG6@e:E)>Y6<VYl)hnkPmpS.?(rr2@.`W]$>d*1VW6.uG&<+%H.DZX,E]-6$#B5G#0D/13%fM@H3,KR*U-OF<>qb,V9hc*=Fce*tQEK"Tl(#BS5QGEC'pnl(Dn&(@M9WrWBH*o%HcA/lU:Xs%I-$kr*=1-^J&)l%P)scRL7:.R4%P-C7NNYnCak3RLY@h@DWPp+g8'fVW\P!ZcZBZ=rSQ4D0/c:R<V#12N6C;29_8E.O$rC(?V7hNjA]>WXT3Zni(724jf[?^$n3KPZ3%mV=ZN!Y(Iil72OG@LktWYC]^al'f#Hg##6pU]VAn_h&+ckaU(TBumO83^i_2GRPjhPVWVTArQ>Y7\kjTQAp*Yd+gK(SM%FEY4Kd+%*jBudQW,TQ[HI#^`D("E6kQhM@q#\+FE3hsq@-n0MF]PO$DKRUBg$"hJrPM<eQ_OH;osA1AYIC%@'kNUoo)Gm%;ba_lP"bR?>T&6%!ls/h-68dg.pW:d/KU))ja,2uSQUWKnD'JGS(_Qs<o*^M%DsU6[Mg"5$)jc3OJ+OS#.8T[#/t+*Z8:LnK`I,hA6*I:7W(B@>(I9E%7o=#+?npsLm`e8*:])Qrgf&HG7%/FCa'bS.gquELgT@f?FJ]fo)Vh'f\`4MVhAr)#qZRCs4biLN5X!*Z(:,B?*KIrQ@u1P(#o6fA%)r.a);It-M7!5O6gQ7QMNfmdS?npsLm`e8*:])Qr/8dStQ(Fm&UiI>Q`j3T)H(E:9iI%IZkU6LikEQ)sSnlocfpn$V!IP7!Kc1o1%A?]998Xcn+EI<>^>*QEXf`l&:(tc."8t^tdk]3dogMCI^8gn"p\O"HRH%"[*nRD1WRL_nbhUR@1j^$,"jQnp<M5q:X!2J,*-2%)M%K2E_>Y.o%n#m5bu05fa;,+8h[4mL;i0YV!grNF/BVb4P`cd;-\V*'i9/PiB#AAD?S*e>HjC)@o[Aq3b.3:>!]B%tn<Zfi+Z[-K+I%b_@'!m`V=VVT0,Hk;a4qOZUfZ2\nf&`-DJ[Ul?I+*"Q5o`ArIR;]*Y/.:OBdTWYBURQ'i!)Ta>L#tma@mA<7HLsLfMT-#U6a.BbS%>;uQgbO0<2[$Hl6epQm1&AXG,FZ9TU7U4T!hGX^1,HQY!Wr:l4PA?%t_ROM(Ft6$7fFW\/=.h+J!!YrqdG[UJN.+'VT!KNHZJlj$%#?MTMnPhjP'[+q[%YIM_jtVmt6[bU0d\$gZ^=cl/(@R@QRl6c&aPD#WXpP25F3(11,$&PRG6I@-jfDCn[krgsLV,/\+7u,Vp_hjD%bR*>oD&a6_#'_qtpLWm=njEA2,H/gtA"/K7b@Q!1Mu5l;`YDODEO6[15TK!=kb00M&=5kq>s[aqG-?\.#U>111im20juS')3JN+?%]Fo+XS'4b!ga*NW9&RF"oU@OF5e+*(JT,n8DrLWX_c)5&he[BJ^>81n?[V`_?"5ThTY#VToM";=^GX`B?RppEkr[F27"eULi;s^J%"$P+G'OrB9FGVqR>$kE'2lOf,`Z\@YB'mi6'O[40$F@.u9\t$Mr$+C8_Mush;hPb/GcneKG&_PFa`rI!jbGhaFX!Mhe/gF:d-u(n%+FNXQ(W5/<8k<e'piI;'EG30MPLc@Q1;>E;Jdrb0W?l;h4C<Bdi=6"<Q5:#e[A$@OGhr9B4tC'bmDDkE;nC^$OK]10G2Z)dBY5>I%'=ck8g'd[pL<t,`CNI]s%^lm7)"74/VGT^VU]![=/dnTTK!.TU@9HH_ZHSp4X(pH'O+X!gJdTg7K(5[d\LA+>i\Pdk8c+pNM",_m%F8_Z9N*^NHl,ERo8@I$o%\&hb\(k&GgmMGLDg<=9.6)O<,-1ZjFN;`mDZ/V"F`>-7IB8f#[79S^4PDMUe^imoB4bPQ2`2dJr8gZl%e6i%*;TJM+EW$p/40P]6\nTZ0njYKT:u@O#RdLLUJgo(+66R<dh[rg!(GJ8k>83O*4L5o`oo+SqO!@sgO4*[JUWkp$4IYYd5u?Sq%.2<K8G#KV``*^F%8aJolRa.%dl%0CI4`;#,*gb'JZuiFa]/B:=DfbR#>1NI"g`Ij4@cN4+)/`/@8Lr((liJl5Qa9h::E.!9%=^qe%[i%W"Xd5OK329>=[olEJN#Tk)T@YGS'2Qp.lo+IJ0uN?9m^(ZXc#+cNDZ)K*oea;Rg[*L/ZWhLW>K\GLD.71(mV#C;9V-A&D0G5Z%G3cWjD5>j%gh+$8TA?B6h.B,9DbA5LAiI>f`6N!@%;)4$0LKtaq[/a493+4C/FFPI>TFIP5'VaK6?.3TSE!*X"u[DKJjRm8%;!i_%.I=`8e70"3/MehSm'C8tY-0S5H3Mp7^6h2\rbW7PmV4#qjhHq\.=F/g<e/)Yr.qkfR7B-#7_CU$9(UNk=h`.Eb<NHpcVS5OZ>d3U%E\Min9#B`.,]3[-[l(G`+NpXg8UFdrYJ6eU+GaSlKsm)o@gf8pfSYUd%0he7ZX7$_=,HtD[ZYs_#f>9geZZi,QYG)(.<Y((/7dC9%$B\Qge9cqIIG*iMN+9%<obGlb12FoM^hljM!A9:4BoT5;2%tNNB)UPWmI[55h<u:oA+potAme%E4n-TH&MMfP-(3CVcl$?',9#MY%?gn]:EDd];5#FPV=\`@[VgE6mfgt<.N7kF7M&>h9;b)Aoi>a5\br7o(3CtpiPQ_LUbRGW<W4Ht8UQN1l4",>uX%S).'aOs4PT:I:%Va,bIghT/QN%aN(gR)c:ia#u:0WCpB5/tG,82o;rD<nP#SjmS4\9fNt5)4Tp]4H`7*C/&5#<N-LmBR,`@'2!*n8u[ieRgL-YQKN5%[lPEQ"TgtPeZ=hqd,ufd]#HVpBPCO^jD0jT$mp]RGks*.I[PU6RdPH[Egu17hm$P+\R#TII(Yf^p+lK/gFA(/C_WpY3Gk5;(g*na%%^FNTGdOhV#%J"!Q;P)[,*='5F#T6Nik;7(\G1]^&MEUEI/OeY+Z7\gHaMiMJWhuW7^_>`N&m/fXtPOtSmo=c`U%S+*ZMOD;8<H)%V)/JDCP$,L8!Q=O9@1peX2eKZ(f,en07Vb"B&C6bnX"LJh*Fp\3f3pRJ^4)S__:u.\0[@,AM+/R?g/4m3AG6-FSBi5-A&CQG@G5'%?OJ>SFd`dPm8C`.B9VZn5_4-G%&^a6A"#qkZnK%p!G`O5)26;4"#2UOGuGqc`*^\]c<f[I)TXE[\->`6G&g@6A`bSE1"2L>)Q1j'%0ldL?@Heo3%?p'KaDcK(8t,Dee@%SMEUWb[8H!,\KcO1arGL?CR^HW)`L4VD*G5icL<UjIIpScBm.05ElU=TlUljMR5.M&Nfk=h&%*g?#6f:3Vh5/$J^K"\Q\/6`X-gc\J%Xf]8gEm^rHAHOt_<(),=>i`3(MtM+7":%@6QU>4]V_"_USUAtUm_l#R&g^6n5tj.P^mb5m%]":T4kKY3qIm4nZXP@#FPFLhs/=cO\XcjANcVM#R06DPg@;.83@X#iM&S2E`Y1V9h!U3]`)/3QnjZsC%)&OEm3J0\poHf+>QP</f%_B0emd]C@H+0sS;T$,gNE%X?Vd-R+Nh,WH!>W^B9&sc<7md*G+;p7&0E=J\q4KRGeqn,`g/['q)7qfR^2i=g+6@g'Y"QSY694]'L%bg,MlfbaNo5)$e3.R;MXH,[jg$=FafVf<qt\oSrc.$j`E[A*h,Op8WO5,spHIe]X>,G+\#ATeN+G(0s9iao:QqHNt6h/og3o^]>R%okDHg&*^=agZZXF/[^AuAW:+%(S!JF(CWhT#k-P7<8;&a`RNt092fWb%X#k"g/Otm!j3G=];#(p?c2gIr_eN_;]IC04o:EX5:',K%M4''Bn\MgXduI,@@3`.$B;I6#kTG^3L[P"CC:U%JUg_uJ:NCF:<R;5.\ns^K>S]'knY[PRe!BE8L>:VTfS,t[FIef\0<m\o%O"mj%bf]+idtW@q+(ImTb;=RednW:c;4-ce-W7diG40iVJD3a`,pKE3]i=^jf9?ZhH=%i?0WDN@)bhBd!.Li\UdBQcp3G9iou5-G']H>u%oY;uh7(e0\6^ePDgd>V`?#V7Lp4=VUW$hI2e%W=>7JnSQU8+\W7qh1Rm*g@Ih[?&.^h\[1l:MZE*&E^emC%OE4L^0ES[/;V2jbqQ%;de5iRa1dOQJ$/&R$CN3i-%QZan"]Q#75@MJ"&n6SGUuHQd=+.k:S)74JK9TA/(#uk1dN03X,/C@@dT4Z?mUf^)M('q-uY%"J7CX%4d9];/>%\`$($rP-3I.Sq:<a[3XStIcL"fW@9crf5e&qaR/UPJ_G`)'Ms"6pht2P1=BioJ:,.2"_RUU)&p'oFA%MWkITV8kQt\W+%F!cR3^tNL-nbW='h!G_N5.;,[:cB<:daN=-RhKB=nlU'U!^X&ei)k=mRCr($q+#gU=Ds>iAJ?.eQCX]TgUtS@p67A'P]4p_h"tOP%F?&GjmbP)VT$P:r0>%'e^,&sA&\4gT%iBjua:8>K3p0l<W%dGNEKF@u`bmq1H.XhY"nB\!&WAC9O/taDLsLqfH.pS:)?^l&['%0S%i.T.2gdfq(ZbI^;@R")b'd2$Yp!pJ5cKr,gbMti\_<J+G::7itmMPftXaf]G0Fdg1a/G]^8H!Y`8I>XS.n3D[@4X>p,";E@GCO-D%j9`]D%^lir_A>a\<__8e.1$sZibt?'LotpJ]FGl9-[PEIfH2GfcersW?`\27(^N>Y9%FUF#f4s+ct2FdA^@Y.VV2QKj27+iVDXs!%M.QUbaP1l&&ciF]5s3Y6AAkXPVeL(h`\q_tYP8]ePBT[343N$c:O@q&ofDQ=:%VGeLE\^Q,[M3r3+TNF.4)+E408nV;9c2/Y4/hW%]8.rSM(C)SVH5*],LJ"!_sMiZ=krOOr<>%SkOj\X`094>T8bt*NA.!tqg?t5o3"l\=hDpkl,t][jnW`C4J/`jo@^,]A\CeA2:!'9%KSo?odnIBuB._A@m5CU01nXHqI+IcXfl6Q9a9]g\M=J]8L4l'LS"X2[AUi"?r5U3n97-,7c&L>kK$+['eN:r\#,AqOCV/\O9(%,b%b1+oH*'MMD3Q))"(u#$'hQZagW,d,D@q0^b64%fXp$c!PK;:aTLo2"Y5hn&8,jhZ.[,e%D:WTVZpLqgu3R2YOr3#:VgG^J<m4dsc%H0@VA2*jqa;W7g]D'=S]_(K;E:N.9AKZQAWW8X%FWi9!$E2tdZEF*?(L%[ETl`NW"S\Am/?20P91b"TfZn7i3S-3_:lU(?AKjF+*%_9Gh-XK2RsR)J?#WQs\UdNtukQb1t/i:*4Q.iq/O$b*[Ug^QSpJWl=>6^l,_?U.O)/uUEl[6uO<[@,0*Qou1>pHU9(Pn5D(27rd-%1&EX;]R(:NrIL.GchE*t9/"VcQ7B7m=/reke_#kt'jk-F-`=H3eqt#1E-nOD6kA?HEEW8q#n.Lb?:n'0&4H==</ILuAh,7ID<Yi#%*tdka0<`!g`.-S$2uaU3Gf>0f'rV(J:L#ot5q4rUa4BEKk7O`\m'WiKL.8RbHu]#jk6Q'cC.PBZ/fG\8RQDFp)#'q)5\f.9khg,u%9f6P@:u#ZN[VuHQ3t.RnQFfJ?,lY-2e*4`bP8$m%EH6rIgg3$2K5.H+7>-U(JC9nT:%HVk0Xb<8jqC3=PeG.o&LTm#UH7CsO=(ka%,ig<<9%XG=ZM=m*%>6$fN+1Bu<`ZeVGZuV<GB?YhbQP0,Pt31j>n?*d+-@aLjG9[MI&WpWR-qS1MVEOt0=kGu85>&W4`tMR9(k$R%\C3PWWa3Bs;K-,u_1fMF&nZ-O<@irMlO=il(':oi(\l5gd=)Hek2LqSm)0*K3^NCsZ/=&e'_.Oe,TSt9UM1!pB8l?mqLH28<)dtp%VE0jC>?>TS;1;F:aJ`;1_OsQXXkpkEUlmQm?]cP-:I8C(q>Fe*CL*s:-+@!.:=`T3\G<G#8f5l&J(u/Yhn2/CQ[!N(BW++:'EOpI%o%.6Z4,dC9EF6dc.!t6'm^uMIT)3E7dFUE=VV(M/KWkV+UjA(VD;,h$5j/`f51@DuMJ6PuDO>4I7ddlNI%VIL5fhE-Eo%Le'_0k^%<#(;npJ&6B,!:#6>&81ei/V5hLn8V/F3F>Fm,@1*<4F;6K=N7=ER+Z\Gf&103oUR2eFG<RiIq!uh-C8&#hs=IaV8cr"F'\eFkkqO%F/JPlGT*jQo)NphPt@dpLV#X-5cRBo'=iO8C#7,UqDZmZ]gm7e6b9-]Q$DgtTQ#.X0T*VMF2aWl2=6SU*DqtBDDN^cc/R8L19qV?%%Qpk'Yk,[$*"nH-0&NJaX@:TgOW)M5mI#?GGXB4&I.R3Q?fK&b4pQD&!]o<\\0$0+g@mE/meNgD<8]Y>mTZ7bpFX^BlS]!N49r%D%*4S2#3nA/"=a:K^IL[V;*>f*Kh23\m3H3mI*4X%1U<@R,iJ;OtX\O[2hn2/CQZs*L^"1A`Nc=Q/B10VhIlIQC<Eu0M/c"jjo07+?%Snc(r:t,/1)[Dl5\(q]e"2VKm%A^QR@g$;FB9Z5Yfk0s\*AOi5*E\\u/]5_Y0>=j+MF[d94KbV+4iie/#R'ZsR.PQk6[!ZGe<Q-)%W_T",gF47g4<3(JIYiuu4aq6$6ka/,h&UZ^"aTlW5tf)82DASogU+<Y!iU:%ndI=@J@DKeb40b2s&q7@Qf6e<&g3^rSE4+o&)nCS%DN:J7.2pYuYBG-!6P'"[l-4([#tE!]&55TtDaJDU:ZL@#p21_G&SDE=8=Li_.rMtnJ4K?d?a]F(`q;2gn:P%oVD58;h10.Y5$-j;%(]/PTkkYa<Ukle*1V!kr[=UL7;*2>eq43I3n*/LA4o3<Liua/5hW<$h/KWAAc!DX?qFo&kWi0+][QUnMqdKot#hDbW<0+cYfps/O%*8X0-gRUG@(bq[&)1<W`V^BDSAr6F8SMG>Wo#fRe5$hKlAVkRA6V%$ZkSUVFPL,8>]g&CVZU9PJ-B..l^b9P6[cQp9mYKi77joK>%eT?gg5n0G%%_>Q=9\4_sU&b;_c(l@\N&]upP=W7^F_lM]3]7rT=.Z,:-Ss7E1Xo)Se4_[J9Jb0h1K=A,!3o4dTn\+<@?_iRrC<HQ%`[<Rl82Jah1Xo)Se4_[J8i+unA;3]p+Mlq.QXY.bn]Pep)?r?#P9;mPN,:'AS3e;Mn!5jam3_=I?V>pI9oaXu`UqGS<@EdK[1aQD%_=\M&+mqIP_a,,m&@Diqll6Y8pB$]&;!-F$.f"#irc!#o.>Jq/#mOS)+E.7)IH!'QjC/!Vo6!hiH+BPt)H+lVqVaU?5hFIN>qsbl%VRKjL=1-M'qUf92c@)'?;P-`R$ZQ."#T+[qf!+!>:qRZ^&2D`VmSq6n)AgK%L9Wc&1!6d(Z_CJ08@)Z0G?9Y$h"U$Z&UAe>H^k8H%&NTRAIY[[Q?)[u]+kO?QVX3m+@tJ\5>%2!V1r_e#82_!"Me\&,r#M?/Xj/WYloWU4?&$%ECZ;:G'#^U<YLG"=RgYInZA))1VBhu!%Y"U$rn(^&Ppl=MgVbueg7kA8!mPLlS(U`2ZjHj=ClqTBap?t[kNb=NnD&5<Y5`_k"<$t6`"I%eLZWV_23s=t7qh?^]7?W_fktV7*%A>*HhT+D/j*3"lDM'W(A5<Pb0EtfK"\G(HWAbrZqD;'.ogsM&Vgi)WhH@K/p/8p@MO&q7m#p;i0=Fq/`RF;K%].kts0#MQMa=ae1%VuF-0l+jG#,G"*>mSl]%gqIhp>:P`+;>-J'OWlt^T<8(u,b9'I?Ip5CFr4X/P0"qr@,!]u_Cg;+s"'MPU"pK<LVGA\_V)`%?PJT&%N7Add^m(OH`>,&54(:D%R<qi"r_,2$5:sdd.Z_6`5=UAemV4#1ps2-7h6AMu*%!TFj%amL8FC7-)GJV&b`q94p&RCthXJke;cb^=%(oCMX;9JrD<'i\YQe#\W?,@UsRMRqf$$$mjK,Pkg8Nhc.@/Cg_))5+g15L.*6Ci=C''\smEM'#T^?8&0g`='WGQ43@`O&N8.^-@M%pU(fSVLte:Asf:jYggXDc`Zk[%#@_M<(C,34[gHg>gT$^U(-IinF^Kp#D>`us*W5;_-1C<?EXtEcK50`qrMsEQ2#9qfeIY2P/MZd%Vf!38GG9tAqb7+0$-\E5R^kQ2#YXj.S[W(pF?;JrE>lYSJd[ign8Yt?$k)gcNLbuU8-:g[N/QP8[e58%Xe?0G(A?784'W?mYW3k=%^V'!;'*$XOl_^iX5cPc4_<o)i4LYR!]t<W>*IjA\^2ZG&*'nZfTh>6[hc[Asm/`:&X"(>b"FI5KOL,(g@R/o-\+Ll%kt#eq=s(Q&%$khiU+9k@oVJC[7jQ?-SN+s3X7g*bEH/7:&5"sk@qZnJ7EQ(C@or?cG(Z+j?2jLOA(XV6&Y&a=#iPU+G[*_lgT.S%4Q9fCc&TP^I%<q<<Y)'mnT=0Xih_Y?5")G(MP`2oOs;m:\T3=noBgBN0o'@_&(-]u>smK7\&T-IXS)jg?%n4OPXl>BTNQ5]WqnGaaL4+^;HUqLA!%'N?k'lKhq-!7E)A,>FR$RIt]8Ut?i'Yor6%6qaP<7oDh`@K[,Ke8\+kAQ(rL4r\bmc,4@A2%iK.kIt]O"NJhGSp3StK7eRo6Pp'c%S-3`3&32+3Np#iL3S)n/,Q%-g1s2/e9E&$aTJUGMD@dVniN\/Of-I-$QfAc"PFSG5b@?EV2/\%NHJm8CN;ebQq@.'1cg)7:M'mS`%M*!@9SJrIN7n7$aOnZ,<]6$KFLL$40OI(nPS^F$^Rb0HWbM?VjliNI;J_$cUe0dg>+*K_<].N0&]AZqDCrT?"SKdGXD<n1H8o-uR%V^qP,_c4fKXQ-HY,)Q?TGOCj@\0!obGi78HAhlIL:s7/JU/RB6g&o<smHm;P7h&9Wm['4\(+<XnR*:e<K:@A^5WhD;7A-K!VYdd5%LiQ,gKBp2`h(;6qrARnMg#0N"[Ysb7]E-8@H@=e^bF<X\_%u(2Vb,L=RifbhNQdTm]4`MAF9b-cQp5NAb.N_Jmdkped3Hf>>F@<]%!p_9fo[B9e-/H50/<5#D$EU7h7ngBSholj?)L^F-PVXE"eBMFkQ5>oIs1CPcR<Wbec]F`qT%r?7=a+f?\tp:MDDrZ>:M.[jRitk)%+m3]sS9]jZ[i'4819&LPe2-\)3R\DIdL<[(1ZZ-nOEJbGY$7D>lgEOF^PNaXYF`u;H%"[.nKblUX]_Y9/k5(VW`Aeq%]#0YE9UrA%-,Y[-THdui5:`CEDn`p^'kHI)DR7Cp$V4(2BqNlk6F8WZ9*\m%XE_RA[eG%qmEN!P3jQW]>J&oC$90RD:^IE&#@?(0ih[R*>4oSQ%NWIPRd[*j,T&gi[@P?IJFR3Vi:4KZ@pjSl)PEU!uLgBa/)Ph>2nS38L;G:<AqsIjqd!5eBQa0]VZpm?b#rWuWpDjNn:d)Z6dCZ,t%LgSY1(YKVu/meOiYL_d>MrE,t%CLq5Hf_*L!O-/1a1geHj/S#%GjD@@T_VqXOLd,uL5L&*EHf%>Vg'i#!Ncck>Y:_<(4BZCBCh,=%#nje\f<iJZ!FAF_IJNNZ^O5j0J,QZ9rp'I^s8I%$rp6?Ws5+mdG^/tt^Nd4JpK?h:CWH)S\GC+;fDJjO76f^]-RaILXo21*rZL\$%aWLHJ)oJ:2p:'8^(43FU?*U"'hL?R#ft<$RcDNm>]q9fMV_<PojdRq'pWIm\hX<].rpQf99qqetW4Ci]0X+"@f3eO@LHjYi^\R``%^OQ1-2hsWoe*k$MqJX.Eag[?2+f2A+^AdX]5Pb05V>Ss&J,A&OT_ui;^-I8:Ys&*c-XXHZq:0cYGFjYXF4j9u_AC6fmB"g!C&[dl%@Mc/L3`bm<Ck(rSA49kIir,lf7;'lS@t/X_O5GLSbAV#ir@M[0&-ZtTrfl#7K-akn^[-;Id(fNhIWk"V^s[.9`;2PL@f*9d=RFqT%;ajc0AuKmtm&FSb?c`c^Y"DaeQ"m#+nb6s:bl0[Xk4n>&ft%P-.sV5=?'n[kh7fA4jrS>U7:0bo?u%:lVT,.@"(SLkb*_@-J^)1p%=*00VDp7Sa^96ZMQ/-9%K!/!jF2(>9qY]`>\c5E:T3je\r9"`oHmA?R<UF:R^ZLcls6<OuJ*#8i9-%+K*##C0J[AC?R&4)6Xq""(%e$!&!=$m7@5'4-feGtGKk,q::fg\QJ^>hGGd=,"-i>\*n3_4q<<d;8.ceE=A-Acm=rf"8dKf+mJ>:d,jBtqB%IeDC_QPl]cnr1YD%5i@nk7>8=n7(D's99Rh.iNY1W2tPHOh:_PS1X%4FpjZb?J,/3'))naZjOIsN7@!,-.dMb(i+3+Y`7u+9,TJFXdeq[2)5Z&kaqWIX%1Qnqt1tP_aP-9[@f2XYj7jo7MWs41=VFdP`7>e9lV2h^AQ@0KB*aL'i*%E:C<mQmJ5:0gAU60gl,\!pNOaP+u+*4ism*TN>j!p2N%3D!Q;C4Y:n+gZ1=N8uK5]5\RFjNoVME9gUN3K?cH>X]n5MNTO#C*<:DRP4Hd1FO=#[A7-?aeF.2p;CR]<q-J"2kXDuCdqqU59jKW%0I*lXc%stmRh8f@c\PXCcA4mR-H)s>9hsd/-RYn"_IM'F9hopQ-E!mS-RVr7PLEOL-7?S;F44+oo)tK64E3NfVQ!Up;,]DLYY%QW%auj*nSYk4WWYg*6FPJ\n8^lo\eLE@j]!A1k@)"(as1ZaI?Xm::A:aHDB>;3/AbNT?IddktoY^.3s'J!;IK-Wl^\R0,s*/V`_*@kS%H^;2@qu)_rG<bueViTa4d>rbOHN!0M?[_hM=(g(@J+NQR5Fh]H4VRkGf3eLSnU!LunTt-.j.F*bmeb%c^AZZ%Ie&E;hgG=I;X`9'%IoYr-hgYV([i\N@2!BEmnZRE8dsq4#=oMLqrqu)3e7sL2rh#5'+$][9V?-oSDAE-@r.cNAofVq&h`YX:h]q[g&,h36ZV,!IS.V"W%%HZ0!X&EnP8sFJ,,3a?\EZ>VMZV$CWKX2E_Yg0hb=]s</h?q"Tk:Y-OT$)G^(Z6Y;39Npip$@NR%!Cls5C[m/cXZ"+(lYT(qTE@.%Z@"Z>a#W#Sb'a6:8i_TrDd88[0(F(Ra+#864DS`-*P\>QmFge:h].&M/j4,]QOCTVY4l2nh^.X@fEV7a(&HZ:CHpKtpl1[^T.IX)%F(E%5s5M@So]6<Br,MUh5PaFhJ,[uJI/VkCro'1cr8@U&p!^,Ek.@gGp@GK&qsr3CI.dNRIXLh52lFp8roa$>a%sJIqA4(Q?U'#0%:Z)0+8U36\ocO+i:]Bo\^\iS5H&qF~>%AI9_PrivateDataEnd