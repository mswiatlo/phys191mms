%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: muon_decay.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: steven schowalter
%%CreationDate: 3/8/09
%%BoundingBox: 0 0 300 201
%%HiResBoundingBox: 0 0 300 200.9375
%%CropBox: 0 0 300 200.9375
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 7280 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD07FF7DA8FD047DFD79FFA827527D525252A8FFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FD0AFF5252527D527D7DA87EFFA8A8A8FF%A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FF%A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FD07FF7D7D7D527D52A8A37FFF%FFA8FD05FFA8FD0DFFA8FD13FFA8FD0DFFA8FD13FFA8FD0DFFA8FD05FFA8%FD0DFFA8FD0EFFA8A97FFD6FFFA8FD0DFFA8A87FA9FD6EFFA8FD0DFFA8FF%7FFD6FFFA8FD0DFFA8A87F55FD36FFA8FD337DFD04FFA8FD0DFFA8FF7F4F%FD36FF7DA8FD31FFA8A8FFFFFFA8FD0DFFA8A8FF55FD36FFA8A8FD31FF7D%A8FFFFFFA8FD0DFFA8FFFF7FA9FD35FFA8A8FD09FFA852A8A8A87DA8A8FD%20FFA8A8FFFFFFA8FD0DFFA8A8FF7FA9FD35FFA8A8FFFFFFA92BA3FFFFFF%52A852272752F87DFD20FF7DA8FFFFFFA8FD07FFFD07A8FFFFA97FFD35FF%A8A8FFFFFFA92BCBFFFFFFA852A8527D7D527DFD20FFA8A8FFFFFFA8FD07%FF52527D525252A8FFFFA92BA9FD34FFA8A8FD09FFFD04A8FD24FF7DA8FD%0BFFFD047D52A87DFFFFFF2BCBFD34FF7DA8FFFFFD05A9FFFF7D275227A8%FD23FFA8A8FFFFFFA8FD07FF7D527D527D52A8FFFFFF7FA3FD34FFA8A8FF%FF792B4F2B79FFFF7D7D7D52A8FD23FF7DA8FFFFFFA8FFA8A8A8FD09FFA8%FFFFFFA9A3FD34FFA8FD0AFF7D52A87DFD04A8FFA8FFA8FFFFFFA8FFA8FF%A8A8A8FFA8A8A8FFA8FFA8FD05FFA8A8A8FFFFA8A8FFFFFFA8A87D7D7DA8%FD09FFA8FFFFFF55FD34FFA8A8FFFFC3BCC3BCC3FFFF7D52525227A82752%5252277D27527D5252527DA82752525227522727A87DFF52277D522727A8%FFFF7DA8FFFFFFA8FFA87DA8FD09FFA8FD04FF7FFD34FFA8A8FFFFC3BCBC%BCC3FFFFA8527D52527D7D5252277D7D7D527D7D7D52A8A8A8527D527D52%5252FF7D7D52A87D7D527DA8FFFFA8A8FFFFFFA8A827277DFD09FFA8A8FF%FFFF79A9FD33FFA8A8FD09FFA8FFFFFFA8FFFFFF52A8FFFFA8FFA8FD07FF%A8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFF7DA8FFFFFFA8FF2752A8FD09%FFA8FD04FFCB7FFD33FFA8FD32FFA8A8FFFFFFA8FF7D27A8FD09FFA8A8FF%FFFF4F55FD33FFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA852A8%FFFFFFA8FF52277DFD09FFA8FD04FF7F2BFD34FFFD33A8FD04FFA8A8A87D%7DA8FD09FFA8FD04FF7F4FFD6AFFA8FF7D7D7DFD04FFA87DA87D7DA8FD05%FF7F55FD6AFFA8FFFFA8FD04FF7D277D525252A8FD06FF552BA9FD68FFA8%FF7D7DA8FFFFFF27527D7D527D7DFD06FF7F4FFD69FFA8FF52F87DFFFFA8%A87D7D527D52A8FD06FFA37FFD6BFF5252A8FD09FFA8FD07FF79FD69FFA8%FF5252A8FD09FFA8A8FD06FF7FF979FD67FFA8FFA87DA8FD09FFA8FD07FF%A955A9FD67FFA8FF7D527DFD09FFA8A8FD07FF55FD68FFA8FF7D277DFD09%FFA8FD08FF7FA9FD67FFA8FFA8527DFD0AFFA8FD07FFA97FA9FD66FFA8FF%52527DFD09FFA8FD09FF4F55FD66FFA87D2727A8FD09FFA8A8FD08FF794F%FD66FFA8FF5227A8FFFFFFA8FFA8FFA8A8A8FD09FF7F2BFD66FFA87D2752%A8FFFFFF7D277D525252A8FD09FFA925FD6EFFA8527D7D52A87DFD09FF7F%257FFD65FFA87D527DA8FFFFA87D527D527D27A8FD0AFF7979FD65FFA8FF%5227A8FD09FFA8FD0BFF7FA9FD1AFFA87D52A8FD09FFA8A8FD05FFA8FD09%FFA8FD2BFFA8FF7D527DFD0AFFA8FD09FFA92B4FFD1BFF7D52FD06FFA8A8%FFA85252A8FF527DA85252FFFFA8A8FFFFFF52527D7D27A8FD04FFA8FD22%FFA8FFA8A8FD0AFFA8FD0BFF7F7FA9FD1AFFA87DFF7DA87DFF7D527DFFFF%FF7DFFFFA852FFFF7DFFFF2752FFFFA87DFF52527D7DFF7DA87D5252FD21%FFA8FF7D7DFD0AFFA8A8FD0BFF7F55FD1AFF7D7DFF52527DFFA87DA8FFA8%27A8A8FFA87DA8527DFFA85252FFFFA8527D527D7D7DFF52527D7D277DFD%20FFA8FFA87DA8FD09FFA8FD0CFF7925FD1BFFA8FF527DA8FD05FF7D7D7D%A8A8FFA8A852A8FFFF527DFFFFA8A852FFA87DFFFF527DA8A87DFD21FFA8%FF7D27A8FD09FFA8A8FD0CFFA955A9A9FD1AFFA8FD1FFFA8FD25FFA8FF7D%277DFD09FFA8FD0EFF7FF9A9FD60FFA8FF7D27A8FD0AFFA8FD0DFFA955FD%61FFA8FF27277DFFFFFF7DA87DFD04A8FD0DFFA97F7FA9FD60FFA8FF5227%A8FFFFFF7D27FD0452A8FD0DFFA94FFF55FD60FFA8FF527DA8FFFFFFFD04%7D527D7DFD10FFA379FD5FFFA8FF7D52A8FFFFA8527D7D527D52A8FD10FF%55F94FFD60FF7D7DA8FD09FFA8FD11FF7F4FA9FD5DFFA8FFA8277DFD09FF%A8A8FD11FF7F7FFD5DFFA8FF52277DFD09FFA8FD13FF7FA9FD5CFFA8A852%27A8FD09FFA8A8FD12FFA92BCBFD5BFFA8A8277DA8FD09FFA8FD13FF2B7F%55FD5BFFA8A8FFA8FD0BFFA8FD13FF55254FFD5AFFA8FD0DFFA8FD14FFCB%7F2B254F55FD57FFA8FD0DFFA8A8FD16FF7F257F7FFD56FFA8FD09FFA8FF%A8A8A8FD18FFCB552BCBFD55FFA8FD07FF7D527D525252A8FD19FFA94FA9%FD5DFFA87DA87D52A87DFD1BFF557F7FA9FD52FFA8FD07FFA87D7D525227%A8A8FD1AFF4FF925F9FD52FFA8FD0DFFA8FD1BFFA9FFA9797FFD51FFA8FD%0EFFA8FD1EFF4FF92BFFFFA9A3FD4BFFA8FD0DFFA8FD1FFFA9A9554FA9A9%2BFD4BFFA8FD0DFFA8A8FD21FF4F25257FA9FD08FFA97FFD40FFA8FD0DFF%A8FD23FFA9A9A92555A9A9A3A9FFA3FF794FFD3EFFA9A3A8FD0DFFA8A8FD%25FF7F55252BF95579257FA9FFFFA9FD3DFF2BA8FD0DFFA8FD27FF7F79A9%FF4F2B792B55A32B2B25557FA37F7F557FA9FFCBFD07FFA9FD2AFF797EFD%0EFFA8FD2BFFA9FFA9CB7F5555552B25F9F9F92BF955A92B2B797F554F7F%7F2B55FF7FFF7F79FF792B7FFFFFA97FA9A9A9FF7FFFA97F7FA9FFFFA9FD%04FF7F4FFFA9FD07FF55A8FD0BFF7DFFA8CAFD04FFCAFFFFFFCAFFFFFFCA%FD07FFCAFFFFFFCAFFFFFFCAFFFFFFCAFD07FFCAFFFFFFCAFFFFFFCFFFFF%FFA8FFA9A9A2A34F254E552B252B2B25254E4F2525244F2B4F4E4F2B4F4E%4F2B4F2555A34F244F2B4F24797F4F244F2B4F4E7F252B4FCB7F7F78A3FF%797DFD0AFF7D5259CA9AC3BCC39AC3BCC3BCC39AC3BCC3BCC3BCBC9AC3BC%C3BCC39AC3BCC3BCC39AC3BCC3BCC3BCBC9AC3BCC3BCC39ABCBCC3BCC39A%C3BCC3BCC3BCC2BCC394C3BCC39ABC9ABD9A9B949B949B94BD94BD9ABD94%9594C3949A94719A9B94C39A9B7095949B709B94BDBC9B94946A9570956A%71249AFD0AFFA87D7DA8A8A8FFA8AFAFFFA8FFAFA8A8FFA8FFA8FFA8FFA8%FFA8FFA8AFAFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFA8FFA8FFA8%FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFAEFFCFFFA8FFCFFFAEFFFFAEA8%FFCFFFA8FFA8FFA8FFCFFFA8FFFFFFA8FFFFCFA8FFAEFFAEFFA8A9A8FFAE%FF7E7EA8FD0AFFA8527DFD98FFA852A8FD1FFF7DA852A8FD1DFFA87DA852%FD39FFA852A8FD1EFFA87D527D7DFD1DFFA87D7D52A8FD38FFA87D7DFD1F%FF7D7D527DFD1EFF7DA852A8FD39FF7DFD20FFA8A87DA8FD1DFFA8FFA87D%A8FDFCFFFDD6FFA852527DFFA8FFA8FFFFA8A8FFA8A87DFD71FF7D7DFD06%52FF7D7D7D5252A87DFD70FF7D7D277D7D52277DA87D7D5227277D7DFD71%FFFD07A8FF7D5252A87DA87DFD7AFF7DFFFFFFA8FD30FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-03-08T15:26:16-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-03-08T15:28:26-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-03-08T15:28:26-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>172</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qxf8AM1debyTfroTy&#xA;xX7PbBpbdJpJktjdRC7aNLZo7hmFt6hCwsJD+wQ1MVeOXMnn942KJ5kivRI0UX1ca2IH0ZLC4Vpw&#xA;tw83C5lnVHVJHa6VmVQTTFXovlfzHqulaJEr2l1PYS6q1tZzavNdxXiW17evBZmVb2N7lvioo9Uh&#xA;uJXL9PpzlJA5iMpf6UWfsVnJuNWEqx/VISGVm5+s/EcSBQ/uup5bfLKFX+pqv/LPB/yPf/qjiqyK&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:9F8661F7810DDE11949D893042A0D4D2</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:A28661F7810DDE11949D893042A0D4D2</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.2x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -200.938 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 200.938 li
300 200.938 li
300 0 li
cp
clp
[1 0 0 1 0 0 ]ct
39.375 19 mo
39.375 18.625 39.1875 18.25 38.9375 17.9375 cv
38.625 17.6875 38.25 17.5 37.875 17.5 cv
37.5 17.5 37.125 17.6875 36.8125 17.9375 cv
36.5625 18.25 36.375 18.625 36.375 19 cv
36.375 19.375 36.5625 19.75 36.8125 20.0625 cv
37.125 20.3125 37.5 20.5 37.875 20.5 cv
38.25 20.5 38.625 20.3125 38.9375 20.0625 cv
39.1875 19.75 39.375 19.375 39.375 19 cv
39.375 19 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.882353 0.768627 0 0 cmyk
f
42.5 32.1875 mo
42.5 31.8125 42.3125 31.4375 42.0625 31.125 cv
41.75 30.875 41.375 30.6875 41 30.6875 cv
40.625 30.6875 40.25 30.875 39.9375 31.125 cv
39.6875 31.4375 39.5 31.8125 39.5 32.1875 cv
39.5 32.5625 39.6875 32.9375 39.9375 33.25 cv
40.25 33.5 40.625 33.6875 41 33.6875 cv
41.375 33.6875 41.75 33.5 42.0625 33.25 cv
42.3125 32.9375 42.5 32.5625 42.5 32.1875 cv
42.5 32.1875 li
cp
f
45.6875 50.375 mo
45.6875 50 45.5 49.625 45.25 49.3125 cv
44.9375 49.0625 44.5625 48.875 44.1875 48.875 cv
43.8125 48.875 43.4375 49.0625 43.125 49.3125 cv
42.875 49.625 42.6875 50 42.6875 50.375 cv
42.6875 50.75 42.875 51.125 43.125 51.4375 cv
43.4375 51.6875 43.8125 51.875 44.1875 51.875 cv
44.5625 51.875 44.9375 51.6875 45.25 51.4375 cv
45.5 51.125 45.6875 50.75 45.6875 50.375 cv
45.6875 50.375 li
cp
f
48.875 55.0625 mo
48.875 54.6875 48.6875 54.3125 48.4375 54 cv
48.125 53.75 47.75 53.5625 47.375 53.5625 cv
47 53.5625 46.625 53.75 46.3125 54 cv
46.0625 54.3125 45.875 54.6875 45.875 55.0625 cv
45.875 55.4375 46.0625 55.8125 46.3125 56.125 cv
46.625 56.375 47 56.5625 47.375 56.5625 cv
47.75 56.5625 48.125 56.375 48.4375 56.125 cv
48.6875 55.8125 48.875 55.4375 48.875 55.0625 cv
48.875 55.0625 li
cp
f
52 59.1875 mo
52 58.8125 51.8125 58.4375 51.5625 58.125 cv
51.25 57.875 50.875 57.6875 50.5 57.6875 cv
50.125 57.6875 49.75 57.875 49.4375 58.125 cv
49.1875 58.4375 49 58.8125 49 59.1875 cv
49 59.5625 49.1875 59.9375 49.4375 60.25 cv
49.75 60.5 50.125 60.6875 50.5 60.6875 cv
50.875 60.6875 51.25 60.5 51.5625 60.25 cv
51.8125 59.9375 52 59.5625 52 59.1875 cv
52 59.1875 li
cp
f
55.1875 67.75 mo
55.1875 67.375 55 67 54.75 66.6875 cv
54.4375 66.4375 54.0625 66.25 53.6875 66.25 cv
53.3125 66.25 52.9375 66.4375 52.625 66.6875 cv
52.375 67 52.1875 67.375 52.1875 67.75 cv
52.1875 68.125 52.375 68.5 52.625 68.8125 cv
52.9375 69.0625 53.3125 69.25 53.6875 69.25 cv
54.0625 69.25 54.4375 69.0625 54.75 68.8125 cv
55 68.5 55.1875 68.125 55.1875 67.75 cv
55.1875 67.75 li
cp
f
58.375 83.125 mo
58.375 82.75 58.1875 82.375 57.9375 82.0625 cv
57.625 81.8125 57.25 81.625 56.875 81.625 cv
56.5 81.625 56.125 81.8125 55.8125 82.0625 cv
55.5625 82.375 55.375 82.75 55.375 83.125 cv
55.375 83.5 55.5625 83.875 55.8125 84.1875 cv
56.125 84.4375 56.5 84.625 56.875 84.625 cv
57.25 84.625 57.625 84.4375 57.9375 84.1875 cv
58.1875 83.875 58.375 83.5 58.375 83.125 cv
58.375 83.125 li
cp
f
61.5625 95.8125 mo
61.5625 95.4375 61.375 95.0625 61.125 94.75 cv
60.8125 94.5 60.4375 94.3125 60.0625 94.3125 cv
59.6875 94.3125 59.3125 94.5 59 94.75 cv
58.75 95.0625 58.5625 95.4375 58.5625 95.8125 cv
58.5625 96.1875 58.75 96.5625 59 96.875 cv
59.3125 97.125 59.6875 97.3125 60.0625 97.3125 cv
60.4375 97.3125 60.8125 97.125 61.125 96.875 cv
61.375 96.5625 61.5625 96.1875 61.5625 95.8125 cv
61.5625 95.8125 li
cp
f
64.6875 101.625 mo
64.6875 101.25 64.5 100.875 64.25 100.563 cv
63.9375 100.313 63.5625 100.125 63.1875 100.125 cv
62.8125 100.125 62.4375 100.313 62.125 100.563 cv
61.875 100.875 61.6875 101.25 61.6875 101.625 cv
61.6875 102 61.875 102.375 62.125 102.688 cv
62.4375 102.938 62.8125 103.125 63.1875 103.125 cv
63.5625 103.125 63.9375 102.938 64.25 102.688 cv
64.5 102.375 64.6875 102 64.6875 101.625 cv
64.6875 101.625 li
cp
f
67.875 112.375 mo
67.875 112 67.6875 111.625 67.4375 111.313 cv
67.125 111.063 66.75 110.875 66.375 110.875 cv
66 110.875 65.625 111.063 65.3125 111.313 cv
65.0625 111.625 64.875 112 64.875 112.375 cv
64.875 112.75 65.0625 113.125 65.3125 113.438 cv
65.625 113.688 66 113.875 66.375 113.875 cv
66.75 113.875 67.125 113.688 67.4375 113.438 cv
67.6875 113.125 67.875 112.75 67.875 112.375 cv
67.875 112.375 li
cp
f
71.0625 106.313 mo
71.0625 105.938 70.875 105.563 70.625 105.25 cv
70.3125 105 69.9375 104.813 69.5625 104.813 cv
69.1875 104.813 68.8125 105 68.5 105.25 cv
68.25 105.563 68.0625 105.938 68.0625 106.313 cv
68.0625 106.688 68.25 107.063 68.5 107.375 cv
68.8125 107.625 69.1875 107.813 69.5625 107.813 cv
69.9375 107.813 70.3125 107.625 70.625 107.375 cv
70.875 107.063 71.0625 106.688 71.0625 106.313 cv
71.0625 106.313 li
cp
f
74.1875 118.125 mo
74.1875 117.75 74 117.375 73.75 117.063 cv
73.4375 116.813 73.0625 116.625 72.6875 116.625 cv
72.3125 116.625 71.9375 116.813 71.625 117.063 cv
71.375 117.375 71.1875 117.75 71.1875 118.125 cv
71.1875 118.5 71.375 118.875 71.625 119.188 cv
71.9375 119.438 72.3125 119.625 72.6875 119.625 cv
73.0625 119.625 73.4375 119.438 73.75 119.188 cv
74 118.875 74.1875 118.5 74.1875 118.125 cv
74.1875 118.125 li
cp
f
77.375 118.938 mo
77.375 118.563 77.1875 118.188 76.9375 117.875 cv
76.625 117.625 76.25 117.438 75.875 117.438 cv
75.5 117.438 75.125 117.625 74.8125 117.875 cv
74.5625 118.188 74.375 118.563 74.375 118.938 cv
74.375 119.313 74.5625 119.688 74.8125 120 cv
75.125 120.25 75.5 120.438 75.875 120.438 cv
76.25 120.438 76.625 120.25 76.9375 120 cv
77.1875 119.688 77.375 119.313 77.375 118.938 cv
77.375 118.938 li
cp
f
80.5625 129.125 mo
80.5625 128.75 80.375 128.375 80.125 128.063 cv
79.8125 127.813 79.4375 127.625 79.0625 127.625 cv
78.6875 127.625 78.3125 127.813 78 128.063 cv
77.75 128.375 77.5625 128.75 77.5625 129.125 cv
77.5625 129.5 77.75 129.875 78 130.188 cv
78.3125 130.438 78.6875 130.625 79.0625 130.625 cv
79.4375 130.625 79.8125 130.438 80.125 130.188 cv
80.375 129.875 80.5625 129.5 80.5625 129.125 cv
80.5625 129.125 li
cp
f
83.6875 132.188 mo
83.6875 131.813 83.5 131.438 83.25 131.125 cv
82.9375 130.875 82.5625 130.688 82.1875 130.688 cv
81.8125 130.688 81.4375 130.875 81.125 131.125 cv
80.875 131.438 80.6875 131.813 80.6875 132.188 cv
80.6875 132.563 80.875 132.938 81.125 133.25 cv
81.4375 133.5 81.8125 133.688 82.1875 133.688 cv
82.5625 133.688 82.9375 133.5 83.25 133.25 cv
83.5 132.938 83.6875 132.563 83.6875 132.188 cv
83.6875 132.188 li
cp
f
86.875 133.563 mo
86.875 133.188 86.6875 132.813 86.4375 132.5 cv
86.125 132.25 85.75 132.063 85.375 132.063 cv
85 132.063 84.625 132.25 84.3125 132.5 cv
84.0625 132.813 83.875 133.188 83.875 133.563 cv
83.875 133.938 84.0625 134.313 84.3125 134.625 cv
84.625 134.875 85 135.063 85.375 135.063 cv
85.75 135.063 86.125 134.875 86.4375 134.625 cv
86.6875 134.313 86.875 133.938 86.875 133.563 cv
86.875 133.563 li
cp
f
90.0625 134.375 mo
90.0625 134 89.875 133.625 89.625 133.313 cv
89.3125 133.063 88.9375 132.875 88.5625 132.875 cv
88.1875 132.875 87.8125 133.063 87.5 133.313 cv
87.25 133.625 87.0625 134 87.0625 134.375 cv
87.0625 134.75 87.25 135.125 87.5 135.438 cv
87.8125 135.688 88.1875 135.875 88.5625 135.875 cv
88.9375 135.875 89.3125 135.688 89.625 135.438 cv
89.875 135.125 90.0625 134.75 90.0625 134.375 cv
90.0625 134.375 li
cp
f
93.25 134.625 mo
93.25 134.25 93.0625 133.875 92.8125 133.563 cv
92.5 133.313 92.125 133.125 91.75 133.125 cv
91.375 133.125 91 133.313 90.6875 133.563 cv
90.4375 133.875 90.25 134.25 90.25 134.625 cv
90.25 135 90.4375 135.375 90.6875 135.688 cv
91 135.938 91.375 136.125 91.75 136.125 cv
92.125 136.125 92.5 135.938 92.8125 135.688 cv
93.0625 135.375 93.25 135 93.25 134.625 cv
93.25 134.625 li
cp
f
96.375 138.25 mo
96.375 137.875 96.1875 137.5 95.9375 137.188 cv
95.625 136.938 95.25 136.75 94.875 136.75 cv
94.5 136.75 94.125 136.938 93.8125 137.188 cv
93.5625 137.5 93.375 137.875 93.375 138.25 cv
93.375 138.625 93.5625 139 93.8125 139.313 cv
94.125 139.563 94.5 139.75 94.875 139.75 cv
95.25 139.75 95.625 139.563 95.9375 139.313 cv
96.1875 139 96.375 138.625 96.375 138.25 cv
96.375 138.25 li
cp
f
99.5625 145.688 mo
99.5625 145.313 99.375 144.938 99.125 144.625 cv
98.8125 144.375 98.4375 144.188 98.0625 144.188 cv
97.6875 144.188 97.3125 144.375 97 144.625 cv
96.75 144.938 96.5625 145.313 96.5625 145.688 cv
96.5625 146.063 96.75 146.438 97 146.75 cv
97.3125 147 97.6875 147.188 98.0625 147.188 cv
98.4375 147.188 98.8125 147 99.125 146.75 cv
99.375 146.438 99.5625 146.063 99.5625 145.688 cv
99.5625 145.688 li
cp
f
102.75 144.875 mo
102.75 144.5 102.563 144.125 102.313 143.813 cv
102 143.563 101.625 143.375 101.25 143.375 cv
100.875 143.375 100.5 143.563 100.188 143.813 cv
99.9375 144.125 99.75 144.5 99.75 144.875 cv
99.75 145.25 99.9375 145.625 100.188 145.938 cv
100.5 146.188 100.875 146.375 101.25 146.375 cv
101.625 146.375 102 146.188 102.313 145.938 cv
102.563 145.625 102.75 145.25 102.75 144.875 cv
102.75 144.875 li
cp
f
105.875 145.125 mo
105.875 144.75 105.688 144.375 105.438 144.063 cv
105.125 143.813 104.75 143.625 104.375 143.625 cv
104 143.625 103.625 143.813 103.313 144.063 cv
103.063 144.375 102.875 144.75 102.875 145.125 cv
102.875 145.5 103.063 145.875 103.313 146.188 cv
103.625 146.438 104 146.625 104.375 146.625 cv
104.75 146.625 105.125 146.438 105.438 146.188 cv
105.688 145.875 105.875 145.5 105.875 145.125 cv
105.875 145.125 li
cp
f
109.063 150.375 mo
109.063 150 108.875 149.625 108.625 149.313 cv
108.313 149.063 107.938 148.875 107.563 148.875 cv
107.188 148.875 106.813 149.063 106.5 149.313 cv
106.25 149.625 106.063 150 106.063 150.375 cv
106.063 150.75 106.25 151.125 106.5 151.438 cv
106.813 151.688 107.188 151.875 107.563 151.875 cv
107.938 151.875 108.313 151.688 108.625 151.438 cv
108.875 151.125 109.063 150.75 109.063 150.375 cv
109.063 150.375 li
cp
f
112.25 150.375 mo
112.25 150 112.063 149.625 111.813 149.313 cv
111.5 149.063 111.125 148.875 110.75 148.875 cv
110.375 148.875 110 149.063 109.688 149.313 cv
109.438 149.625 109.25 150 109.25 150.375 cv
109.25 150.75 109.438 151.125 109.688 151.438 cv
110 151.688 110.375 151.875 110.75 151.875 cv
111.125 151.875 111.5 151.688 111.813 151.438 cv
112.063 151.125 112.25 150.75 112.25 150.375 cv
112.25 150.375 li
cp
f
115.438 153.688 mo
115.438 153.313 115.25 152.938 115 152.625 cv
114.688 152.375 114.313 152.188 113.938 152.188 cv
113.563 152.188 113.188 152.375 112.875 152.625 cv
112.625 152.938 112.438 153.313 112.438 153.688 cv
112.438 154.063 112.625 154.438 112.875 154.75 cv
113.188 155 113.563 155.188 113.938 155.188 cv
114.313 155.188 114.688 155 115 154.75 cv
115.25 154.438 115.438 154.063 115.438 153.688 cv
115.438 153.688 li
cp
f
118.563 155.063 mo
118.563 154.688 118.375 154.313 118.125 154 cv
117.813 153.75 117.438 153.563 117.063 153.563 cv
116.688 153.563 116.313 153.75 116 154 cv
115.75 154.313 115.563 154.688 115.563 155.063 cv
115.563 155.438 115.75 155.813 116 156.125 cv
116.313 156.375 116.688 156.563 117.063 156.563 cv
117.438 156.563 117.813 156.375 118.125 156.125 cv
118.375 155.813 118.563 155.438 118.563 155.063 cv
118.563 155.063 li
cp
f
121.75 152 mo
121.75 151.625 121.563 151.25 121.313 150.938 cv
121 150.688 120.625 150.5 120.25 150.5 cv
119.875 150.5 119.5 150.688 119.188 150.938 cv
118.938 151.25 118.75 151.625 118.75 152 cv
118.75 152.375 118.938 152.75 119.188 153.063 cv
119.5 153.313 119.875 153.5 120.25 153.5 cv
120.625 153.5 121 153.313 121.313 153.063 cv
121.563 152.75 121.75 152.375 121.75 152 cv
121.75 152 li
cp
f
124.938 157.5 mo
124.938 157.125 124.75 156.75 124.5 156.438 cv
124.188 156.188 123.813 156 123.438 156 cv
123.063 156 122.688 156.188 122.375 156.438 cv
122.125 156.75 121.938 157.125 121.938 157.5 cv
121.938 157.875 122.125 158.25 122.375 158.563 cv
122.688 158.813 123.063 159 123.438 159 cv
123.813 159 124.188 158.813 124.5 158.563 cv
124.75 158.25 124.938 157.875 124.938 157.5 cv
124.938 157.5 li
cp
f
128.063 160.563 mo
128.063 160.188 127.875 159.813 127.625 159.5 cv
127.313 159.25 126.938 159.063 126.563 159.063 cv
126.188 159.063 125.813 159.25 125.5 159.5 cv
125.25 159.813 125.063 160.188 125.063 160.563 cv
125.063 160.938 125.25 161.313 125.5 161.625 cv
125.813 161.875 126.188 162.063 126.563 162.063 cv
126.938 162.063 127.313 161.875 127.625 161.625 cv
127.875 161.313 128.063 160.938 128.063 160.563 cv
128.063 160.563 li
cp
f
131.25 159.438 mo
131.25 159.063 131.063 158.688 130.813 158.375 cv
130.5 158.125 130.125 157.938 129.75 157.938 cv
129.375 157.938 129 158.125 128.688 158.375 cv
128.438 158.688 128.25 159.063 128.25 159.438 cv
128.25 159.813 128.438 160.188 128.688 160.5 cv
129 160.75 129.375 160.938 129.75 160.938 cv
130.125 160.938 130.5 160.75 130.813 160.5 cv
131.063 160.188 131.25 159.813 131.25 159.438 cv
131.25 159.438 li
cp
f
134.438 158.625 mo
134.438 158.25 134.25 157.875 134 157.563 cv
133.688 157.313 133.313 157.125 132.938 157.125 cv
132.563 157.125 132.188 157.313 131.875 157.563 cv
131.625 157.875 131.438 158.25 131.438 158.625 cv
131.438 159 131.625 159.375 131.875 159.688 cv
132.188 159.938 132.563 160.125 132.938 160.125 cv
133.313 160.125 133.688 159.938 134 159.688 cv
134.25 159.375 134.438 159 134.438 158.625 cv
134.438 158.625 li
cp
f
137.563 161.625 mo
137.563 161.25 137.375 160.875 137.125 160.563 cv
136.813 160.313 136.438 160.125 136.063 160.125 cv
135.688 160.125 135.313 160.313 135 160.563 cv
134.75 160.875 134.563 161.25 134.563 161.625 cv
134.563 162 134.75 162.375 135 162.688 cv
135.313 162.938 135.688 163.125 136.063 163.125 cv
136.438 163.125 136.813 162.938 137.125 162.688 cv
137.375 162.375 137.563 162 137.563 161.625 cv
137.563 161.625 li
cp
f
140.75 158.875 mo
140.75 158.5 140.563 158.125 140.313 157.813 cv
140 157.563 139.625 157.375 139.25 157.375 cv
138.875 157.375 138.5 157.563 138.188 157.813 cv
137.938 158.125 137.75 158.5 137.75 158.875 cv
137.75 159.25 137.938 159.625 138.188 159.938 cv
138.5 160.188 138.875 160.375 139.25 160.375 cv
139.625 160.375 140 160.188 140.313 159.938 cv
140.563 159.625 140.75 159.25 140.75 158.875 cv
140.75 158.875 li
cp
f
143.938 161.125 mo
143.938 160.75 143.75 160.375 143.5 160.063 cv
143.188 159.813 142.813 159.625 142.438 159.625 cv
142.063 159.625 141.688 159.813 141.375 160.063 cv
141.125 160.375 140.938 160.75 140.938 161.125 cv
140.938 161.5 141.125 161.875 141.375 162.188 cv
141.688 162.438 142.063 162.625 142.438 162.625 cv
142.813 162.625 143.188 162.438 143.5 162.188 cv
143.75 161.875 143.938 161.5 143.938 161.125 cv
143.938 161.125 li
cp
f
147.125 156.688 mo
147.125 156.313 146.938 155.938 146.688 155.625 cv
146.375 155.375 146 155.188 145.625 155.188 cv
145.25 155.188 144.875 155.375 144.563 155.625 cv
144.313 155.938 144.125 156.313 144.125 156.688 cv
144.125 157.063 144.313 157.438 144.563 157.75 cv
144.875 158 145.25 158.188 145.625 158.188 cv
146 158.188 146.375 158 146.688 157.75 cv
146.938 157.438 147.125 157.063 147.125 156.688 cv
147.125 156.688 li
cp
f
150.25 162.5 mo
150.25 162.125 150.063 161.75 149.813 161.438 cv
149.5 161.188 149.125 161 148.75 161 cv
148.375 161 148 161.188 147.688 161.438 cv
147.438 161.75 147.25 162.125 147.25 162.5 cv
147.25 162.875 147.438 163.25 147.688 163.563 cv
148 163.813 148.375 164 148.75 164 cv
149.125 164 149.5 163.813 149.813 163.563 cv
150.063 163.25 150.25 162.875 150.25 162.5 cv
150.25 162.5 li
cp
f
153.438 161.375 mo
153.438 161 153.25 160.625 153 160.313 cv
152.688 160.063 152.313 159.875 151.938 159.875 cv
151.563 159.875 151.188 160.063 150.875 160.313 cv
150.625 160.625 150.438 161 150.438 161.375 cv
150.438 161.75 150.625 162.125 150.875 162.438 cv
151.188 162.688 151.563 162.875 151.938 162.875 cv
152.313 162.875 152.688 162.688 153 162.438 cv
153.25 162.125 153.438 161.75 153.438 161.375 cv
153.438 161.375 li
cp
f
156.625 162.188 mo
156.625 161.813 156.438 161.438 156.188 161.125 cv
155.875 160.875 155.5 160.688 155.125 160.688 cv
154.75 160.688 154.375 160.875 154.063 161.125 cv
153.813 161.438 153.625 161.813 153.625 162.188 cv
153.625 162.563 153.813 162.938 154.063 163.25 cv
154.375 163.5 154.75 163.688 155.125 163.688 cv
155.5 163.688 155.875 163.5 156.188 163.25 cv
156.438 162.938 156.625 162.563 156.625 162.188 cv
156.625 162.188 li
cp
f
159.75 163 mo
159.75 162.625 159.563 162.25 159.313 161.938 cv
159 161.688 158.625 161.5 158.25 161.5 cv
157.875 161.5 157.5 161.688 157.188 161.938 cv
156.938 162.25 156.75 162.625 156.75 163 cv
156.75 163.375 156.938 163.75 157.188 164.063 cv
157.5 164.313 157.875 164.5 158.25 164.5 cv
158.625 164.5 159 164.313 159.313 164.063 cv
159.563 163.75 159.75 163.375 159.75 163 cv
159.75 163 li
cp
f
162.938 163 mo
162.938 162.625 162.75 162.25 162.5 161.938 cv
162.188 161.688 161.813 161.5 161.438 161.5 cv
161.063 161.5 160.688 161.688 160.375 161.938 cv
160.125 162.25 159.938 162.625 159.938 163 cv
159.938 163.375 160.125 163.75 160.375 164.063 cv
160.688 164.313 161.063 164.5 161.438 164.5 cv
161.813 164.5 162.188 164.313 162.5 164.063 cv
162.75 163.75 162.938 163.375 162.938 163 cv
162.938 163 li
cp
f
166.125 162.75 mo
166.125 162.375 165.938 162 165.688 161.688 cv
165.375 161.438 165 161.25 164.625 161.25 cv
164.25 161.25 163.875 161.438 163.563 161.688 cv
163.313 162 163.125 162.375 163.125 162.75 cv
163.125 163.125 163.313 163.5 163.563 163.813 cv
163.875 164.063 164.25 164.25 164.625 164.25 cv
165 164.25 165.375 164.063 165.688 163.813 cv
165.938 163.5 166.125 163.125 166.125 162.75 cv
166.125 162.75 li
cp
f
169.313 162.5 mo
169.313 162.125 169.125 161.75 168.875 161.438 cv
168.563 161.188 168.188 161 167.813 161 cv
167.438 161 167.063 161.188 166.75 161.438 cv
166.5 161.75 166.313 162.125 166.313 162.5 cv
166.313 162.875 166.5 163.25 166.75 163.563 cv
167.063 163.813 167.438 164 167.813 164 cv
168.188 164 168.563 163.813 168.875 163.563 cv
169.125 163.25 169.313 162.875 169.313 162.5 cv
169.313 162.5 li
cp
f
172.438 163.313 mo
172.438 162.938 172.25 162.563 172 162.25 cv
171.688 162 171.313 161.813 170.938 161.813 cv
170.563 161.813 170.188 162 169.875 162.25 cv
169.625 162.563 169.438 162.938 169.438 163.313 cv
169.438 163.688 169.625 164.063 169.875 164.375 cv
170.188 164.625 170.563 164.813 170.938 164.813 cv
171.313 164.813 171.688 164.625 172 164.375 cv
172.25 164.063 172.438 163.688 172.438 163.313 cv
172.438 163.313 li
cp
f
175.625 166.313 mo
175.625 165.938 175.438 165.563 175.188 165.25 cv
174.875 165 174.5 164.813 174.125 164.813 cv
173.75 164.813 173.375 165 173.063 165.25 cv
172.813 165.563 172.625 165.938 172.625 166.313 cv
172.625 166.688 172.813 167.063 173.063 167.375 cv
173.375 167.625 173.75 167.813 174.125 167.813 cv
174.5 167.813 174.875 167.625 175.188 167.375 cv
175.438 167.063 175.625 166.688 175.625 166.313 cv
175.625 166.313 li
cp
f
178.813 164.125 mo
178.813 163.75 178.625 163.375 178.375 163.063 cv
178.063 162.813 177.688 162.625 177.313 162.625 cv
176.938 162.625 176.563 162.813 176.25 163.063 cv
176 163.375 175.813 163.75 175.813 164.125 cv
175.813 164.5 176 164.875 176.25 165.188 cv
176.563 165.438 176.938 165.625 177.313 165.625 cv
177.688 165.625 178.063 165.438 178.375 165.188 cv
178.625 164.875 178.813 164.5 178.813 164.125 cv
178.813 164.125 li
cp
f
181.938 164.688 mo
181.938 164.313 181.75 163.938 181.5 163.625 cv
181.188 163.375 180.813 163.188 180.438 163.188 cv
180.063 163.188 179.688 163.375 179.375 163.625 cv
179.125 163.938 178.938 164.313 178.938 164.688 cv
178.938 165.063 179.125 165.438 179.375 165.75 cv
179.688 166 180.063 166.188 180.438 166.188 cv
180.813 166.188 181.188 166 181.5 165.75 cv
181.75 165.438 181.938 165.063 181.938 164.688 cv
181.938 164.688 li
cp
f
185.125 165.5 mo
185.125 165.125 184.938 164.75 184.688 164.438 cv
184.375 164.188 184 164 183.625 164 cv
183.25 164 182.875 164.188 182.563 164.438 cv
182.313 164.75 182.125 165.125 182.125 165.5 cv
182.125 165.875 182.313 166.25 182.563 166.563 cv
182.875 166.813 183.25 167 183.625 167 cv
184 167 184.375 166.813 184.688 166.563 cv
184.938 166.25 185.125 165.875 185.125 165.5 cv
185.125 165.5 li
cp
f
188.313 164.688 mo
188.313 164.313 188.125 163.938 187.875 163.625 cv
187.563 163.375 187.188 163.188 186.813 163.188 cv
186.438 163.188 186.063 163.375 185.75 163.625 cv
185.5 163.938 185.313 164.313 185.313 164.688 cv
185.313 165.063 185.5 165.438 185.75 165.75 cv
186.063 166 186.438 166.188 186.813 166.188 cv
187.188 166.188 187.563 166 187.875 165.75 cv
188.125 165.438 188.313 165.063 188.313 164.688 cv
188.313 164.688 li
cp
f
191.5 164.938 mo
191.5 164.563 191.313 164.188 191.063 163.875 cv
190.75 163.625 190.375 163.438 190 163.438 cv
189.625 163.438 189.25 163.625 188.938 163.875 cv
188.688 164.188 188.5 164.563 188.5 164.938 cv
188.5 165.313 188.688 165.688 188.938 166 cv
189.25 166.25 189.625 166.438 190 166.438 cv
190.375 166.438 190.75 166.25 191.063 166 cv
191.313 165.688 191.5 165.313 191.5 164.938 cv
191.5 164.938 li
cp
f
194.625 165.25 mo
194.625 164.875 194.438 164.5 194.188 164.188 cv
193.875 163.938 193.5 163.75 193.125 163.75 cv
192.75 163.75 192.375 163.938 192.063 164.188 cv
191.813 164.5 191.625 164.875 191.625 165.25 cv
191.625 165.625 191.813 166 192.063 166.313 cv
192.375 166.563 192.75 166.75 193.125 166.75 cv
193.5 166.75 193.875 166.563 194.188 166.313 cv
194.438 166 194.625 165.625 194.625 165.25 cv
194.625 165.25 li
cp
f
197.813 163.875 mo
197.813 163.5 197.625 163.125 197.375 162.813 cv
197.063 162.563 196.688 162.375 196.313 162.375 cv
195.938 162.375 195.563 162.563 195.25 162.813 cv
195 163.125 194.813 163.5 194.813 163.875 cv
194.813 164.25 195 164.625 195.25 164.938 cv
195.563 165.188 195.938 165.375 196.313 165.375 cv
196.688 165.375 197.063 165.188 197.375 164.938 cv
197.625 164.625 197.813 164.25 197.813 163.875 cv
197.813 163.875 li
cp
f
201 166.063 mo
201 165.688 200.813 165.313 200.563 165 cv
200.25 164.75 199.875 164.563 199.5 164.563 cv
199.125 164.563 198.75 164.75 198.438 165 cv
198.188 165.313 198 165.688 198 166.063 cv
198 166.438 198.188 166.813 198.438 167.125 cv
198.75 167.375 199.125 167.563 199.5 167.563 cv
199.875 167.563 200.25 167.375 200.563 167.125 cv
200.813 166.813 201 166.438 201 166.063 cv
201 166.063 li
cp
f
204.125 165.75 mo
204.125 165.375 203.938 165 203.688 164.688 cv
203.375 164.438 203 164.25 202.625 164.25 cv
202.25 164.25 201.875 164.438 201.563 164.688 cv
201.313 165 201.125 165.375 201.125 165.75 cv
201.125 166.125 201.313 166.5 201.563 166.813 cv
201.875 167.063 202.25 167.25 202.625 167.25 cv
203 167.25 203.375 167.063 203.688 166.813 cv
203.938 166.5 204.125 166.125 204.125 165.75 cv
204.125 165.75 li
cp
f
207.313 166.313 mo
207.313 165.938 207.125 165.563 206.875 165.25 cv
206.563 165 206.188 164.813 205.813 164.813 cv
205.438 164.813 205.063 165 204.75 165.25 cv
204.5 165.563 204.313 165.938 204.313 166.313 cv
204.313 166.688 204.5 167.063 204.75 167.375 cv
205.063 167.625 205.438 167.813 205.813 167.813 cv
206.188 167.813 206.563 167.625 206.875 167.375 cv
207.125 167.063 207.313 166.688 207.313 166.313 cv
207.313 166.313 li
cp
f
210.5 164.688 mo
210.5 164.313 210.313 163.938 210.063 163.625 cv
209.75 163.375 209.375 163.188 209 163.188 cv
208.625 163.188 208.25 163.375 207.938 163.625 cv
207.688 163.938 207.5 164.313 207.5 164.688 cv
207.5 165.063 207.688 165.438 207.938 165.75 cv
208.25 166 208.625 166.188 209 166.188 cv
209.375 166.188 209.75 166 210.063 165.75 cv
210.313 165.438 210.5 165.063 210.5 164.688 cv
210.5 164.688 li
cp
f
213.625 166.625 mo
213.625 166.25 213.438 165.875 213.188 165.563 cv
212.875 165.313 212.5 165.125 212.125 165.125 cv
211.75 165.125 211.375 165.313 211.063 165.563 cv
210.813 165.875 210.625 166.25 210.625 166.625 cv
210.625 167 210.813 167.375 211.063 167.688 cv
211.375 167.938 211.75 168.125 212.125 168.125 cv
212.5 168.125 212.875 167.938 213.188 167.688 cv
213.438 167.375 213.625 167 213.625 166.625 cv
213.625 166.625 li
cp
f
216.813 164.688 mo
216.813 164.313 216.625 163.938 216.375 163.625 cv
216.063 163.375 215.688 163.188 215.313 163.188 cv
214.938 163.188 214.563 163.375 214.25 163.625 cv
214 163.938 213.813 164.313 213.813 164.688 cv
213.813 165.063 214 165.438 214.25 165.75 cv
214.563 166 214.938 166.188 215.313 166.188 cv
215.688 166.188 216.063 166 216.375 165.75 cv
216.625 165.438 216.813 165.063 216.813 164.688 cv
216.813 164.688 li
cp
f
220 164.938 mo
220 164.563 219.813 164.188 219.563 163.875 cv
219.25 163.625 218.875 163.438 218.5 163.438 cv
218.125 163.438 217.75 163.625 217.438 163.875 cv
217.188 164.188 217 164.563 217 164.938 cv
217 165.313 217.188 165.688 217.438 166 cv
217.75 166.25 218.125 166.438 218.5 166.438 cv
218.875 166.438 219.25 166.25 219.563 166 cv
219.813 165.688 220 165.313 220 164.938 cv
220 164.938 li
cp
f
223.188 166.875 mo
223.188 166.5 223 166.125 222.75 165.813 cv
222.438 165.563 222.063 165.375 221.688 165.375 cv
221.313 165.375 220.938 165.563 220.625 165.813 cv
220.375 166.125 220.188 166.5 220.188 166.875 cv
220.188 167.25 220.375 167.625 220.625 167.938 cv
220.938 168.188 221.313 168.375 221.688 168.375 cv
222.063 168.375 222.438 168.188 222.75 167.938 cv
223 167.625 223.188 167.25 223.188 166.875 cv
223.188 166.875 li
cp
f
226.313 166.875 mo
226.313 166.5 226.125 166.125 225.875 165.813 cv
225.563 165.563 225.188 165.375 224.813 165.375 cv
224.438 165.375 224.063 165.563 223.75 165.813 cv
223.5 166.125 223.313 166.5 223.313 166.875 cv
223.313 167.25 223.5 167.625 223.75 167.938 cv
224.063 168.188 224.438 168.375 224.813 168.375 cv
225.188 168.375 225.563 168.188 225.875 167.938 cv
226.125 167.625 226.313 167.25 226.313 166.875 cv
226.313 166.875 li
cp
f
229.5 165.25 mo
229.5 164.875 229.313 164.5 229.063 164.188 cv
228.75 163.938 228.375 163.75 228 163.75 cv
227.625 163.75 227.25 163.938 226.938 164.188 cv
226.688 164.5 226.5 164.875 226.5 165.25 cv
226.5 165.625 226.688 166 226.938 166.313 cv
227.25 166.563 227.625 166.75 228 166.75 cv
228.375 166.75 228.75 166.563 229.063 166.313 cv
229.313 166 229.5 165.625 229.5 165.25 cv
229.5 165.25 li
cp
f
232.688 166.313 mo
232.688 165.938 232.5 165.563 232.25 165.25 cv
231.938 165 231.563 164.813 231.188 164.813 cv
230.813 164.813 230.438 165 230.125 165.25 cv
229.875 165.563 229.688 165.938 229.688 166.313 cv
229.688 166.688 229.875 167.063 230.125 167.375 cv
230.438 167.625 230.813 167.813 231.188 167.813 cv
231.563 167.813 231.938 167.625 232.25 167.375 cv
232.5 167.063 232.688 166.688 232.688 166.313 cv
232.688 166.313 li
cp
f
235.813 166.063 mo
235.813 165.688 235.625 165.313 235.375 165 cv
235.063 164.75 234.688 164.563 234.313 164.563 cv
233.938 164.563 233.563 164.75 233.25 165 cv
233 165.313 232.813 165.688 232.813 166.063 cv
232.813 166.438 233 166.813 233.25 167.125 cv
233.563 167.375 233.938 167.563 234.313 167.563 cv
234.688 167.563 235.063 167.375 235.375 167.125 cv
235.625 166.813 235.813 166.438 235.813 166.063 cv
235.813 166.063 li
cp
f
239 168 mo
239 167.625 238.813 167.25 238.563 166.938 cv
238.25 166.688 237.875 166.5 237.5 166.5 cv
237.125 166.5 236.75 166.688 236.438 166.938 cv
236.188 167.25 236 167.625 236 168 cv
236 168.375 236.188 168.75 236.438 169.063 cv
236.75 169.313 237.125 169.5 237.5 169.5 cv
237.875 169.5 238.25 169.313 238.563 169.063 cv
238.813 168.75 239 168.375 239 168 cv
239 168 li
cp
f
242.188 165.75 mo
242.188 165.375 242 165 241.75 164.688 cv
241.438 164.438 241.063 164.25 240.688 164.25 cv
240.313 164.25 239.938 164.438 239.625 164.688 cv
239.375 165 239.188 165.375 239.188 165.75 cv
239.188 166.125 239.375 166.5 239.625 166.813 cv
239.938 167.063 240.313 167.25 240.688 167.25 cv
241.063 167.25 241.438 167.063 241.75 166.813 cv
242 166.5 242.188 166.125 242.188 165.75 cv
242.188 165.75 li
cp
f
245.375 166.625 mo
245.375 166.25 245.188 165.875 244.938 165.563 cv
244.625 165.313 244.25 165.125 243.875 165.125 cv
243.5 165.125 243.125 165.313 242.813 165.563 cv
242.563 165.875 242.375 166.25 242.375 166.625 cv
242.375 167 242.563 167.375 242.813 167.688 cv
243.125 167.938 243.5 168.125 243.875 168.125 cv
244.25 168.125 244.625 167.938 244.938 167.688 cv
245.188 167.375 245.375 167 245.375 166.625 cv
245.375 166.625 li
cp
f
248.5 165.25 mo
248.5 164.875 248.313 164.5 248.063 164.188 cv
247.75 163.938 247.375 163.75 247 163.75 cv
246.625 163.75 246.25 163.938 245.938 164.188 cv
245.688 164.5 245.5 164.875 245.5 165.25 cv
245.5 165.625 245.688 166 245.938 166.313 cv
246.25 166.563 246.625 166.75 247 166.75 cv
247.375 166.75 247.75 166.563 248.063 166.313 cv
248.313 166 248.5 165.625 248.5 165.25 cv
248.5 165.25 li
cp
f
251.688 165.5 mo
251.688 165.125 251.5 164.75 251.25 164.438 cv
250.938 164.188 250.563 164 250.188 164 cv
249.813 164 249.438 164.188 249.125 164.438 cv
248.875 164.75 248.688 165.125 248.688 165.5 cv
248.688 165.875 248.875 166.25 249.125 166.563 cv
249.438 166.813 249.813 167 250.188 167 cv
250.563 167 250.938 166.813 251.25 166.563 cv
251.5 166.25 251.688 165.875 251.688 165.5 cv
251.688 165.5 li
cp
f
254.875 166.875 mo
254.875 166.5 254.688 166.125 254.438 165.813 cv
254.125 165.563 253.75 165.375 253.375 165.375 cv
253 165.375 252.625 165.563 252.313 165.813 cv
252.063 166.125 251.875 166.5 251.875 166.875 cv
251.875 167.25 252.063 167.625 252.313 167.938 cv
252.625 168.188 253 168.375 253.375 168.375 cv
253.75 168.375 254.125 168.188 254.438 167.938 cv
254.688 167.625 254.875 167.25 254.875 166.875 cv
254.875 166.875 li
cp
f
258 167.688 mo
258 167.313 257.813 166.938 257.563 166.625 cv
257.25 166.375 256.875 166.188 256.5 166.188 cv
256.125 166.188 255.75 166.375 255.438 166.625 cv
255.188 166.938 255 167.313 255 167.688 cv
255 168.063 255.188 168.438 255.438 168.75 cv
255.75 169 256.125 169.188 256.5 169.188 cv
256.875 169.188 257.25 169 257.563 168.75 cv
257.813 168.438 258 168.063 258 167.688 cv
258 167.688 li
cp
f
261.188 166.063 mo
261.188 165.688 261 165.313 260.75 165 cv
260.438 164.75 260.063 164.563 259.688 164.563 cv
259.313 164.563 258.938 164.75 258.625 165 cv
258.375 165.313 258.188 165.688 258.188 166.063 cv
258.188 166.438 258.375 166.813 258.625 167.125 cv
258.938 167.375 259.313 167.563 259.688 167.563 cv
260.063 167.563 260.438 167.375 260.75 167.125 cv
261 166.813 261.188 166.438 261.188 166.063 cv
261.188 166.063 li
cp
f
264.375 166.625 mo
264.375 166.25 264.188 165.875 263.938 165.563 cv
263.625 165.313 263.25 165.125 262.875 165.125 cv
262.5 165.125 262.125 165.313 261.813 165.563 cv
261.563 165.875 261.375 166.25 261.375 166.625 cv
261.375 167 261.563 167.375 261.813 167.688 cv
262.125 167.938 262.5 168.125 262.875 168.125 cv
263.25 168.125 263.625 167.938 263.938 167.688 cv
264.188 167.375 264.375 167 264.375 166.625 cv
264.375 166.625 li
cp
f
267.5 166.625 mo
267.5 166.25 267.313 165.875 267.063 165.563 cv
266.75 165.313 266.375 165.125 266 165.125 cv
265.625 165.125 265.25 165.313 264.938 165.563 cv
264.688 165.875 264.5 166.25 264.5 166.625 cv
264.5 167 264.688 167.375 264.938 167.688 cv
265.25 167.938 265.625 168.125 266 168.125 cv
266.375 168.125 266.75 167.938 267.063 167.688 cv
267.313 167.375 267.5 167 267.5 166.625 cv
267.5 166.625 li
cp
f
270.688 166.313 mo
270.688 165.938 270.5 165.563 270.25 165.25 cv
269.938 165 269.563 164.813 269.188 164.813 cv
268.813 164.813 268.438 165 268.125 165.25 cv
267.875 165.563 267.688 165.938 267.688 166.313 cv
267.688 166.688 267.875 167.063 268.125 167.375 cv
268.438 167.625 268.813 167.813 269.188 167.813 cv
269.563 167.813 269.938 167.625 270.25 167.375 cv
270.5 167.063 270.688 166.688 270.688 166.313 cv
270.688 166.313 li
cp
f
273.875 164.688 mo
273.875 164.313 273.688 163.938 273.438 163.625 cv
273.125 163.375 272.75 163.188 272.375 163.188 cv
272 163.188 271.625 163.375 271.313 163.625 cv
271.063 163.938 270.875 164.313 270.875 164.688 cv
270.875 165.063 271.063 165.438 271.313 165.75 cv
271.625 166 272 166.188 272.375 166.188 cv
272.75 166.188 273.125 166 273.438 165.75 cv
273.688 165.438 273.875 165.063 273.875 164.688 cv
273.875 164.688 li
cp
f
277.063 166.313 mo
277.063 165.938 276.875 165.563 276.625 165.25 cv
276.313 165 275.938 164.813 275.563 164.813 cv
275.188 164.813 274.813 165 274.5 165.25 cv
274.25 165.563 274.063 165.938 274.063 166.313 cv
274.063 166.688 274.25 167.063 274.5 167.375 cv
274.813 167.625 275.188 167.813 275.563 167.813 cv
275.938 167.813 276.313 167.625 276.625 167.375 cv
276.875 167.063 277.063 166.688 277.063 166.313 cv
277.063 166.313 li
cp
f
280.188 166.313 mo
280.188 165.938 280 165.563 279.75 165.25 cv
279.438 165 279.063 164.813 278.688 164.813 cv
278.313 164.813 277.938 165 277.625 165.25 cv
277.375 165.563 277.188 165.938 277.188 166.313 cv
277.188 166.688 277.375 167.063 277.625 167.375 cv
277.938 167.625 278.313 167.813 278.688 167.813 cv
279.063 167.813 279.438 167.625 279.75 167.375 cv
280 167.063 280.188 166.688 280.188 166.313 cv
280.188 166.313 li
cp
f
283.375 168 mo
283.375 167.625 283.188 167.25 282.938 166.938 cv
282.625 166.688 282.25 166.5 281.875 166.5 cv
281.5 166.5 281.125 166.688 280.813 166.938 cv
280.563 167.25 280.375 167.625 280.375 168 cv
280.375 168.375 280.563 168.75 280.813 169.063 cv
281.125 169.313 281.5 169.5 281.875 169.5 cv
282.25 169.5 282.625 169.313 282.938 169.063 cv
283.188 168.75 283.375 168.375 283.375 168 cv
283.375 168 li
cp
f
286.563 167.688 mo
286.563 167.313 286.375 166.938 286.125 166.625 cv
285.813 166.375 285.438 166.188 285.063 166.188 cv
284.688 166.188 284.313 166.375 284 166.625 cv
283.75 166.938 283.563 167.313 283.563 167.688 cv
283.563 168.063 283.75 168.438 284 168.75 cv
284.313 169 284.688 169.188 285.063 169.188 cv
285.438 169.188 285.813 169 286.125 168.75 cv
286.375 168.438 286.563 168.063 286.563 167.688 cv
286.563 167.688 li
cp
f
289.688 167.438 mo
289.688 167.063 289.5 166.688 289.25 166.375 cv
288.938 166.125 288.563 165.938 288.188 165.938 cv
287.813 165.938 287.438 166.125 287.125 166.375 cv
286.875 166.688 286.688 167.063 286.688 167.438 cv
286.688 167.813 286.875 168.188 287.125 168.5 cv
287.438 168.75 287.813 168.938 288.188 168.938 cv
288.563 168.938 288.938 168.75 289.25 168.5 cv
289.5 168.188 289.688 167.813 289.688 167.438 cv
289.688 167.438 li
cp
f
292.875 167.688 mo
292.875 167.313 292.688 166.938 292.438 166.625 cv
292.125 166.375 291.75 166.188 291.375 166.188 cv
291 166.188 290.625 166.375 290.313 166.625 cv
290.063 166.938 289.875 167.313 289.875 167.688 cv
289.875 168.063 290.063 168.438 290.313 168.75 cv
290.625 169 291 169.188 291.375 169.188 cv
291.75 169.188 292.125 169 292.438 168.75 cv
292.688 168.438 292.875 168.063 292.875 167.688 cv
292.875 167.688 li
cp
f
296.063 168.813 mo
296.063 168.438 295.875 168.063 295.625 167.75 cv
295.313 167.5 294.938 167.313 294.563 167.313 cv
294.188 167.313 293.813 167.5 293.5 167.75 cv
293.25 168.063 293.063 168.438 293.063 168.813 cv
293.063 169.188 293.25 169.563 293.5 169.875 cv
293.813 170.125 294.188 170.313 294.563 170.313 cv
294.938 170.313 295.313 170.125 295.625 169.875 cv
295.875 169.563 296.063 169.188 296.063 168.813 cv
296.063 168.813 li
cp
f
gsave
32 5 mo
32 171 li
300 171 li
300 5 li
32 5 li
cp
clp
1.0625 lw
2 lc
0 lj
3.239 ml
[] 0 dsh
true sadj
35.0625 5.75 mo
36.375 12.125 li
36.4375 12.625 li
36.5625 13.125 li
36.75 14.0625 li
37.1875 16 li
38 19.75 li
39.6875 27 li
43.0625 40.375 li
43.125 40.75 li
43.25 41.125 li
43.4375 41.875 li
43.8125 43.375 li
44.625 46.25 li
46.1875 51.75 li
49.3125 62.125 li
49.375 62.5 li
49.5 62.8125 li
49.6875 63.5 li
50.125 64.8125 li
51 67.375 li
52.6875 72.3125 li
56.0625 81.5625 li
56.1875 81.8125 li
56.25 82.0625 li
56.5 82.625 li
56.875 83.6875 li
57.75 85.75 li
59.375 89.75 li
62.6875 97.125 li
62.8125 97.375 li
62.9375 97.5625 li
63.125 97.9375 li
63.5 98.75 li
64.25 100.375 li
65.8125 103.438 li
68.9375 109.125 li
69 109.313 li
69.125 109.5 li
69.3125 109.875 li
69.75 110.625 li
70.625 112.063 li
72.25 114.813 li
75.625 119.875 li
75.75 120 li
75.8125 120.188 li
76.0625 120.438 li
76.4375 121 li
77.1875 122.125 li
78.8125 124.188 li
81.9375 128.125 li
82 128.25 li
82.125 128.375 li
82.3125 128.625 li
82.6875 129.063 li
83.4375 129.938 li
85 131.688 li
88.0625 134.875 li
88.1875 135 li
88.3125 135.063 li
88.5 135.313 li
88.9375 135.688 li
89.75 136.5 li
91.4375 138.063 li
94.75 140.875 li
94.875 141 li
94.9375 141.063 li
95.125 141.188 li
95.5625 141.5 li
96.3125 142.125 li
97.875 143.313 li
101 145.563 li
101.063 145.625 li
101.188 145.688 li
101.438 145.813 li
101.813 146.125 li
102.688 146.625 li
104.375 147.688 li
107.75 149.688 li
107.875 149.75 li
107.938 149.813 li
108.188 149.938 li
108.563 150.125 li
109.375 150.563 li
111.063 151.438 li
114.375 153 li
114.5 153.063 li
114.563 153.125 li
114.75 153.188 li
115.125 153.375 li
115.938 153.688 li
117.438 154.375 li
120.563 155.563 li
120.688 155.625 li
120.75 155.688 li
121 155.75 li
121.375 155.875 li
122.25 156.188 li
123.938 156.813 li
127.25 157.875 li
127.375 157.938 li
127.438 157.938 li
127.688 158 li
128.063 158.125 li
128.813 158.375 li
130.375 158.813 li
133.5 159.625 li
133.625 159.688 li
133.75 159.688 li
133.938 159.75 li
134.375 159.875 li
135.25 160.063 li
136.938 160.5 li
140.313 161.25 li
140.438 161.25 li
140.5 161.25 li
140.75 161.313 li
141.125 161.375 li
142 161.563 li
143.625 161.875 li
147 162.5 li
147.063 162.5 li
147.188 162.5 li
147.375 162.563 li
147.75 162.625 li
148.5 162.75 li
150.063 163 li
153.188 163.438 li
153.313 163.5 li
153.375 163.5 li
153.625 163.5 li
154 163.563 li
154.875 163.688 li
156.563 163.938 li
159.938 164.313 li
160 164.375 li
160.125 164.375 li
160.313 164.375 li
160.688 164.438 li
161.5 164.5 li
163.063 164.688 li
166.188 165 li
166.313 165 li
166.438 165 li
166.625 165.063 li
167 165.063 li
167.75 165.125 li
169.313 165.313 li
172.375 165.563 li
172.5 165.563 li
172.563 165.563 li
172.813 165.563 li
173.188 165.625 li
174.063 165.688 li
175.75 165.813 li
179.063 166.063 li
179.188 166.063 li
179.25 166.063 li
179.438 166.063 li
179.875 166.125 li
180.625 166.125 li
182.188 166.25 li
185.313 166.438 li
185.438 166.438 li
185.5 166.438 li
185.75 166.438 li
186.188 166.438 li
187 166.5 li
188.688 166.625 li
192.063 166.75 li
192.188 166.75 li
192.313 166.75 li
192.5 166.75 li
192.938 166.813 li
193.75 166.813 li
195.375 166.875 li
198.75 167 li
198.813 167 li
198.938 167.063 li
199.125 167.063 li
199.5 167.063 li
200.25 167.063 li
201.813 167.125 li
204.938 167.25 li
205 167.25 li
205.125 167.25 li
205.313 167.25 li
205.75 167.25 li
206.625 167.313 li
208.25 167.313 li
211.625 167.438 li
211.75 167.438 li
211.813 167.438 li
212 167.438 li
212.438 167.438 li
213.188 167.438 li
214.75 167.5 li
217.938 167.563 li
218 167.563 li
218.125 167.563 li
218.313 167.563 li
218.688 167.563 li
219.438 167.563 li
221 167.625 li
224.063 167.688 li
224.188 167.688 li
224.25 167.688 li
224.5 167.688 li
224.875 167.688 li
225.75 167.688 li
227.375 167.75 li
230.75 167.813 li
230.813 167.813 li
230.938 167.813 li
231.125 167.813 li
231.5 167.813 li
232.313 167.813 li
233.813 167.813 li
236.938 167.875 li
237.063 167.875 li
237.188 167.875 li
237.375 167.875 li
237.813 167.875 li
238.625 167.875 li
240.313 167.875 li
243.688 167.938 li
243.813 167.938 li
243.875 167.938 li
244.125 167.938 li
244.5 167.938 li
245.25 167.938 li
246.875 167.938 li
250 168 li
250.125 168 li
250.188 168 li
250.375 168 li
250.75 168 li
251.563 168 li
253.063 168 li
256.188 168.063 li
256.313 168.063 li
256.375 168.063 li
256.625 168.063 li
257 168.063 li
257.875 168.063 li
259.563 168.063 li
262.875 168.063 li
263 168.063 li
263.063 168.063 li
263.25 168.063 li
263.688 168.063 li
264.438 168.063 li
266 168.063 li
269.125 168.125 li
269.25 168.125 li
269.375 168.125 li
269.563 168.125 li
270 168.125 li
270.813 168.125 li
272.5 168.125 li
275.938 168.125 li
276 168.125 li
276.125 168.125 li
276.313 168.125 li
276.75 168.125 li
277.563 168.125 li
279.25 168.125 li
282.563 168.188 li
282.688 168.188 li
282.75 168.188 li
282.938 168.188 li
283.375 168.188 li
284.125 168.188 li
285.688 168.188 li
288.75 168.188 li
288.875 168.188 li
289 168.188 li
289.188 168.188 li
289.625 168.188 li
290.438 168.188 li
292.125 168.188 li
295.5 168.188 li
295.625 168.188 li
295.688 168.188 li
295.875 168.188 li
296.313 168.188 li
297.063 168.188 li
298.625 168.188 li
301.813 168.188 li
301.875 168.188 li
302 168.188 li
302.188 168.188 li
302.563 168.188 li
303.313 168.188 li
304.875 168.188 li
307.938 168.188 li
308.063 168.188 li
308.188 168.188 li
308.375 168.188 li
308.813 168.188 li
309.625 168.188 li
311.313 168.188 li
314.625 168.25 li
314.75 168.25 li
314.813 168.25 li
315 168.25 li
315.438 168.25 li
316.188 168.25 li
317.75 168.25 li
320.875 168.25 li
321 168.25 li
321.063 168.25 li
321.313 168.25 li
321.688 168.25 li
322.563 168.25 li
324.25 168.25 li
327.625 168.25 li
327.625 168.25 li
327.625 168.25 li
327.625 168.25 li
327.625 168.25 li
327.688 168.25 li
327.75 168.25 li
327.75 168.25 li
327.75 168.25 li
327.75 168.25 li
327.75 168.25 li
327.75 168.25 li
327.75 168.25 li
327.813 168.25 li
327.813 168.25 li
327.813 168.25 li
327.813 168.25 li
327.813 168.25 li
327.813 168.25 li
327.813 168.25 li
327.813 168.25 li
327.813 168.25 li
327.813 168.25 li
@
10.9375 168.25 mo
14 168.25 li
17.125 168.25 li
23.875 168.25 li
30.1875 168.25 li
36.375 168.25 li
43.0625 168.25 li
49.3125 168.25 li
56.0625 168.25 li
62.6875 168.25 li
68.9375 168.25 li
75.625 168.25 li
81.9375 168.25 li
88.0625 168.25 li
94.75 168.25 li
101 168.25 li
107.75 168.25 li
114.375 168.25 li
120.563 168.25 li
127.25 168.25 li
133.5 168.25 li
140.313 168.25 li
147 168.25 li
153.188 168.25 li
159.938 168.25 li
166.188 168.25 li
172.375 168.25 li
179.063 168.25 li
185.313 168.25 li
192.063 168.25 li
198.75 168.25 li
204.938 168.25 li
211.625 168.25 li
217.938 168.25 li
224.063 168.25 li
230.75 168.25 li
236.938 168.25 li
243.688 168.25 li
250 168.25 li
256.188 168.25 li
262.875 168.25 li
269.125 168.25 li
275.938 168.25 li
282.563 168.25 li
288.75 168.25 li
295.5 168.25 li
301.813 168.25 li
307.938 168.25 li
314.625 168.25 li
320.875 168.25 li
327.625 168.25 li
327.75 168.25 li
327.813 168.25 li
0 0.992157 1 0 cmyk
@
grestore
gsave
0 0 mo
0 200 li
300 200 li
300 0 li
0 0 li
cp
clp
0.1875 lw
2 lc
0 lj
3.239 ml
[] 0 dsh
true sadj
299.875 5.75 mo
299.875 171 li
32.5 5.75 mo
299.875 5.75 li
32.5 171 mo
32.5 5.75 li
299.875 171 mo
32.5 171 li
0 0 0 1 cmyk
@
grestore
0.1875 lw
0 lc
0 lj
3.239 ml
[] 0 dsh
true sadj
90.125 171 mo
90.125 167.875 li
74.3125 171 mo
74.3125 169.125 li
58.4375 171 mo
58.4375 169.125 li
42.625 171 mo
42.625 169.125 li
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ArialMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 53 /five putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/five <1C60D8A8C9B7EF322B11AFD4001C6D393B64E9DE4ADCB9C7DBD29001BCD9C24204BCA349E6D6727DDD519B4607896591269B0F423E62F04083C8D4AAB63F3153F8354DAF7BF13702FC0166656CF2542F30CE9F35F189C04CCF389EF200B50CB6EEE2DB668946DD84852A4BE0E462B71D963D0D41B1A42CCC4B98AFEC49372EF96DD9EB13A793559C13CFDFE477> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/JFFOIC+ArialMT /ArialMT findfont ct_VMDictPut/JFFOIC+ArialMT*1 [53{/.notdef}rp /five 202{/.notdef}rp]JFFOIC+ArialMT nfJFFOIC+ArialMT*1 [9 0 0 -9 0 0 ]msf87.8906 182.008 mo(5)sh169.375 171 mo
169.375 167.875 li
153.5 171 mo
153.5 169.125 li
137.688 171 mo
137.688 169.125 li
121.813 171 mo
121.813 169.125 li
106 171 mo
106 169.125 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIC+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3ABC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A10425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E31D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A5B546505C954A88> |-/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92FE1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIC+ArialMT /Encoding getdup 48 /zero putdup 49 /one putpop%ADOEndSubsetFont
/JFFOIC+ArialMT*1 [48{/.notdef}rp /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]JFFOIC+ArialMT nfJFFOIC+ArialMT*1 [9 0 0 -9 0 0 ]msf164.867 182.008 mo(10)[5.00586 0 ]xsh248.625 171 mo
248.625 167.875 li
232.75 171 mo
232.75 169.125 li
216.938 171 mo
216.938 169.125 li
201.063 171 mo
201.063 169.125 li
185.188 171 mo
185.188 169.125 li
@
JFFOIC+ArialMT*1 [9 0 0 -9 0 0 ]msf244.094 182.008 mo(15)[5.00586 0 ]xsh32.5 171 mo
35.6875 171 li
296.125 171 mo
296.125 169.125 li
280.313 171 mo
280.313 169.125 li
264.438 171 mo
264.438 169.125 li
@
JFFOIC+ArialMT*1 [9 0 0 -9 0 0 ]msf25 174.008 mo(0)sh32.5 143.438 mo
35.6875 143.438 li
32.5 149 mo
34.375 149 li
32.5 154.5 mo
34.375 154.5 li
32.5 160 mo
34.375 160 li
32.5 165.5 mo
34.375 165.5 li
@
JFFOIC+ArialMT*1 [9 0 0 -9 0 0 ]msf16 146.461 mo(100)[5.00537 5.00537 0 ]xsh32.5 115.938 mo
35.6875 115.938 li
32.5 121.438 mo
34.375 121.438 li
32.5 126.938 mo
34.375 126.938 li
32.5 132.438 mo
34.375 132.438 li
32.5 137.938 mo
34.375 137.938 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIC+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIC+ArialMT /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/JFFOIC+ArialMT*1 [48{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]JFFOIC+ArialMT nfJFFOIC+ArialMT*1 [9 0 0 -9 0 0 ]msf16 118.922 mo(200)[5.00537 5.00537 0 ]xsh32.5 88.375 mo
35.6875 88.375 li
32.5 93.875 mo
34.375 93.875 li
32.5 99.375 mo
34.375 99.375 li
32.5 104.938 mo
34.375 104.938 li
32.5 110.438 mo
34.375 110.438 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIC+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF322B10FC2B166D2172609B896A28AF8161ACE0368AFE548E0A1C2891C9468F6CF8001203B3D0EAEFD5067EEA36A5DE0843B3FA3DD10C10DEDE7ECC4B1F205F8D09B2A1084955D8410715DAE41E60E9BEA3731CCA7698FDFAB2F6C5BD853C3D3957C1C3A42CED93CA60AD0CBA44CB0A07053B47ECAA14A0E56199A33A25603E5DB2CC6A470C6EFBC4EF226D2F67623C83F45C93E2C02C0A9A0974576F8175C7B2D4E9F1C9319763C8100AFBFF1D8FFF8EB10F2B0608AF6A0E137303863C59034E23F8CA0DCA04C3BBA93B80F099> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIC+ArialMT /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/JFFOIC+ArialMT*1 [48{/.notdef}rp /zero /one /two /three /.notdef /five 202{/.notdef}rp]JFFOIC+ArialMT nfJFFOIC+ArialMT*1 [9 0 0 -9 0 0 ]msf16 91.3828 mo(300)[5.00537 5.00537 0 ]xsh32.5 60.8125 mo
35.6875 60.8125 li
32.5 66.375 mo
34.375 66.375 li
32.5 71.875 mo
34.375 71.875 li
32.5 77.375 mo
34.375 77.375 li
32.5 82.875 mo
34.375 82.875 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIC+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIC+ArialMT /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/JFFOIC+ArialMT*1 [48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]JFFOIC+ArialMT nfJFFOIC+ArialMT*1 [9 0 0 -9 0 0 ]msf16 63.8359 mo(400)[5.00537 5.00537 0 ]xsh32.5 33.3125 mo
35.6875 33.3125 li
32.5 38.8125 mo
34.375 38.8125 li
32.5 44.3125 mo
34.375 44.3125 li
32.5 49.8125 mo
34.375 49.8125 li
32.5 55.3125 mo
34.375 55.3125 li
@
JFFOIC+ArialMT*1 [9 0 0 -9 0 0 ]msf16 36.2969 mo(500)[5.00537 5.00537 0 ]xsh32.5 5.75 mo
35.6875 5.75 li
32.5 11.25 mo
34.375 11.25 li
32.5 16.75 mo
34.375 16.75 li
32.5 22.25 mo
34.375 22.25 li
32.5 27.8125 mo
34.375 27.8125 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIC+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF193628C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766FA7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIC+ArialMT /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/JFFOIC+ArialMT*1 [48{/.notdef}rp /zero /one /two /three /four /five /six 201{/.notdef}rp]JFFOIC+ArialMT nfJFFOIC+ArialMT*1 [9 0 0 -9 0 0 ]msf16 8.75 mo(600)[5.00537 5.00537 0 ]xshgsave
0 0 mo
0 200 li
300 200 li
300 0 li
0 0 li
cp
clp
299.875 5.75 mo
296.75 5.75 li
299.875 11.25 mo
298 11.25 li
299.875 16.75 mo
298 16.75 li
299.875 22.25 mo
298 22.25 li
299.875 27.8125 mo
298 27.8125 li
299.875 33.3125 mo
296.75 33.3125 li
299.875 38.8125 mo
298 38.8125 li
299.875 44.3125 mo
298 44.3125 li
299.875 49.8125 mo
298 49.8125 li
299.875 55.3125 mo
298 55.3125 li
299.875 60.8125 mo
296.75 60.8125 li
299.875 66.375 mo
298 66.375 li
299.875 71.875 mo
298 71.875 li
299.875 77.375 mo
298 77.375 li
299.875 82.875 mo
298 82.875 li
299.875 88.375 mo
296.75 88.375 li
299.875 93.875 mo
298 93.875 li
299.875 99.375 mo
298 99.375 li
299.875 104.938 mo
298 104.938 li
299.875 110.438 mo
298 110.438 li
299.875 115.938 mo
296.75 115.938 li
299.875 121.438 mo
298 121.438 li
299.875 126.938 mo
298 126.938 li
299.875 132.438 mo
298 132.438 li
299.875 137.938 mo
298 137.938 li
299.875 143.438 mo
296.75 143.438 li
299.875 149 mo
298 149 li
299.875 154.5 mo
298 154.5 li
299.875 160 mo
298 160 li
299.875 165.5 mo
298 165.5 li
299.875 171 mo
296.75 171 li
296.125 5.75 mo
296.125 7.625 li
280.313 5.75 mo
280.313 7.625 li
264.438 5.75 mo
264.438 7.625 li
248.625 5.75 mo
248.625 8.9375 li
232.75 5.75 mo
232.75 7.625 li
216.938 5.75 mo
216.938 7.625 li
201.063 5.75 mo
201.063 7.625 li
185.188 5.75 mo
185.188 7.625 li
169.375 5.75 mo
169.375 8.9375 li
153.5 5.75 mo
153.5 7.625 li
137.688 5.75 mo
137.688 7.625 li
121.813 5.75 mo
121.813 7.625 li
106 5.75 mo
106 7.625 li
90.125 5.75 mo
90.125 8.9375 li
74.3125 5.75 mo
74.3125 7.625 li
58.4375 5.75 mo
58.4375 7.625 li
42.625 5.75 mo
42.625 7.625 li
@
grestore
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIC+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/mugreek <1C60D8A8C9B7FBE1CEC4CD4BA59BCF94FE8D589B193DD31C4A1413EF522D59949FCC4EF27C4E2D0A7BAF6AE00FC1DD991A3B60A48C3D2D3C6B9B49FA9AB401B38E076E26DB1B589B5DF0D3C8058C76C13C5B9C4BAD9671C45C7C1B9AD9496BABC2CE47DCD7DE9D2DBAEC1793> |-/parenleft <1C60D8A8C9B81F2C3A069EC278D0AA8AE7E32C29FB8AFD2B6368260D302C905A973F0B3449ED9E18E81E16B7B273530E9BC14ED76D4376A01C0A577DC235F833AFCC30669C812FBF097879E1> |-/parenright <1C60D8A8C9B81F2C3A30D3A3F0A8D738E712823A2480470C32A2885DCE4A77E926C520C7B7E1016BB28443D8E7B8AC0F7C4F3BD721C19F19D4714AF52ABD0227B6CDD854C568D5A6F3817645C5> |-/T <1C60D8A8C9B7D8BE16D2C1CA7ED2E06F707C0E9530AE37D06FF7501A595D3927> |-/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37295284C077711C162623860AACA404F650F8D516970257> |-/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B171C8A80AB> |-/m <1C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519AD5BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD99C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176AFB9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D55C54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE37B> |-/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F4172D53C8FCAF4D28F2B78D3A4BF03> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIC+ArialMT /Encoding getdup 32 /space putdup 33 /mugreek putdup 40 /parenleft putdup 41 /parenright putdup 84 /T putdup 101 /e putdup 105 /i putdup 109 /m putdup 115 /s putpop%ADOEndSubsetFont
/JFFOIC+ArialMT*1 [32{/.notdef}rp /space /mugreek 6{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six 29{/.notdef}rp /T 16{/.notdef}rp /e 3{/.notdef}rp /i 3{/.notdef}rp /m 5{/.notdef}rp /s 140{/.notdef}rp]JFFOIC+ArialMT nfJFFOIC+ArialMT*1 [9 0 0 -9 0 0 ]msf148.391 198.016 mo(Time \(!s\))[5.49805 1.99902 7.49707 5.00586 2.5 2.99707 5.18555 4.5 0 ]xsh%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIC+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/M <1C60D8A8C9B6B41CBB4B6664BFFC865F56E6FEAFA79E7B90883C1C68AFB379AC174B0F8DCC9294E2C26BD06BBA9FD3867F8768651EF4BA798B4F538FCE8F80AF5A83421F8F> |-/N <1C60D8A8C9B6079F629170873C67115641D0B6890161EC48F71E8D2106F3AC927984C1E464F121F968> |-/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177B5D88A> |-/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF626A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA1EAAF79B76AA2B52CCF0307B360E6D> |-/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |-/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5203A8015DD09B7CE> |-/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F518C54BB58C51D6FB6D0C8> |-/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619ADD420F549AB7C795751D32E8EE6> |-/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793990906DA8D7F8ACFF6D70790F06B02> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIC+ArialMT /Encoding getdup 77 /M putdup 78 /N putdup 97 /a putdup 98 /b putdup 102 /f putdup 110 /n putdup 111 /o putdup 114 /r putdup 117 /u putpop%ADOEndSubsetFont
/JFFOIC+ArialMT*1 [32{/.notdef}rp /space /mugreek 6{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six 22{/.notdef}rp /M /N 5{/.notdef}rp /T 12{/.notdef}rp /a /b 2{/.notdef}rp /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r /s /.notdef /u 138{/.notdef}rp]JFFOIC+ArialMT nfJFFOIC+ArialMT*1 [0 -9 -9 0 0 0 ]msf8 131.516 mo(Number of Muons \(arb\))[-6.5 -5.00488 -7.49707 -5.00586 -5.00488 -2.99707 -2.50049 -5.00537 -2.50049 -2.50049 -7.49707 -5.00537 -5.00537 -5.00537 -4.5 -2.50049 -2.99707 -5.00537 -2.99707 -5.00537 0 ]ysh2 lw
4 ml
176.646 34.9746 mo
186.646 34.9746 li
0.882353 0.768627 0 0 cmyk
@
183.445 27.4961 mo
183.445 27.0459 183.221 26.5957 182.921 26.2207 cv
182.546 25.9209 182.096 25.6953 181.646 25.6953 cv
181.195 25.6953 180.745 25.9209 180.37 26.2207 cv
180.07 26.5957 179.846 27.0459 179.846 27.4961 cv
179.846 27.9453 180.07 28.3955 180.37 28.7705 cv
180.745 29.0703 181.195 29.2959 181.646 29.2959 cv
182.096 29.2959 182.546 29.0703 182.921 28.7705 cv
183.221 28.3955 183.445 27.9453 183.445 27.4961 cv
183.445 27.4961 li
cp
f
176.646 41.5996 mo
186.646 41.5996 li
0 0.992157 1 0 cmyk
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIC+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6079F6249419CF69509002AC79A016C34D114AD8C7A9DD2474EBE314027FB7E1F48C795DC0A22C11652551956D26D402DBF3954D5C55EEDC4D2E02D32263ABBF714C52111C5848A3EB8C8B527B0FF3362F75E292ACAF79767633E5CF98F1E087651E36E4721AF4CBDAC7E4D68359E9108BDBBEA294A0489068CBF65F37E7CD4C7284AEAF641D010DF> |-/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F5C42C88FB43C> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIC+ArialMT /Encoding getdup 68 /D putdup 116 /t putpop%ADOEndSubsetFont
/JFFOIC+ArialMT*1 [32{/.notdef}rp /space /mugreek 6{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six 13{/.notdef}rp /D 8{/.notdef}rp /M /N 5{/.notdef}rp /T 12{/.notdef}rp /a /b 2{/.notdef}rp /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r /s /t /u 138{/.notdef}rp]JFFOIC+ArialMT nfJFFOIC+ArialMT*1 [8 0 0 -8 0 0 ]msf193 29.6289 mo(Data)[5.77734 4.44922 2.22266 0 ]xsh%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIC+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/F <1C60D8A8C9B7D8BE1661AF70E1029B586475C590C02056C6BE2BB9C2329F7F6ED1937D1E8A10> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIC+ArialMT /Encoding getdup 70 /F putpop%ADOEndSubsetFont
/JFFOIC+ArialMT*1 [32{/.notdef}rp /space /mugreek 6{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six 13{/.notdef}rp /D /.notdef /F 6{/.notdef}rp /M /N 5{/.notdef}rp /T 12{/.notdef}rp /a /b 2{/.notdef}rp /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r /s /t /u 138{/.notdef}rp]JFFOIC+ArialMT nfJFFOIC+ArialMT*1 [8 0 0 -8 0 0 ]msf193 37.1084 mo(Fit)[4.88672 1.77734 0 ]xsh%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIC+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B64EDFF43B9E1D43B76E7425A98F23F483468D5596DA760F1554BAD296AA38A849FEE692D78BAC3B162E2013F61317550246D6F77AF27886D4E04AB44C473130F6FA990DAC6640A48EC2A80691207E5DDBCA7196686E7CD5C980FB78081AA13952C8D8F3373FF54323A4853D0F014ED4C5A1024912E545AAB4BA7F36D08386B7A08B38C3035C03383BB204897FB23E6B597B4E784900841F1858E5E1740AFA815171FE44AAE751E7961222B185E93D26B02E1EB5C1FF9174E0C619907BEEF9FED49CD2B96F29B7B01884> |-/L <1C60D8A8C9B7EF3224EC6E192BD0FEC2445DA87B99CF0E03A72A> |-/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36548FE63FC8465B1B685766E782F0> |-/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D9621458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-/g <1C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817A065D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D559B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0C247BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667DC9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FBD88F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF575C72F67F4BEBB98F8AFA57505EC9> |-/k <1C60D8A8C9B7A73DB90BDE2D32BC36BC1297E20AB90FA9E27E830D444A320C85D226D41FA634DF03A4FEE2FD90BF314563D4BF5C68> |-/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-/v <1C60D8A8C9B7A73DB99D94C9412F55B03E92C174A4755E69F97C27D9162B37724F74F272B140D258652D102C2EAC46833C73F9> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIC+ArialMT /Encoding getdup 66 /B putdup 76 /L putdup 99 /c putdup 100 /d putdup 103 /g putdup 107 /k putdup 108 /l putdup 118 /v putpop%ADOEndSubsetFont
/JFFOIC+ArialMT*1 [32{/.notdef}rp /space /mugreek 6{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six 11{/.notdef}rp /B /.notdef /D /.notdef /F 5{/.notdef}rp /L /M /N 5{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /v 137{/.notdef}rp]JFFOIC+ArialMT nfJFFOIC+ArialMT*1 [8 0 0 -8 0 0 ]msf193 43.7344 mo(Background Noise Level)[5.33594 4.44922 4 4 4.44922 2.66406 4.44922 4.44922 4.44922 4.44922 2.22266 5.77734 4.44922 1.77734 4 4.44922 2.22266 4.44922 4.44922 4 4.44922 0 ]xsh1 lw
288.25 50.25 mo
168.5 50.25 li
168.5 17.5 li
288.25 17.5 li
288.25 50.25 li
cp
@
JFFOIC+ArialMT*1 [13 0 0 -13 0 0 ]msf125.334 102.001 mo(T)sh0 0 0 1 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIC+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |-/equal <1C60D8A8C9B7F374869C4D81D9B128A787F701C3A1164A793E363981F7468DA1474C45> |-/plusminus <1C60D8A8C9B79676F4DD3F58FC397518D3361350FDA6D76C93E64F8E1A9BDBDD37CD798600C9B93F798A292852ABA36FFCF3B239D5291F1CA231> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIC+ArialMT /Encoding getdup 46 /period putdup 61 /equal putdup 177 /plusminus putpop%ADOEndSubsetFont
/JFFOIC+ArialMT*1 [32{/.notdef}rp /space /mugreek 6{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six 6{/.notdef}rp /equal 4{/.notdef}rp /B /.notdef /D /.notdef /F 5{/.notdef}rp /L /M /N 5{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /v 58{/.notdef}rp /plusminus 78{/.notdef}rp]JFFOIC+ArialMT nfJFFOIC+ArialMT*1 [11.7 0 0 -11.7 0 0 ]msf133.275 102.001 mo(! = 2.12 \261 .06 !s)[6.74072 3.25098 6.83301 3.25 6.50781 3.25 6.50684 6.50684 3.25098 6.4209 3.25098 3.25098 6.50684 6.50684 3.25098 6.74121 0 ]xsh0.882353 0.768627 0 0 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOIC+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/bracketleft <1C60D8A8C9B854D0F4A9CC5FDA760B15DDAEB4EC9E19B4B41AFD95C6BA37FE8A> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOIC+ArialMT /Encoding getdup 91 /bracketleft putpop%ADOEndSubsetFont
/JFFOIC+ArialMT*1 [32{/.notdef}rp /space /mugreek 6{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six 6{/.notdef}rp /equal 4{/.notdef}rp /B /.notdef /D /.notdef /F 5{/.notdef}rp /L /M /N 5{/.notdef}rp /T 6{/.notdef}rp /bracketleft 5{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /v 58{/.notdef}rp /plusminus 78{/.notdef}rp]JFFOIC+ArialMT nfJFFOIC+ArialMT*1 [14 0 0 -14 0 0 ]msf55 87.333 mo([)shJFFOIC+ArialMT*1 [-14 -6.28552e-10 6.28552e-10 -14 0 0 ]msf298.331 168 mo([)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/JFFOIC+ArialMT*1 uf/JFFOIC+ArialMT uf/ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (steven schowalter) ()%%Title: (muon_decay.eps)%%CreationDate: 3/8/09 3:28 PM%AI9_DataStream%Gb!R&pO4SRcRA_I!;?Ib#T]eh;s>PN]iRNn6:)&k5C:(nS81?TbD^)$7bME=n!E]O^s%%>=dESiQ>E``5F`2:h8*`Qpik:@,m:\&%#jqilNXMT)l`G?63YS8D;'@A7\:V\.CY%q_VAJ9$X#$.XL:uPjP'%T?1^<Bs`[?)\E'JMl^#=Irq-Kih_nAqh%]61<DVT+$:2dWI%f<`l'fBos<"`d+iHF_erP_\:JA*V?-"h5pPp&(oGCS/lJc-A;,i(Ck'\W1+/SKK$d4Reiq4rUeSZZbL56.9Nip!Me+4@n#mn*A8@%MRnb8L#*P>+&D['A_f[0(!d-uqG*p9EEU4EKL@k\IUiR9P8)jPkGum@G;:0tVVU4h2*dVDl1@KZ`jCA\)+TKV\>;k'I<*):8^p16%8e`Rq,a!0r;=1;>nl/&&kHAdd5?W[$<d-5<:;08S0=i`eWSD`Eh>JGFpG<fAU`bc2=0l4GHopNn@POH0jL*HF]@4ZgVXKgt%D[RG%s,$"g.<*`QIs.]F7Y\SooFeW"*hdSP2?%^;'3\V;IQm$*DME?Pg3>_0b;,e70bI,,P6n^S3\LgheB;CV/L>C(.G:7acmD3:/;4IH%JpLN$.5XL1B[k>Jh9YL39>O9O/)tMO*QaQ,:6Q4DK4p_NT4.a+W2S=sBkK[s8#0-E<U2pQFa?b#\G8J@2J@15AQ%6A"pb[!2ikt,%:i&fEct6I#=$(oDo7*W&?ip1gAb\qGiA6[KcU*3=77`R"';!?%4I'LKZs8?pa]lk4PX9Uf_C(R?-D=Bo=Y@$A1DqU)aZu7&qLc75%)(:cl5UlI3T2;OaJ5V(&]NHYuP<o;mPfrR'>YZX)m;a)9QcnG1!\o7m^dD9N:Z5%A>aAZ%pk2Pl-hr?mcmRCCndKgIT25`<"J=%Z%L'dE'oEd_?$@2iI:_UYYW>U!bT?qNOL:be[BTlhfZk'"+?gnA5b%8*'`WmV63$q`Q=Fs?>-L!OAT"n*/,HV(/ClDI&ncu"aJ+*b%%OV&kP-I9bh_)IU1rim%^=<[-"s54QnTQarEiKHM:GMj-,63#l,N$=r.JlgAa[)cn\+D:>a`f.]'YR[K8hABQicO'4D3J!*q958)!%77sdK-j..mPR5$U[n3dF;s5<N67G7Ycp**qnh,;V)<dX7b:&kM%`'-!JP\;#@7Dc+g&Q.[.>/HR?a)72GULiMXHRf6h>hRS,-5\c%Fst=5-af04a`I#C+=E[NW0rT)_%!B;N;j1^Wn^A+EHrG2Wgq&tUs_H#DFX@MrP@5<%5CUZ8"!dg*=%+N@1qEtZ,'gZn?R4/^#Vmb%'_!2l'<*D.5=m%pe8OmoO-=APS,Bh08.37`l8SN3V9$(@:&`RTEh,t3[aXk%QQo;UDt97@PABi\r40JZ,.XItPJ:"P>cZcC:Jh%H%4GU1o:GT*6RU)%oe3>BgLaU>6+]U.mMRbS?'i,Rf`>$1#/hNn4;Q?+Gi#d8GL3quUpkFpYhHAnY9l`n@q%'r?'QW:jkqhrp<<Tt1%9(38gZ+&DOnUL.CltuW_7aL^F03/InD-N1O!rO8[5^2<hRG]&L:XJPSq%dQ-CJl4eXkk5Rbb/-taYI3A@ChuPTXuLE*N3i8Z3`q2%Eg#4CAY<9OY'i*+NW\@P'VTJK,]@`K?=\90qH1j=;*up-]hgLM.OS>4!V6`>(Vj&sG?nNH0Q0`g#:Ydtni<+8.b'fHU_N<-3=S-)%qJ]6[qI"Qp-fn3a=/_=A[p!Pjce]hQZ8!\Kl<m<%GV^u1,QL(70ZX!<"5`"G'PCN;&h$QD',j3>i'.VRITu%=U6$@\h5MUj;G%O9%OlUeTTFBjR"qekLbX$n2220tIUXi>MB$s`hUTDA*9)0>sW>&iWX[FWe4X%L=3(L)@b@;GsUO9k'`:j]*,]X*18OffsdplW7?'+X]%nt5Q3N!s)&0F-)/<s4TN.F\aWj;FX;1*35B]0lFs`seLR1:.QGDWQ/2njl8Y:_Cho/X(*dL!^eX#Pb3W,_;JE'>ZDK@Y?7^(6:b9%+)`!99U@M1Q[8JQcXVp.<11miU]*t>?3$%^%7M`jN"kh"2cTduP)auGIB/I/ON5I&b7*9's!+MQ5\^3^5d/O[RSeZcS0c=W!#rPn%U`4#Ps$e!(FH6#0rirq'bOh>.k"siK<gp(c8>q]oS>))J4s3`NR:[F2lQS)1V91RK@T%b'_tmH3&d[>pkt>jocZ-p7T#a#gcTpc+%=C"TMC;uCE=O,iF.21P][$F9/Ea1%?J[r?iK^Y+=Q"ihrL";KV6Z%b4P#L+eGlX1&1<Dq/P(P1#BTJC/Q?3g5g<,L;Pgr/INh0TW%Xs91+ed;8Vnr[g31O)YdYW8>8,aG^G2Dg19nE;,gNP&duk5u&OaD!C>$+8Z<YL%KbiD7\&3cr&I3f\f5e0F@*j]!5^n6CT\bEM+R%U=+]uTMIuD&@dRmj(/=VPnZhOj%'f"S&(?LU"@.Wj:h@/n<N5h=C`&4i1=or_k#L>WrYRhPXO(\jf"[N7@nM%R%mGk*=Bbq/qLa8%>elr3I93gl*XY6u9P6-=T`Uh='*Qo::<A<Sg6gGYAf-,0L(eTgoprcjBMB+>feUSO"W1h/>SZSgRn>7]_/KSVeo4`Ja9BeCJo2?3%j&mXM6beg/RpU+tb06XE*4.OAIo[pn\<b1.4Jcfj7\"3,l5Qc$KX)`HRJ[a&/.YVV$"`6sB22IXP57U`Dkag!=Q0[FCf[b_MF8Kf%`/,ZW=VXkW`+V0hFB2!u07dt+HCcOhd3Q*=O-V2ZRD)m!jI+SlK1Q8Q1drNg8uWfMb+P.M!W>X[UBT!5Hk1CWP_Tm]Q5![1Qbr=q%82&c!,UYBm?*PfTTf/;"0[*5eE;D2NQXY].Ae$("`=q9:679PdM$0Rb6LAka8?3YsK(Bu+!G11<^,5.%?img)_H'*WcmNN$e3XgA%oR1O[&=khQf@<3Z+<$=$D_tpKI4<B1,1Hd%-*Y;B6`c]cTU*Q=:99'Vr0%bH068n'<$q2OdTK0F*c2iMQOjIXg<#Zn9H[,MHPfBI%?4eT<LL3Y^]#9\?#kMG0TN5V\p3C=9L%U38`]MZQUIaNToJW,"8j(ZM"g=RT&t]fdKZ5-eEJ\69e.-^.]VWc(ee/gG!Y;PV;Igig%ZTXUMpphRnBWk7e9LC&7`EJ!?d;_qi3NC-^LfdKgZ!EMJHD5d+5;0@2#kJhI-fnkUj*6FQQs^K.aiI+p^i-lEYOT*F97Gi>L3I><%.1WjbYN$qe2#%567K:drlmG<"MQ6W@a:o0s`.haYqVP],ODC37BhA",m]bU8D>IVVGN3F0oY62YP0_)"Irl/"iBEFGR08aD:CtFA%6rFZSbiD\(4N$(O/Q<P9&5OJsK4dd*G"S"GRr"Z>10L"_b;lH3WH+'scY4G88^%,o_m`YEAaYNjTapjW^Isql9B>JlY"a(F<k\r6%/NN)j,1h)=/u;2*$qp6#%+UN/4CV>&\l*&ebU&)F1L/%"=j\t/Cb;Yb'V<K^Fq(i7]7dNsn#EKTXh:QcbXS<^)cAn!&U1Wb9U;Zd%PU`\8;!05Nku4=NT-ZeH<W*nR/kFCCQrr9W2J)@k*J;joD*dGQ;W"BpjI#(#A="hYT(\HSD-2W?^C%kBX;Ogd)Weq_fGf:&B?G/j%jLR.<NEjd^3>;:\%B#agGOX;O\227ZkIC%`#?Eor\TYG<7SbA9g_`27'j@/O\(>E68r_D<g52@p]=iA8G0YuU@^jK!%8s!QCPt&R%h/R5]s6+V)N]#<AjS]:c]YuAhi&=rH%XGJ"^"Q=im?6bHUeI+*doFO!E:pBdOH^cKZ9te]:anIOTZfsS)(@UFMn3@RV/3d6q:QY+%g'GJh-e:WZN_QCAE=[@Ml*Oid4P$%qHC\bde//8l7UInB7_^Zk2gYg'@iRCWC2:jn_pP)rp[`/=RuSHT:;8O_M%LShk+[Le[,(P6%j[ufL8ZslEE[eIe^"K4=*R*#"m/'Rk&F7[7[p=(:f_9@?rog#T\q:LjmPcJp=V!,eJHi\]>Q:7:-IBm.n3;P-kO2HTdDnH`F`goJ%*dU+tl_?C,K0'U`k6qfBVa$^F3Zh;nMI<1-lZG_Eo?!rYlGR^R0QNE1kZ92k"<&/b&P00%++I]c7OZ9AZ3sPX^/FE`S*fWN>p'[^%BaW--Q!YWn"rYh:CcoXt@STeY``KZ2=6u]?3_[Wt[2^-ZG(siV&3SMnT/@RONWL?;5XhSX_q>0TLb"eO8@6>6c4S2I.DV2SC6$C6%,G&/$PX7m9coEOscIKu3I83DiOqP6O27MXD)b+Qtl,L6Ba[#J;XYJ3"\3l-2>*pH=9,!>/`P,r:cc14\mkn]U`.u5rk9nhqT_D\M%,olE:33M.4B)PKUI>/f+!#R8a8qY\+6Be_C3XlTt_M"LjlrK'.,!db=:S\%;o@WBsS+3S$o4QQm4c;moZE@D*aYAI#cL7j^6PmjH%GOU/c@/>Xg/EeuEJE11;!<WWE/hnpZIj+f_U8H]$O,k-0^Q0Uj@\`It4_l5/n"L_u+NI=OktLHVht_)u?",,m6d-%QiYF>L=C["j%pmXU48]Q^ZhR)7-`&K&>`*!&g)16V_;I"ah4[cUKlTb@1YZHmJDb\Ok"Eej?apU$9&Cf]#)o7_[rLu5<O"02KCihN/(qTXUp9<4i%?SnWemX,PMdj3kKpW02#]RfM%\pnkD]kF0&$<Yl'1PT;6:\T/+)[Sq)1;0C\\t4&B*W(_s>7d\gG3?oPad;m:3:&*`Bced3dbFOL%PlL2cirZtL3$/]*caQ:MkZc2hVuLnAT[MsSTSNQl[20`pEksPP[q4'>_/lG!nn`lsb.Yg)UV;dBfs_'h`15YSoMoYemTb;'C%XO=%Iul#)\$)pdq&#.h*89o<dbq<(D`Ha,<:6EIaF2q_O0#@9@6tU5NAq(4Z\lb2Ifr'6md%'rW.VpWI[+opCBnD*CCD+k2nlIp$/u3;%09TsOO[SUdPpSc_o:dlNZ'L4ancY[8Vgjf8GK!;]8=RF3mOSER0LSXSc5QYA47%i1GPao2Z_rEPga,A;Bh;(@&2K\J-`%Ll`XpYp%cu?7_9#:Jq#@/=E+5c;5J)#&<WVcKkE4=6NLFZWt!DWQhM`WOMRKl%'[fJHZ3>_\l5SC1bEe"'Um7RCV]CN_dDZ!jV2t8Q/S,AW,%:&R`PVZ3K91]L4^ZAg:0a4gKYjH]WraXd2e\\*5XG8mmFo[TgI2D^2+G![e5B4"J#F,lq09q]Ke!)a_7%DZ#(\7kLq8<Lor?Sn<@%X3VV+'Cu15jt]L\>-<dr!XELY&O!"GWoJkBY+)r:1('3nO@M\XKkgTOH5fk[]4k/'KpALE&H?<)`i]nb^f;14?5higL=^Io*P:SZ%PM&08[+bUL>i*'MNocC8me6AoP94g<A@En\iD`mYJTPUH.j_`98#TjGHdn%<>B+te2=-=ESK4M`*k??ul-Ok/!<6@!Ilb.Z;:jSJ%V"'K$PAYm$_o&IhJZFD989Jh\)rnB="W9>]\c;K4e*bNXDDg#MpuZbHD%56U@DJQ<Di:>o5nitN\nNW%C@boiR<5<Di&+DHm,><p%L0cf,+R780rS@N;Nh?a!h<&P-U$.<o`o@7lq`e?))X?KX[D'5cp:*J0c3BOsKobJj&Oh_0HSDH!eJM)*&=sbkq4`?rH8AS;mS?O!%%2=1g81'e+s/"@6P=ERn@X>rC:T*R_1T]Z+#]n[J27kj";0:/D6l_$%#Wp`6O"\2DiEm01U*V-+otT6pp,YqShf`!!2_fXP0?:.(%7K6qVL@2H]PNf=Omn0m8NXiCZ#,mNS-Qj1G8rip2?Q`JMMa7+<".)bHrpsJZ)un)t0^3^as4_*>ln"6\;[K>5S+ZHT"&#XhL7"8(%GD37PV5&'9:>>I-5Mc&*b=T0V_1/pqYSVseL]2J8LAuQifS1/"^%p]a2h1hohC(:a=Z;ee.FJE8SW>5Q0Yp>ak25tfR/+#.],o8;%XUa3`jBnPUd00,\K@''\)f;AWXU7R176!3[e.:Mk]"#U<LP[Fh584XJE&NEK,PSS:pJaZK\rn<-Fc?@c\;,QV`Zst*9rq]8osuAl%CC#7Ihen7c)D]RQ%[b@[4T&Ve0+*<jajH=oA!^$QY>/jo*4q]"?=V?NG7TP)Rpj1iSIAr%(j?XF.WB>0DEsJti%$kU9YM3b'D<en%*[8emIg4!P7X]6*P''_d9aR92cY(]=.UZPq`-JM_j2PI^C*4F0rB^+"g[9pX"A:'SEl->LjVC]XB24@OGReRS+iU:bH!-!)f!acd%eW-'$_A67MUo5/e$V$gKLm["pG'DYRG'i'0+(`q=)9o_aC5p'mXRXt`?OTG@k]U@l>/P?ldjF(@T5iYkZf+mT=A'@)Mea/G9[5RZ%DlFl;+r7g:\T:85*S3DH#\Kp_QL'1AJAfqt-MBT=7M1B+6hD!_?YkBlKa@:VU[=A]f]8qlC*L+a$!9(mO_j&L#GC)t^N`.TjktC9%KO=sBFD25GV#TRjbd[mF<FiYP""]UiP:l0tM'&++!95CWSA'&s<WL6CTT\c$Q[Gcc%WWa"@Wt4rj`r#HO\;Kl"esY"C*?W2#V)D3%d)[0s;@P#VicsB-bSp>Elqp$HeKGDn@<3^<QSkRZ*`o/)@q:_]MdhUWAWNu?G\],S7u>:-S7A3cS#dZ.3Jb\96DlKW)(V\FBdqn:%o+sJ1W+Tsko8gLCmf!BkVI/]:^TT+$Jl*15*@0d$GX.57K+$Y;NWNu*)[Hl^D"AD8`mHtrgBt0)4$"@27P01hAcC[g&`ZcQ<hn8T%FkN)Xb5u]hB[ghr0rG^`VDX`CTbNc[G'f+4@n;lWrL`9Veg>7V+GHfD[OKZD%nGb)Igi4%G#'n>L1M^<-L6q-eC#Vr6aK5-!gZEb%f`fs6/2HF:,2MQ<X+!jkA2ot92&V<-4V=QT`cOtIkfQW6)Jo`j="n/e$C':2B;-2mI&XkN;2qSkKPXTlP](WY;1[])27+edZ045$%d%4Cc*u5iT?FOP)EI3Yk0cRJ>#m=ME0c7+uB4K0iQa2glXZe*lr3t)>W;F<X6k^G9Mq[S8s7Q?d`Cn#FQXgO;Wb+(/IWQHC)%eYS%"4?C>Ats)"2lu:68fGftdEK@HohVGJ2PFO?LM9gJaFr/YH$,(9]JF:)k'@-M5`OKX.jr63]HO/sk.E>52&_0b&SEDf9PPk/EU/ct%FUh%j9]oYYQM>W>kK`&,a.tN!/,#eiAuJ,,4-T*qTV4)<%1D0hD,T8OD*a28/^$!uc0hsrY`LkAPa!'3S(!**30M$I9pn<fM$9hS%;UOs&YS424Uc9?H:2#8../8?]kgseO5En9(8mtYMYKK=l5S3W-,C=9[QF"pLn8-hs^`o"!rZT`HAfu4QS\0T0CtbF0iu_:W\T:1O%97mGPeHV"!#NN(IloCPE@kL$i:A"V%5dN2:=<L\q@h:S=o"dV#779*`44YgkG,9I=OYeX"3JnJ%e.)g9:cg)K61(>P::Q_UHDC#N%E+$Yp=MsEV1mhAU1")XS;lsd[$RSKf=>*p`@;&X2dtnnC9o;K8l'rF-\/b$Eg*eitmPRrJM>fm0mE*;ZAZTPV^K7K9a%H')"c(P[%@o#aX($Brr47a5j)T&H_."n$[THVt4m$T@.p\?mY2<V+M7n;f3YlbUEC(9PXhG^,#]4O`mKhd8oK<M6_^SLYmAQDhQ>UmMXK,sdG%AstB%A1Bgoc)\NInO%QV=.W$X]rU4\a#CR=HGWQ?kONr9V[nA,0[4fqf\U*<\!$4p!giG61c[uY'S#*IkO8:g4tW[r:W`UbDWJJn%9\mlY>C@u#l^bn;]\aQ*H?\8kr;5_i/f,Rp6`'[s`e2GRX6-!KEn05:TmUnmIlNB]G:2VAj1\?<^F1LiSeDr\LP3HD=qHD.ET*\`%ilRb+h;"<?9CZrOh:cC%Q6m&:kfJ>@#uuHK;.'6<+mOnh+5D,cl%n7(Isp4!,5K8=FNr-U/KVWX?[4AnHcb5alt<>&hms:l4KlJn%jP/Q?W^ZEe'Ruj^8\-)dCf]H?AYgc][i^MjA36!enOkN`,/iKmUh-^_FN+,"+("gBkV[@qFW:Tur)s@I]"CnNQC`g(/"UU#+E4+G%iRRV:XO4NIC]3SQUsZmM`,BT?W/\C$>dJ@jV[Kh#X.-e7m)ccb?-i+QoBu.c\C&J_T?Fj=/Nb*ooej,*MXQujRbZ]2HTFe:2]@0n%'$C%2\_8IsMq[Meq)c8IOEW=9)AUC:Xf?*1gJ[sSACbGKjV981nY:)2bJ1MaiMPj.0?/cgU[%/XBqlJ.T5I?anQkJh2i7mH=[FsB%):dp?C[hlZ3&!Rsn^mOmH5eSVFAtC]D:IZASd@KJC9uV`>N<3"pgDn@=XglVS"-#f2*0D1ji_D6BO%p?F<D%2-f[\VJ]H,4n+Ou0%d>`/k@G3+JQh&70hP@?s9lD5H3&#(=YqD8r2`Ja9<jq_1CRqY5go/Ds-`+ssqT]Mcea8/?8k6;]nl+*nbsl+#3t+oXd@dX>QZo`4%XnN^:VFLDOCI`$@[*cpM?e<b++rYkbDD_?W(M`ol'Q+Uu9\7mkNENjdfLd)@HJ[se9cH6Prf4ibNOld$g#nH9?2L01ol[Q[,/;[N%jTCQPUGk^!,L],c:Qma+\5AT:^9>jOiD+X@(cPWVCu2Pb_&^E_n)!ab7ZAU[%*dZ)48"^BJtGhmqoD([UsW*(r\-Jf(cM4)^3RVU%_Yc1HfC+]g>2H(&Q_a-)GRkZNH?S'Aaa2:M\jfOI\Cn@#LUnpdLRePIVcfdm_L&7_1iB[J.rIIC099@EUV;c/B9>pBBN#E)QmS%(%Q=SEW@q/]ic8=5E9J-UtBNT*c[6g<Fht-l^Po^E4UO-ML9TpJ\L2!DIR@p][n&P%>#B!M`5Dhs7nSfe=cCU0*KOuJ#U@9_NAt$S9%5H:R.GEaq1i%KdAN@)Aem1>OSnlE2<JfBDEW$q"cp<mU"ctI70dA1trn$-%bN?3FgNI%Duq%mm)HPtB,oR")LqS>3$CA-So<mr60%Z0V/9&5R4D1ZO_%C#:.H#>LD[ZYbcYmZ5kqg0#sJ5YSMVkSV&T%u_)TS9@Vu,42,3HX7ml[F6ms0Md$^m80,<o6CB:F<K)9%cV(r%F$d!WOu.Mh&5GC_BeoNScV)-#lfcLXBjJ5$r(KhV5)4jX]1n@_</7aAW,Qg&l8O&O+l%BmUW-)R4i2I+8^XG*1:\mih0Se9F$6;;%Og]H-)*'Bt=qg>51-)\=B>T)&<+$Q4IsrP'D5LXaSph'N%o5KTV_9LXp%ou851O*.,pU(Ym`9!Y*t%[O4_+&i4r0p0PD%=^N3S+E%be-TH->th%`VfF6g$It2G]L?7D"=qj'[M6(XsqBE!V,^WAD?lnib`Y@ZTERjIO\&E4MJTceu8MfP4;V](m?:,:UGGX:S-l`T/>q\%G2pX#`_YWGQdDo-H"lmb@k@*fg>2"#ER,#Ti)P.KDd?h/[Qj>lDaO9YjGZX5rOn>[1X/NFS\1q92BErr?C)HGP!1QK;ienqo&EI7%WO*U5pOmQ1+)M`"q:J7E]m)]70>;d[!0'\+j'(<(IFoMc`m3tMpWUt\Z.&?\LMY%e))c]#E;eEhXR=>8GHVlL*4Sj4k"bV:,HSp)%P&Ke5_Mk&W;bgHdN@'_k)t`QEL2+&BU[cA0o0t[]m?hU_6MVsXWL<MVAs$PMhE>_C2>V4<BI/i#)JsD2DlSekd@Xr:';\i7LZ%sF%=)E^M>3TbJ]A_olNF-V'NK.Z?@T5/PCR`;mB$r*5-B[]b@bbYpn_(9Hd)O7WagA8(FtdbICkoH%UE-a>_Y[P".@ja.Qo>?jM(*a:%+/p2:MRi<JEc+i8ZXMQMr^H'6l`f0)XrQF;_ijPVR\Le]JI>A98.2D_e9\V1j"fN2IX-Z!Fl.7k;Ld^VO7b^]>hFS,*.KAkDoJsO%n][L!e3>e<lB^n4!E='XH//*H[YFi(kjm>\]P)oZNtYhQrd`t?k7q[4RgVM\"M:p4oe@ehNXr)@X5%$SbAAp2BKU81[a%Bu$9o?G%dd*^GFdE2T^Z:)LcrXmFHo`P*+Z_h$a(c+r"Vrp#j>!9fI<CERpcnt-+<9W2ipD.&PZ#R6-j36n9KjjgM8/29_Sr9tVP9T,iJ`kY%5A:)$9lAUu$]f`9&B<Yob%:d=Q@3L,Ie?j*!Di&*Y('R:VaR?iZ3dfVO5E]'8"YZgbS41qQ%bbA4/HHqEj%TcQD?'\7`LZ=I#&`&%X'f8Q]+L/Tj0BfiKnUe)ik(Qo5,\_6iLK+W%$*4S.)!)&4k/5]*K:\RUV^$)J?0>GJSe)G`jg@(:N]o&#7m-fpk.Q94'`;7=*hFK%R#,Z9XsAa_6.ZUbPM.Kl,CZ"S#H/D!(X_XK;.+TYN8r&Lhm?I\0DK%HoZC:E^QjJtjQD!6%OmX$BLb-SaMnjiEjDgreMY6DN#A;m%k/tXS;`C>FL!K<K7O^j$A7k?L<n<cl?C;,OM'JaUC&"h[r@ZB>#-aE0!HgeUhfp^<1EY'<:;_rgnsb_0UFa+(ngE#+al\!Y4Rnug%F#*$Q<XNRk$g7I&,Ta+Ml+Gn%$Qk)dZO+I>?Q*We<^RN"`<2i<Y5m'JH>G0KSVeK<Ws=Z4#erogk`"g%<qK9i5:s.fFa7iE[p9Rb%>JBAPg69DN58fM&ZM'`9#9ZV6Vp)F!>cGO!7&Be&CmosO%\5Y05fr.5pp4P2=DU#=5G0`HQ-M+6[OX\B;84ug$L9AR=8(I\>6liV%>0^3HSPWAN,T?Ulhs\IO0P734/VUHjXT*!O(t2'``B$Th>,iZV])Sfe>c%A9gLOm_(d[ar`R?r;`GA6TisE:(X#!`\lF"fNW[j_P%rG8Qh/$\![?TM?.:c8_o_:XmZG"udA\5@'QHgE:kp??Qa2'mpHHIT4)@+H,mTqLn5'dsD3cE.j6+Oh#OT\)d97t=-"JB[8D2E7sM%HbF!XrDdqVh%Va&T,>gs(7$+MdSsN-R!e*:&ZYN'%W)?ppCWPiNKWl;9Um$LlX\p.f3sWVLDb_l+5*V6$m_1!VZd)Yh-=(_+<!Vd%O4GWX^5n3UJ>Kqtg:q@C[tqs4R*I@@%a9"u'<3q;j:D1-WQQdroAAYP&Cm*j6fP!rYG'ob@Zr%+Vt0Dj&@,t[QQ`XMA8quf@0Up8%=3`$`bMlA-P(pgMa!u]TYI05;D<kJj\$?qlp)]B6jrlH+[/R=aS[X,B(+<<2NWM9QM7lOtF\VKGFcGm>hO0k/Ik2\sh4-+chVc)B%nlFmS=Olk]N*<b2l8ll7//IK3ISR<FqomAq#NG8I/('^QqZ'e4G.p/R.*u)g>3qXRCH,2,fuP<X72f_UWF?ZBSLQ35gj0u#'8`e6%]PjZ@O%raLR3?6O[Fu67Vjd+3IN$^6KZh!C6o[6T:5$g\bJERP^k#IjU@ZchIe)N"GoV1+O\5&hc?i;IUlC&'ZkHeH!1`7b43d]/%&7T_pSY6$k'-1BmVqS3aG-ni^m6"pRb7[OkLYCVWED[G6<rq.KS%H9K0OZ'+M$JLKongg[hg2_P/[,?aQ.c%=NP)@tQ3F:)8`o&H%&M]:/81%Qh.Z@QHn!)ftN`jjF>a9AL/KpI)/bOe!CN2A:-aK-.?T[^ro00<.\jBt3[s0$glC4f\I(3&*(fjmM5ZMNr)_>EVf[.HV%")qBoqO"DTR4&Yt5fmskb!Q'V82Q$`.Gsr_l&l>9,T=7\eLPYJ8Mk<iDV$&ZmY41D9l%F'Q>!5&73n>FCMla1AS[B@P95&Z]FPD?%2Nl,nn'=Kg/-l]i?Z8/'A;EB*L;IH*[9$U/bg`_TI18PjN.uR_5afURL+Hlo,ib4$Pt!Vl$4ZW*U-$0Q$0m/Scoi`Y@D;eH5S&mp%2VP[SB(g3,5feQUi^h;M=_m]]6<:Sh$C._1rIEpMFLJQ"mF<@A_l.:%RV[Y/$&q56MlZQ+[HLX\QEJ9bTQW>pa"BR$8gW*Y5-A^=%^1naYFt4_Y/nB"(Yu1C(Mgg.o1`%cZnUZ\-\2R(N-lQ'nS:5BUQ-6f9D"o/k,h=].2)\4]15hiPS1(T7d&\CB#hQD9UJ@#lam'HS%T+0$L/7Rj>??A(.o05>r(M<VC<?GF^2FN'X:T[!^>k<M'VZ"j;7FNF-TMf>lo@5d1/?Hln9r\9O[[6ne\@Xr5k&#`QCC?(IQa@"\%-lJ$+ST@HS6ngjh>h=;JQ%O$:*CrpR_W?#OP4B-E&Y5%B(HGpm:H"c2*j(AX-]r0_HQPQIAa5*&T[Ej^'r(91U2?SZS#M+6?`[=I%TX&-cfDoEB)r$:L(a4g"e-+Ztqd<!,-Ht>:=9[UQ'Z$mu=9A/)W^8_+<TUo56EFEN,\K.BA8de*Y=e8d;(lgqB;KW\lgV$(Z[YiX%cCf6(f98R7SO)H0Xs]"M3eIq2WNq6u3pR28D78Bn3HWgiFGO;TP!`lQ5rY,^\7?)?FTrlQh6Dt[3pR3c\ST).F6K\]k`jl3'm&T?%1[$ekI&.fD9$Sb$FQOX-`H(1D1['(5Z=Q;,7G=5ZW/E84hE2J8f@1:L!0V*1,,"9([nhd>dK?m0-AZ]ig;o:;q9ML3D/8,NE9-8s%n1>>IDE`0`7b0PeQH,1Ab=3.KjC30mB6%-#K/nh0S#7S8qZTu38">V:8+Yk&hUb9G3UNF@dW@Lm?.COh/.*#^q.Ss%ZG;YuarF_X%[S*'17^-eWdngTmjKM>[e[_ZqD%d8N\+iRr\;bW:;_;1r-oIKs]kfb&X.)RF6F,?n0Z\j+5tH,#em$DJ$d!9]**t8pA2eS#hr01)%>7">"b_&4D$kY!G"Q@ua57>MkgK16]_:ig"6_+ium4)F1-9%ch*VZ!>]lUGA#cP=e&5!0VVI`d*.5H0ogE(a(P-pdt-rS%$E<r"N%=R.<5!+JP]F^iH-X*2HkB!]_`e*$6qmF2H_H$jNdRi$CjH!j+QQPN^iD%+';:`\"1(rrV0_ujAOMLe",1.]eL+$]W>Gis@"hM&tq%3fd)"_-EEG0I>W0,hOY5=a,TNk5:[e,*gjBgFS(6o@8aF0P2Bp^MkR^eM*kCr/qL9250]8<E!1opV>PLZ;pdth4RV/)!AB8c'L5c%K!2sXi,G*FR(Gdkmf':?AF'Wfm\]U24[$%2DPfLb<PTme)"66h>K-S0Yh9p`).urFG+:&FI"^W_7P&?sdhF`FG1@_Q3%N7YJ&.(/%FK-UH)`L->Q0&,gMEC3eJT"d0b3q!Doi\Q'PL&IpAu7"'UT&;X[tRP&S7T^%<pH&b7+nOVNqK[GUW#7M6m"d@g0P;]FNtnZ#U60k%Z?#Et8ANAh"mK?OH">,a_DALB?:K7P1^D-]R8%9J$Tp$%OYMhj=46)o_irXrZ\LJ)eaD5o.7rjpaRkO9*gpT6eE!a5Iqp3g%&PaH%Zf-.G*h!#t)Bsu6fA_6pHe7@-%;f++%*fVNSuj!M#AIkW.HU%:WODVJ97(2K%m8q9/WcQ6Odq&CUJ&leULZkl'!Z^nH$#c\Q4;lo%SLDZ/Mat#k8=8b?9pE+c6UO&I:&3$30FKm`:)l[I\f@N>"]eA?_t/f*c=,#ilE'[g;mQXEoBKAtJYX&'jOH6s3O-i01JT+@B+!Au%Ld6!Oq'K+]goJgSFeO+P7f)a-WT]o_0c3W,7eY$Cot'bRbl%D)c%gAMs4E5)E6PAUc%oSa`m"&5(5u'q1*:BdXq,0`XZIVBV//H<%;2/mW:t$\m[H,4Sq8f"`3/)G)PRiQJ0QS+Olct8Aga-@qq/@t(N4?:V_s)"mZXo]Mh/MK"HC3PuG55U-@j4c]k/'K\><7Rs7$X1D%kU[:9*m@nOg%<0;=6\:U,c#iOF5'kL^;>fod2L?S63DKKl_qkZDUueBgI=;0mf@6q:-^P2B>`0@ISe@FV3cck!mT=t[?^t7Lt12J%_`,&;b1r$+c9meD^Q(9D,KEJFPC45?U=1P%n'^Pb[)%^Jmae]`0WrGV)k's6\=V7(nBT+@?@8pq>`Y*8E)*YsQS<W)>Kkae2J)<A%`jXOCmp$8GgbUX`(H/38"6jR+\fA=hB1D1b3\s\&f9)3lo"13H<,j.gQAedBcPeQ:TpBh3Ud@61a@M$_2.tZ/)eZ?gHqM0s(7V0R%*+X`@K?Aj^/+rFYf[)#]Ng!t2B'V"0$E%XC-N:ihUr)X=>?dif>UnN\IS294*+ol:fp1kpKu<gt51?Y`'omST*+YM@Op]8*a..k>%U&!/(0f7PqhL%eAe-AMqS6*bs@rki^0>4%t@-lKaq+'mNFPoE=b,,XqE^r17UOJEc,o7A*,U#M)_%MdYm^s[b@hquaU'O3"YaQWC%]K4kTh[[P,(%3QA*`SCfO8&?%BTGCVgjc_sK!W:s4\/q[_,906:[hmboRr-(pR^m1gU/D6LXcN'n0XKTh\T+pi/*uR'12'E-Ujr.%^#9J41@mJ>PMQ-Pa2M?&"Pl)NI,<Pp[l*4W:Xpf(q3tSi5:4KiJJY?q]8cAc`3`BhXL:]qa\>K5PWm"Qbqd2>i^oLr$AW@HNTtSi%FBN8QoCuWD;SXmqYII&Ea_l(IZq7%f4MJ`1i5dGQm*R<9m8G]U<%,L^XYT7U5I%ht=ecFa7OpgVZr&fDn+1eQUp%m7cc]qkeg-U/%'=R2jdC.U.O%'j$2M(tF^K<,FXK<Fij)X=P*U@aMZS?@pI*^iG`pp/0_u!E+cZ=sl@pJYDfT2q/4s/J#W3QrEeS26(gO43uLsGm=%*n@)cHU^JBVti1Xc?X,QNn'ir<m>rPbb>=q[Va?(EL&)o`K-DjUb$SMS.S:Ea%ft<PN86[i@]KslbSd&R^\@D>Mp&QHS=1FLWDL>%T5s@hh-hO'qe$`cY)Q5#LihBm7e@f@HPINj+6OW>>5ZA1A4bg#f-Lp"1[t%>Qqcc!&$nkdSQ9k\\TAaKXX0I^W,""5:7[YUcBqti%RSC83k+e\f3[7uo2^>LTS'EF&9D+:J/"=iC%O!?7dk*="0:tt:+&9nRF5jT6/=Xr+cN;\`HF)jpEp5,aH^;mQ1K"X@@XD/!VW/&j%>WU&V'pd">1K&+P2SS<i3[9a]q.2_BF@Nf_3_a;tflT^+WTr_R=#QVspotL0esB*DPY8LX$En/%SP`AsngbO#VR++kR^21:Ep6WA%QshnDF,[5a9kUhlU-H25okZ\'!p1t5,J2Nl9kT\`7qUh)B%*0d^oobfcIdGKG;c!(7US\lD`40Vr3Ga,3[8/X8mZQsSImV.Fu[up%aDj,/O\2W:Nt7Y/.iNrkM;A4XkDQGkO\TBdlLF:G+S!Qfmd7YG8#'@kjh*VUP,3?,L@a\hk``-+Rc;H_A6X+;nWAoP/tD;3mYh9B%c_9I+St,jmI8lad87ndCR2eQ*0M$21D;6;+Cep\R8Jhi.P"UU)`?(`d7c);c`3^<-Z/-[nO$@[ERD[)#XW.f3ka4H?Vi%lS^?RFs%g=,.W%_>lCCIZA")4Y&JQUnT?h6RP$\m)g73hNS>.5R9(8rFa3BC&LF*HYqO(oPF03MBt2;2EfDgmR?>3EeO3o>7AW525FFFgB"L%Mp]Y86Bk<uer\'ri[>RPSj'Pbce1t;6Eu:mq2Sd07.ZpSkq%s7_:W+i\IrrHb_%mFTA+"NQ0'WR%'Yq97*,p7f^d?-b)hJCCne7?%(B`:elA8eK[uB'dLRgn%@@_mRd82h"Iq9Ncpg0!VFSUXU63uV<Aa?VDWE!_RH#;hLphX$,>$tFI<B6.+A!P0=A-tC)2hT6g9rq@S%`f1UH^H;G*`7j[?c!$:0Df'An5cDnh0'";Flamh[a"#`f?)FR5*a#2cn@ViG)!\a/-!e#n)*pE(M4:@tkT`T`b=oHPh[,%HlTE#Q%enH=\2=KE3QTV48-a^ukaQ6]1S\Xo#-SdYbXX<_B^.SI*B@YJ2ae<e\7r'PSP-\*lN^4FPA?]G"7Cq)5)kq\;,Vka6i5lj\CImeY%9P>:UiLC?o::ONlh!1_3\=:Zh>b)<5::OO)UqDEPM6'Ip>=Uki=MN&4ZLp1:iQdR(I,u%0k0JD)SoMeknJ2P?YfM8s_a'"s<]MB4%-J"%nNcJPC2$_.?1pL*:=S\2'^ij@+/X_[.S)lW^k6fhIRQ$/k&TPRO`7fRe5UX5sAm^U)I_/Gi':5,]4"ek7dCsi<'40_J#M25H%e?/BHjtMXk5.8\=1eD146firC&ec&lj!9Tj2;0lM*6d2S2]`c7fp@>15t=L?^:bUY>j:/XXp8asI3H5.5$g"$8`LnFdhAk4QkiL,%&P.fPD<+]!4NFii\)N;6.>jh`Y"d2^>k8KnRG#ArU4DZU@5fDIU.`GXRHe;,akDc%6rb](@nVlWP8r3:`51#(%X".*e;8P#iCS;*%Fm"*!RIKC7d?J:0ok^8\MEl2Q&Y+'p@!YZFG<^(.0Plf16#A@u9@GJ]U3E,QK\X9\pc.o!>1$iH(D?TP34ggnf.pRQi,.eqUVAXb%C#b'6*V93.8PP+]8D+F?]?m.e[V_HD2kI]Qc'.W`]@*V9M/t:&3JYlWFM7J0PLVC3hkFh[6M][.>!lf2F4eFkHHWD;[adBSq.m-1%,rH-?$thS<IW`/Z3$!VFJ%,8H:NcJP!V7R!K\ej`,Ph"HGT"=KpFj(fFk)i8b`_H(dg_SD[.5J[e5r+#(k04UD:I2-VnUB<n=nWX%ht1W-24nTXj2p]&a0\^iiG7LD1T$]O[J030FW^a>VflEKd]hN]X?Wp@QeZ\.J)<j/kI)ZM?^1!B1^PTd00,TOaZM?X^2E4h^6E8?%F+L,h:8[0;<a.F`%>%O&((-S=3)JqX=#P%QR<V7R:;sOJXYL&O^V4&[0XStbgT&K".]meJ9@<#9'],DHZM,V-(S-:]R1:7B`JP%X%<`rt0"c\JAV6\Nc+uJJ^a`K0;W6?M^CZ57](5j6@8o_1pdW0UL!G\<A2@_"g:.G;KD4HnZO>t#$go2/*T)%#@Xgg.=%.gT3l=4/e%b`pP=gX0bYrl=NX>(^sfNDt57o4TGodKXZ)/ZV!p&LS_Z[Kjjh$Ld9%DY?`S[ej7g/AP7+RX!)Ok\-G`42a,((ULGO8oo?u3SWVM%PEspq&TN8:V^_SudCD%>djVEC7W-?f3XN.bW]0\USSWJGMmkP7WZYj:2T&nCAHs($Gu]=A,Q4l&H3`K)q?U^Y=0+6f"V]""HCN<M%.?7=-D>#tl.*&?ua?BjK+Mm:AABad.E1i2+5l*5EeL14GU8`ZHH#K=tBrWVi/%.qd4!)/AIXQ^BarHq:k.EJ(;fq0%1<W1Bb3Wr0%75/>CbN$5je!8*f0P5['c6=+384]4C(H0eR_piJ88f")K*'h\q88PU4m8Rf+kk)j"!1i6P1<I;45M90L+KUJQT*=F8#LM-QAnF#B%RKKLi]Gh<cD&/en*'d"s2Q#\WRKI4Qq&O#I3m@\1bXOKpIC%3"4MQ$,%.\]Tjg..5D-_qf/WdqcP=oR815K#J@F3KOL[l=RaL;(8%q97pPH4T+Yfd:C6j%qq6oc="KL[nT=QF4Foq+T,<>j5'K/P)G3euPI##U/]iV$>CirHJV2:\@q4DlC3frK`:o>Pq_j1BZT\NI+%c%O4UTpP_4&U*5j;.iESV5;uN6T%:ssjTB!VY<]\i.*?ja^TiO8,cT5SK>$8nVIb"k<@0FsjkP?',EcHD`YtrK@JZk[2B-#=Z>1:$2%em/B:XlE[$opc"kGHRQ\LY+/dlFD@9_OY,Hm%X<@$QoAa=a]g$M+aZe)(-L`l9;kt]7tD*%,u38;uKb?8os85[blYYfsuR_VQLg@%^"U#G$FXfHTN=/*Dm>i,A^C$*W$Pt%/JgY'cajm5974!cr@Aaa84Mk_cLk\IVX^X7`1O]6/2?`prKM_$<]o![H79K.f6*VLB,tqc%\8q7`rN$('mtS'd[uPP.XS_@)T(gU:3nM](U!"Q[FK'?[oKi-';uK`WO3dVF_:If>Xh9Ps4k4I6kOI4SnP6AMS=JnX]gU(7gTGS"%T2FHtHE*U7PnhU;e$.fdWIE$&V:d+`l^/6UR'VNgrTn^#>0ja.els[YF<9>fB6EOcj'/&`%8ZY$niXViD/$oD)s5K>>NdKLq,@79%4]`$ZW+1+QT4R0F!pBE^,qEh$22@s3Q-T'/51OSN?(28JoioGf\+mL_VR9fMeiM+:ZWD_uS]A3[1-F55,[umk]3*@BnYptqm%&$:%Xrj!5A`21Go"Zo!Y+Ms;^s?KU37lIpQ$DrQE3>gj0dF$\?sbl@3DX_ZqCUp?e7-Yl\UJ^Fja,5FZ^bYEN#jf?f?[VTjQ5#DkPA=3%L@ZpPbFRs3L.ZKdTBXM>K'2u5TB\r/b14i2Z]58Kaf\qE>X*:g6)K22>*?45rN$fSo\$XqT'L#P3Qu&S/pXUlalLell\rDU3`CrJ%%luA2Ddl=D]-"N8R*MrEF6.8iJt9"Gmr`?&RcT?flGK?;,oW;3K$*d*QWIk9,6=\K-n.uPNBr-TP<$SFC\:G24Pmj<*lb(ha"D:*%9]'2M^AX$8/d1uLe^2Q0A*ia"KXO&%#kIcIWaD@]hKLTZZi?L$mI"4BL2ORe6_RKUNX;QN86..2>S`%aYZhbjQ^NY+4$'DM[Jn4E%E8Ko.+cK^!ar01#W-]oI:;/oF4(6hVmb[YL_L:Lj00Fr,"2\hpj'6hUHh\0;=7T=8QQLUlql0U94<Bhuj2oJ`B06h4GN2ghm@X/O%gRo*_9d-jl([8B/a:b\JANgUm?CsDE_/8YY`E%;_QhOfk=,sc)I_6U=RFmpWZe+ah`A?93c0pGIDNL[rH=l,5r9PF7#t]KeQ#CQQ%_H*RomTg6$$)6t^dW*,!V3;32Ph%sZr*u6Y!g9-"R*D*C.iV""R/IB\]5N8jpad&p4`u%0q\fu-KQ^qaThs%,jG!.plWC*UTCjS$%Doj>:Y'Oc.qnJuS?Ma"kLm@9Ia@X#Y8p@6q53,LqSThqS>7?XR<kI):&=UA;qHLM5WO!+rLZu5pY^7/[6t3klaLEh5]Ul673p$_R%%M.OdYpXY(E<_9/BCOip'?S@5:\aRUl3[H-U7O8le!-`Q1Q^Ej#it-6(bCJ)Kl/+^6Ef[04#P>$%o0Y\SYe-V>`ZhmkN>&*Fn^g=%H6N!g&]J\3>FGIi&H'om^'(.nVn]r-61dW(5`Y1.nGS+"1.3e%rWlaun0RRQ/P`?3;IE[CrVU8\=Q2lmonTqHmc=BH'hNsjL'"rY%$E+L1*pi?L\-J"q_B+&#L`ij"*_H1*gB705.&K0n]%:ST4ZF7C#B+:k]KIE=faFhSpm*Fa0ReOU_2l+7.n<Himr/h4AM53+cXoFg%SUAc1K.@O@ap5BsFEql)em6<G,.^hc6]iM>Yrd4^90a&cEGe)pN<IZi)VU,@(jM@aGiD/Y\%(-7)4]?uZQ)'?rfPU_2[KAO]:8:H%KGo[?L"KleU,;_l>'Wo!p6/8XA&VP[G<>[^nD0CS9CZpqA.k#.H+;oE=(].Ofsd8U,*USk<$1dm40=W:<Es%l3.72d=3?<4c;!i-%9ol/>]m:5ErBd-Q:bh=-\\)L'p#npRo]hp1]H/#3V<\S^]UJ!q5Z&@A2)RXc[kUMKbm-ONerBgqf<\"ihH9ADg<Ua1BWRX3f]`Zj%CM1?_5Lgo,in7Ys8r%3n]Y05J+8nBXNs!8riSW%n1#)"ic&HR-fDO-U5_>DIj1H&Dr.h0%lQGUYal2X'^?'=2B0sC6a9VI97_'Rb%4oo8V!YbIQnX?#j%g4dlK9X?oNL3\(4GOIimtKG.!66<1!So7o5q.(eQ8n^H;!g5>NZ#GsO??nR!hKk`hE[SLpOhakfZ`g11@EEH%DYV3!>Pf:t5(G2=CE\d$-UdBYiO;dA8\C6hBKpW@/\M,Eg9AVD0AkM$Pf:_pd2+<R(;PPiFFd&$,>.i73=NafT(82$:@[8l%]Toe%FudNUhP57Q9VJp_H$fI2L:He/0"lUn:3@btN]NQ+=?cFuJ"C@.G-Lg'p6p<;\57co=X_>%O,[Z.j6\NFL;,i23/b+@/lQ%omkG<6%`N`%<e_mp%?Q8,k?`p;)3$\5`Y6n_r.O8;+e9:'Z]fk2:[fbfs+m#A!U_pS!K^Z9CAR]7\M.W\hF((jB-`Q/=EhL6@i=n,<Q/9j4%;IE;U;P<_)Y:0WiSN>gJQBoNC1k)NdVsPJTq=d=_)As9ciaLnmrPR]Y:P^S<&]9&c*P&N4'C%/Ok6PqFOhG,*[_qZZ0Rk).L6(p*%aP`^l!prMg[2;FW\_8H(6-i,7h1GfoN.qQA7fYs^Tl&Su>PI%U-)9G8K-Qm#,8KHKH@'!T`h&lhn]d2dgH@O5X<ct\*e_8jA7CO3%,;Hk:Lc(Bm=Ejf7:b"XLV1ms%G+K%GT%``bAa0&(h(.#ofmad<LV>8)I[(IKao3Hk:[MgVMMUEm&3@2#JGEsHJ_(1>K,Q.8'&oVV%*Tk\P)lD9PX$;F`4;JK@I--50<g3>m-s(W=#Xs-j551U,FV@@Lh$)0eiP*ZQhMR\5k<1(/\XLH:!7.5kf*^CL<<@:W;/+.>Ur:FC%_a3K/YT:]G?eiJ5"4iur3n2g$HmN^gk6m;P$?;7DW/gTA$1+!E,bM,=%[o^r_<;HR=#<?oUY3,jFlo>[E]1KF8cEm9.N\4lBGaZ0%@ccu5DsX2@*e_'<"P#N*Z07"#HKaoD.ks3)<ha4g0e@AjK^WalEZ<6*T%n&R#pN@Pp^4moP-0C5@I'RS4]g:&+SdgSZ:]04hT!S7%5t,I6#K?4XD]%QGXkkL#2TfU6!hlr_M!6C6Gdti2IXSS\Y+P<h@##h$*'nQo^$J/Jm@@l%l1`.N_Io*XWUN'HMVU_C^"5grm#ID=%e,S]3SKDImVs_3nCbQ!=rF@gbe_N8N"nctIDW`0T1uR2)Jqs*:#.FgLW4$s&VSlQOJ+/DU_2W[C4VFMND\!eRR7B.-4n6Yc2RDrV%&+Etjq&F:u2#a3<5f$PdE"ZWlk>Yf`)rJ+1:SBPsEXGKT"e)$?H*S/75s]L2Xe=U+8&=QfguVOtn=W3:LdT&N=Dfl>A4>X*6&cYO%g2@B'g't:C;e$OGR$*Gj&DZ9,E)?<McD;rj$>?2V"!KEF"t4G9F\!Wf)W=0IeG0VDJi",]dQpPQlj(ij<l-8(H-q^95-%6D2n,qr%9^%!J2aQBqmX!`4Uh!Y[H;5ZDQ!:m.V1P@S"YR!r.RM]+@Ef<.H8*!H2^6ff:p.1,,.^B*TRn"./XPgY?pmsTP&bh"Wt6:N@9#U\%O;,[d;VW9&3Y`/b'%4"A<@(>+,:Ss\;h`]J#Y,Y^!Be&::dc=_L4"71pJVnI#NseJ@QK[H]?`(W%:O7Ve4)d=LIDkM39?.(`%";q%Wm'Sq:,XRL"\m*@:bB48OEW>0^3=us>>?IU3q#qiiX(b9PtGOITONh=n,2ChU)FqSL>ue?n[5M"e!RiV@F]8Z70]MAk<^C?/ImDn%`hZTp?8<KqN%r@Q6l0JNh2Em&l3.Q7]O]<jFu(m[Z520KLD0#,e@:%.;*d&7c%/(oJjgI*DOe%q3Ao[bl74V+3)[kTo60SbXL]Nc%/*FseJ*,Y%*ml0sC]O>\_=O$\E2?!J")Ncs(0]B1Gua0cXIh7<A_,X6aVci'@Mc]%5WO&'Wj<Z2,ln,2nj7pk?I"?]n>aEuO9,ZB%4&@0-3cCnk`:RN>;gEe+Icl(BbqrD3$!'sA'<\f_cq!EDZQ28fH+#BD7iX@-/I>7Ug=9AFf;2Ut'C*)X8feJ-mN/C=P6YN[HKt=9%"!quTTFERHJ^4Lp6O7M)"mKLV;+1_2!TQ$F.4iCM;'4_)>@YGR,h^ofc@cl2Rt0=hf[n.`UMQ>P110'I)AWtRq<$Ri'kECh9]dB!%:NGB^%nQAgXccfZDTQ9h,kfTlnoL'4_hCmCR(1XIFG<E]KsH)F]+Kb=_^FWm%Os<C;HJ'dL3I+J:u'tG@NZa-@sECEe1FE^.*&#`%pYn:_<Y)@]d+td*NKiO,\+uO1X':@_R##1+^B^(/oeI[SU[Y3h;*8:Fh1],l`9-5./oLu+E+jaQi)(CUlBgSe\9@pXq-rPo0D:$D%H+S.uDZjUM?Cg/Q^nHjCJN*gHNhk)u^P-A;nI)%Nqth0t7BqZs!so`(,7<r;9'j?,/logHJY@RPR-X58rJ3C]<kMCa$Kbe/Ge*Cg%M%n-%+6$'sQ[Jq2*^X_/]ccU[pV*q8'il/#YCnsi04g\HN*jA`,C;^d[a.0m8t7-a?tVP>;HK9sA``@jBYl]*NnVG(k%$Dm]/*KR%'8L[B@ukPM]1k2YhC>DBT'a440I5+GDBW?$fVikHRW];uXua>5G&r"k4hR;`/5RZ%UnpkT&oJHN?rf6_??WdN.5ILU.]uq"Vrb;/%RlY=)lj73D?(K`pIt`QmrTbolb%t*a),c,j#-Z,4C>?p<h488L^LZ[-_-A1aI0>uXXO^;NE.kPE&=#A4W;rTREl@iJUe.Ds7=:2s%/:fuL&q@2j2g?[M@0J^nKn+D^,$m]]M($EIjKh8J&CpO[qpo!raaT@55]Z]FUl$CY@h1eJW9\X0=N;V@UrZb%V;o)iY.=jhpDY[$%WPBAsZ`XY`Hg1LW<*H4KGBjMCH$L!fjBOBZ/CeB7Y^#:\+J<U)BlJ2]oIGil!FDGU9Eg+!8s&c);*7`&",S2+&K57)1RF^#L\I*X%bB:^j)m?nqF*EM[F&=B+go"&E>RqD5U9S\X^p+!CM"-'F^-i+p4B?mjLb6!=<%@>uOCNMu>0"=\ndu&"M,<Sk9i7BD(><^K<N/3.%]9b,1DRXfoLHEB/(9SF2ejQ^phC_!W+)aK6G\AXG:UV<$ck%5[$N&$"^'`RO%?C1jSV/<[31UMJdSL>fStBC6qJ"7&b\;L!!?6IH%e`J4TMan6t)O:G(<deL%?F+27,&a+@k2kCsbrMY=Yp(6dnKKC)82UtZQc=?+T`S+[3^Y)1@SHW$+q228E@J]F/D5fQfp"/-i;#49%]rpeD$s$.@G+q>r5'gr=mAoXo$D^EQ%Njj;$kImn,_P/>#ZemJmjk30M`apMs,@_HPJZN#<htm.X-7\e/.rN'4!J.<oXo2Erp;_A%'A\=V-M#7nl?s-+*qdXhOgK(Q(RGqr9+-IJV9&mHT.gdA@mWPR^0*"iNs:a.dTE1P0Ze8gAER!G&kiX4o"Raqcf[;Z%V27q%\k9n%!`/V;,a57^!R9&F@S^ZR,F(jj.Z\$Xm9T\]d;C5rjZ#_sL+IYE@A:%:i>YEH:#ltG.`u$4Sr4sdSnh<i?5<C[qg6TI60S0BGi3L)%$1ABG5qG6"2H4pW,,8;E][@`@`goNQX%#G[1%,c:i0=m#S<o(+P']J1_Xd)gaq<>#e%qf2%*c_:jP,5VHT2%O0#/TT6Gj2X%&jG]%&=,,Z-c")rf/$1,,Q`m"o-dOcS3_0r/qsN0XOkJ-@YcH7+D*atA"qClY>R0>r4(G3If3C!Neqm;-VY3c'C/,P;0NN]Ut<^aPW*Td%7T&DqPhbQ'rt.RC&pUF/`FL4o2@B\E>>-7nltqg71\IZB;D<A?7_D;*#)67Xm"EFLSYr,o+XuY=(b+L(U!G2#)YKk57F=J?KXUpG%OTo,dIXIZ9M^;7e<TA*B$CKo;B!HVF#7EWQfad-$*,#sSHA&R/dFpD`3lU*#(H056NNH9G0[_2EcG,_nOj=;/VOE1#*hd1cc?41W%9gTg;kn,U%%Q"LAME[>`#4$s&a?1N/d0r$lS#R$mO0)-50NB8-="^79&B*dt#ZDH>\2&E=,CC1DLLs.H&GG/+C0_N'`ahJIaXT1[%OGml>,Q$Td!0L>O&t<h&aKgo.a#'r[8I:eVM<oF-R<\N@O?,shAB7DpUYQ=]Q]s>3=]N3=[fg)T7E:)HQ9`SJigeHBKr"<JW]%.@%J7?259]EZ,5"rWp'5'A.`Ig`;;Mbp*boTOZ7uM%C,Xc!ZkeYbjdYS3mb=8BJhYp:t\>0?C%Qb$^!XE_t+HG_$Ne-&-nof5XrJrok%JWd]Nniu3J`6t"I`\lc'e9MpenBr>V=<5AfmZ.U#9FYN;86D)&l4H.uONogJX?_kf674(4cLgU&CjCHL`\PD\PS$+E14!Z0.80-8%N,#ojT4$OZK'&RlgTFbE0[_1&B+,AHU3mna7?]FR,H0L?NLGN_*\f%_<n8OToE^f8<g*fXq]tMj'!.9b]3%gl8<'0d,WJ"Qdj1gf%^F#C;+H<>e&6s2rBd%*lem[.08Jp\(fK6ZF9u9G^T^t@t,VmiQPpR)6M9Xaq;9kG%O9XXb<+B8W)nY#N(PRp^Xb'Y(4<K`JE5<WE%dRonb_+C_4\N43.au?WAXs-kbBP,%i;%ene=!a$8JnjYY1otqP\&E<@LOr.#'];^d0pNaMiR9c3Epr0l..+I\%TYU"PnD(&*/h"@%0RdFj[nbL7(16/gdW4;h%^T/qPj'ZQCHe"U^WrP?,b!R+?KGQl":M>QYZ6_M`$hMb#8]b?E*9:?$8mOW(0KQuEe+=r<]a[JY[$)l%RP&Q`e`s[kNqX*Sr"K&iGJlrK(Y1;d`42L8eSiR+3OFgTE_'h&O'ih+F/:?4Z@-7ZaHpO/RKRjWd#1-MrAeX<R&M5pq/F98[-!Z3%+D9aWE)\<)b$1Z.'Ta=3kId([Y7g)c$[=0h$[F7&.gYUDnIKmq<F;TG9>-VbPF1]29RY*0.mle_9%@"b][iD*8pMpk3*G$@#qCk+%e]1cQ'VX7+o_ALbC_q?Y>LH_9k>D.I]ToM#&k66u<an_I\[U"V<&cpL*%HLJ%D2th]F&0e<5mM9o-)O2G,rPjW:rIP6nNuR#LoGD%)KB[Eai-n$_?CQ+MUK+,Y,F)W1:`4*O:/>]Ai'`^b`bttKN!qb1;?re,c$&\8M]j.3;#hP]^(ESZM$h&G1B\<Wlj$?_.hp;6ripR%CV$GoCQF.l[$utB<RKZ90;CuX#rF:.4pgFebfD/_B`I!'-8<j$cnNoDf5G=6lh)?A=^j`#r0F34b?H]5AS>n4BpQn4`TKoeDeO6]%LTn4L5@SUK>#PN"I>j&1pE5\NUGF`[j2]Xjf!lJN1c2l69V!jl1_)XSr;5aF1fosW0)':&?9=`L3`:tF^5ihbLKRkq/0m!l/ET?6%^s&-M12$aTr9JB#QoZW,`b="Xr497nU2nYj2EkAP#=2Al9<V]-]>-%pD66Kt!b`&P#*2nLB(ZL5?q3pH?.,Fg=ttrU>`V5cUnuA5%8[7VaL5=BE-RZUb\*f2#L_RA#V6Q:B7ACIacJX(Q,l<%&,/RX>$bjRcYBpED8H+?Z=H?(,bNBG9Cq^etVh2SJJlI6Vb2Wa81t*H+%=TW_o9$U+UetkR*6?.[jH8:B_-W>nN%C7@[hC>Frg)LF5pie"-IX>223Cl:SSn'2FV>EXU%C&O.(<Rmh)5JY;*:,g5c+O%+DENmA%<Z[O`"I;==O[&WJhfU>!iQO,g.Y"hQl2R!+eE(fg[O&R;/UoBZ7XW/1EpaG[g!7`<rd\qB9EMW2_`k6WrQWM6U<=dWQY4(V0Y>IE%G7OPHlH,4hOSXQo(YAuLZ2,(C/JdDmY`fWPj6"`QVI[Z4T_^oWJLsu-3^@hcP?@h*gS^YmO:314B8rZ1gRG\Y_@n[/5UK>?23Y[L%3",SDN:e8da]JYFh4q.1mRVoMU^E7CP1]]Fh3Hi@X(O+3&M^RK.E^DWq'9'@,n13#n<ZQI,j.=BFK]=f5R$aZX>>F3b:0$YeQ6D-%@Rn]&4T&DZ6eFN&j9a):(Z8/<#)hCFp(PTcjZ2NpG^H,@ln<Mc+'$8jZa)YlS42QXZMr$OHqQ5jP2TiE&85ZdKcu#\r*"dS0B4.l%03IUga=S*FX[Y]\q]eo7o(N$1:%_"K6-mf@hA]UV9TGo6E[!8WA@[A,lnV5bpoOFVIM+MMkAF)sGt^TH@L6Z-7'+$#!5=BNm.m24%*8Y!U;b?Y[_h>[fNFic[&r8cKgC2"YV%J2p9MmsNPX"&Lg:ORl=V;A2-dq>1$P.9,WSX\P<3IWOHT`-.r1@(1fKm:+8-5XK;]K-j%L>Nn0W?gA.Os-eHq5P8<SD1pQ?,Xcp<;6[dU,huA*#kpQVJJfnm<"K?jgAU9l=AW_a[rDG.a'jXYg-$V^)3Ej(\$BDnDJlH-KA8j%k6\gBeAWe.JS/<ra?h/a\L9!4dW/&7ILDGc1hOX)X17rpoL=7$Z*SEI:b)1&E:EZS!=8pB0\qKFr-%h'Zd,&4+W3-&?*/7P+=iO>%Q?L"e[Z1h?&1Cn<5bKlWi-R?"(B3&OH+S0D5pf9?SVNE-J)A>1$'m3:31>GVhg8hB*\>.A9,BPu$5kqg"]XmWRBc1=i!8+o*\cuL%!l$AD\_K3(:%L6/pFnLOD_:$G2t<bHU8khs&bb(+*V0[1FY,Pe1c?gLm1);dXPpu^D3aOG^A^!0K`[[F8&nE#lNJG7VMb!SDjWSc%OO2#lhnbb+r7?dnWUeb5iLq[_d0ud:UKJ7#)CM+Gp@0E'$(k'L[X5*LBhodQMrPcGDW@kj.On0A,qjQ<N:*Ns!;J`WB*P?BRkGpK%BU$VbHUW<1XthYDUMXkcBCtd^@,ah0mM17`hMK978;01\HY4"QgcMXTA^Id>ptTh62l)GFRt#[&N()Rd(WVuN(g5U]?QA[4q7Ka4%-km19m4B=8I`PsfceFOB()Qe+S.0d?p:;tZ9(shp53[4<PZM1CK@Mn<@GlSI'17-DT&l9rr6"l(hRS[@<H.),LE4$o9J=80Fi(<>%Nje(R//(mGEr(SRAJX1ZNdVAs3H/7on7`G)7Z(>NjUsNlo(75H#Eu^6i^'@?1<?WlBS$\_TYYD\'_b\nGoT@.U%=IBUWGKI8BsFn%Ls<C@d\iS<+YbP!3%#TFMd=ojPR77*adq>jeokSBCP5)Ekq#P7A'IJLcCM[\_=ZTL!a"q!b6^KK0AifakjPEXg+1*HgA(no%UR-N%^6`p0V,POh1]Sf)_:YqB*<2*s_\A:3D3/F6K\hX\R;a@)SuFpl<RuW=.C!@DefR7Hq`'8"Rpip;fOs>$4;(lKo)ta"1bLOI!CR87%D2IiW>sCL8%TN>lIm+E-::F!']arkgQ4Dh0dI.,HT10fMSekUd#9).l:8kD"?-'lSp3@anp4QAI1*DEtELn+c@ou26=KS6,E;L&F%hgAPYWCA*udDp*i\U4!(&!S2jj7=(gg;XhY4E-n2Bt]tGTA0jh=t;n]R^e=q,S=b$jB`58hM7*TpiSm8O18e-d-0ODDDUE8.j$YT%ct#*a;:(=J'*INC)b]6mj,Kr.]0hm`<cI4PWr00Jm&'h7Xeh/Chj9/*^KGp)97^5-c?&*l7RB)K.."3U_kd?B,iNR!fh]4D=OG4,%?C$E#+$\)I@dc43=QQJH71XRL9rCoqp63)<j8hYopQ7L:Cqs)?hZr^qGBemens"4-5%I9]1)W9:RdCpu8m,0N5'slVocZ1f5ZX$b%nO=.!TcET!bjh52GD,N-0!+=U<lPBjPpWb*e*WEk>@dC91l9iBi\<O66M9H*;\D@Z)sr7BdO>T\MOpt6]]l`Qh+fGBa)Sn9;8Dt.%.BDi''bADIKDW$OJoh4d>%;$PR0rk>5!;RI+6%-gnj`4.WfXBC1X4#38#*8/D=d,LM)$]_7ld0\X(oVsJu%)05S6MorZSS1HFI;2%,`i`?0&bW:He6mlJ6IfuK+)IKPUp>oYk=)h7a*ZWeGCO_=["f8.+m:>F*I!l1g,eJ<#G9$5!TRk$Ng'4"=kOhp_*9aobkaEq1G5*%!W-,)SO=&nb;g9tr(?RE.+WGL"g%8sSOB`SF""Qi/.>=K=O/uAphW6SP:5"'%L$7al6H_CF""C7\S.$cS3MG=r&b@VH58P_!ddK%%W>#<eR1o4g$%2#kEoobr*?7-;3)77X/;7a^$MLVERk$IqN8Nkj+BugZaVZ+0NB[&*f]dsV68`)i.Hb7?^Pm4D,=!OUi2`d&Ie[g)%p'FO^&qP\flrhFEefL!0o]R+QE/8AmW5Sh6>Je['-NOt&YYYdFI1fEXLA_XD7[W.R<WL^kG]"0-bnHHH:B^+HLP*39T(.`t3r'QD%5&'$S+Ob5rs6R?qWJp%9a3dEDC=_^0cc=kfm_BidmC6W9,>l)o["ma_VfU>_HWhDtB)U"_lHZtN\a.,[;*%S@["dt.)kX['GYcSp%Q0Gq1RlO9#/mnOt<.:j:=*oqdL[_f<k=Li;HZ362'feKhf+U,jb':d1?1d@Z,7;VDf5Ph&d1[*e,ofUO;;$55/QnZp9(nm#,Oa`&%l<Y7[3gVDR0-M,QSK6`]Lide65$B!k`U?FZQR;eehO!tWHS%q_F'EX:)IVh\_ArutQ=m-LiNM\T:\a@[KRggenG"5f%HVu%*B4Vl%!qgm:bnK=7p-"PSjU3VIB!f`46i^UP!:u*u62Au>O>Q@>@-8W5+saMrQkAI2U:d8>A,>uA9UPH5PFl5RF&E?/3!G@,^/9^GK2nYg%M_UJ+Gm`AgqmhPTHh[n+qiosC]Bm@B=E=t8n"@,8*gNMUK@ef2+a[&GVEZ)ROCT94jiV"&Et/i7G,;8Ipc!lA>9lom[2=fo3>Xr`%K]m5L\Wu[F_99oX63tmj<(:1679&#c``V>s(+#.U1"\+]"E<FYkbATR&#<CI07t[\LUWuY.Vg,e_F.JgVGgdos%_`/n58sQQHuPD%Ci9i",A'f4=#$KH>i+RX]G1j,p>-0aWKU3I-9&F^ZWR2epdS&rOTMY?/lT#mA;.\Qq=/=Q_VAZjicCPi;)1q4?A\dSX0HY7jt?Z"%+KW4cm2;&7mZBD:f_Stq$Q$(bp6b)qpD(,,_TYdd6A$rr`;<P13,ihH_"LuY[^Q\%FD6?))S_pt5/KDtpObUK`VR#PT@/*W#gB2]%-Z$oC.@h`FACDq%%R%"++T_+[)!?KUKJBcAh1o^/S9!!dB1$q"!Lj0\B=6d]%.<`sidL@+Ds;YOd8BFOZG8Om4_5b.K]uo9[j(J+%,g+H5T6mj&na95h;F$X(7BVG4Sd_lP"6=,"SM/ag4=o<oZd-sp=M_ogB=n+ZQ/3.ri<knULFYdf_\HA>'A_US*m`>#;(B*&<Ii[F%JsC#^Rd6FaXtUpc7SZ;dV_]SW4l6*;O]Bc^el@7pWfM."^pZQRk8Y_j#;\-22'Vqb[Y/KB+HV"FTBtFj0>$s<NciYQ8>,D=^10K^%#S]ZXRai*mro"6/bi.tbs2raB#?X$LD?'-t]QDnXQWLN`5:.kDZO]<^>]SSKP%Ce6\\Ho(l`er5;=MT#!$=[]:k2&#nAHOP_8@MV%-Ttp030[DgOPPL;$K<cT"TZf.M?4QG@#]hlm*C2*+m@IJI:0D9^4X,.pSKI3JT6dbR&VNA\@eMhcbKO%h7))E&g2/l$WSo__;lu:%X+9TLn$EEAh."/3f)3=U*<`r]BVfShj""qFJW;64WrQM[_VO-G>68k!\lq&^$,It/Wo,`Yq^V*Hi:88%^s7YJ0E3NW/V\sF^q'T[%-b<k(R;$Ut(^f+24/58HKu;;gAA58M(gLAT-t(HRAi(F<B5.V@F&,L$'tg@K8ZB>C0AI#4brDOlmd)&j'r-@gMb:$!0=#^GiX."O%Q"jWjQH;kR-i]M`M%luj/Qr&geT.l[_E2,-[Lm&;I=,'M9.!&\`iK^RB/QeZA!PAb7&@/b#,a6!3Y<5lNTmJd)7_8>UDbQhN5h/G%cDd86M,%L;:;Yt`BYJanj7qb-jG&kfOe#S$g.Fe7RutZjA1tM,a1%384hEbFOmtb*6M-Jd#F&`f\-ShU:W`q=oGb,f:C"PY>IB6K%rRQmAZLK$9%o]b3=Cb7Xa2J>C0F_K,E@t/Y7jdr6PJN#qVk1s(-sZIT3MmXV!cNhh^6J:%^"9Ta4:(HfC7uDlJ4KVb_EZHiHHSGg%'g@lf3YN&%<QMc3mbR`/b.5%?\`+ZY`nSY2.(0e>2+bM;hVB7pLrAS3F:r\@ak,AH$isrnWF:Zt1!;+33'<RQ\e02g9jG]BKe9_C%NW<p_[+a*m/Zr.:()kgsSm,)8&dP/AM==8d()B3qoWRi!k[uSndJBg#"^:fBf_MArC3`ld2:U03D<-Cd]WCMFLMinPF4[b#DX"-K%!P9W4Lar'A)WMf_O)M=E.X%?JHLW-.@KUdL(;aH"'#_\9N04(P!3;i%E8?Gr06rTpEeg%%mUc<cHDJ^VKI6K4q6ADGLJCdoeU!7H%2Ec09V*B6QQ"-^d&"SFq^XdSp1^aqdr1ABRU0^r>W0[^*I]:0FoqFP"S`sqn"VUKUkHd7K2?%^;0%!Dm$0WIYVD<$d9"Uof!aR)0%DQW0oj0EPWi3!MohKg_3Seer?Bm2OMN;pDoE9lJiG'd21BAKA"*L5H#q[kYO*L0*T!jKC97hF6WJiebe5Q&PZ6XT"/+du/!E^FpW%d8VllPYr>8!mj<P,uEgP)h65R1&CF"DZ.TrGFuI=?NkWm._B^mktG&O-/<NEEqfA[r!h7eRbkj3l"GecOJ>-?9"8(X\-Ke,Q7PY(%&A<gV<&C.T=&:pmje%C`2j;WG];&>tN$_*o'SN7l7-0l'-<DAqML/QdC0M6?:C'MX<\g3iE03d7INcj[/#a%^f9J90r,C1:32@[-%F<G0P*DiqcXq-k`OT:\XRXj3qDU;#7'&sJii1@e+N'"P5-6Qhe5b4DXE(AkbVUmT:TjC!(JTOP5/jq#RI0:eZV:l!^Ke]6PJaW#H%dS&:)nclW:B9Yk98/(L'<`7<ZK1dE?"K!HX;EM]I8>"Sim!1Fa^9&MLWE__7"$f.8JP\E@/cF%Xd7Vbl,RAL?rg)c&$iGpE0"R4e%AWdL%SG!iVbE+K!9#(ai%UPZg'>4Ebacr`h1,=EKX%"EmcF5)g.9oa$57UL]gC[=i\OFnu0B7]kPU>CS!XN0:%WkKYOJQ)/D0P1Q%JcsM5Y"V;d%Da%A'ZR3U90rl!@_Oq8>@dZ[Zqh"V@\:8tA8S7/Ms(Z0qFm?#1PKU>;adEPgR,k9MUG?O.e>UWN>2CT8I1g!:>9?F%-Rn#SXXE`@-FB<dSRo:/OAMrK0L;G?'3E*VK-X2;'a?Ismm`i57[1Z_,(dM3i(7cP6)F]R=q>@o^,ro10Qs`ETc52>PN5W9`$L4u%lm,2-kRJmoM8B>'n-r"1Jj:9KZP2-P0&Ztbp5dI*R7oH6ec;&D^QR#P2An26clEirEZqFqL0RVm.^+_'5Ul@6;5JSb:#I>U$/,jp%HjA(K9aQ[Yo"K]">!7X1$3ERU!J;JFQ?GO7#gkAmAN<?fM7Z.?KAU\@*QK1_j!q-pWo+p=_Dh]c-A;VkdLs*FGM(9I&eYp)C)p3:%<M;6;'FOtsUk_aoFFb.(GGmW'hT+)tdJtjghOm\Al--sml?XY[Sg]#`,nt/DF\n$:mAN8qoIqWS\tQf)`[ac0+qbopceTaJ&@s,?%M,Y'";A:$(c'T76iFa@0?NCNm\0c_R#u't0hFL,DcUI6u#tfo!,?.jFO<h2p-8]!ODm2=a3IRMLK5)W&Q(T!?9W=h<-?U>#7b+Y7%Hi\s.ja@;<>U'SN)'io*T]s"IB^alA',g,A@I7k!dCrKn8OtNh7+u17;M?Mq/C9sqN77%P"*Xm&MBi:[WH(T[+iE@KY"$KO9d&p_%0VE2%R/@t%mBe&?dL8hg`k[SPUC=11"EK`X6t);B\frY1;*3!e8o#nSE2L"=TTt)&@\*T^2a/gG0d@n\B@AtOLVEHtY!1-(HZV\f%4e7mM;.caA==7Y1'V,6N%E_lV,:cW#*G&e-L'sgr8XV#m[_sSpLNQQ(X/PCqH%k'pZhL_2+K8)N23Z>p%_*mj6>;R^>+4l`)[$Ih%^/`?eFOe=)qPN7L*gSbrBRIN=\m&_C89<!SluRA+QtMW,4CV!c[>.p<-4!S'#YBpgZ%/3$P.>@Q,KW)C-tXfS42J"8Y).gHFNKcE%<$:4i/s)[141#=j2T)ZF7#EGW.NHqZ_a$!+Rrs9gj"<a1)_)>^[hV;N9dnY)E29j[VWKq6]n8gK;Ud3XSpgSZmA_]DMPWVK65$#o%"Mq(5=O0Q$H"E@d0='h;;8j7^OAV9_AR\B7Q)(1&"(Z.F+V<+K+OrPnFf;it17L`Z@[\`e2n<Hi;IGS8E@>5;F.JHhcD\0aR\E@(%<2AGGBhL`B",7m,!q+k=Zjas5N+AG=+!d`!W40""K<F`?18JrT5%.WK,VpWS<iRE$;NK9Z8;u]j9FaT+UOH6u=lF*QbkK#_7EocT%)Gpa=W9k"=7CbiZaRk?5MDV'-j=2EkZ;H/foc4[?.N3u9VMp*CV&G4QY,OAc8R)X:I(h,B>@dY08r!O!4Ln[\m8D_tUp232UWeCJ%PZ6"(?:m]O-&"MpAZ04H6qTji,t(H:F=-/iM)3JE!_HW-Cg>^<neT+gR8h^O6q6Z<>9\c[>[a[l!@m<F,,ee@]iBqDCsWM'I$*\/%KIZAeoH:$n]:lija%rQa8h'<12YV(#QJ=rq?Z?!Q^Bh%_e*0Q_3W143\d)t`cniD/qopO*e]7g;;;!7@h#@3(ab[>KaP:XBgbll<%&9Ja,%'GEE-%b4'`:u,d(qocC*q_#2,i)q2_$3A1odf2;c$N5Y<.]3g-(MAbA&3D3=a+?/gs4Qc+HfQ6UfK\3BcTc)WYEBfVtf)f%"5B^q#]X5%fJc`8<Ag@+MkS7o/Qu/JGXj;R<FmJ5s"rpK[f,Q+8B9`BbK%?#k)Y't_e79JTn8rRed(o8RC!1QKK^&R.a$g3c%8>H%hj,l:L1\39h%uo`)JPX@6Vt,%>M@O(@RDq0PRT8=RnY?dPW%&T=8-1RH>H$/9,-mtFS4&[M;Q7@AHSHuR=lg,N"q9$<-&eQfesFK%e.@d]`=\*"-/I%3[$lZS`q3O1!`<6)FVCqt*=bA?6,m%>d24-H$)nd&T[jb)F(3P0IK7Wn,2"ENeVOI,5^hA/R\2s'UT@;8<Lnh#%r0MT)Opjf)eVB[?8qO3ak\:Be,50=j2BH<ppX?h0f[)u)(:MlBOhjtuYH+%1W8_$]kf7r9JC[j8@4+WN#\*&\`+L]:L*0tG&S,2_%a\Is>-Q^uo@UM%E(@6oAoR4`jqW30KQ2".1G!R0fKHW8%6lWS7Bk;CFF4](24SFc"6d!GMXa'DP88&FG2J52)^i$Is2NL#Bh<Q3]%6FaS+=cX"?5B?lG!0Ec`?(0_"_M<SJ#hffrITUp4rPb0:.&%lD/,G)F?IDNSN76oJ8&4Xq5t?iC2a*p37F&Y>;r*%"gQXWKO-4,$%;EXcq2M4.Uk/n9>\e_N>Tci?H0mY.!+,$S`:$W&A!"T;D"nqX)j"Y=gCt(GSa3^HDBdD:3m20`tl;F=W$;:Tm'QVL#hLD#/g<!nn%,@hj?l(MRp?@_r3j1Gai^)=B`&sDBn)mp!a%E=*sAdYP:40k]Fh$MpF[O`n"/Z%tO<9<V:[#P2b.>Dqc&E?1kf9rS?j(]nD#%J<#%WB7"`+g/Pi5Om@p@Lb)L]$L_.*,'!=]a@'UX5%C0@2+"H?1ds.QK?PK(/Jh-m)UkuE`i9G];99c@4).*;Kit[@#@u^;gGdV*]R70%RH]oe_"KH:VHJaD-(lP$K!.lf\H[XA^)GFNS@rlKh'/H=bYnK@js[MHU)UH9kA9/a0iZ`j($:K9D//L;`TYHWNT?[#H<4lP)ffa=%g0dqHbW*M9LhI0RaP:2S0dmu4*&L(#q\a)^AgNThYrRD=J[K2Af*(II*-m.(05A]FnJZF?hFMX^iut75*SoGk:%bf[3[8^bD3C8:%qQt/0A7WQiPS2q!j!g?p.&LfR9<qJ^/B%]CZQd7]P.#=qoFct;[lYdg!;B"mUeYs-#d:"jZK-R"9T0n7\#"6oR(ctq=*5;,n6ZLV%lobp*gJ3=ndCW//R2@h6a6%5F1lm>lb.cEJDajC1N59kBUJ!YG@>f_TlU6On]oKE2;I$;&?oD-X"@,T^*IORMc!/PU%*.Kn718nq%?q-eCRtmtRr"h"ppgX&IRq[2V9qio7_2n.8kS-m5I$F99W?>]iEZ>J4XHFn,"ehIL3bCZ=]t(Sg<b<c=!]DSZ8N!=ZF=.@2OZ(t2%q6$D?2[;6J<6D'N'djf7;q,UtY;Tthq#YR/c2EL6`/Dmel1H]"_u6O^2Di2gMh8AId7@!nr`2F-'l^u>,4c=g""[o.^iA<o(ZZ:=%+PRIYI_J(kM]u&W1n%#G05KfcJ[q,TY;(bt9G^-\.7/.t=.9B0?Iflc8gs'.G4j,YM8+c]l_.7okromT`p7'^]9[SRgDMKk@hcnF%<DTP_J9I5\38<&U!I8qX3P(Zlq<C@X(C\R3-5b.8W4^RrDDq,7nYqs?"p,a[$85D7I2#F.<AAoH\9]uh'5`Jfk$_=[B/[MO#DbSW%OIs)KgJ!\5,reM[!8!?IVSr;@ibU"d_QCm]P8(CE#reTfnLRe7eZ*q4grg5pO/gA)n*g[?Jg<U[8-mYEcplrt0HdkXAiPFp+fGmN%?ar,h=]I$6UoOO(q6\"3Wr`r#]S+37gGj+-9s(>Vjllc0Wnll8a[eX[?9-'b;F1XdOjAW"f"taDEFi6;jc!+j[\AsL;</,3]Vm'_%8<[%Lj[@l-P#`cFF:^mjBS&LSQ"]I$k1('?N=0?l+LR\S92020g'-p0U\b_>%<(N-%?cb*2c%gC-lhT&3aoFeSIUdBr5q<DYF[%c%*e?foh%X_oe?&bl@eFNC0`_3mIZFfEbrDhqXj69\b+S@ZOA=:-L&Qf-#kpaoS#*)3=O[cV2Od9lRjHIrfm<MRLXT\*LsM6jKa^4B%)M7%)'#o&ej)9$nL1?j/bA-r`%ApEHk.0l\Kq/7bF"Cem;O25o2]rCf=HFT11/`gISCKjr(Gl@E(;sm@".+uVlFs:9CMTe&G\@hL%8TQt-Ruem+1L8O58E)_,NKL^B4DE`Pm!*!Eb$IQ4(@,.=q;V7Z&pA2FZW=Nk/j.f\TOO41dP`7?$dpj^,;h`tTmFY<TB'pZ'<Odc%('GK?U."'."Vl/BD%WNIo51I$$)Ms8or?"u)SYN!(/IZ[N:7D3EA3DUXRA'EYX-oc)]Z,*%LiHh2ci+=1_(mA)#(/6I^AR""rd4Y%0GdfGd0aKPC29_Iecaf43,I#YgGFTbj$#!0,a_ab__;++RuOKM1SgaqR0D[<L&:-NnJ$"44d(/5,b:KQgcXpE<@]WF4dtXk3VQpD%7T;_FjuR9tLB'Gl9e%XTi:(>_#=l:mBYh:+lA3k6M9m\d5U4\)Ij2^SVh'hE;(+?#&4`)V6jmh:1S&GU9M6pVL)R8</0saoA[%/R%&kA,LW\\>,8RH,uRAiM]cDW9QgFqc:!p)<T]#K\>d5*?):R4\K$+CGMK5#n*Ap'mbjp)3$9FPg&=^1[s"jt7-ObQl(@*02`*0uE;%:m>3iX=p^-'k"^)Z&h`<V-R!?Z\psDk)*f0B5tuQ3h#:K4<s:Y>m"n3hD%><Iqud1%mFe8N!I'$::.Z1CcS0Il>a?Y\?uTn>^5P`%J8NR?"?:B$Zri/F<n0poXZ,Ic3]%"o3cg:8SMa3gak$4>o\tdB8kXtYUkdLGK$HN!8<4MrSDo.>$sa^%:"]U+YZ4%O7G89A_SL:E%@Wks7)AOh;Phj74B/PA"]9Dnn5FZ77!QNeC!ZBIm=e43D:9[8XG_42:.ONI.`4<q/"_kV!Z]N+L`ABX*GD5kN+gR#+*6k+?"'m"G%c*Xppc+;\!'X7X,kfhCL=je"L-N)052\MHsHr:`aEE5VFJX!MH/chMY95hESc+*3EXKaDC`+nSuD;f024q1!W`E'hr7U9DfX""KK%I+U:^*o97MH[*$FVe'K?4$#it-rb.E)H9<[S=I#BE'CAUU6(ho3X%sam0?X*6AM<+WeFi@%M-eCH+XIe]$M;,iis<=%`RL;p[r26%-^oe=k51+?HfQ^dIiO#3T,qu@dJ=-<1W^6;fk*`.4,RU1_fbiR[.-+j*&^^?kIW<>.R9&pHn.9W(cB,<dLfGIHD@F[_jQ93Qj!p'%lteZ)X@Js*m;UC(H!CN+D.t52Y)A[D!A[>@pnE#5cj2E$3J%OXN#P8q[d,@tDtDJ'87A/c*(l)HD8AAq2OL:TF=ABo7ul3;0VaOI%^2Ut=9q-q]9F^JXM4mb@&nIDQ.+#dnbHoNcJXlXS4ulcgK!;=+9Eal`\&D4Wj9Qq5nW#/L8"2)WMJZt[Fsn"*L.?e"6i5fE/hT,`%>DK"hfiIWSF3U$d?L\@.qn1^"I0mXu:4ro"%"]DK&3`EC6U.;0dqh-^MpKX/:-R^W:!L5al`1(#@<a4(MdH(cC6"$;/d-hZZGqTK%.Hhp40S+Unp2JYV-,>/V8C>,fDLNn`5p8a2J4<8r7J>pq7&05]nO/9h#mNkS+APr<fJn@LKpGSM<N2?XLTO%gFkBB&<jQtd2BhU^%&?lu.gn4@7]Vl-C9]ea)144lkl^6X"]J1XC\2(l=\+B&[)bir<b*pY?-":I(J+%'CaL/XdrNJTsZPl^L,T9+j6l:qY7G8MJiW^/M%0$6R\7auQ#D3@.g=X,aOOlR6n^+-LO`.-$t;#%4s`]$:/&CO!&0T5"t)Og'JW#!qF,>-l&J6HN@+bDe;;DE2Dau<<?P.Vp^ZSJ8^%%hV9J=YV=oq^emu4h>hKo;Y9W)H7G6c$Ech:$108nFBDA$#$rNZB0h@iaELPDG!V[M1am6)Z`0'36OA<7<CXCh%5=s/1YL<ghlgR%LZnF4KI_.Kd>JVs[AY"PG3gp.!nUAFfo)HK4qBrdEi50)RY#0i%W&_TPe9Vg34W]A1E7<`?%KdB&!.V-gn4@84IJp7iC,8T&!PNN%;W]6cYTbD`=:.76WZI;NNWid>WAP_"Y!Q;:fU>14_,_E7R@sch?2.9ObQsupW=<1J0d(dRJ0:%CT0u8I6<Vm47@[I`9q0E9[(JZu%AarDLjZ10t9h/;iH?H<JRK00fA-Ea/3]2@hL>?"7/-G@:m'E@t/PTYl@E7sSDI/Qj8t=VBoB'oTh&3nsa=trr*6`M%`XOT$9J0Mf%)i[S!AW3,?$$,^brJAjT-e"c/L&N:N#SIjt(J"il^9/sFjUOjg-j<hQ[+i%8!;OV8=?)Fb/tT(.a,1)n9Qpnm=iP!AE3b;T>RB*[%U+JnIJ9a^Pq9dh4(H<.Sa2h5ekF3DfAg?7ug]@d,H??J0m]0R1;i1%4`$?eVX!QZP-EC]M(-/.jV8rZcUEIP#6A8s<YHgqc"+!6#%.L4^c?jlT"K:]q!`ks;Mr#hZI+YNEs=N!ZC#sC,\nrjPtUWV'72HNX3p=KH6-k%oGZmmaA`)Dsol5B4^3i,f9!:dfEHm8\fe\Xhq%=tG%8qn!7Rr?bbD-p62"7hq550S-)`Ou*88ZRV\'4Y6/Abc)`>Fl[AtUWst7idjOX9Jq]e<oL"n5,t!mAY![<G.+>MSWVL(1(.gk%msJOjf#Td%@c1k<65[>f'%0^Q^7eH"Jn,1i>/0rKlU9*faXK_I*Z(W*5s;`I-&F[*1dA*!6U&$Y%+VG[+'R2m-?Orre>t'GA7cMQ%ki!`u'+X60'$NCQ,J.nmJ>g9fVmlYRG(t5hEVYg'jTm&\kL=&W/F?N:B4f.s19uu%^cnR]F(7Isg?uJF[Et$+D9X%/1V1KA(N)\F%g&qMqWI_tg9,'p>!A_q]7-G3LRH<F32-PN$q9]8^P9hdde#L8Q&2.&4!h1=cjb^9pjN<A6HO>BGKi2`/SHUW[g2gLK9D$og6#u?>%,].T1Bq#[0$co]R,*b^JM#f[R*Fdeh&ldX&M$f-8DcOe86;1s2'cU#Vc)e%i@B4),"n(ZJq\,S2:R6EMh>>G/A-+6j*5o@[\.fdT%GWtrFQ3#0FT)6dQpXuuVoQ`fWLjm5I0bQUTCj%FlP=5u1WfF!:\E;kK'm=\Q+c,:)H)P+J4]SlP)hJDQ&-SI7dC<?tk[lL'=1=!`%QkJ\\78FdfU2;q$9`-UU])O3=E!WIrK-EV'kIG4/-N(`"E6"Z&5],21>=K-'G=&l:W^mT[]<8TF1=eiM"!*orFtenr=;2'@6km&l%D6=st.'etKK,@8d1L?<5.H7aE;](:WUT"h57tdTclR#M4;rHXgC*$"+=@G_3ai9KaV'RQDald<3N^j^8@,muEW(rChQVP9,-YtmX%Q)2:8D-3lsfSD>+alS_+)N7D+Ur6(^&6IcETD32HZ0jQC7;GbdPgZ[g!cnV,&3K'j`=A7L>h`NRXC/Xjb#,&f]XXG-BVR1/iIg-0%<mtJrqa"J(VMJF+dNjr\h=tgq)(,.#_hYR_@nOP]6Egr*,L$`,".cq#I<L?i-b@r34lf/3KQq!S;Ze@'XMQjI`$r-p_'ZPj^E.I=%En58F^[UTuTW"6KI?8=!eq30F"5RTiU]r1nXarKHDBq7N!JqlU33Zgk-r;':%3F5W@KPO12AI6q\0-c4AJUI(YLmfLs2l$&f.tCF%200M-@9k@_eosW%U/,g_S`6p1!:oK7R!@jKfQ:g'I"E8LAV<9W6.6`tZJ''BA<'Ku-hG9NMRef5Jqk,8Qom$JpD:.ed$+]L\Z2ut%`.qX9#RO3T&n,M+h&_a=AS8"%Ei(HNeW/F\Ld+[AgKtiE.csd6>3sn7).krk(b?_71$lcX;ir!6:/joo`RSWCRncA<$otbsW"kn4%<n43,N"]"A$%n#aBABXLI+!TuRE3g8L'4H/.77hN9=7<-LWd/rbD.BNBucCDSQ0i;&X@.@I?&tfCjFr;R!KA\O@GWh6WulBRkn\8%`T5.&BSULYg0@X`7*QEi>^[A%[\]rWjc&%8!r(]Hq\,TY-^d'M`g+rUBK!JW+:DiBoqN\ao&S3qRQF8Ch^9A@Luk,n[t#u4-O<T[%ek#H#LC;&)-mC.)-G`$4j]W*6@Fmt:oS'T?.oo)T0?_ikQV6%*nFj/rlit9,PHJ:phqXk!9>#N3OE(&u]7/51")=6.6C=TR_]5F`%X;5-%')k(?Ws*-sB4[S0S3+*PoJ3W)XZ1F_DrJ!u`G1'CQ?no-[,hC\!OrVpq&ng#m?q_4R^@m7hJ<34#eECTM-9frf'gGl!=:MD%AQ8"^AuL/dP87jupD5Q<fA4q=6$@I=;]tXT<Q`_#N?mmPG!cTG[D(<^fb]%-5^#4pe4/6M?L)\,Po:Vn1,0Zl\7gI7`pOK/._7:B%EF:M:B@q6T0Jb6!`=r!(Do?"NRco^n-prrOmmc4&BaMRNa_@.V4&]!*7]nlS*k1t@1"Td9<XF/nSq8638Ah6\e54<4eW/jJ2C#F.%7]p:-+tCg@W57j2kQuu#B*ljcY*%i*Q*^7&ouI$j+n8a*ikXDuT[hd2#PN>#"+-U!^g<ouYh,A`J\=`s?nZR@f^gs1m!4HjH_00W%.@t!'C2^F<cpZX2NTLhs&R@0QL]aUkT$;8J)9.MO/e4\B_*6gqEu^QkQb8nrR0`!U:BK/>/>&2J[pejA0:"^Lf]!_OhPNHj\)1!;%;XZM`8eTS>8.<*6*P2If;"QZ`Rg>rhk+Q_j%Fqprf4#-oQ?'m2]FILj`ZfeOl>'CgLuMjZdJRP4,:iu%4+_]+;$BOC4lqpemeR1p%Qb2OaRs-rp):.m!m'QsFqK2J5&`$Bt,c\8)m;]?:GAIe"GaQOIL?Rog'3APF\42jO)NoU\(V.8L'#Bgb*5S_lg;t*]2W<Z3W:la#%VMcWS7D.2f#(:!dLgd;PJ\(o_(>GPC0RXXq_DW*Sfj+'Ki:]Kj,@gEq>"nNUSbHqNYQDofkHkRe;1Ai1Wp2(qjG+0ZeG;*+GKfOe%%j.L:Ei9"j2\/>Y$hLb$k0^RS\LS0Y*/>uGH'>";;Y$L5qOS52l>pPnq67MS9T@)1/!c3W^*HQ'N4u)b%q*j\`b`Ds'%lfD9&A;0%EGpaZ;U)W[eMc/;:Go<ONKq$?9:`em8kpZZ:JPnK*A3I,_&88-*J[#A4X"2d^:?JuQZt5:OeAT\iG";T1Hu[e6/"o",/KK$,/JY[%,neFW58q^8Qm9F`^Vt5Q*-3BmO(1Y*/4#Mqgg"^KoXI;@L-qjo^^Q,>JSIRp$(;l:5@,O"B2KdC%VE:#OY2c(5*2&HB@X,GLV#)[%G,ia"lRB5\m1SK'`hVY;>IODP:\-KVl^Ai)IKYT`Op@D`<D0Y`=j;#q@GYTXB3Wgjhn2puW'T)teZNfC6jqPb/sq0n0%bStpa>DD%:[%5>UZp@N8augIfVdQAHrs-jbP\LWpAHb]4_;6Xq.Rt>i(6KeUs6N(q61gD3qLi9Ueqs^:UGp1#+s$&_5=GJkE'@NE3s2#d&@^R%V7u:+3kM>`0O:3[^VI(hik6LS0E/LHnX4XMI\;KV`0$ki#@7P5n15*ZEU\=<1iSfL'R2uEQKhk%7'W8Chc]LF_1\n'R0V/R_VHkW%%pP^pZT=g>4Kdge[gquWQ>S/hRXtBK!E64Egsjt=`@N_]MNX`mhI4V3@([toOMl?c8bLq&NME^/@j'Fg[b@"%164.(>imR81#unZ%SlP>:3-2=IT;+(t^jQkbO=h[)-#9&bg8u"m6AM(V>U6f>.J.o$3G"pdL'(2]ge$(51Ma$B1P5@U_Hm+]J)[fnalnb&iCTf\89+A^%`2+X0\@[SO\5P05aBb"-hJPtT\Z2-^6XBR\jVjS\ncCPq71lLg)@[?]gTBV?lQk-,-*'Y`Q/,J%jm($r%)]?L@9+N@Se/+BhqXk!%9>&=bPf&"BD]<bf:Ui3q#A(O33A/(@bV:6X3t"5T5.Rq:+O?(P^n)31J^)KDb0CQ$<c4NZ]@m@OCOo^U#"/,5JFT#r*uhQrp(471%-LKj3dtS2Q/eI'=J<e&;rdLXqG+PSuQ>LY8Ng;L(L-)+A(7-u'+qV)?F"A$Qn%o?s^Ha9%WL^QD8E'eh>Z?kioM\93;_)Ep"_k8N%#WE"Y\0tg3\>ef(RL(Fu6;`2i:GY\U6<nq[J)W-OU.[5]j0tGRniC5\_:SW\aXOjTkS$TIbJ)K[D405*C=Vl5jf6W!<=$XnQL2jD%RW<s`(8[h\4MR:,lqOaeYQ:?Q?ZC&&7B'Ze2=h$_qBVtW;_rik;"P.BeOT?]IN.-;G*`h/dZL>h-[2^FpenWg;rJ*^(eNtZUU"uH%!k3:HkB=&9BK7]_5.TRhWh&tfeIgGl4.R_42DH$YeeU^`d=e")4B=<LVoIjJAr5FT7EIA5>7W7"E)C'jM=6<NEbNt^Bdu<Mi\MBt%'qT8V5G,Q8=?AcOk.S*ahdmA%B[NFdVae1[Td\n(BO'&L>4_)N3I6X@B(5(BLI1PA#B[_ZZ[6goBl_TN&<s^l*]+i`CB[WhE*".;%TD7gGjr[q'gFlnT9sr$s(2s(N9.Q^mG5_0FrS*YliV(SVc(=oVHPdt#g])L)NA"#Ue+(dq_T0hg?O%m.'M4J>'^?"=OK,r+[Y"m)%en\0"GffMZi!Zp@=mUAJFi!f5Jt@@]'GA]3`d912K&FdW2s*oaY[,`h8"CoQI49#:%A3#_*KosOO[u&9lgRd/iY'8C!r;d]+c$3[%-ZuUGEQ@fK$[CZ[aJV7TP]ZQgPHlPFT,GO^<.lUnYiR"7_:;rK3&]DbJsE/F^QfCTH!0.#BBsQXBB.MK%mEFh8(IJ^M#hh[`k.og%?B]T]e2_loIGC$.&cuUeHi!K-@M!/DMD^(`KROIt+/QiK9SiZ":lZZsRYN-lI>99@_=D3hdMK_Vo*sOgdO6KaECN$s+D>ajlud]M%=iMLHdO[5CUt\(jaHnB&;WQ"PC7uoe(SThUg@6oXLT97VMg2@SIca`\&YqrE=UjksK@fXM<In'Z3bEan[BirmD*I_;lDsr.B[NQ]%<O)oPLWd2ds#PY,PG6#0k:Q_?R/$4-5WMDb5ui*8c*%iL=q[gF>8;O?X4)OqrFt]R'U&Gh]-lG.bC#.B4F_L0+)$Y.>!bH_-7#jL%IK&Z1M&JC\pLJ`j.A=E`GN;/+pqg,i@<1FiT*#Fs.>\28_-u`I6eVC+&c1aIk[);bS"qAq1D'@,)LP3B<Bf5[ZDFFpoC#;(o2ch:%PP[qO8l4.DYH>`2)pqmFkBbp=B(1f1=S[hgo0gRsAtgZQ^001f0Ksu<\ZFdbc5@Wo^&ZGsLqJ`YF=<eM6gCdZrB[t*KZ@]19$e5G%&]R]/#9>dS/&lkoTPaH6(>%jC7JE3gW0Xa1Yn#1RmFW(@'gWpUn/uAIVXGbdl,L_e$L]`@m(uiUH)A3_\<=-3oeFIJHeYrC3Gs5t%o$uQC8!W&G!n.j9qZ/eb)IaR-C7-:=SdZDs^$;=F_K0Y[D551C#-Kd1NEagVe@Ah]kON+2KogNaJ:7<B%4?YnZ_JC^f2!ua%f+q<%Eq&IXSeA4P]<28Tmcm?"_(Bkr`sVsVQ57"g/4FG38eEMYG*mC$V<EC0q!)4'a(6B5:S!.6,[C^ibL,H>eCX4[0g#A8P1si.RXm,)%3<6qPT*P5NDFchBQ&Eb_UN*2%.+.TY:u'krV7>Ec_.A(2ajD_oQ)0jedc;=7r7rp%<m:Q6)?CNZ+b^1n=c2g!Vq:I5NKmt^s3r3:%]g1!IDc]MM^39ALinluY82J(g3'`?_'3?U8AXc;[$Z(TOGbN@Sh,sasC"ks'#FXKkr!IS@=@N[%=GjQ#9q'gN-B5c$Q_N5@a3Z8P%.F)jV&5mmBRr<\eNo/oo<Vj8slA"Z+s-XM;RT*Q^mq>e*$fP!A*[/Kt*/)[`irjf$nm`0'bpPl^j6%Bu[UWMImTLNCnVR2'j=;p.%<c96F`?OPMcbq?UDX]'n?e5K2RfBSnFU-IG<]5:dUE_@Dq'*`B\Eg^3b54/LOhW"O-0<ZdS4]ql[pMVP?8Xa#mO&6#'q@,K\Tuno%XfPcM.;fsT4OZ7C&M@li>`,sAj(MLd\Hm4?nKY0[7Eh*S2,DAK!$Oh:?NCK_luU;BQU11$MI-8?WfbG/>*0!O)C$ghl4r$QOM*V,%+J-p,D1=V#Pqr@Fp@ZCs23G9$'n%)m,?O^.,/7t2VS3bHb<"@W:>3taUkK2VPd_%Z,3fJT[s(K.G7J<:H7iq!dXnU81Mpjbr5AD1%]NQLDnLVH2m:kf7]j>!6gD,3U:RZ-e/s+g$SZ[Dk`t_iNA?-j&V+fQ7R1&/(V7:eG.<QD/pMFLZbH_l,%]%$QV3FE%F,!Tfq[kF3%7FTRO=FdKqrkC*>rqZScnuJ,Up5!F/3-)\Q@pAuggcr:AMu2I_*P;(m=iF5(W)3gXc<]\id6&2%Xf"MLETpld2CF45fg\!=ib@0=%,phW_HeA%j;;*KZbl_kMm9*lk2E/9>W;G$3Yqa1;_sa\&f_8Ct?EN.o*(]=P%PBmLKul+WI8SIiQ(XqWnt\0Xld?tRR'D`L<u1i,%!MLX[B">!cH<c6q^AGcY8ooP_>sk*-#s%8s&ua!B>iuj-?C%U;=Z8<'0/M$fEd]]UrT+pX*2!9/(mKN]V/`dV`okY(`a9nW"3Bp0%3hO-Ln+Gdd0E:n>_or(+l*m;`r:Y(/qXTE.^\acGm+q[<35*cqC8Z9Dn*/T'SLpo??b$f@kRjFMjI%+N30&^b2RRZ_r7u:'Fn>F"%W8h^\<,t3r0)nQ(YJ@nRFe,fS775*)US1GlqaO:S+*V&M4]u%;nH<0b)*CrA4:,07?qL&9JO;$\;#D,:IXN3NIfJk$h>Z^Bmk=\)%j88Scq;L'=\,RYKGAlrbro)W+s"<D?rUf(/T2GTCQPWb?bh_0jPeTQ`QjWnR^Du%OcG&V2eD!Eg`mo7aDk>ZG+lt^30JMF'pQXp]%NfT.Ks+F70cXN+QGsQPm>Jr10nVB\[XQXm9kI"UQdacs@F)D=%#7BmEDm"Rnl#/CTpacViWTC9IT",8dEDb*ZO"38_<8<S>P&\]e%9t&pPadU8rU3Y\/:#nc2iZ@cG2]_m33i6P$Y+*R=pQ=[LViR!j<cP[pN0/B"nVJ#QT@4uQ@lO_,E%?_=9/HM(C'J%U&26'rO??UZ%aK#1_$b&sF`Ba<2Mri9!0mjPaiU?XIIkMUBoWm0pmLk3k'.BFW0:+Sgb"5!HNj(+T!pPnc<Bd1[UAh=8@98?(*o^pe&6Bh7k:Skm%?fgKO5KBN5a-1[OD)4P1p;rW#T@6]jYAs%Fcd[amkPpRcXooSC\]DqT,--BTX:d.k8i9bU=K*Y6P:Y9KVoA-,3JYAh$\!B+QKMu:%bTYl+G8r1d6#l4KN7Jd_G#]#1ZFK^o/Ca]7$iT%f$BGW6#ro>4&Mgm:`N^R92E%<i2LLj_>U0HAps*j/3(C`@5d4uC7WE7#=,kHQ%`[4P5Gu/Sk)R^Ol#nA]-87OH5'8B'+fSnhB&54"3;&l&nPfAB^A'p[lGXuf;)<4lRAeYou0[JC1in-*;F#b?KT#p/g-\mWYm%M.E%7,Mdp<#pPBGc!co4XjEm+W-i3+Da0h!6h#g"9ThiJ<A+9TcqCq6H7JJ<1>*UnlRG"G^LKA4FNCQUEK,0*!FnX$6krC,t!n-8;sH?%OF0%)gn"Pgal7pbj$5RJ*#=EnK>E?fp7[9s2(us<"ls&r0K<<2?l\"GE"N+2(_[;f(CuVF+p+G1nURlaGoi.HdS(]dS-P*^R#S";%Er<4:Se<A1ISi"pC2sHc?^/ZECZH&gf14lK'iI$$3q>;^a77s97XNutI9RS]C_mgFV<Q.tq)4-p@C+q7(<j(oIY+dO>8N4%hn4@,%gL#@(nYcE\rV`Y_5Q($=j.@Dk^\I3Bp2(oOr;;fKnbXEB]D_)sYJ.[,s7l<2%mR`h=b$F4pVh("rb1qjn)(h8IeMmTrV#p=mlu3t%l1WY_5Q:0>O1/JGpq:X#^VofqLS'%ln0X*l1&jV\?[i%2ms\/cIu3W`p]"INro*AhSa]_Zkho7s@tWmUR1mn*GDD^.U:Sde)>g?3%ns9No41il7W`qMKIrTZ%]K\`U\!bgnhqa7;WeJ-X5;Cg=T&TM`>7Z'&PZms/<T(F$I(n_BZ(>fZmDn/=H`hu6pJf22m0"sgGPR>.%+753VJb]/IM3E$fH8pBWi7iU#KXs[/lF_&$7XIDg.7:lIb=(*k[\o901[^j?D_F4PmoeCD<6%B%0%q`EA#oL2'_PC^fL;o-/m=-q%BM[5$X\Mj@1Q$SQhu/C-cQBSd`;:VrH;.ZqpP1X#\SHb>G-+OWj3MpSrY(L8P>/0o?.b@S_+!!rqssJB2J_T)GhB4Lp2KTtA'_9J%(>Y$X%NS[_CM(+N)tP]RqtN3-MVk'd%`Q.*o25__O.W/mPMM\Bh)J3=1]DQ+:GVo<fJd0NI.?=Mq7$D!_meO9qt']GJ,f6r?[VB.%hgP7uf,rmus8)`TbBH1bq`jOfmsb&jSDrH+rpf(Ch8f7S5,>p-rV3u8Il]$>.U`;9MgtYkIsUq*_M5E5~>%AI9_PrivateDataEnd