%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Electron_Energy_Cutoff.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: steven schowalter
%%CreationDate: 3/8/09
%%BoundingBox: 0 0 300 196
%%HiResBoundingBox: 0 0 300 195.9063
%%CropBox: 0 0 300 195.9063
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 84 8%%BeginData: 10282 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0DFFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FF%A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FF%A8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8%A8FFFD07A8FFFD05A8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FD0EFFA8FF%A8FFFFFFA8FD09FFA8FD1DFFA8FD0DFFA8FD15FFA8FFA8A8A8FFA87D7DFF%A8A8A8FFA8FD07FFA8FD08FFA8FD0DFFA8FD05FF7E53FD4AFFA8A8A8FFA8%FFA8FF7DFFA8FFA8FFA8FD11FFA8FD08FFA8FFA8FFA8FFA8FD04FFCB7EFD%06FFA8FD29FF7DA8FD19FFFD07A87DFD07A8FD18FF5252527D5252A8FD06%FFA9FD06FF7D7D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA85252FD18FFA8A8A8FFA8FFA8FF%7DFFA8FFA8FFA8FD11FFA8FD06FFA87D52FD057DA8FD05FFA9FD06FFA8A8%FFA8FFA8A8A8FFA8FFA8FFA8A8A8FFA8A8A8FFA8FFA8FFA8A8A8FFA8A8A8%FFA8A8A8FFA8A8A8FFA852A8FD19FFA8A8A8FFFD07A8FFA8A8A8FD0FFFA8%A8FD07FF527DFD0452A8FD05FFA9A9FD10FFA8FD1FFFA8FD19FFA8A8A8FF%A8FFA8A87DFFA8FFA8FFA8A8FD10FFA8FD08FFA8FFA8FFA8FFA8FD05FFA3%FD0FFF7D5252A87DA852A87D7DA8A8527D7D527DA87D527D7D7DFD24FFFD%08A87DFD07A8FD10FFA8FD0DFFA8FFFFCB7EFFFFA9FD0FFFA8A8FF275227%A87D522752A8A8275227A8527D5227277DFD24FFA8FFA8FFA8FFA8A87DFF%A8FFA8FFA8A8FD10FFA8FD0EFFA8FF7E54FFFFA3FD0FFF7D52527D527D52%52277D27FF7DFD04527D5252277D7DFD25FFA8FFA8A8A8FFA8A8A8FFFD05%A8FD10FFA8FD0DFFA8FFFFFFA9537ECBFD10FFA8FD07FFA87DFD0AFFA8FD%25FFA8A8A8FFA8FFA8FF7DFFA8FFA8FFA8A8FD10FFA8FFFFA8FD0AFFA8A8%FFA9A97EA9A9FD19FFA8FD31FFFD07A87DFD07A8FD12FF52527DFD09FFA8%FFFFFFA9FFA9A9FD4AFFA8A8A8FFA8FFA8FF7DFFA8FFA8FFA8FD11FFA8FF%7D527DFD09FFA8A8FFA9A37EFFA9FD4BFFA8A8A8FFA8A8A87DA8A8A8FFA8%A8A8FD10FFA8A8527D7DFD09FFA8FFFFFF2954FFA9FD4AFFA8FFA8FFA8FF%A8A87DFFA8FFA8FFA8A8FD10FFA8A87D7DFD0BFFA8FFA97F7EA9A3FD4AFF%FD08A87DFD07A8FD10FFA8FF7D277DFD09FFA8FFFFFFA97F23A9FD4AFFA8%FFA8FFA8FFA8A87DFFA8FFA8FFA8FD11FFA8FF7DF87DFD0AFFA8FFA9A97F%7F78FFA9A9FD47FFA8A8FFA8A8A8FFA87DA8FFFD05A8FD10FFA8FF7D7D7D%FD09FFA8FFFFFF7FA9A94E7EA253FD47FFA8A8A8FFA8FFA8A87DFFA8FFA8%FFA8FD11FFA8A87D527DFFFFFFA87D7D7DA852A8A8FFA9A37FA9547EA2A9%FD48FFFD07A87DFD07A8FD18FF277D7D7D527D7DFFFFFF7FA9A37F29A9A9%FD47FFA8A8A8FFA8FFA8FF7DFFA8FFA8FFA8FD11FFA8FF7D52A8FFFFA8FD%05527D7DA8FFFFA37FA97FA9A9A9FD48FFA8A8A8FFFD07A8FFA8A8A8FD0F%FFA8A8FF52277DFFFFFF7DA8FD047DA8FFFFFF7FA97FA3A9FFA9FD47FFA8%A8A8FFA8FFA8A87DFFA8FFA8FFA8A8FD10FFA8FF7D27A8FD0AFFA8FFA9A3%7FA379A9A9A9FD47FFFD08A87DFD07A8FD10FFA8FF7D52A8FD09FFA8FFFF%FF7FA97FA3A9FFA9FD47FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8A8FD10FF%A8FF7D27A8FD0AFFA8FFA9A97FA37FA9A9A9FD47FFA8A8FFA8A8A8FFA87D%A8FFFD05A8FD10FFA8FF7D7DA8FD09FFA8FFFFFF7FA9FD047FA9FD47FFA8%A8A8FFA8FFA8FF7DFFA8FFA8FFA8FD11FFA8FF7D52FD0AFFA8A8FFA9A37F%A97F7E02A9FD47FFFD08A87DFD07A8FD12FF27527DFD09FFA8FFFFFF7FA9%A3A37FA9A9FD47FFA8A8A8FFA8FFA8FF7DFFA8FFA8FFA8FD11FFA8A85252%A8FD09FFA8A8FFCBA37FA97FA37FA9FD48FFA8A8A8FFA8A8A87DA8A8A8FF%A8A8A8FD10FFA8FF7D7D7DFD09FFA8FFFFFF7FA97FA37FA3A9FD23FFA8FD%23FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8A8FD10FFA8FF7DF8A8FD0AFFA8%FFA9A37FA37FA97FA9FD22FFA85227272752A8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FD07FFA8FD06FFFD10A8FD10FFA8FF52277DFD09FFA8FFFFFF%7FA97FA3A3A3A9FD1FFF7DA8A87DA8A87D7D7DFFFFFF52FFFF7D7D7D52FF%A8FFA87D7D52A8FF7D7D52A87DA8FD06FFA8FFA8FFA8FFA8A87DFFA8FFA8%FFA8A8FD10FFA8A87D27A8FD0AFFA8FFA9A97FA37FA97FA9FD1FFFA8FD05%7DFFFFFF7D7DFF7DA8FF7D7D527D5252FFFF527D7DA87DFD04527DA8FD07%FFA8FFA8A8A8FFA8A8A8FFFD05A8FD10FFA8A8527D7DFD09FFA8FFFFFF7F%A97F7F7FA953A8FD1FFF5252A8F87DFFFFFF7D52FF7DA8A8A87D7D525227%A8A8A87D52A8A8FD047D52FD07FFA8A8A8FFA8FFA8A87DFFA8FFA8FFA8A8%FD10FFA87D52527DFD04FF7D7D7DA852A8A8FFA9A37FA97FA37F54285301%A8FD1CFF7DA8FF7DA8FD07FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFFFFF%A8FD09FFFD07A87DFD07A8FD11FFA852527DFFFFFF7D527D7D527D7DFFFF%FF7FA9A3A37FA97FA3A27FA9FD43FFA8A8A8FFA8FFA8FF7DFFA8FFA8FFA8%FD11FFA8A8FD05FFA852277D52527D7DA8FFFFA37FA97FA37FA97E7E7FFD%45FFA8A8A8FFA8A8A87DA8A8A8FFA8A8A8FD0FFFA8A8A82752A8FFFFFFA8%A8FD047DA8FFFFFF7FA97FA37FA97F7F29A3FD44FFA8FFA8FFA8FFA8A87D%FFA8FFA8FFA8A8FD10FFA8FF7D27A8FD0AFFA8FFA9A37FA37FA9FD057FFD%44FFFD08A87DFD07A8FD10FFA8FF7D52A8FD09FFA8FFFFFF7FA97FA3A3A9%7FA97FA9FD44FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8FD11FFA8FD0EFFA8%FFA9A97FA37FA97FA37F7F7FFD44FFA8A8FFA8A8A8FFA87DA8FFFD05A8FD%10FFA8FF7DA8A8FD09FFA8FFFFFF7FA97F7F7FA97FA97FA9FD44FFA8A8A8%FFA8FFA8A87DFFA8FFA8FFA8FD11FFA8FF7DF8A8FD09FFA8A8FFA9A37FA9%7FA37FA37F7F7FFD45FFFD0FA8FD12FF52527DFD09FFA8FFFFFF7FA9A3A3%7FA97FA97FA97EFD43FFA8A8A8FFA8FFA8FF7DFFA8FFA8FFA8FD11FFA8FF%7DF8A8FD09FFA8A8FFFFA37FA97FA37FA37F7F78297EA9A8FD41FFA8A8A8%FFFD07A8FFA8A8A8FD10FFA8FF52527DFD09FFA8FFA97E7FA97FA37FA97F%A97FA9545329A9FD40FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8A8FD10FFA8%A87D27A8FD0CFF297F7FA37FA9FD067F7EA9A9FD40FFFD08A87DFD07A8FD%10FFA8FF7D7DA8FD09FFA8FFFFA97FA97FA3A3A97FA97FA9A35454FD41FF%A8FFA8FFA8FFA8A87DFFA8FFA8FFA8A8FD10FFA8FF7D52A8FD0AFFA8FF7F%A37FA37FA97FA37F7F7FA9547F7EFD40FFA8A8FFA8A8A8FFA87DA8FFFD05%A8FD10FFA8FF5252A8FD05FFA8FFFFFFA8FFFFA97FA97F7F7FA97FA97FA9%7FA97E4DFD40FFA8A8A8FFA8FFA8FF7DFFA8FFA8FFA8FD11FFA8FF7D277D%FFFFA87D5252527D52A8FFFF7F7F7FA97FA37FA37F7F7FA37F7F54A87EFD%3FFFFD07A87DFD07A8FD12FFA87DA8FFFFFFA87D7DA852A87DFFFFA97FA9%A3A37FA97FA97FA97FA97F795354A8FD3DFFA8A8A8FFA8FFA8FF7DFFA8FF%A8FFA8FD11FFA8A87D52A8FFFFA852527D527D52A8A8FF7F7F7FA97FA37F%A37F7F7FA97F7F7F7E54FD3FFFA8A8A8FFFD07A8FFA8A8A8FD10FFA8FF52%52A8FFFFFFA8FD05FFA8FFFFA97FA97FA37FA97FA97FA97FA97FA9547EFF%547EFD3BFFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8A8FD10FFA87D5252A8FD%0CFF7FA37FA37FA9FD057FA37F7F7FA97E2954A9FFFFA2FD38FFFD10A8FD%10FFA8FD0DFFA8FFFFA97FA97FA3A3A97FA97FA97FA97FA97FA9294E4DFF%FF4DA8FD37FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8A8FD10FFA8FD0EFFA8%FF7FA37FA37FA97FA37F7F7FA37F7F7FA37F7F54787EA8A9FFA8A8FD36FF%A8FFA8A8A8FFA87DA8FFFD05A8FD10FFA8FD0DFFA8FFFFA97FA97F7F7FA9%7FA97FA97FA97FA97FA97FA97E292278A8A929FD35FFA8A8A8FFA8FFA8A8%7DFFA8FFA8FFA8A8FD10FFA8FD0EFFA8FF7F7F7FA97FA37FA37F7F7FA37F%7F7FA37FA37F7F547F4D54A9A9A8A8A8FD33FFFD07A87DFD07A8FD1EFFA8%FFFFA97FA9A3A37FA97FA97FA97FA97FA97FA97FA9A3A97FA97E5329544D%A9FD32FFA8A8A8FFA8FFA8FF7DFFA8FFA8FFA8FD11FFA8FD0DFFA8A8FF7F%7F7FA97FA37FA37F7F7FA97F7F7FA37FA37FA97FA37F54297F7EA9784DA8%FD31FFA8A8A8FFA8A8A87DA8A8A8FFA8A8A8FD10FFA8FD0DFFA8FFFFA97F%A97FA37FA97FA97FA97FA97FA97FA97FA97FA37FA97FA3A954294D294DA2%FD2FFFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8A8FD10FFA8FD10FF7FA37FA3%7FA9FD057FA3FD057FA37FA37FA37FA37FA97E7F547F292353A853537D7E%7EFD28FFFD08A87DFD07A8FD10FFA8FD0DFFA8FFFFA97FA97FA3A3A97FA9%7FA97FA97FA97FA97FA97FA37FA97FA3A3A97FA97FA95429234D29292329%A8A8297E53CBFD22FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8FD11FFA8FD0E%FFA8FF7FA37FA37FA97FA37F7F7FA37F7F7FA37FA97FA37FA97FA37FA97F%A37F7F7FA9787F7F7F7E7F532322542229A27E4DA8A8537DFD06FFA9FD15%FFA8A8FFA8A8A8FFA8A8A8FFFD05A8FD10FFA8FD0BFFA8FFA8FFFFA97FA9%7F7F7FA97FA97FA97FA97FA97FA97FA97F7F7FA97F7F7FA97FA97FA97FA9%7FA97FA97FA9547F7FA97F29294E2329292953544D4D5353297EA2A877A9%A8FD04FFA8A8FFA8FD07FFCFCFA8FFA8FFA8FF7DA8A8FFCFFFA8FD11FFA8%FD0AFFA8527DFFA8FF7F7F7FA379FD067FA3FD077FA37F7F7FA37FA37FA3%7F7F7FA3FD077FA97FA37FA354547F7F547F5429294D4D29294D01290123%01292229285401292223537E537E537E7E7E5353537E537E53530178537E%537EA8A853A87EA8A8A9A8A9A8CBA8A9A8A9A9FD0BFFFD04A8FFFFCBFD08%A9A3A9A9A9A3FD0FA9A3FD0EA9CBFD05A9CBA9A9A9CBFD04A97FA9A3A97E%7F787E297E787E7E4D2953294D2929294DFD042923292854FD0429235329%4D23FD04294DFD062923A9A8FD0AFFA8527DFFA8FFA8FD0DFFA8FD1DFFA8%FD0DFFA8FD13FFA9A9FD07A87DFD06A87DCBFFA9A8FFA8A97EA9A8A87EFF%A8A9FD0DFFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8%FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8%FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFFD%08A87DA8A8CFA7FD04A8FFCFFFA8FFFFA8A8FFAECFA8FFA8A8A8FD10FFA8%FFFFFFA8FFA8FFA8FFA8FD07FFA8FFA8FFA8FFA8FFA8FD05FFA8FFA8FFA8%FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FD07FFA8FFA8FFA8FFA8FFA8%FD05FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FD05%FFA8FFA8FFA8FD0FFF7D7DFF52A8FD0AFF52FFA87DFD0AFF7D7DFFFF7DFD%0AFF7D7DFF7DA8FD0AFF52FFA87DFD0AFFA8A8FF7D7DFD0AFFA8A8FF7DA8%FD0AFF7DFFFFA8FD14FFA852FD047DFD09FF527D7DFF52A8FD08FFA87D52%FF7D52FD09FFA8527D7D277DFD09FF527D7D7D27A8FD09FF7D52FF527DA8%FD09FF52A8A87D52FD09FFA852A8FF27FD14FFA87D7D7D527DFD09FF7D52%7DA852A8FD09FF7D7D7D5252FD09FFA87D7D7D527DFD09FF7D527D7D527D%FD09FFA87DA87D7DFD0AFFA87DFF52A8FD0AFF7DFF5227A8FD14FF52A87D%7D7DFD09FFA87D7D7D52A8FD09FF7D7DA87DA8FD0AFF52A8A87D7DFD09FF%A87D7DA87DFD0BFFA8A8527DFD0AFFA8A87D527DFD0AFFA8A8A87DFDFCFF%FDC3FFA87D7DFFFFA8A8FFA8FFFFA8FFA8A8FFA8FFFD05A8FFA8FFA8A87D%FF7DFD61FFA8525252A852527D7D52FF527D527D277D5252275227A8A87D%5252527D7D527DFD60FF7D527D7D525252272752A87D7D7D2752277D5252%7D52A87D527D527D5252A87DFD61FFA8FFA87D7DA87DA87DFFA8FFA8A87D%A87D27A8FF7DFFA87DFD04A87DFF7DFD62FFA8FD0EFFA87DFD05FFA8FD05%FFA8FD28FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-03-08T15:45:11-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-03-08T15:45:11-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-03-08T15:45:11-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>168</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAqAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqlslpFcaxL68&#xA;cUsSW8XwSRhyCXl3Uk0HTfbFVC+0a0ttDuEtdNivbqG1cQQUSNppEjPFPUI+EuRTl2yUQCQDsFQ/&#xA;lmK31ry3p2o6jo8Gn3V3FHcSWihH4GvNfjAFagA0+g5PPjEJmN3RpUwvtP0C3s5bm7t7eG1tlM80&#xA;zIiqiRfGWZqbKOO/tlSr5dE0p3ib6rCvpOXoI0+KqMtDt/lVxVcdF0gyLJ9Th5KCo/drSjEE7U/y&#xA;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&#xA;V2KuxV//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:CC5E6A708A0DDE11949D893042A0D4D2</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:CD5E6A708A0DDE11949D893042A0D4D2</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.2x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -195.906 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 195.906 li
300 195.906 li
300 0 li
cp
clp
[1 0 0 1 0 0 ]ct
259 165.001 mo
224.334 165.001 li
224.334 1.49902 li
259 1.49902 li
259 165.001 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0.117647 cmyk
f
0.5 lw
2 lc
0 lj
3.239 ml
[] 0 dsh
true sadj
294.563 160.875 mo
294.563 160.5 li
291.125 160.875 mo
291.125 160.5 li
289.375 160.875 mo
289.375 160.5 li
287.688 160.875 mo
287.688 160.688 li
285.938 160.875 mo
285.938 160.688 li
284.25 160.875 mo
284.25 160.688 li
282.563 160.875 mo
282.563 160.688 li
280.813 160.875 mo
280.813 160.313 li
277.375 160.875 mo
277.375 160.5 li
275.688 160.875 mo
275.688 160.5 li
272.25 160.875 mo
272.25 160.313 li
270.5 160.875 mo
270.5 160.5 li
268.813 160.875 mo
268.813 159.938 li
267.063 160.875 mo
267.063 160.688 li
265.375 160.875 mo
265.375 160.313 li
263.625 160.875 mo
263.625 159.375 li
261.938 160.875 mo
261.938 159.938 li
256.75 160.875 mo
256.75 160.5 li
255.063 160.875 mo
255.063 160.125 li
253.313 160.875 mo
253.313 159.75 li
251.625 160.875 mo
251.625 160.313 li
249.938 160.875 mo
249.938 159.75 li
248.188 160.875 mo
248.188 160.5 li
246.5 160.875 mo
246.5 159.75 li
244.75 160.875 mo
244.75 158.063 li
243.063 160.875 mo
243.063 160.125 li
241.313 160.875 mo
241.313 159.938 li
239.625 160.875 mo
239.625 159.938 li
237.875 160.875 mo
237.875 160.5 li
236.188 160.875 mo
236.188 159.938 li
234.438 160.875 mo
234.438 159.938 li
232.75 160.875 mo
232.75 160.5 li
231 160.875 mo
231 160.125 li
229.313 160.875 mo
229.313 159.75 li
227.563 160.875 mo
227.563 159.188 li
225.875 160.875 mo
225.875 160.313 li
224.125 160.875 mo
224.125 159.563 li
222.438 160.875 mo
222.438 160.313 li
220.688 160.875 mo
220.688 160.125 li
219 160.875 mo
219 159.75 li
217.313 160.875 mo
217.313 159.563 li
215.563 160.875 mo
215.563 159.75 li
213.875 160.875 mo
213.875 159.75 li
212.125 160.875 mo
212.125 159.563 li
210.438 160.875 mo
210.438 159.938 li
208.688 160.875 mo
208.688 160.125 li
207 160.875 mo
207 159.375 li
205.25 160.875 mo
205.25 157.875 li
203.563 160.875 mo
203.563 158.438 li
201.813 160.875 mo
201.813 159.375 li
200.125 160.875 mo
200.125 158.438 li
198.375 160.875 mo
198.375 157.688 li
196.688 160.875 mo
196.688 159.75 li
194.938 160.875 mo
194.938 159.375 li
193.25 160.875 mo
193.25 158.813 li
191.5 160.875 mo
191.5 159 li
189.813 160.875 mo
189.813 158.438 li
188.063 160.875 mo
188.063 158.438 li
186.375 160.875 mo
186.375 157.875 li
184.688 160.875 mo
184.688 158.625 li
182.938 160.875 mo
182.938 157.875 li
181.25 160.875 mo
181.25 157.313 li
179.5 160.875 mo
179.5 157.875 li
177.813 160.875 mo
177.813 158.438 li
176.063 160.875 mo
176.063 157.313 li
174.375 160.875 mo
174.375 158.063 li
172.625 160.875 mo
172.625 155.688 li
170.938 160.875 mo
170.938 157.5 li
169.188 160.875 mo
169.188 156.625 li
167.5 160.875 mo
167.5 157.5 li
165.75 160.875 mo
165.75 156.25 li
164.063 160.875 mo
164.063 156.625 li
162.313 160.875 mo
162.313 157.188 li
160.625 160.875 mo
160.625 156.813 li
158.875 160.875 mo
158.875 157.188 li
157.188 160.875 mo
157.188 156.813 li
155.438 160.875 mo
155.438 155.125 li
153.75 160.875 mo
153.75 154 li
152.063 160.875 mo
152.063 156.438 li
150.313 160.875 mo
150.313 156.063 li
148.625 160.875 mo
148.625 155.313 li
146.875 160.875 mo
146.875 154.938 li
145.188 160.875 mo
145.188 154.188 li
143.438 160.875 mo
143.438 156.813 li
141.75 160.875 mo
141.75 156.063 li
140 160.875 mo
140 152.188 li
138.313 160.875 mo
138.313 152.938 li
136.563 160.875 mo
136.563 153.313 li
134.875 160.875 mo
134.875 151.625 li
133.125 160.875 mo
133.125 152.563 li
131.438 160.875 mo
131.438 153.813 li
129.688 160.875 mo
129.688 154 li
128 160.875 mo
128 152 li
126.25 160.875 mo
126.25 150 li
124.563 160.875 mo
124.563 151.25 li
122.813 160.875 mo
122.813 150.313 li
121.125 160.875 mo
121.125 150.5 li
119.438 160.875 mo
119.438 149.625 li
117.688 160.875 mo
117.688 150.688 li
116 160.875 mo
116 150.5 li
114.25 160.875 mo
114.25 151.438 li
112.563 160.875 mo
112.563 149.813 li
110.813 160.875 mo
110.813 148.313 li
109.125 160.875 mo
109.125 147.75 li
107.375 160.875 mo
107.375 145.563 li
105.688 160.875 mo
105.688 144.813 li
103.938 160.875 mo
103.938 146.813 li
102.25 160.875 mo
102.25 141.313 li
100.5 160.875 mo
100.5 146.313 li
98.8125 160.875 mo
98.8125 141.875 li
97.0625 160.875 mo
97.0625 136.688 li
95.375 160.875 mo
95.375 142.063 li
93.625 160.875 mo
93.625 143.688 li
91.9375 160.875 mo
91.9375 138.75 li
90.25 160.875 mo
90.25 132.125 li
88.5 160.875 mo
88.5 137.438 li
86.8125 160.875 mo
86.8125 136.313 li
85.0625 160.875 mo
85.0625 137.625 li
83.375 160.875 mo
83.375 133.188 li
81.625 160.875 mo
81.625 128.25 li
79.9375 160.875 mo
79.9375 132.625 li
78.1875 160.875 mo
78.1875 130.25 li
76.5 160.875 mo
76.5 122.5 li
74.75 160.875 mo
74.75 126.563 li
73.0625 160.875 mo
73.0625 122.5 li
71.3125 160.875 mo
71.3125 118.063 li
69.625 160.875 mo
69.625 108.688 li
67.875 160.875 mo
67.875 114.25 li
66.1875 160.875 mo
66.1875 108.875 li
64.4375 160.875 mo
64.4375 105.938 li
62.75 160.875 mo
62.75 83.4375 li
61 160.875 mo
61 83.4375 li
59.3125 160.875 mo
59.3125 89.5 li
57.625 160.875 mo
57.625 83.625 li
55.875 160.875 mo
55.875 81.625 li
54.1875 160.875 mo
54.1875 43.25 li
52.4375 160.875 mo
52.4375 63.9375 li
50.75 160.875 mo
50.75 47.5 li
49 160.875 mo
49 43.0625 li
47.3125 160.875 mo
47.3125 5.875 li
45.5625 160.875 mo
45.5625 38.6875 li
43.875 160.875 mo
43.875 24.875 li
42.125 160.875 mo
42.125 33.875 li
40.4375 160.875 mo
40.4375 21.375 li
38.6875 160.875 mo
38.6875 110.375 li
0.882353 0.768627 0 0 cmyk
@
40.1875 110.375 mo
40.1875 110 40 109.625 39.75 109.313 cv
39.4375 109.063 39.0625 108.875 38.6875 108.875 cv
38.3125 108.875 37.9375 109.063 37.625 109.313 cv
37.375 109.625 37.1875 110 37.1875 110.375 cv
37.1875 110.75 37.375 111.125 37.625 111.438 cv
37.9375 111.688 38.3125 111.875 38.6875 111.875 cv
39.0625 111.875 39.4375 111.688 39.75 111.438 cv
40 111.125 40.1875 110.75 40.1875 110.375 cv
40.1875 110.375 li
cp
0.905882 0.901961 0.00392157 0 cmyk
f
41.9375 21.375 mo
41.9375 21 41.75 20.625 41.5 20.3125 cv
41.1875 20.0625 40.8125 19.875 40.4375 19.875 cv
40.0625 19.875 39.6875 20.0625 39.375 20.3125 cv
39.125 20.625 38.9375 21 38.9375 21.375 cv
38.9375 21.75 39.125 22.125 39.375 22.4375 cv
39.6875 22.6875 40.0625 22.875 40.4375 22.875 cv
40.8125 22.875 41.1875 22.6875 41.5 22.4375 cv
41.75 22.125 41.9375 21.75 41.9375 21.375 cv
41.9375 21.375 li
cp
f
43.625 33.875 mo
43.625 33.5 43.4375 33.125 43.1875 32.8125 cv
42.875 32.5625 42.5 32.375 42.125 32.375 cv
41.75 32.375 41.375 32.5625 41.0625 32.8125 cv
40.8125 33.125 40.625 33.5 40.625 33.875 cv
40.625 34.25 40.8125 34.625 41.0625 34.9375 cv
41.375 35.1875 41.75 35.375 42.125 35.375 cv
42.5 35.375 42.875 35.1875 43.1875 34.9375 cv
43.4375 34.625 43.625 34.25 43.625 33.875 cv
43.625 33.875 li
cp
f
45.375 24.875 mo
45.375 24.5 45.1875 24.125 44.9375 23.8125 cv
44.625 23.5625 44.25 23.375 43.875 23.375 cv
43.5 23.375 43.125 23.5625 42.8125 23.8125 cv
42.5625 24.125 42.375 24.5 42.375 24.875 cv
42.375 25.25 42.5625 25.625 42.8125 25.9375 cv
43.125 26.1875 43.5 26.375 43.875 26.375 cv
44.25 26.375 44.625 26.1875 44.9375 25.9375 cv
45.1875 25.625 45.375 25.25 45.375 24.875 cv
45.375 24.875 li
cp
f
47.0625 38.6875 mo
47.0625 38.3125 46.875 37.9375 46.625 37.625 cv
46.3125 37.375 45.9375 37.1875 45.5625 37.1875 cv
45.1875 37.1875 44.8125 37.375 44.5 37.625 cv
44.25 37.9375 44.0625 38.3125 44.0625 38.6875 cv
44.0625 39.0625 44.25 39.4375 44.5 39.75 cv
44.8125 40 45.1875 40.1875 45.5625 40.1875 cv
45.9375 40.1875 46.3125 40 46.625 39.75 cv
46.875 39.4375 47.0625 39.0625 47.0625 38.6875 cv
47.0625 38.6875 li
cp
f
48.8125 5.875 mo
48.8125 5.5 48.625 5.125 48.375 4.8125 cv
48.0625 4.5625 47.6875 4.375 47.3125 4.375 cv
46.9375 4.375 46.5625 4.5625 46.25 4.8125 cv
46 5.125 45.8125 5.5 45.8125 5.875 cv
45.8125 6.25 46 6.625 46.25 6.9375 cv
46.5625 7.1875 46.9375 7.375 47.3125 7.375 cv
47.6875 7.375 48.0625 7.1875 48.375 6.9375 cv
48.625 6.625 48.8125 6.25 48.8125 5.875 cv
48.8125 5.875 li
cp
f
50.5 43.0625 mo
50.5 42.6875 50.3125 42.3125 50.0625 42 cv
49.75 41.75 49.375 41.5625 49 41.5625 cv
48.625 41.5625 48.25 41.75 47.9375 42 cv
47.6875 42.3125 47.5 42.6875 47.5 43.0625 cv
47.5 43.4375 47.6875 43.8125 47.9375 44.125 cv
48.25 44.375 48.625 44.5625 49 44.5625 cv
49.375 44.5625 49.75 44.375 50.0625 44.125 cv
50.3125 43.8125 50.5 43.4375 50.5 43.0625 cv
50.5 43.0625 li
cp
f
52.25 47.5 mo
52.25 47.125 52.0625 46.75 51.8125 46.4375 cv
51.5 46.1875 51.125 46 50.75 46 cv
50.375 46 50 46.1875 49.6875 46.4375 cv
49.4375 46.75 49.25 47.125 49.25 47.5 cv
49.25 47.875 49.4375 48.25 49.6875 48.5625 cv
50 48.8125 50.375 49 50.75 49 cv
51.125 49 51.5 48.8125 51.8125 48.5625 cv
52.0625 48.25 52.25 47.875 52.25 47.5 cv
52.25 47.5 li
cp
f
53.9375 63.9375 mo
53.9375 63.5625 53.75 63.1875 53.5 62.875 cv
53.1875 62.625 52.8125 62.4375 52.4375 62.4375 cv
52.0625 62.4375 51.6875 62.625 51.375 62.875 cv
51.125 63.1875 50.9375 63.5625 50.9375 63.9375 cv
50.9375 64.3125 51.125 64.6875 51.375 65 cv
51.6875 65.25 52.0625 65.4375 52.4375 65.4375 cv
52.8125 65.4375 53.1875 65.25 53.5 65 cv
53.75 64.6875 53.9375 64.3125 53.9375 63.9375 cv
53.9375 63.9375 li
cp
f
55.6875 43.25 mo
55.6875 42.875 55.5 42.5 55.25 42.1875 cv
54.9375 41.9375 54.5625 41.75 54.1875 41.75 cv
53.8125 41.75 53.4375 41.9375 53.125 42.1875 cv
52.875 42.5 52.6875 42.875 52.6875 43.25 cv
52.6875 43.625 52.875 44 53.125 44.3125 cv
53.4375 44.5625 53.8125 44.75 54.1875 44.75 cv
54.5625 44.75 54.9375 44.5625 55.25 44.3125 cv
55.5 44 55.6875 43.625 55.6875 43.25 cv
55.6875 43.25 li
cp
f
57.375 81.625 mo
57.375 81.25 57.1875 80.875 56.9375 80.5625 cv
56.625 80.3125 56.25 80.125 55.875 80.125 cv
55.5 80.125 55.125 80.3125 54.8125 80.5625 cv
54.5625 80.875 54.375 81.25 54.375 81.625 cv
54.375 82 54.5625 82.375 54.8125 82.6875 cv
55.125 82.9375 55.5 83.125 55.875 83.125 cv
56.25 83.125 56.625 82.9375 56.9375 82.6875 cv
57.1875 82.375 57.375 82 57.375 81.625 cv
57.375 81.625 li
cp
f
59.125 83.625 mo
59.125 83.25 58.9375 82.875 58.6875 82.5625 cv
58.375 82.3125 58 82.125 57.625 82.125 cv
57.25 82.125 56.875 82.3125 56.5625 82.5625 cv
56.3125 82.875 56.125 83.25 56.125 83.625 cv
56.125 84 56.3125 84.375 56.5625 84.6875 cv
56.875 84.9375 57.25 85.125 57.625 85.125 cv
58 85.125 58.375 84.9375 58.6875 84.6875 cv
58.9375 84.375 59.125 84 59.125 83.625 cv
59.125 83.625 li
cp
f
60.8125 89.5 mo
60.8125 89.125 60.625 88.75 60.375 88.4375 cv
60.0625 88.1875 59.6875 88 59.3125 88 cv
58.9375 88 58.5625 88.1875 58.25 88.4375 cv
58 88.75 57.8125 89.125 57.8125 89.5 cv
57.8125 89.875 58 90.25 58.25 90.5625 cv
58.5625 90.8125 58.9375 91 59.3125 91 cv
59.6875 91 60.0625 90.8125 60.375 90.5625 cv
60.625 90.25 60.8125 89.875 60.8125 89.5 cv
60.8125 89.5 li
cp
f
62.5 83.4375 mo
62.5 83.0625 62.3125 82.6875 62.0625 82.375 cv
61.75 82.125 61.375 81.9375 61 81.9375 cv
60.625 81.9375 60.25 82.125 59.9375 82.375 cv
59.6875 82.6875 59.5 83.0625 59.5 83.4375 cv
59.5 83.8125 59.6875 84.1875 59.9375 84.5 cv
60.25 84.75 60.625 84.9375 61 84.9375 cv
61.375 84.9375 61.75 84.75 62.0625 84.5 cv
62.3125 84.1875 62.5 83.8125 62.5 83.4375 cv
62.5 83.4375 li
cp
f
64.25 83.4375 mo
64.25 83.0625 64.0625 82.6875 63.8125 82.375 cv
63.5 82.125 63.125 81.9375 62.75 81.9375 cv
62.375 81.9375 62 82.125 61.6875 82.375 cv
61.4375 82.6875 61.25 83.0625 61.25 83.4375 cv
61.25 83.8125 61.4375 84.1875 61.6875 84.5 cv
62 84.75 62.375 84.9375 62.75 84.9375 cv
63.125 84.9375 63.5 84.75 63.8125 84.5 cv
64.0625 84.1875 64.25 83.8125 64.25 83.4375 cv
64.25 83.4375 li
cp
f
65.9375 105.938 mo
65.9375 105.563 65.75 105.188 65.5 104.875 cv
65.1875 104.625 64.8125 104.438 64.4375 104.438 cv
64.0625 104.438 63.6875 104.625 63.375 104.875 cv
63.125 105.188 62.9375 105.563 62.9375 105.938 cv
62.9375 106.313 63.125 106.688 63.375 107 cv
63.6875 107.25 64.0625 107.438 64.4375 107.438 cv
64.8125 107.438 65.1875 107.25 65.5 107 cv
65.75 106.688 65.9375 106.313 65.9375 105.938 cv
65.9375 105.938 li
cp
f
67.6875 108.875 mo
67.6875 108.5 67.5 108.125 67.25 107.813 cv
66.9375 107.563 66.5625 107.375 66.1875 107.375 cv
65.8125 107.375 65.4375 107.563 65.125 107.813 cv
64.875 108.125 64.6875 108.5 64.6875 108.875 cv
64.6875 109.25 64.875 109.625 65.125 109.938 cv
65.4375 110.188 65.8125 110.375 66.1875 110.375 cv
66.5625 110.375 66.9375 110.188 67.25 109.938 cv
67.5 109.625 67.6875 109.25 67.6875 108.875 cv
67.6875 108.875 li
cp
f
69.375 114.25 mo
69.375 113.875 69.1875 113.5 68.9375 113.188 cv
68.625 112.938 68.25 112.75 67.875 112.75 cv
67.5 112.75 67.125 112.938 66.8125 113.188 cv
66.5625 113.5 66.375 113.875 66.375 114.25 cv
66.375 114.625 66.5625 115 66.8125 115.313 cv
67.125 115.563 67.5 115.75 67.875 115.75 cv
68.25 115.75 68.625 115.563 68.9375 115.313 cv
69.1875 115 69.375 114.625 69.375 114.25 cv
69.375 114.25 li
cp
f
71.125 108.688 mo
71.125 108.313 70.9375 107.938 70.6875 107.625 cv
70.375 107.375 70 107.188 69.625 107.188 cv
69.25 107.188 68.875 107.375 68.5625 107.625 cv
68.3125 107.938 68.125 108.313 68.125 108.688 cv
68.125 109.063 68.3125 109.438 68.5625 109.75 cv
68.875 110 69.25 110.188 69.625 110.188 cv
70 110.188 70.375 110 70.6875 109.75 cv
70.9375 109.438 71.125 109.063 71.125 108.688 cv
71.125 108.688 li
cp
f
72.8125 118.063 mo
72.8125 117.688 72.625 117.313 72.375 117 cv
72.0625 116.75 71.6875 116.563 71.3125 116.563 cv
70.9375 116.563 70.5625 116.75 70.25 117 cv
70 117.313 69.8125 117.688 69.8125 118.063 cv
69.8125 118.438 70 118.813 70.25 119.125 cv
70.5625 119.375 70.9375 119.563 71.3125 119.563 cv
71.6875 119.563 72.0625 119.375 72.375 119.125 cv
72.625 118.813 72.8125 118.438 72.8125 118.063 cv
72.8125 118.063 li
cp
f
74.5625 122.5 mo
74.5625 122.125 74.375 121.75 74.125 121.438 cv
73.8125 121.188 73.4375 121 73.0625 121 cv
72.6875 121 72.3125 121.188 72 121.438 cv
71.75 121.75 71.5625 122.125 71.5625 122.5 cv
71.5625 122.875 71.75 123.25 72 123.563 cv
72.3125 123.813 72.6875 124 73.0625 124 cv
73.4375 124 73.8125 123.813 74.125 123.563 cv
74.375 123.25 74.5625 122.875 74.5625 122.5 cv
74.5625 122.5 li
cp
f
76.25 126.563 mo
76.25 126.188 76.0625 125.813 75.8125 125.5 cv
75.5 125.25 75.125 125.063 74.75 125.063 cv
74.375 125.063 74 125.25 73.6875 125.5 cv
73.4375 125.813 73.25 126.188 73.25 126.563 cv
73.25 126.938 73.4375 127.313 73.6875 127.625 cv
74 127.875 74.375 128.063 74.75 128.063 cv
75.125 128.063 75.5 127.875 75.8125 127.625 cv
76.0625 127.313 76.25 126.938 76.25 126.563 cv
76.25 126.563 li
cp
f
78 122.5 mo
78 122.125 77.8125 121.75 77.5625 121.438 cv
77.25 121.188 76.875 121 76.5 121 cv
76.125 121 75.75 121.188 75.4375 121.438 cv
75.1875 121.75 75 122.125 75 122.5 cv
75 122.875 75.1875 123.25 75.4375 123.563 cv
75.75 123.813 76.125 124 76.5 124 cv
76.875 124 77.25 123.813 77.5625 123.563 cv
77.8125 123.25 78 122.875 78 122.5 cv
78 122.5 li
cp
f
79.6875 130.25 mo
79.6875 129.875 79.5 129.5 79.25 129.188 cv
78.9375 128.938 78.5625 128.75 78.1875 128.75 cv
77.8125 128.75 77.4375 128.938 77.125 129.188 cv
76.875 129.5 76.6875 129.875 76.6875 130.25 cv
76.6875 130.625 76.875 131 77.125 131.313 cv
77.4375 131.563 77.8125 131.75 78.1875 131.75 cv
78.5625 131.75 78.9375 131.563 79.25 131.313 cv
79.5 131 79.6875 130.625 79.6875 130.25 cv
79.6875 130.25 li
cp
f
81.4375 132.625 mo
81.4375 132.25 81.25 131.875 81 131.563 cv
80.6875 131.313 80.3125 131.125 79.9375 131.125 cv
79.5625 131.125 79.1875 131.313 78.875 131.563 cv
78.625 131.875 78.4375 132.25 78.4375 132.625 cv
78.4375 133 78.625 133.375 78.875 133.688 cv
79.1875 133.938 79.5625 134.125 79.9375 134.125 cv
80.3125 134.125 80.6875 133.938 81 133.688 cv
81.25 133.375 81.4375 133 81.4375 132.625 cv
81.4375 132.625 li
cp
f
83.125 128.25 mo
83.125 127.875 82.9375 127.5 82.6875 127.188 cv
82.375 126.938 82 126.75 81.625 126.75 cv
81.25 126.75 80.875 126.938 80.5625 127.188 cv
80.3125 127.5 80.125 127.875 80.125 128.25 cv
80.125 128.625 80.3125 129 80.5625 129.313 cv
80.875 129.563 81.25 129.75 81.625 129.75 cv
82 129.75 82.375 129.563 82.6875 129.313 cv
82.9375 129 83.125 128.625 83.125 128.25 cv
83.125 128.25 li
cp
f
84.875 133.188 mo
84.875 132.813 84.6875 132.438 84.4375 132.125 cv
84.125 131.875 83.75 131.688 83.375 131.688 cv
83 131.688 82.625 131.875 82.3125 132.125 cv
82.0625 132.438 81.875 132.813 81.875 133.188 cv
81.875 133.563 82.0625 133.938 82.3125 134.25 cv
82.625 134.5 83 134.688 83.375 134.688 cv
83.75 134.688 84.125 134.5 84.4375 134.25 cv
84.6875 133.938 84.875 133.563 84.875 133.188 cv
84.875 133.188 li
cp
f
86.5625 137.625 mo
86.5625 137.25 86.375 136.875 86.125 136.563 cv
85.8125 136.313 85.4375 136.125 85.0625 136.125 cv
84.6875 136.125 84.3125 136.313 84 136.563 cv
83.75 136.875 83.5625 137.25 83.5625 137.625 cv
83.5625 138 83.75 138.375 84 138.688 cv
84.3125 138.938 84.6875 139.125 85.0625 139.125 cv
85.4375 139.125 85.8125 138.938 86.125 138.688 cv
86.375 138.375 86.5625 138 86.5625 137.625 cv
86.5625 137.625 li
cp
f
88.3125 136.313 mo
88.3125 135.938 88.125 135.563 87.875 135.25 cv
87.5625 135 87.1875 134.813 86.8125 134.813 cv
86.4375 134.813 86.0625 135 85.75 135.25 cv
85.5 135.563 85.3125 135.938 85.3125 136.313 cv
85.3125 136.688 85.5 137.063 85.75 137.375 cv
86.0625 137.625 86.4375 137.813 86.8125 137.813 cv
87.1875 137.813 87.5625 137.625 87.875 137.375 cv
88.125 137.063 88.3125 136.688 88.3125 136.313 cv
88.3125 136.313 li
cp
f
90 137.438 mo
90 137.063 89.8125 136.688 89.5625 136.375 cv
89.25 136.125 88.875 135.938 88.5 135.938 cv
88.125 135.938 87.75 136.125 87.4375 136.375 cv
87.1875 136.688 87 137.063 87 137.438 cv
87 137.813 87.1875 138.188 87.4375 138.5 cv
87.75 138.75 88.125 138.938 88.5 138.938 cv
88.875 138.938 89.25 138.75 89.5625 138.5 cv
89.8125 138.188 90 137.813 90 137.438 cv
90 137.438 li
cp
f
91.75 132.125 mo
91.75 131.75 91.5625 131.375 91.3125 131.063 cv
91 130.813 90.625 130.625 90.25 130.625 cv
89.875 130.625 89.5 130.813 89.1875 131.063 cv
88.9375 131.375 88.75 131.75 88.75 132.125 cv
88.75 132.5 88.9375 132.875 89.1875 133.188 cv
89.5 133.438 89.875 133.625 90.25 133.625 cv
90.625 133.625 91 133.438 91.3125 133.188 cv
91.5625 132.875 91.75 132.5 91.75 132.125 cv
91.75 132.125 li
cp
f
93.4375 138.75 mo
93.4375 138.375 93.25 138 93 137.688 cv
92.6875 137.438 92.3125 137.25 91.9375 137.25 cv
91.5625 137.25 91.1875 137.438 90.875 137.688 cv
90.625 138 90.4375 138.375 90.4375 138.75 cv
90.4375 139.125 90.625 139.5 90.875 139.813 cv
91.1875 140.063 91.5625 140.25 91.9375 140.25 cv
92.3125 140.25 92.6875 140.063 93 139.813 cv
93.25 139.5 93.4375 139.125 93.4375 138.75 cv
93.4375 138.75 li
cp
f
95.125 143.688 mo
95.125 143.313 94.9375 142.938 94.6875 142.625 cv
94.375 142.375 94 142.188 93.625 142.188 cv
93.25 142.188 92.875 142.375 92.5625 142.625 cv
92.3125 142.938 92.125 143.313 92.125 143.688 cv
92.125 144.063 92.3125 144.438 92.5625 144.75 cv
92.875 145 93.25 145.188 93.625 145.188 cv
94 145.188 94.375 145 94.6875 144.75 cv
94.9375 144.438 95.125 144.063 95.125 143.688 cv
95.125 143.688 li
cp
f
96.875 142.063 mo
96.875 141.688 96.6875 141.313 96.4375 141 cv
96.125 140.75 95.75 140.563 95.375 140.563 cv
95 140.563 94.625 140.75 94.3125 141 cv
94.0625 141.313 93.875 141.688 93.875 142.063 cv
93.875 142.438 94.0625 142.813 94.3125 143.125 cv
94.625 143.375 95 143.563 95.375 143.563 cv
95.75 143.563 96.125 143.375 96.4375 143.125 cv
96.6875 142.813 96.875 142.438 96.875 142.063 cv
96.875 142.063 li
cp
f
98.5625 136.688 mo
98.5625 136.313 98.375 135.938 98.125 135.625 cv
97.8125 135.375 97.4375 135.188 97.0625 135.188 cv
96.6875 135.188 96.3125 135.375 96 135.625 cv
95.75 135.938 95.5625 136.313 95.5625 136.688 cv
95.5625 137.063 95.75 137.438 96 137.75 cv
96.3125 138 96.6875 138.188 97.0625 138.188 cv
97.4375 138.188 97.8125 138 98.125 137.75 cv
98.375 137.438 98.5625 137.063 98.5625 136.688 cv
98.5625 136.688 li
cp
f
100.313 141.875 mo
100.313 141.5 100.125 141.125 99.875 140.813 cv
99.5625 140.563 99.1875 140.375 98.8125 140.375 cv
98.4375 140.375 98.0625 140.563 97.75 140.813 cv
97.5 141.125 97.3125 141.5 97.3125 141.875 cv
97.3125 142.25 97.5 142.625 97.75 142.938 cv
98.0625 143.188 98.4375 143.375 98.8125 143.375 cv
99.1875 143.375 99.5625 143.188 99.875 142.938 cv
100.125 142.625 100.313 142.25 100.313 141.875 cv
100.313 141.875 li
cp
f
102 146.313 mo
102 145.938 101.813 145.563 101.563 145.25 cv
101.25 145 100.875 144.813 100.5 144.813 cv
100.125 144.813 99.75 145 99.4375 145.25 cv
99.1875 145.563 99 145.938 99 146.313 cv
99 146.688 99.1875 147.063 99.4375 147.375 cv
99.75 147.625 100.125 147.813 100.5 147.813 cv
100.875 147.813 101.25 147.625 101.563 147.375 cv
101.813 147.063 102 146.688 102 146.313 cv
102 146.313 li
cp
f
103.75 141.313 mo
103.75 140.938 103.563 140.563 103.313 140.25 cv
103 140 102.625 139.813 102.25 139.813 cv
101.875 139.813 101.5 140 101.188 140.25 cv
100.938 140.563 100.75 140.938 100.75 141.313 cv
100.75 141.688 100.938 142.063 101.188 142.375 cv
101.5 142.625 101.875 142.813 102.25 142.813 cv
102.625 142.813 103 142.625 103.313 142.375 cv
103.563 142.063 103.75 141.688 103.75 141.313 cv
103.75 141.313 li
cp
f
105.438 146.813 mo
105.438 146.438 105.25 146.063 105 145.75 cv
104.688 145.5 104.313 145.313 103.938 145.313 cv
103.563 145.313 103.188 145.5 102.875 145.75 cv
102.625 146.063 102.438 146.438 102.438 146.813 cv
102.438 147.188 102.625 147.563 102.875 147.875 cv
103.188 148.125 103.563 148.313 103.938 148.313 cv
104.313 148.313 104.688 148.125 105 147.875 cv
105.25 147.563 105.438 147.188 105.438 146.813 cv
105.438 146.813 li
cp
f
107.188 144.813 mo
107.188 144.438 107 144.063 106.75 143.75 cv
106.438 143.5 106.063 143.313 105.688 143.313 cv
105.313 143.313 104.938 143.5 104.625 143.75 cv
104.375 144.063 104.188 144.438 104.188 144.813 cv
104.188 145.188 104.375 145.563 104.625 145.875 cv
104.938 146.125 105.313 146.313 105.688 146.313 cv
106.063 146.313 106.438 146.125 106.75 145.875 cv
107 145.563 107.188 145.188 107.188 144.813 cv
107.188 144.813 li
cp
f
108.875 145.563 mo
108.875 145.188 108.688 144.813 108.438 144.5 cv
108.125 144.25 107.75 144.063 107.375 144.063 cv
107 144.063 106.625 144.25 106.313 144.5 cv
106.063 144.813 105.875 145.188 105.875 145.563 cv
105.875 145.938 106.063 146.313 106.313 146.625 cv
106.625 146.875 107 147.063 107.375 147.063 cv
107.75 147.063 108.125 146.875 108.438 146.625 cv
108.688 146.313 108.875 145.938 108.875 145.563 cv
108.875 145.563 li
cp
f
110.625 147.75 mo
110.625 147.375 110.438 147 110.188 146.688 cv
109.875 146.438 109.5 146.25 109.125 146.25 cv
108.75 146.25 108.375 146.438 108.063 146.688 cv
107.813 147 107.625 147.375 107.625 147.75 cv
107.625 148.125 107.813 148.5 108.063 148.813 cv
108.375 149.063 108.75 149.25 109.125 149.25 cv
109.5 149.25 109.875 149.063 110.188 148.813 cv
110.438 148.5 110.625 148.125 110.625 147.75 cv
110.625 147.75 li
cp
f
112.313 148.313 mo
112.313 147.938 112.125 147.563 111.875 147.25 cv
111.563 147 111.188 146.813 110.813 146.813 cv
110.438 146.813 110.063 147 109.75 147.25 cv
109.5 147.563 109.313 147.938 109.313 148.313 cv
109.313 148.688 109.5 149.063 109.75 149.375 cv
110.063 149.625 110.438 149.813 110.813 149.813 cv
111.188 149.813 111.563 149.625 111.875 149.375 cv
112.125 149.063 112.313 148.688 112.313 148.313 cv
112.313 148.313 li
cp
f
114.063 149.813 mo
114.063 149.438 113.875 149.063 113.625 148.75 cv
113.313 148.5 112.938 148.313 112.563 148.313 cv
112.188 148.313 111.813 148.5 111.5 148.75 cv
111.25 149.063 111.063 149.438 111.063 149.813 cv
111.063 150.188 111.25 150.563 111.5 150.875 cv
111.813 151.125 112.188 151.313 112.563 151.313 cv
112.938 151.313 113.313 151.125 113.625 150.875 cv
113.875 150.563 114.063 150.188 114.063 149.813 cv
114.063 149.813 li
cp
f
115.75 151.438 mo
115.75 151.063 115.563 150.688 115.313 150.375 cv
115 150.125 114.625 149.938 114.25 149.938 cv
113.875 149.938 113.5 150.125 113.188 150.375 cv
112.938 150.688 112.75 151.063 112.75 151.438 cv
112.75 151.813 112.938 152.188 113.188 152.5 cv
113.5 152.75 113.875 152.938 114.25 152.938 cv
114.625 152.938 115 152.75 115.313 152.5 cv
115.563 152.188 115.75 151.813 115.75 151.438 cv
115.75 151.438 li
cp
f
117.5 150.5 mo
117.5 150.125 117.313 149.75 117.063 149.438 cv
116.75 149.188 116.375 149 116 149 cv
115.625 149 115.25 149.188 114.938 149.438 cv
114.688 149.75 114.5 150.125 114.5 150.5 cv
114.5 150.875 114.688 151.25 114.938 151.563 cv
115.25 151.813 115.625 152 116 152 cv
116.375 152 116.75 151.813 117.063 151.563 cv
117.313 151.25 117.5 150.875 117.5 150.5 cv
117.5 150.5 li
cp
f
119.188 150.688 mo
119.188 150.313 119 149.938 118.75 149.625 cv
118.438 149.375 118.063 149.188 117.688 149.188 cv
117.313 149.188 116.938 149.375 116.625 149.625 cv
116.375 149.938 116.188 150.313 116.188 150.688 cv
116.188 151.063 116.375 151.438 116.625 151.75 cv
116.938 152 117.313 152.188 117.688 152.188 cv
118.063 152.188 118.438 152 118.75 151.75 cv
119 151.438 119.188 151.063 119.188 150.688 cv
119.188 150.688 li
cp
f
120.938 149.625 mo
120.938 149.25 120.75 148.875 120.5 148.563 cv
120.188 148.313 119.813 148.125 119.438 148.125 cv
119.063 148.125 118.688 148.313 118.375 148.563 cv
118.125 148.875 117.938 149.25 117.938 149.625 cv
117.938 150 118.125 150.375 118.375 150.688 cv
118.688 150.938 119.063 151.125 119.438 151.125 cv
119.813 151.125 120.188 150.938 120.5 150.688 cv
120.75 150.375 120.938 150 120.938 149.625 cv
120.938 149.625 li
cp
f
122.625 150.5 mo
122.625 150.125 122.438 149.75 122.188 149.438 cv
121.875 149.188 121.5 149 121.125 149 cv
120.75 149 120.375 149.188 120.063 149.438 cv
119.813 149.75 119.625 150.125 119.625 150.5 cv
119.625 150.875 119.813 151.25 120.063 151.563 cv
120.375 151.813 120.75 152 121.125 152 cv
121.5 152 121.875 151.813 122.188 151.563 cv
122.438 151.25 122.625 150.875 122.625 150.5 cv
122.625 150.5 li
cp
f
124.313 150.313 mo
124.313 149.938 124.125 149.563 123.875 149.25 cv
123.563 149 123.188 148.813 122.813 148.813 cv
122.438 148.813 122.063 149 121.75 149.25 cv
121.5 149.563 121.313 149.938 121.313 150.313 cv
121.313 150.688 121.5 151.063 121.75 151.375 cv
122.063 151.625 122.438 151.813 122.813 151.813 cv
123.188 151.813 123.563 151.625 123.875 151.375 cv
124.125 151.063 124.313 150.688 124.313 150.313 cv
124.313 150.313 li
cp
f
126.063 151.25 mo
126.063 150.875 125.875 150.5 125.625 150.188 cv
125.313 149.938 124.938 149.75 124.563 149.75 cv
124.188 149.75 123.813 149.938 123.5 150.188 cv
123.25 150.5 123.063 150.875 123.063 151.25 cv
123.063 151.625 123.25 152 123.5 152.313 cv
123.813 152.563 124.188 152.75 124.563 152.75 cv
124.938 152.75 125.313 152.563 125.625 152.313 cv
125.875 152 126.063 151.625 126.063 151.25 cv
126.063 151.25 li
cp
f
127.75 150 mo
127.75 149.625 127.563 149.25 127.313 148.938 cv
127 148.688 126.625 148.5 126.25 148.5 cv
125.875 148.5 125.5 148.688 125.188 148.938 cv
124.938 149.25 124.75 149.625 124.75 150 cv
124.75 150.375 124.938 150.75 125.188 151.063 cv
125.5 151.313 125.875 151.5 126.25 151.5 cv
126.625 151.5 127 151.313 127.313 151.063 cv
127.563 150.75 127.75 150.375 127.75 150 cv
127.75 150 li
cp
f
129.5 152 mo
129.5 151.625 129.313 151.25 129.063 150.938 cv
128.75 150.688 128.375 150.5 128 150.5 cv
127.625 150.5 127.25 150.688 126.938 150.938 cv
126.688 151.25 126.5 151.625 126.5 152 cv
126.5 152.375 126.688 152.75 126.938 153.063 cv
127.25 153.313 127.625 153.5 128 153.5 cv
128.375 153.5 128.75 153.313 129.063 153.063 cv
129.313 152.75 129.5 152.375 129.5 152 cv
129.5 152 li
cp
f
131.188 154 mo
131.188 153.625 131 153.25 130.75 152.938 cv
130.438 152.688 130.063 152.5 129.688 152.5 cv
129.313 152.5 128.938 152.688 128.625 152.938 cv
128.375 153.25 128.188 153.625 128.188 154 cv
128.188 154.375 128.375 154.75 128.625 155.063 cv
128.938 155.313 129.313 155.5 129.688 155.5 cv
130.063 155.5 130.438 155.313 130.75 155.063 cv
131 154.75 131.188 154.375 131.188 154 cv
131.188 154 li
cp
f
132.938 153.813 mo
132.938 153.438 132.75 153.063 132.5 152.75 cv
132.188 152.5 131.813 152.313 131.438 152.313 cv
131.063 152.313 130.688 152.5 130.375 152.75 cv
130.125 153.063 129.938 153.438 129.938 153.813 cv
129.938 154.188 130.125 154.563 130.375 154.875 cv
130.688 155.125 131.063 155.313 131.438 155.313 cv
131.813 155.313 132.188 155.125 132.5 154.875 cv
132.75 154.563 132.938 154.188 132.938 153.813 cv
132.938 153.813 li
cp
f
134.625 152.563 mo
134.625 152.188 134.438 151.813 134.188 151.5 cv
133.875 151.25 133.5 151.063 133.125 151.063 cv
132.75 151.063 132.375 151.25 132.063 151.5 cv
131.813 151.813 131.625 152.188 131.625 152.563 cv
131.625 152.938 131.813 153.313 132.063 153.625 cv
132.375 153.875 132.75 154.063 133.125 154.063 cv
133.5 154.063 133.875 153.875 134.188 153.625 cv
134.438 153.313 134.625 152.938 134.625 152.563 cv
134.625 152.563 li
cp
f
136.375 151.625 mo
136.375 151.25 136.188 150.875 135.938 150.563 cv
135.625 150.313 135.25 150.125 134.875 150.125 cv
134.5 150.125 134.125 150.313 133.813 150.563 cv
133.563 150.875 133.375 151.25 133.375 151.625 cv
133.375 152 133.563 152.375 133.813 152.688 cv
134.125 152.938 134.5 153.125 134.875 153.125 cv
135.25 153.125 135.625 152.938 135.938 152.688 cv
136.188 152.375 136.375 152 136.375 151.625 cv
136.375 151.625 li
cp
f
138.063 153.313 mo
138.063 152.938 137.875 152.563 137.625 152.25 cv
137.313 152 136.938 151.813 136.563 151.813 cv
136.188 151.813 135.813 152 135.5 152.25 cv
135.25 152.563 135.063 152.938 135.063 153.313 cv
135.063 153.688 135.25 154.063 135.5 154.375 cv
135.813 154.625 136.188 154.813 136.563 154.813 cv
136.938 154.813 137.313 154.625 137.625 154.375 cv
137.875 154.063 138.063 153.688 138.063 153.313 cv
138.063 153.313 li
cp
f
139.813 152.938 mo
139.813 152.563 139.625 152.188 139.375 151.875 cv
139.063 151.625 138.688 151.438 138.313 151.438 cv
137.938 151.438 137.563 151.625 137.25 151.875 cv
137 152.188 136.813 152.563 136.813 152.938 cv
136.813 153.313 137 153.688 137.25 154 cv
137.563 154.25 137.938 154.438 138.313 154.438 cv
138.688 154.438 139.063 154.25 139.375 154 cv
139.625 153.688 139.813 153.313 139.813 152.938 cv
139.813 152.938 li
cp
f
141.5 152.188 mo
141.5 151.813 141.313 151.438 141.063 151.125 cv
140.75 150.875 140.375 150.688 140 150.688 cv
139.625 150.688 139.25 150.875 138.938 151.125 cv
138.688 151.438 138.5 151.813 138.5 152.188 cv
138.5 152.563 138.688 152.938 138.938 153.25 cv
139.25 153.5 139.625 153.688 140 153.688 cv
140.375 153.688 140.75 153.5 141.063 153.25 cv
141.313 152.938 141.5 152.563 141.5 152.188 cv
141.5 152.188 li
cp
f
143.25 156.063 mo
143.25 155.688 143.063 155.313 142.813 155 cv
142.5 154.75 142.125 154.563 141.75 154.563 cv
141.375 154.563 141 154.75 140.688 155 cv
140.438 155.313 140.25 155.688 140.25 156.063 cv
140.25 156.438 140.438 156.813 140.688 157.125 cv
141 157.375 141.375 157.563 141.75 157.563 cv
142.125 157.563 142.5 157.375 142.813 157.125 cv
143.063 156.813 143.25 156.438 143.25 156.063 cv
143.25 156.063 li
cp
f
144.938 156.813 mo
144.938 156.438 144.75 156.063 144.5 155.75 cv
144.188 155.5 143.813 155.313 143.438 155.313 cv
143.063 155.313 142.688 155.5 142.375 155.75 cv
142.125 156.063 141.938 156.438 141.938 156.813 cv
141.938 157.188 142.125 157.563 142.375 157.875 cv
142.688 158.125 143.063 158.313 143.438 158.313 cv
143.813 158.313 144.188 158.125 144.5 157.875 cv
144.75 157.563 144.938 157.188 144.938 156.813 cv
144.938 156.813 li
cp
f
146.688 154.188 mo
146.688 153.813 146.5 153.438 146.25 153.125 cv
145.938 152.875 145.563 152.688 145.188 152.688 cv
144.813 152.688 144.438 152.875 144.125 153.125 cv
143.875 153.438 143.688 153.813 143.688 154.188 cv
143.688 154.563 143.875 154.938 144.125 155.25 cv
144.438 155.5 144.813 155.688 145.188 155.688 cv
145.563 155.688 145.938 155.5 146.25 155.25 cv
146.5 154.938 146.688 154.563 146.688 154.188 cv
146.688 154.188 li
cp
f
148.375 154.938 mo
148.375 154.563 148.188 154.188 147.938 153.875 cv
147.625 153.625 147.25 153.438 146.875 153.438 cv
146.5 153.438 146.125 153.625 145.813 153.875 cv
145.563 154.188 145.375 154.563 145.375 154.938 cv
145.375 155.313 145.563 155.688 145.813 156 cv
146.125 156.25 146.5 156.438 146.875 156.438 cv
147.25 156.438 147.625 156.25 147.938 156 cv
148.188 155.688 148.375 155.313 148.375 154.938 cv
148.375 154.938 li
cp
f
150.125 155.313 mo
150.125 154.938 149.938 154.563 149.688 154.25 cv
149.375 154 149 153.813 148.625 153.813 cv
148.25 153.813 147.875 154 147.563 154.25 cv
147.313 154.563 147.125 154.938 147.125 155.313 cv
147.125 155.688 147.313 156.063 147.563 156.375 cv
147.875 156.625 148.25 156.813 148.625 156.813 cv
149 156.813 149.375 156.625 149.688 156.375 cv
149.938 156.063 150.125 155.688 150.125 155.313 cv
150.125 155.313 li
cp
f
151.813 156.063 mo
151.813 155.688 151.625 155.313 151.375 155 cv
151.063 154.75 150.688 154.563 150.313 154.563 cv
149.938 154.563 149.563 154.75 149.25 155 cv
149 155.313 148.813 155.688 148.813 156.063 cv
148.813 156.438 149 156.813 149.25 157.125 cv
149.563 157.375 149.938 157.563 150.313 157.563 cv
150.688 157.563 151.063 157.375 151.375 157.125 cv
151.625 156.813 151.813 156.438 151.813 156.063 cv
151.813 156.063 li
cp
f
153.563 156.438 mo
153.563 156.063 153.375 155.688 153.125 155.375 cv
152.813 155.125 152.438 154.938 152.063 154.938 cv
151.688 154.938 151.313 155.125 151 155.375 cv
150.75 155.688 150.563 156.063 150.563 156.438 cv
150.563 156.813 150.75 157.188 151 157.5 cv
151.313 157.75 151.688 157.938 152.063 157.938 cv
152.438 157.938 152.813 157.75 153.125 157.5 cv
153.375 157.188 153.563 156.813 153.563 156.438 cv
153.563 156.438 li
cp
f
155.25 154 mo
155.25 153.625 155.063 153.25 154.813 152.938 cv
154.5 152.688 154.125 152.5 153.75 152.5 cv
153.375 152.5 153 152.688 152.688 152.938 cv
152.438 153.25 152.25 153.625 152.25 154 cv
152.25 154.375 152.438 154.75 152.688 155.063 cv
153 155.313 153.375 155.5 153.75 155.5 cv
154.125 155.5 154.5 155.313 154.813 155.063 cv
155.063 154.75 155.25 154.375 155.25 154 cv
155.25 154 li
cp
f
156.938 155.125 mo
156.938 154.75 156.75 154.375 156.5 154.063 cv
156.188 153.813 155.813 153.625 155.438 153.625 cv
155.063 153.625 154.688 153.813 154.375 154.063 cv
154.125 154.375 153.938 154.75 153.938 155.125 cv
153.938 155.5 154.125 155.875 154.375 156.188 cv
154.688 156.438 155.063 156.625 155.438 156.625 cv
155.813 156.625 156.188 156.438 156.5 156.188 cv
156.75 155.875 156.938 155.5 156.938 155.125 cv
156.938 155.125 li
cp
f
158.688 156.813 mo
158.688 156.438 158.5 156.063 158.25 155.75 cv
157.938 155.5 157.563 155.313 157.188 155.313 cv
156.813 155.313 156.438 155.5 156.125 155.75 cv
155.875 156.063 155.688 156.438 155.688 156.813 cv
155.688 157.188 155.875 157.563 156.125 157.875 cv
156.438 158.125 156.813 158.313 157.188 158.313 cv
157.563 158.313 157.938 158.125 158.25 157.875 cv
158.5 157.563 158.688 157.188 158.688 156.813 cv
158.688 156.813 li
cp
f
160.375 157.188 mo
160.375 156.813 160.188 156.438 159.938 156.125 cv
159.625 155.875 159.25 155.688 158.875 155.688 cv
158.5 155.688 158.125 155.875 157.813 156.125 cv
157.563 156.438 157.375 156.813 157.375 157.188 cv
157.375 157.563 157.563 157.938 157.813 158.25 cv
158.125 158.5 158.5 158.688 158.875 158.688 cv
159.25 158.688 159.625 158.5 159.938 158.25 cv
160.188 157.938 160.375 157.563 160.375 157.188 cv
160.375 157.188 li
cp
f
162.125 156.813 mo
162.125 156.438 161.938 156.063 161.688 155.75 cv
161.375 155.5 161 155.313 160.625 155.313 cv
160.25 155.313 159.875 155.5 159.563 155.75 cv
159.313 156.063 159.125 156.438 159.125 156.813 cv
159.125 157.188 159.313 157.563 159.563 157.875 cv
159.875 158.125 160.25 158.313 160.625 158.313 cv
161 158.313 161.375 158.125 161.688 157.875 cv
161.938 157.563 162.125 157.188 162.125 156.813 cv
162.125 156.813 li
cp
f
163.813 157.188 mo
163.813 156.813 163.625 156.438 163.375 156.125 cv
163.063 155.875 162.688 155.688 162.313 155.688 cv
161.938 155.688 161.563 155.875 161.25 156.125 cv
161 156.438 160.813 156.813 160.813 157.188 cv
160.813 157.563 161 157.938 161.25 158.25 cv
161.563 158.5 161.938 158.688 162.313 158.688 cv
162.688 158.688 163.063 158.5 163.375 158.25 cv
163.625 157.938 163.813 157.563 163.813 157.188 cv
163.813 157.188 li
cp
f
165.563 156.625 mo
165.563 156.25 165.375 155.875 165.125 155.563 cv
164.813 155.313 164.438 155.125 164.063 155.125 cv
163.688 155.125 163.313 155.313 163 155.563 cv
162.75 155.875 162.563 156.25 162.563 156.625 cv
162.563 157 162.75 157.375 163 157.688 cv
163.313 157.938 163.688 158.125 164.063 158.125 cv
164.438 158.125 164.813 157.938 165.125 157.688 cv
165.375 157.375 165.563 157 165.563 156.625 cv
165.563 156.625 li
cp
f
167.25 156.25 mo
167.25 155.875 167.063 155.5 166.813 155.188 cv
166.5 154.938 166.125 154.75 165.75 154.75 cv
165.375 154.75 165 154.938 164.688 155.188 cv
164.438 155.5 164.25 155.875 164.25 156.25 cv
164.25 156.625 164.438 157 164.688 157.313 cv
165 157.563 165.375 157.75 165.75 157.75 cv
166.125 157.75 166.5 157.563 166.813 157.313 cv
167.063 157 167.25 156.625 167.25 156.25 cv
167.25 156.25 li
cp
f
169 157.5 mo
169 157.125 168.813 156.75 168.563 156.438 cv
168.25 156.188 167.875 156 167.5 156 cv
167.125 156 166.75 156.188 166.438 156.438 cv
166.188 156.75 166 157.125 166 157.5 cv
166 157.875 166.188 158.25 166.438 158.563 cv
166.75 158.813 167.125 159 167.5 159 cv
167.875 159 168.25 158.813 168.563 158.563 cv
168.813 158.25 169 157.875 169 157.5 cv
169 157.5 li
cp
f
170.688 156.625 mo
170.688 156.25 170.5 155.875 170.25 155.563 cv
169.938 155.313 169.563 155.125 169.188 155.125 cv
168.813 155.125 168.438 155.313 168.125 155.563 cv
167.875 155.875 167.688 156.25 167.688 156.625 cv
167.688 157 167.875 157.375 168.125 157.688 cv
168.438 157.938 168.813 158.125 169.188 158.125 cv
169.563 158.125 169.938 157.938 170.25 157.688 cv
170.5 157.375 170.688 157 170.688 156.625 cv
170.688 156.625 li
cp
f
172.438 157.5 mo
172.438 157.125 172.25 156.75 172 156.438 cv
171.688 156.188 171.313 156 170.938 156 cv
170.563 156 170.188 156.188 169.875 156.438 cv
169.625 156.75 169.438 157.125 169.438 157.5 cv
169.438 157.875 169.625 158.25 169.875 158.563 cv
170.188 158.813 170.563 159 170.938 159 cv
171.313 159 171.688 158.813 172 158.563 cv
172.25 158.25 172.438 157.875 172.438 157.5 cv
172.438 157.5 li
cp
f
174.125 155.688 mo
174.125 155.313 173.938 154.938 173.688 154.625 cv
173.375 154.375 173 154.188 172.625 154.188 cv
172.25 154.188 171.875 154.375 171.563 154.625 cv
171.313 154.938 171.125 155.313 171.125 155.688 cv
171.125 156.063 171.313 156.438 171.563 156.75 cv
171.875 157 172.25 157.188 172.625 157.188 cv
173 157.188 173.375 157 173.688 156.75 cv
173.938 156.438 174.125 156.063 174.125 155.688 cv
174.125 155.688 li
cp
f
175.875 158.063 mo
175.875 157.688 175.688 157.313 175.438 157 cv
175.125 156.75 174.75 156.563 174.375 156.563 cv
174 156.563 173.625 156.75 173.313 157 cv
173.063 157.313 172.875 157.688 172.875 158.063 cv
172.875 158.438 173.063 158.813 173.313 159.125 cv
173.625 159.375 174 159.563 174.375 159.563 cv
174.75 159.563 175.125 159.375 175.438 159.125 cv
175.688 158.813 175.875 158.438 175.875 158.063 cv
175.875 158.063 li
cp
f
177.563 157.313 mo
177.563 156.938 177.375 156.563 177.125 156.25 cv
176.813 156 176.438 155.813 176.063 155.813 cv
175.688 155.813 175.313 156 175 156.25 cv
174.75 156.563 174.563 156.938 174.563 157.313 cv
174.563 157.688 174.75 158.063 175 158.375 cv
175.313 158.625 175.688 158.813 176.063 158.813 cv
176.438 158.813 176.813 158.625 177.125 158.375 cv
177.375 158.063 177.563 157.688 177.563 157.313 cv
177.563 157.313 li
cp
f
179.313 158.438 mo
179.313 158.063 179.125 157.688 178.875 157.375 cv
178.563 157.125 178.188 156.938 177.813 156.938 cv
177.438 156.938 177.063 157.125 176.75 157.375 cv
176.5 157.688 176.313 158.063 176.313 158.438 cv
176.313 158.813 176.5 159.188 176.75 159.5 cv
177.063 159.75 177.438 159.938 177.813 159.938 cv
178.188 159.938 178.563 159.75 178.875 159.5 cv
179.125 159.188 179.313 158.813 179.313 158.438 cv
179.313 158.438 li
cp
f
181 157.875 mo
181 157.5 180.813 157.125 180.563 156.813 cv
180.25 156.563 179.875 156.375 179.5 156.375 cv
179.125 156.375 178.75 156.563 178.438 156.813 cv
178.188 157.125 178 157.5 178 157.875 cv
178 158.25 178.188 158.625 178.438 158.938 cv
178.75 159.188 179.125 159.375 179.5 159.375 cv
179.875 159.375 180.25 159.188 180.563 158.938 cv
180.813 158.625 181 158.25 181 157.875 cv
181 157.875 li
cp
f
182.75 157.313 mo
182.75 156.938 182.563 156.563 182.313 156.25 cv
182 156 181.625 155.813 181.25 155.813 cv
180.875 155.813 180.5 156 180.188 156.25 cv
179.938 156.563 179.75 156.938 179.75 157.313 cv
179.75 157.688 179.938 158.063 180.188 158.375 cv
180.5 158.625 180.875 158.813 181.25 158.813 cv
181.625 158.813 182 158.625 182.313 158.375 cv
182.563 158.063 182.75 157.688 182.75 157.313 cv
182.75 157.313 li
cp
f
184.438 157.875 mo
184.438 157.5 184.25 157.125 184 156.813 cv
183.688 156.563 183.313 156.375 182.938 156.375 cv
182.563 156.375 182.188 156.563 181.875 156.813 cv
181.625 157.125 181.438 157.5 181.438 157.875 cv
181.438 158.25 181.625 158.625 181.875 158.938 cv
182.188 159.188 182.563 159.375 182.938 159.375 cv
183.313 159.375 183.688 159.188 184 158.938 cv
184.25 158.625 184.438 158.25 184.438 157.875 cv
184.438 157.875 li
cp
f
186.188 158.625 mo
186.188 158.25 186 157.875 185.75 157.563 cv
185.438 157.313 185.063 157.125 184.688 157.125 cv
184.313 157.125 183.938 157.313 183.625 157.563 cv
183.375 157.875 183.188 158.25 183.188 158.625 cv
183.188 159 183.375 159.375 183.625 159.688 cv
183.938 159.938 184.313 160.125 184.688 160.125 cv
185.063 160.125 185.438 159.938 185.75 159.688 cv
186 159.375 186.188 159 186.188 158.625 cv
186.188 158.625 li
cp
f
187.875 157.875 mo
187.875 157.5 187.688 157.125 187.438 156.813 cv
187.125 156.563 186.75 156.375 186.375 156.375 cv
186 156.375 185.625 156.563 185.313 156.813 cv
185.063 157.125 184.875 157.5 184.875 157.875 cv
184.875 158.25 185.063 158.625 185.313 158.938 cv
185.625 159.188 186 159.375 186.375 159.375 cv
186.75 159.375 187.125 159.188 187.438 158.938 cv
187.688 158.625 187.875 158.25 187.875 157.875 cv
187.875 157.875 li
cp
f
189.563 158.438 mo
189.563 158.063 189.375 157.688 189.125 157.375 cv
188.813 157.125 188.438 156.938 188.063 156.938 cv
187.688 156.938 187.313 157.125 187 157.375 cv
186.75 157.688 186.563 158.063 186.563 158.438 cv
186.563 158.813 186.75 159.188 187 159.5 cv
187.313 159.75 187.688 159.938 188.063 159.938 cv
188.438 159.938 188.813 159.75 189.125 159.5 cv
189.375 159.188 189.563 158.813 189.563 158.438 cv
189.563 158.438 li
cp
f
191.313 158.438 mo
191.313 158.063 191.125 157.688 190.875 157.375 cv
190.563 157.125 190.188 156.938 189.813 156.938 cv
189.438 156.938 189.063 157.125 188.75 157.375 cv
188.5 157.688 188.313 158.063 188.313 158.438 cv
188.313 158.813 188.5 159.188 188.75 159.5 cv
189.063 159.75 189.438 159.938 189.813 159.938 cv
190.188 159.938 190.563 159.75 190.875 159.5 cv
191.125 159.188 191.313 158.813 191.313 158.438 cv
191.313 158.438 li
cp
f
193 159 mo
193 158.625 192.813 158.25 192.563 157.938 cv
192.25 157.688 191.875 157.5 191.5 157.5 cv
191.125 157.5 190.75 157.688 190.438 157.938 cv
190.188 158.25 190 158.625 190 159 cv
190 159.375 190.188 159.75 190.438 160.063 cv
190.75 160.313 191.125 160.5 191.5 160.5 cv
191.875 160.5 192.25 160.313 192.563 160.063 cv
192.813 159.75 193 159.375 193 159 cv
193 159 li
cp
f
194.75 158.813 mo
194.75 158.438 194.563 158.063 194.313 157.75 cv
194 157.5 193.625 157.313 193.25 157.313 cv
192.875 157.313 192.5 157.5 192.188 157.75 cv
191.938 158.063 191.75 158.438 191.75 158.813 cv
191.75 159.188 191.938 159.563 192.188 159.875 cv
192.5 160.125 192.875 160.313 193.25 160.313 cv
193.625 160.313 194 160.125 194.313 159.875 cv
194.563 159.563 194.75 159.188 194.75 158.813 cv
194.75 158.813 li
cp
f
196.438 159.375 mo
196.438 159 196.25 158.625 196 158.313 cv
195.688 158.063 195.313 157.875 194.938 157.875 cv
194.563 157.875 194.188 158.063 193.875 158.313 cv
193.625 158.625 193.438 159 193.438 159.375 cv
193.438 159.75 193.625 160.125 193.875 160.438 cv
194.188 160.688 194.563 160.875 194.938 160.875 cv
195.313 160.875 195.688 160.688 196 160.438 cv
196.25 160.125 196.438 159.75 196.438 159.375 cv
196.438 159.375 li
cp
f
198.188 159.75 mo
198.188 159.375 198 159 197.75 158.688 cv
197.438 158.438 197.063 158.25 196.688 158.25 cv
196.313 158.25 195.938 158.438 195.625 158.688 cv
195.375 159 195.188 159.375 195.188 159.75 cv
195.188 160.125 195.375 160.5 195.625 160.813 cv
195.938 161.063 196.313 161.25 196.688 161.25 cv
197.063 161.25 197.438 161.063 197.75 160.813 cv
198 160.5 198.188 160.125 198.188 159.75 cv
198.188 159.75 li
cp
f
199.875 157.688 mo
199.875 157.313 199.688 156.938 199.438 156.625 cv
199.125 156.375 198.75 156.188 198.375 156.188 cv
198 156.188 197.625 156.375 197.313 156.625 cv
197.063 156.938 196.875 157.313 196.875 157.688 cv
196.875 158.063 197.063 158.438 197.313 158.75 cv
197.625 159 198 159.188 198.375 159.188 cv
198.75 159.188 199.125 159 199.438 158.75 cv
199.688 158.438 199.875 158.063 199.875 157.688 cv
199.875 157.688 li
cp
f
201.625 158.438 mo
201.625 158.063 201.438 157.688 201.188 157.375 cv
200.875 157.125 200.5 156.938 200.125 156.938 cv
199.75 156.938 199.375 157.125 199.063 157.375 cv
198.813 157.688 198.625 158.063 198.625 158.438 cv
198.625 158.813 198.813 159.188 199.063 159.5 cv
199.375 159.75 199.75 159.938 200.125 159.938 cv
200.5 159.938 200.875 159.75 201.188 159.5 cv
201.438 159.188 201.625 158.813 201.625 158.438 cv
201.625 158.438 li
cp
f
203.313 159.375 mo
203.313 159 203.125 158.625 202.875 158.313 cv
202.563 158.063 202.188 157.875 201.813 157.875 cv
201.438 157.875 201.063 158.063 200.75 158.313 cv
200.5 158.625 200.313 159 200.313 159.375 cv
200.313 159.75 200.5 160.125 200.75 160.438 cv
201.063 160.688 201.438 160.875 201.813 160.875 cv
202.188 160.875 202.563 160.688 202.875 160.438 cv
203.125 160.125 203.313 159.75 203.313 159.375 cv
203.313 159.375 li
cp
f
205.063 158.438 mo
205.063 158.063 204.875 157.688 204.625 157.375 cv
204.313 157.125 203.938 156.938 203.563 156.938 cv
203.188 156.938 202.813 157.125 202.5 157.375 cv
202.25 157.688 202.063 158.063 202.063 158.438 cv
202.063 158.813 202.25 159.188 202.5 159.5 cv
202.813 159.75 203.188 159.938 203.563 159.938 cv
203.938 159.938 204.313 159.75 204.625 159.5 cv
204.875 159.188 205.063 158.813 205.063 158.438 cv
205.063 158.438 li
cp
f
206.75 157.875 mo
206.75 157.5 206.563 157.125 206.313 156.813 cv
206 156.563 205.625 156.375 205.25 156.375 cv
204.875 156.375 204.5 156.563 204.188 156.813 cv
203.938 157.125 203.75 157.5 203.75 157.875 cv
203.75 158.25 203.938 158.625 204.188 158.938 cv
204.5 159.188 204.875 159.375 205.25 159.375 cv
205.625 159.375 206 159.188 206.313 158.938 cv
206.563 158.625 206.75 158.25 206.75 157.875 cv
206.75 157.875 li
cp
f
208.5 159.375 mo
208.5 159 208.313 158.625 208.063 158.313 cv
207.75 158.063 207.375 157.875 207 157.875 cv
206.625 157.875 206.25 158.063 205.938 158.313 cv
205.688 158.625 205.5 159 205.5 159.375 cv
205.5 159.75 205.688 160.125 205.938 160.438 cv
206.25 160.688 206.625 160.875 207 160.875 cv
207.375 160.875 207.75 160.688 208.063 160.438 cv
208.313 160.125 208.5 159.75 208.5 159.375 cv
208.5 159.375 li
cp
f
210.188 160.125 mo
210.188 159.75 210 159.375 209.75 159.063 cv
209.438 158.813 209.063 158.625 208.688 158.625 cv
208.313 158.625 207.938 158.813 207.625 159.063 cv
207.375 159.375 207.188 159.75 207.188 160.125 cv
207.188 160.5 207.375 160.875 207.625 161.188 cv
207.938 161.438 208.313 161.625 208.688 161.625 cv
209.063 161.625 209.438 161.438 209.75 161.188 cv
210 160.875 210.188 160.5 210.188 160.125 cv
210.188 160.125 li
cp
f
211.938 159.938 mo
211.938 159.563 211.75 159.188 211.5 158.875 cv
211.188 158.625 210.813 158.438 210.438 158.438 cv
210.063 158.438 209.688 158.625 209.375 158.875 cv
209.125 159.188 208.938 159.563 208.938 159.938 cv
208.938 160.313 209.125 160.688 209.375 161 cv
209.688 161.25 210.063 161.438 210.438 161.438 cv
210.813 161.438 211.188 161.25 211.5 161 cv
211.75 160.688 211.938 160.313 211.938 159.938 cv
211.938 159.938 li
cp
f
213.625 159.563 mo
213.625 159.188 213.438 158.813 213.188 158.5 cv
212.875 158.25 212.5 158.063 212.125 158.063 cv
211.75 158.063 211.375 158.25 211.063 158.5 cv
210.813 158.813 210.625 159.188 210.625 159.563 cv
210.625 159.938 210.813 160.313 211.063 160.625 cv
211.375 160.875 211.75 161.063 212.125 161.063 cv
212.5 161.063 212.875 160.875 213.188 160.625 cv
213.438 160.313 213.625 159.938 213.625 159.563 cv
213.625 159.563 li
cp
f
215.375 159.75 mo
215.375 159.375 215.188 159 214.938 158.688 cv
214.625 158.438 214.25 158.25 213.875 158.25 cv
213.5 158.25 213.125 158.438 212.813 158.688 cv
212.563 159 212.375 159.375 212.375 159.75 cv
212.375 160.125 212.563 160.5 212.813 160.813 cv
213.125 161.063 213.5 161.25 213.875 161.25 cv
214.25 161.25 214.625 161.063 214.938 160.813 cv
215.188 160.5 215.375 160.125 215.375 159.75 cv
215.375 159.75 li
cp
f
217.063 159.75 mo
217.063 159.375 216.875 159 216.625 158.688 cv
216.313 158.438 215.938 158.25 215.563 158.25 cv
215.188 158.25 214.813 158.438 214.5 158.688 cv
214.25 159 214.063 159.375 214.063 159.75 cv
214.063 160.125 214.25 160.5 214.5 160.813 cv
214.813 161.063 215.188 161.25 215.563 161.25 cv
215.938 161.25 216.313 161.063 216.625 160.813 cv
216.875 160.5 217.063 160.125 217.063 159.75 cv
217.063 159.75 li
cp
f
218.813 159.563 mo
218.813 159.188 218.625 158.813 218.375 158.5 cv
218.063 158.25 217.688 158.063 217.313 158.063 cv
216.938 158.063 216.563 158.25 216.25 158.5 cv
216 158.813 215.813 159.188 215.813 159.563 cv
215.813 159.938 216 160.313 216.25 160.625 cv
216.563 160.875 216.938 161.063 217.313 161.063 cv
217.688 161.063 218.063 160.875 218.375 160.625 cv
218.625 160.313 218.813 159.938 218.813 159.563 cv
218.813 159.563 li
cp
f
220.5 159.75 mo
220.5 159.375 220.313 159 220.063 158.688 cv
219.75 158.438 219.375 158.25 219 158.25 cv
218.625 158.25 218.25 158.438 217.938 158.688 cv
217.688 159 217.5 159.375 217.5 159.75 cv
217.5 160.125 217.688 160.5 217.938 160.813 cv
218.25 161.063 218.625 161.25 219 161.25 cv
219.375 161.25 219.75 161.063 220.063 160.813 cv
220.313 160.5 220.5 160.125 220.5 159.75 cv
220.5 159.75 li
cp
f
222.188 160.125 mo
222.188 159.75 222 159.375 221.75 159.063 cv
221.438 158.813 221.063 158.625 220.688 158.625 cv
220.313 158.625 219.938 158.813 219.625 159.063 cv
219.375 159.375 219.188 159.75 219.188 160.125 cv
219.188 160.5 219.375 160.875 219.625 161.188 cv
219.938 161.438 220.313 161.625 220.688 161.625 cv
221.063 161.625 221.438 161.438 221.75 161.188 cv
222 160.875 222.188 160.5 222.188 160.125 cv
222.188 160.125 li
cp
f
223.938 160.313 mo
223.938 159.938 223.75 159.563 223.5 159.25 cv
223.188 159 222.813 158.813 222.438 158.813 cv
222.063 158.813 221.688 159 221.375 159.25 cv
221.125 159.563 220.938 159.938 220.938 160.313 cv
220.938 160.688 221.125 161.063 221.375 161.375 cv
221.688 161.625 222.063 161.813 222.438 161.813 cv
222.813 161.813 223.188 161.625 223.5 161.375 cv
223.75 161.063 223.938 160.688 223.938 160.313 cv
223.938 160.313 li
cp
f
225.625 159.563 mo
225.625 159.188 225.438 158.813 225.188 158.5 cv
224.875 158.25 224.5 158.063 224.125 158.063 cv
223.75 158.063 223.375 158.25 223.063 158.5 cv
222.813 158.813 222.625 159.188 222.625 159.563 cv
222.625 159.938 222.813 160.313 223.063 160.625 cv
223.375 160.875 223.75 161.063 224.125 161.063 cv
224.5 161.063 224.875 160.875 225.188 160.625 cv
225.438 160.313 225.625 159.938 225.625 159.563 cv
225.625 159.563 li
cp
f
227.375 160.313 mo
227.375 159.938 227.188 159.563 226.938 159.25 cv
226.625 159 226.25 158.813 225.875 158.813 cv
225.5 158.813 225.125 159 224.813 159.25 cv
224.563 159.563 224.375 159.938 224.375 160.313 cv
224.375 160.688 224.563 161.063 224.813 161.375 cv
225.125 161.625 225.5 161.813 225.875 161.813 cv
226.25 161.813 226.625 161.625 226.938 161.375 cv
227.188 161.063 227.375 160.688 227.375 160.313 cv
227.375 160.313 li
cp
f
229.063 159.188 mo
229.063 158.813 228.875 158.438 228.625 158.125 cv
228.313 157.875 227.938 157.688 227.563 157.688 cv
227.188 157.688 226.813 157.875 226.5 158.125 cv
226.25 158.438 226.063 158.813 226.063 159.188 cv
226.063 159.563 226.25 159.938 226.5 160.25 cv
226.813 160.5 227.188 160.688 227.563 160.688 cv
227.938 160.688 228.313 160.5 228.625 160.25 cv
228.875 159.938 229.063 159.563 229.063 159.188 cv
229.063 159.188 li
cp
f
230.813 159.75 mo
230.813 159.375 230.625 159 230.375 158.688 cv
230.063 158.438 229.688 158.25 229.313 158.25 cv
228.938 158.25 228.563 158.438 228.25 158.688 cv
228 159 227.813 159.375 227.813 159.75 cv
227.813 160.125 228 160.5 228.25 160.813 cv
228.563 161.063 228.938 161.25 229.313 161.25 cv
229.688 161.25 230.063 161.063 230.375 160.813 cv
230.625 160.5 230.813 160.125 230.813 159.75 cv
230.813 159.75 li
cp
f
232.5 160.125 mo
232.5 159.75 232.313 159.375 232.063 159.063 cv
231.75 158.813 231.375 158.625 231 158.625 cv
230.625 158.625 230.25 158.813 229.938 159.063 cv
229.688 159.375 229.5 159.75 229.5 160.125 cv
229.5 160.5 229.688 160.875 229.938 161.188 cv
230.25 161.438 230.625 161.625 231 161.625 cv
231.375 161.625 231.75 161.438 232.063 161.188 cv
232.313 160.875 232.5 160.5 232.5 160.125 cv
232.5 160.125 li
cp
f
234.25 160.5 mo
234.25 160.125 234.063 159.75 233.813 159.438 cv
233.5 159.188 233.125 159 232.75 159 cv
232.375 159 232 159.188 231.688 159.438 cv
231.438 159.75 231.25 160.125 231.25 160.5 cv
231.25 160.875 231.438 161.25 231.688 161.563 cv
232 161.813 232.375 162 232.75 162 cv
233.125 162 233.5 161.813 233.813 161.563 cv
234.063 161.25 234.25 160.875 234.25 160.5 cv
234.25 160.5 li
cp
f
235.938 159.938 mo
235.938 159.563 235.75 159.188 235.5 158.875 cv
235.188 158.625 234.813 158.438 234.438 158.438 cv
234.063 158.438 233.688 158.625 233.375 158.875 cv
233.125 159.188 232.938 159.563 232.938 159.938 cv
232.938 160.313 233.125 160.688 233.375 161 cv
233.688 161.25 234.063 161.438 234.438 161.438 cv
234.813 161.438 235.188 161.25 235.5 161 cv
235.75 160.688 235.938 160.313 235.938 159.938 cv
235.938 159.938 li
cp
f
237.688 159.938 mo
237.688 159.563 237.5 159.188 237.25 158.875 cv
236.938 158.625 236.563 158.438 236.188 158.438 cv
235.813 158.438 235.438 158.625 235.125 158.875 cv
234.875 159.188 234.688 159.563 234.688 159.938 cv
234.688 160.313 234.875 160.688 235.125 161 cv
235.438 161.25 235.813 161.438 236.188 161.438 cv
236.563 161.438 236.938 161.25 237.25 161 cv
237.5 160.688 237.688 160.313 237.688 159.938 cv
237.688 159.938 li
cp
f
239.375 160.5 mo
239.375 160.125 239.188 159.75 238.938 159.438 cv
238.625 159.188 238.25 159 237.875 159 cv
237.5 159 237.125 159.188 236.813 159.438 cv
236.563 159.75 236.375 160.125 236.375 160.5 cv
236.375 160.875 236.563 161.25 236.813 161.563 cv
237.125 161.813 237.5 162 237.875 162 cv
238.25 162 238.625 161.813 238.938 161.563 cv
239.188 161.25 239.375 160.875 239.375 160.5 cv
239.375 160.5 li
cp
f
241.125 159.938 mo
241.125 159.563 240.938 159.188 240.688 158.875 cv
240.375 158.625 240 158.438 239.625 158.438 cv
239.25 158.438 238.875 158.625 238.563 158.875 cv
238.313 159.188 238.125 159.563 238.125 159.938 cv
238.125 160.313 238.313 160.688 238.563 161 cv
238.875 161.25 239.25 161.438 239.625 161.438 cv
240 161.438 240.375 161.25 240.688 161 cv
240.938 160.688 241.125 160.313 241.125 159.938 cv
241.125 159.938 li
cp
f
242.813 159.938 mo
242.813 159.563 242.625 159.188 242.375 158.875 cv
242.063 158.625 241.688 158.438 241.313 158.438 cv
240.938 158.438 240.563 158.625 240.25 158.875 cv
240 159.188 239.813 159.563 239.813 159.938 cv
239.813 160.313 240 160.688 240.25 161 cv
240.563 161.25 240.938 161.438 241.313 161.438 cv
241.688 161.438 242.063 161.25 242.375 161 cv
242.625 160.688 242.813 160.313 242.813 159.938 cv
242.813 159.938 li
cp
f
244.563 160.125 mo
244.563 159.75 244.375 159.375 244.125 159.063 cv
243.813 158.813 243.438 158.625 243.063 158.625 cv
242.688 158.625 242.313 158.813 242 159.063 cv
241.75 159.375 241.563 159.75 241.563 160.125 cv
241.563 160.5 241.75 160.875 242 161.188 cv
242.313 161.438 242.688 161.625 243.063 161.625 cv
243.438 161.625 243.813 161.438 244.125 161.188 cv
244.375 160.875 244.563 160.5 244.563 160.125 cv
244.563 160.125 li
cp
f
246.25 158.063 mo
246.25 157.688 246.063 157.313 245.813 157 cv
245.5 156.75 245.125 156.563 244.75 156.563 cv
244.375 156.563 244 156.75 243.688 157 cv
243.438 157.313 243.25 157.688 243.25 158.063 cv
243.25 158.438 243.438 158.813 243.688 159.125 cv
244 159.375 244.375 159.563 244.75 159.563 cv
245.125 159.563 245.5 159.375 245.813 159.125 cv
246.063 158.813 246.25 158.438 246.25 158.063 cv
246.25 158.063 li
cp
f
248 159.75 mo
248 159.375 247.813 159 247.563 158.688 cv
247.25 158.438 246.875 158.25 246.5 158.25 cv
246.125 158.25 245.75 158.438 245.438 158.688 cv
245.188 159 245 159.375 245 159.75 cv
245 160.125 245.188 160.5 245.438 160.813 cv
245.75 161.063 246.125 161.25 246.5 161.25 cv
246.875 161.25 247.25 161.063 247.563 160.813 cv
247.813 160.5 248 160.125 248 159.75 cv
248 159.75 li
cp
f
249.688 160.5 mo
249.688 160.125 249.5 159.75 249.25 159.438 cv
248.938 159.188 248.563 159 248.188 159 cv
247.813 159 247.438 159.188 247.125 159.438 cv
246.875 159.75 246.688 160.125 246.688 160.5 cv
246.688 160.875 246.875 161.25 247.125 161.563 cv
247.438 161.813 247.813 162 248.188 162 cv
248.563 162 248.938 161.813 249.25 161.563 cv
249.5 161.25 249.688 160.875 249.688 160.5 cv
249.688 160.5 li
cp
f
251.438 159.75 mo
251.438 159.375 251.25 159 251 158.688 cv
250.688 158.438 250.313 158.25 249.938 158.25 cv
249.563 158.25 249.188 158.438 248.875 158.688 cv
248.625 159 248.438 159.375 248.438 159.75 cv
248.438 160.125 248.625 160.5 248.875 160.813 cv
249.188 161.063 249.563 161.25 249.938 161.25 cv
250.313 161.25 250.688 161.063 251 160.813 cv
251.25 160.5 251.438 160.125 251.438 159.75 cv
251.438 159.75 li
cp
f
253.125 160.313 mo
253.125 159.938 252.938 159.563 252.688 159.25 cv
252.375 159 252 158.813 251.625 158.813 cv
251.25 158.813 250.875 159 250.563 159.25 cv
250.313 159.563 250.125 159.938 250.125 160.313 cv
250.125 160.688 250.313 161.063 250.563 161.375 cv
250.875 161.625 251.25 161.813 251.625 161.813 cv
252 161.813 252.375 161.625 252.688 161.375 cv
252.938 161.063 253.125 160.688 253.125 160.313 cv
253.125 160.313 li
cp
f
254.813 159.75 mo
254.813 159.375 254.625 159 254.375 158.688 cv
254.063 158.438 253.688 158.25 253.313 158.25 cv
252.938 158.25 252.563 158.438 252.25 158.688 cv
252 159 251.813 159.375 251.813 159.75 cv
251.813 160.125 252 160.5 252.25 160.813 cv
252.563 161.063 252.938 161.25 253.313 161.25 cv
253.688 161.25 254.063 161.063 254.375 160.813 cv
254.625 160.5 254.813 160.125 254.813 159.75 cv
254.813 159.75 li
cp
f
256.563 160.125 mo
256.563 159.75 256.375 159.375 256.125 159.063 cv
255.813 158.813 255.438 158.625 255.063 158.625 cv
254.688 158.625 254.313 158.813 254 159.063 cv
253.75 159.375 253.563 159.75 253.563 160.125 cv
253.563 160.5 253.75 160.875 254 161.188 cv
254.313 161.438 254.688 161.625 255.063 161.625 cv
255.438 161.625 255.813 161.438 256.125 161.188 cv
256.375 160.875 256.563 160.5 256.563 160.125 cv
256.563 160.125 li
cp
f
258.25 160.5 mo
258.25 160.125 258.063 159.75 257.813 159.438 cv
257.5 159.188 257.125 159 256.75 159 cv
256.375 159 256 159.188 255.688 159.438 cv
255.438 159.75 255.25 160.125 255.25 160.5 cv
255.25 160.875 255.438 161.25 255.688 161.563 cv
256 161.813 256.375 162 256.75 162 cv
257.125 162 257.5 161.813 257.813 161.563 cv
258.063 161.25 258.25 160.875 258.25 160.5 cv
258.25 160.5 li
cp
f
260 160.875 mo
260 160.5 259.813 160.125 259.563 159.813 cv
259.25 159.563 258.875 159.375 258.5 159.375 cv
258.125 159.375 257.75 159.563 257.438 159.813 cv
257.188 160.125 257 160.5 257 160.875 cv
257 161.25 257.188 161.625 257.438 161.938 cv
257.75 162.188 258.125 162.375 258.5 162.375 cv
258.875 162.375 259.25 162.188 259.563 161.938 cv
259.813 161.625 260 161.25 260 160.875 cv
260 160.875 li
cp
f
261.688 160.875 mo
261.688 160.5 261.5 160.125 261.25 159.813 cv
260.938 159.563 260.563 159.375 260.188 159.375 cv
259.813 159.375 259.438 159.563 259.125 159.813 cv
258.875 160.125 258.688 160.5 258.688 160.875 cv
258.688 161.25 258.875 161.625 259.125 161.938 cv
259.438 162.188 259.813 162.375 260.188 162.375 cv
260.563 162.375 260.938 162.188 261.25 161.938 cv
261.5 161.625 261.688 161.25 261.688 160.875 cv
261.688 160.875 li
cp
f
263.438 159.938 mo
263.438 159.563 263.25 159.188 263 158.875 cv
262.688 158.625 262.313 158.438 261.938 158.438 cv
261.563 158.438 261.188 158.625 260.875 158.875 cv
260.625 159.188 260.438 159.563 260.438 159.938 cv
260.438 160.313 260.625 160.688 260.875 161 cv
261.188 161.25 261.563 161.438 261.938 161.438 cv
262.313 161.438 262.688 161.25 263 161 cv
263.25 160.688 263.438 160.313 263.438 159.938 cv
263.438 159.938 li
cp
f
265.125 159.375 mo
265.125 159 264.938 158.625 264.688 158.313 cv
264.375 158.063 264 157.875 263.625 157.875 cv
263.25 157.875 262.875 158.063 262.563 158.313 cv
262.313 158.625 262.125 159 262.125 159.375 cv
262.125 159.75 262.313 160.125 262.563 160.438 cv
262.875 160.688 263.25 160.875 263.625 160.875 cv
264 160.875 264.375 160.688 264.688 160.438 cv
264.938 160.125 265.125 159.75 265.125 159.375 cv
265.125 159.375 li
cp
f
266.875 160.313 mo
266.875 159.938 266.688 159.563 266.438 159.25 cv
266.125 159 265.75 158.813 265.375 158.813 cv
265 158.813 264.625 159 264.313 159.25 cv
264.063 159.563 263.875 159.938 263.875 160.313 cv
263.875 160.688 264.063 161.063 264.313 161.375 cv
264.625 161.625 265 161.813 265.375 161.813 cv
265.75 161.813 266.125 161.625 266.438 161.375 cv
266.688 161.063 266.875 160.688 266.875 160.313 cv
266.875 160.313 li
cp
f
268.563 160.688 mo
268.563 160.313 268.375 159.938 268.125 159.625 cv
267.813 159.375 267.438 159.188 267.063 159.188 cv
266.688 159.188 266.313 159.375 266 159.625 cv
265.75 159.938 265.563 160.313 265.563 160.688 cv
265.563 161.063 265.75 161.438 266 161.75 cv
266.313 162 266.688 162.188 267.063 162.188 cv
267.438 162.188 267.813 162 268.125 161.75 cv
268.375 161.438 268.563 161.063 268.563 160.688 cv
268.563 160.688 li
cp
f
270.313 159.938 mo
270.313 159.563 270.125 159.188 269.875 158.875 cv
269.563 158.625 269.188 158.438 268.813 158.438 cv
268.438 158.438 268.063 158.625 267.75 158.875 cv
267.5 159.188 267.313 159.563 267.313 159.938 cv
267.313 160.313 267.5 160.688 267.75 161 cv
268.063 161.25 268.438 161.438 268.813 161.438 cv
269.188 161.438 269.563 161.25 269.875 161 cv
270.125 160.688 270.313 160.313 270.313 159.938 cv
270.313 159.938 li
cp
f
272 160.5 mo
272 160.125 271.813 159.75 271.563 159.438 cv
271.25 159.188 270.875 159 270.5 159 cv
270.125 159 269.75 159.188 269.438 159.438 cv
269.188 159.75 269 160.125 269 160.5 cv
269 160.875 269.188 161.25 269.438 161.563 cv
269.75 161.813 270.125 162 270.5 162 cv
270.875 162 271.25 161.813 271.563 161.563 cv
271.813 161.25 272 160.875 272 160.5 cv
272 160.5 li
cp
f
273.75 160.313 mo
273.75 159.938 273.563 159.563 273.313 159.25 cv
273 159 272.625 158.813 272.25 158.813 cv
271.875 158.813 271.5 159 271.188 159.25 cv
270.938 159.563 270.75 159.938 270.75 160.313 cv
270.75 160.688 270.938 161.063 271.188 161.375 cv
271.5 161.625 271.875 161.813 272.25 161.813 cv
272.625 161.813 273 161.625 273.313 161.375 cv
273.563 161.063 273.75 160.688 273.75 160.313 cv
273.75 160.313 li
cp
f
275.438 160.875 mo
275.438 160.5 275.25 160.125 275 159.813 cv
274.688 159.563 274.313 159.375 273.938 159.375 cv
273.563 159.375 273.188 159.563 272.875 159.813 cv
272.625 160.125 272.438 160.5 272.438 160.875 cv
272.438 161.25 272.625 161.625 272.875 161.938 cv
273.188 162.188 273.563 162.375 273.938 162.375 cv
274.313 162.375 274.688 162.188 275 161.938 cv
275.25 161.625 275.438 161.25 275.438 160.875 cv
275.438 160.875 li
cp
f
277.188 160.5 mo
277.188 160.125 277 159.75 276.75 159.438 cv
276.438 159.188 276.063 159 275.688 159 cv
275.313 159 274.938 159.188 274.625 159.438 cv
274.375 159.75 274.188 160.125 274.188 160.5 cv
274.188 160.875 274.375 161.25 274.625 161.563 cv
274.938 161.813 275.313 162 275.688 162 cv
276.063 162 276.438 161.813 276.75 161.563 cv
277 161.25 277.188 160.875 277.188 160.5 cv
277.188 160.5 li
cp
f
278.875 160.5 mo
278.875 160.125 278.688 159.75 278.438 159.438 cv
278.125 159.188 277.75 159 277.375 159 cv
277 159 276.625 159.188 276.313 159.438 cv
276.063 159.75 275.875 160.125 275.875 160.5 cv
275.875 160.875 276.063 161.25 276.313 161.563 cv
276.625 161.813 277 162 277.375 162 cv
277.75 162 278.125 161.813 278.438 161.563 cv
278.688 161.25 278.875 160.875 278.875 160.5 cv
278.875 160.5 li
cp
f
280.625 160.875 mo
280.625 160.5 280.438 160.125 280.188 159.813 cv
279.875 159.563 279.5 159.375 279.125 159.375 cv
278.75 159.375 278.375 159.563 278.063 159.813 cv
277.813 160.125 277.625 160.5 277.625 160.875 cv
277.625 161.25 277.813 161.625 278.063 161.938 cv
278.375 162.188 278.75 162.375 279.125 162.375 cv
279.5 162.375 279.875 162.188 280.188 161.938 cv
280.438 161.625 280.625 161.25 280.625 160.875 cv
280.625 160.875 li
cp
f
282.313 160.313 mo
282.313 159.938 282.125 159.563 281.875 159.25 cv
281.563 159 281.188 158.813 280.813 158.813 cv
280.438 158.813 280.063 159 279.75 159.25 cv
279.5 159.563 279.313 159.938 279.313 160.313 cv
279.313 160.688 279.5 161.063 279.75 161.375 cv
280.063 161.625 280.438 161.813 280.813 161.813 cv
281.188 161.813 281.563 161.625 281.875 161.375 cv
282.125 161.063 282.313 160.688 282.313 160.313 cv
282.313 160.313 li
cp
f
284.063 160.688 mo
284.063 160.313 283.875 159.938 283.625 159.625 cv
283.313 159.375 282.938 159.188 282.563 159.188 cv
282.188 159.188 281.813 159.375 281.5 159.625 cv
281.25 159.938 281.063 160.313 281.063 160.688 cv
281.063 161.063 281.25 161.438 281.5 161.75 cv
281.813 162 282.188 162.188 282.563 162.188 cv
282.938 162.188 283.313 162 283.625 161.75 cv
283.875 161.438 284.063 161.063 284.063 160.688 cv
284.063 160.688 li
cp
f
285.75 160.688 mo
285.75 160.313 285.563 159.938 285.313 159.625 cv
285 159.375 284.625 159.188 284.25 159.188 cv
283.875 159.188 283.5 159.375 283.188 159.625 cv
282.938 159.938 282.75 160.313 282.75 160.688 cv
282.75 161.063 282.938 161.438 283.188 161.75 cv
283.5 162 283.875 162.188 284.25 162.188 cv
284.625 162.188 285 162 285.313 161.75 cv
285.563 161.438 285.75 161.063 285.75 160.688 cv
285.75 160.688 li
cp
f
287.438 160.688 mo
287.438 160.313 287.25 159.938 287 159.625 cv
286.688 159.375 286.313 159.188 285.938 159.188 cv
285.563 159.188 285.188 159.375 284.875 159.625 cv
284.625 159.938 284.438 160.313 284.438 160.688 cv
284.438 161.063 284.625 161.438 284.875 161.75 cv
285.188 162 285.563 162.188 285.938 162.188 cv
286.313 162.188 286.688 162 287 161.75 cv
287.25 161.438 287.438 161.063 287.438 160.688 cv
287.438 160.688 li
cp
f
289.188 160.688 mo
289.188 160.313 289 159.938 288.75 159.625 cv
288.438 159.375 288.063 159.188 287.688 159.188 cv
287.313 159.188 286.938 159.375 286.625 159.625 cv
286.375 159.938 286.188 160.313 286.188 160.688 cv
286.188 161.063 286.375 161.438 286.625 161.75 cv
286.938 162 287.313 162.188 287.688 162.188 cv
288.063 162.188 288.438 162 288.75 161.75 cv
289 161.438 289.188 161.063 289.188 160.688 cv
289.188 160.688 li
cp
f
290.875 160.5 mo
290.875 160.125 290.688 159.75 290.438 159.438 cv
290.125 159.188 289.75 159 289.375 159 cv
289 159 288.625 159.188 288.313 159.438 cv
288.063 159.75 287.875 160.125 287.875 160.5 cv
287.875 160.875 288.063 161.25 288.313 161.563 cv
288.625 161.813 289 162 289.375 162 cv
289.75 162 290.125 161.813 290.438 161.563 cv
290.688 161.25 290.875 160.875 290.875 160.5 cv
290.875 160.5 li
cp
f
292.625 160.5 mo
292.625 160.125 292.438 159.75 292.188 159.438 cv
291.875 159.188 291.5 159 291.125 159 cv
290.75 159 290.375 159.188 290.063 159.438 cv
289.813 159.75 289.625 160.125 289.625 160.5 cv
289.625 160.875 289.813 161.25 290.063 161.563 cv
290.375 161.813 290.75 162 291.125 162 cv
291.5 162 291.875 161.813 292.188 161.563 cv
292.438 161.25 292.625 160.875 292.625 160.5 cv
292.625 160.5 li
cp
f
294.313 160.875 mo
294.313 160.5 294.125 160.125 293.875 159.813 cv
293.563 159.563 293.188 159.375 292.813 159.375 cv
292.438 159.375 292.063 159.563 291.75 159.813 cv
291.5 160.125 291.313 160.5 291.313 160.875 cv
291.313 161.25 291.5 161.625 291.75 161.938 cv
292.063 162.188 292.438 162.375 292.813 162.375 cv
293.188 162.375 293.563 162.188 293.875 161.938 cv
294.125 161.625 294.313 161.25 294.313 160.875 cv
294.313 160.875 li
cp
f
296.063 160.5 mo
296.063 160.125 295.875 159.75 295.625 159.438 cv
295.313 159.188 294.938 159 294.563 159 cv
294.188 159 293.813 159.188 293.5 159.438 cv
293.25 159.75 293.063 160.125 293.063 160.5 cv
293.063 160.875 293.25 161.25 293.5 161.563 cv
293.813 161.813 294.188 162 294.563 162 cv
294.938 162 295.313 161.813 295.625 161.563 cv
295.875 161.25 296.063 160.875 296.063 160.5 cv
296.063 160.5 li
cp
f
gsave
0 0 mo
0 195 li
300 195 li
300 0 li
0 0 li
cp
clp
0.1875 lw
299.875 0.75 mo
299.875 166 li
32.5 0.75 mo
299.875 0.75 li
32.5 166 mo
32.5 0.75 li
299.875 166 mo
32.5 166 li
0 0 0 1 cmyk
@
grestore
0.1875 lw
0 lc
37.875 166 mo
37.875 162.813 li
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ArialMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 48 /zero putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/period <1C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |-/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3ABC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A10425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E31D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A5B546505C954A88> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/JFFOID+ArialMT /ArialMT findfont ct_VMDictPut/JFFOID+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero 207{/.notdef}rp]JFFOID+ArialMT nfJFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf32.2188 176.984 mo(0.)[5.00537 0 ]xsh38.9766 176.984 mo(0)sh72.1875 166 mo
72.1875 162.813 li
63.625 166 mo
63.625 164.063 li
55 166 mo
55 164.063 li
46.4375 166 mo
46.4375 164.063 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOID+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOID+ArialMT /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/JFFOID+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two 205{/.notdef}rp]JFFOID+ArialMT nfJFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf66.5703 176.984 mo(0.)[5.00537 0 ]xsh73.3125 176.984 mo(2)sh106.563 166 mo
106.563 162.813 li
97.9375 166 mo
97.9375 164.063 li
89.375 166 mo
89.375 164.063 li
80.75 166 mo
80.75 164.063 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOID+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOID+ArialMT /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/JFFOID+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 203{/.notdef}rp]JFFOID+ArialMT nfJFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf100.906 176.984 mo(0.)[5.00537 0 ]xsh107.656 176.984 mo(4)sh140.875 166 mo
140.875 162.813 li
132.313 166 mo
132.313 164.063 li
123.688 166 mo
123.688 164.063 li
115.125 166 mo
115.125 164.063 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOID+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF193628C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766FA7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOID+ArialMT /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/JFFOID+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]JFFOID+ArialMT nfJFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf135.25 176.984 mo(0.)[5.00537 0 ]xsh142 176.984 mo(6)sh175.188 166 mo
175.188 162.813 li
166.625 166 mo
166.625 164.063 li
158.063 166 mo
158.063 164.063 li
149.438 166 mo
149.438 164.063 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOID+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C071A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D17DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63B1FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F603BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A7EFB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C95219571FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A1A19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A55977C35> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOID+ArialMT /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/JFFOID+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]JFFOID+ArialMT nfJFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf169.594 176.984 mo(0.)[5.00586 0 ]xsh176.344 176.984 mo(8)sh209.563 166 mo
209.563 162.813 li
201 166 mo
201 164.063 li
192.375 166 mo
192.375 164.063 li
183.813 166 mo
183.813 164.063 li
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOID+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92FE1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOID+ArialMT /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/JFFOID+ArialMT*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]JFFOID+ArialMT nfJFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf203.93 176.984 mo(1.)[5.00586 0 ]xsh210.688 176.984 mo(0)sh243.875 166 mo
243.875 162.813 li
235.313 166 mo
235.313 164.063 li
226.75 166 mo
226.75 164.063 li
218.125 166 mo
218.125 164.063 li
@
JFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf238.273 176.984 mo(1.)[5.00586 0 ]xsh245.023 176.984 mo(2)sh278.25 166 mo
278.25 162.813 li
269.625 166 mo
269.625 164.063 li
261.063 166 mo
261.063 164.063 li
252.5 166 mo
252.5 164.063 li
@
JFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf272.617 176.984 mo(1.)[5.00586 0 ]xsh279.367 176.984 mo(4)sh32.5 160.875 mo
35.6875 160.875 li
295.438 166 mo
295.438 164.063 li
286.813 166 mo
286.813 164.063 li
@
JFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf25 163.844 mo(0)sh32.5 124 mo
35.6875 124 li
32.5 133.188 mo
34.375 133.188 li
32.5 142.438 mo
34.375 142.438 li
32.5 151.625 mo
34.375 151.625 li
@
JFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf16 126.984 mo(200)[5.00537 5.00537 0 ]xsh32.5 87.125 mo
35.6875 87.125 li
32.5 96.375 mo
34.375 96.375 li
32.5 105.563 mo
34.375 105.563 li
32.5 114.75 mo
34.375 114.75 li
@
JFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf16 90.1328 mo(400)[5.00537 5.00537 0 ]xsh32.5 50.25 mo
35.6875 50.25 li
32.5 59.5 mo
34.375 59.5 li
32.5 68.6875 mo
34.375 68.6875 li
32.5 77.9375 mo
34.375 77.9375 li
@
JFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf16 53.2656 mo(600)[5.00537 5.00537 0 ]xsh32.5 13.4375 mo
35.6875 13.4375 li
32.5 22.625 mo
34.375 22.625 li
32.5 31.875 mo
34.375 31.875 li
32.5 41.0625 mo
34.375 41.0625 li
@
JFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf16 16.4219 mo(800)[5.00537 5.00537 0 ]xshgsave
0 0 mo
0 195 li
300 195 li
300 0 li
0 0 li
cp
clp
299.875 4.1875 mo
298 4.1875 li
299.875 13.4375 mo
296.75 13.4375 li
299.875 22.625 mo
298 22.625 li
299.875 31.875 mo
298 31.875 li
299.875 41.0625 mo
298 41.0625 li
299.875 50.25 mo
296.75 50.25 li
299.875 59.5 mo
298 59.5 li
299.875 68.6875 mo
298 68.6875 li
299.875 77.9375 mo
298 77.9375 li
299.875 87.125 mo
296.75 87.125 li
299.875 96.375 mo
298 96.375 li
299.875 105.563 mo
298 105.563 li
299.875 114.75 mo
298 114.75 li
299.875 124 mo
296.75 124 li
299.875 133.188 mo
298 133.188 li
299.875 142.438 mo
298 142.438 li
299.875 151.625 mo
298 151.625 li
299.875 160.875 mo
296.75 160.875 li
295.438 0.75 mo
295.438 2.625 li
286.813 0.75 mo
286.813 2.625 li
278.25 0.75 mo
278.25 3.875 li
269.625 0.75 mo
269.625 2.625 li
261.063 0.75 mo
261.063 2.625 li
252.5 0.75 mo
252.5 2.625 li
243.875 0.75 mo
243.875 3.875 li
235.313 0.75 mo
235.313 2.625 li
226.75 0.75 mo
226.75 2.625 li
218.125 0.75 mo
218.125 2.625 li
209.563 0.75 mo
209.563 3.875 li
201 0.75 mo
201 2.625 li
192.375 0.75 mo
192.375 2.625 li
183.813 0.75 mo
183.813 2.625 li
175.188 0.75 mo
175.188 3.875 li
166.625 0.75 mo
166.625 2.625 li
158.063 0.75 mo
158.063 2.625 li
149.438 0.75 mo
149.438 2.625 li
140.875 0.75 mo
140.875 3.875 li
132.313 0.75 mo
132.313 2.625 li
123.688 0.75 mo
123.688 2.625 li
115.125 0.75 mo
115.125 2.625 li
106.563 0.75 mo
106.563 3.875 li
97.9375 0.75 mo
97.9375 2.625 li
89.375 0.75 mo
89.375 2.625 li
80.75 0.75 mo
80.75 2.625 li
72.1875 0.75 mo
72.1875 3.875 li
63.625 0.75 mo
63.625 2.625 li
55 0.75 mo
55 2.625 li
46.4375 0.75 mo
46.4375 2.625 li
37.875 0.75 mo
37.875 3.875 li
32.5 4.1875 mo
34.375 4.1875 li
@
grestore
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOID+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/parenleft <1C60D8A8C9B81F2C3A069EC278D0AA8AE7E32C29FB8AFD2B6368260D302C905A973F0B3449ED9E18E81E16B7B273530E9BC14ED76D4376A01C0A577DC235F833AFCC30669C812FBF097879E1> |-/parenright <1C60D8A8C9B81F2C3A30D3A3F0A8D738E712823A2480470C32A2885DCE4A77E926C520C7B7E1016BB28443D8E7B8AC0F7C4F3BD721C19F19D4714AF52ABD0227B6CDD854C568D5A6F3817645C5> |-/E <1C60D8A8C9B64EDFFB83C6241DB110BEE5AB2FAD9D94B39ED5E81E7411B66E9361DDE78FC667AB91EF9824> |-/H <1C60D8A8C9B6079F62EE7568E8B09CBA01F57B4ACE6DA24AC6EA79287DF31270F7DC42D147A6FAB1DABB6C> |-/N <1C60D8A8C9B6079F629170873C67115641D0B6890161EC48F71E8D2106F3AC927984C1E464F121F968> |-/P <1C60D8A8C9B64EDFF4950CC53012D47AE97D5586315BA2F5162B63CEC117C5379A1B3DB174CB2C739C68916A1E99A346AFF71DBF25658867D9AEF1BF3C47CE1BA73978E8D0D40E52B85A56E08A1369D85E15B0A0C517291916FF6E61D0EFBF59B4862165C7DEA15B42BE3811C2CAA25C54> |-/V <1C60D8A8C9B64EDFFB759009DDECF50F0319B844741E3CEB2C0ABDDB89E7563FC0955B866D61D9CC736D3C346A5623E20C1E4D> |-/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177B5D88A> |-/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF626A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA1EAAF79B76AA2B52CCF0307B360E6D> |-/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36548FE63FC8465B1B685766E782F0> |-/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37295284C077711C162623860AACA404F650F8D516970257> |-/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |-/g <1C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817A065D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D559B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0C247BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667DC9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FBD88F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF575C72F67F4BEBB98F8AFA57505EC9> |-/h <1C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E131450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD41AC970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2DFA8> |-/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B171C8A80AB> |-/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-/m <1C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519AD5BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD99C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176AFB9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D55C54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE37B> |-/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5203A8015DD09B7CE> |-/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F518C54BB58C51D6FB6D0C8> |-/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619ADD420F549AB7C795751D32E8EE6> |-/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F4172D53C8FCAF4D28F2B78D3A4BF03> |-/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F5C42C88FB43C> |-/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793990906DA8D7F8ACFF6D70790F06B02> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOID+ArialMT /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 69 /E putdup 72 /H putdup 78 /N putdup 80 /P putdup 86 /V putdup 97 /a putdup 98 /b putdup 99 /c putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putpop%ADOEndSubsetFont
/JFFOID+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 12{/.notdef}rp /E 2{/.notdef}rp /H 5{/.notdef}rp /N /.notdef /P 5{/.notdef}rp /V 10{/.notdef}rp /a /b /c /.notdef /e /f /g /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 138{/.notdef}rp]JFFOID+ArialMT nfJFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf132.453 192.984 mo(Pulse Height \(mV\))[6.00293 5.00537 1.99951 4.5 5.00586 2.5 6.5 5.00488 1.99902 5.00586 5.00586 2.5 2.5 2.99805 7.49609 6.00391 0 ]xshJFFOID+ArialMT*1 [0 -9 -9 0 0 0 ]msf8 130.859 mo(Number of Electrons \(arb\))[-6.5 -5.00488 -7.49707 -5.00586 -5.00488 -2.99707 -2.50049 -5.00537 -2.50049 -2.50049 -6.00293 -1.99951 -5.00537 -4.5 -2.50049 -2.99707 -5.00537 -5.00537 -4.5 -2.50049 -2.99707 -5.00537 -2.99707 -5.00537 0 ]ysh224.334 165.499 mo
224.334 1.49902 li
0 0 0 0.313725 cmyk
f
0.5 lw
4 ml
[2 2 2 2 2 2 ] 0 dsh
224.334 165.499 mo
224.334 1.49902 li
0 0 0 0.380392 cmyk
@
259 165.832 mo
259 1.83203 li
0 0 0 0.313725 cmyk
f
259 165.832 mo
259 1.83203 li
0 0 0 0.380392 cmyk
@
1 lw
242.334 165.166 mo
242.334 1.16553 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
JFFOID+ArialMT*1 [12 0 0 -12 0 0 ]msf129.667 82.668 mo(V)shJFFOID+ArialMT*1 [8 0 0 -8 0 0 ]msf137.671 82.668 mo(e)sh%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOID+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/x <1C60D8A8C9B7A73DB920A1A3B81DE7234ACAA5546B4C65820CF3C50E1629C5A6423BAA34A2ECA8C7FE4B71726AC6704CC23AF1725AFB30D2892FC1BDDAFEAD7BE7BD65F1051699CCF4B0> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOID+ArialMT /Encoding getdup 120 /x putpop%ADOEndSubsetFont
/JFFOID+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 12{/.notdef}rp /E 2{/.notdef}rp /H 5{/.notdef}rp /N /.notdef /P 5{/.notdef}rp /V 10{/.notdef}rp /a /b /c /.notdef /e /f /g /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 2{/.notdef}rp /x 135{/.notdef}rp]JFFOID+ArialMT nfJFFOID+ArialMT*1 [6 0 0 -6 0 0 ]msf138.667 76.668 mo(max)[4.99805 3.33691 0 ]xsh%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOID+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/equal <1C60D8A8C9B7F374869C4D81D9B128A787F701C3A1164A793E363981F7468DA1474C45> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOID+ArialMT /Encoding getdup 61 /equal putpop%ADOEndSubsetFont
/JFFOID+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 4{/.notdef}rp /equal 7{/.notdef}rp /E 2{/.notdef}rp /H 5{/.notdef}rp /N /.notdef /P 5{/.notdef}rp /V 10{/.notdef}rp /a /b /c /.notdef /e /f /g /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 2{/.notdef}rp /x 135{/.notdef}rp]JFFOID+ArialMT nfJFFOID+ArialMT*1 [6 0 0 -6 0 0 ]msf150.667 82.3345 mo(= )[3.50391 0 ]xsh%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOID+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plusminus <1C60D8A8C9B79676F4DD3F58FC397518D3361350FDA6D76C93E64F8E1A9BDBDD37CD798600C9B93F798A292852ABA36FFCF3B239D5291F1CA231> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOID+ArialMT /Encoding getdup 177 /plusminus putpop%ADOEndSubsetFont
/JFFOID+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 4{/.notdef}rp /equal 7{/.notdef}rp /E 2{/.notdef}rp /H 5{/.notdef}rp /N /.notdef /P 5{/.notdef}rp /V 10{/.notdef}rp /a /b /c /.notdef /e /f /g /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 2{/.notdef}rp /x 56{/.notdef}rp /plusminus 78{/.notdef}rp]JFFOID+ArialMT nfJFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf155.838 82.3345 mo(1.18\261.10 mV)[5.00488 2.50098 5.00488 5.00586 4.93945 2.5 5.00586 5.00586 2.5 7.49707 0 ]xsh3.239 ml
[] 0 dsh
165.334 10.9165 mo
65.3335 10.9165 li
0 0 0 1 cmyk
@
161.639 7.31494 mo
165.174 10.8501 li
@
165.492 10.5317 mo
161.639 14.3853 li
@
65 13.9165 mo
65 7.9165 li
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginJFFOID+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6079F6249419CF69509002AC79A016C34D114AD8C7A9DD2474EBE314027FB7E1F48C795DC0A22C11652551956D26D402DBF3954D5C55EEDC4D2E02D32263ABBF714C52111C5848A3EB8C8B527B0FF3362F75E292ACAF79767633E5CF98F1E087651E36E4721AF4CBDAC7E4D68359E9108BDBBEA294A0489068CBF65F37E7CD4C7284AEAF641D010DF> |-/M <1C60D8A8C9B6B41CBB4B6664BFFC865F56E6FEAFA79E7B90883C1C68AFB379AC174B0F8DCC9294E2C26BD06BBA9FD3867F8768651EF4BA798B4F538FCE8F80AF5A83421F8F> |-/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D9621458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-/y <1C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140AAA18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F5836B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA7348AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |-systemdict /gcheck known {setglobal} if end {end} ifendJFFOID+ArialMT /Encoding getdup 68 /D putdup 77 /M putdup 100 /d putdup 121 /y putpop%ADOEndSubsetFont
/JFFOID+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 4{/.notdef}rp /equal 6{/.notdef}rp /D /E 2{/.notdef}rp /H 4{/.notdef}rp /M /N /.notdef /P 5{/.notdef}rp /V 10{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 2{/.notdef}rp /x /y 55{/.notdef}rp /plusminus 78{/.notdef}rp]JFFOID+ArialMT nfJFFOID+ArialMT*1 [9 0 0 -9 0 0 ]msf83 23.6675 mo( Decay Model)[2.50049 6.49951 5.00537 4.5 5.00537 4.5 2.50098 7.49609 5.00586 5.00586 5.00488 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/JFFOID+ArialMT*1 uf/JFFOID+ArialMT uf/ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (steven schowalter) ()%%Title: (Electron_Energy_Cutoff.eps)%%CreationDate: 3/8/09 3:45 PM%AI9_DataStream%Gb"-6G@)godkJ:=JF<If8=i4-+;km"Qk]q&U*L&sI@]P^rTr:h4eZMU6o_CEZb)gd!G84,6ZlCO`GVk<5FN+p^#;J1oP_aoa&t@I%o'SL6(=FXuf3@WJM,U0);)U#%W.MucB0Hl^Z\ur(,>P.j;1CEjB&&))XeGX!omr^Ag^dl/5PgF&hf!YOWE76;i=$IG9mWr@kmd=D%H9NDEHX^&`+BOI[bItVl*_cj@R6)F#i?$#uoCH;'HSutQ`C\&i@hWfcB]?`_VPk0,5Ob/tXpmJkGuqXD]b.la!I?k^#K\=lI4``V%BZR,T%eZc>qJ\c^/E:?;a]KI4MN&sGWL1K[+)F')69imLQVML;s3m8.d@8E.X]]R!HjPmHDoBK%hjTB=Qnand`nc#'NBX?!;Fr]5%>`.QdG9ic!-W'3/2=a]M\G/iqr(dM_\^MMC7ak-gi/:os5Un^\?2+='NBP7dmKC^r]3"U<3,&eJ!*BZ-1jSJ1e.qk*d*fPfILDga%id[Kp8IF7[-6M4UiQ.r^LJd&3a<NMPp!t4)16lTI2p]P(n7Hd#Hcu"#)K@g,80luBRq%XqG_qZS:Z*"OJiaj:g>['u;MUnPW'ILG%M'hBe:"T3:pX'plUjaVZPtA0[:19<0VoT,2H8J(h:Wrc0+45%?1N=i9)<"QR<36DMd-3E%i8t]Hfs'!/=Rdha.cppbaJ0%`(0e*\%]$'XnhH^lrFm&eK!4>r$-OB408AJk!%A/?+Hrgm;>7f_l+M^oA+A^0lGal@283eU,[01kDWC-e[,nf=F>\?),A^Y9@P=C&kFug)/%dV1*5^Yfbt'add;:k1J4"aEon5acX1SsIQV"MA"m_t.o:]L.!=qFgZP=sQo&:&2=B\@h;;V-m!d$)M$'njpkY(_M-^)&Ns5_RO/J%OEY,,n-N/M,5?h[#b4H10I$:FEPj`jKeYl_"Ic-7-jAX_:FK-o_``9oT]ZHt"H!=Sn4DI^,:C/PI4'FfX[CFr3Kd$s5:?]qK28G&%bTIc\Gt)BS^7c7":S(tr(%Nu9%mJqZ7RuS_5"X)Z%X^Sl(a"-g=X7*9i(D^Y(1eJ9T$-mRcPbshJNB#>E0K6I7S\7?4X^1Pm?3q"%q'%-G5:?W/P;*_?#B,f'PG^)upk2NJ^L;Km-KJJ-KJG5BQWM1CR<Aks8.,R4AK7"U7E.7L3PcD]$Sl#/F%Y@cH:OW'g*L]jT$&o6%O,`cP9$+3!g<'6Q3Vam_-^73,RER[B%B6%[rs8V(e5"k?H"C_j.8,DZMYdOgA\;+7&)L?,8>^KOQ=VJFo)Lq:+UN(fd#e,SpK)7!%e4\ZZ3#;P12rTXaoZ-RaM>BsG@PMo*IZm!_(Wdco:]2ViaX"Dt^WBh47BTQ<\a>XRQckL=l8SO^kK1..:&\DS@ZfGC^WBi^7'>'Y%o#E50KV-0;_'bXPE\1X\D_sXA<f"`<7CH;Nk>LdkrlMqJs5dnS)m*%3Ph)1T\"/l:QR-RFIOCu\\:`LmCl*$Krp\`#q<!R_[Ih__%osH*(aeE\.W!Cap9)CN)hG0Br6FdrVd<,FQ_lmTJ1TDY>C$O).@q,eJo>sn@LupQ\mdY"i"2C7i+bAo(&1MY`br?76P"#/a[3T_G%C%ql#_EW:cl$jPZ>q'HF[(\NWVB\hIfYX+oS;[cI-hikL[i'X`i<t(+]WEhYTYdPUHSRc6peiFp-I4J5'4sU`-gi5OP%1=#8JjnJ%.H<F[*DQR`pC-4)C'X0^HQg]ZJMFu/Vuq>KcNsHj(%dWL_.XCgUbl0s[jUi:_Q'mEla#$D17sNsI$2]4r.5]*.<:c^$,?82gl``L%16i]:<MDcI)_p-R5`_"c+jL1&K)59gVA'G[;?H:GFr.)URDV"PZ,P,-39*?2<6/!6P6Cd0Y8k+5nrgSl(hGaT1)J&0R#8*l=d!_k%i[t:F5c$T:;LBiDEsHDC,i$gg%nkc1BoK2(5>UGFQt'B&?4S]@75AMMa!Kc3_B8:iT8$KIqaJuC'okr"ZcM:*BB`qE6V-3t(se1\%[1#$fmfgAK$Yh=omU/Fs.X]TkHD\eH!S#96PQL<L!]c/,bF#-n)>qB8Vtu^tou'I9F?J^b8cAS7rKDO[oh_MoH#8^i1nd-J/cg`;%:jWZtX(!VkJ6/+makP5pWdR5ln7h)2IX@c4k1Bi[WVDKu9:XK`h8;B#UW7?'d\Mo,arD;g+3uV)+6!/Q\PCR_oNra5+SSsS<0R./%@uj6Q"G/>bW4-K;Vb,Z2'C:p-]e[LPF5pS0iLjF'iJIiQ_Y$dQ1W2UKl<1niD')=[0dKJeAj+Hi5Ei>^]o?`lj\91'PEeL2Xj@=F%[NLWL)6>%qKsUn34KX]HYYC3K\?HUES5#-tFHjDi9;t,!=a36PF6T$Dfp-iA3k*OP+=&E45]u\fN3&^`F]G57c*pGCPpK/OG#3O-%WtH.]7YL<%i2Ju]`(;d46Uu_1r^1a5Q6?@Fjn5*Jb>=C6&6UbEK8N"Q'`U,4Gle^`H@kfojTt@6n,o)J@2ZCFUbO(faRT@_d\<hA%8d9BuN7KokcS7W%Kq'F=8MYB[m2,C\`\Gmt=_<im\A[]B&j9C#"6:@[1?k>\%2%:NC`OYfMoYTl>[TQ`l7&\$U9I,'/#3+OY$kE`%X<nq'<cqu:<u#jpOh%2[jV[<.M)GN!C<,AsA;n?fDi.pZBm!jD+l?sm9k#P1(>$kj/_A@T]I_+'&<XtLYi_$c]NW05DCF]5,nK=,%8**fCcQPH4/[P.I.usZm<M^_rhAPm.8HMuS<"2gcT3Rk7oq?*@j]-XV_0;T>8\)=!5-"IHAM7%IWg.,<d^THTJ)e%OAU,$=b1*fb%,H^r;Y<]"oa%rgjXm_Sd01i?F4OF.*aV[O/>;$A`**h62N8GOI,b,1:^UV(CFd.$_1(e@u_T;jMnp#UoHq[*%\5]LM-gCHX9,e3p%0ifc%TRckV,GSVQoiS>g'%T]tK?#Pp@O[UpbBX"g.r<c"Jn;n:'%a=qEmM-q.q)("<`IgnJgWs%+kiI1c,n[.>,0fF0U[=/A*=A<%lbUS8".`:,T2`F;'i7Dp8mL*M8[PK`$V2KoRZBt,0o]ch5q5<=lK!B\GfYgi.6`9irM!+h>;W5[d/BrSU#ntd[)I"sXU*Z<iO^N!%2)Aa!FfLE0Bf1Tb=e-:q=&\-.JI\3f[cSQ5f7fG=N@@gnfc5sMKDs1AD)#':CM4.*QJbl;d.27hhg2A%Yq([8$e6BkYG.,OX].dF%hL&;E1.<KYrt2Wb64W[_EMBlW/1](g]<PMd$eF16]>,.j7@57V^=!8j"$0>Q-BH06?>,?GNsYT"4;J$I%*$4IjpMe)A\Mb9VR/BB%SWkMT9Tgj?&s/LaNc*NPmP1:pBe?S00ASfg(W+WFr6Oo[2SUA1>2^lWb@;aK,1DfL?^h">on0eCp`k;/NjtC*3*cj(NMr=BREA6i%ZtG8qK"`Mh.*t#6)SZ#(Om[LR!FS8?HCP]YBW4Y0r7b,K?7M.N9Z<*XbZ,76"Oo4Kooqs%!=p[qenkNu(XUPpZ\kgW(2L%.ZI#H3%[7%b^)QYHD;Vr\BnZ%Ruo9f+M>i?d+9!KS7>QLc2gUC)&,[SMh6jlm@%-o_RoM8,"P&6jc_];tEEb*FXB1@HY,kk[d9^64T_,PGF%.\Y3=a>Pf__,ukT^6<K$j4!3VH5h=L]HI/(-N+-"0$4.P+,j:7#C9VfAe/;XI$2%a&WWF!*"Dj"jH\V:11L;-11Pj$/4b,T?f?Le%_Cg6]rdd_\iL;sMf.i0'Q&%jCGW4nr$@3"gK6`Sm+W\Ih.A7(cSU;0m<"]<!$,2&8-/])lL%TLQdAu>X__WXs!Qgjj;<H[@pb(Xt%I=fG$S;h),@d?UP.=^J(Dq7jgqQ9E(fp1-Te`qa0V7$>'?O`5cR%9IS[%L$ijR#irY$I1X%5iN%qd6iTVm#?VWtM\dg@1'?FlOoT%J#iOp5u$nR!Igtn5[9Itad$[`J859Fjc6.'/<lLPgS4[NjURI/%+'qFr$3$YU?0Hs%]M[UHj"Ji@Ok0r=A=,mA8e!6F/<HK&[><W%IKLc[C[6QNnO^8MWZ>HK"_8t5K1YLQ2CQ*OUUT;GWm?:LcW%u!iD-OHs.M)6a+1Tu9iZ(dmYPBtbc0Wdh]R6D@^hO`;Go`#nf"OA%-=t@(i[62]Ek<#cUf>Q9Bo7oXOKCB:;aRa&618>'P<:en?a`,>5#:aXXMr<[9<^6X8U4cNP%S+/@M.Lf4>t_CYP(I-PrpSNSh&O,%,[1o9+=W*3i$J4K.8Stb)C&,nJt]Y1lp;7,q,J7@+O5$XLDO8j7fC^>H)CMZ:Th[iI-c0"$#/O75+7>WhXI9n]$guJA((3DKKqsQ%fBnD.oOQ,*-Km0_k_S&$^Y`KmXj2;@12!q"^FM)&E\SBZ:u5lJ+t[%=e*?QPSb_3W0E0/%e2$+`(9Y:p="`Jk?&V<\'rb8'jjbEO%^.6?<W%pN4bRdkE@Rd0[Lm/oWAOfAG&a@H.'V1G^F1%s)R4Dj\XcF!4_K8W[7?QgWGVdg:39e=/VIBcs>FG2th\TqL\2=9mN'A3P%`h53U[eg>&'--:qC?mXGdJ2%`p[L7RAs67s*4.'M%-`Dm>]_roFiAPO=(9IQrRUViV;*!`kL2_83*-L0hg`Qf1RRKH],&Q2hkNd;%>sq]cL*HO:[&0C>+"lUU/Tb?7rF[`X@?B<mItipWDl;J2i1C:eHC\(Y]qE%2hB/H5?0oSO*)3h#(sVp:qb4[IO:_<fhAA^G*Oe'R%P9Z9RPE8N8.PW0`O^T&KM%L!f$R7D.0s4Ki+EcZooffq>mJYK9"As]H_#-Loofd)P)(j)\,MZ3k.8%AF's>j$]_Bd'-1jGS1Lnq[%W!`l_k?=^gG&&QW*Q/bmkj3@IT-=th0f]S09@WDM_2OQ*\Inp;NSL_bkZUmleOZBT;WsXN:EK6j.FB7a)K[hGnu)pP24aFXl>89g%K2uUdpc]9]YuV)C"<hJGd4XR&55](gk(A+u5!sEO)N*EGVhNuKh3;l[G5Sjq1S#&pN;F#H,XLa`9pLI(&Yp(NgeB5n?O?+L@cUaP%r.kKIh`R&/&C6PIGMc*Vim"+#k^)5$S4'r+/h&I["QIb?eOLD^VDilm,V]*_&Jbco(I3@FCr&NVKo8TD5[T>]B;k'4n,8eCr?'t]%I:bSZFlsc5rB4-?%/:[>5*]a*#NA7smGcQ6"q`rDMOR6dRFW4gn?:?"FG_N)rE7=gF"mte&RkX!3;a?DI#NcrI>"oNlT^$qW8D.,%[q=]@!kK][jTV(XLduZ[NT!I/H-r7Z8!V205->@P7kT:o4)0]AMq77DSaReDRKhQq4`]d6DkO`8hEN3p(N&ib!R(=W-BMX)iBD10%+bkeZQ>WY9Y33KdBOB/0#=@c)megTZrH-qU7X_+_g.+aoV;(btPlL2cirZtL4<G2,0=E,@d'o7/bl6p36)Dh15S*maCG3'Aidt7m%?H8uFKBGj"jOk0*Q2@\?W4n<Gj_kB;M(-%q*N7U]h73O2e*2eBIukp1Yck/W^5jTC$>fKTC&!bA+-!6p.X063jM#D(``?*W1a.n4%721@<=U!i!0SVtLp[r07/E6*C50LIs[0&8R[t_#A)rF_s"SRK;(\':59-X+p9&m_\C"=)W=S'HfGljC0ZTj9#]9nd*P%O3;4+k+$%*206sZdqB`LL&,HDh&\/r02>rU]2Dg3STC5hu>tYa6:P[](I.hb^Jc*H=>W8FSGbAQb,a<4;l22bDhnf48LjK'/I+IWEnJLg5Z&/%]CB6C2t9Q.-@`#Ne1\5!rge4Xp6XLpI];.1i`H%2nLOU*p_Eg%r/1M#I`;="^Z'a"?h(nLYCp9B=2HW\/)ciiQ1.HE9)']]-2\Cj%&q5[E$,=E^KO<_?_CtG[fIucqfIucqf`,r?on;bAk5Etk9uHOV+7Sa5Kl3P!m.WW)3gt-FCX/a-=Go[a^T,3+)?MNpI;q.YESiG'%c?lVLVZdV.rdS/\qmTgP>Sh[^+*)GG=<d%/3dM,KL5?;>@e/GZnqbq^TUPmR\rA2fh))*9lDqS&%.QS@)>P1Z#$gi*l_HE6@sBRN%gru&9lF[#T<js#5aQ79EDC.RdTj*0#oUFXqjBL+'BVm<1lM%1:<g%Y_2:SkF475PZXdF4.1[7cWSNXGH=**QeZ]Y-b"Wk21s+n6)%dEp\/el\HPVnKpZO/Gq@#HeP/ZmN-QW&<hN40T5*H1$/C't_0T^od$D"*E!/p,\s$+rG9U^tTjl<ksC%Y\n.s):[ff7%B,j2p`JB%Pds#\T:sjG!JlL%n";m5O!CTT8Zt:LM%Ve8ggnir_#B\$fKfC7WQo.[hjoQ9biME]T>JY8cWC7/h`%&`s(P3)HO.nPJE`g.[/+jS%/DQkdPT)+AQ?k=:>l?=0%U(\W#Cu'"3o=Du$"W+[)a_bKa49V:*QC&D@me=g8;rXorV5U))k-a`+i.;J_U8.*X`e&nK(ud\qS.m6%1]KE]FX[+0(_+CKbbqepi-.37ho!@UZisn`a9d[@S>,%NV[M"@s.Z[o^O]"Tn,N2:?B'H&%&Wu0kC5QHk0e7F&g[Z`FuLB+V[,Rc%:8V,Gq7B=&?s1)brMS8<I6&7.<:G):"IlUK%-V%g'_ptrO`unp)9j6NU\XN9UJ]NDZXL421F*7U`V18'W78qf(>np@=S+>W],o3E%*>.`Ir9LCI>+9uQ$NkD"l67Bbh0u0Om)O9N1-mn9/ul/$<l2-0GK"e]Ra3*efKBoJS`t*!=)n^]NlaM[Hh<@Y)1u@3CAgJsh]'0h%,7l$uF[Prr8/;R!3]!=$7c,uPF26f^,EAYn"C$L&s+m6!B]<p=qQ41=d5&X[DAa)ThK/l^1V;BQ&W%_OE<@]:"Z+Q*3;lf-:"Y[u%)2BcDruN@i)i_]46%YbO.hks35+dg3!UK#rb%NZ%["d%L$fOqF&$!+jF\`bL=!A\%ihco42i#C5G?P\iCSg1RI#LjhQfY2]D2U#F%m6ij2fQL:Ea_<*]6H7@kKZrj^[l8*1Hi;gfO"tK+)D,(_lE0$c]_*GZ01KGsl5%;s%K!gSqpj7+<E"N@nQKpiT,KG!V.>#(C%];?%6'nDUgji-#Xic\9k&a(VY1R%HOIJ6LbqtKh=BW5F#&M3LF@-_N$3OPOJs^h-Y,9]g:"(A'<_@5N^9b<oN4R(b?__cY9eha.SgEZ[%NR:uSb4lOU_pT?jIeUj!`#$,iQAn3Nr+%9DmqAIP7Odh1*08eblKD9HL4UWf^H!.[mbp^uRI8oCo>K%`-]c]o##,u-E>')lkClJX%!:)4-XS7Ta]uddekCaR)[tK\%BeHDoN21P!@c2fR+OZKn8fdNO0Keo(*A@SiJDheJS,/K<5sV[)+UgnMF!*$"28jMR<hu*m@$0Hl%6ArKf&$?X\CHS1VM7(Kr@\?D]Gci;]N93q$S\?)?/LAlCV._I.?PMDFaL^g5+*V_QqZfYdmqC+`Y=^XQ;%jsU:Ws3o*AIU+/qhh[%WO(0("/_dVgL>m88T]L>[d)M@)]_X:U6_@:b5=WK6H5k!BPe@C\noRgA'o@&B\`(S0uju+VDF`GJJ=B;p%jQ5AVcTnKCA"<r1Z)\%d(1WKD9?rIUTo*2hhSOO\$)24__T\d>94MteC$2-8#o)9U+au/]*G-G=_&q0+Q;c2X)Uq_@Q9ldIum*e4pT8&CUV#SFQKBlXY(lc%.1e6c"k*'?SE^t7?0^<e<$Q/t!?7:)l/0/6W5**%);,^k=puDfkftd3%gr_6Y?M\0UcUm#Qk)9=(]l>G)@g=k\$>"G9A+=Dc@B@D%r^QN@lFmqdBH]`P;:kd5^V2eEGRh7`iN7H[WYnT%mld)GN0"pBJR#[UX<_Oi8$(uF65mt6eZ?LnohT4KGsT9`O"=Si!#&\&b,]UE%jIL9,+P.\rmaSc4\8j?Aar=U.CsD:^ksA7g20Dr?-?H;63bDZ<U97qH\ETGTaqE`tmFjRHJ"MTS]4.DD@YR3k=.JtJL+SCNCfh6E%D-JbJfbUA[fWnatg@!2i/IS-P77iohU-<M*J0Y&O`0;.XYZPu^8h0C[)pZ1'?5,mCO9ob("U3cq$iM&>r^T9cP>YMJT^+@q,#AgI%Xg,RH+dKBq&FaEb%RF6?7R(F/`WW*_VNZ5NPg+M1AcAHPg^reF-mEAei3h"+ES!L%llgf&VV$P/%^Qg3^bF/R9r8]A<TP&c9b`(r%:fq-<%a%O'K!&BnRS>&$Mo-#0;f/]Y'NTPITIeW/#GlRebs^,%:YnT//&K7<ec<4re9["7oH__hU636[#UL-IF2<a-;99=rC^;:8%_M)S07NCH/`-?#AfP%58:`(JKO/-\iVrfR@6%^$23eKXt]MC+=RXH)Y>&nY'\&JiRf5T:0;/J!3e3nm.6#W']\JVhPhZ9i>G?q/t%;XpIe*!g9g*QI!"U$QWc@@>JV0U2O+$1Nk6m9aH.jh[ea$U<8WZ8]+;nNC1RY&7Se[#4>=_kHXc%inn$5!?O<7aMh2b;kp@'0a*B%4b6bMa"dl1!Sg<&;[?XJVYp'#oqD.$bFZHh$MfpJ8j"F)O8G'KngJc2Y[-oN>A]7OalKZ`XRpGGgA/5,b?QY^.YgW?Kro]gQ`9*g%:NFuR[SX][`pSnTg&;]!I6:o<D\iSRd<!`+4<QPdP@?QG@8_?R4F;,3Y;_I3IOXt:&%=`n9_`>F'709mHU=!i6SoR.Q]6;8f@aA(%,Sa`NiQn\H:F,rOK;&,*TuFlMn12fgF3cj/N5Ka[k=[b,WTRj%aR:0f("FLQ?AdW;At#ahg$S&T\ubPWY4&&TpM=bo4*g7l:08id%9j4Eo9i\k#_U54;O'^k$eA,L5-81)2Oin[YlD]'mYi>2P'7h*^NNTF>ArXN"?CIM<-B0(Z`IEJL<c-@JV4)g,4C4C4>2AVUR7H:,%pH;=$mG!C(j$k[4G$WtB9]>6gBWRo@:2Jg`dDYbPmGh@)\C&sH,?rG@cIGD3=O^rlb$V-=Ts/`Le0nOMmo3"#p$o;BP$+PcQ^=gR%-4e++/cR[&_G/dC?AsjZAp&<ZOW(pch:9cL0Y(aYEMEd_gEhM_RTY'-]G,9=J-1_9)LI=cU5atKUZ:XEBqm;!if)^J<h%Vtg6oUN%\9m7*cUu%@T>^ZWW6sl'3+#]*7J!6BV(=jl*fV+u"Wg!WrPk76UKch\gpBp80BJD@]ZF7hgYR0)Si(6STuiTj2`Ja9<d"t#Fn)eh%)g-H!W)U<$h3nASlAKn]d]Ab+^WROifa:DsO2=h/1oP3>jdg9hRff'ZP@K$9p"J)WeEB9<Y8_12*fW?%2]@%eZh;.G&iU.WVAj;f%CS%OjFAdjQT(g4(Bqm''T5iM^;3r(Vq\3MClT]HcYthc'K\(O\SFm^WH;j.[9H1Z/:#*D?7U=liYs&oU>P9pkgh8jVIFE$;pC&"S%I6Er922ZW61jeO)Rq!*35Fo*(O_imMd8K2r-oEFj2Yn9)H,Yc[qQ`*3YH=:?hPAQ^"T-Vn$Q1mLf'%Np]OtYYUSnp_m-EtcdhKSB%1$einC\3j>/(KQtNKtO=f)=s@k40FMFYYt8CeKbrKn,1s6KqlL+H<h<Aej]*PF9XK!Xk!BeOECdUtP>As3GKFrWkB-0[['\RF+B(%C@jS.e2?N>J(f4hNUllMY,5b@=)@-f$#rUO2R:C2cQ_pP;jcf^[8d![P")eW;HVC]r,]=dP'E.oP:<$[7\LQR'oJ];eCbKlat,H>%n897/<3)tF@umci&"c)dPT%eO7WfsS)BG'VYmc8Rbr4j0/V"GDIXR7Gng6q?Pd!"aGkfLeD=Vf:o*F0g=FI2T`F8j91l$(uq!D0k%JrnruBCZa.(T%*%&p^K_Q8+/?4CIJF!frs,1AJm@>JJ>#bb!tLHM8[np9_W,HL=[Ap5PZ1f^hl*b3Wi+]e4]Y9V+G%g$@C0O8;f\%Z)9!sF*-\+HTTM24?l^'Vu%NY1A<&jVa`eZb2,$=#NWFecsfOL]D[Orc(<M>]:F&hm-,C7QRESZLb1g*?lukA04n"pfU)KUTZP[G%,l@0**`eou+SM=;?Q4?Dg"T#51XSmc4Ddj'B^d9boFsZojlb'1r2Ifmm;4KEHS(^M^#i'B[uO1SG"19?2r?EF=?"#YI%C%kT>k5n%2gbG.8)pNFoYRpR35uSr+)*M0WYT(A2!9]rNt09Q4n%EDIF!B/priGH/FXY5k<CSYSmmKZ?:+O9K.H54+VMGF9nf-2bg?p@rpEK/%5FS/UmWEb.p/7nnkul6"Wb.GdQLh]#8<M[2Pqr/3Hn7M;'H^!F;07jN(\5sKTo`n^6KlDSZ1R%F[h$.a8:+=ZgVPRD7u=P#)#'Zd%Fe:Zg%<mpEGsB@7%UuU0qhit<c1DM"!CVKC-)Bs>/i:duZGl8R>XW+6kPUQReo[[,,f'\uqjrr(/DY"+iSM5pX`Ba_D3QX0j=`CV%52@b&N6cjK/[Iq(//kWYdSuuIT5RqN'[?V6':LDq$9A1-mQ^#aEheo6#/"/h]$]1'NnW]-rl.Aalb9f1N,9o$,&ItW%aW.S`ZC^F%)[0rg4Q&rSMKK0Q7R;7^RPcRpN=st&Ti((@o%q#VO@W']$h?j;W)66R&!m[1\t'.#c/W.DSnB%/gXDEToO:oXp0;f@@k;Rbaq8O-%f+V<q(Em&:G&^WU,>EU\W?>W!lRItW5Jg[d#urGRL^Q/OYk%<PX88!-BWRINha0]/iek%O*FAM1comKPYE*AJ"O/%/]jCU;ds4Fk%crr4Al:hl_`j-kNa\:tZ/$Zc[irWN_][B=9Ss$R*2EFh4WQ:?2VA3jU</1uW?>'LjKau"u,6Al0o?6K&*<F$mJd-`^jR^Tn=S0H8%6HC]^drgMupMm*q6AD$t]d\ZWLBLC^YITno7>#ujJm>Uu)$(b-8E7TK\`*<94SIf&&;./:Ri+Ulp8QmG2<R99o0a[p`eS,S$)s.\%2?B-(q:c;An5HTQR0(R+ZER8<QS@(oh('#r'etVQOYLIQn(cL33fmG%DM4h.]IXA7Ft(_0fIdr-%iR`U[(pu/_IH:Bb35s0O(@Y*%c:/+p;5(!d\u]='!?]<RA(WqtB0*%tkRZhCpd9WR2S'gBY4R,-0k8sM<(RcGK:ukePPR=-,BfGk#G>\JMl?)`*7u>P_mj_A0HClG%$i]XX;&T!!f+KT/^[G2COFkR[GI2.=@*E%/-U+*&Y*l.2@g!QL/!g?3dsREm`E@hU0Lrri=lV<>X?Bk'1)$\J`^Clscs<.@=e>$i%qH=(*<)'*8j10!OGEJtN)HOA2hZPN7Ac?845I$eTH/4fJ:Mf3PP`3V[jarrD_KioG-+[G,driE*B&=!D-PM.r^GM+jXJR9:K-s(;%?D1<TWJNL9Fio$WW9u,,+nWW),;Z@k>L@LlrN[]pY01TB^YK7Kg=`U2,<[K_s./l9!UHEGGL.X"s-Pu.>:Z!<3"bDhe(^a*;Q!9\%5JUh$)>r?r'J-\`c6(u3[7KJJ5._P1Cc*/$<FHbWl,p`YgSOa8EQc>DZjY"pK1*'G^ADud+c)OXFXocE4l_%I(rUM9D7Mr)FtM5S%1HYN^.B\'trcPf\FGtP;;8p^@=iG2W$0)3#$Jq2N"7b+,23ep'JA/KN6C$2@kqASYUF7&cZXDu&4*r>t,M4D*Z9<;q;#BmhOX)4U%SS$BVZ=#R+;l657McEiCN]>WoZlP8cERGR@0&WZQ]MV07A4ml/fT<dQ1X,bF15p+-RN5._eiO8a&A'c!'/rB&l&CKEor/.4e=Wo_%iW?6Fo*.mI)Z7d#kV8E4N7`n'JUH#7`"'=N/fRFklI9WsD$GN0$l,s_Mue=VN#7)A^2H'H=_N!sNZBfZ?P"9GaU0@sCEgl5rPb2J%b6@KEj\6lJV]e@cV_50Hia\^H,Ftb'r3I*AUrY/U?nFt0(;RcimVo:5"I>@lUUWr8!ZrD_"AZ&L-<dm\F\16-Ci.j08:7^s`#-l+%`tj!X&ggbsA<%K6lmsFU-<W/^DV&Q8K_G#_bTqgN+a\QW]"E<@[Z1\VkoY(S]?`3Hj`[F=OR0;UAjH2Me_]`#\;Fk.j11JNY@.)*%Yf,pFI<nqedHJ!b0t5b2XFS`]6SsTU_DDnE/nR.A>0&V7%ZH6tf+?Xp';ietCYR'0DnoRofcR,Tn;2T3e7+*S]>R#q51)!9X3jSK%E=d*)Q)sJ&I%k!G-ngWkCGZ[G4kb&)aaga\O:q!"en"h/]%'Q^^+9F)h*Pbq!9AhDqnsdped+<?=k7a:16H.)UpQ'6hVP*'.+#.!%]&u"2G;#Z,hHpp(r0mVAb/M/B[<!qYJqV;5mB&k/<WgSJ<OO+A;7MF<L3(:s/TDM;/`:i1n\E0rl3XUd3OkB:bI`m__Uc-)SCS?V%cM"GIpS`3V<u,):19F\A&5_I_Q!<,&W'5qn4Ue8=m;dh>N"Hpg=Djd=(/>r-+.nB$!<D0i4]*!SVhUrqQn6Y@/lH!7!?FZtpG.%\%DCLT8btDO[*:7o[`6ksGX(.0E.U.Y&\\.()'NDLAN]-hO2F./tLpu>2NbEnsqI.M&&H)daj+N3?pVr;?/E_B!oe<7X4nCZ@*QU3.%b6#g9[P289$R6PV3`I$Ja='rZQP/*T3_rQoe:m<NR0\-EC]Q\t9l-VFHcbXRecCs<rP]A<]sX0kXdQ99pBm1f)?#*GFEG+$f(\Hk%S71!U5ts72_$%fOT&iCf_ch/ROd57;=/]D"lEQ8.ZP(A;[#Z`lR&tZN/\@:0\e`G9XL2(.fnb$*B=&F,X7:b$[Ce@iYp^Mi[[MS^%<0bY=rbD5RD8eH=MRBlf2mS=7HCP8Ep:]-E";.eL"[eh-Mc6d6>CJFdS$7^F4aG`2&CgaL_HN>s7oahN^"![:jCr3H3osNRUbNm>%`m:&JM$B1o6(3/XOKu).>;`AeB\T-M4/)*)`1"+D@]_4)Q<7!+>ejl,Qab6t<>3B"Y;9JM/QWG!l#^3OJe9WU$PT/IIu*<Q["ZR-%H[E'__Xq64UcF9:e*-\-B:l&UBFQ@1&6C#)Cb"-S.^N8]kk2pKHNTP8MSo]1He@m@,@Z<WAl9:iCMnbNQ'i21HYO:C94J+d9sF!6%Z`+5l3*)<Q_QceFBo('_*0@j:c9EiXgK(Yjh49nTl(+U$o$-,^aZ>("jkWT?STP.-bIa/^3pR28]VimVEp0S\kd9#pX67i4B@%fJ%fglUDFU$Yg[c!$'FOh=OY]n,7Ep0S\kSCH-=3RAEcCe*Vhq$#FZd,5=2"@tokTk7.ae1H!O=Z_cB:V=YgQO2kOtG,=lpG'#1%==n%5X2,lJ:fJRg+2HQ?/YG@aAI8Vf#.\g/m9:KYpKFLW7>`ZN!#(k]be:R`KH]d*R^'-7]+_pUs$'kKGM,Z24d^V/<[gh`T&OZPC`^b%.^MK;a5`BSjs\s88('C<T**Sb3Qk^Y3HLMR&tSi3B=Y<uP>01>p*8<<brJ/Df90hrLc0;+-@tI;<8k7l"jq+5V01#%\tQ)AX_!`c%c-W&kS_DUg,9\5`D(ul<8])[H\cM&tBBb+\2^\e_Q[Q0/\]jNhiUC"Pc\Qj#aFYUFV1p*0S)n;A\8hDgZlrP,D188o,-4MXbOFRN%5I[Co';]mr[KgrTkobZ-6&KAZAUb%_?<t#F)^K?=-8CBWYqR/LU`7mR8La_-P"qNLd::_/=KH>I=^_(g^6tNOiAcneF`%ipml1j%%8G:I5/#\GY2t)uERKVY1[?+MK.onCok>qj:Rca3S*s:soO3bGfr)r4Qkq&2P,6PsH>FPbb,r"Z9csoiJ/=*9Z-JrDqLm`TC<e-Q_%]`6E4'\7o(f'l<jR+-f?IoK-RFkQn80?[D`PBMRJq-]HCdPbIXU^F[7'8Akc5%<g>CoR<,\s0M@Wk4`Q;YM_X9AQo?CfUS%,[e9+%Mes2a;q>Pr'P3k93SADPSF[V%n;LK54JjQF[cFFhL2g7_A,CiqK'5To*&ha>%P,X)"r),>+9UB./sP7#SER:g?`"pO-.GUe9L_\<%;J$<+oJk$Q+YD;#c\Sk?0c\AH?a\uEhF&DPE:RiM:-.Eq5m3<K3*DYnF=:O.\Unq,jX`0!?,A+tc!Ekc]JT)?))7V^@MWodas(=6%SZ\d-XTg/T7HOSgJ?%G;"&b:?@?DEIlRXfl7&^JS)?7u[()`'@L2+Wr`[iltiseBfTqTI'f(uPm;&\0"()`VoGW]=pL(D_Z"B3O<%1K&)]o2`<@W"sX!cW_SVa!*MK_+'c]@tr*cU*Q*p@<m6p'p]<h`gmCY-d,#b)fV1gV+m2`;aj'p2Nk]7G*o+b3[YC]B3c"qciS!\%O5]cN@coH.H$*0bL8ijX[X!"2j?Q<U+6:s4#s#98X#!Kod:Wg@#DbWcSbXU4`mh&O/Tmb5Le$mu4fRY:%5JbPF@Q,MrUm&ZiQUZd%S'?_0\Gt3Mq/EW>6(8Iq)NL6K_^ub"\mdkY6<kVXLtd#8gfiB_Nh[$E*C3D`\2KK\VrT(<1?'"jfhajP[_jY,`,.OWc>],#NT\3i%$o?m$Oq4JB`Q[*uQ.s^?RJ!es0m<A%Naj81A`h3(,?m3bM+!VsHZYR0:(QKiSS\.2RB+hV*!p=dcbd++bBnJR4^-rme_WQ_`?sk)%f:-n;n?rqTep@C$V\;T4e!"5)q(S`p_pWVB)M$ta<NTka-=VBYI,A5^1M("8C$223]0D<(8&NA@6^)^GoL5ZN*o<aHH"_gJU>9^!%2dfmOF##T&??&-oPMrX+0"q0h2n0nVg#80'DpDd/(Uf^9gMP*g.ZJSUkF[GF7_!*(;D5.K6O(uhFF?>r\&jTY]1ln5hJFG]p%`5F%)6)ClA0VtkW1FH/Ud?Z&a@M#22Na+/q.n9aJMte[e(Bn85V+ff>rp%4Ym6O"eQ/-&c&eVr.NHFJQHdu`+r*k<?qp!?)bGaY+h"XD%f7d26-1."%LcNa)ZI:<_P7!*0`I+N<:b%uG<H+%6\kX^pAKPt/G)+XE$c12#7sOV?q*?)FZ#j:m/WVK"/\LY/C&kL\6hcYuU?KCC%%$f'W/EDh%Qj<R:_^dba?m[$`eU\+KC3Nuljc%0ALG2&W0!(?D.^)UVf=/Y:<lI*L/J"l&T#Z2)(plf*IdXu)8]'0=f,c1je`!Ir%VC-Voa*GP@X#j,Pp@[,QDLsg`'>2F5i:dD>/9i?dbrEo%Ij_)Sk[=$WG?M@6Bp7BN(<=C"0Wa[^?97Ok]"9bm%o:_&]D:2C=5P@H%DLlH$%(iY4CW*SWI&sbJUPWh^>*M4gmaX)1Y2Y;-2[Y=T.uih8Z#j,]qXaJg/5j89O05ENFieN?e?hfBpcQ9c]AV<m"mj&Tg$ODL%D3QWe<37qB]\gqMgT8eg7ACSUA(i?$a7jSdD)0\\[c_otd4iZgoRs>9>4ZG[n7YjR?mE/`pm7M/2t-$DhmhJ;[V/qVFuI?WT-&:t%e2WjT^M0/EN-R]#PmJ8?)tr=RPg2e-;QB(NDKQTYKl<W1Lno0C_4nM]C<tPRm'Pu_TT#6"k?&a-Dq1rXP$.G8L!TIO(2'UU<;`+d%5ftQ(aVf6Cjk.XiJ!-=#/)8,3en3j9>NY>5qNa*/cJAo;qB9kh`i#@(Ap;m`e+":[LMPq6*<P'jS.U19N3*EscB!&'V0_L]nmk>P%E7Yg7TJNhEY*i#Ig^^Yc2P!lj-b4=;Li"E,c=glD-UsZ7:!T,42O[@LG35QpCcWeF4LHAO.%AL1E_Eg"D^q7%i=7#HB%&?<,-RS4%Vk6`*V/p+R?7q_maNak@lXmKfN,n/6@XD/"VDAhnNFI7cbGM$BbIM_\q^S\39kPa,+DH5@flT\hU=YaVACDFXdci$R%:mp*$)af"%G>m1:7e8""0X\H-3horkPs)dWflT\`3QSC/17QPn@N3Ie1WlOu$Y"kDFNu&<:,\Z*)b#6snbUp\F9StL=H2\$<&U:E/fe)W2jmBQ%&d,o-CcZ(nFjo#c7M(+cH*c1G`p:gFZg!F!JM;AeflT^!Yh7o24!;SsF@IIRp,kO7!j8L&Au9kXOIRu4TgUr$!iUmdCPftWVn'9p%ef9ZkZ'"YC8=(m(M[c1XB7un_=4@pZ[O9gu_hjD,KQH*g(N="8@!W;7Q1aL>;q=IhR<H^=F?,OPBUA-bb[)33#UeBUB6>36U/Qm`%=Jhf'8K:4P8UiO"NTaKJ&M;!E3O-feA+%p.L2qC[S\1kX[7J%"0mD@#j\-/q>A@h@a4qQ&?YPit[t3AA%1g$SIR#r`Y3@AkQ>&t7%*ckt1;:HV.B*oKRa4r\kA1(61f#QR6kIrrs*hd^bgVK7op:36;@%P@4A4%M4BP8@+jZ.;pMm8)1g8sJ]V.Zd[6^)mfY<J\+6*GBr%8@N-rYL-M[3HXCL*6umtZd26b(.8AR8NO_!LF6p6(DUN&`,iB6g%iV&1r"KK(R?X_2V)<7d83s-hc)EHcMh/i`t5mb,<fC^U$;oG%l"/CkXE&(+>$PC'HBpbLeYj89'l[Fc,e^J*A61O?SV3IuA]lFO.WOK<M7$]bIj))j9=448RG-4-Fp3QA*6CNBd_<H6TKZDmIdJlo%jn6t=P_SA7>/jCr0"Q/`Sn/&tU*acHb+Oe8=Y2G+Z+1MV)k/t+Yi.F$_4((97k5W[9dABa465t8/Pb5MX:lHkH)jM"lgGHOl<3kg%C2t_n_9lGDQK0T^JKg1e&fL%!]L_a",XZZlR7%7#$TpH0D?G`$L^5RW,+OjjbmASeSQieu$$QcFO6`"'_$P<9T9Qfa5*=AeH(2n<%%-r*t>I>LW-ep_fNN[cIh;W^`g,&0X>eD?b/M+3"2D>`uQ;u5OP)6U%QD7\e7Eg=.0hnb2[amVg*M>"PCaAW"G-`.nqcr*+f!AtN%4X0;PP$!'D)X+!K`U)oqbAT=3@\PVVFN<L2)qpWS@_t;mI;fW@9/Wde0S`4nc&$"\V+DSh)(=sUPF/:n(aj#kW6r'<iF(e_]CEP,%b!$i!$T^mhg-,4S7$S5liOZMLh3ZP?S!+SNQo+Lk3'GYMNG/^8&9URl^5]3$bNHCD(HekqSg##?mb6_Qa#/A(SXW>)`<rF>0'lX"%6?Io@4&^F+4l+b1O/OPIHu*LoFHY\<SiYMmb+T5BLcR7d3]nk[^?L%6,SU$%0O"%kZC^H)>Z$h-@K^6_2-:o!qE9e0%Lq0Vk+Fo/%9_d;$PbNAlIXp4f)u)D`KK@LjQPU;3$95XN.b)p/b2iA?h33;%;UZskc9%`a;j3XcgYt#'g30/QLWsJ#%l]ok7Eq%c6Mp\9iJDV.%00+g4r,fX)_kYa:G@-kSUMTc)lro$O\oZN6j(??5dB;"[D#%kH;'e(/5n%BdDL[OC7[st(LHdj&AYcnb\:Ai;*Wkd2YMoEU1qYY\%QM[$$hROQoY@^@NL?XFb<a'be1E*<YjVWHY2/RG:oHulJP454"F5QV(GkG@k7OQ[)TuXN;cd>DH7PgrO>1308Dfm6*Ku`UH=44>.%l[1Cn/XP+5H%0-npZJt2j.?t@8]rBTa?8X-6DnX^nIK_7-]FlaT9qD[7<:4aT=!%HJN!j00j?,Hdc*NoMqt[qM93\&@W<lhAS@?C%Qh::Uif^!8k1NdHb,_o#aXfl]6VqH;Y05[boMfoN>%Ka;6l.@+)-UU6Pnl2SY#`\;Z\d%6`$WsH#bWr:33B$t(KiA:cmm#Z.S@nG%?)COn7C,isdd;,ZS[+7(EnD\\m^$kIL=Dj7fN9`;1>!$,[:F#^?LH%%dYcf,C1[C"nB>'fFe"FjHG9&c3R#VQE+pP'Sqi,cO;cl+%j1rREI^5HVbM%,HCRbR<Y!E`u/;fIr.CB8:j*WRCXeiD/=.HTkIOK*5%3"1@I62<F`t$FdEL9dP;`\r'f[=c,Q+c$^'6LP5PqLqA%bc68FV:uE..?bc;9P7B$:6"qeb30:nbK;&oNa/iPgm1VZe&cGrB;RX`"gltG@&Y-Hp+lLb(j?9us#Y)3c[c14>goNF_bbb*O"Hh.%W9*dIWLTiK;R^+^Up8tUS*9hJCK9NTX>K+*fq+qE:mG0I1/qk`X"4?-gKYf_Q'lqN=+Qb+Grj,6bT\3I+^N`"3XeY^lZKK5S`ToU%mR(HQ"_]8URmj5.QNcS0#>jR\X4ic.jT'm>D"T>EV`B:Q:,+PWM:3G0`Udt(agP?&:3-CUA_EH&_eBUR.Hbo>"m@cJE&erlbkl"C%"*i[AR8!0`&*:,]O_n$Pnh$!CBp22'`A36L_-t^>b(oO*S]J886i"t$fObZUF4hmRCuS8T,5'LcntCG3Ve'`5:d3A"/(ZhH:YR18%VR7me,!nhMlr&J4F8b;D/tV@;indK>kPD:n$b-&EIV&r(nHS`B)B<['D^YkRqDj@1g;(7Jeu/@)h]'`7>X-8U6`kL6T/o?jHUFoZ%Y+KjX,.+Y4F8`0DG/FT[(!cJ.aQ0)V(1Whs;[$Mkf?ZLLagIg`rN(bY&DP.6I[`=u`9pkplN,,.fXg8B.1(3Ql*ALp="\pr#GprB%js7*oIUnsre8"D\&+9_JoeVE=Thb8b0.Y;H=kJ0..VIr@=f],K'_H_7qC0e"NIkL">efB@hH)klc_-Sc*Of;Q>X.OXbVeqPcLnMc%W/utf%@l`3MjhY`q@S)FB!TA!:\@Z[+^+DA5AO=GBWmmbf?ZM9RS`,BkPA<b>i1RWa1$nHrN+'+Eh<"J>+OtlmH?=H'j^'/5CF*V%p/JeLcJrtp8?hc4Hu&31+e@o-RIg4?KQnlt*)=fPZZZr0dC/A2lXuIVTUtGHBk<9FrA8&pE2qfq=_TdNd5iJi-g#7'>X,h@W&A_"%TCiuC9:a,4nlae[oD$la6c2k$<]lF]8R:%hpP-Y.rK]L%Dt-dkF3E*s46fq>l=ZO\\AYq,)p(]V;p:qSCoqdWXAALnC"F\aF8].E%odtZrT4on0R^J"Dq!<\W8*BEESIA;;#`2[Ei@^JgA:1E714,p'Sa/dW<Z0PtX=WkaSEjf=#10F'-I2:j"sol>%@la^6Hhu;2qSql%8^>f%\UI3*/[Z.2I'0*4?FcJFr@HRR-)1^ich4U[$u%o6cFJDTK&NFOEOBldbWn`poeZ9"/:"Cjor3CNX^(m25O3Q%PO.#"ch0)L%(h=!+qi[J?lY#V#d:_(6HENn5iinN`\`1/K-B!LIr/A3f`0l>66Wt;M2_cVUh=jBnd2@+9X__N!aOrWD?C/+!ECYsf)j[j3U<0qo%W+<(dH%gu0&9+(gOoj1f)AXTCap'Tb[AI&n9Fe7P8'GfLf]C@tWOlqppMd0h$UHsV20<oeRWuKk+eJuJ6(ZoalDH"Un<FCK*WDj%%qg2BTTpsp5Lb4n+(q0&Oafsljb9C.3p$-AT1*'fh[Bh2a+2!*-kC)k661"GI8@(7_hC[KLI_N.tm&\Oi^)kMO]?%+HI1/%9lq;]k%S:,h!IqP6P_MimVmW[?n;ubri1+=rAl18S,1?XD$PBetGTC+%S+:qf&+L?,Jdd'qr-=/i.^E;:G4FVO,54AHh:26u)pKh*+Nd[PW%hQ<n:F6;BJGJ(=cg3;EQ\hEIVj]"Lk4?SXp^#:C`BlCQQc&J(G&\I8``CT)5)G@7j00$^g3e`78\gNYjLf$Z-9'6Ilng;/p`"4Wb%5O@/(CLAnXMhLRj?!cQr`WGn.I:;l+/a#q#D#(bcbZ<$8#1Mtk6lRm_4]6W^5Gc^mlKj@=b"WE-,[RdQgLLs>o#ENK@T][h+gfWh%=$@(fq$3q5Po?+&qTs2Kq)j6,Z^<,Wm+t(KD:.J<lkEBW-QG*,K"K'pd,igr,i5-/K<-G`'=se)l$_(qr7OOaD>g7US1`-=GOm!9%RlalZ_!Mk_/V\mT237IrSdD!YEf!"T@=#I*F5`1@6hK^<#HRMKo=YmXD[SYk_2Mt(;$LA/;tN_t^;M.?UDb8qFh[>DK]"U2?"X!H%\;]?=T`'11WWI0k=fM#kP@g5-NQho%okEjTmd:6uJQZ1Ak[?6>5+kDbGS$SjZuuc]nq073;5Ni>cTa=nntR+u5!ZF*7o"MPc7'91%d=cfB/5nP7WqY_C.to[+J6KdMW4"4a."ZY&LmG@0&?9A)^qWRXk30VrLG+?t_h0QpNmtY0=@>ROb$c\26o)3<a1MNl@1)0Ee5M/H%SYN0t3+p%4*6&@>\np;>K4K"iM^O'9^&AeogG]E9g\]ap1kZd'%Tqke*`3i(P?W<*KancW#\$6"[I;:d%!NZPrDN!?@[VnG<phVT%`DtJqjjgi3Q<C(aUJZH&D;8ib10;FP#*)WKku=L,Zn'uICL-1<8i3Pp%c]4$R1C%MhRUg6p/c#e51"4c9Bc&qMCCo2dHK+ENrY!Q%#cPig\nj&5g:-NRY$J47d'"gWaLk4DPs7soGViLh(@6,G^U5S!JR7UQ(=?Zr:o-Ob#MS$)[#]YX_ag$>Ie[Q'DG9d#;f`fu%*^G>%&Vr/7_`/HbR/YGFHQC&"-TShffXDjGoSg,d$6aatC6b9>V\:3H-kNYU*3Ued^EKhl)O*d_gLBqej=,cGp`M-6##IDp'%"<Y'SMWr%=VF:I!D,>4QPj:s#iZ(EJq.E"2K'^1NVPk^7qCcVB4U;Pi*lDkdVJR`bs$6;$eIb]G>8G$iPMci;<E*N9^"0U>:mL9kIRn<H9^<E%)O@qT:@1t4EYcHS6Y(a?I4He,YAt>/ffc/h$_?3AM&ha1<8XSVVaZNt0mgc[ZUeD<eR2IG"Q+V)3YHh:d[B/dQLhAB#E)!&U#Y`:%)\!VhheJV>4XD9?lWo(KS]"75]XY5+2^PoY&,8Ck-mMuun49`^`jPW>^?^,ZRdTbi_=HP!_K7ENFhGNnkS"EiSV)]5#m7S)*V'TD%p'p,-.QDS?`3hfJi-RWW58F3=;_B`T\I)C4^lqUlHVKVN[3trj5@)d4hZg!8`/Yn6-%D@Nmi6@tZP>l#[1j_T<6tTeJEU)peC89"%X*b>URr1ij^Q4h`Iq48gg!(fU+u5S21du,+R\h"Z"26&9?#Bl8ZlWNlae/C<]9<U%k"2b;iW`G!9iHZ4/mmPRL"9F\96da"l+XCj%rc/cG\f[u5b2nj\]Pq<Z6&%#rZY.H?V8SBTC?gp7H.X+DK(-E6-ud]bq_q[bF<e:1iNJ81C*eu$.bn$a$ibJH^Xu-eaUdD]@c`IA%?YkE2El%\mqgKJUD7gUj6?mY]HltL&^uV<=J3GFm-HDr1+PWdYG?d-!FMLn*fFp6f--:;$f_cq[_f!!kEUH\QAGi]DC7M0<.Xf/3%@ji<_&o;%g@J@m3A<9$#L]KGn@Cr=!%MjC(\%).tGo@,?)_uOeC7<;;8PRaIBP=Rk2:JGp54KcEX#):m4s_2Cb?:A$4?g/hgCrkJ%4`T%4@#lhnT&]p:gEUKF5moU+?3&AY1<5aT4'A^"q'[BJ;S@%$+G#**#;f,;$Jp@^)<+/pj`m%P56??-$E\-7T_<QFX@TFA#3T*f%-9[>/L)?5:U-_"#a-Ia,00Uja"t4k;X,u)!D.1mtc/)d&JcMr=g.fcN$hm9).RJi[C^KhEg])MJqE[s@"lJ(g3m:XWY'4!<9FaNX%)N%7o0\n4F]i((50$]>YECO$KrV]/[WM8RRCnfQQ:R""=G"U)-&](sN`$(\a(e3-n-'i+i%gi6E;']B*]._V[=::^uZI[TsBp>"P%?$3V5AQ(;8T.@T$=iregVk?q*/aO7-pDm7AnejR$$b!")_^%l`r%m9W5/!VL`[^0Q(Y)Z%ja!8@<:cV-2LY/<QFR"D/)emaCaj1j%Brno)T`hWJi$9T:GZB0KDLFARS3gem9cTP:Phu%4\<H<<Tk6-IrSmHQ!Q$W%K_a*-!ebnP&4.':SgHd.#!n!=5Yu^l^1%Y(h,:_!%h-4o/$\[FJ"bLRLB=*b(#U#3IQ1h_OVo0V^j;]r1W/s.AQ9`733GUaMA4oCgNI0!-.1m[rndeMG&H(pdX(N).OH,,?^%Ul@hGcm`%Go]ot0Wi2X"XMe[\5!ba(>4ilUj95>Ld64@5"%5,\Pa/>#A!5m=q60f[gt%7/QY:hc7)fRaC1hn_L\P^H]bbS'M>pKX&ZDgLC&`1%Wc1!<iJ=W<Bt))nL(SP^)oC"!h_/!Vb+@qkb4)u5'kWFT^^tQl"m5lM7[0Uh0O\:j,-e85f6"'6;U@8>"P%NS6XfFMhQ(\4CWi[_%;K[9,asY"@08U0.`TZK/GoU=gCJGA7T3W2P**9s/:Tc_u@iR96ZTdkJID?D88h0aZ'X(Q1iY]GcKGsL!Hodh$aLi1c5Y(@U'q%!+%=9f[o_bA^cmq@SQr#3&(Uf9nW_Nsn&KAP6`nPXN#0>n"?n,.jSO"*Y23-)moZ"sY94iCQ(3='Z(O[I*5'NR')]FoO$mokmVH:3?2%HS^;3^ule+,tc8)meL6WAZmcKk5>p$NOt%1)VMo$MWL5ml$fS92c8@W,9e/rNZ117$Q:pYhC0d!*abuQ6=O\!3QCa;5@)d=kof$6%>oDAO(p'J;%t3g$;]LO3"#l-6RI5e2*Mcrsbg$lgim+5#N(9S!lNSXsPrrhn&$YqK_$4]?WDQn`C$["le[Us\\inM#Iu1E5S8D,t%M5u\f-\M/@q^fNA#Aai^0qe4]_F!ZA>>ZTrE(JIohlQ40\4UfiJME&jI:)*HE8^n'ZQ@Vb?!aHKK!;7`"ZcYfJaVat]o)/dMBH>V%BCX1XWq!KS</D4-*m[$1d3()F/tBI*@^?KXRgiENpX^W2T3FIsqj9Ma6EGDl..Y?P>uV^1"%,B:OR!nRnq'XcSM7a%1+S-NJL1`D%XZ+RDNd\YOf"p^;7,t>cN]JQC#C=FsO5:1U%S>JaTH]C6m#"614-7>f@KC3\`,ho:5Ta/T`;klDc>W2cdH6%5Je"69b;0J_,Ls'6%Fr<b8JktL53+WgT1()8$S[/YTUL9WJ$GGnn)Q"+IE6'GNFc:osGoX*sfG3/lcYCBH&A9X4.TU'o`1lI_<>[Cs^B6saU05IoG:/2K%`I6Eu<KMimKUog)0r!_#3R_bnSa_3NWsfen*G"uTrTjho[+bW`>65NGQ7rD3J`Vcin+4N!8.>@nC^=r2Rh<<hh%TM<Ii_p,1KAq'%FF.AKaH1$;@j](b0$\O:Q"p#MLL;HNU]$EI1j3u>nci$i6,slsg.@-8:Q[%Jf(s=,'IokSB`Ba,'IojX9`A6OKutg*FFdNto2fH0%Pu4J?<ed]m^Ud)>##2d,>T5&q)4<h+mf+;q6=gjqX`*5TKdore5`@&`!6=t$Y&\op(5\O&'Mh8GB]SsNdnX57.3s`o(o]gPF60BY%,RJCZ$\*JC>l42h+9bZ`3PQ3b'N!^j#"Ys(W0O"YcNgUbc5C/2[H<TS=R;=6T.gcp>pMs$IX[W&rZ-Y*WEm^[A>X?$P*j8f[hKid%ao<V_4WikNko#YF*_'!>`IpgMKMgcdQ.+8of>Htd]`XO[HVlC*cc[q/QsBU:&ZR*Um?k_0BTb:[9p='e"DrAp_U46C]$S@sjt7$;%`KQbR)HD,\SP0M(g;RmlqPIAn5/4%E+RDYZmF(dqA0-;WVNL`%,k!3Z%V"0QR=1O#."V+J"".5L`*\r$(0-gJF<@h"(^-L7kQmum%]1:-r?Z>*q8k@$_m4GM^kV\:k,mbgii7b[d@3eA$EtT9+";b[*&R(@E!_^]SKNp3ukMOSA%SSkbcJtrIi8c._-so?i^_;#AE1]Gj%l59_bZ]hf)%=*^?9*X??gL*('LFa_iB^&<>U4Gpf7,k0;,oSji+E?1Mc?#B,JhiCs*_SpOR/i7n"Dg^TN)+H_#'`,n)//,>lrAJ?%$MIujba=/L;HthTlsWYB\VV4g$O"T2c@L(Who#QDN82)rnTOJSm*VDVD>Etn@RmN44LW#qrR>utWndk;g@Bodh&H"6H,O;$O7.$o%Tm@qPVdg^bnd7sNVmG)1bm#%eGmu_A_idE5cYb7\7Eo@@p*(X$HoQ6K*9/M'n/#:>.QCtQJiOnp`^1'?&u6\o#@aX`[4E)O!P>D:%MT*n7>W#As.Z"Cm`>WYnH<TCe7MUU9pX=g$_35iAqZ[<.W-WXji+);0YfZs%qcsR&:_q*k(9Ah@?&>'/c.[8^pZ?^=f/0%X"6cN/%`QGKf8"r47=BYr44i?n%&$gfUG*#Z+p(r\++;d<&F=&I%GijKXKNK;!q[0UCF+XPGrb,l"LnQ,<+a\QZJp9uknX=Wr#WsB+eQQDf%/&)RE47P?D_WBUH&7I%TW:Cc;,&YsD,"tE2QZn'KKW,6N8/Ia,,"tE2SG0#q,-q49,PuZ!_m/3%CqcW'TbAb$3SCYsJN1*QC+W3E%W!U_,/5ASK`JHu'agY>_$#;a0LKs"WTBqr%qd<+p^_F."L<Brk`i5*mOfgml@;CT;KB\RQ51URDDFPdD`d"o3R&*sJ(G-mcKBBG=%2j4B["h#2-QuF5h?Z_N$9#Z!RAOeA3`4)]4k)YNq#i9I'WcAE77q>eYI*%R97X_cXb]j6oD)f..a!J<Z!oN@/P8dIXbjC_IMT1@j%4%qbPcYkXIZs@!LfhR^k:l-bD%j\_:2Zn^^['ktsQic@n`n;(0q==8U'34o6ksCT$W>ZWo(eb3"d$b9&&EnrPG"5),)lucPs0=0<%8Y&@OCeHSp15/uN[l6G'@rHR1[Fg?Mn$fpCia_fC-BsOE-JZe(n=]"T&RV[t0tl9`3m,O:*@)269GS99&Jlu\4[N2mj$Ekg`@[8e%H1jgW,Xi+X%hpu[_Kh!:3/=iXT7q5[j+IE,EaWU/AXe?OQ%M,MHQD.CNC?0;`E'?;89kZBSq<(A+SbZ`$6Qc%YmPk<ASA_5J,??O%iJZOYWPQ2*CtF10+Q[61^NVD_^cDfF@cGM&$6mM;9+!m"V#l^]p"m[S6'E[6/(LiG*f(QVL-\B-=09ahW3M^GLpbn<R[8E5e?WZt%(@4=C85o6?nldc(bZ)ke>F%G1&41fb&>8aE6I#TDF:9VtdTH<!e4PT\QBO*JR4:EnKVhb$1slC.R'g4Z$D=Hs+cUU[22ZqN"-D-(%Cqk.oLIV1H%#c&fE5X*19^!N)(R:P1ABrPhk&;i+SCS[B'"jdO!NsJm*21/MCSNF$,FP9R`4tiGH`H!HSS%GZeI12i#-3Oi%QK)W%[p2:BE$.-=nLuJO%LtINbA/=`jO<q6PrXIZ8;UQR,WZphS8ng+':3tHG<FD%>-VNu[O:/(DU)<o&#uJXJjHK_*l,g/b950YU8-i&%6aJhunU\MJ#."Prq.U%1JDIk:nrD5G;ZhhiLg:RPREtU9&d,-=$,)Y?qP0,@#*3>_(eMitW@8)mLg;m1A8fS.gFWrF*iu+^k]<iV%G(,mk5,g]$('=h#(+%r1DUA4DnWb%",M+;LOW?DGf8Ge7d88'PcHi9]6D!FNp+2Jg^:s3f<7/M4SkV409mmrd@Lg'j`kIFn"+g/_%#Qc49n3L)YpLR>*8#NiVkj@(ff6OBfQms##Ggl4S=?poOTIT_!]<"ko"JQ]b3/L@"8Ou#Q&h!3mpC[6POdD5QYu3iPo-aoJ;Hb<<%aoS9!ZdKUl7=9_b&uqbg4J7RspV9nMDMb2RT>nh^NcXT6[j^;ar@E,3XQ\S-XXrMl=OFsiki&pkENJB^OEPJmA'o31>oYn]Br-F$%`uu)<4B3VEVI[=Rp1r#S%<9S>hV_4GSVZlgVqiRs7ATA$3allpE%#"Z=slZ4<sKWL?H"g1SZp[1aKA8'>:6L0&;]`,KQR?1+R'\@%%7JJT?e7>IV1Ad!\;M()$_5tLol:>k$:OD()t'Zr(Bk0t<hOa6]7PaR/QWQ9(;_`4^sYaW#t4[0aP`Gd]T*.O42iutLqMjQhqQ?2%!h4K638c9?o/qlQ1fHTB[:baImA6$Xn6$a<YH5VgFRLb&1nf._XhlF9%[s'g0BQ[VCBmR!2?t6\_0UKqiL2B8@dTfp/A^%o9uq[H%hMtVnA)a%-DFY'qaJVi8]t-NG[<9A?EE:d_j/\+U"_EJbM^]ZS]@d&jlC8l@LhZVfljGSO$+\gYSsci-KiYJ7$;s72r'K0B(\-o5%ERj.L`F`WfMg.lb1<%)_gJV'Hi^a!+%T0mk;IfMa%T+cSi3NX=OXYr2#?FQI2TH#5MNB;bkT_5ka:sP`QpUJ9q0_pK\5)*-BbWRY%XU:(t-e=-EOJC=l@jfiaS5=D7ZAY98,:=O%>3,ig!Gpd@e%(4UGB<-@_gTYD/'<QqfFfZ54u-M%)5PnMAOQm1ZAkB)]a$J8?_qmp%>[mG_S6u)9?)*RtE\e1:Mla8p3^?@V"WE<;.bMeL*?_5<K'WbXbppSG-m)m"0+"tBrH&o^F9N5`e*@->kno-(b,0fm(*gG5X9)%4%c@`3]EB^T_W$-h17huu]m1;1,k,$m.,ooAY1"t';i5/_"h((=&k1l\/J(f[ZO##B/;;i:X__<g`04%N3>`3Zl!k+>-dmUc$9*+'Z%Y%EOP2%XKbQH]PMlST6d)TZFA=Q$We#(h*j8qG_JhSRI8#,4-@>s$9l"1MhNUcHh:+KE3)510c[`1tjJ.Lia1<Y<A0f\#fqo=:To%LmQLCMZ"aJ$PuFTN2#iq/j5?&7BWR1hR$\,5e*_2[M5M3]=FY_(OV%a'Ap%!6H:J[m5nnp.l%I^S$5b"KoT"qY%Y=H>1Ha6OARFZ%[>(cW]lM=353-8u=7jH2+mkmAkXLG7a1H]26%^NH@t-:/Pk$'&RKqt+T0.*[pfN1WT6_&k?VZY)8=SY/Sac`[#6HJR/"m&V=4V")%N+(Vk.MqfFpE>GW!@l,%f;YU1T[$N(hY$t`Hq<UMfo-JNar(WJPcC6lMPP6G6*/<Pi(W*h8.t^].5U[jfi)H,P(XEoE-^gg"QS/E%*1s@U*ak(o2dnR86?EibV70_Y$j'1@ddB/94R5V<)tkB?/S2qt/;ep)9iN2DAM$:QQXgVl[h*n6;1itm\6nd@BWMk,E#UD)Tku8A%;h5c9cAo3QQ4X\^R8!.il57r7'4mr0Bg@98[]8KSLb2C@8I^qg*qnjS#>V\A:0r^Ph9qF.il:!d'uJN.?lH%M-3\4b">FXlTMiQl%e:9)K^m7Rm;g+[;2?h;a!UO^H#i>>m=-ioah`odN"\_#!-1f7?;p=);RDTb\7EH-XQFiak<T<u'2\s)D'V)/Ei8.#s2@`7)"_T%5%[g^Snh_S>\m!GFKA>X33+@7lZNR1WJQ@prk!cXOT8K*Dub'^pAm=QpQA)D2:EX&ZZ'sbBZjRM`Yph$oQ(4<r7*>1gl0I80d/\Z7u%RU@uu%Ask=dC[5)eMZX_Y-WVC;qEEo--7S8\RS;0h=,o"bS<,En\7<NlJR&LQn.PH=,a[VW)Tt(*-2:*c=g[i<7FV^KDiMN`8.9]%aiupm)[j-l29WNmL>c/mgYR4c<=I;<p94[m9Cj9r*u:R)"BoO9*f\oAKc'0lruT;_piD8D>DKM7;B_K_i-XeGe)==KiC#^O_#FG5%A0-6P9>DKEr0m[-f>ca%A>J?ah>H#5s6,f^U=3i#Bt2^niET6*983E6>Z'BX0FtXucP=t=E[B=N31r[pXl/^T08<[[W%5:qE(JCU%ao>PJ.+V^knVVW+M?FJogj7uE$1isA'86duUD3U^'Zb09W)=/-aB1]Y9kt==Senp1Ged0'$<_.Qg#Iiu9#rfZ1T[u,T%2*WJ_GPk%G/>[^]n`KuS:pWMA>$_X(Rkro<Xf`\hl)o^H&LG:Fu`Vu]Uac)M>a>WkNq@]aa,1\FAKuDdlRdfQo7R#Vu>adj6$1U:-(N-"@"5n%pX:Db_#Ks!&TsAY&J9$VY@oMfcD&7<Xf8_4[HGn1VmY_aR5*U/K(b5.B\p7D*Y\Rs9(l'Q[ar(l+j>cMdgI7_+m;"?f#MYL92ngW%gL"PK,[Y@fT;nL-KO9oJ7e2Arj"lihf]2\A!EU-LN#a3PDSYE]Kb!9c+5cG:;`GXpnF;JP_P,\:CVP23!g867rN(K,'n"7TffU(U%&-!W$bL,BMY(qC]s#<7S`'#(r7nG[qgQtdU;At=0^`GmXq#hs3a0L*_.@k"p%ZuEc*'_LgNqL4R/rrLNBp^)&Sh(rQeGa.Jo5FNV%1M?b`8UAXurYbqk;8G^b3CNqs$To!VZ%U3)K"r$ZH\@Sb_l*7<SkpeTl1$tAG<B<J>_,81YMhIlC8<3]>5NNogje:3I=;=Z_MN#j%>qUVV<KetF;0;*0@6D7orcflU/=lC8RRu'ANIjWn+Cl9_#GP(75r8p\Old?2k?s,]E);a4.#:oRfrTR3k'LC"EChjm<MV&-,/[Ej%UC:3e8f2-`=$S!&KsH9C?/RsE#ksC/\B[i)NddNC`Y8\siJ]]8L.^e`e[N&=)&)crkhUQJi:+uW0Luo5[hj-3H@:n83jnob*/Q<C%-9&u']Cfk#lB<gK)0UC8k<:-c8p=>r]FAQ[Oo/gC;lL1Ck?KIW#'c!V/<R,npZp:r6mPeV>9^T9U++c(hCCOO:R]pP/8*ThmF3jj%15f,"5#oqh;igo6OsB$=cBSYJ%ate+nS`'$Hc33eiU1K/Z("O)/0"IOQ+cR*7IZjs`1Ual,eSWW\^"dHc.30c-po"qbYqmioo3kY%6m6R0(")Zk*@p1t03>/!_$<$qDi3dX4kC5B371)mp^u#6I5kVRQ4e5Wq_Woa3!Xo^1F;c)9U;U.Ll*D51m6c-0#C-^3=[4DlX,e9%8E\RO=K(]Aj%?0k$1X2'/5JoFiReb;?3^e4X0l:Y>j#h9$@FB5Rt+jE@mORc-AbdTn&"BS=7moc;<Ju'*-rhOEJ\p3]+2+m@U.SC%]j"9@S<pihiV6jtFog?I4I>li<KS$2CY7Eh_Xn>a$OC45Nn3o"mlO<gdSo-7a;OPR0`P.=kXCu7D[k3Ulo@1$_1D1ob;0ruS\PbK%^!NXY(t]<3NZ,/+LJ/l&a:oC"bleM$*CRG(och8#Njq1s8arrV7tLBg/ND]L'W."?4.8LA_TB?/<$m5M'=ARW(r5t?+e."fp7;(A%79ELt_atbL^t#7/Rn).h0gNM9]GHAnA&V7fpAK(Yps)LPGc0+q!nKshhgYi=l`'s2(S`$*Gi!-?ao@JN<fHe)0>quW;nOh[*1X!R%YaD_p!Odl4_`-a[YGr>Tj]1Xa+W?`[5@LD[HYZh?UsnF72q=Atc:2I(mb.A&^RDo+Q\.gWSObm0hj(A4f.dD!.l-*2\a\Tf*#l#m%(k\/B,:@!4;\H$0gB@Z!mO05"H8gK"C[,S0g^HK$h.osAWXCAaJe)r8nk;G.FYdE!?>nk-#As`']69U%CFd^q::?)NIl+HeD0HPH%J_pah$V>5umU#@hI`NmaLcJe#;<M_MBFV^caGs)hUW`c4,iTJY?nms1M=s"$\OMOURA/+i<](\]mAq2GI-fkrdP;4hiKZ4K_n2Na%,g1ZEn<&gl_8/1$jh3I34VAYCUD[8*&q$lRPURT7r:\JrlF66MAR?),[ki<41<r";e310ZV8s8+HqGYmnZP9@q*#Ka,!_pRr[h6S%nLl\J;?o*n79PgfUR#hKnFp/o!@I6J#%]5f7Lu`XX4)nHYZ"6#Skpf'KgkkO0%8aC4GJ2_]S;W`#WAo`NID>?4AZtc@&\&jDIU@f%^;6Bj$9'Cs*sT+-"@Dcr!GR2K8u#"SkeFJpKJ^)dB9*<)^s4m2$=%k^W"7pgWmj[e(;rb"`'mM%]lPIb*lX5b(kYA7n._sCC%PeK%"qkuT+"$Yepc?8b2-5(:063V^#7")ri#t2!.:-EJ$RQF1*B'!'?#73R'St80SLi!CJ>D5''%60FO:d3pVk/UZHO-4HLIfh&BlL2F%h5Y1V'[c^,:?!H%Bc0k.oVU9K+%!\b!G>bJa0rQlJt3+V_5KO$@ABg3:XIH@qGE7&raA,%<6WQ.eH?p^G:@$Nf,+-*OX3$+X?c>%%,&U9t@g'Z8fVs][$W6`=18@*d%2He;H.cQ,eUWW;j_gXmkQg?T96h(8ZVN`aLH<SQ#lW[=.4PiFqSB]2Tfh83#F53_OB<R_T$&Y?%D>;k+nZsoTr$0cm*Zu#ZkC$GPL`MVY7`oZYq&)]J08De8FEnb".VO<bU=_AQ)((%u43<FL-/hds!(13BS6pQ`&3eplec9NQ;RM;g%i+`El\@8_Y"\_oo?qMOS"3tj!Tcp:m/\T=$UE@>-7H_@E>q]g8'qa'bP32qto"M7B,f-W[cXm&_dAWN1aBd,9HDS[M"`.sn_l9"1%kOHf(Ns`Q9_m.G'X!"1c9oL!$0q2.hi\!RMJ+9fE<g,U77e&PU1i741hJoj3pC8i(,<RW'!radVflAmOnT$X5`e?-bJ7oLF-o;]@%+Csq5/X".u!_bg.R@;MK_]g%c6DC,%`0_Dn9Oa/_-msVO"Oe+F8a#irW%'.qaaf2g$l^iS<Vkd;epS,nWj-RM:V\?+i!5#l5K(3(%d?<tE82*6Oi*i9ImBuhE3t,()+U!SJ&84f"0SnEmPIK)ZgNTe.#HdalrN0LrMsSqW'm_SCJRFng;+QSd-D%j6s*a*'-I\JH'gj(e%e\!P1c6p;dhU!9dmCAThNT1qpm\i5[`>e@)=`MrZ&&dGNST-HrlU%_>MAO7WW%5Hs,blg!&<87I$\FfHJ08Io4^IldDI4EkMXToL%iIX-[W#gJIpWDS$O_#X4.j2.id%e)EW$aFJ>_BAZk_ZOA4:Y3>802mB)@='$9FN!:,B)[@nkNT)3h6YQ:C[oh\a]C\puitd4\SlM%n"SpkA*gW\H%';/o=97146U)/9K>JjctQF&$*hF_Piq,_dsFmcp9fQ7Is:AO7p9+N^16rjo0dW9"WFf;eJ%0>%m?'6jYKG@Bb7iI%HOrOuEXK!Ib4>/(iNoYW_)"P5Lq\mbSM:_E@\9Q%hom_?V*RKRU_D7@%]6&+XHC45U6sB'b);2s6QfoXa*AQe@t(8L003iE+!?`f%m)op":b1fU,b3?pj[\D\omgLYLNQXG5W<&l"Ge.lC)ITg/kdf"YB8NaE^U']!al,4\!9!!B0)Qh^j&2%(^Dj=g#-j>"=!YE>,hS%%kYNNUXlUA,LjDP0>UG_oH5%0YAB9ZZ(,<3TLH`:gGu(G/oJ2@t$d_X*+A!.U[4q.K,E[4HB&;]J3r=+sHk!_)4qm%!aePa0b[>1n%4u;k![<8,\Y8F&2>i+"HCp4-&:iD'6jN0B*P8i@eC?"h\_,lJ_K>,s$);U:FY$CVs[d.@5_HKju<VqYE?spPQOC,,lgBdeT/gaKA%,gJ>6W3fp\H4OQj:6$f4jXofb1><MKa$^HFYE1nVAq&ZUa2#_JJG-%8E$0L;5k[9cZFA'0F(l8->!EU%mYpsA\PlZ#UeUe2-qTSq%@Bk4;rP=gDfjB[@cJ9_k$X$UE]n^U7ejUDXMs9'DU-oRWKoqr,DD&#V0;&;-!#HP>&EO!5Am%*_!)[YiTMdGOG6@4P*e`T,T1FQ>%\A?!`:85*4qJj:bO7u-qjoTA3I?HH!8G2t$l!/)Te8nA,kb;25<QDOK8"`3=Flke;a/aNn*"BPZHAs.<ibF4WKL#/+^9:8LLd5qK%>`,6AUeW>U*kpg*q56gg(V0rm$tZXUNE($%[d+qL-^00[OLA?P)".@DBh16aSbK$("EhOKpCc4%DgnT4=4$L%.Y(Rj$rmI4^9;L?%SXpB7XN2O&J[SXs%Ld0]_tY\<]D[l\4\V7"q%,:1rV\[6B\9>6G+o9lJ5O>gGRnd)#"N?VDf>l3U^%sr_h2gs@'AHIUL6U%'+@Dm%p\f>ec[C"_K1C.%(8@O"R@O0b*@3)fqm0(H'emG$"(VmpjS:_Qhu+P>_&U`Q:N&gaG0WlL>ht"g4K+H211pY<`(Z5t2`c_c2O6lV%Gbm^AIp?Foi7SW'dQg(rTn2^()TtB*&l]tV^&+B[)$DZ`"Te8X>6TS*hM*m!ZC10T%"t9TK;#1T"U%_u(^/9Oclg-\F<_nJb[g(4%HW2,4@ac]s'0O?J/nP`*k6!*[3@K,E?D:Y2%2fH!LaaBqC9]9V0uHjbU_/Hd^u\k#i_/ns<Q.9.e*hgi!oeuS?3T?Z5pM8kV?cH2%:o`H^6>I%j4l[%l<M6*Zb:3kHaR[6a'e"?+oiQ=L@6jCJJlFdq_AT]R<P0BXVH#USJF(/8?\c5O+M*)G"c1(K<0<aUfBYf?)hJ?!%K.7kdL?'Jbm=WStd>J2FZ($a(rg?r@nC6W!F9Sj>Jl3FpWur.CAt3>,7/I?lN!l^=.'8fJaA.`4'hl(de\'$V'AL@$M=<lt7"SE(%.Tuc1e8c+irC3-SDZs^nicS%K/6NN!*4#]?jYc=6Ia)N7ne$eY34@8r<5oe'/;(qsI2+$aDN/((,@soqZ.53G6qDAoq]Ojb^)-0<%ms5]**cohQ;Cf'E.QTZ5aEf?l(kn`#;1'`gd$(NJ'cACc`]69R;U@T4&k5Oi*/luie=QOVni7P4*,rj97XYb9*X=h))tc3.GoSZt%NfEfR63\J9(s?N>%RqKEip3o>3QPs6RY7hmfQ\LfqWQC/SCdQ9q]Yrg5D5jT!b!al)k*U3QZb6r]O#^C>+EjX:a"W=M]]W@^%Fmc%\2ZGCa.e(QR7t4Q53:qeEHDeJ]CiVUO3>,FJ@e!eH(.KF1+W&ZZefBJRf%/<i7@j@]hp;k1N$+!M9>7srMVYk'9u%J!oVsLU)l3u%X?24:hu<p=Sf=G3k:SZ]9(>5QE.>B"WACKg+*;L]IXIhns%dLh\oZ8=<;?[S4.JNt!ZEu/n(kmb6j'3W+D)5tOUsk1M$];bCbX-7%Da.n'W`jQ0%nI[LbOX8-WiK4'l:Z9ggV5r;j"DI'qfh5`k?$K3I'drXEll@*lgahMUE6728:Ct==oE#HH:tCZ^80K_nF>h*5Q(2.%liQem"`tf\c^kAO]$UEB#9WcYFgO*-EoaMIJ+8Za4Sg&bD0$[G[l5WKc#NBbkZ8ijrQ+:eC@QTo.\drrI/e$585acIs%ch[#`Z-c%N+00Jd<[LdU=.Ui<,kaN.^H!lo;&jcb+%!`O*18;rERW,CXrb!9"R&-N>u)OkT.%j'H5-iG'4'Y(0tdO`HFX$P*FH,`C4dN=sPPr%)Qa`GJ>eu:4@mRD]M"TN#2CX4$:k_mlG`lnDn;3f[hFl-Luq$/8fEfrOj!m0dY]T3A=C5/EnY2WBIjha>R7</'[^U2=0@)c(5tWk%PL=f"3h<m!N6I7dM#)XWRGh:+&bW#`/h&P!P.k>*PU"fnaa5.*crJf>!^uuDD0DpiogI:C9c0Zc4Vq(HS'q:7cbisr6)VFm3bdUU%UA*;qW=l0Aaa97dVl221+d1DMQ`+C="/;Bg]t(BK;<ur@n!V'A;7TiD=q5)Ii,-I^Q&Q6/hU[i>[Q'hYkZu(SNl[#I=uJOUXY?;5%dS9r(*Se^?7!0A+HB&ZMMX!%^hH_t:Oe?mHNI#den'X:"o%VfAJ>`qkanLUJEu@Aa80HnThLg_1d7-X_G^u_&_o&Dl%hQE[KN\m;%Yb4bjIC^N`<LJ>>S,3cI8iebFSjQJX$-"ODFcj<AO`m!mj!67?C=]]D2qK4!\#LF]Z]I/-6WBOXACbI;Y1!2[S`!NU'0$A12Bep&%E</qEj6N7c`0hU>pWR-9m?%j?e7-8?3.Hd\AgO4d'9PP7MQA&qb]*hcd9@38Vk1lV+p.0Qok]a&'tp:iZ4RC?O_(]0;imruP'STr%24]:08=[)3=qV-maP3a7+V;==K"0;3+"XATJBBja`a,a1*7f<p&ugE&2O2TJRB&l\jW'*g8^0;GeQe/K9-bk;WUGckdK%\,:$lY?%`&Z%tQK^['bf"9KAcpE:8VoCE!nZ;:PmIpcjG_VKUD_HWE_DI@Lr<Gc)]^E6?G6f0%M`-cCN*E./hd43"=cgD9V8J1UI%E@d&-Y/%Ko5!n[2GAD8NfcQC1ipi<FYoRB,Qg;'cCuZ,U:P%7cXud5R@g7R+cKd,;cfF?(D86p20,16rPJng>h$i,uYVkg>h<q--C\op9$kq%e@(pK&\1Atdoju=3&`1c#Y^1oqs$R1.S#Il5[m$=\:(at@r6$eW+_XAH>Hef,>r``h8;hkXj+)(2$21Xp9-qr42fqJY=@Reis+(,%6mqD0<FS\)D?"?=:3#%'3YD-h@0[0k>p#Bi_+Iij?eZ@IM*u.6_&<oE[52].XT\U"]i1(ZKb52<gD8@se6M`9(]eEJD:<2eLAR:r%[SnJ56+%DNSQ;J&VJXrL7$suYg30#VADq+7mF8H>*ql*nTWn!qQ#n4tMYfpp@@a^k&"Q7\/DL0NM3Ni0p4l+FPhHmI.l*":B$lHo%iel#"$1$*N;7$t`g%Knj6s>*8f6kTNc8K<a>^rR"e,,3t/1]oL>k`J]/C1c-5Mi-ahgb:=cb?nbT_\6U5,_3L5kehYmp4t]B:>>0%bkhMLB>DiS90uS;>IHr_P_6I"1HdH>_=KiYVL])F+gka5O#:cYgin9\(mnL"MPLap2a[1^YD"<JMb-p7kS->/J+Vr"LHBHXFMLLM%7u)$Jk*;(])!"MJ\ek>1iud,ESq#g_rFJFdKSXfXmm"qaFetX18JkaGCV"';pYqlJ`["XX*.NjXDpdr)F=*V$W0p4?hmULt"rN3h%%9*]Ud5)uq<Ji%6BVK55J>4jd$FN<HRW2seVZTt-L5=<EKNQ6'j,cW2CH)pFO4FKFqXJThb75UM>X`C`:[(L7F+re*#t76AAZ+PD%-ZOj:*?I<WB_Q6+-RR(r+s[32l%#AN&ZS)/3]YR`jTpib>!g"1M4BJ1dMuN6E.qQIhl!Xg\kF@,<0.fTZtumi#t;":mjj3a8hMVg%q@I<>X%N;jP$5us_"Eh:Tt8C;iQn3/K&V8U^4)BN>]'5.Mder7*RO-mTaE'=bZO2o,;bQ8W?b*Y4;GOS$')6fU**.&53Ob]J5\b^%4OU[Ki[#:!cCT!;nE"4<\at+%F];(6qs)rCkd&6?SEKT=6n4]kkkR+h8;b?3TitI9`X+PN915(TW>jV2S>'1<P;SWm]Z\R,e*^b7%.M.Uu9a>P\3[58XL0Rb2@HBDaUhLK9X$RXBa;CQ4-S_AeEdB6;EF3$ofqNl+nAK:2DmV8Q4RX2!)FqAsf;ujLhHVWbke<VdL(5m'%`lu+1\>Hi'dQGn=>p3rc6q>[Lm;t>B8]M%h5;`u\nVh@UE!*8#%bQ:LU!0kiX9tC6ONu[M+M-QV>sN=SOo5GLPO$YpF=#dH>S?H0%rO0<$$9TuQS.N>k*.api"'^8I7lJnQFQMqh_%j75/3548HE'74oP?E.=8TB/RLTX&-@sP$\SPM!l@QOE^E5i/)h+Rd6_`@E!8<pl%EIJ#k74Jtpl^*qiP//]OhFG*;9JVYS8XM+J$0[_>G!2\`#O\A.!dEQ-X`8X/F=,8L36gT?YHkuUMPA?a0h@Q[V<2Ha0&c[s:m^am%qS<%.PC1!5\UV-fe2lTn2(E]F_hLm[-<o!&8?q)G]==]uj^mKe?*Ll^9_c:B(J/qV1*J3]7%U]a(RaFYhNasH'^Vj=Q`JXJ-ZQ"8%k"!7X)r*5/79tIU7>APo.Pa@^>D:g?-s;@;Y^(:=>F3u^BRq,26eiF=D)_Z0!u^.jr$5kgaegis:Ol.e*AZMscCr!u17U[I`K\?5%Shd<[;DYcso`J$8E3b4o_eOgF3SP)medNfoPhA&`'d,g:U9\L+aQCjB.,'6MBR*Cr!Uj7e)CsHR7r3tUX:Ih8-q>YtKORE_=1JG!%jWq;Q5'4;P;Bg-l*I\AM"`Re4A;rPt(johWhWHa+#Mf6KI!ll9[LqI'8?,0`SL[Zl-)N&dG"C6E-CX",MPEc#+db-s;;h`V.13oo%l@UY:#T+:%_n[7]'4+"&j0Jj%,OXY=2it$+&m'J'EsY)[Va:^SaLhnEj"@K.!&9)K[HVINA_;*`,)f._EB(ROKPIaP@;8G!J0p0%%.6*3(c8]la,f>aYIME>h)ap)@^o$$l#3=KCn<,kB8^7_3RhK.85jb,HSZ,/tG[Y2[Oq!sTlH1$;cA19Vpb"PQ-aakm;Pn'M?aOe4%k6U"I5WSuMr;Tu:(t6CrZmN%Ldrj#Y)!(,en]*e-4H.`+2StF,#Bp<dEm'CEpg-2taun/m-Qs$TNENkKrup]JP,"t=k^Z1C84j`2%XI6G'E9ltj+(Is!Ys`<j5VCIk/5?nKef[6kS*8eo7HiS0M[*BC*>:g$G+toK.1@@CTcBXMZ(?);:Ee.1oT=C<cqq*L9Y:WI,j\4T%kf!0O??[lPE:H8tiSaTa9uM(2BQiA&dt]ID9kFSu$947@K^**g#Ah2,UbQC^QL>BFI+U3"SU<h^L2qO-`->:i.5RG`=>q>7KOQ:[%UZAlJQ^<9%@8Gu_47m4UH.PT-FtA3q1V1l6<]LLEJBmSjMJRqR(mA.F&S8c=%;lYN;(#e?M%^b!g)!nEgZ`_cD>Wa$N\6mR-$K49%PrC]b`*Hj/L-s<GO>/rF:LZeUPRE4n&`_tAQ`^..Z1m.=pLSC`k]u&'NsddE7T:%nAQ"1;M?Y-6<5Y*N$R9>ciX1V9<X6$YB;c#m%VSkiZY)t^r;1+4:BZDF'Es.8;'hk/V3\-TVMg_HOi`<:BJ9C5H";/V70BU\M#;7=#4?LXOI.KO&9t6?hZ&_M)qrX,j2pHuu%%Rg6%_]d((a]Fd4ltm+QLd:T_Z!/SH?Ne)Ec!hX5fKfNA"uKc4hLg3kj(s/[s%sXZR23SJH!&Xs_MSg__&]MFE*8>7poT@l0(,^W'uG@`%SAJu<4qH%L'ltNkShF6EP.qJW\\,6Nng\.j8gYmOQ[pC#MlK6CZldD7>/DL:=#]$fS/Mb&pCBQiK16oJ_9r8L/:JB^Y.>__Q9cj$%#N#S:`oO[cM..j!mc8)PQ]Y!&bESK%k:,BN.mij!]!L2A4=N)-8J"O,J;8SAik0fm.3,W6H4koN3DKBb7>R%],Leq#CZnV_%L^tf%R'Q6KqdW5'A;F_b7mo\^P.R_?KYS/jA_LTc'i!Q#`n3C<M&/TX%`.V3S6fMef(hL?\mTt%aU7Hs\/r,J,3)EHVqtoGbgTZ]i(s7t%2g]>jltt4*$>DUkE65sEI0^He\IHogr3fpsIl(Mt91Du7o#cEe=7k5U<J;<#?b#.ICBR]`HmbQmd7"Rk;!hg?9UXZ:5-dG9"aX^f%H`'MYp%9fUO$)M!=h(Q(7=_Fr<gT$\`k`&:0*,L$5#<8cn=0t-Qmg=?cLUW\$$E_+?f$WWH9D)(.`?p@!(klEQir9fE;%Ni0;4b-%1SCW0Y!Y]OVD<q]oQ\N9F?o>d8,$tr#8.9NS$L,)N05Wm<>i0J.iG_$D248@K!p0':6hCq,=)3G1;K&,`kqe$/*#02`BL"+GVF;r%%^9/M)I1bLQ+r0$\^!srA%o$tO%eaDLOL8)>^pB9?nmp/V_8@eXO!GtOS"[]F^u"_2#.!gf\g#Y2T0tsO<.8Bk6P(<U^Y^.qCiA#%A7pdobMiSn4a81&*7S&'XC-Yu1[PaGj5J&qjlhAagbC>M\/IROqspK)&3k3`q$=AR7J&KA,gR'%Q_]G8PEEWmK=_AZjNV41`(XC'%'4ZTVVakLF>"(giXj?ahTS]]5(3%@bKL.9<*F(d/QWZg]&Ml@_g5_9;8.=[B/LJe,9GG*j3L1o1!h!Wi'[X?C<gTno\r;:d.?7*-%-/Sk1eTlI`T]Kh#J?2b5L`-*,$puuV_UH(]qB@?%1G.'@a6g#pd3X\aAuG6o9,<!P-blqT=uGV6!;dXTd_dh8'hX/J";I\i:,[Bi%"d.S'KZC=Xq%d6,Pm=mmG:a\5`#[ZjfB%#WSk\\-bDQ6]qpA=f!AdG@#-9d^KUTP8e1F&k*`!Ye\@.=sJu3'Xh:V22Jg85oE`e0=%6+&uoXOh=eeHiJKNW]s5:\OX4VqK7ODGtpFd,iD30>h'OPp-N12g5=&W?hU.-9n7EU/Qb9R&Re?-;*_-n48I]L2)MMIB"ljQKnEm%;1>J:[Zjd@0Ra3R)YQjDeEG+aL'b2'0rKQM/^1r@&O[>F)<cBL)/ai[F+TGL*r(,[BB`.nCV]m!0+k\r!cN(oD/>OII1f_])PPAL%>I`/BDJgeX+Brf=.RD)7U@F]sQC&OhmU4SYQbpO#2eVca;dG./n8p0ng6U(m1in9gj7E0oAp5Ndq7m@l?7<,8V.5GN@a.Y5_mts>%UkoYX':>MJ%uh`"9,PJ>Pq&F55_d6<e;%8_o1;rO>Y9_K[LTRf7GDO!%,DCaOW4pjX?dPV!T==XQOZ[&*U>NfD$6Fo+;?!Qm.4]W%;?:@8o&T_>i3<8rU?ifaPp?eqa=@B@[.8s8JK_cR#=#"+1fM/VPYrDJ-DqX1$qMi3Jd;DUMAOB*2aam,22"69I3HC.]b@oW%kg?p%RG,fG2P<Gn$74ODVGM"2'WIfiMhdLY:r@BCE6Yeucle\;OX&!0To-7KDtfI9rM]'*6R)aR-Y<lG,fH5IcN2qf>Te1(b"2JSn+!3)%2DM037?]f.J[5gS8Wt_?Hkd*!6Z!Op#SG0$9#Ogi2nXh'`FgXj3hDZOna2_7P^AV[*Yh=(FqL"cD&V:U<9sKA%sE6_O5A51i1\#s%AYZt%=D4-'6,8U-eEl"b=sT7m!7acj?H-j(SS^VjcsL";c=D'pg>@U@@Yo\JOGVOm"P@lFJr!mf6(&_B6R7LKhE2qL/%R"]$h!&P%.d7Q$K2cPbDaSEeQ1lusXXhs#c4@c_F_#KES`Pe>Xd9<tGUKG*Lo<mh4/FSUl&nI@RHT0,q>tq_ruKmn`f4IfQ*,Na4.`g9Y2)8J%R/q'[h$G9_h:*tW"4,&U/UktXGs^'"6*0,5-SoZ$%d9"!8!`DE3-9aQf<gWFEU=mJ4JgY!YV!@Q[4j\;F8OY$hZ][9l/$U>'cdkm%q2\)V>#UDoU<*0t.0.R$@Z8S'PBbn\CiY-C0,8hZ;:BmJ)kTQ!?F/D5Bmf0fJG\<1H3hM>UU1,b$tJLk_9=lJ;tlPd?l9HS/Ln;u%EOghLaKXQ`(+KO!<E3JYkXpOZE*%.s#g=iY+__>.1)_IQ*PMr+U539Goo3lC/t0g0(p%PF)O>Br?1F*hf5*+$4ij,JjF)'[Es$+'%i("mW[6bp;L1qq\ULtEcG<n/H>V&2Y=%0<Iq9oo$!b%2+SK@cEiJURa@->K1fKgHKT`AN<q3dW:I'?%s%NcU2%8`0nN<a=;n7fif%;O?&uEOo=@hT#?^@EXUR30jA86$I10e:A,UEE,!jkY?o*lF7!oD;[uL[*oGA[]:d7#4G#[2_m-@\S9sN003(.JYMBEmc!n"bN=YJ%:qU`i_bRkWN1UoZG6p-P,.g\oB.1ih1-YtCA.8%H!-kn\[TG49Tp;\salq*10E_r4K:.?J<"6a$+--t#E^LY33\g.1(7rP\DI(X=%OUr2e\nVO10]^u&LI]cNYVA>f:LZeU`2Q&M8/dmYM>GT;[<5'?(lh1]RQfW'l+4V+ZDuAJ;`ctPX;Ob)cs\2pAfPrG=bAM0%3:,D%&OVrQ.oQ>![[(kY/hl(f3G%>1\.5XDUeaXT2Dm%KZ%7o)H%$A^MW@1WQWjoX800bAN=&Gu=Ln7)g,?3Z0d9Ein50`-9]tWJH8iGi%:D"/F#dS_GW4.RRSkK$8BgemB*28YDMpLV.BcK.77&c:E;hHN!B'9DaF$+ET\J%ATr8aPnHDTrN$#W+T?!9mF+\BS7]f&HS0XKR_%8W@V7a"(ZK!>NHLbSd`fSk:_@OJMc*^aU`%R52-\p7"bOP_m[D+B]+]U?QZ4%(L,%TH^r5I\!Vs82;cI704VX$Uu4lB+,/:.Ye?-%ARnO'09irs@@HTj$O/sa*gQ/#&^^%(!],\&5+l(,N&7>VQ6'<[<Wi_c?&sr'P6,0<M&E2$K-QC%htsH"cfe'Q,Rc<+Q7rA-#pGSB%1:dGj3CgS`I%HtKN$;C>\?(-[7O(3*/>u8YF;b?`e2dX"X1W_oZ@dhefu8A$5l.#]C*WZ9:7t,sckP9/=tGka9Z><(IS%M3Fr5qG%RfbqQk"`DRYg^r#.q2%oe$ap5J>jLC(o-7AEMI4<b@3Ocnu.3jPCj4qnm2sKLcotFeesLT_kXda[VT6"8i`sV,_a-X@:j7fO7bK=%o7ZD5,Y8-kL)d=16[WYaj.MmqJ[,GLFK5jXTjk$S-8>uWd=)H/gZF-T:s9--7I_:V3]WP*FLO[\Tu14q]?E^&6JaN1*qV5Y`@^]F%]5_C`6ZP>*'aZk/>S#^@">f:WQSp_ciEs!q2^&J/_\<V.`n]6'Y5!O6Vu\6(eY/atFY']S0PcN>YdBV:3Mi#2G[@hF@pt\sVp>+4%JT+<a!F"SqcNY71>i&;t+I';qdY(Ou,1mrAU2$(:GbBUuR6m`%\Yi3MFPA%pk)s'C:rf75DRqTY(7&feD%L2nStEseNoE$`38O[<%d:I.@Ysak$]Uc^P81,>=[O*S3P=0p(8uCXFR2kHbh8"2r8>W=,7LTZi%]_0s*uE<llOWWs&pXNg3N5lS4hB+%4+730<l>C[V_&4[%N5b;cf])JW6UgOg=<8o9=sb(h7p)WDngBj9L*fUDo`ccU&,fJEZ@LPdYP:0A-PPmq"HJ=\i(R;Gm98sL*NkB>H_5s8$1TccJA/@Z%.\FG8a];e/CQM]>JTK%"6R4'<e`7%,.B6(=+aH;YS;6-1E7hB'4VFL@V7HP]q,2q7=;8Eq3n6b^Hjf1X#gro4"]qW8AB"6]R>%FO%H-`5$5Z=WA3',O=RA/);XeNA%k=jVC>(NPgE+=9eT>Z[4fbHKeZ"qWV`Yu-\._1N1ZJ7X#r,Q;Rl:sg>YW9ZN3hY+0&k?Z58>].s%#*d(e6Mb>j;A+m2fjNE&9NfQ=Y_ik;qp<gtA=ZCn#rW]b82MT.p4jlbo_[d(QVbm1p[L=M_e'qn0/8e>DWkD#;VUNfVq<&NNnmpW%Rm\da_?@*$6f2_)VW7@9OV2QGH?<%q?+3@(h$82rHFjb6O=c`<BsID"R-Rn)*4DG1%Uj\IAgik'6T6Q:'IY#\Vr*j?c2K>fKoW"C%(6hO-LhYCnq_":^GaNdO.etgVPs<ph55u\[U#Qc$E^,gaiVG`S=%cXB#tXG7&DZpi&#D&W2dALb@Vd\<8XXZO\n,j(hfg=mc;<fd%jbi-hoj7ViO5N]<9QeB7ED.T1JXE@4Y1,(+fjKtUb8V;ID^%=^K/>\Y,@GXHnk3grT3_VN(A)l2KoqX0`gOL^r6Ur0H2k$8L]JYl%)nD@^#g+niZr))ETMUlYp*Me4Z80T$q%F(_/$?1KHtV$pRG,UWc'X]L;^UCi1na?>>;MF`Tc(R.$lJQRW<0I?/F8J?b;`m#?5&'j%n/_tV_QQ+#\9W-F>Gl*(>2VjY&U2qAEsjOEK,\=mr$6.o9g'ne.kO6/enWE`B%>S*N,,#+s'AsIKs,jfKK[4%dEG.J\TmE;mq;cW%'O`?W$J"^f5\d/GgR,bj)i1eJ\O:Z6\e.#?1o@TUrB0WJ0VebA4L9pMH1'Xc)!]+J6J+Gjk59c!1gOs+>#Rf.dq":JG[b.aN;l':%qFJb&,=U3u6;fqoi`r/q3,R$r]Tu6TpW;h<3"1d7ZZcNGaGHO`csdhq=;[VOL/C6G::NVQSm-jrC/[3cm)#V[D;iJ>c8p6T&&;]0%RL\.JY:rqfDFlMsoXJn/%E%Ka\-CZL*J1_NCr$jdV;k0/SK0T9N4^7c@,Ud&.*StW;lhdBrE'GdL`t_NgCdZjAo;QtI%HtKN$>g>%(Z%Bk]SpQ/EP>V&6GTO#fMUS=&NE_<0,EhU1d40u=sNB$q&9pCWF:q]%;ZP-&^bUd*0r8"-lEX!`U+m@d1LeVPe%5S0Z&!dZc[ZL%R&pg,N6UsXGhl5%kqLM15p/Mthb4*p.quN'K.J"5h0@M-h*>D"(9@U**H8@FeAuA@gq/4Yb1$2Q2-agmk"KF^XiO^?"id,(D_0d@%kagRL;Lb%gc]KKmPt1oUl3X/F`&!.&U;a#2#re$*7,E<H:KJ^E=uaF1?d$&,Xi_+A(tYQU53dt@C#db*7Ra@&q(#-1aMHIGd%(Y2%eR8dY0%c9/j4_S2rg)u8YZU[%n%u%VLmLp]%`ADSdK[K2:m?L:Cn>kX`=(i2HC(1fYq8.=O;lsj/_tFLgo?e\;p->,ek`A^K)KCJ%kgk]gHY>lN!fXJe9u.k8+%lZ#oBKt1Mag$;KS:M-;Rg:,Vol;?OmB$$n&('WHMEf+lOASs^l:'pIM+SsB%MkXdj8Pq/e.[<)g5Dc%gH=eIJ*.T('`g!)@Z*d=B,,R--[h>WH:&GE5"!tABZ^Og"K/1:A5$2nk&>LqQJ;SEBW-8XmA840XA6TSUU@1kIeZt?iDB.UBT1@1%PIOIHoh\!'(F*C)js5S+bKs6Vbj-Db<PfmmH@QBT\m[FYZd<e[hj=J.(;Vot&Ch+$nn3VKTGX*@!i@cOk_ahl5eMf.Ye^OZ(R^nh%'.E$o3-R<5k_e9jiFY"X^5N?r_]3AE8PAp^G:?7hhLF:B0bIL2$hLTcbI`VB55?F<OR-!3)?Jdc:/J&HE*rl+1Rc0ja$@MFbS?p&%3b'MIAUbL3Ucs%O-C.DapE)9r2o7-ncTOr93ugd6P;+gp98?`glA8d,[[]0Ik/R@1@(u#FnsRh86o0#/i\[li,h"X2Uc*iMe4CeC%0bKc_aTgIcKOj<c'cfS@A))bR#U)RXQaETR1)^sc-C(;u]8WIdZlAT7>#*).UgS^o=Gum/9]i\P8uQ\TOp?m?qDtL-.UTG7>"Gs<%:ibs]8/U/?Jj"`Z<3$2N:.Zo^GLQkGEL]9;<76UL9[T,(?%Km_CH=N\=V]I8)I&mm_Mn#1IM+GoU`9S%?D_ZQ--^:<l=gkC^orO8%9Wk+'&<%b9$_2^RooPoV:RL,'ZU^@)s,B?*KL5;TDa%s_/p;]kY%hq=6[Y-$74u0>aeV!Ph89*>4M#-eUHnA5RK^geAe'4Vl<SRJ%SVpH6lSqA6dN)"^+cur9)eRKs+^qJMkmQ*D`Nn(*.se;9]0j8>=g"#pks;W)E#*)J@&@\M9+)4Uit,fTdK)!T,<66;l4Wm1^H8BB%G:&+oL/[Uh$0'`fR"q/\VW>>tAb`]hVJk8[L*fl*iV4GQ-)oaTjI9l)*gSLjPO72"C:Z8uX;0<^NbM/>`PtZgq-BOPV0bFLh.eN[%BHEkHGrR?rK,\=mr$60(1t1]egQrMoI%/E`CRLDYbV(5!M,erO_bZT^/kOhP)LearmGa6Z75=pH#Ysd].Up8LAgV/7D&%NS):71-%4CP1""_YtUB?4F[OcQtMrM;4pqb!kr0VKVV0fI?@>SKOgiK+(S7)W"r1!*-]<t.'ZlnX]d)//:,.4[^S@rW[-<5OFq5sF,.k6`>k%+DJ=%)4'dW;b#6#%ZlD>#^eSL`#UWD06d)5AchX"ZBIOS87kd1:h*b%H`/?A78kB=_P3Tn7q"E*f9[!lkjV.*E(ggb2sP/#RRrgi%'kenQSd>6b]R'mFS/^*:\3q?LqT,LD]75t\8IIR6g('&R#$9"s9]c>8[EJrI+\eF<>(NGb0OoL%T>Z[4flV]&m@P-L`q8JHn28F9%Z3*]VY&h])6AY])f&4/%(2><;C,T"<45&]t.0l[%4$tknoK[QUPhj>TNC;06$=^UhPuU1-iOWAaPm`sn(hRH^@9+'W"1.B4";/T_%#<j-;+nHYX1R.F1BQ=^W$$V2L'd\3;:]i!O>(3n[X,3ZTG6a6f<=c8OoV?=D1mO94Id6Rg3kY#tOe2mVZo^6j)jS$)%+[^NH5NAJ%Ig"i@9T`Hgg)dut2t[W$+H`Y9m0aTQMl)/iM7rqd^Sk-BkO$*)Fh4I-Y\V[(dP89."5?uX>O3L2)qJn03[UhCH2AM!PpL[u@_?OB%+[0Y3WA>pg:7'lEO+_9d]^kgA4?iD1o9g>!L@TVWDO?P#T])`*$dV-d2%Y>N7EWK$cIC_.7C#XX#VO,u_eR@u77="oa?26PWFj-P%%Ekhsa%U8A,9f1lRh=ei.;"mN(u??=>b6;@.":=RKq`2_2isO?1P2dU(mn'YcU_FlA3Ga[;4'0/MJlMaDol'TOrp,Y[#i_?L'M>p%;?6hRg0LmOhH,sY7"^4!E*d#Z51$NcJ+mkQ(G)_X^$TW6(<8"hPllCeTEsc_!C,FQ7F]em3Hj?+@P20tQ@e4O<?AZI;WZ@KHLV8l%0,iO.l6?J^-4kR_8.fV-mSGL-p8](Q+13\L)n2P5g-s?ON+QS1f\_f->G>N9kXLA4Y7Y0uSHpEs>siOo_u?b#"I+At(=q3.oe>R;%gsA*7@;o5N'J$\uf\_T+65`p-@V>Ap>fM*jR(X0_2+5ri]-1$EdNs1/aK(DRUeL2Ap&<^X;5S?nYS%LuqSJG1U2:"<7At'I-\s0o%jp44)ZXn3h_#8V)p8`QN!SL)r4Rd>*YXgL_DK]R<$e9!8<d!R!mLUPmi!@kbN2'Vg90qZIaunS*:28EfX$l^/"itoK0@60E&CMB%%26[*cU(Y;^fK;BT(I`<mE4JkVA_b/nbBT:j,LdC*VOAl.VQO:i$ck5%FU"6WZqbP<+/(,TQPiHRi:c(C<ItWYo@OU14B;U;.AN#6%@5%k/b#ET'C"5O"a`cb'9A3Mc[#AL35\#bET>^,WAk?)d?RWT>'RQ3$8Dl--]hK9tE)e4J'#2`-Zt,9YpDHHSeBjr-:Hc&E?6U6^%03Kp)Ad)-)%r\s/9Df&HqRLPc=sEGKLAQ1<*qbGg3+rCF$BUDNdP1]CEM0i*7\=<cO[uZ/k,<go_ab:mQ!GK0\E:8p=21_en4,(S%$n:)I:_hhtgj`a;%cLlN8U>Z(;Dtif,XqK7IT@pFD,^QgHfs@#aHG=2m,eo%.B?uXhje"E"'MD-7*4BrOa(cKTm0S0Lq^OcZ;^.u%qHBm@8g\93BPL^j8AIN;6uR0F0S?HEis8JE#F`:U<!209CNSI9&XZLj@:#GFF]aSFEC^=;0f]a.huF-sWc+dV%S7+#lg@FX;>e"t%11":/Rki"k"iiE^>2cLr8Gho@$4V9nqm>>j(sj_C8aR]6.qhSZf-_oe,;%aiWZn/Bl<BF>F@j2t"3V=Mns:6DSMK,`\."oDf0Ern%2Ur8"DIN7pN?FtJkn/LU4dB8ALZc@:Z*,rPZV2E"30=haEU\,BX$#s)g.b(UMX6]?@:<4"#5&HBeu&89Do@ZkL04"knasg%LE)$_%7`[/HQ#0uDVHT?_LN@9lGR6g`SBj_IBk9CG06D?.N]"'U3&@E]1M2FH:S"<;$e6/80Fl]0%gtb^_"Q\!eUi`]V!\nWWtibD!.f2U%V0YU49F_AaXk%T;1qB:u$QWX_XV#0(ch!?fh3"dQh[rs.O],32&_&W)#jN:N"SI^8K!P(j6!7F)<ubp1lj1aU3s'dT7UnIQ'\^]m%fQA`?[j(k]NC&TQg33[=)Hu'Qm0Id]N_g*'Q@/hG`T[+hgaJWQSpau:(CbAp-mE.@T22D3j&sXp347=JVmi*)q:e0shbHDClD]^+%:(&:+%D)FTdaH7]''ZK`JV+;I=iQk-3>?NP^b"dl0p#[8Uc6;>p;?B3<6u@fVS@q8*#cn8"Y-4p(:hoKN%C/\0NT"5CA,Fsb@/R&%dUaCU*uZ"BPd$]fhG2f,K.o;-W/d?ae:sJ]<Kf$^F=38D#YO3j3<!h;O7#A5:&V(JX#*Xq=B/eXj/e^t?:$C43ilohdpnh:V0@9#%BC-4V'1=_@50RZgGR=j)Kb:rE8\n*:Wk:&3:l9s0]GmXW;)Z)oU_Xs_*PdiZ9(F!G"F&"=4&(o3dV5.TZC1.8l%_XS"4FnF'1<PH%l/megQV_mtbg2Bt9BKDPEl;75BSsg6&DSEWMOR/+%O\^41e<?BKW.Cfc+-+)Lr#;sAS/*"-mn>7N1ru6!R;`Kl/E"sAIYjE)abrR%Znh_l7Z;D0_b2Ca$^6i\].kKNp+'`ueRSq@22AN:MR+]Pq@i\=>k,>>lgO[dMF8KlIgH6,NZOm;mgaK%0TJl"C;-gU%eN.iiVklj%)^6D.r?Nc$iA*g#jeY,M$(1hPg78MD4*F=o%4"Y),-obCi<,'dHl556\#,SRbp%SB!\DMR/PM%(_sp^VD2!'LpUC=QKPa-i0#POf%]gGcBVpX%*intbYTn%2_f95oRG>*lb%U0C3kC>:$!2KZ`MoT?_2U=Nk'Z4lTo<P*7#AODY+"3_+>D1^RjOR"f+n39qb2*AuEs=G`%&Y!g]L\MS-%J9:QOLEnkEUA<P(7%!M0XS#a]<\C\]%"Q!ka9;nLa4URi)S-gJ@4b3";/VVKurE;A^"]X_mdcY&^2)N-WePtjQ18n%Se!i@++A*FiK<Ao&(a_3<lhoF?2lpohJ6Xnm(.1-m9km+<#n5HPSHn/NB?*dXORlLMXq\Dc(AWPp).P&dIWR3;)E8<_/#_O/j!?[%6o*P?NKP$eF`V<JRU=S>gELt+KoR;`Q"Sr'r<CY<"6N!M3f:aUX9YQ(q3']<`ir$U:Bfhc<JIUhAmjg7)(BZ3gZ3!\^ms?t-IRM4%d0D%l8BF/KN&eV_rGhet0*L<.#^.CZm`@V@p_2RD6MkY=d'*OR&n\A*(0W]ICCLR(&c"6]]D5B5A),:78Ci\!E]\j\^6p.bi?qKu%O^*7u]SdQ@U;3-3j:!*^nf8g"*.mLkXGDgWF0s;u7a"iIREUMCn^9Bh?ld2r[cj(`;:s)XDadmJTASZB0]MNic;5739`Hg]9.E.`%$J5tfihp12FJp9R"#^=:=fB.FF/MagbVBeMLeqV`U57fq_F4=m17Fh]3/=/f*Ur%Oo<.%**-ZH)QdFc&(1qU,(GDH3<ZFhsj.WRj%0B9MZiEF@&>o1DZ90\W3cf7CH)VgA/\/DN!F/`B1B(B-`L@+K`)"ZlZW%p"K\+i'MM&A`[01Ocr?;AFY.rhe9F30?!CZ9X>Se!mb%b'-41hQkXpT45DrO2=?W9S6g\(sWEYoWD"BQU;TGL+5nJJ^"X*_:kYG?/6ZZNJ:(ePqR!MB_'l2e,ZrD%L!H`Yh:&Ab6c6$:+4ub%$bhL+:-@V/'0>Q#SX5K7@hnjQL&MtpXZ='a$b?eX'g03H*?]4XAkIQi)Isf6ZOWWn%*E"5O*Def.H2KM>VRCCAUA);/Mo[n[XbVO%-_,]2j_n=KGmSJA",ZpD*dN^R:0l*q2ftLc:D*@7DrWZYO0(bl=>_;(c3_qm(S[`e&QOlWAC]@nl#'q<K+D79_"p$HV@m^4/4UWD%LCMml.*(J+QVboMOTME$m?jTfP6gt.![]UbB6*%k+M+%`-HmuGK*sW-Z\*(X.p*3sK@ti47'43R7Rf'`Bf68kre+E?p<==.71NT@%=j(?A6D=l;WAG4:0!n*P0g<oZ@Wk7^S=67f9^t"sluBuu.0bOFo%.1Dngi:s,>NRfKD*3"Hnkk@J%-6[J/aB81jpb>^6A"!f0"*3%h$bo&Nc?CPa_uXm;e"7h13Xr[mMs8frq%A,R,i*30XB$.7lF4:E@3G<9MS%a4+VBh3rp"3:-Hl#EBJKs[M.jTXBR4A=k90.0>D2%%OBS`&-_O!U(K@V%3eX&S3\<BAmK?":4+Wl(7UcH3MA#+Ma\H4Xm;I%6jOfK,7e(]>dg$HlIl=&3Hb7eK1"4%l/^0KrYoPf`A-UCO%L_TW('10Z>?khZ>>bQTJ)("#kKHZI3@Q;h;,SH$:_20delOoLPege6^>2HW_&r(&Pi5YOS5D^7HZ>D[S&asTUD&[:<[ij`1/uhe)%:-cN?@[=N$r(^Y0kEkK_@41PYrs1=MQ8ffq7m"b^J@:-m#?YMu7)%uq'4?TTL>*"CP=/$&(3]h7G6ZfFLY=+;JY<;X(lWce_7%SX%"V6<i6\14An[s@r+lX,Bo\=W.5(VEf=(3Js+ho9'@Qh.`X!6ua<Du;^>,!2#UE+gCCkis:%D)\OdUfOkQ%&LBe`8d>aO!f,84E_D%G)([*ib'lEaa4Z?g1EBo2[@[qRVmrSWRhL\!R?CMaZl&">u<3FXKr1[9ASbh,<eS,,^NJ?b0UHCQg^G6TG\/>f83">7jR.jS.;IC%<A_AlDprpL[/l7AH@?L94.>cj^/)#@P2#msFeHi()GF$g\"g*7Nk-'e]to8)E;RI[Ss;ch$+]H]RkD\dpoFIc+qWNK%@](0SD,0W%3ds2?aZr?U6(@!>NGO+nD$W8\5irq<L.FG9fMK6I/Pn*b.CYdkRR'9,2<H[i:Ob%K<CTNYN5$rXq=P.PmF$7tb6usb#V?.A$_"@m%g%?=fMG0a)[DO`Lc1fP%*'hq42>,p8AU/*C,1Am0&XZZl".)0"=/Hh&PD,>T'&W\%U>gM-"Wu3o;fY[V'kYk4MEdUspBeuD2<Y9L%,A@Eke6MTX*JZ-oC=786QrJLD#4N?j66M1!TQS6/ff'sG&+L<UMQVsn=uAK;T>OYlC/^p1[#dVh]Su!rM+8,E4sUM0S]Mu^UBnn=%dl_4D`bV(_B*hW?VIkttZ1mE)1N.5RE/M4n3+/@)>QmAsKA5p;Qm"N%e?)C&._lJU@a*Y9hV?O;gBKFQkP7]n.$F,?pQq4$28bKF%Ja&&/S&6_U&F[uLdl^LU'N0n!fk*bs8tiA3@=Qi;D@K?<2,&U-VMlC<jNoYA5;q73UTQ>'93p.4BXr7]aJ25c7&L<q&S-jHo95P=%,kZ\=U8VY/'TO`A\`a4h1[M$:,RcUEfjlUPP)#1M5FHi0VZ*[W_0#jOo\K5adQ1VPAkj:9q3,bF1SS:Glm8N$4V6X7-;/pK'uj]B%b&PWi6R;*P/3SWI6+5dX`%o@G7-$,$=5<W'l-kN4g;.9*b9sqUT;,3RE^+_K+%JU=-n0<@&(Lq\m5]Vk4\`Xr`/NdA>U,?qLQ.md%M)2WIniN53lH7XbSjNFk;?.PDo%_,NYqn<i+a?Jrd>K@a/&rrLR=hQW#f80cl]\5:e<Ql5qqGZ4)<Tt%g@23MG(0!=N64E4C$@_(%XJGn^IQ4i:7ni\OEl2)6B-H2L0OJ^%B35DW(n9\9nY.G#S)ZNN?e*Io9+N7.Qc5!Gi:^Xr1gem2?5+0b.'k.9e1L9>1n2V$*?951%RiZ;7c;4ssSTNg[!G:b.1N@9h7)C$NWZ0%TeQ(-+/)nuU0sjsZA8),XMW.5>;>g?o<A-m^?Eru\'"R725Eg'$0P32VLG%%or0%Os%s#(LBgo+n/I>lrYUMZ?JXuQ>Ya%afo]@UNFB<h])l^p@l?2gr^jDpWbln)gAOD/)a`*)&d-Uct)`J3A0V7408T^)A3g:O"6R<4h$%[:bO`QCL:8D0#u'H/tkqRnlWYp7@*%kRbtIQ=_Mf?iOKqfN+"UUgZ9_!3U3:G=?B#5&hI*c&!2S0W-Rjau&Ub`Jjr<_<h+L(.LQs%m4eZlkeL_HCMmjCjpZG7A3,qhh/GIRdTdCX448D7G(A2H"'!+/B'a'Jb]&stB"1bAB=C'Hp/kA)LN+D9Of6(n1A@9>GhD"#n;JO$%U=;qfM"'tu$d9o)?JClaIr=EedYN(<mV&gWF,<g=GH]tLB:%X\ZP'j$NP!*k"Am,miI5O&lHk(Gj!N19Og%0LZ.rrK]XPq;L(1RW%FJ09XH%@Y+'?1lGk8#"o=7ODnbD8.DBP0G8B_[mE>S4LlEmjUZ>:86ML?D#7DQ)J>/be-n&0`]>rJU_Pmf_0]3P/dFM&A^WUBB6*%!D%QZVQ2N+rf0@J,OhL'A;r\2-kU4Ih$G9_S[gAlA'IQ#);GpMruDl:9B6VVY(l;rr)NH'o>Ug^0G!>'kq>'(P@_BsI*&oaS\q"F%;dJ\JG^`i<%qkKo?B62Gbb&Yg%Ud1"HI>VI"5_BU)!g==QVb>@bhS3A<kHM'Y3[laDeBHGHTT,B;`e4-g`*t7!M(,apUA)M;\"SY%"Jd?@]1ta4B([;<aJM]/?+Nc'RCdI6+6n5*6"^BX4_F-)W^,eiB]!+[Hfj21WUoN#(5]cicL%*MX8j]d,r8-2<Kn2mSaq;e"+:,V%CG_T,@C3RZ^%']ZJ?(,6da"-cIl:sY5ZU,U0Z=@*Y*_<J-@(FBM)q*#W6sjQb_Aj/2*G\Q]OR)r!IttY=1o?(k0e^:d>ZkB(DOPl%g:;2T;<r\^)K'nBPn=&(&Y>qG$\6Vg]0[h+^g)R(L:`r_T^a@76GPG`^)?E]f\bA-e2N3jg/o8t)b<!jdP1]CEM0feT/=9pkc-:S%aLGB8mg1C^l&=:b1-*2<68Hm?CksIoXPSn`Ur!=-1H-2h(9/r5Yj#5M))?r#fuK2r8.=V/`Cq:=f[OWc=l)h=Fs9X8[h?(/Z,YEY%pM`t<brZp?SC#A;.`FOjfb2!q71=s8U1V.B5ng[)<^\_RoVe%f+nJ;j:t7^nEs$anQ`-@fB1WP(-AJr5K1gbkItbhNeCCC?6tNl:%3s@4o%40eYI)'3Pc1@-D;&&tuH='/4?<*/:K&S\)&d6<;P@fc3Q#IC21S<`!^gRA4S(#tIR3J*(T*JdN"dtnhUi*If;d6+4qiHN_%OY.,Em8B/?'d_j128=m8[L?$1$1k)!iFj9FgDo_rMO<8c070t"B*u#r8R2u0mb6eL--U'^']KrY#r$Q[G=/XMRgh_?%jn&=pcF<b%ncHVdSY1Ed,D@<&:*poZ:2TPl0RIo:)`Nf9<&>*o4D>Hlm]]Ck(i%sa#pP7t?4rFQN&V]9?@B9eZ_a&nk=$iT^2s\Zfi(Q+#nKUI%D82Hi]Qcg"[=_[%(eNJt[bqeK$6(Uo]kK"q!%J;UmCI.UUo>R`Y*R2"E%,4/@NNJjM"b]PZ$Cd2Y<.WpS2JC1QacRAXQL+QE,A72%3L(csnQ;gE02c1!0lJ(ef'*Y&\S`]EFH-@Q9!Dh7SN&X`meT)8)%=^Ml3ak9cBs=3S:Rr256Fj@mT+?jZH6_^\]*b-8^&TGEbb*\%hdjPF34*KS8."dUHtJSeq,HMNK/g[4G%H=ZJPj#m_Q1O/$c[L#Zbq9N*M7D?LSJE2Q'S'<J?&cjB=r7E$m/?ej>(1G\Y?O=5&-eh%4q6,^4LY3oLumWoRV[usGXRh,dcA8mbGA-?T_*"@1@]"*Q*C,%[EX&8L@ge9]?"VMkMP_uFkiFIcZk,09kL>pa=KNjfRk-SI_es]%'N;b_l_C`k'IDZgRjVN/nZpbsGfhh:bDne`i&Ca]]P6Vnpm!4rLM8[=Wfr%&N7;=s8>'K(1j`<&L-+9H/GhnY';\61"]DQV3e[I#%3\<BM/pB=_dgh-YSA`@U4SMZLr7lW;?=#lJ%@uqZ!sF4Ma7R5r7,g[e-^"`9ShRf>>bS0CFcGA!b^$`gE7Mh'$4r"ja,B)6R&I"p%800k;,Tc5<B9-U]HPlKS<=ZFd]UmJPD@,*Sn=>(RUo+V8TQ'1XViIEDj_aD+1ZTNYnppV`@R;nRg;C'QRtT-Vh]5n[.kDP'L\FQe%Ts$.7k)j9&fAje-R/;H06m<,!P9tQH(tr$(*)9rOX"!qOk_H[4dr#"h:@bhibQ5NhUR6*M9M,)C#G/Bj=!1]A7KhZe<^F1t>i2%r%UQP&]_Bgm$9hAq(I6.h;qt%I:1:gD8q8?L![c!%gH0at7qtX"OdRK+>F%B_7/^b2ok8#A$>Rm1\bK=?A07$_ceDd5*Opr*gDRt<d%MOl*Mr_eYq^hB/3&p`E>'Ud5Y5cVaRdmh>M\QkM/@`E%"`B7NP["`k.R.mr&)3_P6QH94lBA-C2Fbkq[_;4,Br$5kg8b:X>ff*+Q%jo$Ks1>)%+YkdeV\n8\l0a/;4%bY`;+.]n^p4h#S>Jg*lPi!_@pmOFI(!\oK;Xe;QOc?L&kRRd%D9b!(9K44s<k9F`:$<Nb(rCGM%Zc2,'8^&TGra,SjPqXdaq.Ju]##3aXbh'(Paeq3or3U+P@r&nkQ":)]bWOj(B'0KN)55+JF'd=W+]iq"Z)^BRS9PAUWN1l7fJQ/Q%9j%&Og4nKX-sf8B2akm2R#;P;qf#f/;^_Fpj;?lI(l$<>UQrJ8I5XFGd`ufh8d&@N92l?6+hDdRY9"j/qT+Q][;C!,"L)\<cWYY)%aL&e]#Qm<*#'l9So94Dr'[=6-&4IgR@[?*b$&C8SmXT&kU`f$J#fhi+.)rjqI9nFPS#1Nl!A/^%gOi-uc/2<nL;78ZZ^X.]nh=J+%k)tQF*/BhlT#r$V=LS0QbL[f)k9of2UPR5Pn.*:!DbB<ZG6mlsG6g't8sY/O6<SJeE5Q"k4!Dc/JI+&8_JK`nG\Es*]u$W)-(Gtk%o1Hfu*RO6dLff;A1NsH<3%HlO\aL*pl$!DfeWbJboYV04As6iA>a\d?)M_!t9OilO$7f)pnJ"/-Z+,(9=$;W(l^Sjs7)iL&k'/t,%VC_R%OZ)ku%jGR5oN@u?liqlN2c]9e8nGsY%d,U%fp$nfoX.At0jg:,M9h&3)\iV#KL9ea8V$,M'Nn(2M<l$=,c!FoR+4;hc"?J#%".F9)4m853#\rqUOM8=I[(6@YMT:rW"Vp/PL"W1NfYUX0fL7hI/pC=%7'rdd7hD+-Yh%X$+JK]rbp4`i7R0)D_bGOT`Xn*4(7-3C%>/[u[f]"XVM;QOPeaPFua'B2QF+@>n"/LGCNa*&eN',IGEF>A#iR(OtntG8/UXpfoRaa"t=k`r-f7Vis4i6O4!@PCOoZnV/q!4"4%nWW]ss8+$*rqsUeqL<q+?$k&q([ju%p!<(LAq&`&^MEl!PiS/t%ghH\/9o!kd0QJ5C[4mn_nUZ\qX[4'_l7Q&\XdZpGr><p/"bq*%eD+E_YJ5\GY<MsUj)7,qqY7fIlgap<Gl6oHi9BB8`j;#mb<T+#BKQ+?O$EW[O&GhT0E:Foa8^PApu=U9k0#FXqQ$6<rV.I6qVq20%O1tJdQiBP:T76\12ubMl5Pb'c(XC(spt<tX3og%\D5Q-$Y[mmH]=2_nHMaVZ,#?,SoV7rI48i`?_L3-mcR;q]N0W>Pa_"T^%c7<c%c!AW0#9(eS6t7[Y6J`bU_30>EL,>]:<@V>OEpIDd.d9%7D^?ua=#0+1J^!i"OkJhSRG1/p/.D^UF5K#^ZqC27Na#)5<b\+:Hu%uY%db0*\FH57<cF*!M2ap)$eN7h*,u_0CWLL`,-**2u*UKZu>m[(:#=@&27-O<ke#E;g'J0nSRfT]=X4!1/I/i;W>'?:&ich4RrEe'H%hehnohWJTt7*-&r\k]=T=G>Gp+?)`i[#,a^>5HNTr]XAUoXc\@pL>rEU&8aU\F*6P"5FT]dQ4JTg'@CqI7Q5kn=>F6IB5WsG?]O!%,:#(X:!qBcS"3MQd3rS="cBagH('e%V#4NnqTY@ns"s$d@$NWj(GL,8S0S;dj+C1',U0!00?,nR+u3>s3YL;ghk#?of#$lN^at6G%9`bEBnS[(ELraCDp^'5d&rG#p]?1Q`,5U[ups%F/s-eV(:V#d'kXB%?bLK1b[H'"T>1XhLWn_1W4+6A>E^5fFSq9b(nF'+<lge3`%+;^.@htn!&@#<8K/IX(j(nFfP8-o_LqsF,E^\PJ?cbBc$nkonVJV_C$iHOE6W60h\,#q8^9#n?-KE`18O1^`W"UL'Mlm5Y)-&RI:%A?$nd@u5D?7RmSN8[`00V%TOMRkduBM*]*")qBPUfTMebC8o.MakfM;<+=@%H_XaU(gO@40Nr7Q*ju>N1D6J&]*-Z9^aR;_6+'[d%aH1,:RS&Mr::=.1!i,B_\Q.T@fH41NTTL'RS?](0"ND3'Xf<UWUEW:1.]L@bESd^!&1AktrUf$,MeWE`TB`AnWi[LZXY"F\s/D$C%%3A*5<(SCUOsEldaKP!%:<rt6pqPPgNh$gRRs':E[I7]a]=CpXAcj'uD/LA`f0JNEC]k+.2>C%SN4ZZ5)#.BXN*F3^(H;[hL2j3F%liJ*H0,TGg/tf"UrGBTXo;[G.Soi1+%io!>D[!64pf1@?6)&-W<-6*mD:mAS3`p<='slIX"0:gk1%p'*eli)a='@b"/iL^e`I"f.%s*_r3^W!e`aVOJ0mtgOa]he[oO73&G+918gDu\EBTATY=l`\%tk25&s^\@K[J+o'%T0Kh:I.PObIe!44%tFA,kO[</T7$V)(ROD/%]^:.9n#pa.hKSqZb:e>;q#1eQZlVGXrR9BUI/E]tf>%=MkPt,JX0;P[o^Y-grJ,\`r;,/d^OD=17Hf6"plf(aiZGpHPQ.'-O2(St%<r8*TJ*+ED00cTI`BCuRrsQu,Nh099kFESuRF0pSL]70pkMtat1A>fP-hqlE9_W?uP&e5Zkq2`$`t,@dIrC=rk</pNqq%ljrVB8P%l8nOsh;"C*V#-4Zc2%?KSSnXLao1\SIW0ElHJ9=H3D4e5+M"Sf-1,RC\%)d,5<3BOgY9F1hS28-`d`2Bs7Q(kP#r\L>u(Z2N4bA%%Eu%@a02ZF5qsg5:]P#O!jAG=]0"*ipf2J*4bZcmR[;O7hBJb\$hF%1T)@^mt]*uGaQ#FS/e=bTV$%V>9];^hjY/]>thK,0tJ,9Mt%Igc6?3Fhhp2t>oMIXLSh5AG]JVdKE#a'\cAQf%_g++8P*HiN8e?[VZNhgFt;?[_apa"RGRMuWP5j,:+T]"idj:[_X3^\Hs7IsG8t%o'nC5q";C.P'7X<s5*MLoIp72j8T5U#'.`~>%AI9_PrivateDataEnd