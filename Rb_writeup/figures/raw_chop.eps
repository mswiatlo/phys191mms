%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: raw_chop.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: steven schowalter
%%CreationDate: 5/12/09
%%BoundingBox: 0 0 305 209
%%HiResBoundingBox: 0 0 304.1084 208.8458
%%CropBox: 0 0 304.1084 208.8458
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 7874 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD12FFA8A8FFA8A8CFFFA8FFA8CFCFFFA8FFA8FFCFFFCFA87DFFA8%FFA8A8A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%A8A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8A8A8FFA8FFA8AEA8FFA8FFA8A9CFFFCFFFA8FFA8FF7DFD12FFA8%FD04FFA97FFFFFA9A9FF7F2B7F55A9A955A9CFA8FD2CFFA8FD19FFA9FD04%FFA97FA94FA3557F554FFFFFFFA8FD15FF7925F9F92B2BF92B254F2525F9%2BF9F9F97FA8FD2CFFA8FD18FF5B2B85554F79F9F92B792525F925252BF9%2524FD12FFA8FF25F9557F2B2B4F7F252525A9A9A92B55A97954A7FD2CFF%7DFD14FFCB4E779A46696A6924F9797F4F2B4FA9FFA9A92B4F2B7EFD14FF%A3A9FD11FF83FD2CFFA8FD10FFCAC3BCB58D94696AC29571CFCBA9FD0CFF%A8FD12FFA8FD13FFCB83AEFD2BFFA8FD0BFFAFFFCABC8D8D456B24A3CBA9%A9FFA9FD1AFF7DFFFD06A8FFA8FD14FF7DAEFD2AFFA8A8FD0AFF854EB58D%469C5555A9FD17FFA8FD08FF7D527D7D5252527D27FFA8FD13FFA8A8A8FD%2BFF7DFD09FF7894686B787FA9FD19FFA8A8FD08FFA852A8FD047DA87DFD%16FFA8FF83FD29FFA8A8FD07FFA99C8D69A3A9FD1DFFA8FD0AFFA8FFA8FF%A8FFFFFFA8FD13FFA8A8FFAEAEFD29FF7DFD06FFA922FC9B7FFD1FFFA8FD%27FFA8FFAEAEFD29FFA8FD05FFA947B5A8FD07FFA87D52A8FD16FFA8FD12%FFA8FD13FFCFA8FFFF83AEFD28FFA8FD04FFA947FCCAFD08FFA85252A8FD%16FFA8FD26FF7F7EFFFFFFA8FD28FFA8FD04FF4EFCCAFD0AFFA8A8FFA8FF%A8FFA8FFA8A8A8FFA8FD0BFFA8FD12FFA8FD13FF037EFD04FF83FD27FF7D%FFFFFFA98CC3FD0BFF527D7D522752F8272752525227277DFD0AFFA8FD27%FFA8FD05FFA8FD25FFA8A8FFFFFFB6B5FD0EFFA852A8527D7D7D52A87D7D%F87DFD0AFFA8FD08FFA87DFFA87DA8A8A87DFFA8FD13FFA8A8FD05FFAE83%FD25FF7DFFFFCA8CA9FD0EFFA8A8FD04FFA8A8FFFFFFA8A8FD0AFFA8FD08%FF7D52A87D7D527D5252FD16FFA8FD06FFAE83FD23FFA8A8FFFFB59BFD26%FFA8FFFFA8A8FD04FFFD047D527D527D52FFA8FD13FFA8A8FD07FFAE83FD%23FFA8FFC38DA9FD26FFA8FF7D7D7DA8FD04FFA8FD08FFA8FD14FFA8FD09%FF83FD22FFA8FFB547FD27FFA8A8A87DA8A8FD0DFFA8FD13FFA8A8FD0AFF%83AEA8FD1FFF84CA8CAFFD27FFA8FFA87D7DA8FD22FFA8FD0CFFAE83FD1E%FFAFB59BFD28FFA8A852527DA8FD0DFFA8FD13FFA8A8FD08FFA8A8A8FFFF%FFA8AE83AEA8FFAEFD17FFA1B02AFD28FFA8FFA8527DA8FD0DFFA8FD14FF%A8FD07FFA852277DFD06FFAEAEA8AEA8AE83AEAEAEA8FFFFFFAEFFAEFD09%FFAE93BCFD29FFA8FFFF7D7D7DFD0DFFA8FD13FFA8A8FD08FF7D7DFFA8FD%0AFFAEFFA8FFA8AEA8AE83AE83AE83AE83AE83AE83AEA8A8684E7FFD28FF%A8FFFF7D52A8FD0AFFA8FFFFA8FD14FFA8FD08FFA852FF52FD20FFA8A9FD%29FFA8A8FF7D7D7DFFFFFF7D52A8A8527D7D7D52FFA8FD13FFA8A8FD08FF%7D7DA87DFD20FF2955FD29FFA8FF7DA87D7DA8FFFF7D52A87D7D527DFFA8%FFA8FD14FFA8FD0BFFA8FD20FFA8A9FD29FFA8FFFF7DA8A8FFFFFFA87D7D%A87DA87DFFA8FFA8FD13FFA8A8FD2CFFA8FD2AFFA8FD27FFA8FD2CFFA8FD%2AFFA8FFFF527D7DFD0DFFA8FD13FFA8A8FD2CFFA8FD2AFFA8FFFF5227FD%0EFFA8FD14FFA8FD2BFFA8A8FD2AFFA8FFFF7D7D7DFD0DFFA8FD13FFA8A8%FD2CFFA7FD2AFFA8FFFF7D52A8FD22FFA8FD2BFFA87EFD2AFFA8FFFF5252%7DFD07FFA8FFFFFFA8FFA8FD13FFA8A8FD2CFF02A9FD29FFA8FFA8527DA8%FFFFFFA852FFA87D7DA87DA8FD16FFA8FD2BFFCFA8FD2AFFA8FFFF527DA8%FFFFFF7D527D7D5252527D52FFA8FD13FFA8A8FD2CFF7DFD29FFA8A8FFA8%7D7DA8FD04FF7DFD07A8FD16FFA8FD2CFFA8FD2AFFA8FFFF5252A8FD0DFF%A8FD13FFA8A8FD2CFFA8FD2CFFA87D7DA8FD0DFFA8FD14FFA8FD2BFFA8A8%FD2AFFA8FFFF7D52A8FD0DFFA8FD13FFA8A8FD2CFF7DFD2AFFA8FFFF7D52%FD0EFFA8FD14FFA8FD2BFFA8A8FD2AFFA8FFFF7D7DA8FD0DFFA8FD13FFA8%A8FD2CFF7DFD2AFFA8FFFFA8A8FD05FFA8FD06FFA8FD16FFA8FD2CFFA8FD%2AFFA8FFFF52527DFFFFFF7D52A8A8527D7D7D52FFA8FD13FFA8A8FD2CFF%A8FD2AFFA8FFA87D7DFD04FF7D52A87D7D527DA852A8FD15FFA8FD2CFFA8%FD2AFFA8FFFF527D7DFFFFFFA87D7DA87DA87DA8A8FFA8FD13FFA8A8FD2C%FFA8FD2AFFA8FFFF7D52FD23FFA8FD2BFFA8A8FD2AFFA8FFFF7D7D7DFD0D%FFA8FD13FFA8A8FD2CFF7DFD2AFFA8FFFF7D27FD23FFA8FD2BFFA8A8FD2A%FFA8FFFF7D527DFD0DFFA8FD13FFA8A8FD2CFFA8FD2AFFA8FFFF7D7DFD23%FFA8FD2BFFA8A8FD2AFFA8A87D527D7DFD07FFA8FFA8FFFFFFA8FD13FFA8%A8FD2CFF7DFD07FFFD1FA8FD04FFA8FF7DFFA8FD04FFA852FFA87D7DA8FF%7DFD16FFA8FD2CFFA8FD07FFA87DFD1CA87DA8FFFFFFA8A8A87DFD05FF7D%527D7D5252527D27FFA8FD13FFA8A8FD10FF527D7D7DFD18FFA8FD07FF7D%FD1DFF7DFFFFFFA8A8A8525252A8FD04FF7DFD07A8FD16FFA8FD0FFFA8A8%7D7D7DFFA8A8FD14FFA8A8FD07FFA8A8FD06FF7D7DFD04A8FD10FFA8A8FF%FFFFFD06A8FD0DFFA8FD13FFA8A8FD0FFF7D5252527DA87D27FD047DFD11%FFA8FD07FF7DFFFFFF257FFFFF527DF8522727A8FD0FFF7DA8FFFFFFA8FD%12FFA8FD14FFA8FD0FFFA8FFA8FFFF7D5252277D527DFD10FFA8A8FD07FF%A8A8FFFF557FFFFFA87D7D52A852FD10FFA8A8FFFFFFA8FD12FFA8FD13FF%A8A8FFFFA8FD11FFA8FFA8FFA87DA8FD11FF7DFD07FF7DFD1DFF7DA8FFFF%FFA8FD12FFA8FD14FFA8FF52FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF7DA8FFA8FD07FFA8A8FD06FFA8%A8FFFFFFA8FD04FFA8A8FD0AFFA8A8FFFFFFA8FD12FFA8FD13FFA8FF5252%FD287D27A8A8FD07FF7DA8FFFFA8AEFFFF5252527D527D527D52A8527D52%FD057DA8FFFFFF7DFD04FFA8FD09FFA8FD05FFA8FD17FFA8FF7DFD27FF7D%A8FFA8FD07FFA8A8FFAE8983FFFF7DFD08527D7D7D525252275252FD04FF%A8A8FFFFFFA8FD08FF7D52A8A8527D7DA852FFA8FD13FFA8A8FFFFA8FD29%FFA8FD07FF7DA8FD06FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FF7DA8FD04%FF7DFD04FFA8FD08FF7D52A87D7D527DA87DFFA8A8FD12FF7F29FD2BFFCF%A8FD07FFA8A8FD06FFA8A8FD0BFFA8FD08FFA8A8FFFFFFA8FD08FFFD04A8%7DA87DA8A8FFA8FD13FF7E7EFD2BFF7F53FD07FF7DFD07FF5252527D52FD%057D52FF5252527DFD06FF7DA8FFFFFFA8FD12FFA8FD14FFA8FD2BFF787E%FD07FFA8A8FFCACAC3FFFF7D7D52F8522752275227F8A87D7D5252FD06FF%A8A8FFFFFFA8FD12FFA8FD13FFA8A8FD2CFFA8FD07FF7DFFFFFFCAFFFFFF%A8FFFD04A852FFA8A852A8A8FFA8FD07FF7DA8FFFFFFA8FD27FFA8FD2BFF%CFA8FD07FFA8A8FD1CFFA8A8FFFFFFA8FD12FFA8FD13FFA8A8FD16FFA9FF%FFFFA9FD11FF7DFD07FFFD1E7D52FD04FFA8FD27FF2A557FCB55A97F7955%4FA9A355A97F792B7F7FFF79A955557F79A97F25A94FA9FF552BA97FA92B%7FA3A97F552BA8FD08FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FD05FFA8FD0CFFA8FFFFFFA8FFA8FD13FFA85425FD%06F925F925F92B25F9F925FD07F925F9F9F92BF925F925F92BF9F9F92BF9%25F9F925557EFD2AFFA8FD08FFA852FFFD067DFD16FFA8FF7F7FA9A3A97F%7FFF25A3792BA9FF7FA37F7FA9CBA9A9A9FF7FA3A9A9FFA97FA9FF7F55A9%FFFFA9FF7FFFCFA8FD2AFFA8FD08FF7D527D7D525252A87DFF7DFD04A8FF%A8FFA8A8A8FFFD07A8FFA87DA8FFCFFFA8CFA8CFA8A87EA9A8FFA8CFA8FF%CFCFA8AEA8CFA8FFA8A8A8FFA8FFA8CFA8CFA8FFA8CFA8FFA8A87DFFFD07%A8FFA8A8A8FFFD07A8FFA8A8A8FFA8A8A8FFFD07A8FFA8A8A8FFA87DFD09%FF7DFD05A87D7DFD97FFA8FD1BFFA8FD19FFA8FFA8FD19FFA8FFA8FD29FF%7D7D7DA8FD18FF7D7D52A8FD17FFA8527D7DA8FD18FF527D52A8FD27FFA8%275252A8FD17FFA8F87D52A8FD18FF5227527DFD18FF527D527DFD28FFA8%7DA8FD19FFA87DA8FD18FFFD04A8FD18FFFD05A8FDFCFFFDFCFFFDCBFFA8%FD7EFF7D27277DA8FFA8FD05FF7D7DA8FFA8FFA8A87DFD6CFF7DA87D7D52%7D527D277DFF7DA852527D527DFF7DA8FD6BFF7D7DA85252527D27277DFF%52A8FD0552A87DA8FD6BFF7DA8FD047D52A87DA8FFFD067DA87D7DFD77FF%A8A8FD05FFA8A8FD2AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-05-12T10:52:14-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-05-12T11:12:48-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-05-12T11:12:48-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>176</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FUr1K1t59V&#xA;sjcRJLFFFcO3qMQF3iFeNCrfTiAryHW/zy0Ce+mi8jeUZfNTWKE3d9DA0cEcZILbCKRiCENCwXfp&#xA;XOx0/skYxEtVljg4uQNWftA+/wCDAz7kn0v89vMeo6bLaWf5dm98xRmSN2ggkFrE6k19RCjSD0wy&#xA;8wXG/cbZm5/ZLS45iUtRGOHbnXEfceW+9bH4o4ygn/ObW/NVvaeXfJ3lo6dr7/VntbhYYpoZRCv+&#xA;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&#xA;jkBsGqMVZNirsVdirsVdirsVdirsVdirsVf/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:B4757E203240DE11AC91D52DFC338480</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:B7757E203240DE11AC91D52DFC338480</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.0d6e5</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPSMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.3x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times New Roman.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -208.846 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 208.846 li
304.108 208.846 li
304.108 0 li
cp
clp
[1 0 0 1 0 0 ]ct
50.3896 8.875 mo
50.3896 8.5 50.2021 8.125 49.9521 7.8125 cv
49.6396 7.5625 49.2646 7.375 48.8896 7.375 cv
48.5146 7.375 48.1396 7.5625 47.8271 7.8125 cv
47.5771 8.125 47.3896 8.5 47.3896 8.875 cv
47.3896 9.25 47.5771 9.625 47.8271 9.9375 cv
48.1396 10.1875 48.5146 10.375 48.8896 10.375 cv
49.2646 10.375 49.6396 10.1875 49.9521 9.9375 cv
50.2021 9.625 50.3896 9.25 50.3896 8.875 cv
50.3896 8.875 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.882353 0.768627 0 0 cmyk
f
51.7646 8.1875 mo
51.7646 7.8125 51.5771 7.4375 51.3271 7.125 cv
51.0146 6.875 50.6396 6.6875 50.2646 6.6875 cv
49.8896 6.6875 49.5146 6.875 49.2021 7.125 cv
48.9521 7.4375 48.7646 7.8125 48.7646 8.1875 cv
48.7646 8.5625 48.9521 8.9375 49.2021 9.25 cv
49.5146 9.5 49.8896 9.6875 50.2646 9.6875 cv
50.6396 9.6875 51.0146 9.5 51.3271 9.25 cv
51.5771 8.9375 51.7646 8.5625 51.7646 8.1875 cv
51.7646 8.1875 li
cp
f
53.0771 7.75 mo
53.0771 7.375 52.8896 7 52.6396 6.6875 cv
52.3271 6.4375 51.9521 6.25 51.5771 6.25 cv
51.2021 6.25 50.8271 6.4375 50.5146 6.6875 cv
50.2646 7 50.0771 7.375 50.0771 7.75 cv
50.0771 8.125 50.2646 8.5 50.5146 8.8125 cv
50.8271 9.0625 51.2021 9.25 51.5771 9.25 cv
51.9521 9.25 52.3271 9.0625 52.6396 8.8125 cv
52.8896 8.5 53.0771 8.125 53.0771 7.75 cv
53.0771 7.75 li
cp
f
54.4521 6.6875 mo
54.4521 6.3125 54.2646 5.9375 54.0146 5.625 cv
53.7021 5.375 53.3271 5.1875 52.9521 5.1875 cv
52.5771 5.1875 52.2021 5.375 51.8896 5.625 cv
51.6396 5.9375 51.4521 6.3125 51.4521 6.6875 cv
51.4521 7.0625 51.6396 7.4375 51.8896 7.75 cv
52.2021 8 52.5771 8.1875 52.9521 8.1875 cv
53.3271 8.1875 53.7021 8 54.0146 7.75 cv
54.2646 7.4375 54.4521 7.0625 54.4521 6.6875 cv
54.4521 6.6875 li
cp
f
55.7646 6.5625 mo
55.7646 6.1875 55.5771 5.8125 55.3271 5.5 cv
55.0146 5.25 54.6396 5.0625 54.2646 5.0625 cv
53.8896 5.0625 53.5146 5.25 53.2021 5.5 cv
52.9521 5.8125 52.7646 6.1875 52.7646 6.5625 cv
52.7646 6.9375 52.9521 7.3125 53.2021 7.625 cv
53.5146 7.875 53.8896 8.0625 54.2646 8.0625 cv
54.6396 8.0625 55.0146 7.875 55.3271 7.625 cv
55.5771 7.3125 55.7646 6.9375 55.7646 6.5625 cv
55.7646 6.5625 li
cp
f
57.0771 5.9375 mo
57.0771 5.5625 56.8896 5.1875 56.6396 4.875 cv
56.3271 4.625 55.9521 4.4375 55.5771 4.4375 cv
55.2021 4.4375 54.8271 4.625 54.5146 4.875 cv
54.2646 5.1875 54.0771 5.5625 54.0771 5.9375 cv
54.0771 6.3125 54.2646 6.6875 54.5146 7 cv
54.8271 7.25 55.2021 7.4375 55.5771 7.4375 cv
55.9521 7.4375 56.3271 7.25 56.6396 7 cv
56.8896 6.6875 57.0771 6.3125 57.0771 5.9375 cv
57.0771 5.9375 li
cp
f
58.4521 7.25 mo
58.4521 6.875 58.2646 6.5 58.0146 6.1875 cv
57.7021 5.9375 57.3271 5.75 56.9521 5.75 cv
56.5771 5.75 56.2021 5.9375 55.8896 6.1875 cv
55.6396 6.5 55.4521 6.875 55.4521 7.25 cv
55.4521 7.625 55.6396 8 55.8896 8.3125 cv
56.2021 8.5625 56.5771 8.75 56.9521 8.75 cv
57.3271 8.75 57.7021 8.5625 58.0146 8.3125 cv
58.2646 8 58.4521 7.625 58.4521 7.25 cv
58.4521 7.25 li
cp
f
59.7646 5.3125 mo
59.7646 4.9375 59.5771 4.5625 59.3271 4.25 cv
59.0146 4 58.6396 3.8125 58.2646 3.8125 cv
57.8896 3.8125 57.5146 4 57.2021 4.25 cv
56.9521 4.5625 56.7646 4.9375 56.7646 5.3125 cv
56.7646 5.6875 56.9521 6.0625 57.2021 6.375 cv
57.5146 6.625 57.8896 6.8125 58.2646 6.8125 cv
58.6396 6.8125 59.0146 6.625 59.3271 6.375 cv
59.5771 6.0625 59.7646 5.6875 59.7646 5.3125 cv
59.7646 5.3125 li
cp
f
61.0771 7.9375 mo
61.0771 7.5625 60.8896 7.1875 60.6396 6.875 cv
60.3271 6.625 59.9521 6.4375 59.5771 6.4375 cv
59.2021 6.4375 58.8271 6.625 58.5146 6.875 cv
58.2646 7.1875 58.0771 7.5625 58.0771 7.9375 cv
58.0771 8.3125 58.2646 8.6875 58.5146 9 cv
58.8271 9.25 59.2021 9.4375 59.5771 9.4375 cv
59.9521 9.4375 60.3271 9.25 60.6396 9 cv
60.8896 8.6875 61.0771 8.3125 61.0771 7.9375 cv
61.0771 7.9375 li
cp
f
62.4521 6.6875 mo
62.4521 6.3125 62.2646 5.9375 62.0146 5.625 cv
61.7021 5.375 61.3271 5.1875 60.9521 5.1875 cv
60.5771 5.1875 60.2021 5.375 59.8896 5.625 cv
59.6396 5.9375 59.4521 6.3125 59.4521 6.6875 cv
59.4521 7.0625 59.6396 7.4375 59.8896 7.75 cv
60.2021 8 60.5771 8.1875 60.9521 8.1875 cv
61.3271 8.1875 61.7021 8 62.0146 7.75 cv
62.2646 7.4375 62.4521 7.0625 62.4521 6.6875 cv
62.4521 6.6875 li
cp
f
63.7646 7.3125 mo
63.7646 6.9375 63.5771 6.5625 63.3271 6.25 cv
63.0146 6 62.6396 5.8125 62.2646 5.8125 cv
61.8896 5.8125 61.5146 6 61.2021 6.25 cv
60.9521 6.5625 60.7646 6.9375 60.7646 7.3125 cv
60.7646 7.6875 60.9521 8.0625 61.2021 8.375 cv
61.5146 8.625 61.8896 8.8125 62.2646 8.8125 cv
62.6396 8.8125 63.0146 8.625 63.3271 8.375 cv
63.5771 8.0625 63.7646 7.6875 63.7646 7.3125 cv
63.7646 7.3125 li
cp
f
65.0771 6.6875 mo
65.0771 6.3125 64.8896 5.9375 64.6396 5.625 cv
64.3271 5.375 63.9521 5.1875 63.5771 5.1875 cv
63.2021 5.1875 62.8271 5.375 62.5146 5.625 cv
62.2646 5.9375 62.0771 6.3125 62.0771 6.6875 cv
62.0771 7.0625 62.2646 7.4375 62.5146 7.75 cv
62.8271 8 63.2021 8.1875 63.5771 8.1875 cv
63.9521 8.1875 64.3271 8 64.6396 7.75 cv
64.8896 7.4375 65.0771 7.0625 65.0771 6.6875 cv
65.0771 6.6875 li
cp
f
66.4521 6.375 mo
66.4521 6 66.2646 5.625 66.0146 5.3125 cv
65.7021 5.0625 65.3271 4.875 64.9521 4.875 cv
64.5771 4.875 64.2021 5.0625 63.8896 5.3125 cv
63.6396 5.625 63.4521 6 63.4521 6.375 cv
63.4521 6.75 63.6396 7.125 63.8896 7.4375 cv
64.2021 7.6875 64.5771 7.875 64.9521 7.875 cv
65.3271 7.875 65.7021 7.6875 66.0146 7.4375 cv
66.2646 7.125 66.4521 6.75 66.4521 6.375 cv
66.4521 6.375 li
cp
f
67.7646 5.3125 mo
67.7646 4.9375 67.5771 4.5625 67.3271 4.25 cv
67.0146 4 66.6396 3.8125 66.2646 3.8125 cv
65.8896 3.8125 65.5146 4 65.2021 4.25 cv
64.9521 4.5625 64.7646 4.9375 64.7646 5.3125 cv
64.7646 5.6875 64.9521 6.0625 65.2021 6.375 cv
65.5146 6.625 65.8896 6.8125 66.2646 6.8125 cv
66.6396 6.8125 67.0146 6.625 67.3271 6.375 cv
67.5771 6.0625 67.7646 5.6875 67.7646 5.3125 cv
67.7646 5.3125 li
cp
f
69.0771 7.8125 mo
69.0771 7.4375 68.8896 7.0625 68.6396 6.75 cv
68.3271 6.5 67.9521 6.3125 67.5771 6.3125 cv
67.2021 6.3125 66.8271 6.5 66.5146 6.75 cv
66.2646 7.0625 66.0771 7.4375 66.0771 7.8125 cv
66.0771 8.1875 66.2646 8.5625 66.5146 8.875 cv
66.8271 9.125 67.2021 9.3125 67.5771 9.3125 cv
67.9521 9.3125 68.3271 9.125 68.6396 8.875 cv
68.8896 8.5625 69.0771 8.1875 69.0771 7.8125 cv
69.0771 7.8125 li
cp
f
70.4521 7.5625 mo
70.4521 7.1875 70.2646 6.8125 70.0146 6.5 cv
69.7021 6.25 69.3271 6.0625 68.9521 6.0625 cv
68.5771 6.0625 68.2021 6.25 67.8896 6.5 cv
67.6396 6.8125 67.4521 7.1875 67.4521 7.5625 cv
67.4521 7.9375 67.6396 8.3125 67.8896 8.625 cv
68.2021 8.875 68.5771 9.0625 68.9521 9.0625 cv
69.3271 9.0625 69.7021 8.875 70.0146 8.625 cv
70.2646 8.3125 70.4521 7.9375 70.4521 7.5625 cv
70.4521 7.5625 li
cp
f
71.7646 6.1875 mo
71.7646 5.8125 71.5771 5.4375 71.3271 5.125 cv
71.0146 4.875 70.6396 4.6875 70.2646 4.6875 cv
69.8896 4.6875 69.5146 4.875 69.2021 5.125 cv
68.9521 5.4375 68.7646 5.8125 68.7646 6.1875 cv
68.7646 6.5625 68.9521 6.9375 69.2021 7.25 cv
69.5146 7.5 69.8896 7.6875 70.2646 7.6875 cv
70.6396 7.6875 71.0146 7.5 71.3271 7.25 cv
71.5771 6.9375 71.7646 6.5625 71.7646 6.1875 cv
71.7646 6.1875 li
cp
f
73.0771 8 mo
73.0771 7.625 72.8896 7.25 72.6396 6.9375 cv
72.3271 6.6875 71.9521 6.5 71.5771 6.5 cv
71.2021 6.5 70.8271 6.6875 70.5146 6.9375 cv
70.2646 7.25 70.0771 7.625 70.0771 8 cv
70.0771 8.375 70.2646 8.75 70.5146 9.0625 cv
70.8271 9.3125 71.2021 9.5 71.5771 9.5 cv
71.9521 9.5 72.3271 9.3125 72.6396 9.0625 cv
72.8896 8.75 73.0771 8.375 73.0771 8 cv
73.0771 8 li
cp
f
74.4521 7.0625 mo
74.4521 6.6875 74.2646 6.3125 74.0146 6 cv
73.7021 5.75 73.3271 5.5625 72.9521 5.5625 cv
72.5771 5.5625 72.2021 5.75 71.8896 6 cv
71.6396 6.3125 71.4521 6.6875 71.4521 7.0625 cv
71.4521 7.4375 71.6396 7.8125 71.8896 8.125 cv
72.2021 8.375 72.5771 8.5625 72.9521 8.5625 cv
73.3271 8.5625 73.7021 8.375 74.0146 8.125 cv
74.2646 7.8125 74.4521 7.4375 74.4521 7.0625 cv
74.4521 7.0625 li
cp
f
75.7646 3.6875 mo
75.7646 3.3125 75.5771 2.9375 75.3271 2.625 cv
75.0146 2.375 74.6396 2.1875 74.2646 2.1875 cv
73.8896 2.1875 73.5146 2.375 73.2021 2.625 cv
72.9521 2.9375 72.7646 3.3125 72.7646 3.6875 cv
72.7646 4.0625 72.9521 4.4375 73.2021 4.75 cv
73.5146 5 73.8896 5.1875 74.2646 5.1875 cv
74.6396 5.1875 75.0146 5 75.3271 4.75 cv
75.5771 4.4375 75.7646 4.0625 75.7646 3.6875 cv
75.7646 3.6875 li
cp
f
77.0771 5.3125 mo
77.0771 4.9375 76.8896 4.5625 76.6396 4.25 cv
76.3271 4 75.9521 3.8125 75.5771 3.8125 cv
75.2021 3.8125 74.8271 4 74.5146 4.25 cv
74.2646 4.5625 74.0771 4.9375 74.0771 5.3125 cv
74.0771 5.6875 74.2646 6.0625 74.5146 6.375 cv
74.8271 6.625 75.2021 6.8125 75.5771 6.8125 cv
75.9521 6.8125 76.3271 6.625 76.6396 6.375 cv
76.8896 6.0625 77.0771 5.6875 77.0771 5.3125 cv
77.0771 5.3125 li
cp
f
78.4521 5.9375 mo
78.4521 5.5625 78.2646 5.1875 78.0146 4.875 cv
77.7021 4.625 77.3271 4.4375 76.9521 4.4375 cv
76.5771 4.4375 76.2021 4.625 75.8896 4.875 cv
75.6396 5.1875 75.4521 5.5625 75.4521 5.9375 cv
75.4521 6.3125 75.6396 6.6875 75.8896 7 cv
76.2021 7.25 76.5771 7.4375 76.9521 7.4375 cv
77.3271 7.4375 77.7021 7.25 78.0146 7 cv
78.2646 6.6875 78.4521 6.3125 78.4521 5.9375 cv
78.4521 5.9375 li
cp
f
79.7646 5.6875 mo
79.7646 5.3125 79.5771 4.9375 79.3271 4.625 cv
79.0146 4.375 78.6396 4.1875 78.2646 4.1875 cv
77.8896 4.1875 77.5146 4.375 77.2021 4.625 cv
76.9521 4.9375 76.7646 5.3125 76.7646 5.6875 cv
76.7646 6.0625 76.9521 6.4375 77.2021 6.75 cv
77.5146 7 77.8896 7.1875 78.2646 7.1875 cv
78.6396 7.1875 79.0146 7 79.3271 6.75 cv
79.5771 6.4375 79.7646 6.0625 79.7646 5.6875 cv
79.7646 5.6875 li
cp
f
81.0771 4.5625 mo
81.0771 4.1875 80.8896 3.8125 80.6396 3.5 cv
80.3271 3.25 79.9521 3.0625 79.5771 3.0625 cv
79.2021 3.0625 78.8271 3.25 78.5146 3.5 cv
78.2646 3.8125 78.0771 4.1875 78.0771 4.5625 cv
78.0771 4.9375 78.2646 5.3125 78.5146 5.625 cv
78.8271 5.875 79.2021 6.0625 79.5771 6.0625 cv
79.9521 6.0625 80.3271 5.875 80.6396 5.625 cv
80.8896 5.3125 81.0771 4.9375 81.0771 4.5625 cv
81.0771 4.5625 li
cp
f
82.4521 6.625 mo
82.4521 6.25 82.2646 5.875 82.0146 5.5625 cv
81.7021 5.3125 81.3271 5.125 80.9521 5.125 cv
80.5771 5.125 80.2021 5.3125 79.8896 5.5625 cv
79.6396 5.875 79.4521 6.25 79.4521 6.625 cv
79.4521 7 79.6396 7.375 79.8896 7.6875 cv
80.2021 7.9375 80.5771 8.125 80.9521 8.125 cv
81.3271 8.125 81.7021 7.9375 82.0146 7.6875 cv
82.2646 7.375 82.4521 7 82.4521 6.625 cv
82.4521 6.625 li
cp
f
83.7646 6.625 mo
83.7646 6.25 83.5771 5.875 83.3271 5.5625 cv
83.0146 5.3125 82.6396 5.125 82.2646 5.125 cv
81.8896 5.125 81.5146 5.3125 81.2021 5.5625 cv
80.9521 5.875 80.7646 6.25 80.7646 6.625 cv
80.7646 7 80.9521 7.375 81.2021 7.6875 cv
81.5146 7.9375 81.8896 8.125 82.2646 8.125 cv
82.6396 8.125 83.0146 7.9375 83.3271 7.6875 cv
83.5771 7.375 83.7646 7 83.7646 6.625 cv
83.7646 6.625 li
cp
f
85.0771 7.5 mo
85.0771 7.125 84.8896 6.75 84.6396 6.4375 cv
84.3271 6.1875 83.9521 6 83.5771 6 cv
83.2021 6 82.8271 6.1875 82.5146 6.4375 cv
82.2646 6.75 82.0771 7.125 82.0771 7.5 cv
82.0771 7.875 82.2646 8.25 82.5146 8.5625 cv
82.8271 8.8125 83.2021 9 83.5771 9 cv
83.9521 9 84.3271 8.8125 84.6396 8.5625 cv
84.8896 8.25 85.0771 7.875 85.0771 7.5 cv
85.0771 7.5 li
cp
f
86.4521 5.5 mo
86.4521 5.125 86.2646 4.75 86.0146 4.4375 cv
85.7021 4.1875 85.3271 4 84.9521 4 cv
84.5771 4 84.2021 4.1875 83.8896 4.4375 cv
83.6396 4.75 83.4521 5.125 83.4521 5.5 cv
83.4521 5.875 83.6396 6.25 83.8896 6.5625 cv
84.2021 6.8125 84.5771 7 84.9521 7 cv
85.3271 7 85.7021 6.8125 86.0146 6.5625 cv
86.2646 6.25 86.4521 5.875 86.4521 5.5 cv
86.4521 5.5 li
cp
f
87.7646 5.75 mo
87.7646 5.375 87.5771 5 87.3271 4.6875 cv
87.0146 4.4375 86.6396 4.25 86.2646 4.25 cv
85.8896 4.25 85.5146 4.4375 85.2021 4.6875 cv
84.9521 5 84.7646 5.375 84.7646 5.75 cv
84.7646 6.125 84.9521 6.5 85.2021 6.8125 cv
85.5146 7.0625 85.8896 7.25 86.2646 7.25 cv
86.6396 7.25 87.0146 7.0625 87.3271 6.8125 cv
87.5771 6.5 87.7646 6.125 87.7646 5.75 cv
87.7646 5.75 li
cp
f
89.0771 5 mo
89.0771 4.625 88.8896 4.25 88.6396 3.9375 cv
88.3271 3.6875 87.9521 3.5 87.5771 3.5 cv
87.2021 3.5 86.8271 3.6875 86.5146 3.9375 cv
86.2646 4.25 86.0771 4.625 86.0771 5 cv
86.0771 5.375 86.2646 5.75 86.5146 6.0625 cv
86.8271 6.3125 87.2021 6.5 87.5771 6.5 cv
87.9521 6.5 88.3271 6.3125 88.6396 6.0625 cv
88.8896 5.75 89.0771 5.375 89.0771 5 cv
89.0771 5 li
cp
f
90.4521 6.8125 mo
90.4521 6.4375 90.2646 6.0625 90.0146 5.75 cv
89.7021 5.5 89.3271 5.3125 88.9521 5.3125 cv
88.5771 5.3125 88.2021 5.5 87.8896 5.75 cv
87.6396 6.0625 87.4521 6.4375 87.4521 6.8125 cv
87.4521 7.1875 87.6396 7.5625 87.8896 7.875 cv
88.2021 8.125 88.5771 8.3125 88.9521 8.3125 cv
89.3271 8.3125 89.7021 8.125 90.0146 7.875 cv
90.2646 7.5625 90.4521 7.1875 90.4521 6.8125 cv
90.4521 6.8125 li
cp
f
91.7646 6.9375 mo
91.7646 6.5625 91.5771 6.1875 91.3271 5.875 cv
91.0146 5.625 90.6396 5.4375 90.2646 5.4375 cv
89.8896 5.4375 89.5146 5.625 89.2021 5.875 cv
88.9521 6.1875 88.7646 6.5625 88.7646 6.9375 cv
88.7646 7.3125 88.9521 7.6875 89.2021 8 cv
89.5146 8.25 89.8896 8.4375 90.2646 8.4375 cv
90.6396 8.4375 91.0146 8.25 91.3271 8 cv
91.5771 7.6875 91.7646 7.3125 91.7646 6.9375 cv
91.7646 6.9375 li
cp
f
93.0771 31.375 mo
93.0771 31 92.8896 30.625 92.6396 30.3125 cv
92.3271 30.0625 91.9521 29.875 91.5771 29.875 cv
91.2021 29.875 90.8271 30.0625 90.5146 30.3125 cv
90.2646 30.625 90.0771 31 90.0771 31.375 cv
90.0771 31.75 90.2646 32.125 90.5146 32.4375 cv
90.8271 32.6875 91.2021 32.875 91.5771 32.875 cv
91.9521 32.875 92.3271 32.6875 92.6396 32.4375 cv
92.8896 32.125 93.0771 31.75 93.0771 31.375 cv
93.0771 31.375 li
cp
f
94.4521 149.188 mo
94.4521 148.813 94.2646 148.438 94.0146 148.125 cv
93.7021 147.875 93.3271 147.688 92.9521 147.688 cv
92.5771 147.688 92.2021 147.875 91.8896 148.125 cv
91.6396 148.438 91.4521 148.813 91.4521 149.188 cv
91.4521 149.563 91.6396 149.938 91.8896 150.25 cv
92.2021 150.5 92.5771 150.688 92.9521 150.688 cv
93.3271 150.688 93.7021 150.5 94.0146 150.25 cv
94.2646 149.938 94.4521 149.563 94.4521 149.188 cv
94.4521 149.188 li
cp
f
95.7646 163.813 mo
95.7646 163.438 95.5771 163.063 95.3271 162.75 cv
95.0146 162.5 94.6396 162.313 94.2646 162.313 cv
93.8896 162.313 93.5146 162.5 93.2021 162.75 cv
92.9521 163.063 92.7646 163.438 92.7646 163.813 cv
92.7646 164.188 92.9521 164.563 93.2021 164.875 cv
93.5146 165.125 93.8896 165.313 94.2646 165.313 cv
94.6396 165.313 95.0146 165.125 95.3271 164.875 cv
95.5771 164.563 95.7646 164.188 95.7646 163.813 cv
95.7646 163.813 li
cp
f
97.1396 163.813 mo
97.1396 163.438 96.9521 163.063 96.7021 162.75 cv
96.3896 162.5 96.0146 162.313 95.6396 162.313 cv
95.2646 162.313 94.8896 162.5 94.5771 162.75 cv
94.3271 163.063 94.1396 163.438 94.1396 163.813 cv
94.1396 164.188 94.3271 164.563 94.5771 164.875 cv
94.8896 165.125 95.2646 165.313 95.6396 165.313 cv
96.0146 165.313 96.3896 165.125 96.7021 164.875 cv
96.9521 164.563 97.1396 164.188 97.1396 163.813 cv
97.1396 163.813 li
cp
f
98.4521 164.625 mo
98.4521 164.25 98.2646 163.875 98.0146 163.563 cv
97.7021 163.313 97.3271 163.125 96.9521 163.125 cv
96.5771 163.125 96.2021 163.313 95.8896 163.563 cv
95.6396 163.875 95.4521 164.25 95.4521 164.625 cv
95.4521 165 95.6396 165.375 95.8896 165.688 cv
96.2021 165.938 96.5771 166.125 96.9521 166.125 cv
97.3271 166.125 97.7021 165.938 98.0146 165.688 cv
98.2646 165.375 98.4521 165 98.4521 164.625 cv
98.4521 164.625 li
cp
f
99.7646 164.5 mo
99.7646 164.125 99.5771 163.75 99.3271 163.438 cv
99.0146 163.188 98.6396 163 98.2646 163 cv
97.8896 163 97.5146 163.188 97.2021 163.438 cv
96.9521 163.75 96.7646 164.125 96.7646 164.5 cv
96.7646 164.875 96.9521 165.25 97.2021 165.563 cv
97.5146 165.813 97.8896 166 98.2646 166 cv
98.6396 166 99.0146 165.813 99.3271 165.563 cv
99.5771 165.25 99.7646 164.875 99.7646 164.5 cv
99.7646 164.5 li
cp
f
101.14 165.938 mo
101.14 165.563 100.952 165.188 100.702 164.875 cv
100.39 164.625 100.015 164.438 99.6396 164.438 cv
99.2646 164.438 98.8896 164.625 98.5771 164.875 cv
98.3271 165.188 98.1396 165.563 98.1396 165.938 cv
98.1396 166.313 98.3271 166.688 98.5771 167 cv
98.8896 167.25 99.2646 167.438 99.6396 167.438 cv
100.015 167.438 100.39 167.25 100.702 167 cv
100.952 166.688 101.14 166.313 101.14 165.938 cv
101.14 165.938 li
cp
f
102.452 165.938 mo
102.452 165.563 102.265 165.188 102.015 164.875 cv
101.702 164.625 101.327 164.438 100.952 164.438 cv
100.577 164.438 100.202 164.625 99.8896 164.875 cv
99.6396 165.188 99.4521 165.563 99.4521 165.938 cv
99.4521 166.313 99.6396 166.688 99.8896 167 cv
100.202 167.25 100.577 167.438 100.952 167.438 cv
101.327 167.438 101.702 167.25 102.015 167 cv
102.265 166.688 102.452 166.313 102.452 165.938 cv
102.452 165.938 li
cp
f
103.765 164.5 mo
103.765 164.125 103.577 163.75 103.327 163.438 cv
103.015 163.188 102.64 163 102.265 163 cv
101.89 163 101.515 163.188 101.202 163.438 cv
100.952 163.75 100.765 164.125 100.765 164.5 cv
100.765 164.875 100.952 165.25 101.202 165.563 cv
101.515 165.813 101.89 166 102.265 166 cv
102.64 166 103.015 165.813 103.327 165.563 cv
103.577 165.25 103.765 164.875 103.765 164.5 cv
103.765 164.5 li
cp
f
105.14 164.063 mo
105.14 163.688 104.952 163.313 104.702 163 cv
104.39 162.75 104.015 162.563 103.64 162.563 cv
103.265 162.563 102.89 162.75 102.577 163 cv
102.327 163.313 102.14 163.688 102.14 164.063 cv
102.14 164.438 102.327 164.813 102.577 165.125 cv
102.89 165.375 103.265 165.563 103.64 165.563 cv
104.015 165.563 104.39 165.375 104.702 165.125 cv
104.952 164.813 105.14 164.438 105.14 164.063 cv
105.14 164.063 li
cp
f
106.452 165.75 mo
106.452 165.375 106.265 165 106.015 164.688 cv
105.702 164.438 105.327 164.25 104.952 164.25 cv
104.577 164.25 104.202 164.438 103.89 164.688 cv
103.64 165 103.452 165.375 103.452 165.75 cv
103.452 166.125 103.64 166.5 103.89 166.813 cv
104.202 167.063 104.577 167.25 104.952 167.25 cv
105.327 167.25 105.702 167.063 106.015 166.813 cv
106.265 166.5 106.452 166.125 106.452 165.75 cv
106.452 165.75 li
cp
f
107.765 165.313 mo
107.765 164.938 107.577 164.563 107.327 164.25 cv
107.015 164 106.64 163.813 106.265 163.813 cv
105.89 163.813 105.515 164 105.202 164.25 cv
104.952 164.563 104.765 164.938 104.765 165.313 cv
104.765 165.688 104.952 166.063 105.202 166.375 cv
105.515 166.625 105.89 166.813 106.265 166.813 cv
106.64 166.813 107.015 166.625 107.327 166.375 cv
107.577 166.063 107.765 165.688 107.765 165.313 cv
107.765 165.313 li
cp
f
109.14 165 mo
109.14 164.625 108.952 164.25 108.702 163.938 cv
108.39 163.688 108.015 163.5 107.64 163.5 cv
107.265 163.5 106.89 163.688 106.577 163.938 cv
106.327 164.25 106.14 164.625 106.14 165 cv
106.14 165.375 106.327 165.75 106.577 166.063 cv
106.89 166.313 107.265 166.5 107.64 166.5 cv
108.015 166.5 108.39 166.313 108.702 166.063 cv
108.952 165.75 109.14 165.375 109.14 165 cv
109.14 165 li
cp
f
110.452 165.313 mo
110.452 164.938 110.265 164.563 110.015 164.25 cv
109.702 164 109.327 163.813 108.952 163.813 cv
108.577 163.813 108.202 164 107.89 164.25 cv
107.64 164.563 107.452 164.938 107.452 165.313 cv
107.452 165.688 107.64 166.063 107.89 166.375 cv
108.202 166.625 108.577 166.813 108.952 166.813 cv
109.327 166.813 109.702 166.625 110.015 166.375 cv
110.265 166.063 110.452 165.688 110.452 165.313 cv
110.452 165.313 li
cp
f
111.765 163.625 mo
111.765 163.25 111.577 162.875 111.327 162.563 cv
111.015 162.313 110.64 162.125 110.265 162.125 cv
109.89 162.125 109.515 162.313 109.202 162.563 cv
108.952 162.875 108.765 163.25 108.765 163.625 cv
108.765 164 108.952 164.375 109.202 164.688 cv
109.515 164.938 109.89 165.125 110.265 165.125 cv
110.64 165.125 111.015 164.938 111.327 164.688 cv
111.577 164.375 111.765 164 111.765 163.625 cv
111.765 163.625 li
cp
f
113.14 166.438 mo
113.14 166.063 112.952 165.688 112.702 165.375 cv
112.39 165.125 112.015 164.938 111.64 164.938 cv
111.265 164.938 110.89 165.125 110.577 165.375 cv
110.327 165.688 110.14 166.063 110.14 166.438 cv
110.14 166.813 110.327 167.188 110.577 167.5 cv
110.89 167.75 111.265 167.938 111.64 167.938 cv
112.015 167.938 112.39 167.75 112.702 167.5 cv
112.952 167.188 113.14 166.813 113.14 166.438 cv
113.14 166.438 li
cp
f
114.452 165.063 mo
114.452 164.688 114.265 164.313 114.015 164 cv
113.702 163.75 113.327 163.563 112.952 163.563 cv
112.577 163.563 112.202 163.75 111.89 164 cv
111.64 164.313 111.452 164.688 111.452 165.063 cv
111.452 165.438 111.64 165.813 111.89 166.125 cv
112.202 166.375 112.577 166.563 112.952 166.563 cv
113.327 166.563 113.702 166.375 114.015 166.125 cv
114.265 165.813 114.452 165.438 114.452 165.063 cv
114.452 165.063 li
cp
f
115.765 163.5 mo
115.765 163.125 115.577 162.75 115.327 162.438 cv
115.015 162.188 114.64 162 114.265 162 cv
113.89 162 113.515 162.188 113.202 162.438 cv
112.952 162.75 112.765 163.125 112.765 163.5 cv
112.765 163.875 112.952 164.25 113.202 164.563 cv
113.515 164.813 113.89 165 114.265 165 cv
114.64 165 115.015 164.813 115.327 164.563 cv
115.577 164.25 115.765 163.875 115.765 163.5 cv
115.765 163.5 li
cp
f
117.14 164.125 mo
117.14 163.75 116.952 163.375 116.702 163.063 cv
116.39 162.813 116.015 162.625 115.64 162.625 cv
115.265 162.625 114.89 162.813 114.577 163.063 cv
114.327 163.375 114.14 163.75 114.14 164.125 cv
114.14 164.5 114.327 164.875 114.577 165.188 cv
114.89 165.438 115.265 165.625 115.64 165.625 cv
116.015 165.625 116.39 165.438 116.702 165.188 cv
116.952 164.875 117.14 164.5 117.14 164.125 cv
117.14 164.125 li
cp
f
118.452 166 mo
118.452 165.625 118.265 165.25 118.015 164.938 cv
117.702 164.688 117.327 164.5 116.952 164.5 cv
116.577 164.5 116.202 164.688 115.89 164.938 cv
115.64 165.25 115.452 165.625 115.452 166 cv
115.452 166.375 115.64 166.75 115.89 167.063 cv
116.202 167.313 116.577 167.5 116.952 167.5 cv
117.327 167.5 117.702 167.313 118.015 167.063 cv
118.265 166.75 118.452 166.375 118.452 166 cv
118.452 166 li
cp
f
119.765 167.563 mo
119.765 167.188 119.577 166.813 119.327 166.5 cv
119.015 166.25 118.64 166.063 118.265 166.063 cv
117.89 166.063 117.515 166.25 117.202 166.5 cv
116.952 166.813 116.765 167.188 116.765 167.563 cv
116.765 167.938 116.952 168.313 117.202 168.625 cv
117.515 168.875 117.89 169.063 118.265 169.063 cv
118.64 169.063 119.015 168.875 119.327 168.625 cv
119.577 168.313 119.765 167.938 119.765 167.563 cv
119.765 167.563 li
cp
f
121.14 164.625 mo
121.14 164.25 120.952 163.875 120.702 163.563 cv
120.39 163.313 120.015 163.125 119.64 163.125 cv
119.265 163.125 118.89 163.313 118.577 163.563 cv
118.327 163.875 118.14 164.25 118.14 164.625 cv
118.14 165 118.327 165.375 118.577 165.688 cv
118.89 165.938 119.265 166.125 119.64 166.125 cv
120.015 166.125 120.39 165.938 120.702 165.688 cv
120.952 165.375 121.14 165 121.14 164.625 cv
121.14 164.625 li
cp
f
122.452 164.813 mo
122.452 164.438 122.265 164.063 122.015 163.75 cv
121.702 163.5 121.327 163.313 120.952 163.313 cv
120.577 163.313 120.202 163.5 119.89 163.75 cv
119.64 164.063 119.452 164.438 119.452 164.813 cv
119.452 165.188 119.64 165.563 119.89 165.875 cv
120.202 166.125 120.577 166.313 120.952 166.313 cv
121.327 166.313 121.702 166.125 122.015 165.875 cv
122.265 165.563 122.452 165.188 122.452 164.813 cv
122.452 164.813 li
cp
f
123.765 163.813 mo
123.765 163.438 123.577 163.063 123.327 162.75 cv
123.015 162.5 122.64 162.313 122.265 162.313 cv
121.89 162.313 121.515 162.5 121.202 162.75 cv
120.952 163.063 120.765 163.438 120.765 163.813 cv
120.765 164.188 120.952 164.563 121.202 164.875 cv
121.515 165.125 121.89 165.313 122.265 165.313 cv
122.64 165.313 123.015 165.125 123.327 164.875 cv
123.577 164.563 123.765 164.188 123.765 163.813 cv
123.765 163.813 li
cp
f
125.14 167.438 mo
125.14 167.063 124.952 166.688 124.702 166.375 cv
124.39 166.125 124.015 165.938 123.64 165.938 cv
123.265 165.938 122.89 166.125 122.577 166.375 cv
122.327 166.688 122.14 167.063 122.14 167.438 cv
122.14 167.813 122.327 168.188 122.577 168.5 cv
122.89 168.75 123.265 168.938 123.64 168.938 cv
124.015 168.938 124.39 168.75 124.702 168.5 cv
124.952 168.188 125.14 167.813 125.14 167.438 cv
125.14 167.438 li
cp
f
126.452 166.375 mo
126.452 166 126.265 165.625 126.015 165.313 cv
125.702 165.063 125.327 164.875 124.952 164.875 cv
124.577 164.875 124.202 165.063 123.89 165.313 cv
123.64 165.625 123.452 166 123.452 166.375 cv
123.452 166.75 123.64 167.125 123.89 167.438 cv
124.202 167.688 124.577 167.875 124.952 167.875 cv
125.327 167.875 125.702 167.688 126.015 167.438 cv
126.265 167.125 126.452 166.75 126.452 166.375 cv
126.452 166.375 li
cp
f
127.765 164.563 mo
127.765 164.188 127.577 163.813 127.327 163.5 cv
127.015 163.25 126.64 163.063 126.265 163.063 cv
125.89 163.063 125.515 163.25 125.202 163.5 cv
124.952 163.813 124.765 164.188 124.765 164.563 cv
124.765 164.938 124.952 165.313 125.202 165.625 cv
125.515 165.875 125.89 166.063 126.265 166.063 cv
126.64 166.063 127.015 165.875 127.327 165.625 cv
127.577 165.313 127.765 164.938 127.765 164.563 cv
127.765 164.563 li
cp
f
129.14 165.063 mo
129.14 164.688 128.952 164.313 128.702 164 cv
128.39 163.75 128.015 163.563 127.64 163.563 cv
127.265 163.563 126.89 163.75 126.577 164 cv
126.327 164.313 126.14 164.688 126.14 165.063 cv
126.14 165.438 126.327 165.813 126.577 166.125 cv
126.89 166.375 127.265 166.563 127.64 166.563 cv
128.015 166.563 128.39 166.375 128.702 166.125 cv
128.952 165.813 129.14 165.438 129.14 165.063 cv
129.14 165.063 li
cp
f
130.452 164.25 mo
130.452 163.875 130.265 163.5 130.015 163.188 cv
129.702 162.938 129.327 162.75 128.952 162.75 cv
128.577 162.75 128.202 162.938 127.89 163.188 cv
127.64 163.5 127.452 163.875 127.452 164.25 cv
127.452 164.625 127.64 165 127.89 165.313 cv
128.202 165.563 128.577 165.75 128.952 165.75 cv
129.327 165.75 129.702 165.563 130.015 165.313 cv
130.265 165 130.452 164.625 130.452 164.25 cv
130.452 164.25 li
cp
f
131.765 164.813 mo
131.765 164.438 131.577 164.063 131.327 163.75 cv
131.015 163.5 130.64 163.313 130.265 163.313 cv
129.89 163.313 129.515 163.5 129.202 163.75 cv
128.952 164.063 128.765 164.438 128.765 164.813 cv
128.765 165.188 128.952 165.563 129.202 165.875 cv
129.515 166.125 129.89 166.313 130.265 166.313 cv
130.64 166.313 131.015 166.125 131.327 165.875 cv
131.577 165.563 131.765 165.188 131.765 164.813 cv
131.765 164.813 li
cp
f
133.14 163 mo
133.14 162.625 132.952 162.25 132.702 161.938 cv
132.39 161.688 132.015 161.5 131.64 161.5 cv
131.265 161.5 130.89 161.688 130.577 161.938 cv
130.327 162.25 130.14 162.625 130.14 163 cv
130.14 163.375 130.327 163.75 130.577 164.063 cv
130.89 164.313 131.265 164.5 131.64 164.5 cv
132.015 164.5 132.39 164.313 132.702 164.063 cv
132.952 163.75 133.14 163.375 133.14 163 cv
133.14 163 li
cp
f
134.452 166.313 mo
134.452 165.938 134.265 165.563 134.015 165.25 cv
133.702 165 133.327 164.813 132.952 164.813 cv
132.577 164.813 132.202 165 131.89 165.25 cv
131.64 165.563 131.452 165.938 131.452 166.313 cv
131.452 166.688 131.64 167.063 131.89 167.375 cv
132.202 167.625 132.577 167.813 132.952 167.813 cv
133.327 167.813 133.702 167.625 134.015 167.375 cv
134.265 167.063 134.452 166.688 134.452 166.313 cv
134.452 166.313 li
cp
f
135.765 164.75 mo
135.765 164.375 135.577 164 135.327 163.688 cv
135.015 163.438 134.64 163.25 134.265 163.25 cv
133.89 163.25 133.515 163.438 133.202 163.688 cv
132.952 164 132.765 164.375 132.765 164.75 cv
132.765 165.125 132.952 165.5 133.202 165.813 cv
133.515 166.063 133.89 166.25 134.265 166.25 cv
134.64 166.25 135.015 166.063 135.327 165.813 cv
135.577 165.5 135.765 165.125 135.765 164.75 cv
135.765 164.75 li
cp
f
137.14 164.25 mo
137.14 163.875 136.952 163.5 136.702 163.188 cv
136.39 162.938 136.015 162.75 135.64 162.75 cv
135.265 162.75 134.89 162.938 134.577 163.188 cv
134.327 163.5 134.14 163.875 134.14 164.25 cv
134.14 164.625 134.327 165 134.577 165.313 cv
134.89 165.563 135.265 165.75 135.64 165.75 cv
136.015 165.75 136.39 165.563 136.702 165.313 cv
136.952 165 137.14 164.625 137.14 164.25 cv
137.14 164.25 li
cp
f
138.452 165.875 mo
138.452 165.5 138.265 165.125 138.015 164.813 cv
137.702 164.563 137.327 164.375 136.952 164.375 cv
136.577 164.375 136.202 164.563 135.89 164.813 cv
135.64 165.125 135.452 165.5 135.452 165.875 cv
135.452 166.25 135.64 166.625 135.89 166.938 cv
136.202 167.188 136.577 167.375 136.952 167.375 cv
137.327 167.375 137.702 167.188 138.015 166.938 cv
138.265 166.625 138.452 166.25 138.452 165.875 cv
138.452 165.875 li
cp
f
139.827 165.875 mo
139.827 165.5 139.64 165.125 139.39 164.813 cv
139.077 164.563 138.702 164.375 138.327 164.375 cv
137.952 164.375 137.577 164.563 137.265 164.813 cv
137.015 165.125 136.827 165.5 136.827 165.875 cv
136.827 166.25 137.015 166.625 137.265 166.938 cv
137.577 167.188 137.952 167.375 138.327 167.375 cv
138.702 167.375 139.077 167.188 139.39 166.938 cv
139.64 166.625 139.827 166.25 139.827 165.875 cv
139.827 165.875 li
cp
f
141.14 165.438 mo
141.14 165.063 140.952 164.688 140.702 164.375 cv
140.39 164.125 140.015 163.938 139.64 163.938 cv
139.265 163.938 138.89 164.125 138.577 164.375 cv
138.327 164.688 138.14 165.063 138.14 165.438 cv
138.14 165.813 138.327 166.188 138.577 166.5 cv
138.89 166.75 139.265 166.938 139.64 166.938 cv
140.015 166.938 140.39 166.75 140.702 166.5 cv
140.952 166.188 141.14 165.813 141.14 165.438 cv
141.14 165.438 li
cp
f
142.452 164.313 mo
142.452 163.938 142.265 163.563 142.015 163.25 cv
141.702 163 141.327 162.813 140.952 162.813 cv
140.577 162.813 140.202 163 139.89 163.25 cv
139.64 163.563 139.452 163.938 139.452 164.313 cv
139.452 164.688 139.64 165.063 139.89 165.375 cv
140.202 165.625 140.577 165.813 140.952 165.813 cv
141.327 165.813 141.702 165.625 142.015 165.375 cv
142.265 165.063 142.452 164.688 142.452 164.313 cv
142.452 164.313 li
cp
f
143.827 164.938 mo
143.827 164.563 143.64 164.188 143.39 163.875 cv
143.077 163.625 142.702 163.438 142.327 163.438 cv
141.952 163.438 141.577 163.625 141.265 163.875 cv
141.015 164.188 140.827 164.563 140.827 164.938 cv
140.827 165.313 141.015 165.688 141.265 166 cv
141.577 166.25 141.952 166.438 142.327 166.438 cv
142.702 166.438 143.077 166.25 143.39 166 cv
143.64 165.688 143.827 165.313 143.827 164.938 cv
143.827 164.938 li
cp
f
145.14 164.625 mo
145.14 164.25 144.952 163.875 144.702 163.563 cv
144.39 163.313 144.015 163.125 143.64 163.125 cv
143.265 163.125 142.89 163.313 142.577 163.563 cv
142.327 163.875 142.14 164.25 142.14 164.625 cv
142.14 165 142.327 165.375 142.577 165.688 cv
142.89 165.938 143.265 166.125 143.64 166.125 cv
144.015 166.125 144.39 165.938 144.702 165.688 cv
144.952 165.375 145.14 165 145.14 164.625 cv
145.14 164.625 li
cp
f
146.452 165.5 mo
146.452 165.125 146.265 164.75 146.015 164.438 cv
145.702 164.188 145.327 164 144.952 164 cv
144.577 164 144.202 164.188 143.89 164.438 cv
143.64 164.75 143.452 165.125 143.452 165.5 cv
143.452 165.875 143.64 166.25 143.89 166.563 cv
144.202 166.813 144.577 167 144.952 167 cv
145.327 167 145.702 166.813 146.015 166.563 cv
146.265 166.25 146.452 165.875 146.452 165.5 cv
146.452 165.5 li
cp
f
147.827 165.063 mo
147.827 164.688 147.64 164.313 147.39 164 cv
147.077 163.75 146.702 163.563 146.327 163.563 cv
145.952 163.563 145.577 163.75 145.265 164 cv
145.015 164.313 144.827 164.688 144.827 165.063 cv
144.827 165.438 145.015 165.813 145.265 166.125 cv
145.577 166.375 145.952 166.563 146.327 166.563 cv
146.702 166.563 147.077 166.375 147.39 166.125 cv
147.64 165.813 147.827 165.438 147.827 165.063 cv
147.827 165.063 li
cp
f
149.14 163.188 mo
149.14 162.813 148.952 162.438 148.702 162.125 cv
148.39 161.875 148.015 161.688 147.64 161.688 cv
147.265 161.688 146.89 161.875 146.577 162.125 cv
146.327 162.438 146.14 162.813 146.14 163.188 cv
146.14 163.563 146.327 163.938 146.577 164.25 cv
146.89 164.5 147.265 164.688 147.64 164.688 cv
148.015 164.688 148.39 164.5 148.702 164.25 cv
148.952 163.938 149.14 163.563 149.14 163.188 cv
149.14 163.188 li
cp
f
150.452 165.688 mo
150.452 165.313 150.265 164.938 150.015 164.625 cv
149.702 164.375 149.327 164.188 148.952 164.188 cv
148.577 164.188 148.202 164.375 147.89 164.625 cv
147.64 164.938 147.452 165.313 147.452 165.688 cv
147.452 166.063 147.64 166.438 147.89 166.75 cv
148.202 167 148.577 167.188 148.952 167.188 cv
149.327 167.188 149.702 167 150.015 166.75 cv
150.265 166.438 150.452 166.063 150.452 165.688 cv
150.452 165.688 li
cp
f
151.827 165.313 mo
151.827 164.938 151.64 164.563 151.39 164.25 cv
151.077 164 150.702 163.813 150.327 163.813 cv
149.952 163.813 149.577 164 149.265 164.25 cv
149.015 164.563 148.827 164.938 148.827 165.313 cv
148.827 165.688 149.015 166.063 149.265 166.375 cv
149.577 166.625 149.952 166.813 150.327 166.813 cv
150.702 166.813 151.077 166.625 151.39 166.375 cv
151.64 166.063 151.827 165.688 151.827 165.313 cv
151.827 165.313 li
cp
f
153.14 164.063 mo
153.14 163.688 152.952 163.313 152.702 163 cv
152.39 162.75 152.015 162.563 151.64 162.563 cv
151.265 162.563 150.89 162.75 150.577 163 cv
150.327 163.313 150.14 163.688 150.14 164.063 cv
150.14 164.438 150.327 164.813 150.577 165.125 cv
150.89 165.375 151.265 165.563 151.64 165.563 cv
152.015 165.563 152.39 165.375 152.702 165.125 cv
152.952 164.813 153.14 164.438 153.14 164.063 cv
153.14 164.063 li
cp
f
154.452 164.125 mo
154.452 163.75 154.265 163.375 154.015 163.063 cv
153.702 162.813 153.327 162.625 152.952 162.625 cv
152.577 162.625 152.202 162.813 151.89 163.063 cv
151.64 163.375 151.452 163.75 151.452 164.125 cv
151.452 164.5 151.64 164.875 151.89 165.188 cv
152.202 165.438 152.577 165.625 152.952 165.625 cv
153.327 165.625 153.702 165.438 154.015 165.188 cv
154.265 164.875 154.452 164.5 154.452 164.125 cv
154.452 164.125 li
cp
f
155.827 164.75 mo
155.827 164.375 155.64 164 155.39 163.688 cv
155.077 163.438 154.702 163.25 154.327 163.25 cv
153.952 163.25 153.577 163.438 153.265 163.688 cv
153.015 164 152.827 164.375 152.827 164.75 cv
152.827 165.125 153.015 165.5 153.265 165.813 cv
153.577 166.063 153.952 166.25 154.327 166.25 cv
154.702 166.25 155.077 166.063 155.39 165.813 cv
155.64 165.5 155.827 165.125 155.827 164.75 cv
155.827 164.75 li
cp
f
157.14 165.5 mo
157.14 165.125 156.952 164.75 156.702 164.438 cv
156.39 164.188 156.015 164 155.64 164 cv
155.265 164 154.89 164.188 154.577 164.438 cv
154.327 164.75 154.14 165.125 154.14 165.5 cv
154.14 165.875 154.327 166.25 154.577 166.563 cv
154.89 166.813 155.265 167 155.64 167 cv
156.015 167 156.39 166.813 156.702 166.563 cv
156.952 166.25 157.14 165.875 157.14 165.5 cv
157.14 165.5 li
cp
f
158.452 165.875 mo
158.452 165.5 158.265 165.125 158.015 164.813 cv
157.702 164.563 157.327 164.375 156.952 164.375 cv
156.577 164.375 156.202 164.563 155.89 164.813 cv
155.64 165.125 155.452 165.5 155.452 165.875 cv
155.452 166.25 155.64 166.625 155.89 166.938 cv
156.202 167.188 156.577 167.375 156.952 167.375 cv
157.327 167.375 157.702 167.188 158.015 166.938 cv
158.265 166.625 158.452 166.25 158.452 165.875 cv
158.452 165.875 li
cp
f
159.827 165.25 mo
159.827 164.875 159.64 164.5 159.39 164.188 cv
159.077 163.938 158.702 163.75 158.327 163.75 cv
157.952 163.75 157.577 163.938 157.265 164.188 cv
157.015 164.5 156.827 164.875 156.827 165.25 cv
156.827 165.625 157.015 166 157.265 166.313 cv
157.577 166.563 157.952 166.75 158.327 166.75 cv
158.702 166.75 159.077 166.563 159.39 166.313 cv
159.64 166 159.827 165.625 159.827 165.25 cv
159.827 165.25 li
cp
f
161.14 162.75 mo
161.14 162.375 160.952 162 160.702 161.688 cv
160.39 161.438 160.015 161.25 159.64 161.25 cv
159.265 161.25 158.89 161.438 158.577 161.688 cv
158.327 162 158.14 162.375 158.14 162.75 cv
158.14 163.125 158.327 163.5 158.577 163.813 cv
158.89 164.063 159.265 164.25 159.64 164.25 cv
160.015 164.25 160.39 164.063 160.702 163.813 cv
160.952 163.5 161.14 163.125 161.14 162.75 cv
161.14 162.75 li
cp
f
162.452 164.5 mo
162.452 164.125 162.265 163.75 162.015 163.438 cv
161.702 163.188 161.327 163 160.952 163 cv
160.577 163 160.202 163.188 159.89 163.438 cv
159.64 163.75 159.452 164.125 159.452 164.5 cv
159.452 164.875 159.64 165.25 159.89 165.563 cv
160.202 165.813 160.577 166 160.952 166 cv
161.327 166 161.702 165.813 162.015 165.563 cv
162.265 165.25 162.452 164.875 162.452 164.5 cv
162.452 164.5 li
cp
f
163.827 165.688 mo
163.827 165.313 163.64 164.938 163.39 164.625 cv
163.077 164.375 162.702 164.188 162.327 164.188 cv
161.952 164.188 161.577 164.375 161.265 164.625 cv
161.015 164.938 160.827 165.313 160.827 165.688 cv
160.827 166.063 161.015 166.438 161.265 166.75 cv
161.577 167 161.952 167.188 162.327 167.188 cv
162.702 167.188 163.077 167 163.39 166.75 cv
163.64 166.438 163.827 166.063 163.827 165.688 cv
163.827 165.688 li
cp
f
165.14 165 mo
165.14 164.625 164.952 164.25 164.702 163.938 cv
164.39 163.688 164.015 163.5 163.64 163.5 cv
163.265 163.5 162.89 163.688 162.577 163.938 cv
162.327 164.25 162.14 164.625 162.14 165 cv
162.14 165.375 162.327 165.75 162.577 166.063 cv
162.89 166.313 163.265 166.5 163.64 166.5 cv
164.015 166.5 164.39 166.313 164.702 166.063 cv
164.952 165.75 165.14 165.375 165.14 165 cv
165.14 165 li
cp
f
166.452 163.688 mo
166.452 163.313 166.265 162.938 166.015 162.625 cv
165.702 162.375 165.327 162.188 164.952 162.188 cv
164.577 162.188 164.202 162.375 163.89 162.625 cv
163.64 162.938 163.452 163.313 163.452 163.688 cv
163.452 164.063 163.64 164.438 163.89 164.75 cv
164.202 165 164.577 165.188 164.952 165.188 cv
165.327 165.188 165.702 165 166.015 164.75 cv
166.265 164.438 166.452 164.063 166.452 163.688 cv
166.452 163.688 li
cp
f
167.827 164.375 mo
167.827 164 167.64 163.625 167.39 163.313 cv
167.077 163.063 166.702 162.875 166.327 162.875 cv
165.952 162.875 165.577 163.063 165.265 163.313 cv
165.015 163.625 164.827 164 164.827 164.375 cv
164.827 164.75 165.015 165.125 165.265 165.438 cv
165.577 165.688 165.952 165.875 166.327 165.875 cv
166.702 165.875 167.077 165.688 167.39 165.438 cv
167.64 165.125 167.827 164.75 167.827 164.375 cv
167.827 164.375 li
cp
f
169.14 165.438 mo
169.14 165.063 168.952 164.688 168.702 164.375 cv
168.39 164.125 168.015 163.938 167.64 163.938 cv
167.265 163.938 166.89 164.125 166.577 164.375 cv
166.327 164.688 166.14 165.063 166.14 165.438 cv
166.14 165.813 166.327 166.188 166.577 166.5 cv
166.89 166.75 167.265 166.938 167.64 166.938 cv
168.015 166.938 168.39 166.75 168.702 166.5 cv
168.952 166.188 169.14 165.813 169.14 165.438 cv
169.14 165.438 li
cp
f
170.452 165.188 mo
170.452 164.813 170.265 164.438 170.015 164.125 cv
169.702 163.875 169.327 163.688 168.952 163.688 cv
168.577 163.688 168.202 163.875 167.89 164.125 cv
167.64 164.438 167.452 164.813 167.452 165.188 cv
167.452 165.563 167.64 165.938 167.89 166.25 cv
168.202 166.5 168.577 166.688 168.952 166.688 cv
169.327 166.688 169.702 166.5 170.015 166.25 cv
170.265 165.938 170.452 165.563 170.452 165.188 cv
170.452 165.188 li
cp
f
171.827 165.438 mo
171.827 165.063 171.64 164.688 171.39 164.375 cv
171.077 164.125 170.702 163.938 170.327 163.938 cv
169.952 163.938 169.577 164.125 169.265 164.375 cv
169.015 164.688 168.827 165.063 168.827 165.438 cv
168.827 165.813 169.015 166.188 169.265 166.5 cv
169.577 166.75 169.952 166.938 170.327 166.938 cv
170.702 166.938 171.077 166.75 171.39 166.5 cv
171.64 166.188 171.827 165.813 171.827 165.438 cv
171.827 165.438 li
cp
f
173.14 165.688 mo
173.14 165.313 172.952 164.938 172.702 164.625 cv
172.39 164.375 172.015 164.188 171.64 164.188 cv
171.265 164.188 170.89 164.375 170.577 164.625 cv
170.327 164.938 170.14 165.313 170.14 165.688 cv
170.14 166.063 170.327 166.438 170.577 166.75 cv
170.89 167 171.265 167.188 171.64 167.188 cv
172.015 167.188 172.39 167 172.702 166.75 cv
172.952 166.438 173.14 166.063 173.14 165.688 cv
173.14 165.688 li
cp
f
174.452 163.375 mo
174.452 163 174.265 162.625 174.015 162.313 cv
173.702 162.063 173.327 161.875 172.952 161.875 cv
172.577 161.875 172.202 162.063 171.89 162.313 cv
171.64 162.625 171.452 163 171.452 163.375 cv
171.452 163.75 171.64 164.125 171.89 164.438 cv
172.202 164.688 172.577 164.875 172.952 164.875 cv
173.327 164.875 173.702 164.688 174.015 164.438 cv
174.265 164.125 174.452 163.75 174.452 163.375 cv
174.452 163.375 li
cp
f
175.827 164.125 mo
175.827 163.75 175.64 163.375 175.39 163.063 cv
175.077 162.813 174.702 162.625 174.327 162.625 cv
173.952 162.625 173.577 162.813 173.265 163.063 cv
173.015 163.375 172.827 163.75 172.827 164.125 cv
172.827 164.5 173.015 164.875 173.265 165.188 cv
173.577 165.438 173.952 165.625 174.327 165.625 cv
174.702 165.625 175.077 165.438 175.39 165.188 cv
175.64 164.875 175.827 164.5 175.827 164.125 cv
175.827 164.125 li
cp
f
177.14 164.125 mo
177.14 163.75 176.952 163.375 176.702 163.063 cv
176.39 162.813 176.015 162.625 175.64 162.625 cv
175.265 162.625 174.89 162.813 174.577 163.063 cv
174.327 163.375 174.14 163.75 174.14 164.125 cv
174.14 164.5 174.327 164.875 174.577 165.188 cv
174.89 165.438 175.265 165.625 175.64 165.625 cv
176.015 165.625 176.39 165.438 176.702 165.188 cv
176.952 164.875 177.14 164.5 177.14 164.125 cv
177.14 164.125 li
cp
f
178.452 165.063 mo
178.452 164.688 178.265 164.313 178.015 164 cv
177.702 163.75 177.327 163.563 176.952 163.563 cv
176.577 163.563 176.202 163.75 175.89 164 cv
175.64 164.313 175.452 164.688 175.452 165.063 cv
175.452 165.438 175.64 165.813 175.89 166.125 cv
176.202 166.375 176.577 166.563 176.952 166.563 cv
177.327 166.563 177.702 166.375 178.015 166.125 cv
178.265 165.813 178.452 165.438 178.452 165.063 cv
178.452 165.063 li
cp
f
179.827 166.563 mo
179.827 166.188 179.64 165.813 179.39 165.5 cv
179.077 165.25 178.702 165.063 178.327 165.063 cv
177.952 165.063 177.577 165.25 177.265 165.5 cv
177.015 165.813 176.827 166.188 176.827 166.563 cv
176.827 166.938 177.015 167.313 177.265 167.625 cv
177.577 167.875 177.952 168.063 178.327 168.063 cv
178.702 168.063 179.077 167.875 179.39 167.625 cv
179.64 167.313 179.827 166.938 179.827 166.563 cv
179.827 166.563 li
cp
f
181.14 164.375 mo
181.14 164 180.952 163.625 180.702 163.313 cv
180.39 163.063 180.015 162.875 179.64 162.875 cv
179.265 162.875 178.89 163.063 178.577 163.313 cv
178.327 163.625 178.14 164 178.14 164.375 cv
178.14 164.75 178.327 165.125 178.577 165.438 cv
178.89 165.688 179.265 165.875 179.64 165.875 cv
180.015 165.875 180.39 165.688 180.702 165.438 cv
180.952 165.125 181.14 164.75 181.14 164.375 cv
181.14 164.375 li
cp
f
182.515 165.438 mo
182.515 165.063 182.327 164.688 182.077 164.375 cv
181.765 164.125 181.39 163.938 181.015 163.938 cv
180.64 163.938 180.265 164.125 179.952 164.375 cv
179.702 164.688 179.515 165.063 179.515 165.438 cv
179.515 165.813 179.702 166.188 179.952 166.5 cv
180.265 166.75 180.64 166.938 181.015 166.938 cv
181.39 166.938 181.765 166.75 182.077 166.5 cv
182.327 166.188 182.515 165.813 182.515 165.438 cv
182.515 165.438 li
cp
f
183.827 164.938 mo
183.827 164.563 183.64 164.188 183.39 163.875 cv
183.077 163.625 182.702 163.438 182.327 163.438 cv
181.952 163.438 181.577 163.625 181.265 163.875 cv
181.015 164.188 180.827 164.563 180.827 164.938 cv
180.827 165.313 181.015 165.688 181.265 166 cv
181.577 166.25 181.952 166.438 182.327 166.438 cv
182.702 166.438 183.077 166.25 183.39 166 cv
183.64 165.688 183.827 165.313 183.827 164.938 cv
183.827 164.938 li
cp
f
185.14 164.375 mo
185.14 164 184.952 163.625 184.702 163.313 cv
184.39 163.063 184.015 162.875 183.64 162.875 cv
183.265 162.875 182.89 163.063 182.577 163.313 cv
182.327 163.625 182.14 164 182.14 164.375 cv
182.14 164.75 182.327 165.125 182.577 165.438 cv
182.89 165.688 183.265 165.875 183.64 165.875 cv
184.015 165.875 184.39 165.688 184.702 165.438 cv
184.952 165.125 185.14 164.75 185.14 164.375 cv
185.14 164.375 li
cp
f
186.515 163.375 mo
186.515 163 186.327 162.625 186.077 162.313 cv
185.765 162.063 185.39 161.875 185.015 161.875 cv
184.64 161.875 184.265 162.063 183.952 162.313 cv
183.702 162.625 183.515 163 183.515 163.375 cv
183.515 163.75 183.702 164.125 183.952 164.438 cv
184.265 164.688 184.64 164.875 185.015 164.875 cv
185.39 164.875 185.765 164.688 186.077 164.438 cv
186.327 164.125 186.515 163.75 186.515 163.375 cv
186.515 163.375 li
cp
f
187.827 165 mo
187.827 164.625 187.64 164.25 187.39 163.938 cv
187.077 163.688 186.702 163.5 186.327 163.5 cv
185.952 163.5 185.577 163.688 185.265 163.938 cv
185.015 164.25 184.827 164.625 184.827 165 cv
184.827 165.375 185.015 165.75 185.265 166.063 cv
185.577 166.313 185.952 166.5 186.327 166.5 cv
186.702 166.5 187.077 166.313 187.39 166.063 cv
187.64 165.75 187.827 165.375 187.827 165 cv
187.827 165 li
cp
f
189.14 165.063 mo
189.14 164.688 188.952 164.313 188.702 164 cv
188.39 163.75 188.015 163.563 187.64 163.563 cv
187.265 163.563 186.89 163.75 186.577 164 cv
186.327 164.313 186.14 164.688 186.14 165.063 cv
186.14 165.438 186.327 165.813 186.577 166.125 cv
186.89 166.375 187.265 166.563 187.64 166.563 cv
188.015 166.563 188.39 166.375 188.702 166.125 cv
188.952 165.813 189.14 165.438 189.14 165.063 cv
189.14 165.063 li
cp
f
190.515 164.75 mo
190.515 164.375 190.327 164 190.077 163.688 cv
189.765 163.438 189.39 163.25 189.015 163.25 cv
188.64 163.25 188.265 163.438 187.952 163.688 cv
187.702 164 187.515 164.375 187.515 164.75 cv
187.515 165.125 187.702 165.5 187.952 165.813 cv
188.265 166.063 188.64 166.25 189.015 166.25 cv
189.39 166.25 189.765 166.063 190.077 165.813 cv
190.327 165.5 190.515 165.125 190.515 164.75 cv
190.515 164.75 li
cp
f
191.827 165 mo
191.827 164.625 191.64 164.25 191.39 163.938 cv
191.077 163.688 190.702 163.5 190.327 163.5 cv
189.952 163.5 189.577 163.688 189.265 163.938 cv
189.015 164.25 188.827 164.625 188.827 165 cv
188.827 165.375 189.015 165.75 189.265 166.063 cv
189.577 166.313 189.952 166.5 190.327 166.5 cv
190.702 166.5 191.077 166.313 191.39 166.063 cv
191.64 165.75 191.827 165.375 191.827 165 cv
191.827 165 li
cp
f
193.14 164.938 mo
193.14 164.563 192.952 164.188 192.702 163.875 cv
192.39 163.625 192.015 163.438 191.64 163.438 cv
191.265 163.438 190.89 163.625 190.577 163.875 cv
190.327 164.188 190.14 164.563 190.14 164.938 cv
190.14 165.313 190.327 165.688 190.577 166 cv
190.89 166.25 191.265 166.438 191.64 166.438 cv
192.015 166.438 192.39 166.25 192.702 166 cv
192.952 165.688 193.14 165.313 193.14 164.938 cv
193.14 164.938 li
cp
f
194.515 164.625 mo
194.515 164.25 194.327 163.875 194.077 163.563 cv
193.765 163.313 193.39 163.125 193.015 163.125 cv
192.64 163.125 192.265 163.313 191.952 163.563 cv
191.702 163.875 191.515 164.25 191.515 164.625 cv
191.515 165 191.702 165.375 191.952 165.688 cv
192.265 165.938 192.64 166.125 193.015 166.125 cv
193.39 166.125 193.765 165.938 194.077 165.688 cv
194.327 165.375 194.515 165 194.515 164.625 cv
194.515 164.625 li
cp
f
195.827 166 mo
195.827 165.625 195.64 165.25 195.39 164.938 cv
195.077 164.688 194.702 164.5 194.327 164.5 cv
193.952 164.5 193.577 164.688 193.265 164.938 cv
193.015 165.25 192.827 165.625 192.827 166 cv
192.827 166.375 193.015 166.75 193.265 167.063 cv
193.577 167.313 193.952 167.5 194.327 167.5 cv
194.702 167.5 195.077 167.313 195.39 167.063 cv
195.64 166.75 195.827 166.375 195.827 166 cv
195.827 166 li
cp
f
197.14 164.125 mo
197.14 163.75 196.952 163.375 196.702 163.063 cv
196.39 162.813 196.015 162.625 195.64 162.625 cv
195.265 162.625 194.89 162.813 194.577 163.063 cv
194.327 163.375 194.14 163.75 194.14 164.125 cv
194.14 164.5 194.327 164.875 194.577 165.188 cv
194.89 165.438 195.265 165.625 195.64 165.625 cv
196.015 165.625 196.39 165.438 196.702 165.188 cv
196.952 164.875 197.14 164.5 197.14 164.125 cv
197.14 164.125 li
cp
f
198.515 163.438 mo
198.515 163.063 198.327 162.688 198.077 162.375 cv
197.765 162.125 197.39 161.938 197.015 161.938 cv
196.64 161.938 196.265 162.125 195.952 162.375 cv
195.702 162.688 195.515 163.063 195.515 163.438 cv
195.515 163.813 195.702 164.188 195.952 164.5 cv
196.265 164.75 196.64 164.938 197.015 164.938 cv
197.39 164.938 197.765 164.75 198.077 164.5 cv
198.327 164.188 198.515 163.813 198.515 163.438 cv
198.515 163.438 li
cp
f
199.827 163.938 mo
199.827 163.563 199.64 163.188 199.39 162.875 cv
199.077 162.625 198.702 162.438 198.327 162.438 cv
197.952 162.438 197.577 162.625 197.265 162.875 cv
197.015 163.188 196.827 163.563 196.827 163.938 cv
196.827 164.313 197.015 164.688 197.265 165 cv
197.577 165.25 197.952 165.438 198.327 165.438 cv
198.702 165.438 199.077 165.25 199.39 165 cv
199.64 164.688 199.827 164.313 199.827 163.938 cv
199.827 163.938 li
cp
f
201.14 152.125 mo
201.14 151.75 200.952 151.375 200.702 151.063 cv
200.39 150.813 200.015 150.625 199.64 150.625 cv
199.265 150.625 198.89 150.813 198.577 151.063 cv
198.327 151.375 198.14 151.75 198.14 152.125 cv
198.14 152.5 198.327 152.875 198.577 153.188 cv
198.89 153.438 199.265 153.625 199.64 153.625 cv
200.015 153.625 200.39 153.438 200.702 153.188 cv
200.952 152.875 201.14 152.5 201.14 152.125 cv
201.14 152.125 li
cp
f
202.515 79.25 mo
202.515 78.875 202.327 78.5 202.077 78.1875 cv
201.765 77.9375 201.39 77.75 201.015 77.75 cv
200.64 77.75 200.265 77.9375 199.952 78.1875 cv
199.702 78.5 199.515 78.875 199.515 79.25 cv
199.515 79.625 199.702 80 199.952 80.3125 cv
200.265 80.5625 200.64 80.75 201.015 80.75 cv
201.39 80.75 201.765 80.5625 202.077 80.3125 cv
202.327 80 202.515 79.625 202.515 79.25 cv
202.515 79.25 li
cp
f
203.827 60.8125 mo
203.827 60.4375 203.64 60.0625 203.39 59.75 cv
203.077 59.5 202.702 59.3125 202.327 59.3125 cv
201.952 59.3125 201.577 59.5 201.265 59.75 cv
201.015 60.0625 200.827 60.4375 200.827 60.8125 cv
200.827 61.1875 201.015 61.5625 201.265 61.875 cv
201.577 62.125 201.952 62.3125 202.327 62.3125 cv
202.702 62.3125 203.077 62.125 203.39 61.875 cv
203.64 61.5625 203.827 61.1875 203.827 60.8125 cv
203.827 60.8125 li
cp
f
205.14 55.8125 mo
205.14 55.4375 204.952 55.0625 204.702 54.75 cv
204.39 54.5 204.015 54.3125 203.64 54.3125 cv
203.265 54.3125 202.89 54.5 202.577 54.75 cv
202.327 55.0625 202.14 55.4375 202.14 55.8125 cv
202.14 56.1875 202.327 56.5625 202.577 56.875 cv
202.89 57.125 203.265 57.3125 203.64 57.3125 cv
204.015 57.3125 204.39 57.125 204.702 56.875 cv
204.952 56.5625 205.14 56.1875 205.14 55.8125 cv
205.14 55.8125 li
cp
f
206.515 50.6875 mo
206.515 50.3125 206.327 49.9375 206.077 49.625 cv
205.765 49.375 205.39 49.1875 205.015 49.1875 cv
204.64 49.1875 204.265 49.375 203.952 49.625 cv
203.702 49.9375 203.515 50.3125 203.515 50.6875 cv
203.515 51.0625 203.702 51.4375 203.952 51.75 cv
204.265 52 204.64 52.1875 205.015 52.1875 cv
205.39 52.1875 205.765 52 206.077 51.75 cv
206.327 51.4375 206.515 51.0625 206.515 50.6875 cv
206.515 50.6875 li
cp
f
207.827 44.5625 mo
207.827 44.1875 207.64 43.8125 207.39 43.5 cv
207.077 43.25 206.702 43.0625 206.327 43.0625 cv
205.952 43.0625 205.577 43.25 205.265 43.5 cv
205.015 43.8125 204.827 44.1875 204.827 44.5625 cv
204.827 44.9375 205.015 45.3125 205.265 45.625 cv
205.577 45.875 205.952 46.0625 206.327 46.0625 cv
206.702 46.0625 207.077 45.875 207.39 45.625 cv
207.64 45.3125 207.827 44.9375 207.827 44.5625 cv
207.827 44.5625 li
cp
f
209.14 43.5625 mo
209.14 43.1875 208.952 42.8125 208.702 42.5 cv
208.39 42.25 208.015 42.0625 207.64 42.0625 cv
207.265 42.0625 206.89 42.25 206.577 42.5 cv
206.327 42.8125 206.14 43.1875 206.14 43.5625 cv
206.14 43.9375 206.327 44.3125 206.577 44.625 cv
206.89 44.875 207.265 45.0625 207.64 45.0625 cv
208.015 45.0625 208.39 44.875 208.702 44.625 cv
208.952 44.3125 209.14 43.9375 209.14 43.5625 cv
209.14 43.5625 li
cp
f
210.515 39.5625 mo
210.515 39.1875 210.327 38.8125 210.077 38.5 cv
209.765 38.25 209.39 38.0625 209.015 38.0625 cv
208.64 38.0625 208.265 38.25 207.952 38.5 cv
207.702 38.8125 207.515 39.1875 207.515 39.5625 cv
207.515 39.9375 207.702 40.3125 207.952 40.625 cv
208.265 40.875 208.64 41.0625 209.015 41.0625 cv
209.39 41.0625 209.765 40.875 210.077 40.625 cv
210.327 40.3125 210.515 39.9375 210.515 39.5625 cv
210.515 39.5625 li
cp
f
211.827 36.8125 mo
211.827 36.4375 211.64 36.0625 211.39 35.75 cv
211.077 35.5 210.702 35.3125 210.327 35.3125 cv
209.952 35.3125 209.577 35.5 209.265 35.75 cv
209.015 36.0625 208.827 36.4375 208.827 36.8125 cv
208.827 37.1875 209.015 37.5625 209.265 37.875 cv
209.577 38.125 209.952 38.3125 210.327 38.3125 cv
210.702 38.3125 211.077 38.125 211.39 37.875 cv
211.64 37.5625 211.827 37.1875 211.827 36.8125 cv
211.827 36.8125 li
cp
f
213.14 33.6875 mo
213.14 33.3125 212.952 32.9375 212.702 32.625 cv
212.39 32.375 212.015 32.1875 211.64 32.1875 cv
211.265 32.1875 210.89 32.375 210.577 32.625 cv
210.327 32.9375 210.14 33.3125 210.14 33.6875 cv
210.14 34.0625 210.327 34.4375 210.577 34.75 cv
210.89 35 211.265 35.1875 211.64 35.1875 cv
212.015 35.1875 212.39 35 212.702 34.75 cv
212.952 34.4375 213.14 34.0625 213.14 33.6875 cv
213.14 33.6875 li
cp
f
214.515 30.5 mo
214.515 30.125 214.327 29.75 214.077 29.4375 cv
213.765 29.1875 213.39 29 213.015 29 cv
212.64 29 212.265 29.1875 211.952 29.4375 cv
211.702 29.75 211.515 30.125 211.515 30.5 cv
211.515 30.875 211.702 31.25 211.952 31.5625 cv
212.265 31.8125 212.64 32 213.015 32 cv
213.39 32 213.765 31.8125 214.077 31.5625 cv
214.327 31.25 214.515 30.875 214.515 30.5 cv
214.515 30.5 li
cp
f
215.827 29.0625 mo
215.827 28.6875 215.64 28.3125 215.39 28 cv
215.077 27.75 214.702 27.5625 214.327 27.5625 cv
213.952 27.5625 213.577 27.75 213.265 28 cv
213.015 28.3125 212.827 28.6875 212.827 29.0625 cv
212.827 29.4375 213.015 29.8125 213.265 30.125 cv
213.577 30.375 213.952 30.5625 214.327 30.5625 cv
214.702 30.5625 215.077 30.375 215.39 30.125 cv
215.64 29.8125 215.827 29.4375 215.827 29.0625 cv
215.827 29.0625 li
cp
f
217.14 27.5 mo
217.14 27.125 216.952 26.75 216.702 26.4375 cv
216.39 26.1875 216.015 26 215.64 26 cv
215.265 26 214.89 26.1875 214.577 26.4375 cv
214.327 26.75 214.14 27.125 214.14 27.5 cv
214.14 27.875 214.327 28.25 214.577 28.5625 cv
214.89 28.8125 215.265 29 215.64 29 cv
216.015 29 216.39 28.8125 216.702 28.5625 cv
216.952 28.25 217.14 27.875 217.14 27.5 cv
217.14 27.5 li
cp
f
218.515 25.625 mo
218.515 25.25 218.327 24.875 218.077 24.5625 cv
217.765 24.3125 217.39 24.125 217.015 24.125 cv
216.64 24.125 216.265 24.3125 215.952 24.5625 cv
215.702 24.875 215.515 25.25 215.515 25.625 cv
215.515 26 215.702 26.375 215.952 26.6875 cv
216.265 26.9375 216.64 27.125 217.015 27.125 cv
217.39 27.125 217.765 26.9375 218.077 26.6875 cv
218.327 26.375 218.515 26 218.515 25.625 cv
218.515 25.625 li
cp
f
219.827 25.1875 mo
219.827 24.8125 219.64 24.4375 219.39 24.125 cv
219.077 23.875 218.702 23.6875 218.327 23.6875 cv
217.952 23.6875 217.577 23.875 217.265 24.125 cv
217.015 24.4375 216.827 24.8125 216.827 25.1875 cv
216.827 25.5625 217.015 25.9375 217.265 26.25 cv
217.577 26.5 217.952 26.6875 218.327 26.6875 cv
218.702 26.6875 219.077 26.5 219.39 26.25 cv
219.64 25.9375 219.827 25.5625 219.827 25.1875 cv
219.827 25.1875 li
cp
f
221.14 22.125 mo
221.14 21.75 220.952 21.375 220.702 21.0625 cv
220.39 20.8125 220.015 20.625 219.64 20.625 cv
219.265 20.625 218.89 20.8125 218.577 21.0625 cv
218.327 21.375 218.14 21.75 218.14 22.125 cv
218.14 22.5 218.327 22.875 218.577 23.1875 cv
218.89 23.4375 219.265 23.625 219.64 23.625 cv
220.015 23.625 220.39 23.4375 220.702 23.1875 cv
220.952 22.875 221.14 22.5 221.14 22.125 cv
221.14 22.125 li
cp
f
222.515 22.8125 mo
222.515 22.4375 222.327 22.0625 222.077 21.75 cv
221.765 21.5 221.39 21.3125 221.015 21.3125 cv
220.64 21.3125 220.265 21.5 219.952 21.75 cv
219.702 22.0625 219.515 22.4375 219.515 22.8125 cv
219.515 23.1875 219.702 23.5625 219.952 23.875 cv
220.265 24.125 220.64 24.3125 221.015 24.3125 cv
221.39 24.3125 221.765 24.125 222.077 23.875 cv
222.327 23.5625 222.515 23.1875 222.515 22.8125 cv
222.515 22.8125 li
cp
f
223.827 22.3125 mo
223.827 21.9375 223.64 21.5625 223.39 21.25 cv
223.077 21 222.702 20.8125 222.327 20.8125 cv
221.952 20.8125 221.577 21 221.265 21.25 cv
221.015 21.5625 220.827 21.9375 220.827 22.3125 cv
220.827 22.6875 221.015 23.0625 221.265 23.375 cv
221.577 23.625 221.952 23.8125 222.327 23.8125 cv
222.702 23.8125 223.077 23.625 223.39 23.375 cv
223.64 23.0625 223.827 22.6875 223.827 22.3125 cv
223.827 22.3125 li
cp
f
225.202 20.9375 mo
225.202 20.5625 225.015 20.1875 224.765 19.875 cv
224.452 19.625 224.077 19.4375 223.702 19.4375 cv
223.327 19.4375 222.952 19.625 222.64 19.875 cv
222.39 20.1875 222.202 20.5625 222.202 20.9375 cv
222.202 21.3125 222.39 21.6875 222.64 22 cv
222.952 22.25 223.327 22.4375 223.702 22.4375 cv
224.077 22.4375 224.452 22.25 224.765 22 cv
225.015 21.6875 225.202 21.3125 225.202 20.9375 cv
225.202 20.9375 li
cp
f
226.515 19.1875 mo
226.515 18.8125 226.327 18.4375 226.077 18.125 cv
225.765 17.875 225.39 17.6875 225.015 17.6875 cv
224.64 17.6875 224.265 17.875 223.952 18.125 cv
223.702 18.4375 223.515 18.8125 223.515 19.1875 cv
223.515 19.5625 223.702 19.9375 223.952 20.25 cv
224.265 20.5 224.64 20.6875 225.015 20.6875 cv
225.39 20.6875 225.765 20.5 226.077 20.25 cv
226.327 19.9375 226.515 19.5625 226.515 19.1875 cv
226.515 19.1875 li
cp
f
227.827 21.3125 mo
227.827 20.9375 227.64 20.5625 227.39 20.25 cv
227.077 20 226.702 19.8125 226.327 19.8125 cv
225.952 19.8125 225.577 20 225.265 20.25 cv
225.015 20.5625 224.827 20.9375 224.827 21.3125 cv
224.827 21.6875 225.015 22.0625 225.265 22.375 cv
225.577 22.625 225.952 22.8125 226.327 22.8125 cv
226.702 22.8125 227.077 22.625 227.39 22.375 cv
227.64 22.0625 227.827 21.6875 227.827 21.3125 cv
227.827 21.3125 li
cp
f
229.202 18.1875 mo
229.202 17.8125 229.015 17.4375 228.765 17.125 cv
228.452 16.875 228.077 16.6875 227.702 16.6875 cv
227.327 16.6875 226.952 16.875 226.64 17.125 cv
226.39 17.4375 226.202 17.8125 226.202 18.1875 cv
226.202 18.5625 226.39 18.9375 226.64 19.25 cv
226.952 19.5 227.327 19.6875 227.702 19.6875 cv
228.077 19.6875 228.452 19.5 228.765 19.25 cv
229.015 18.9375 229.202 18.5625 229.202 18.1875 cv
229.202 18.1875 li
cp
f
230.515 15.75 mo
230.515 15.375 230.327 15 230.077 14.6875 cv
229.765 14.4375 229.39 14.25 229.015 14.25 cv
228.64 14.25 228.265 14.4375 227.952 14.6875 cv
227.702 15 227.515 15.375 227.515 15.75 cv
227.515 16.125 227.702 16.5 227.952 16.8125 cv
228.265 17.0625 228.64 17.25 229.015 17.25 cv
229.39 17.25 229.765 17.0625 230.077 16.8125 cv
230.327 16.5 230.515 16.125 230.515 15.75 cv
230.515 15.75 li
cp
f
231.827 18.5 mo
231.827 18.125 231.64 17.75 231.39 17.4375 cv
231.077 17.1875 230.702 17 230.327 17 cv
229.952 17 229.577 17.1875 229.265 17.4375 cv
229.015 17.75 228.827 18.125 228.827 18.5 cv
228.827 18.875 229.015 19.25 229.265 19.5625 cv
229.577 19.8125 229.952 20 230.327 20 cv
230.702 20 231.077 19.8125 231.39 19.5625 cv
231.64 19.25 231.827 18.875 231.827 18.5 cv
231.827 18.5 li
cp
f
233.202 16.5625 mo
233.202 16.1875 233.015 15.8125 232.765 15.5 cv
232.452 15.25 232.077 15.0625 231.702 15.0625 cv
231.327 15.0625 230.952 15.25 230.64 15.5 cv
230.39 15.8125 230.202 16.1875 230.202 16.5625 cv
230.202 16.9375 230.39 17.3125 230.64 17.625 cv
230.952 17.875 231.327 18.0625 231.702 18.0625 cv
232.077 18.0625 232.452 17.875 232.765 17.625 cv
233.015 17.3125 233.202 16.9375 233.202 16.5625 cv
233.202 16.5625 li
cp
f
234.515 16.3125 mo
234.515 15.9375 234.327 15.5625 234.077 15.25 cv
233.765 15 233.39 14.8125 233.015 14.8125 cv
232.64 14.8125 232.265 15 231.952 15.25 cv
231.702 15.5625 231.515 15.9375 231.515 16.3125 cv
231.515 16.6875 231.702 17.0625 231.952 17.375 cv
232.265 17.625 232.64 17.8125 233.015 17.8125 cv
233.39 17.8125 233.765 17.625 234.077 17.375 cv
234.327 17.0625 234.515 16.6875 234.515 16.3125 cv
234.515 16.3125 li
cp
f
235.827 16.3125 mo
235.827 15.9375 235.64 15.5625 235.39 15.25 cv
235.077 15 234.702 14.8125 234.327 14.8125 cv
233.952 14.8125 233.577 15 233.265 15.25 cv
233.015 15.5625 232.827 15.9375 232.827 16.3125 cv
232.827 16.6875 233.015 17.0625 233.265 17.375 cv
233.577 17.625 233.952 17.8125 234.327 17.8125 cv
234.702 17.8125 235.077 17.625 235.39 17.375 cv
235.64 17.0625 235.827 16.6875 235.827 16.3125 cv
235.827 16.3125 li
cp
f
237.202 15.875 mo
237.202 15.5 237.015 15.125 236.765 14.8125 cv
236.452 14.5625 236.077 14.375 235.702 14.375 cv
235.327 14.375 234.952 14.5625 234.64 14.8125 cv
234.39 15.125 234.202 15.5 234.202 15.875 cv
234.202 16.25 234.39 16.625 234.64 16.9375 cv
234.952 17.1875 235.327 17.375 235.702 17.375 cv
236.077 17.375 236.452 17.1875 236.765 16.9375 cv
237.015 16.625 237.202 16.25 237.202 15.875 cv
237.202 15.875 li
cp
f
238.515 15.75 mo
238.515 15.375 238.327 15 238.077 14.6875 cv
237.765 14.4375 237.39 14.25 237.015 14.25 cv
236.64 14.25 236.265 14.4375 235.952 14.6875 cv
235.702 15 235.515 15.375 235.515 15.75 cv
235.515 16.125 235.702 16.5 235.952 16.8125 cv
236.265 17.0625 236.64 17.25 237.015 17.25 cv
237.39 17.25 237.765 17.0625 238.077 16.8125 cv
238.327 16.5 238.515 16.125 238.515 15.75 cv
238.515 15.75 li
cp
f
239.827 13.4375 mo
239.827 13.0625 239.64 12.6875 239.39 12.375 cv
239.077 12.125 238.702 11.9375 238.327 11.9375 cv
237.952 11.9375 237.577 12.125 237.265 12.375 cv
237.015 12.6875 236.827 13.0625 236.827 13.4375 cv
236.827 13.8125 237.015 14.1875 237.265 14.5 cv
237.577 14.75 237.952 14.9375 238.327 14.9375 cv
238.702 14.9375 239.077 14.75 239.39 14.5 cv
239.64 14.1875 239.827 13.8125 239.827 13.4375 cv
239.827 13.4375 li
cp
f
241.202 13.25 mo
241.202 12.875 241.015 12.5 240.765 12.1875 cv
240.452 11.9375 240.077 11.75 239.702 11.75 cv
239.327 11.75 238.952 11.9375 238.64 12.1875 cv
238.39 12.5 238.202 12.875 238.202 13.25 cv
238.202 13.625 238.39 14 238.64 14.3125 cv
238.952 14.5625 239.327 14.75 239.702 14.75 cv
240.077 14.75 240.452 14.5625 240.765 14.3125 cv
241.015 14 241.202 13.625 241.202 13.25 cv
241.202 13.25 li
cp
f
242.515 13.6875 mo
242.515 13.3125 242.327 12.9375 242.077 12.625 cv
241.765 12.375 241.39 12.1875 241.015 12.1875 cv
240.64 12.1875 240.265 12.375 239.952 12.625 cv
239.702 12.9375 239.515 13.3125 239.515 13.6875 cv
239.515 14.0625 239.702 14.4375 239.952 14.75 cv
240.265 15 240.64 15.1875 241.015 15.1875 cv
241.39 15.1875 241.765 15 242.077 14.75 cv
242.327 14.4375 242.515 14.0625 242.515 13.6875 cv
242.515 13.6875 li
cp
f
243.827 14.75 mo
243.827 14.375 243.64 14 243.39 13.6875 cv
243.077 13.4375 242.702 13.25 242.327 13.25 cv
241.952 13.25 241.577 13.4375 241.265 13.6875 cv
241.015 14 240.827 14.375 240.827 14.75 cv
240.827 15.125 241.015 15.5 241.265 15.8125 cv
241.577 16.0625 241.952 16.25 242.327 16.25 cv
242.702 16.25 243.077 16.0625 243.39 15.8125 cv
243.64 15.5 243.827 15.125 243.827 14.75 cv
243.827 14.75 li
cp
f
245.202 13.375 mo
245.202 13 245.015 12.625 244.765 12.3125 cv
244.452 12.0625 244.077 11.875 243.702 11.875 cv
243.327 11.875 242.952 12.0625 242.64 12.3125 cv
242.39 12.625 242.202 13 242.202 13.375 cv
242.202 13.75 242.39 14.125 242.64 14.4375 cv
242.952 14.6875 243.327 14.875 243.702 14.875 cv
244.077 14.875 244.452 14.6875 244.765 14.4375 cv
245.015 14.125 245.202 13.75 245.202 13.375 cv
245.202 13.375 li
cp
f
246.515 12.25 mo
246.515 11.875 246.327 11.5 246.077 11.1875 cv
245.765 10.9375 245.39 10.75 245.015 10.75 cv
244.64 10.75 244.265 10.9375 243.952 11.1875 cv
243.702 11.5 243.515 11.875 243.515 12.25 cv
243.515 12.625 243.702 13 243.952 13.3125 cv
244.265 13.5625 244.64 13.75 245.015 13.75 cv
245.39 13.75 245.765 13.5625 246.077 13.3125 cv
246.327 13 246.515 12.625 246.515 12.25 cv
246.515 12.25 li
cp
f
247.827 12.25 mo
247.827 11.875 247.64 11.5 247.39 11.1875 cv
247.077 10.9375 246.702 10.75 246.327 10.75 cv
245.952 10.75 245.577 10.9375 245.265 11.1875 cv
245.015 11.5 244.827 11.875 244.827 12.25 cv
244.827 12.625 245.015 13 245.265 13.3125 cv
245.577 13.5625 245.952 13.75 246.327 13.75 cv
246.702 13.75 247.077 13.5625 247.39 13.3125 cv
247.64 13 247.827 12.625 247.827 12.25 cv
247.827 12.25 li
cp
f
249.202 13.0625 mo
249.202 12.6875 249.015 12.3125 248.765 12 cv
248.452 11.75 248.077 11.5625 247.702 11.5625 cv
247.327 11.5625 246.952 11.75 246.64 12 cv
246.39 12.3125 246.202 12.6875 246.202 13.0625 cv
246.202 13.4375 246.39 13.8125 246.64 14.125 cv
246.952 14.375 247.327 14.5625 247.702 14.5625 cv
248.077 14.5625 248.452 14.375 248.765 14.125 cv
249.015 13.8125 249.202 13.4375 249.202 13.0625 cv
249.202 13.0625 li
cp
f
250.515 11.375 mo
250.515 11 250.327 10.625 250.077 10.3125 cv
249.765 10.0625 249.39 9.875 249.015 9.875 cv
248.64 9.875 248.265 10.0625 247.952 10.3125 cv
247.702 10.625 247.515 11 247.515 11.375 cv
247.515 11.75 247.702 12.125 247.952 12.4375 cv
248.265 12.6875 248.64 12.875 249.015 12.875 cv
249.39 12.875 249.765 12.6875 250.077 12.4375 cv
250.327 12.125 250.515 11.75 250.515 11.375 cv
250.515 11.375 li
cp
f
251.827 11.1875 mo
251.827 10.8125 251.64 10.4375 251.39 10.125 cv
251.077 9.875 250.702 9.6875 250.327 9.6875 cv
249.952 9.6875 249.577 9.875 249.265 10.125 cv
249.015 10.4375 248.827 10.8125 248.827 11.1875 cv
248.827 11.5625 249.015 11.9375 249.265 12.25 cv
249.577 12.5 249.952 12.6875 250.327 12.6875 cv
250.702 12.6875 251.077 12.5 251.39 12.25 cv
251.64 11.9375 251.827 11.5625 251.827 11.1875 cv
251.827 11.1875 li
cp
f
253.202 10.4375 mo
253.202 10.0625 253.015 9.6875 252.765 9.375 cv
252.452 9.125 252.077 8.9375 251.702 8.9375 cv
251.327 8.9375 250.952 9.125 250.64 9.375 cv
250.39 9.6875 250.202 10.0625 250.202 10.4375 cv
250.202 10.8125 250.39 11.1875 250.64 11.5 cv
250.952 11.75 251.327 11.9375 251.702 11.9375 cv
252.077 11.9375 252.452 11.75 252.765 11.5 cv
253.015 11.1875 253.202 10.8125 253.202 10.4375 cv
253.202 10.4375 li
cp
f
254.515 10.1875 mo
254.515 9.8125 254.327 9.4375 254.077 9.125 cv
253.765 8.875 253.39 8.6875 253.015 8.6875 cv
252.64 8.6875 252.265 8.875 251.952 9.125 cv
251.702 9.4375 251.515 9.8125 251.515 10.1875 cv
251.515 10.5625 251.702 10.9375 251.952 11.25 cv
252.265 11.5 252.64 11.6875 253.015 11.6875 cv
253.39 11.6875 253.765 11.5 254.077 11.25 cv
254.327 10.9375 254.515 10.5625 254.515 10.1875 cv
254.515 10.1875 li
cp
f
255.827 8.875 mo
255.827 8.5 255.64 8.125 255.39 7.8125 cv
255.077 7.5625 254.702 7.375 254.327 7.375 cv
253.952 7.375 253.577 7.5625 253.265 7.8125 cv
253.015 8.125 252.827 8.5 252.827 8.875 cv
252.827 9.25 253.015 9.625 253.265 9.9375 cv
253.577 10.1875 253.952 10.375 254.327 10.375 cv
254.702 10.375 255.077 10.1875 255.39 9.9375 cv
255.64 9.625 255.827 9.25 255.827 8.875 cv
255.827 8.875 li
cp
f
257.202 10.6875 mo
257.202 10.3125 257.015 9.9375 256.765 9.625 cv
256.452 9.375 256.077 9.1875 255.702 9.1875 cv
255.327 9.1875 254.952 9.375 254.64 9.625 cv
254.39 9.9375 254.202 10.3125 254.202 10.6875 cv
254.202 11.0625 254.39 11.4375 254.64 11.75 cv
254.952 12 255.327 12.1875 255.702 12.1875 cv
256.077 12.1875 256.452 12 256.765 11.75 cv
257.015 11.4375 257.202 11.0625 257.202 10.6875 cv
257.202 10.6875 li
cp
f
258.515 10.6875 mo
258.515 10.3125 258.327 9.9375 258.077 9.625 cv
257.765 9.375 257.39 9.1875 257.015 9.1875 cv
256.64 9.1875 256.265 9.375 255.952 9.625 cv
255.702 9.9375 255.515 10.3125 255.515 10.6875 cv
255.515 11.0625 255.702 11.4375 255.952 11.75 cv
256.265 12 256.64 12.1875 257.015 12.1875 cv
257.39 12.1875 257.765 12 258.077 11.75 cv
258.327 11.4375 258.515 11.0625 258.515 10.6875 cv
258.515 10.6875 li
cp
f
259.827 9.75 mo
259.827 9.375 259.64 9 259.39 8.6875 cv
259.077 8.4375 258.702 8.25 258.327 8.25 cv
257.952 8.25 257.577 8.4375 257.265 8.6875 cv
257.015 9 256.827 9.375 256.827 9.75 cv
256.827 10.125 257.015 10.5 257.265 10.8125 cv
257.577 11.0625 257.952 11.25 258.327 11.25 cv
258.702 11.25 259.077 11.0625 259.39 10.8125 cv
259.64 10.5 259.827 10.125 259.827 9.75 cv
259.827 9.75 li
cp
f
261.202 8.6875 mo
261.202 8.3125 261.015 7.9375 260.765 7.625 cv
260.452 7.375 260.077 7.1875 259.702 7.1875 cv
259.327 7.1875 258.952 7.375 258.64 7.625 cv
258.39 7.9375 258.202 8.3125 258.202 8.6875 cv
258.202 9.0625 258.39 9.4375 258.64 9.75 cv
258.952 10 259.327 10.1875 259.702 10.1875 cv
260.077 10.1875 260.452 10 260.765 9.75 cv
261.015 9.4375 261.202 9.0625 261.202 8.6875 cv
261.202 8.6875 li
cp
f
262.515 7.6875 mo
262.515 7.3125 262.327 6.9375 262.077 6.625 cv
261.765 6.375 261.39 6.1875 261.015 6.1875 cv
260.64 6.1875 260.265 6.375 259.952 6.625 cv
259.702 6.9375 259.515 7.3125 259.515 7.6875 cv
259.515 8.0625 259.702 8.4375 259.952 8.75 cv
260.265 9 260.64 9.1875 261.015 9.1875 cv
261.39 9.1875 261.765 9 262.077 8.75 cv
262.327 8.4375 262.515 8.0625 262.515 7.6875 cv
262.515 7.6875 li
cp
f
263.827 6.125 mo
263.827 5.75 263.64 5.375 263.39 5.0625 cv
263.077 4.8125 262.702 4.625 262.327 4.625 cv
261.952 4.625 261.577 4.8125 261.265 5.0625 cv
261.015 5.375 260.827 5.75 260.827 6.125 cv
260.827 6.5 261.015 6.875 261.265 7.1875 cv
261.577 7.4375 261.952 7.625 262.327 7.625 cv
262.702 7.625 263.077 7.4375 263.39 7.1875 cv
263.64 6.875 263.827 6.5 263.827 6.125 cv
263.827 6.125 li
cp
f
265.202 10.75 mo
265.202 10.375 265.015 10 264.765 9.6875 cv
264.452 9.4375 264.077 9.25 263.702 9.25 cv
263.327 9.25 262.952 9.4375 262.64 9.6875 cv
262.39 10 262.202 10.375 262.202 10.75 cv
262.202 11.125 262.39 11.5 262.64 11.8125 cv
262.952 12.0625 263.327 12.25 263.702 12.25 cv
264.077 12.25 264.452 12.0625 264.765 11.8125 cv
265.015 11.5 265.202 11.125 265.202 10.75 cv
265.202 10.75 li
cp
f
266.515 8.375 mo
266.515 8 266.327 7.625 266.077 7.3125 cv
265.765 7.0625 265.39 6.875 265.015 6.875 cv
264.64 6.875 264.265 7.0625 263.952 7.3125 cv
263.702 7.625 263.515 8 263.515 8.375 cv
263.515 8.75 263.702 9.125 263.952 9.4375 cv
264.265 9.6875 264.64 9.875 265.015 9.875 cv
265.39 9.875 265.765 9.6875 266.077 9.4375 cv
266.327 9.125 266.515 8.75 266.515 8.375 cv
266.515 8.375 li
cp
f
267.89 7.9375 mo
267.89 7.5625 267.702 7.1875 267.452 6.875 cv
267.14 6.625 266.765 6.4375 266.39 6.4375 cv
266.015 6.4375 265.64 6.625 265.327 6.875 cv
265.077 7.1875 264.89 7.5625 264.89 7.9375 cv
264.89 8.3125 265.077 8.6875 265.327 9 cv
265.64 9.25 266.015 9.4375 266.39 9.4375 cv
266.765 9.4375 267.14 9.25 267.452 9 cv
267.702 8.6875 267.89 8.3125 267.89 7.9375 cv
267.89 7.9375 li
cp
f
269.202 6.8125 mo
269.202 6.4375 269.015 6.0625 268.765 5.75 cv
268.452 5.5 268.077 5.3125 267.702 5.3125 cv
267.327 5.3125 266.952 5.5 266.64 5.75 cv
266.39 6.0625 266.202 6.4375 266.202 6.8125 cv
266.202 7.1875 266.39 7.5625 266.64 7.875 cv
266.952 8.125 267.327 8.3125 267.702 8.3125 cv
268.077 8.3125 268.452 8.125 268.765 7.875 cv
269.015 7.5625 269.202 7.1875 269.202 6.8125 cv
269.202 6.8125 li
cp
f
270.515 6.9375 mo
270.515 6.5625 270.327 6.1875 270.077 5.875 cv
269.765 5.625 269.39 5.4375 269.015 5.4375 cv
268.64 5.4375 268.265 5.625 267.952 5.875 cv
267.702 6.1875 267.515 6.5625 267.515 6.9375 cv
267.515 7.3125 267.702 7.6875 267.952 8 cv
268.265 8.25 268.64 8.4375 269.015 8.4375 cv
269.39 8.4375 269.765 8.25 270.077 8 cv
270.327 7.6875 270.515 7.3125 270.515 6.9375 cv
270.515 6.9375 li
cp
f
271.89 7.6875 mo
271.89 7.3125 271.702 6.9375 271.452 6.625 cv
271.14 6.375 270.765 6.1875 270.39 6.1875 cv
270.015 6.1875 269.64 6.375 269.327 6.625 cv
269.077 6.9375 268.89 7.3125 268.89 7.6875 cv
268.89 8.0625 269.077 8.4375 269.327 8.75 cv
269.64 9 270.015 9.1875 270.39 9.1875 cv
270.765 9.1875 271.14 9 271.452 8.75 cv
271.702 8.4375 271.89 8.0625 271.89 7.6875 cv
271.89 7.6875 li
cp
f
273.202 8.625 mo
273.202 8.25 273.015 7.875 272.765 7.5625 cv
272.452 7.3125 272.077 7.125 271.702 7.125 cv
271.327 7.125 270.952 7.3125 270.64 7.5625 cv
270.39 7.875 270.202 8.25 270.202 8.625 cv
270.202 9 270.39 9.375 270.64 9.6875 cv
270.952 9.9375 271.327 10.125 271.702 10.125 cv
272.077 10.125 272.452 9.9375 272.765 9.6875 cv
273.015 9.375 273.202 9 273.202 8.625 cv
273.202 8.625 li
cp
f
274.515 6.5625 mo
274.515 6.1875 274.327 5.8125 274.077 5.5 cv
273.765 5.25 273.39 5.0625 273.015 5.0625 cv
272.64 5.0625 272.265 5.25 271.952 5.5 cv
271.702 5.8125 271.515 6.1875 271.515 6.5625 cv
271.515 6.9375 271.702 7.3125 271.952 7.625 cv
272.265 7.875 272.64 8.0625 273.015 8.0625 cv
273.39 8.0625 273.765 7.875 274.077 7.625 cv
274.327 7.3125 274.515 6.9375 274.515 6.5625 cv
274.515 6.5625 li
cp
f
275.89 7.0625 mo
275.89 6.6875 275.702 6.3125 275.452 6 cv
275.14 5.75 274.765 5.5625 274.39 5.5625 cv
274.015 5.5625 273.64 5.75 273.327 6 cv
273.077 6.3125 272.89 6.6875 272.89 7.0625 cv
272.89 7.4375 273.077 7.8125 273.327 8.125 cv
273.64 8.375 274.015 8.5625 274.39 8.5625 cv
274.765 8.5625 275.14 8.375 275.452 8.125 cv
275.702 7.8125 275.89 7.4375 275.89 7.0625 cv
275.89 7.0625 li
cp
f
277.202 5.5625 mo
277.202 5.1875 277.015 4.8125 276.765 4.5 cv
276.452 4.25 276.077 4.0625 275.702 4.0625 cv
275.327 4.0625 274.952 4.25 274.64 4.5 cv
274.39 4.8125 274.202 5.1875 274.202 5.5625 cv
274.202 5.9375 274.39 6.3125 274.64 6.625 cv
274.952 6.875 275.327 7.0625 275.702 7.0625 cv
276.077 7.0625 276.452 6.875 276.765 6.625 cv
277.015 6.3125 277.202 5.9375 277.202 5.5625 cv
277.202 5.5625 li
cp
f
278.515 5.5625 mo
278.515 5.1875 278.327 4.8125 278.077 4.5 cv
277.765 4.25 277.39 4.0625 277.015 4.0625 cv
276.64 4.0625 276.265 4.25 275.952 4.5 cv
275.702 4.8125 275.515 5.1875 275.515 5.5625 cv
275.515 5.9375 275.702 6.3125 275.952 6.625 cv
276.265 6.875 276.64 7.0625 277.015 7.0625 cv
277.39 7.0625 277.765 6.875 278.077 6.625 cv
278.327 6.3125 278.515 5.9375 278.515 5.5625 cv
278.515 5.5625 li
cp
f
279.89 7.125 mo
279.89 6.75 279.702 6.375 279.452 6.0625 cv
279.14 5.8125 278.765 5.625 278.39 5.625 cv
278.015 5.625 277.64 5.8125 277.327 6.0625 cv
277.077 6.375 276.89 6.75 276.89 7.125 cv
276.89 7.5 277.077 7.875 277.327 8.1875 cv
277.64 8.4375 278.015 8.625 278.39 8.625 cv
278.765 8.625 279.14 8.4375 279.452 8.1875 cv
279.702 7.875 279.89 7.5 279.89 7.125 cv
279.89 7.125 li
cp
f
281.202 7.375 mo
281.202 7 281.015 6.625 280.765 6.3125 cv
280.452 6.0625 280.077 5.875 279.702 5.875 cv
279.327 5.875 278.952 6.0625 278.64 6.3125 cv
278.39 6.625 278.202 7 278.202 7.375 cv
278.202 7.75 278.39 8.125 278.64 8.4375 cv
278.952 8.6875 279.327 8.875 279.702 8.875 cv
280.077 8.875 280.452 8.6875 280.765 8.4375 cv
281.015 8.125 281.202 7.75 281.202 7.375 cv
281.202 7.375 li
cp
f
282.515 3.5 mo
282.515 3.125 282.327 2.75 282.077 2.4375 cv
281.765 2.1875 281.39 2 281.015 2 cv
280.64 2 280.265 2.1875 279.952 2.4375 cv
279.702 2.75 279.515 3.125 279.515 3.5 cv
279.515 3.875 279.702 4.25 279.952 4.5625 cv
280.265 4.8125 280.64 5 281.015 5 cv
281.39 5 281.765 4.8125 282.077 4.5625 cv
282.327 4.25 282.515 3.875 282.515 3.5 cv
282.515 3.5 li
cp
f
283.89 7.375 mo
283.89 7 283.702 6.625 283.452 6.3125 cv
283.14 6.0625 282.765 5.875 282.39 5.875 cv
282.015 5.875 281.64 6.0625 281.327 6.3125 cv
281.077 6.625 280.89 7 280.89 7.375 cv
280.89 7.75 281.077 8.125 281.327 8.4375 cv
281.64 8.6875 282.015 8.875 282.39 8.875 cv
282.765 8.875 283.14 8.6875 283.452 8.4375 cv
283.702 8.125 283.89 7.75 283.89 7.375 cv
283.89 7.375 li
cp
f
285.202 7.375 mo
285.202 7 285.015 6.625 284.765 6.3125 cv
284.452 6.0625 284.077 5.875 283.702 5.875 cv
283.327 5.875 282.952 6.0625 282.64 6.3125 cv
282.39 6.625 282.202 7 282.202 7.375 cv
282.202 7.75 282.39 8.125 282.64 8.4375 cv
282.952 8.6875 283.327 8.875 283.702 8.875 cv
284.077 8.875 284.452 8.6875 284.765 8.4375 cv
285.015 8.125 285.202 7.75 285.202 7.375 cv
285.202 7.375 li
cp
f
286.515 4.8125 mo
286.515 4.4375 286.327 4.0625 286.077 3.75 cv
285.765 3.5 285.39 3.3125 285.015 3.3125 cv
284.64 3.3125 284.265 3.5 283.952 3.75 cv
283.702 4.0625 283.515 4.4375 283.515 4.8125 cv
283.515 5.1875 283.702 5.5625 283.952 5.875 cv
284.265 6.125 284.64 6.3125 285.015 6.3125 cv
285.39 6.3125 285.765 6.125 286.077 5.875 cv
286.327 5.5625 286.515 5.1875 286.515 4.8125 cv
286.515 4.8125 li
cp
f
287.89 5.4375 mo
287.89 5.0625 287.702 4.6875 287.452 4.375 cv
287.14 4.125 286.765 3.9375 286.39 3.9375 cv
286.015 3.9375 285.64 4.125 285.327 4.375 cv
285.077 4.6875 284.89 5.0625 284.89 5.4375 cv
284.89 5.8125 285.077 6.1875 285.327 6.5 cv
285.64 6.75 286.015 6.9375 286.39 6.9375 cv
286.765 6.9375 287.14 6.75 287.452 6.5 cv
287.702 6.1875 287.89 5.8125 287.89 5.4375 cv
287.89 5.4375 li
cp
f
289.202 5.0625 mo
289.202 4.6875 289.015 4.3125 288.765 4 cv
288.452 3.75 288.077 3.5625 287.702 3.5625 cv
287.327 3.5625 286.952 3.75 286.64 4 cv
286.39 4.3125 286.202 4.6875 286.202 5.0625 cv
286.202 5.4375 286.39 5.8125 286.64 6.125 cv
286.952 6.375 287.327 6.5625 287.702 6.5625 cv
288.077 6.5625 288.452 6.375 288.765 6.125 cv
289.015 5.8125 289.202 5.4375 289.202 5.0625 cv
289.202 5.0625 li
cp
f
290.515 4.875 mo
290.515 4.5 290.327 4.125 290.077 3.8125 cv
289.765 3.5625 289.39 3.375 289.015 3.375 cv
288.64 3.375 288.265 3.5625 287.952 3.8125 cv
287.702 4.125 287.515 4.5 287.515 4.875 cv
287.515 5.25 287.702 5.625 287.952 5.9375 cv
288.265 6.1875 288.64 6.375 289.015 6.375 cv
289.39 6.375 289.765 6.1875 290.077 5.9375 cv
290.327 5.625 290.515 5.25 290.515 4.875 cv
290.515 4.875 li
cp
f
291.89 6.125 mo
291.89 5.75 291.702 5.375 291.452 5.0625 cv
291.14 4.8125 290.765 4.625 290.39 4.625 cv
290.015 4.625 289.64 4.8125 289.327 5.0625 cv
289.077 5.375 288.89 5.75 288.89 6.125 cv
288.89 6.5 289.077 6.875 289.327 7.1875 cv
289.64 7.4375 290.015 7.625 290.39 7.625 cv
290.765 7.625 291.14 7.4375 291.452 7.1875 cv
291.702 6.875 291.89 6.5 291.89 6.125 cv
291.89 6.125 li
cp
f
293.202 5.0625 mo
293.202 4.6875 293.015 4.3125 292.765 4 cv
292.452 3.75 292.077 3.5625 291.702 3.5625 cv
291.327 3.5625 290.952 3.75 290.64 4 cv
290.39 4.3125 290.202 4.6875 290.202 5.0625 cv
290.202 5.4375 290.39 5.8125 290.64 6.125 cv
290.952 6.375 291.327 6.5625 291.702 6.5625 cv
292.077 6.5625 292.452 6.375 292.765 6.125 cv
293.015 5.8125 293.202 5.4375 293.202 5.0625 cv
293.202 5.0625 li
cp
f
294.515 4.1875 mo
294.515 3.8125 294.327 3.4375 294.077 3.125 cv
293.765 2.875 293.39 2.6875 293.015 2.6875 cv
292.64 2.6875 292.265 2.875 291.952 3.125 cv
291.702 3.4375 291.515 3.8125 291.515 4.1875 cv
291.515 4.5625 291.702 4.9375 291.952 5.25 cv
292.265 5.5 292.64 5.6875 293.015 5.6875 cv
293.39 5.6875 293.765 5.5 294.077 5.25 cv
294.327 4.9375 294.515 4.5625 294.515 4.1875 cv
294.515 4.1875 li
cp
f
295.89 6.125 mo
295.89 5.75 295.702 5.375 295.452 5.0625 cv
295.14 4.8125 294.765 4.625 294.39 4.625 cv
294.015 4.625 293.64 4.8125 293.327 5.0625 cv
293.077 5.375 292.89 5.75 292.89 6.125 cv
292.89 6.5 293.077 6.875 293.327 7.1875 cv
293.64 7.4375 294.015 7.625 294.39 7.625 cv
294.765 7.625 295.14 7.4375 295.452 7.1875 cv
295.702 6.875 295.89 6.5 295.89 6.125 cv
295.89 6.125 li
cp
f
297.202 7.5 mo
297.202 7.125 297.015 6.75 296.765 6.4375 cv
296.452 6.1875 296.077 6 295.702 6 cv
295.327 6 294.952 6.1875 294.64 6.4375 cv
294.39 6.75 294.202 7.125 294.202 7.5 cv
294.202 7.875 294.39 8.25 294.64 8.5625 cv
294.952 8.8125 295.327 9 295.702 9 cv
296.077 9 296.452 8.8125 296.765 8.5625 cv
297.015 8.25 297.202 7.875 297.202 7.5 cv
297.202 7.5 li
cp
f
298.515 7.125 mo
298.515 6.75 298.327 6.375 298.077 6.0625 cv
297.765 5.8125 297.39 5.625 297.015 5.625 cv
296.64 5.625 296.265 5.8125 295.952 6.0625 cv
295.702 6.375 295.515 6.75 295.515 7.125 cv
295.515 7.5 295.702 7.875 295.952 8.1875 cv
296.265 8.4375 296.64 8.625 297.015 8.625 cv
297.39 8.625 297.765 8.4375 298.077 8.1875 cv
298.327 7.875 298.515 7.5 298.515 7.125 cv
298.515 7.125 li
cp
f
299.89 6.125 mo
299.89 5.75 299.702 5.375 299.452 5.0625 cv
299.14 4.8125 298.765 4.625 298.39 4.625 cv
298.015 4.625 297.64 4.8125 297.327 5.0625 cv
297.077 5.375 296.89 5.75 296.89 6.125 cv
296.89 6.5 297.077 6.875 297.327 7.1875 cv
297.64 7.4375 298.015 7.625 298.39 7.625 cv
298.765 7.625 299.14 7.4375 299.452 7.1875 cv
299.702 6.875 299.89 6.5 299.89 6.125 cv
299.89 6.125 li
cp
f
301.202 7.5 mo
301.202 7.125 301.015 6.75 300.765 6.4375 cv
300.452 6.1875 300.077 6 299.702 6 cv
299.327 6 298.952 6.1875 298.64 6.4375 cv
298.39 6.75 298.202 7.125 298.202 7.5 cv
298.202 7.875 298.39 8.25 298.64 8.5625 cv
298.952 8.8125 299.327 9 299.702 9 cv
300.077 9 300.452 8.8125 300.765 8.5625 cv
301.015 8.25 301.202 7.875 301.202 7.5 cv
301.202 7.5 li
cp
f
302.515 6.125 mo
302.515 5.75 302.327 5.375 302.077 5.0625 cv
301.765 4.8125 301.39 4.625 301.015 4.625 cv
300.64 4.625 300.265 4.8125 299.952 5.0625 cv
299.702 5.375 299.515 5.75 299.515 6.125 cv
299.515 6.5 299.702 6.875 299.952 7.1875 cv
300.265 7.4375 300.64 7.625 301.015 7.625 cv
301.39 7.625 301.765 7.4375 302.077 7.1875 cv
302.327 6.875 302.515 6.5 302.515 6.125 cv
302.515 6.125 li
cp
f
303.89 6.625 mo
303.89 6.25 303.702 5.875 303.452 5.5625 cv
303.14 5.3125 302.765 5.125 302.39 5.125 cv
302.015 5.125 301.64 5.3125 301.327 5.5625 cv
301.077 5.875 300.89 6.25 300.89 6.625 cv
300.89 7 301.077 7.375 301.327 7.6875 cv
301.64 7.9375 302.015 8.125 302.39 8.125 cv
302.765 8.125 303.14 7.9375 303.452 7.6875 cv
303.702 7.375 303.89 7 303.89 6.625 cv
303.89 6.625 li
cp
f
2 lw
2 lc
0 lj
3.239 ml
[] 0 dsh
true sadj
201.015 55.9375 mo
201.015 55.875 li
201.015 55.8125 li
201.077 55.6875 li
201.14 55.5 li
201.327 55.0625 li
201.64 54.1875 li
202.327 52.5 li
203.702 49.0625 li
205.077 46.0625 li
206.327 43.375 li
207.765 40.625 li
209.077 38.25 li
210.515 35.9375 li
211.89 33.75 li
213.202 31.9375 li
214.64 30.0625 li
215.952 28.5 li
217.265 27 li
218.64 25.5625 li
219.952 24.25 li
221.39 23 li
222.765 21.875 li
224.077 20.875 li
225.515 19.875 li
226.827 19 li
228.202 18.125 li
229.64 17.3125 li
230.952 16.625 li
232.327 16 li
233.702 15.375 li
234.952 14.8125 li
236.39 14.3125 li
237.702 13.8125 li
239.14 13.375 li
240.515 12.9375 li
241.827 12.5625 li
243.265 12.1875 li
244.577 11.875 li
245.827 11.625 li
247.265 11.3125 li
248.577 11.0625 li
250.015 10.8125 li
251.327 10.5625 li
252.64 10.375 li
254.015 10.1875 li
255.327 10 li
256.765 9.875 li
258.14 9.6875 li
259.452 9.5625 li
260.89 9.4375 li
262.202 9.3125 li
263.515 9.1875 li
264.89 9.0625 li
266.202 9 li
267.64 8.875 li
267.64 8.875 li
267.64 8.875 li
267.64 8.875 li
267.64 8.875 li
267.64 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
267.702 8.875 li
0 0.992157 1 0 cmyk
@
0.1875 lw
303.89 0.125 mo
303.89 171 li
43.3896 0.125 mo
303.89 0.125 li
43.3896 171 mo
43.3896 0.125 li
303.89 171 mo
43.3896 171 li
0 0 0 1 cmyk
@
0 lc
93.2646 171 mo
93.2646 167.75 li
79.9521 171 mo
79.9521 169.063 li
66.5771 171 mo
66.5771 169.063 li
53.2646 171 mo
53.2646 169.063 li
@
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 52 /four putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBSP+Times-Roman /Times-Roman findfont ct_VMDictPut/ZWYBSP+Times-Roman*1 [48{/.notdef}rp /zero 3{/.notdef}rp /four 203{/.notdef}rp]ZWYBSP+Times-Roman nfZWYBSP+Times-Roman*1 [9 0 0 -9 0 0 ]msf89.1396 182 mo(40)[4.5 0 ]xsh159.952 171 mo
159.952 167.75 li
146.64 171 mo
146.64 169.063 li
133.265 171 mo
133.265 169.063 li
119.952 171 mo
119.952 169.063 li
106.577 171 mo
106.577 169.063 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSP+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7A73D986C0D7DE9D329253DCB6E971CF9F86B9AEBF9128F879E3BA076A7524F8AC6EF0948A0BD36A1BBAD3176809EA5D8C10BC04F27D1FCF8D9BA3577509C082FF1EE49DF22B08F8B21F3A6C3932A3BC82C6C594431B4032E2BEF80E15787B3E427A047FD8FD191291F42BAC74588B21DCB1EB3232C29BA67B72B9A00CCBC571F0227C6EF50964CF91F1B0EC573A04AE3E4DF9447B77BD2A0A959F534BEC79AECEF51C27F8D677FD06B99742B747A695088E88EBCC4A6BCCC7402ABFDFE9926161D96> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSP+Times-Roman /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/ZWYBSP+Times-Roman*1 [48{/.notdef}rp /zero 3{/.notdef}rp /four /five 202{/.notdef}rp]ZWYBSP+Times-Roman nfZWYBSP+Times-Roman*1 [9 0 0 -9 0 0 ]msf155.835 182 mo(45)[4.5 0 ]xsh226.64 171 mo
226.64 167.75 li
213.327 171 mo
213.327 169.063 li
199.952 171 mo
199.952 169.063 li
186.64 171 mo
186.64 169.063 li
173.327 171 mo
173.327 169.063 li
@
ZWYBSP+Times-Roman*1 [9 0 0 -9 0 0 ]msf222.538 182 mo(50)[4.5 0 ]xsh293.39 171 mo
293.39 167.75 li
280.015 171 mo
280.015 169.063 li
266.702 171 mo
266.702 169.063 li
253.327 171 mo
253.327 169.063 li
240.015 171 mo
240.015 169.063 li
@
ZWYBSP+Times-Roman*1 [9 0 0 -9 0 0 ]msf289.233 182 mo(55)[4.5 0 ]xsh43.3896 169.625 mo
46.6396 169.625 li
304.015 171 mo
304.015 169.063 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSP+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSP+Times-Roman /Encoding getdup 46 /period putdup 49 /one putdup 50 /two putpop%ADOEndSubsetFont
/ZWYBSP+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five 202{/.notdef}rp]ZWYBSP+Times-Roman nfZWYBSP+Times-Roman*1 [9 0 0 -9 0 0 ]msf20.1396 172.648 mo(0.012)[4.5 2.25 4.5 4.5 0 ]xsh43.3896 148.063 mo
46.6396 148.063 li
43.3896 152.375 mo
45.3271 152.375 li
43.3896 156.688 mo
45.3271 156.688 li
43.3896 161 mo
45.3271 161 li
43.3896 165.313 mo
45.3271 165.313 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSP+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7A73D960D5C905E34DC81A096980F2B4111B9B099A6DB83E1916FF3E1A9E04B02D3E9232818F77B09A9AACB5832FED542FDDA70002EB05443C3A08AC9203ACF784CB865C5B9F7D872416879897E73175190413158DECCEEC3F81053539EF7A5BA54848FD5EF8191B77C87FC4B2FB70A247D6480306D63973D6D1E40988764838CF4D7C7CFD56B10F551336B687A8CAD70446C673C2BFDC7C6AD86547DB031DFD479DCB051DAF5177334E8CD4B35F8B65FC86BD3BDBBB8D1E2B3149970112D8374721C0AB537409EB4ADF5E62264D22634EE> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSP+Times-Roman /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/ZWYBSP+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five 202{/.notdef}rp]ZWYBSP+Times-Roman nfZWYBSP+Times-Roman*1 [9 0 0 -9 0 0 ]msf20.1396 151.078 mo(0.013)[4.5 2.25 4.5 4.5 0 ]xsh43.3896 126.5 mo
46.6396 126.5 li
43.3896 130.813 mo
45.3271 130.813 li
43.3896 135.125 mo
45.3271 135.125 li
43.3896 139.438 mo
45.3271 139.438 li
43.3896 143.75 mo
45.3271 143.75 li
@
ZWYBSP+Times-Roman*1 [9 0 0 -9 0 0 ]msf20.1396 129.523 mo(0.014)[4.5 2.25 4.5 4.5 0 ]xsh43.3896 104.938 mo
46.6396 104.938 li
43.3896 109.25 mo
45.3271 109.25 li
43.3896 113.563 mo
45.3271 113.563 li
43.3896 117.875 mo
45.3271 117.875 li
43.3896 122.188 mo
45.3271 122.188 li
@
ZWYBSP+Times-Roman*1 [9 0 0 -9 0 0 ]msf20.1396 107.961 mo(0.015)[4.5 2.25 4.5 4.5 0 ]xsh43.3896 83.375 mo
46.6396 83.375 li
43.3896 87.6875 mo
45.3271 87.6875 li
43.3896 92 mo
45.3271 92 li
43.3896 96.3125 mo
45.3271 96.3125 li
43.3896 100.625 mo
45.3271 100.625 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSP+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7A73DB6D2877672A15D933475028E1A563F35D9B429BC044364BBEA6C8D8E288B5629F6BF21219495DF799C22E6D194E7EF19D2BF50638A5DFD525E61CAA756DFB58BC6CF02B70355716B1567E587BDF24EE1CD60FDA306A5E8E3EC9A065FDF865555F45DE4B3A9666958B7C5B64C412BD6705A27F81BA359AA5385B74802E199214ED2C08D85C8D9515B8A71A37E696B11B788D46272326187B79B809C5ABF82FEBD4C4DE257125A17BA43> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSP+Times-Roman /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/ZWYBSP+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six 201{/.notdef}rp]ZWYBSP+Times-Roman nfZWYBSP+Times-Roman*1 [9 0 0 -9 0 0 ]msf20.1396 86.3906 mo(0.016)[4.5 2.25 4.5 4.5 0 ]xsh43.3896 61.8125 mo
46.6396 61.8125 li
43.3896 66.125 mo
45.3271 66.125 li
43.3896 70.4375 mo
45.3271 70.4375 li
43.3896 74.75 mo
45.3271 74.75 li
43.3896 79.0625 mo
45.3271 79.0625 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSP+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B7A73D94A9F40BC631635D93782351ED8A5F0B041154B50ADFD67B52AFA0970AEE10CFF4587FA64B7C1AB4D8B074E00A1BB2BDDE2ECD9CC66A> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSP+Times-Roman /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/ZWYBSP+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven 200{/.notdef}rp]ZWYBSP+Times-Roman nfZWYBSP+Times-Roman*1 [9 0 0 -9 0 0 ]msf20.1396 64.8281 mo(0.017)[4.5 2.25 4.5 4.5 0 ]xsh43.3896 40.25 mo
46.6396 40.25 li
43.3896 44.5625 mo
45.3271 44.5625 li
43.3896 48.875 mo
45.3271 48.875 li
43.3896 53.1875 mo
45.3271 53.1875 li
43.3896 57.5 mo
45.3271 57.5 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSP+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7A73DB9AA6386F0D433AA59FB601CE68D9D6220D80F865EFA1568339E25269162989F3B16CF5E1B85465E9B09AD3E1F38EB0BC3CC5B97FD7D595D378E5AF532DAC1C0173C6C74DAC1A5EFEB2094038777E094111D458CECDBEE2BFAFA1B194747D5AC182EDAECA7759C2CF7DA7B573AFBC7EB901C25328CA8529A5AF9870597DA9D6CE71ED45E3423137009ACC2E00FA606E5775C8BEB1D188095A69B5C3B51980741130E91409210303836D6B9BCD44F7FE0CC1ED555E839C2D5D70041FF279A3E977285D9F41DC64AB105D99B2CC098F9CEE3C23260EF9612DAD441A57B770C0516F587622E5D85261682E95C452BF079> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSP+Times-Roman /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/ZWYBSP+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /eight 199{/.notdef}rp]ZWYBSP+Times-Roman nfZWYBSP+Times-Roman*1 [9 0 0 -9 0 0 ]msf20.1396 43.2656 mo(0.018)[4.5 2.25 4.5 4.5 0 ]xsh43.3896 18.6875 mo
46.6396 18.6875 li
43.3896 23 mo
45.3271 23 li
43.3896 27.3125 mo
45.3271 27.3125 li
43.3896 31.625 mo
45.3271 31.625 li
43.3896 35.9375 mo
45.3271 35.9375 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSP+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B7A73DB9A896D23FCC66190904632D73F98CB9610A16993F6B122D7E1E78C0FD3CFB4BA7B04573F85C6AAF2DBC5FF0782821FB24CB9148C8554B2F1030920B61B0FCD80181994622E333F98E453CE9ADDE1282743A6D28C02F5A1E762172EE000BA8345C747F4D035036F2F72356957E99A085687800E644D881E70A8EFBE3A3E6E4B170FA116E5327D2CD42DA986FA6C800B44A5CE5DF369C3295EA45945F8EE425ED3E5B812A8DD33EE2E3340844A5314FF5267F47524653D6A9344C2AEC57094DFAB247907C47ADE2EB> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSP+Times-Roman /Encoding getdup 57 /nine putpop%ADOEndSubsetFont
/ZWYBSP+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine 198{/.notdef}rp]ZWYBSP+Times-Roman nfZWYBSP+Times-Roman*1 [9 0 0 -9 0 0 ]msf20.1396 21.7031 mo(0.019)[4.5 2.25 4.5 4.5 0 ]xsh303.89 1.4375 mo
301.952 1.4375 li
303.89 5.75 mo
301.952 5.75 li
303.89 10.0625 mo
301.952 10.0625 li
303.89 14.375 mo
301.952 14.375 li
303.89 18.6875 mo
300.64 18.6875 li
303.89 23 mo
301.952 23 li
303.89 27.3125 mo
301.952 27.3125 li
303.89 31.625 mo
301.952 31.625 li
303.89 35.9375 mo
301.952 35.9375 li
303.89 40.25 mo
300.64 40.25 li
303.89 44.5625 mo
301.952 44.5625 li
303.89 48.875 mo
301.952 48.875 li
303.89 53.1875 mo
301.952 53.1875 li
303.89 57.5 mo
301.952 57.5 li
303.89 61.8125 mo
300.64 61.8125 li
303.89 66.125 mo
301.952 66.125 li
303.89 70.4375 mo
301.952 70.4375 li
303.89 74.75 mo
301.952 74.75 li
303.89 79.0625 mo
301.952 79.0625 li
303.89 83.375 mo
300.64 83.375 li
303.89 87.6875 mo
301.952 87.6875 li
303.89 92 mo
301.952 92 li
303.89 96.3125 mo
301.952 96.3125 li
303.89 100.625 mo
301.952 100.625 li
303.89 104.938 mo
300.64 104.938 li
303.89 109.25 mo
301.952 109.25 li
303.89 113.563 mo
301.952 113.563 li
303.89 117.875 mo
301.952 117.875 li
303.89 122.188 mo
301.952 122.188 li
303.89 126.5 mo
300.64 126.5 li
303.89 130.813 mo
301.952 130.813 li
303.89 135.125 mo
301.952 135.125 li
303.89 139.438 mo
301.952 139.438 li
303.89 143.75 mo
301.952 143.75 li
303.89 148.063 mo
300.64 148.063 li
303.89 152.375 mo
301.952 152.375 li
303.89 156.688 mo
301.952 156.688 li
303.89 161 mo
301.952 161 li
303.89 165.313 mo
301.952 165.313 li
303.89 169.625 mo
300.64 169.625 li
304.015 0.125 mo
304.015 2.0625 li
293.39 0.125 mo
293.39 3.375 li
280.015 0.125 mo
280.015 2.0625 li
266.702 0.125 mo
266.702 2.0625 li
253.327 0.125 mo
253.327 2.0625 li
240.015 0.125 mo
240.015 2.0625 li
226.64 0.125 mo
226.64 3.375 li
213.327 0.125 mo
213.327 2.0625 li
199.952 0.125 mo
199.952 2.0625 li
186.64 0.125 mo
186.64 2.0625 li
173.327 0.125 mo
173.327 2.0625 li
159.952 0.125 mo
159.952 3.375 li
146.64 0.125 mo
146.64 2.0625 li
133.265 0.125 mo
133.265 2.0625 li
119.952 0.125 mo
119.952 2.0625 li
106.577 0.125 mo
106.577 2.0625 li
93.2646 0.125 mo
93.2646 3.375 li
79.9521 0.125 mo
79.9521 2.0625 li
66.5771 0.125 mo
66.5771 2.0625 li
53.2646 0.125 mo
53.2646 2.0625 li
43.3896 1.4375 mo
45.3271 1.4375 li
43.3896 5.75 mo
45.3271 5.75 li
43.3896 10.0625 mo
45.3271 10.0625 li
43.3896 14.375 mo
45.3271 14.375 li
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TimesNewRomanPSMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 70 /F putdup 84 /T putdup 97 /a putdup 98 /b putdup 99 /c putdup 101 /e putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 117 /u putdef/FontBBox {-568 -307 2000 1007} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings18 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB222483BD74F8B> |-/space <1C60D8A8C9B8707C25> |-/parenleft <1C60D8A8C9B81F2C3AC09B674C4ECE2BEF4D70AD3508D915EA9AE12419376F6EEF231ECE8179CA4531F29291ACACE060AEF98AD6F2FFF2BEA533946FFA1C8BC3953D72A31BB8ABD9782D71B2146F964D99646263E2D414F84FA049D36B9B13B7F6C8AA7A4A5EB0> |-/parenright <1C60D8A8C9B81F2C3CA029BC286E27661FD7F18B990CFF4A0AF58404A2F35E11D14FBA406192D392AD203A879E34B8FA3132863211808E5BD63BDAA607B8E04E23E92C61AAA8B57E5E7609689020D20EB927A1EC6CC0BC06B540A016D558248DC4A3E8183F5F> |-/F <1C60D8A8C9B7EF322BE6235043C5A7A6ECCDDDC390BE41D3E01CEDAA91CB335118BB7C10CD87A1A789356A0826D033ECDD0352DC64AE55B383C11F3EB18A6F42CD78A260CB051779A3B4D92350DD65D27B671C1609DC36FBFF44C40F44FB014C0462CFF40EA9650CDFB895B99B69FA8BD3EB8152DF452581818551FCC7745E9E79F62FD5E1668E4EFD8B2F33AB5D5ED30AB06AFD78EF98B1A68AA26FC8B4D7DDC1356637FA048F199EDF19A428> |-/T <1C60D8A8C9B7D8BE514ED6977CE9F9E5860FEBB6D8EBF5879FDED6C1E48F6AFEEE7B65DB6C9D492058CAA103CB13A7A80B0015E85F272BB9775991CD97556EC3CFB46A4E1606F006216EABEB711074247C72C159202F32CC7F5F403FAE58110685510DDB32C57700D5067C975D7063A496FE85C1E5> |-/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272EF1EF1464C3F0D45D7CBB8749AF571E09> |-/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9AF110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D399924398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D6603C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83F23AED1F56FC130F21> |-/c <1C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438ECC54400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F42A6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F9C2999730E7919239B324086FEA852156F456647AA0692084759C352D6998971799F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |-/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984A59E1CFFFD06EA629758085868D3F5F7204292> |-/i <1C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE365B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A640085090E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCBCB8CA3E9F85837FAC6> |-/l <1C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C4304B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B6828D244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE5527D6441CE02F5A28D63A618F> |-/m <1C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE11167932D24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA1816E9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747A2556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68FD574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F249107C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D18CE6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE955617323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D987ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FAFEC679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE82B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B517996> |-/n <1C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7BC81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD9D4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494DF60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B280026130687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F2E277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6A0027198438FE663C2EACF82CEB86F7C727594> |-/o <1C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD4416250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF996A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA436702294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68D9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |-/r <1C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2CE6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E983E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B53A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA455AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D8C360275B503E4954E912CD342> |-/s <1C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC22ACE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A039A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF40BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359FAAB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C593B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF509B93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |-/u <1C60D8A8C9B7A73DB9860E0681DA8AEA1E5FBC1C72A452614FEB33CC58A199CCF544A550BDEE35652D618DE4A02AA9CF0753ADA232102DC8DC25CB958152D1B74BC447B68C074C25C2126470565A20B42A419CDD0C7A1DA63C6A764D555B867A9BE961ADBD0AF5B2007F47FCC9435F8B51D3F3A5D83941DD57A0C4D32E169A6BACC26F8AD3C9372F1114911D1D3F3FB2725FADBF9F529AA2CFB178B79F97520325221F3417C7781EB09765> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBSQ+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut/ZWYBSQ+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 28{/.notdef}rp /F 13{/.notdef}rp /T 12{/.notdef}rp /a /b /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /.notdef /u 138{/.notdef}rp]ZWYBSQ+TimesNewRomanPSMT nfZWYBSQ+TimesNewRomanPSMT*1 [5.38759e-10 -12 -12 -5.38759e-10 0 0 ]msf9.97266 131.5 mo(Fluorescence \(arb\))[-6.67383 -3.33398 -6 -6 -3.99609 -5.32617 -4.66992 -5.32617 -5.32617 -6 -5.32617 -5.32617 -3 -3.99609 -5.32617 -3.99609 -6 0 ]yshZWYBSQ+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf152.807 205.167 mo(Time \(ms\))[6.9082 3.33398 9.33398 5.32617 3 3.99609 9.33398 4.66992 0 ]xsh1 lw
4 ml
[1 1 ] 0 dsh
93.1396 170.666 mo
93.1396 0.666504 li
0 0 0 1 cmyk
@
200.14 170.666 mo
200.14 0.666504 li
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSQ+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/t <1C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED29448713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC43DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E798B36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |-/increment <1C60D8A8C9B7D7E8D377148A2E02501DFB017040347B4419EC7866C4A0AE1CD26995325B7D5F> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSQ+TimesNewRomanPSMT /Encoding getdup 116 /t putdup 198 /increment putpop%ADOEndSubsetFont
/ZWYBSQ+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 28{/.notdef}rp /F 13{/.notdef}rp /T 12{/.notdef}rp /a /b /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 80{/.notdef}rp /increment 57{/.notdef}rp]ZWYBSQ+TimesNewRomanPSMT nfZWYBSQ+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf131.306 132.917 mo(\306t)[7.3418 0 ]xsh%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSQ+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/h <1C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435E027FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194A0134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2D9C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B585E2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED8E36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15E97FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C4483796F735A795EACD82F245D81FB43B5> |-/p <1C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD40EB48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A09244048D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBAC666023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F75904A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B8431B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C076E94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02DF1C7730E7CC0F462D79552DFA> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSQ+TimesNewRomanPSMT /Encoding getdup 104 /h putdup 112 /p putpop%ADOEndSubsetFont
/ZWYBSQ+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 28{/.notdef}rp /F 13{/.notdef}rp /T 12{/.notdef}rp /a /b /c /.notdef /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 80{/.notdef}rp /increment 57{/.notdef}rp]ZWYBSQ+TimesNewRomanPSMT nfZWYBSQ+TimesNewRomanPSMT*1 [8 0 0 -8 0 0 ]msf143.306 135.583 mo(chop)[3.55078 4 4 0 ]xsh3.239 ml
[] 0 dsh
197.14 141.25 mo
96.1396 141.25 li
0 0 0 1 cmyk
@
100.048 137.648 mo
96.5127 141.184 li
@
96.1943 140.865 mo
100.048 144.719 li
@
193.444 137.648 mo
196.979 141.184 li
@
197.298 140.865 mo
193.444 144.719 li
@
[1 1 ] 0 dsh
92.8271 7.6875 mo
92.8271 7.75 li
92.8271 7.8125 li
92.8896 7.9375 li
92.9521 8.125 li
93.1396 8.5625 li
93.4521 9.4375 li
94.1396 11.125 li
95.5146 14.5625 li
96.8896 17.5625 li
98.1396 20.25 li
99.5771 23 li
100.89 25.375 li
102.327 27.6875 li
103.702 29.875 li
105.015 31.6875 li
106.452 33.5625 li
107.765 35.125 li
109.077 36.625 li
110.452 38.0625 li
111.765 39.375 li
113.202 40.625 li
114.577 41.75 li
115.89 42.75 li
117.327 43.75 li
118.64 44.625 li
120.015 45.5 li
121.452 46.3125 li
122.765 47 li
124.14 47.625 li
125.515 48.25 li
126.765 48.8125 li
128.202 49.3125 li
129.515 49.8125 li
130.952 50.25 li
132.327 50.6875 li
133.64 51.0625 li
135.077 51.4375 li
136.39 51.75 li
137.64 52 li
139.077 52.3125 li
140.39 52.5625 li
141.827 52.8125 li
143.14 53.0625 li
144.452 53.25 li
145.827 53.4375 li
147.14 53.625 li
148.577 53.75 li
149.952 53.9375 li
151.265 54.0625 li
152.702 54.1875 li
154.015 54.3125 li
155.327 54.4375 li
156.702 54.5625 li
158.015 54.625 li
159.452 54.75 li
159.452 54.75 li
159.452 54.75 li
159.452 54.75 li
159.452 54.75 li
159.452 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
159.515 54.75 li
0.827451 0.0666667 1 0.00784314 cmyk
@
180.64 55.625 mo
199.265 55.5 li
@
159.452 54.75 mo
179.89 55.625 li
@
0.74902 0.678431 0.670588 0.901961 cmyk
ZWYBSQ+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf113.14 60 mo(T)shZWYBSQ+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf241.14 33.5 mo(T)sh%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSQ+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/g <1C60D8A8C9B7A73DAC44F2C448ECAF253E44055AA4AFC4D4E618BBF7F60847F4AD57852D125F52503D138EEBB5C35DB7E6FF089D85EF3D59177D6853B7FF4DCA48A2C6450DAF6AE7485D918680B6246955433B7E96C0D52B86F6985D93AEA8FD99F7CE5A6EDF9F82F3DCD54C24AC7F5725E8D752728B16161496E9D02EA707BCC03E7CE1BDA2E3632B4A11707F59DF2FD8556EC51A6594DBA10EC63EB7A8585255CC0C8C8B32CD6316A41829AE725CE606F4A4FD4DA668556D79F4AC25BF9E697A5DB9F54B573E1EAA6D791100EAD10708C7E706E8CBDD596589510D4EA45E3CA12E8144CF2A4E025D5293F77BF25BA77276DF7C97999133B17612ABFFD70E77479B9C8ABBB3A51D3A6F6F66CA99610B1A23618D13E1A07B26D29ACFC8191E5B2829F3C990A5C474E53FC8B282F11A7FFA86D56BD2349AEC811B22D3002781921B9EDDEAA1B62C5F206266BA751F865F9A5F5AF517BC35F6F732012015D0BB42652388A219FCF002C2C0335D2D190C0C425C4FA28367480051E56A90DD46F1C707> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSQ+TimesNewRomanPSMT /Encoding getdup 103 /g putpop%ADOEndSubsetFont
/ZWYBSQ+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 28{/.notdef}rp /F 13{/.notdef}rp /T 12{/.notdef}rp /a /b /c /.notdef /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 80{/.notdef}rp /increment 57{/.notdef}rp]ZWYBSQ+TimesNewRomanPSMT nfZWYBSQ+TimesNewRomanPSMT*1 [8 0 0 -8 0 0 ]msf248.64 35 mo(pumping)[4 4 6.22266 4 2.22266 4 0 ]xsh%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSQ+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F589D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C02720FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF41DB28C0847307B8DCBC66> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSQ+TimesNewRomanPSMT /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/ZWYBSQ+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 20{/.notdef}rp /F 13{/.notdef}rp /T 12{/.notdef}rp /a /b /c /.notdef /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 80{/.notdef}rp /increment 57{/.notdef}rp]ZWYBSQ+TimesNewRomanPSMT nfZWYBSQ+TimesNewRomanPSMT*1 [8 0 0 -8 0 0 ]msf120.14 62 mo(1)sh231.704 132.891 mo
231.704 132.422 231.47 131.953 231.157 131.563 cv
230.767 131.25 230.298 131.016 229.829 131.016 cv
229.36 131.016 228.892 131.25 228.501 131.563 cv
228.188 131.953 227.954 132.422 227.954 132.891 cv
227.954 133.359 228.188 133.828 228.501 134.219 cv
228.892 134.531 229.36 134.766 229.829 134.766 cv
230.298 134.766 230.767 134.531 231.157 134.219 cv
231.47 133.828 231.704 133.359 231.704 132.891 cv
231.704 132.891 li
cp
0.882353 0.768627 0 0 cmyk
f
4 ml
[] 0 dsh
226.704 143.334 mo
232.954 143.334 li
0.827451 0.0666667 1 0.00784314 cmyk
@
226.704 153.334 mo
232.954 153.334 li
0 0.992157 1 0 cmyk
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSQ+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6079F62679EB6BE171B70F78590F81AB62F69F1BD2EFC86EAE566847745E296D0CF61872DA4D8690C62AB23EE8E1DEB0EAD4BD93A2494CA759A81248BAF55E0D2E2E5FE71261287BF00F8CDF501793AB3272F80F7AE3E407CA730AC3648B3AC2D58C8D1FD60CD7DB1F886A79A4080D8870256B6E127906D500379950803F077453028FB6169> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSQ+TimesNewRomanPSMT /Encoding getdup 68 /D putpop%ADOEndSubsetFont
/ZWYBSQ+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 18{/.notdef}rp /D /.notdef /F 13{/.notdef}rp /T 12{/.notdef}rp /a /b /c /.notdef /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 80{/.notdef}rp /increment 57{/.notdef}rp]ZWYBSQ+TimesNewRomanPSMT nfZWYBSQ+TimesNewRomanPSMT*1 [7.5 0 0 -7.5 0 0 ]msf238.223 134.583 mo(Data)[5.41602 3.3291 2.08398 0 ]xsh%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSQ+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/H <1C60D8A8C9B6079F62C8472A58E49E4C65298F7DBB13584B0C608B103B8F2B0C72AF215D43C457FE4678B9114F992A1CA0DD95AD962EE67821EBE89C76AF7B7C203022FE3C67E29F7C9AA5921E4D15A2645D93C73845A47B6C4F855F057FBA3B47AC2707354E73F37A88912B11BC586C19F99285C7E09F7C6AE400A135AD2578B2C1702C267512A0254A355FAF242A3E032C2D5773AA8E4D90998616B06DE2126832E624AA95B6CEA6DE0CF980ABC5058497B243E4F1F614D2E3330AC509CE2BF6F280235C57C7347C7DBE389D9DA8C428E4F439ED717BD43889835C90DE66BDF27965E2CAF6D3F8A236> |-/d <1C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D203065B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD3329A86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB857EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5CCB01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD104E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A618879362783A36815EA1CE5876FAC4F83CDFE1BD4A> |-/y <1C60D8A8C9B7A73DDE03E4B644C159EB8B647E016C26B087177A3C5BC5BAF02161182070C8A4222C2E1ED9B95B756DF22232FA7BE5897B7C6D574795119A3B50894B8B0E1A184B7636697D129D88C76A3FD42BABE719D85F7DC372AB50B8B16D988DA863EE6A5B7454A406C9D5E815158A5786509E6DF27377A83F3454DD6905EA3123CBA5BA0D4772C12767864CF2C5FEDE2AFF05D3CC0534D74E6AE9DBF9F3B49677449A761BE771C9C1AB2D4DC994988233EE24B9E175796C6F13518A71BC990F312D4821883A95164BCE1683B85434AFA8> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSQ+TimesNewRomanPSMT /Encoding getdup 72 /H putdup 100 /d putdup 121 /y putpop%ADOEndSubsetFont
/ZWYBSQ+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 18{/.notdef}rp /D /.notdef /F /.notdef /H 11{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 3{/.notdef}rp /y 76{/.notdef}rp /increment 57{/.notdef}rp]ZWYBSQ+TimesNewRomanPSMT nfZWYBSQ+TimesNewRomanPSMT*1 [7.5 0 0 -7.5 0 0 ]msf237.599 145.209 mo(Hidden Decay )[5.41602 2.08398 3.75 3.75 3.3291 3.75 1.875 5.41602 3.3291 3.32813 3.3291 3.75 0 ]xsh%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSQ+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/P <1C60D8A8C9B7EF322B88F9F448EE5C6C6600BEF9C3C9A017B9BABF876458925BFD3DF1270B888D0A52682DD77562B0592DCEFA4305CC7C82B5C217C153D7D799EF75C3E1B47B2F2C3741BE023ABA656D3600645948113D9E1ACE5988E886C2CAB89042DA868AC9EEC60CE17BA00926C89C442DF26FC8F7E4DF94B56A18CFB31DE37DED0B361C6E9E1A158721E9F2BF357AD3A9D82EC3F61E7737142FF12086F5CF2AAB01A87FB3B34AEED6F7C6CCE06EC32D6DE2EC0B548299344251FBC628> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSQ+TimesNewRomanPSMT /Encoding getdup 80 /P putpop%ADOEndSubsetFont
/ZWYBSQ+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 18{/.notdef}rp /D /.notdef /F /.notdef /H 7{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 3{/.notdef}rp /y 76{/.notdef}rp /increment 57{/.notdef}rp]ZWYBSQ+TimesNewRomanPSMT nfZWYBSQ+TimesNewRomanPSMT*1 [7.5 0 0 -7.5 0 0 ]msf237.806 155.001 mo(Pumping Fit)[4.1709 3.75 5.83398 3.75 2.08398 3.75 3.75 1.875 4.1709 2.08398 0 ]xsh0.75 lw
291.765 161.25 mo
220.515 161.25 li
220.515 123.75 li
291.765 123.75 li
291.765 161.25 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/ZWYBSQ+TimesNewRomanPSMT*1 uf/ZWYBSQ+TimesNewRomanPSMT uf/TimesNewRomanPSMT uf/ZWYBSP+Times-Roman*1 uf/ZWYBSP+Times-Roman uf/Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (steven schowalter) ()%%Title: (raw_chop.eps)%%CreationDate: 5/12/09 11:12 AM%AI9_DataStream%Gb!R&pO;BgdjY.M!;?Ib8Eas`,S3$$]oZ!/&e\@rqq:<6j';K/8<thH2p-UDF2"a5!c6%0UM1XkB`.khE&Qp%#G8uohc[-2B"UGk%mS-5lYEY/3IXf%X,u9J2@d,-[LOq6(&XQ=..@*Q&e&j3&@=-Rl#LeV$YUrWtV.":%Sn,O25L"cR[/#QM1qa@/f,O_0>O46%5KkY.%iF%P#hK8Yc,^M?72[APTQs?9*s1rn3Y"ru'=0?22;6MKogqR#P9Y=B;4h3TnpR>*"-H<qd6$t3.]"QDBXP]2]=`9g+_JSNHp]#Dg%3f_2[^WGl\6+])Aa;8LmEp'Zf*`(][l4*d-QD[Xa0[q6HFea'43+ekHp%#@e4N!*@4./^],m"&('*s>?/Ahj`Uu2\E?-/_pa`Q=.%G)(^:+DLO=mZ2\=WJm`!cL\;o=3P4%-hCOkM2$gZ$%hB#-B_]&+k.EUW_JZS=',As(<oOb4.$L*?Y$qgh)9g`@6D6krXTooRch@U%SgS`cAj(Ee46Qae0q:#[[F8PSmbpG^moFd0J-(f3$/-aUE75eVb#<t%_qkekM-D-acodgTs2a5W;Hr;NHmB5?L3L/:!^bC]-4V9o%$@F&Z9aM]@R)JZqcrEDH8\hGWh15pkF]r\j:!Ej1XRgH+ZTH5X]h5ug`ncY5JLT!9-6KbXYr)&:6iW>kU;9U&nj)Fo_Pkn^<Y(Xk%dqdCIbni^P6*gr\'%:/D05+Da75WhQEc]r&D5L6ODdE@s>Pp8\]].>2,f++K$(mUoI$RCsXsCim,f*DNJu=c"SlVo]2L-g@KMoo;%>U>S1.[brfa^heOlc`n49I9jQ1?]8*c=ESI-3L+&(OSQK;@,s\9(6Gl"A_W9-r[7bdqUb.KX\!^G[@M8G=[cdIn>,\MrZ>"8Y8Y3%QbXu5Jhb(hP_(X;Ocj?2,5?gH0I$:FEDoDiG@=27$!/f)pk5(AS4LmY,5?h2_`-A)0gV93R\Y?["lk21-r[7b4ZYgSErohQ704e1%,]Aj.PMVM;PJ311U$$NXBF457V-n]?#rRh_,bl^4aGdqoP_/GQ)(&0'n&"kX'<Y_bAH(POoGm;7-^95Q_'bX>JgCQ&UjZp=iW/V@%iX_S9dQ[eU-q3&`iBg"/H4N.dr?CWlRd#3^'(c^W_!!1Y_W]op12?@o`Wr,4MVpFPO2-F]$_L6"7d';?bbha7+@fTXfM-@QiX3X_%kW-HnJd[eqkaW9qPMQnMPBI8fT]^Ddkh&G`TbM@7e5"jJccI9n3MB,uc",*+Ce,"8r($6XUNZ3ga%r[7UFZa"%JL0P;nU`O&)PlV%Lf1fBb7r+Q4@"rU,iNSL)RQ]T^U.9E06pJ-Gl.g(KI[DPT.#jMg,Jhca2ta_:&[9S7"X4A^<'_37BX%:ns<+8lZAT(SQ>^s"nG(Y%-@`uY\^nL:T>t:kP<7JWq5[K9[J!>oGkI-eF-o&a,kFX2knX"`itLILGbS@W`+l]A/u6T:!13U9<OL^ar4@W2V93`d1BXK<;sW=Q%s,iCInkH7R\Ml%_mgSH_p(lr$1/@IbR?++MR1tBC+]CY9PH'MZ<&Keg/,4d[<m+qY^KhU1:_)@"D50#tR<Z+^+^@;$`!J\#aTSUo%,:9FYC.9b37Jr!7L^CTSn\ZCBQdXKHHC-sodg;s)Pp('54n'57_L(K`1hCbKeLE\6*^Df,(]fl=,:K4o@2,\7,$mg&G!(3^"4Z"%%0j[GJ15.\3ct";f6$8obW@I0ZWi(q%0S/,[%i+XFRP>*k+:-M4>%2dfPZfJ,`DSFQ/na0?@nFli;?F_,,)-tQ)j_;)GCTc2do$4s%NQ-\@naI!/<[a9^j`EMS8/B0h6%V/EgC!k4!hRL`.\B[P(ABF]`cW"14>-6h=#pqs5bC/fe>X)-/Zp7n["iWF+f<EO$3*n70r=P=%_6#Ja0oS7X?qD8r0V'a=m>LTaUUGu*P7[9Q39h%$$$ofHP.AF`dn2u#LukJVac$;QZI5q.L9h_3)J2PjPudBf1J5ETKo@E\9,WE!%W16a,ofT)#V3].R,bTNI<D9>S8HTB?)bHkX;5#^"=&mZZA]>Fo',lb+&CW4Ej!XMuj"?6]TIkgcl8[Gjit^\CJiYf4g]e*5(h19)%?3:%XRP9+f!"nETU$FNJ+lkdIcXJ@I<mtLb^>U13_D!MhI7qt-@jo0a"RR*)'pD))0DPsGCJlg:*dj`ldqjF8.YM:5:;FVDfeB%o%X\'M-*GuBt322(J$.D[=/Ji'sU1$)s$$rcI"F:7seE.J*8Hm"'dcr8.1.@QVb#@!%#UYb(i;[&s;m]#ICQ]kfUi[K#/LDq(Kn!:p%.81$'ibPV?i-m,&XdFpBWX:TrLah`96`pFA!dKRj"-1AUgoC!p!dW2rV1-XN8ABic*]Je)JoQG_=L?.W-+$AlO4&Y1cj/\e6BOdn%LuN`G@#D,,39?$N!Wa*;C9Bg=j?KfX6>FQI;^&7SW"gd"`-GA:Y#9LKoc-1p\-'a@$7e82CM*U?L1D2oN@GeZj\1nW:p+As=_6YZ%J*9%e87mf4PS;LE<jgX`W\PLqa>(hEThZkL&fLno'+F3,OWLNkm\'5Mi@8%"=BMlY7d-=LUB3kOn#/no<Gk^b8U3.1'i&:uB(KQ3%"d_Y8_2MCdI4)=!?e/uk0lMW3;u4pQr[;?>)H.B!lNr^;%Xa/jZPktnH3Ss8lW&t8-8S9WO-M]OEbTFHm+Y!D4c^W1",msEG/;oa%run/a[;,h\"fKPDhD.;S-'ka=1sO;RLA;gjc"A$j>?;U+W@hh2^0]7Zq3i1X6Y1iU2"[/-BZD-IMQ4*4Wg\luO`;U/;LM,-Yc[5b%VU,W:K9QEpc%'Z%d^L9`<9?3g%'0&'cOE^G=ac_I<VVP(l6^A+P1jtE%uGJ,oMCfe7_MV_hbXgD+iSfF)6:t=98Vrf^jlSf2agG6%$GEI.#J&/.LrO#08!?pS`>Pu8U%Mod$#@<0/5mE[[:qG.jf=WcW!#t$U,nIcH]$o!#AJ)^p*dS-X<u/%VD=K;,9V%<=qRih<*_5T%oj1=R<@+7:1sn"bRb2mQ3\mP'3'/H&LPStrE(TFSDNCrn;+jN>PcjN211O;RKV;E5D1"k#g/[sSTOAIN]r^m6V%S4V6-?76_;ZEa%Vbr<D2ecuT()8s`C=?e,?oME?42Oob4Gt+'l)6lIU&7[7Gpu-]Nh"I.O`E<a'>(hJX6WHr3tsfL)\ZnYRC&d@`UHk_pI'Ysj6V^R%Fek#PR*mh';H2j?UW6>go:,`W1I:+L=]srGGU"SK-r@k5PRNiAXHoop>[VY,W`/4R8#R0dH_/ui.Oi>[OK'WQ%85ZLd18KT8e<F?%mo"%2MCFLK74\9CSo8bS8d2G?:lZ"N82<QnIl0roJS-Mo5@];EX>KJY=Lo%^/#Y-m./#YVgP2+qlW:L=,.@7bW(/8hdtc(M1R'Cf%CC_Xc.Klac&"l@r!;r`_XA.4Zd`"@uYT\R7N8+HG)SDZYQ8L'"^VF$,D.jgF?t,8NeANQ"mj_F-;WP!<*U`p5Q36fpVX9W?poTN>%&P)/)^m8Lg6S*,nDMRUu#s<[UV?ckK1>4mqcB7[2N1'sqXF^F*(c_tI&I^**/W:XE7mR34&W7q2ND"d2N*7[(1pMdD$WNDD/CbWU%OOi[D-C-8NXf=K_Tr-`QOgJ(#-s"i\nfLm;W!@$_O5Lq*;PA=,G1fbn]<=A!XEZ1p[P`E=q0c_7;`Rd.C7,s>HVeKTL7)i>\!Wj>%8O_L4.:$`ES+9Ru4tEY6V%f%[KKh9J?F-E'af8'th!3Wr)Q;s7X\W+NWfBDp@iHG[!p-af,]?c-?rI/!"r[Q$ku=Qj+C.a.[$<@K%bn3)jV+>`'i_ckN/CKtDXcAVND3)%m0M*chU]m"lb.K$7];Wc=hP/@B`Da;8Y7*Ir[nV=:L4+#)R*].-Mt+#1r$9V<htY=$4IqHo%:ECt&rQ^-rH.!^\p1/(gaaK2=J'"pEc4rBGH&S=g\AB(Gk"9L$e*Zgs>c$,F9kEa/g?j#nm[P'aE4>*O9i@dDCZClNm^PFGJ+Vg:%\Y`D^]\gYm[qXqZIac3VjAhUn<E<JoP3TZT9U@3W<QbeiocA!Aapq"r+]EQ_Q5u-kbXg,!.6>q8HFTAH[aY0PPfI#6F\nC72M*kH%REFP2N++!?_;Bi[c$DNub)Mj"JACB,6Z;UdK2/J&TJX[f-`FH`f,ftON4Y]h;f4X6G3"*nr54X\W6N9c_eDX?i!L4eI*ue*^-(\_%;/\AWG6]q+&H2SQ&%MV_GhY#UNd_MZSIZT<eK)a#]AK-cB0Ebt"e+Yhde`E+T"lI1_uC-)q<rL1fuH;hG'2Qa*dU,#l_?C,P<7Z]%cP`0d\NcVXjH$9`73EcJHJK0lHnoHFAZe9FUS&a!nl=Y'J0T[Vl4PK=nJ=Z*"CbUb]c_IW/+#O2g$/Ld"U%\RVS^!>rq[Hjac'84%j!!h>VA-Gqp^1*ciBFhd^^>C\QFRTBB@m4f_/la+=fXQFeILRH<-7soS4sQPGdmg-U(ug7JRCr9m9G?qk)e@_AC:'H/TaMjSWcD'%9RV$<kG6$J.<3O3F%[Qs@&>970#tV!-DKC6Nre.Y1+Cdj@tGgK9dn`5IE_tgc1.mmCX/f5%Yk/^LMJirH_-]6Fs0Ht^"l@oI6$UV%6P##$'kUC06$ikYE`qiMj+4*!7XO.I7iY`lGXpRPOpVd3Ut'a/`\[GQcU_BDFk5Hp_ul%nKY>LP^Z_Cn:I7rU(lVNe8K=0Iq01EV%To12J*IJtrSc3'=+!q4/5hoR]!kQ4%7n=$'"V;K=G+60?pZ$lnj6U9r2f:GnG%PU0UUmDD.<&KjI6,9:pZ9_uf-=f=*+DK)d9[u[%igM+a_V[s=123mBpSLZg.)ZiU6KJ/2o&*I?MK'[EpCLcH?2s/uL:oO+I-X7n+<Z,#+MU1o!mY&BZOo;k^KpJDkYZ1ZS;e!`+%&hs%cl'9&mmV<ojXp0;d8,@#jW:u)OuLbDPO;d5\JK%)7mYo+DT:V(pZXhZI3Z1[?<1rW^TM5*WU*m;FW:8-`no^"2Ylq#%#7!RJ,2ZM%2jN.m/sQD)B]B0/0K:-c8C+c@'JQsp(f11t>!]!e><i`!RqjZ7OU/mO6app`JB;l?-1Yl'`i?`7=Ou?LQh9#9>%5YB:APke13Y@$%o<`l8ocL!uoUTbJb9+WAT)fnF>8d>bpP'oiPNj/60>7,)n]7kJQmTa+4,?3W4_nFFp.+%lmCiL6Nb$r$kuSUd]QSkG^#ktJp>Ysa%Q,%h[rZZfgB1_0U>%n&j50Nes;1"n%+]#mfGkqYbHOk<_5WT^qn7GOa#"-lSGLl-(hM?s!me.4pVGDL+3Vrd?ToR"&pYcXo3'ojD%dB3Fnj5*`'dgPX3TXt_9\D.276c_614^Q(n5L?l2RqS?(s-MG6r(HE(s.sm;s&-JnJ#V8J^XK@(s%D_ds&-Jg^XTFY0=C\lcEEhd%h<(dtI;rqf`cAl0LF0T`>&Xsa;*%m"h.sj$f3$0<Z)#JY7mV:Fm)_du_gT:5\aQXT":#J7iI<t2TfEp+cUC^u#An>j8U5ofA#E^P%R(0pe,$EjG,GOWl2?0:h)c^FYBi2Fh<uNk_m!*Fg]ge@i=']WmBTE,NCVe1/O^<eW%b-a;K1*^%eRjJ8qskS<)T0>NnHbRLMkl0R%$gh8EjD>D.&-)?T8SU4]hV^!B(s]!d'Cqk()ZIfM@IE+HjD<J29fouQ%K,&N%FF,`Wasn%c)0cQL%2ZE9)[4=XJ(*?<;W`Nl\sp+%.3j/L6Sqa,;tuaZ!GrI@#.=c#\%eBlaY'=dlR>q)oL8dpp1CZ_gn.]5)^)j\MCC]VkcXn,KaqS5Z4"J?L@$(nis%9GjI-X$fl=F2%336%t0fF\)fCJPB&&NU>D!<fOs,)mLCa%bPr7ttc-bDZla'&@jM9rSY\L)GIqCc>8%'Mg`9S`RrQ]qAhGaP$Y5nnnZ7O7+3*WL,j%5^iG]lH9,KW-%V#TDrA7r%F8MUt9J`^Wq``4rtC4FPP&Faj$FM=T?k;9Y]B,YYsuJA\fR_NhtcmPgcSFACui_1Fu`#?QL"Hp;16C%J%MGoIsX$;fc:Qtq;Z'DJ,],gd"S.C0Nu@C;@-+ZO"!*T_9Jq@ht\o:s-W7\%qjq2N"9LqfB#5[;ZCnVqXV#H60cgsrQ)(mO3N\o%%rm5-9]:d6\O]:aRA4Al@k`-!S!+ori_N%]WM*:tf2WA<7B*1@lGgoI\8nK1m#BOZ'b7p2flZGkC4b&5pOD6a1J>_LC6%A[GLGm)%HJ&"hT0asR*)BeVk.'Gg_gsMaF.QH+kY*jDgf3o!\NLsn]rbnM3G?_tCMM[nb't@cN(OF`$<V4j15(j3]IhcJa4o^c.g_f!(4(<W%:VP<Zit6REj(N80ru%Iu4R.n"PO,@_Ofkb_Ho<"=!qt.l'+$*r#sYVDqG0s^A;X+%c,!r?7+g8nK=]FsTLkh5k#`ohCadOU`422C%/h8^%3u2+tg+g!b3-J=S.Hi,<Jf58?&0c?LSaNl<lLqg<5O,=IKG2"uV%UBRH;Bu^cWTj<p0J.tFQrp'VfJ[slSJ,7L@Eq`[uG'f%d^*(n<>@B2Q_n*6mP1VUl9rRugoEB3W4%mu]@hhG-MY->3)Rj?JsY%sR4ZNE^4@"1Zq;D`FDMK.*P!u`+YS$tSE_0];8%!i%4I17%m7*p1JH[SW@UmIo]niZ73j*W!=N@#k<]EgrEo4c8$m>cc[?2gUMiH*M+p.S)omJ_6S,@@u/];^ZK!pYje(Amh6gn,pM3/?--]Wp5%fQ$Y#E9F?2?j]D%_A\@NmpN*IbIu^4[YGA@>m^iFjCPP22dq?<F-BW+Z[57u]3hgTpJf#VF2HhE42Spo//-WT>>i$:hHE0-i"JE/%YCRoZO+ndKc#@c`R'_2Ai!5SbBG^7KA%TStp0.W-^8rcLZ`kXm>Q]luGD;E4W8oPnYr[u=DDTYT"'OmhE[7g+3`MQCU<0bYl]<#>%%T>CqfN/Te.HNGSaiuoB:*2Xe%:"*le8\bSYqN+q#\aWp[btgUNcj;+^_jT>\goc].^CIbM;+@:CFeCD6F8C=ehJXYRP3BLZMtek%Hq`V#;m@uC0iN8KOXJu25uX[IR23_>gJZTWNWk1[h4Eu->]\?Y:A`:uI8NmS4Kn(qQ#??98F-`rqji>-D:;K5WNtb(S8Dt=G2.o`%a$A>gJ:`@pL_"nCa8_p-LIEXC&_OZg-4sEM4mY$rYqMI*rj(tHkd1:&6OOj/F1@tequS#aD)U4_K;NJ=SZ;9'',.6F%n.(%"!_EZ%@?t1(25,pR[mRDTZeOqF'J$;fk'1>;>[.hk9^X$<@ebS6_CCI_;3kW'/kWHd,&(1"!^A%.?FqVep=_r<VUmFm)joC8S9taBYtf3o%rYQ.3#^8+^JOVMOfE'_UT#;37K=0nC'kQIp>fj`NZ*BG%@/4\@o$\$e6KJn61nE)=c-$_!#O<;KSaf*D]n.-?EA>'(SkQ4iDYIYj%];+3^A&nJRK#?gheHJVINarW.(Y6ht)+BK7GU$=J7#!.d17"b=MfSkI6AV+Q]WFETo!nQ5o[]=4U%^FP_a`SLfTVT1Q$"oG%nJ+%%/HN"6.EFYXhb5=5BMM<s@Jo@@5#@Z^)"Wf6W<lc(b-WeAE]0YJ'H6YuIr#Z1QY?sWFs'4bVVRhY0='[2'Ca.b."f(2PJe;:mV(0_%_SC7l@TmA!CXH"9k)??r(9p#,f%0-'Eko-)5lO/Ln1VCn""Qg_g;(Er:B6.(SBe6FN9p8=fms,X)u_Z<ge$O#.5M,6Ysk4/d>E&j%:!8h-%nCIUFTE;GfF/c:kfagI3>l/4-XafmB7mWCL4DoU#6S^'2E.Sm;GLI6nT545"1PQ$R.jp)TuD(oMO<RJi;3HNi]66$96=94%JnSOKI5>D'ARJ*^*N2F[eeh>Y"hcrQQuRh\3Ki[`)PJM;mKi,jqTQjnIJ+/PRL@`D_o$Sj/Al.oeo383SdOZL=rbkB:IF+=f2R?/%@XRW"/#a%3eR/*fY*?\h(<[efg/!.gC;3pNi#=]LW>OL,8q-Sfj)Nij\U-L3pjLP32!k[[A(SHQqaVRm<d^%=:;Rh6rq(TSBsGj&%qi)_952e!q0B3^cEf)nZre]gahfD[M/Z"Ylao:=,oY!:Zh+N,cHcjstjH@PJ*p7sXiqr!,ZqsQ,caeA\n[SL!]t6JdVYgu?5O.j2%m7(5qjdbrY%uh*;V0RW1N(Y8#B4'Wqp#`]o=,DFUJY,WU@r]qPYm`6h^5,lCpqi)CYV4/d4S\i[E"(bWq4^BI#@BIbEtjg51?cdX%a<.$F>F2isV75n`H%:6&S4eSpbOW/&X+X8Em`WY+^2*W\cV+']`_@*=7'BVd7Dh[G$hZp=?d=GASr2uLicXP]+<Nn9m3iiUrV`Id%%W/#cjF/=K#$Dp@cC!S-J,j'K14oGA:WccFAoR\'I#=\-UhAXkc*sfL$0kU'-I*Ou/Tb.].6uGAZo`OM^BD`X4;YaBTWp1<7h^U5%%6qik`,#^m-k)K"^l?(`-Hh^7-8)-eZ!!hUQJK[[puQ^GMjp8U[+%]S25?m[UQb>`@+ApRT(*VGE2+KSgfX;/[O4.@_i\)sj4Scq%/(!"]H8]Q'YO_KPZUR*,e80/H/%thB0aD[1n]Y'QMO11bh5H@>rq#RBQ"d#$c/AtH'QD8Uf&Yu=d7O8cC0#8ncY`1X)@auEGN3$#%-`/uh[J3R6'X^8>27o,P`d4nrA!kgA9rcd^N=)@GX.jP)Ac-T#]!?!+qj+bZHuaI<fOd^MYL/gqb=5Fca7YI<UO.f@9sW`7Ti';H%C%`bD)LqNCM3p.]fuZ)SMae@e_4@<*1N,,,B^jO\Ith,])s]ud1UVAU(XL>Ejf:$f<Js>1S,T%rC!"^M[%]D3jD0nP47bpWHsoMT%U`-,gSSgpf8u%AZ^d'aPZhXMUk$t@Cb4AD/2qH#4rZi3nT[D+kUNLiQ.5`t<NqDDsZ"[lNj-Ig3e5*"=C=R!c57P;:bSr_CboV7n%c`Tq\^#%S-&650[27[u`?VA%#UJFbdqCT3chWSrb5'qSa#.-i_I\tf1S\_48UXrk>$NDtt[)UuDO7pd:4d#X`s)%F:Dr5Z<GGCoB%b=:sWC)^*P7aLo-r,GkT'TIf\p,#irHbFfP0l?REr9)G4dI0Q!;mg<23K5`gA^ZL*O7hjde3D9T-.>?@%\j-L7`YMoYYT$KU_lb*%[sY%,5;I(4I2:Z.*P=cjW6st8O_A?FWAg[$Q4u.eNQ3,g4DBOhZf4_4:tLd$KRXMD$d`Qt:=?e's)&37D`=WBrUHD&)fG*pNDB(R%1b\^1qN.?\P"(?=iD@i-,NHm_c3K?Kk'>B`P`E+-2)L15[ThW[P%O=&ER_c2,GY%e4)S$Ob*J(\NGa`rc.2k5jc(K*(ZZaYhBSZ5%DreZimqbj81j^)r!-i!%^Y]Um-9'hFqC^<:[pOnnZ_pnL-gH[aTmp_Jp(pWBr%lNoM"R(C/Y8[SfFF8G$Ff*XD`MBRSkKN1[,7(>%[.3D=CZE8%C$O\3qlDrOS,K]2\pCi548m]Wh6D?2&@Wb9Aks-^js3(1MjA:R[*CmZ/YAVQZs.[2Vs4&$IID>G+ni24Rk_R()t*-C%.o1kYXRU#jk^$Y4oWB12=scA&K@mlP`VD(B^4.bJpFW#Oqd39+Aks.tI8;LcFj%7Dm_n+]jjX3)2>:kY'S5Oi2k`QSrqVZncTPAo%D%Bh%-WX$PIG9P'+_umN<skiWg%+MT0u"l64Y?HIX^K]m@Ym-QfalJ-B*5aMRL\4[:@cQV;Ja\Ko]Eh&.Tek4$>nnbV^fVYT'%1+%cIo,caHa&WKb[rD)Ck9JSYm*+pA'(%d]E;2crOFOm^&t=knYfqnWL3:MgTs1^deh$<IL##<=(kW@@=[&Y0I?/;;,el'e/#[DhpLP%(K%2l:BWm4,BB:%%UMMcjUPI_1"=.4V?]1r+o*h0M]L=(a.D#A-J.'l"VG\-W5)jiC68<bZaeEPT(mSFd:dQAo6/W112f#+GVj3c%j2]Cg+nRAMA-CX8?i;sr[VQW\B%s?5%W572qsiu(D6-:J(U'5r458MZ>,.;+0DS4W<&/t_pUesW7p>6;7R7t@bm#-R=ETTI!:Pi3%NT.?u7AFNJM,k+i)HA93WagI^C_VGE'";`m<XsjR0tf![_V3tl][8lLbc]?W*QppW5/PBhj&eSl\^A[%S>"3f?ckb>995XXI6#M[%:s%<lJ)FF=EqB%5no4#!0(GdrS\ct9(mCR"@E+n8Om[Rh&(%jr9Q@W.Cof=WmHXiV`H0k[Cde0AN<5Xi][6C,G,X1E\2R<$%,`UU%RJPJnmR&U*HR^8[eZ;$ZP)_7_o=9`cq1tONPm4GoNN1T7HVf4=d.Tu*ONrN8fj9g<P08=Ij,-k-oenj1\.#L$`O!]qLa<LSq=Xkq%DSm*8(8B/!3krOlR1W\?lN,)DSNfaArV4:j#F)lFlI8VlOIZJ@Qel=9#^&ofi_H(0eEf&]O],Dr@\AW4Zf85'd,@@V4B[l;N,QaL%(nV-ih$EP+@0YoXms;lsr\j<AM!ZBsB#Z,fKiHr6)dp4G5ChD*p<XP/1;L1bL7o/.ITHtY@1.o*]$CIo2sLIN1qZ/^DiIo-k?k][%[td$`$W;s*=,&gAQ<8OY*1=Y!j*(MT4mNF"Z_#d+IUXV@`-U4b7cjGbbQ:W.Z4;E>K_8GEj_I9gY\AS`7k,,ATtl[*?0>YJM#%Nr%gR0Or2:$AXN=E?a;g@jq@_>a;r8#Vsc-YrMm<BTHI:^fgEYsiEgL03_&Mkp4,.=VtrZ&4F:b-`W(Ba7'c";mM*OHN.@/?OZ+cGOP%_/7]4LU+lU77N(_Rp.uI<<:!A9BiWgGi,:UNf(s2,\15L?sf=5<Qa[okq4egGKm-Nh:Y^IMoe;,j'cO]Q^^>&<f"Q3;jc6RQpV8"%(B]q4D7CLE)($%]d"H.'m!7AOj"p0i[]8pl[7_)gqeFI(=Jdt)T&j^hM:E^ZG^4VYc"UUtg%G.5;\G[oP"s7n`]:=G<JpaN-^KA+%;J.i(7AS0j9atQgY$Mp8h\s;+mT+ZYg4`CRdX\1WdjDjk*GU2XZ:dHJe,5=sVp;K1rn+2l9UDgp3Y+;tDM6%@>34Kg(/?p*D?^>p%>K('&q5[fn4mT08H=0kjiV\U5VACZKqSgNJI:Wlb7EctSHN%1p`88LLKUA@+/I\nHcH.4eSm/^"F4O%+9KUgIA"B/4or"rE#+ZK4%;ZSHc+23+4I#Lq,c)G`PhcLgt(*A"7(0`2Nh;#Q/XM]5)M.3r!)ENk;D&8*@O5CF.\VVf%*R+lPMI@M]"UB?nSu1;]Cl)fgLr[%V%%U?eD7uY%@E\OaAHe]3o@;Qji&5f'B0O6mpYVIJ.R[7!_,R?eR'ON2h(un)=IN8L8<u,IWcDX$O(o.NXbo.)Y_h(,`c.!5?`TO7"%C6pgp@K<F[N=!_?9`6U5g][d>"J1QS^a_TNa1#P=5*(1ZTHd`N&UR!/iV\#'rB>ld_>AA6Y<3OL0;/!K[rklUaV!rj8bU6`=Thi%%,]3f;4@jYiN<!`['%[.W:Z0Z%k(hFQ=J=VB7M7XcUcDYG&C,1'Z]Nhm&rqnt=^uC49sU'#P5^SMK==qs4.Bd.cuqO#b9ageU#iVI%VtPZ73#O^H_U2%1QBs:DGl.g\I`9hBA<a&S>Cf<)Gc"M&D44jJ\?Vjc8!P_50M]&?""UU[f)TWMXtZ8P"Zf;/?Bm^A)-(C(#=`3t%lD*RA9^Cm"fVhD(_bS`ig&<s=[p/`]PeTr[:g%LF$ZmNtO,[Uf.=0*B#$8e8@k@BIibnj52!sktfI6Ld"7l6S0jV[;/G,6=!"+a[%M=N#p#0`U1UL6A!ZOh7[\h&Gn6-qX6U$St_?-J3ffW<e8rAS+`kai`(0Mn=><M>*B'6@[T[_moVCJEM[%c],/X=McS>:o*YKtS3N%F!Nq>Sd\#nng4O32)CA-ZH)-1O+&8:VDiRCihW.\.$1Ds>tYfYCtX-ib!!<K[uu-71>NH!@R:bb$I.?!'ESUc!WA1eKUl@LhI.NH%VM(LAS]T64\:LZufYVu_QD"/A6`r[GC_nGao/Vghq$G>d[)l+r/P":eo?WI>!Tr<a<K;51XXpKg>?5@Xd1@WX\:XpL/]uK'2'oJ"%YCWIB=jo@a$FGlZEQca/CQDIYX)g*sb8U(\EBQ4l6'5UVm$>dX%VJBoq?aK46*jdN"s$._/ehA?l@k&F4EIrN\@:5tm(@`Af_ID1%TnPA1&u+r<L+hgC,`D(i5\5.'(JNE?L<V@3rEr+=R._Wi>cafnS-<<O$r0Mt*6,N144W2n(.M=SorRQ_JSWXbW%E5MSa0FonHcU5%8VU'po!W:-(+PVV(h)&F%FMlQiqg>+Ooc`[\?^2gE%;Cdm:@H$8TZNnmp5/OB!Te-"q-\JYM[ehIK%c-iUTkTB$IGLb>*p\4cAY#%B!m.rhl>*9pVp5LH<f'30+I;[Tn1*Ds"5`0/S*fZfdA\bK'of"Nl6rA)drTJoXghek:+Xb_ib>>NGYPGJl:,O*%Vj9&$'BT#!5&L%CcUc=m?^H"<`TB.?E8jK$[('2]cttPA]tm[>O7q2.m=*`43j#4gUkq&Fif.GH;&K-0B45c&Qa'L/<s\a%QiC.XTXhiI-=\Dk8?G7%*7t(dB@aZpDM_#mp9Z14o!X7PoQrOnH!/4^*`XP(m2hn$_a8qtQ<Hu$0_%H)Qs>#`F/.u`at/@^@Hi/4>1);^?)Q1)\\nc-\:F;9%D*X%Bb9]mgVCN$c%`m<ST5ZR/)`_+L>**&6DQ]^&d!>QTM4q8:TMm%h<fWk0CK-4bUO02F`mEC/cmd@o/'$#987`]*Vob:U@d*/'%k`fbsQ"0%E,Np\Q"W*2m$en.tWR6;J`m@jHMBh=em:)=t3r91D[,,._%%VeL*O/nO*^aQ^5mQ`SKjs7f%`pVK5SlL^h+HIEfurZ'%er`5o<Jbjb*%\d7B?0D$$fr@,AT\<W;q!?:ZsU46Md(M"b'IdjB'N(aprZ&>drKDZ\2)&j@c_=4h[6k!#(q>X4*r30EKAGK14)5:%]CG,p7[t^d>`WgKEj\$V3O`:7N-o`O>hO6kj#'5#?6X(.-*O:U<tO1+H)UeDW=)c=O5GXILg.3jV9t\#;QHn8?IajLRLO,Zlc([3%D&HCd_g3ELq/R6\rEP<jL+96(P#JTSon(m+/>h4.@d+<,n1pekf5,cJnHCGl]3ks:4#S\\f.$:<*RAJ$>qC;9`/qmB[j;nt.%Rf=%Fmc>c35/=X;2<GO1B]7G0AFFnbF2#X)%M/E,D2Be]mDilmoZ\)>GG-//>L"F#RL;e0LrNdJN1BsiXmOR;.(uRpm4^GdE4L,brQ-M%9U3'XJ`#/\g9a`_%lDJ8MtqGfJTneGd])I_QtA)AY2f<*A#G]]q5SOCC50l3N=aX?!c?^V87mFq/2;SkLcIoJ/-I]J0[W<3ApG5F%S&u/E1W>,=<:B$Ma,]i$O^.<rff>Pj4C9@\(>M7HE`Uu4We-iPVoVBu?$mCFj5$$4l^!GlK-.1Q`SP7`ojU^(JJKtnWj#qDp/Pc@%=<<HrY$SN([L8@)EeY8;(6#`8gGP$P=[9'Z1[R8U_r/jZNV6Db4>*Ah2I3lnTE1HX\__O0^V$l",I<Ro=8kI1C'eo-@OPV"lXPbC%EGODc/<u1A[AEtF2I+9`,&4^"-@P7-T&MVRpGc+LpYfTD*>:X_Jn'QDRWiQla%S&om(1Us$7okQ6!^dP7n0$^(U;'6F:!bK&Lh;o%VmoZYSbl/6A<AUJP4\J*fXsYMJ$cLML>^_3io)mE_.Qu<lSt0I\.$^:b/Uk+\&ar>pQ&@aaIikA2VoG^KV>rcaOilgY&9AQ+>dRr%l4VB0&:kU@@0l?^"30%=j#T.)lS&mG[qL#HV6UL989hhR9Ob)>j&"P\b>S<t]P0B<[kW`7j&J2ZFB1@HA9M!.lKEtg%64.T\f'3g%%d`?K"iA<]X\0%TO56dA"A=)E6KFLqVccI#0IL.^X'=+u*Pdh['e/Kc"?j1VUl*-%$i2`ll<VW+71/c/cg,Y[q63aZS@02C,N9L5%WO%Y@>NPc;p[N3G34?PG3(?\M/HX2J?e1d'lDjAn<);(8`2tdE1Yutq,3[b?i@MX8kW<R;LJouHR?6D(io+i,EtNCeZ>7j430SVr%>l*"d%qiQkZeEuU\6VU84UAR*q*^sW^aIQ5[rgXDGrN,)M0)>dP94KR2*g\be6F8"MKqOr7%@lHANaqj8.;mCm4c&A2+2KL4W+r:%\ZEh-%^*,rHg?+<h0D-Or.a>rSp,WX-c/-%bjLrH);_L.K#T=!`b94"LoN3j<lU_l=d!3'jN9@5?5j,o]3-dJL((6F1gjRL)tIuN%^#F?=-Qd_*pO`AR<kYb%'%l2#/LrdGq'1G2:IBc7/5L$i7cnPi&:Cq9K%_Io<S1CU!;-R)Y8EDUgj!lP7-ZNO[CO\j2As#b8A/A#%7-aC4H6Q7\SomGs6G1t9&ZJUM3[.Iq*d>Xi1Oab<nQYarLShY+1=G_r"J[;SpokgO(<HX9E%(P)Tl@"GF5bNQHmkN`=jZIAKd0Rm%i+h5bHmmcJlcOoKiQTUj>'DBbmHG'q$\`Z-O1AMf2=)$po1O*6][>]Z0(A,KdT=uq7!L51X;#_X(:i8+JZ9@Nc5q'c+@B_[PO4[e%@HJ%;G.5"i)NETm\V4O;3\Ot(R`I:CHZ]g92Kn?<ni.V@&K\[pnXq=!O>SY"et+W%3'h0Er2\D\CVH&m40qO:ZZYd&nQ0XL(R5)?%\l5WcjAV'/A$p;TI]SJ=$MEK);5kCJQV'^7(m5G8O/Oc'p[h`l/5H%D/1p-\=]ampHp(WQSY\!G(G'msKAC_*kGPEO=VkM5p^6ik%HpasEZNn*M[gm'(-r-eEo,H9d7R:5FVH'D[2N?:^)5^7g(/)omQOQa?Yo88N+P!ife^0CGD'NGT/l%5eZjV9f=EnbnD\Z]Igt_g%%cCV.ih4AF,lk"^EFqJo8RiBO?[nl(gN`Dj[I6PBg#O=i0B2:BXn88]2h)EN)I#Z=[=[hDO1lm,8Gb0%\DHA>YjM"()q"'?C)WSXA%;GIgp-V8q79'g&PFK;a>;4uXrNa90M)E$1:?uD%h@XGVVclQg1<MS*_3fhh[@QmjO+a$Q*WTK[W7U+d8RH1_-C"=Rt?I=J/9CnS4%QF+LlQ!M!mgAAdPS^.o"qt8X<1,F!C[^X+*Qpf5?I.hjCS<AlA*M7DU!Oj5N0(Ot2m?FBhZtjueai6_:0&0b"'@>\Qhccf><jfiT%Ml&:7#L)Aj>W%t1)4J2/@?ueJ1U@Cf*d;3m?N"8C-'iHAa@B_sSJgJ\X?E#t$nSoR[78WIF@(fLBKB?>`O/.`RI/Ijm(KP=9ukJW%)G=_W1U9V0SXH%&3T"jOd<+M*,O:AeF)fLU)PZK?@d3#u79>MH1D<6H*G/U)FCngQd2_J1VDF.,dq?m-7l6dir*anSCG_U4%e"_=%l'uf%Y9TKR)2Kjc9kOR52+H'*LpC/N1n>Kt15W8>0q-B]o42@3f+Ukk<WSCC@85-kB"K@T54D38dkMRS:'=j81n@eER-Do;9$q`m%Z#j%;Abg"#1LQU'``J(q1Q/(cO5sIjRa,_7oF)oOV6mt&"^k;D7CV=RICRqW:"EI[kQ4SeO"D7EoP7(cQJ0<ho$uE-([K7Gk=3(&%#H)9\B*$IQHtX*>%PaB3MM4\;W8.n'URq.LZL!`;/"$(<\*9-+@qpQIkp','V\Vn:CtBtVL$=3,fYGTamIEApZ!7n&KqjK573l_]%7Lk:"c&?$Wfs9`Rh(9;HVR%).pqsUBak`l*F650nZ)^tQgS)HrXQg)QSEA+^J+C`rmaNX[]0pinVn$$IU:<OY]/beD=e`Ms@[0X9%g_jVZ9G?56\p6+n?Ged);Z9_$4Aoq13/ch)S^oqbL2;eV\,]_AD*M]pT,r1_l7@;n(\"iPJTRq6_[h<?efN);Vi"u;TsYPhl_lXr%0XQ!b>el1)?t1nh=^eUAL+W(X*RsZBN\R+2%S\g>g&>e9X8SXD7=V#H/dlSGKN&H\i3'be:fWPTA$3M=:hB&W]'UN-1%/=>jQ#N0%+h3iKj1pY\n$8Mg7@pJkfC^U-W2i?i_E('l4"$K8Q.Z;k1>L;h@.!X"dfd7k^/G'+Z5!ui)a(]/Dr!*'<d%VtnjW`C!r6/>P_`^\%IQ\4(Ggu@uSL)aEkmt3/f+OK\4SO*"5R&h6mDK2*E#$G*.U3h"LmOe5gVri0o>nt;eHr&f40Qp5l<2"R!Ml=KZW1eK&:]/0jB@K;%Wnpn`1+]uR)[r3tiLOO&_h&[!,r=?$a&hPIgoV8dUcMSYT"!EJL-$4*p_kpC.?T\W+@DV,GDg(U>:uMg,ZERbA2oq7cK]e+2t8'Z%1YfOapUXUa41D,V6hJj-7oOtRa*8,t)Hcn7CT6H@r%8[(6Y21ZW_F][=3cs=nV*l73:sN>>iC!6o1a"m.pUD(i]0e[GAAqRHE:Ub%Z"o=h`?OJ!-:jKd*8bYBgI66%,8k(qOZ>2@"rnu,d]PI"pWYUTBsAeXSc.0.[1oqWA$UstF0M3]('nEm#$aTqRk3;gW%o<26^;P@%R!/0.r\^f.+'^AT4jIJ0De$E#>uun,@o[bm&]V26@`TOTaL'At:Q-gF:ZJE`XP_!k0s7X8bBQMM*-f)OYSE4rdQq\dkoLdu%9T[`%C,\1ICZ=W,.[QRo\:nBsc0,hdkVaJs]L%Q-lB:J3B=f!^`<$/UEKW(qO/dX?moJ>\.K9YpJ#UL0h3U(^U[)qaI!r=cHk.UPYM'/:%m<a)\G/Ts,7[XN'Ct`H:a3$&@&DgRhMJ`!&]RbK$eN@YlN=4<:V9d&F/NksBio,L?6$VGCHWJMbA4%1T+#8iS,C.p>=2>]R+M;>S%UZ=O>2>1r6=Z9O=I(Zk'FQ]kCqm6XGo*%:+Rm_H:$0uiGa\HSTb9Nqr9hTj;"8SjdegSh/`W5eQ0)8^-B%\S>4l3fTBJbPgk)Z."%hlXcbhJ=+4D'c;'X^,g.C5i9:e"MpW[*mUjQ!GHIj#bFR&QMj][oNC.DSbq#qFaD92[f"oY0'<^hGB6ZMm4Q-*m,7'e/6I@V\Mp"%U+nUd7\s&D0KUU^Q'0D_8JQ>"h'R+UB-O;3%k:dE:+df];9et_]r'lW11VDgUt9ld\tmY$Cu))=,,`B*D02bIs'g>\Z>13BdYZAb%eC4]g_NIlA:4g>V*C.ge:=jAgcs0#9/`p5J':!1iTuigBl40EpRpPO&B4A9':r%dFiOA'7U3BhjMu0G7B.kitMsSi&gB2@0UmId7%T9]PQ3T!q%]0b>tL%NTh17p@6\YTG/qp=<cCDSn]f?27U/JV`SW.QUZlY%OWoCCnQ4Kk$h:SK_)8M$@&\%,>>Rt5mP4P0G;ZB/YN%.`W)g!Np_SX`da8Mg-tS<Qk;CEH>,?fuN_[,:6Wrc)Q\h=Z7=t]#HUJZb";^2d7+#mdtV&hb@5>YU]i-S"oIU!tC*k1GdbLXX`ku%3<t/.o[p90U9;G:UY?ik:H<J884Ib8CX/B<lTd538>[\CX>4\=3RG?J)?8-ag"DB+[;fK=2@[+bAO6F^r;CFl`UCDL"a%n4@lf*O%^-/$UF.eP/AAEJM*O<m?:mkT)*KP]Tap_0Z22F94ngr.kCuB;M&@:3'>SpotnRmd&k/)gp41m(3!P6ek[9RFh6if&BBc@.f4B5mr%-pY6rJ;i'g6kl<5r6<1\RWtb`&-_:%L9fML>;-E2K[lL1!*]99\qpKq(G/\%$B%@SR_dI3Dcjt\\VgN2)ZscZ7U@2Ed!#/CM#fG=%,9N$Hb`?MlUjU?rA6V/FT4p^Yg6;*\=;BDSPgABQBrmVbO.j^G0I\*UPPEHMjTDNil-u/bnq$P.gSeL-3*@Wj>;1QgP"GK3X:!=R%UlFf$HfGeYCs;07Z^@lTCaeVNILASbg#Vg1n8,$LoD4jbD%1,Fl1=c)>D90WPSVI.B7Z=?<kfBqL/RX>fc)0+cA$A/f?Z1cE\2S8%Ejf-LoU*:=?9`e_&<D<(H2ZMgEimGfd3PdMS:"HpYFkd?/8Z12k4Q'<]!FK]C@Srcp&h&B)6=%LHKkM:\?e?Kgc]$b,%WoTIEii'%qUne#B]JF"lXqm7(k$4s]RFt*bd7-tGllN$?9`eg.C,GIH<rft0Be>.a1n4YIVXabGELKqJUDhqjRm"tZ1GM0TUs+)hlS,$(X),W%+,,W`jVm^d=b`jDOO_Ze+2%#&4GC8hlDKPe>p6DDh*+R,=1A'=E4D2MaQmL-E,?MU\jTjhZhQ*](C@QU4g1KaDWrM9_'uR[9A3`-%Y9+3D1sbHr6p<eiFE4PUnL]mTc_M>2I$TiUd-('XY&a2>`/`]_ZFdbup5Z8V%<e#LIeMrMOM!]VkOl1-lDMeI(%_:Tml+Hr&M0C&%cRMUD^:H4/EpKO[-6M.1j?rM.XW]9nm5`AX:N)WHlfT`4T*:!Q0!Cn$@9^k=#P><^]RFqcV9A/58lXMs_mrs>R\R6!*J`r9YFiLs%6R1nuc0L_&c0DcW5/*kfE9Hi_fgH&sP"/<WZsFmthZ?ZbQJ?LEYM\oenCZ=$NkBfj)4G11_l^"o%.1@sJV@VTH2[(MSLeVM$g.,g%?+'jRee[jfS^l&Wh,4b<[kU[=lcOqQqO-k=/Z[bI]E`GClnO)PD18=oIa53mlcAC)*tUL]OdF;XB,*TW3U(&A"(FnXLDX'QCBLkj%?G?YdQmMA#REm/7^i:)pCI+S/?9]febOsrhZPO,Jh7*,$B-JB<m=`CQXguK-cEN5gbL^Re[#=?TRs+0>mgW]`#b+p[7UVtDY]BUc%G!/Aq2PmC'%Ks&1-8g):>Y_<g4>V3nSP7%5EUr3Y@cbZIIQH6C\VHdk.1YlI^9,l>@>k^*HsHP_'UQgH8(Cl5-$+>N$:Od-S`4RM%YCE,Y2LfAYV!kkIOjL<+"+MN.>PIp%:X=No'#-YjVc4iUDl6C3&$b0IfU"Rs`SZST5I^I6okF!rlUF'2r8%V<O0/:G0OFb8\@F["%anGELL2oI3pjGg6qSrhnjI,K9/AJM;"_pX/a4'!UE;$\r1t_Tm=jH$+`NbuEgRILj?S),$i"J>)n%sG"c2h9(*Z+Y;8,J+G-+C(t%j7c5T4A"EP:,ZICX\#8[FJ/m?hLtX6k^?,ca_W@3mjd4ba$6.X%jBb6B%*9*ki,6Z+&C`KL%aU6e8$oF,ik/Z]aOg9iS`e<!%\O.%NuruV%=#HI*_T^$_cZRVr<bB*jGV9pa.(l8@*DW[`VAV4Ze+_i+HlAQ#)E%eO\u#br7+OI8kbt_:qaF0o365?h7XZj<VDQ+I*g4m%8t'U^Z*uJU6Yt!I#Ei5qSkJoQZgqU+I_Z7H9/!]RLZDU;ZZ3cTpPo`n8S>N$g&/CZg`K(j#],,uX`sO/>c9#u/QC'P0<LON_@$Y.%T+lr62I6o;:OHZbIQ8D_qSSLgiV<EO/R5i5W5C8Fi/:nMJp&AL=eA>D`d$U`F41,6,J6_W-fu&H*VrD7@*:9V8.)bk8;2$40C2eX%*0/C*r<U,gUtF-5?'\sl`@=rkLo4rdD4M3(,Q:h':d7&V,!0.M\>/9(EKGU1R5WS#@Jmq$=!!ocgZkO^qp&tL<Zc;IK2Ll3I3:3S%C;jP9/iX5QpX!#W[t,;HIMQ@MJ&XS8K,DmP.+G^9GRt0c69SM;i.6D<dI9Z)kHEh7P,VZ!I>.d.QhVgh.+I*GAJOWe=<X>=;.rJo%"Xq;Te5BXek77T0QV+[Qb?J4'7+1L?!joiV>E$PLQ5GS#62SERZ4I\%q1DsdAJ[8;YDU$GB;fdsr\u>K+8W,tPZ0RF9)=7B@Fqh6%#4'f&XZheq%5hI`m&MuZ'@Vjk\b>T]r[_=#[^qaEc397`q*ra#=+$FL*gF61:>i\&X$kA$-Eb0h/E]q]Wn^*!!6+M?#peFl8(%=-%7k3!rjCZ"?<%D55*m90Zr0#,S^#[WM\nrJ@X&M)Tp6b'+c>Q&CfpD;=TQ4C%4XpY_@u.Bcer(8,Fu)qf`iQ^4"9V#F1d5>*W*8*k%pJNF/i?q;qV"jF?iOPS?(t[TRfTrs$r@-%t@ZsF]k;S$M*W%R$F!8,R#B>^*:jG6TbA8#(r-&Y73.g>1j+l<47do.&E&WO%'(?lt%iJ"X8H]>j.\^"?F7-_FB+PVj#"&We5>W7.d#X<S.pf7/"&NY`4r$/&]\HC&u@&\DDM_;%bQ/B9209as_Z*uHd!Z0e<7sdTE'fd)[%,-PNtLi1=U[J^XWiE7#D0<=5<WZ?ts!hN-`2+;MZ&q\f'htHSOi^FCn,+kXC=RHl!Q0"#=MB+XLQYlEIL:)#ZnKJOR-,hnpD+j[S%p[o+O;[^`F+8882'g$!Dn+DDkU3WA;P7<e&9.sf=kW^8/g%rA+U)"u:jR;H"&W[og!2<\o5PpFUL!]HmAF^,70QVT#AcXoDQ,V'@%(:B\HpuB/8=Y(X_O732P+m3nINsaCh96O$iXZ0ik4goOh?u6^)HLU"b+*Up8TmdQLrj6I1*7-:boI,n:g,nB,NSE0u-\lpW517OZ%`fXT3O1q6LM)A%gEn\/e3P5n0m-"/=<].A+a\d6=&?qm!YZMH6"6Y$Rb/n@(6:1#!j?Tg5[IZ`G/Q<<4^A=8J:8/6+`V34$!9PaS%QD<@8*8!(ZZ")H!".u,6D@`ji579eP30.80nZ`5?M5[2)7A1d_PDEi:8!FBB@0GlN;qQU4L(tddWb8-(N/CMqlWsS9Ae]o@JJ$@K%fROQ':O@h(q2^`b4p&V")%n/O&P_)I98lDs%2^h/-dHb]:oLJbdU1m_@`WT,Lp.bn>0T]Z2iD;[E<`E-G"Rk;)\k%i(_E1mY@QFD%hsWc^#\"nEqT:E&HUld2h]*lcAJhh`^hZkh-l'4<-P2^_7nRE8ceWC?@sIXYr,\?Ke&i7L9c,o=#*U(:XTT?j[8-GNNFi"#I>jis%=TS@m,/FpZ\mFk!c-><;Ieel.]pGp1^CiqW*B:G5#hDSI#'X"%N?4CYW@Ss%.BRV(k<VS38A5d)]S(N?.7J'([c.R4JRY29erXi1%H>!WKNUJuZ<"fb+NEQ\m@87-]5a-C';!`03$:?(mTTdVFU`(>JQM45!S)HJ='N*NlW,qj$h!)jK!\ImPkha:-a@1H[;U#TWdWl\;%Q`5#]ghha03e+log;=f\c)4EQ:YFNppSu9"SN5!t"c%,Xa?[';A"R)<1`l+,hjTsdQT#PI2D=hHS5j[QGPm(K.Qe3I9GU^6QbR,^%3.-b)=>'_lPK;Q(+bY/b2$LnGXmQ0<@VjadpX1j,?.s`ANu.j0F3EFN<l(W+!fnGZSa!/QDqA--(Kr@t!%[AgaI*=S>+i9#U`P7t%1%cTchF!0KjSB\Z!b8<P,D`$._]uMa;/Ip/s.8\MRTB,NC/miQ"^5,3cU)[t?3;-B9IHJ7I:Y\)R&Q$?3DV*:\(aC\Xm2Ad*]8ar%#p3ZagUfUYSP%9r=dbUcn2O+f[&UmZ2SO+W#f9TkBIo%m6\`L]'X(8P[KhPSPWJhAXBjgZcjX4=h=gXnQjYidDj[lG64=-k`_oGk%H45EkRJgOXZ1CS=JGR.b!=.-g+M;GS#k*VBQRW7^=V.7_YTQ2(-*[!q"/38LV?&u/l3V/OHke5u@Vhg`a^6S)@$P74KU@Mm&&'2g%+[?k\)c,nk!2nnoLct@g;pH("pu7L8D&!<e2L%KWM[:)i=X^S3`)M8!J$'-K*l37>o+g$i%2GO:(9F5b18>,%HI1n1G`R0Y@D%TE%.PObsD&'1piks,gF@3k*MSo3uONN)OJB;]/kkQd1E)?XrYe(jU7bnl?Tm[*[q&QJ[*j+(M[pSKmDGl2Cfsk^T?1`]p^/ZiIM;rE*%[[7EmV;IuLJhM^R"Cb"Ie]#kY/QPd'T;uGbEsAJCa;]'E$6">Y>OqI97[l!_GZJg^_=X%s^=7:f)3)+f$<_q2/.m[fNnFH1+hO.L%S(VY+9c+jSC2t4WDHMW7a,F",Ah+@$lr.n?.AhZrQu0A#K8O/n?F3ld;LIegR8+O<(9$5*ZDp<1%Ap1'I-]BTY-''+R.KWOLsCca%(HTALIW\ikNGgm``%^&rg\UOm&*BF-\Z9Tp96Abdl/fig?[W:pRsoG=.#<(mBT]WoC6^CY[?HRe>.oLsLhrm&`gaPPSl!)0W,Yul%2Sp2Mj#"A4nV_T.aOVII1P1lR["S+kGcpi]`SHaK[i9Q*E<iVC@n??/SB#T.;DBc"PILGB;W2eGGAse0heh=eZ$)Mu[6!((a(jW]%S;E$A_Y-BD$0u'WQ&UbR`YbOZk?/9-r"e=7il.T&.Qop=BKeSBGE%`GW`qkn[I2qPPDluGcBFUc<fUu;'d'9`2SR[D1V_6dl"B-0%;lZC\g8;q2_!+l"^j?,e5.Hm?`V3fc;"nktlL#?>C^^h0ou7DF711*e9q9_LWpo^6@CJA%gN]hMgXF*qD&gQLTL^&K'-K`Z@UX*A%V>k_7S`WTilsM>:4$3C(*R5rE;.X'irUVQgZk&)HW'@SD+Me5WmBa,U5k+lIi!:CDEU"_?496D^'7]XQb('pD%G%@<ruld1_7IfT%/6"t/*1r=s0XB7DK05MlK@72-3Tdo`dQ[#Omdfqpe\5-L#b=:aC0'&k,S.lP6&5p^_L;9&B.G%ac4\fY6ne"A+0\YHUK(OYSqm9g%S;KQV`f-R36Q$d.$YDJI_TPY.J^">UgI$PVK%d0T%C_>+Z7)uM%MXA2/r.OAh9Q!WhK0:V1KDN%?JW%6Qd+ED[_&O\N&ae.V@=S"%7Qpu<O>&IUHT9QGEXoCOS)<%^@I,,F))O]#mN0._G#E6f%!E$6k%$,m]0";e%X)`jH^4Af0^tX\mC"\=omPlT.]:9-^MeK!>QW[!%e6lHfD/+e7$-PU]@QP:X_?e@s4iMT\E"9l37JRpCp)k]q@]-:>8@J,WD^\hKHKl4TGBT6"`^1lBM\\]_RmJou.Z;.@KP(_jUlQ$N%;2rRDL#&S"fn0Ug5coj9ir]!4#K=1KW$ZAB5PD<##,82S$DP[H=P\/V@#=q^.7Na_US5BhX:>XbUTRrXLD<UjHHp3GC\Eb#Ag\\#%_3SpHFm07F3^4K?$F#S#9bcK54(TQZgf?/rOLUEJ<S3j/N>418bW]J8'[0:i\&[s3<9W0YcEi`Z@MBD_&+[q9QnojY[cItai=).h%@sN^:3SY9%DcdN_TJfn&hQS'H0X&CXH,FqfK?%oV)h9`#.rto[>?^M#Hd4l=$Cs0ZKp\Gj!-EDV-L`u=aF5/gANdF\B)imP*H,$j%B)k,-`uEUI);s;tPAj2Y15#'#`%Sh46N*Qt%Y6>@*G:2DVJN0-_Tn)r)"p#>i7Xss#4**K:NrZ&Ec]j2EIagRlE:uQWAui?L`_>U%RUa>OQkL"mq1Zq6.5B781m>Y5;IP2t0=@(iA1^9;)AWfJB'qnAncnNbTBF/]/_:iZL^,0%=lRW'C_VO:H?%opV!Wb-HnRQmPo(3Q%!hOFg!00%0^S0XpkYW<-@?H1M.i0YG#ER<"R<5Q7\1BdOa"gW]IXO?(mC.$uP&dQ$r5(F_dG31(DO=l$Q*LS<T:ZUq^8&$q+8*bB%ZTLYKLK5E[&QpIr?SL+jf2:YK7KWa@Sqt>knYeion)u^n?a*uj(%-"cg!+g-8da8Up9$G$eko+SQf_PiP^Scbm(fG6F:hO"EHk-8%GaR^eA;j,QTpPRi)]?k$oZkuUj&5,gVk,\S3-\NS(Lr_mLS$YE.0QM56B.eCh9(ke]pAk'VJH8CQp`e.jXVI2n"Zd`+j5?<WXS7@%;P@5.C86mk%-:X^<"WlALHYXH1cg5Zn>))@E"ZV/UE[9si9"074eR*B5,3tmU+/ZsE-b@)d<,"iW?KL][d1DOa]@KW-.dUW$M!TZ%'@*7,Yjn"E?;G5q"6,V)>/S0eQ1]g-1XM=6re^<$DnC<g<YLE%Z\[2*+/G[WTSn1S3ef7q<<*D__7ARg,`DVcEe=);*gMEPe_W"i%G<3j5=UW$(E2IRLd_JT,#I%iC%qB=/Am^gI#Xt>[=Pd2^r3:g1=nt#KeQrhG6Qm(>OiF%C>t+Jr*(]$Q(\^#L0-M1>#6*ZU5_QK<%dWg6Fr'[;2\"LH_TO#3*O=jMh\q$&r+I;>c3J@K);O'JX\0BHqq7EtCmDZWf3a4HrfY>)<l@^#LCa*HM/X03YLA4O%WWAE_@u10<%dA^EN&66?>24'iLe9qD%.uD78_WN#:6GDj^+hs-(i'ME;pDdL-FbmV**0d#g<E'2>MM&rfW]K2CSO`\X_8cr6LY@Je,sne%0S@;R%=\=Ni\Z!kh([@`(cKqL'mVNUD3akq(ri6E0*^+t][`;B!O3/Bobk?k2K5`fRB38=Y0;:E+DGGnaomC`HkXh:7.uOD\!EIp#Vh#'<%L+DZA\8L`n"EB1p,_$eYfE6kl`'.6nV^NUKC)'+sghU;K-SICLL^QE'?rNj<b^UiPjJ5^WO1E)9ART/-j=>S\+nY:B'je&?afoV=%P"(*G^I!Zc2JPC/d.SCZ_?DF8"\`q[W`*/`PTmMO&F)9piHbd7dfR0*Ol[a+PLhATA<NqYb*n,]b:So3b>O/fco"UO)r>Nb!2o?A%fY%;/WsaMV6VL\@`Emj(CWr9`<L^_D>NZ3=Zl]Tih9O8[XQp_'MF]2H.F!)]kbU12r?)al]Krbk'TM[7h_b211!p.aKGI:oa02U#%go`@gH__Dn5Z'IsD<Q8$2L<qj%N&YJgEYP.*/L/8=aQsU)<YCKJ-^%H"!peHiB?!@k'@/&i%smW6(3H05+3)^:;rtDg]1a*$LOb)%,\"&m)$13Oq^k,bO_R<7I#V=0l+upZnFh?#]#cpR+@JgtHU9kB>ppc/FuBSQ$B:%q@2YP%\.jOUW,MRl]oBE$;[mp;4.!ke:\HDX%FtW;10>DSMN+M1EgUT`D;TqNJ])F7dF/^+Sjj']XiLKKjS45:Jk@96c0,i&(Y)ZI26sIKVYZ<J'&Z"p9Hq.kX4GfOF+dOrN?u(gM%,K*J,#hVdRa9Vfd.iE2pUMaG)i#pQ,eg)A;2/LpY@,d>oeA06^<XE`h#U90@5!Vt5A(f07D7"W-Q3]jrN8ZX1[ZIr06ZBmHdq&X@%P(\"ao]"F-Z(q\8:)di*&.]pu4W>3/`Jb@$RNSR'i'4hniUON:6?(+d>T?EC-G)0&Qn\#k$PN[,A#;^$BP$$+5u;e&C_+Y$^&4R.%'842>l"#H4iifZb:[D5odi[qa#BD;e6%=\nkRYLopi[L+4DZ%0eK7,s9Csa"(X%kp0D!mb0SSXXpEH@sn/lk%9o,<ees&&:s7W%<%VE]J&A:s'/RJ*<-0%T1\A>VNJ(ooOX&,+]ZS=dG@c_nI#9C79j6Zj^R_+o?5s&'?5K`:J)*Z:\!<Ra_E6%U>G`)oR]TKf[7_n@^;%YWf"`BeAfLjMLcOEG^3P=WbATk15;a#2Bpd.pt7L2<t@s/kV=j=HVlkntOP2@!n*A5%MT(-s6d$_SQ(6f#VWNK[Qq4ip=:Ap#lm3%ENt#'PkBU[Phan5<j=h:CLe7TLK1Ddi!gDcjF#^gnu9>$@28)1SDIXlJ"RcnEU*]H,7uYT6YWKWA`/$"8A9Sp)[b#?XF'\.ocZ'b%J??J2n[U;e],1=M#QbN5fuoY0pECcfo+Ro(]I?>o(j7Rp?=S.3JoN%s?h\!tFo7WCq\T:fmY*qG2st!'k4i>pH\(q1f&ZU6]mDKs%g%CEm??lAXNXo[pidSb$YJ[""-$M!NhAsf+?AL8`m#h87`On*(G:tr!h$[P\<n$'_doOl`mY,O;_;4OuiSoRs1[F7pl!\/@K5qm7%_=SjeAN)Laa%:Ck#*'5+BH?SgTJJ\5iBW6TP5*T7M.VJIcn9DnZDNBg&+S:"<I-4<dY8!Mp$1E2+n(m8hbRm_Kt?o!$0Tieq4d+e%29,*4KYo.kM<rn9:'@Pr!L+&qK_CsroIB#_&X.M!34boQPdW>30uNf@5li&BJ1)UFeW*p?=[Hlo&UW@#SI(FfXTVp<?_PI:\<kg(%ad]M6gjV7RUAR$1`?\>3n#r#JBC-Mg36R6g@aI.[[%I+<iie,./r'#qp73NaiJautlGtdoc3O;(#V85M=nGKU<o3M5#VQ^;)$5qM%Sdrhe(Qjp9"7R)+iH5HA06F!L%f2nigt+5a'e?op[^uHe6F-F!$q)6=%3:8n^.\T3$0@;`]bsIq4YFu$[@WKP4Umr2i%V=K2:sd\%Gl=b[me5_[;M_>5L$bB1<$D+sMjusnJ?e@T(N.:=IGrA/4K+?aF;_daKg(8.j;c"rbepJ*B+ZRHq2uM7f?qM^'a^UJ.7?:I[phaZ%al5MYK&1B:`(9$HLlp`5B0e[`FJ[%t2#B<?K!`)>G>0X7Sj[,n>'i45/5!-UUfK(*DuIn:.RmO12Hb^=0dE>5k+/VR;7.X\i%'jZ%\<9X$`2m.JWsJ-)1_!o3#;B;n"f_*I84cMP`OEm?"=T+?/d'RZpsqNhE#cMm&O6"e3I)E2[Hgnt8L5:q-QU#u@L5e"9Z!2fH*M`&%&fJ?*-1K4;f1&JW<'!B:e)l2u9SMb.30'<9HSqL?Ea-<g+=IHfeR9:P<6R;:[th1AXJ78??IKB%U8B+Gf,\%QWO/uojWMf!0?g/3%2OpC5LlmtG=`K&+><aoE;c;Z-GQSBujlcSslUJ1)Tb0e]Pp<QnX/+Qh"DRC8cDI+&4@^CELd$!%)2<[&Orhq:Lr.GQYZm*hniKAC%W>7aS+UX+?;AT:TUQh%=r<ehuLn_'a<c14g44G4*)1hd#OpL7Tqi?<_kQXZq_=ToNobW>9.%B4WKk??0\i;o>HEnW$nsKX;rl%gO%DE)Q)8?;&0`C&1#Zk4:@P6Q>)Jj+JghQI/NFR(X(+(mYqOE#CNlgJgY3EqSIIqp4$S_>OQIH7$c.P>Da)T($Qd=QTMaDTck-L6)H%rYtj._/-s]E*7SteE3U0ReXN#r>Bg7;IN?^+NHX=H%A]'<.Q#L[<C<D5GspKVeW^Kg<`5\*/7Z3K:V%.'@B]%@cCrS^^&IUR6jT_%;/eibPtW?8E!(:,;AGf+O,j\_C1"[^kr^\@)U@&Om&.eEhW6$hXZc[D[Z^rr4:G(%3O2upJba&d<oI.XNRoY;W%P\)!8SRHdan5C%f9"5--#Qd1b%\X&!#M,+Z/W@Db*NH@_NmH]>:pN=W#>0UK@"Xpb=r+AYu_B395F,Adb$:OK()S#!3$/u0h_c93P>in_hPhF%d%g>%;m]o*@+Qki._mEa0qq1d6k:"pfT#+Z7^qj\h%JTqq)W+%&>iDnNIFM+mCULqIn)^63N\e9Bj(pIUNM7=#<=O6Ga3gpd?44t,_6G,%j3ck]?dp@LS7/$)V]ed)XtM]l^pdCYaep'==nDKaS.G([&DmK7FjqD1$Z<844`SU$mRI`75haAHNXaEeT%W5ZM6?RM]=9\j5/$#*%-2djtL&61aW(-EH_e!-C$+DbEs(2EoC8qkC0F#fO1K.KH-FcYo#"pl@=3fL)A$.B9)EqF83UgOX+Z)jq=>GNb0$o8ZA^T>VK7+'J%rLgYHD$SBcHD_V^4/%(a3Cd7M+:77:&;/A%*=-$pBgmjBPCR#4<7fM9?CcST+HGp`+ck^?jV?WM&-JP#77q(W/$u$@?*;ufOP$!c%jk,U);j+?d@_NI^:e;9I;u;i4:/eH*461/NJL-#&;p7=,FU%-S$AY2NMm.Ys#OsO%Lt)d"_7d0tS$,*?s$r>"<?aM^#JH:b7<fWi%_C=Mb<Q/WM$.4#V8r0sjY=-Zf:'/lt@3ZF*"ac<eY3)FL%"DOYc8-do<D66YAkpmQG63[/Tf!aR@K..G/1T$L]^St_rg]Y.X:rbU%Y@=&)S,ZUI2q'%i.WU*,V[$o^ZCY>^;r?dRf$0`<\s[M1([&N"Cgf`4e?X)+B7K1SkkrVoqm)UV8_'%FX\[1"0DGqaVZ7-b\:28p%;uSf$_'T?3dMV\1k\^1gVB_4lNq`rbdJ@q&FG.+MPZia)(qfE>%#-">/#i[GkBn't%'FR'6j^e&9o.SR_C6&NEB&ZaAoB`91`S*A%.9W(!JnL-k^<#-rN@uJVc[=\Sk1UWM:U\e"oDcP.22>R['f,NkY2/?\a@bX5&49N,."pcS.4)m_MgF$5S+m8:/t?'t`8+hcV*7)0%d?&-/LqJ3"@,ZEfcOGFZSpgU:G#D[WUa=D?M4,e[9!9Pkp_B$NRI,Tdcu>,F)KhlF9:VqFJ*hiJJLW$3BkJlLQ8kB(4fM8,^h6Of%l'$PW+_<p$ScDK\fE4#S9E*UQ$7SPj.<HGp6(E2h!F\hurY==74+!DF5WQkN#>ahmW$3:&N6f;\9)aim-FE^p3;,OscYH+1n#%CI%46@DC*f=o+[kCmXB0V@?ik'<C$SgTdi.o@W<'o%-G#T#fV3?LO8G9^57mS"!&;:XIdUE0prRrZDeLeM-5*cS=&V#>?l''rTp?^_t%B!be.?'")slYIuf*j$E]75r&OQ<"F"^T[(.@Ojo.$<j-2E-Euelp-QR\eX+Dfm[Y],&Y&_/];iYA.[W@?gscTM/!b:s$2C1FE0\n%n8s?RBfu^2H2OZjO/[6AK.)LCIapg<&E\(-]]K5]diF8tnMI8Q0mhqDnR0;s&hf0o99UjN-@kB156mNDSmaGMr200g.KRs=2IJJ@%YYCA%nb]9t,eM2Cl9==I\XDZJ$E('6]dkodiWCpf^UYX\hiqWbA$OfZ!'qk=+G]RD[Sf["no%LQmlT*B?E>Ln:8lJY0k=XD9H3@9%Iu$mX!G!iL/qn?s$OIiV@NcmWf>1P)^$lOX5CS`fQVPaeRiGoO<^5$/23-YK2t_$FXQrCn/GIs5]=Pja+qRY[>$jCQQ5B2>`]s_R%QMPn+3;[""#ERiVDc_38;#Z"j'biAujSmj:4TVbXBoQ9u@MI$37IdKc'bmg'"X[:&+#c+nS,RM>DiTi2qth4&KIYs1PYMg)cSoeS%;rnGI)0Xu;[lF4tk+qD4j!@7sWd$091-\#p6Y*r`"/pppQNSH@P7$/P6d()51?Q^OUP1+AEB7-;j!9Nf?32F)eE2?nY*Qu/ns\B5%da"E,"/Rpe5>e49FWt"B!4[2AiS>=t'c\hkHk^dhW#lX5+:RaAn>2F]%::S1QT0eabEn&ZdORpoH[G3l3V2ceTVXOTkjp(jK6JYX%)NtZ9jB(pl*jbYO,I`8nhs`VF55<q5:`o2<<h`fR?YW?S+N_l_<Z>fE`j7@g5k-_/k2SO5;`E8s=kJ?j;uNT>GYEF&$;L'odR]l?%Q6WbCrG(/T@?Mh>2%m^/F;\)hl5$4PbF"G]0j0*3/pXf\.?B1+r>]0B4smWYT*-J;AYZ9d;p$D(,)Z,<191IG(C);\Y5OVV-MU3N%4KQCb8Ml2L2c)ZmP4e$SiQ\.GP.B?B=X!Id#nWpZpiu1)E4,3]Wla_d2,k3@Zd+W#/2>"R;694RADDT,8YGj'.!Uu(PNDL`6M]0D%'pW.4VcUaA.`(8:b"GZ&UQ2Zn^O!a?,-%l1T/7V9nrp)Rr=2SP!ULu2B_mf%jC@@3XRKTVljG(]i-S<LV\Fb'iYR]1q.0bUfH-nE%OuoQ\abI(V!;g4]R:k%!f%:s.n4!;k3[f.PjgeVGW9#/?fht+3cL$C$Q]E@`)T,c&AjU>S9iQASo82$Qa@]t%;A3^*9fTTeZS9YE%AGCXpSl@0aGgg[)_-P<3o([UfrTk$,&^RV8.i\o5m@Z8:Nb/#Urd.fi[V(#60_K%k>iE89GaM6jjn>o'HQtq[B_*'=UpVCI,qFTP%M0UM!A84@%c)^eTq1EVHjt%iWIGYk&G-3rVaL8_d-BsHBo$p0ihEPJ`n18nqmVZTCPWom;hWR(9fYn[6_0SfK+8;MueR@`Li]@@8%"qG7kmC1G'm0pYf-Fn5Hmljbm50!%@j6&oRLM0]^$i=d'H]1"\km!II)a'e?9,00Qig^gqH``sdh`pl;dH61H9fi$T$X2Nn)YNg)%0A,[RI*odl1O/J%oNi96'bka3/U+%O'fWVuc\.O,p)=<d5Y@:+B?q6>I*)p<W<1rAo&M0oaAZ3cTiG8!lR[.A)UT"%Cd"Z0aCuU]%Lb;.c769Sj!K@<Y:*>Xp&$d@53#Hq04$]o%\N>$+-TV#oT@?e4rJE!kHb_OHb6H'lQta*S&B9DqdaD4*m92BIJJA4T(/])=KVQ@P%k<*D\@?N7.X5/Z#<?]&$RSbP"3]7\/.(PHn%\mdC^tXg2b/Hp\(K)$2(KW_0h%A"(#;.)h[>8,n0f"6pX]U\-V8EQF(-m2g/kp_?%*n.[6bHJaCdT<`#Y/D&hEC2\s5o2JuZ8=.G<o]&nWt1Bk/mI?fD\<o_?M[87Ns[h"_*+YBZ1o#Z7@6b:;>[&fb$.H\q9.'%lQi3"%=At'mCgE0^f&.Mf,eoceG?B9NW7I)e''tRd829G^7o5U$pi[6"VNO(hHD#\Olk)#]!-^L+5'?t6?h[!@q&:!Qhc`QGH?:l\s-0#V%K,'Q6s0/$3_@(&?+-i$^TTE#G;Vka.'#U]oBd91^9Q=Dt/=4mdfBTW_(`g%7Y6iBgD/_/Nk%\\0O-tu<I*X_\W;1<X(FJD'ih9O,%?8'\'BD]RXl_m5BdR?sLC1](QOD.7s`-06sT>.m9VA6JI%2D,Y7?4>Kc:elgdiBSqON:gp`0pP-T`TS&@f3%rmXFE6`gH(`&&Oe7%$(Gf<=`eEI$<^ajGCfiEC$8)CZnIJ)FDr=:d[Y7nWTJ6<0e:'$1;]0Un=TujV:)%D%bY'V;a*Kp[K;*a8HT#cd\hU<c=nDOhY]&F%i?35n@^79ko%BW9"[^;6cNk=e6/[hB&A*ji!FakGpPU%5jKfY$/Ld8(P2J5W@$i#,]0i9Je+lihZA?G"i:5,nnLXt]Wa`,_a\U8[%JW`pXFVT_ULWh0`SfZOK[@dn^<uT(K2@qUD^d+0n<Kpt?`J;:@-pUITCpd^,Ai\%.MqH#&\Veu@I`[P6@C!9G;1X9uW#H.562M!#%LN07:1C^J;LQXkqdoIBeE&ekV8p&!?+-],ec$OF\6rusN.7@K@"JmfjQ9d"%c+(_bRSM@7`Mg^:K$mET7CNa1>essG<\J4C1:[]_%9n/Ro8?iLO-*,pT<Y"g^hq<#t)^,Pk/GBk"&qR"@QlTRLY;&!-CH];;cZiF,Z)&eF2TiU>)(^dcX/KqWE%;Bm*j+uIa-L3R?qV6i%p-HML@kV#hrm`F22%l;@A0eJX.b\++k\:_J]X_N&;1(H.16S\2M2\3_'1.3j1nu>.<_^7.fH8cIIJT53JPQO9.d7C.9O/1(oij)H%4'DWfrP2T%f7*@fJ_1HRjoBRS+D\)I.R`tORN%#,]R>_l@?(3SKN;cC;N/=ljj\u0cS!+Y^>@AaJKXh41K@0Ba6Y\ain.c\!71X!%]+KQ1WN<hOYn';MD55"Q_ukA:)8!d`]+(]#*+rZi@NKs;<E&m"%'L=p1s,PF5\#>nB*)4Yf(2s^H-+Xnq@!I:09q5?_SrVA1)`/!%aU\Bb!%0BZAbR?t#[k8DWbl,"ibHl]k2%FCl@9\2@T*e,j+&sF$s9ms@h_H$@P@Em.U9>F:@S&j-Hf44-+q?&&4JS)?r&lF`)%Np%;")-<bEMo#,Atr%L$RDm\+81^J/t4#6,R#FGZP?"NE:t2f1hdkIE8>94eqnQZ3>5N!qpTZ;7+).Fgk[b_0%D-]Au-3k8e"O]9i#*%`?J<19Bc:R>W^M)0YZJI4]icrb1>EtV5[S"@'P6aUB+h-6$bW$Snc8E%Nel/#u.7n.)m6#CUm.+r'B0)#u\P2.]3KHOM+$CfKf)m%OJbST#.Kj.r#cdd_"oWpYe8tX$C05g'CIR$@[%EIZ*PSLoCs11bbaamV>$TK#M`4'`SSV-C>AD:3KsuB>*[!mLr\E6s5Z9JHXXPF%XYT+E>7DXg+5OJnVm?sL8A#]!cgK_eq*uKQ">BSkUOVd$b'4(Em1g9@FHM*c-S8*oQh:\On&`B*J)^mrBt;uiG)(_4pl@?A[iS:?%D@aqIXI#0"6Y1JT!Rr(f%@'DDK!<#[L3iXWiOoEes5?26)>ZDgn?I(=PS0.GO/8$(UmT#i+WYlBH?c91k`%gjiX#MX7^rBWNI+I7%:G9Ai"-m/;`&&PL'4*+.NsY$^ce_3;iIXiTQg#3qOikVj!kseQ$#lg0JU?HI>Z-I+'(Dog9#ji`-'V3GUm/"^qfXHT9W&:.UrYp*%(Fc5Bg4^ZtiqS6B;p$RC9//dA&fD\W'"Se!d'We/q>lE;!9a]&!<N8oI2,4T!u`;I?;N>>:?lJcD4Ho`k6'NQ@d6q>\Y?PI=M]tV%Kl$nc%G_UE4;Dh0]#gKgXrOUdPsd8sn!+i&^aZ\t\sCteco"T\6K]o%+\Lbo[eFZ$dk&O^i"Q%Wco2(UA)+*,bf[iuMSe"%1cXNH%%^5qC+:ud\1]`'$5Z/immG1bSCW3!9Ou?tMc6P=I0;C<J<u`tNnk`=_@g#GV$7)`=;Kj7Q-=+-q0%C7h(g)6B[A,^Hii'Yq`jGH:%0^q#t!eW:_^s'64h9@6(/C+LsW!OJ5GSep'ok1YLS$9eP2"-+*U'#L)YPRO'[@VVZ[&2<6EkN/*&UFNW@tas+p4spfFZ1E'+C%a:%\#Y_2fn&0uLo0ma6PS[o;.U)nP#7Mr8>:pbR](r:q22O3]UDGTi$278C0\WJbc</i,b`A@3YFIb6V%e_WX)[AMi@@Bl=teQ/GfnE%SqN7r'gn9F8[0OV$cDu&@()OYDH'GCetQ3Xdb%!8`[G;b-cg+rf*@e%-''EC_?KT_O;,uKg=DX;R$GH,AaNh3KEDT71].MYlEbd@%e]\?5dL15CC4]T_.+/HuX[i=3Y^3]:D:me90Sc)EM:5.gp.R>Ui,I>-K,05:9-$W!@#qobM'P"G(np6M?]h5U\3o;VY'r[.S6e92%:7[CUk\@u^Lfl0Y8G+pd*ID>HSnM]L(l!,u\8lP(&kWS=&=-7NiCo6F](X%c8O]AYZUfif.F$>=)s&<Ul`.FU#aj`\1>D!b_.I/u%Bd6acj0VZ6lmF)C97qKt_o]-EWdZd@ZmnD&-)0?(f,@lQEBJ;,a4"E9)<DG5Om8aX]b'-4N3A7%W`tKXmq!o,1:/FjAf+OIO2M.C%EZIH8U=k3=hLp\!Z.XGDigFO<O=%?DCu?_-AYY6tKs7_OYJ1Y6J9'<o5"'%b1=YdEof%XOouWn$I3sb5MBT)eU2)Qk>#6Y(WD5N/%Fj_aC9YtlbAj0.Q))s0?n^,C`S8P#u!k[k%-.6A>[97s2kilfUY;\nn'!N,e#W`m\jZS6nY)_QGh*T@ArFrBJ\L>.1KYGZE&NrX=%lRA;@L:LWOVJ+<oqJ+^p'2fR%l"Cj3HBFSX8hJMOn58"!e_BR!9_/70Zd7ric,>e,Ss=Vjngc.>?$jjhhisLnY!$EoDZmPNoM%t]%l.U/Y\oLi_@TL'X=m>dEb,nmb[piCL@TI5'"B<N99c2&G9k;i/>ujRoZ&=dN;U[`nhX'k1?o,&ujgl9`PpBm1DZY]XNmVTOE.GQh%mHRt6]k98h(g:0"BU'Sul1MMm15\ge^_n@0`%?iiXdEt^FK]H5D=[!L"tYKY>"lfc12hkhT4n?HgnFnA<:c$%8dT=I$^=1k^LfJ;%7q0Yed@9,OTX,Vn@C&f9PK,uP0Y:cWedbla+HV.OiG,-Jke8Z!A@Qt!8drU&6moa1K03%nPWg)>Fq^j#Ol?@`\hV1/K8.d'5d)&9%[a48lc,>e$"XGrN8a!VIe=1D@(ej0;LIK[G8ka[V%J(6c_itIM[`!o98EYpQ9D(Pc'LZ]"Umfn<eT83BJK`rrBXW4XJfGKCXo5%*%og(J@K.6]_2TK0<HG\D)iZs]>DqqWsP*#OBOgELoEd%:kcKoZGOI[#aAZ+jMg$(OK4'bA%:;-<>r%gWT[q*dHC=7Mh5Kh_/O`^FM%P,g!iAZ%#\WtFnYe!5&2Ed$`lTO>fGT^aHmSMkY8(spZPK_%;l]0eoeGc'4?^&"V#1pf9Y%ZVtKP'>6L;jB;6V>`9t,DdWl=Wu]@%,HT\Q'b:BT979,0-Dt"Fl@i\fWjS]MVpjnUHCC4:)g%S.AfJEIf^6%Xh)<H5FLs-O"P^@R+"V1j:%'J$Ka8n"f?5b-kQ#TR#c-gP%1[]lK0%HVrJ79dsJV"ml:LeXs4Ce4_g=("\$A:TW\1CB4EL%J;CFrc\$_nH"T%>o"/N/?rp'&F[7^!>G'5R$[p[n+"8-fRWD@)2N%g\b6,m/;$NQDIQU5>7QJ28Pmj-S'#<SRouqW+IAPN#D_u&T!fSOkS'de@t@HMl,I;Ih:q.`Ao%N"ElX^+*rViJ#?94'00"40A/7e%]=Gk7G.M\HcQ.07TCT@lc][VeFk*s4s/nn/h>[aWJ\kIcQ`*&%YbNT>@N&00%j4#$eSf6eT^cf1b^/2TE\JsIL-'_hE`C1ibP[,o%"<!G:l@T=;7=IuSM\dQO`DZMrj3,oM4kgNK(d)lN\@V:/,/8.P2Aht%U`"1_@b067+"SF42$$!,=)sPC[,Yg.'Q3nX(QD:e`-%f,%fl"Y`'?70PZrXTEfo+IMojqc2MPf4fB)B5)fM!iQ6]?`<TdQhfYV4>)M[`sqm:koQ!<ajri!UZ`n0:o[UE4HkEm/Y-*?(*(_3QL2%ZpFu/Osq^l<\4n13fW,0+N58M/20a7XI!("ZF*nFC#s_c@lc!Uj"<eFM>c5_Ke=hp%C>l]0h&(.iOhb4as30oofU,1_SP?6ihUES%f&HMN&dKDMMoL%+Nh/Pf,`5]TZs-@(:%=J4fkHAKD<o"2Rn2@n`7[ImFZ6'T]ie,nDd)p!_p.n#IB],AP33]F3=I`EgPi::[h81r%P<BF\F9d)4/'%hl&-m`Yb"gW,:dC)@X!;rhEJ&T`TqkQ@<s9OtA?5kJQHs4abi:%o@DWGr;mb,[Q2^9!P@!Su6nun)aD@L##FgPr%e+(I[+=T6n$Dm1Z:8&6e->hKPPa!LK_MHZW5=1XOE<n-!PDXtV$]Gi-CcZs,<Z"\UrHQ?AqW^kNdm<^NdN]-@Qn\-"C.u'ZX":BC%:NT:nKXgGZ,gp8=IC%:RQ(b)^S:(eB.VDnA(ZV(L/<Y!kbG$K60WK/R?5?NW`d85DE%7[^D!<qMe8#-N.82kD/c&XY0n2\AUH<M^%G#o,k2\jAUXU#Zn^J6f389MtETNbgog6Wk!2L9eURon.3C8`j-l!j,,+"l]!$:WhN(eQKY[H#rRm>)F<D2E&!m1ot*<u[0nT]:RQ%Q`U9Z&%'nm@>jG7J])e*<JKh?:(ZQX]0CjEl&Wd&:8-=,mCu;ZidbXQ]^DX0qq5Bkb\*.JME?"noAt[ZYRZ$=-c+QV4MW3PL?&)n%R@fde%QL4.D%Z"J7$/7U$JB5:K1=lB\%olI8$rT6f]gk\jRMs^gK0jnfh&S3(6o;?]a59"@PrAT+\$MU6.1iV'e(.=]3eWf7ed:r%6G((t$3A_fAF-:0@?*nXKepHC0u;VX!2=bn74_<d_tVQkdrgTfSL!QXaii%1"q8,!';&!=Xc;*T/?_8cGV':7#\#)A5#NmkK(Rcb%@pD\<AgC@:@HjY(qf'`8SL4G26"&9UIbRcLqTS<ldrf"R]]oZ^l89'fq@'&ah7tHo/I`+spZT63$E&82_:]OVEW#246e.U_odi?N%Lm@<\6F'0QOPso/7T[Fs8.=]'c#s_qQu"lmdc#X=QpYUuGA>&;m+ggQ>/]%*!)f<@J#[S);7G`]RUCa=C(bO]h8%jl4/hrDl\phZ%5nSH_#;8t$@N8O,5S-TYUg[SQZD)m,B2C-sQ=2eY:J2VF$2.eA@k]afb[CgQaOq5Zc?tbf"EU2]9H]=fMRV,NnZ%oB[bZt8Q8q)1%E/4#^:2<h:a:TE-*KhiRS>*9LM>=^'cO&Zk6Fc#dWNo[,TkAY%-D"PP[+VZ:V@fiPAU1!IDV$-6S2gU.!;:+E$YsUNc$767`\X8)%)5sGmInkc%ap*274-s>:r@^9.jaae/36fBE2HOTEGPX+JhUko7I<=_Jgs4bo2L9eURon."'<lUWngQtH]Dp$'O38)C%gkS$;5-8`%S"H(_X!LeK2P"D_f$mB+=2Uht*D^Xj!Qe_-"ZB>]00k0['T&-=0TErJ\?<hn$qt#+ffdPZU!O'"gZ<Q:Q.QTP%"3WBIO(3!=cbku%.T]6s$U(`P`1s)-_3%9l:LFjC8e<DF0%Rk\Mm:[i);gd\%:JnkJ6HB2RY-^_e_X<:lsfQu:`Ps=<hXD6SBZmHpJ?WK+WF:KlU_g!%/1"^V2fUTEm"[*dXn)8;BZOS>*X+M!QQG`W/li>IWA`"1M_7e#!bIH,mq)rnU8KT:eeT-/lQkB<H)0K)lo2G$&kX()`ipZ+Xo!"Y%PFea50%CofEYG@<3#%ghW#&kE`N^A\Q8mS-BXZ=SKAFJ7qB0'H2DlCEeV2c&"n#[cggo64j:6e607W`S$m:AY,?3'';74)pk4h;d%L7r.F-&NnKKS8i/CbXVKX2:EF?n&\V:on4REJi$3,-\7*!se&5F[Do;acXC\GC^AuCcJ0fL0%!^km]T.9t,/N9iZ\iO<)u;l&KH%%;qbXU<jQS?n:].N_A4G6?3AIE7aIscbd"LW9/+BU9ZB,,*N^Il+9uT$p!I],1H`qpAJj)e\1^`,2RYa4ihn_+ME]Ch@*UOYQN\0r%$4]>E0\$4cbmcA_7PF%CM2g;/n6LmrJE9=(O!p#F!6K#h3:=3gD[<RH0T\F*dO>HU731ZGC^)K7^8AG.&Nr4Ko.EQXM>\3FVARY%%Jn1:0Mj.ol:;;ts<Mu6?Yfuh0^I?G!+7r%)[2ER<13PQW>t/ehJX?5i]3Tbd,?Q&*],j;u%c'e2H1"K`NBUhkC;hp)k-X`F^o[ar%QS7+Ch&P@272_nD1XSUAFh<WM#un-QeR<LkckV-_$3kar!M::%_n=$gBqiNA%]:)02p][hF`:)sq[1B[?r>c^iICt5g_&Ke*r[.n%"r&0g9LE*n_gs5l?Q',0YPhNZL01?]3&qX4RbF`'PF6S4!ERq!E7/@-\UeeF?l4Gj>Hl]0PJNHfeh^ECA[n>;R8tj1eD]i3C>'-(%WZ\6^KmDI,1!?!+X@96>+6ZFFJQcd!P!RskoD2iNZ"/hKd$9;`NA7ZgHOQu%`P>Xg"+aH]@,2\&l^hQnh=!)F[&'=3$/?<6Lb%pk%gB2c7`BXJj4B%>SX>:)^0o[5aTP;A"Xt^,Ac0cmD;*W)d.H,SZ'h,(GS#JkohO"=Mll+;:m0rf_Nm7EB7Hklh+%Pd=$jmY5p`OA_%Qh0Eu+hqdhO]l#@$u_u>-<`)`LY'Ml;P,mb#6R5?EbLb=TT<]97=g,JE^UdM;685`4D=q?'OfBDV4?lhqiJbG_h'!,1u4*uASg^7%QRQ^0/b,dcglEk!?G@e>2$b@j),-o+osLh.hR8ndrF;&E&0=CID![XU>2ui+V`^V'f2621'?qkgr?b(2Ls>RK267D(*!n^)FdRp6%Pt&!8n5f"mHBrQT!sg^^8U3h)EZk']J(&jj\"kN%Lb4K-X[(#0U75&g/)G_"&j66qd[l.!G"=K&i8E%/F>@YIYYZd"*I!&I8aNo=%5Q8N,g?/m>j=G@@`S#/n98K4K&<db+QEFX_O`5u>DWO=T4cS4acs;,oXV_rfYTd.1+@4>DeOLGXKB#i`6g^V!Qk*"<Nr-3*nNsH"%\jaj6f;8GS\`fa)a(TG;[QTiO>3`4Q0A>UcPr$NGUH.-AR\k2Xg5O-u`ZE,U%H%B;.)Fq7UQZt49qFLb7)9ON`@Qre6HdB)ell[X%W&+-9[/u>sL;:LUkOlZ'@`b/[:7>EIb/Jb;r>spW,h8_"D+g?jD:>9^-"I]:pi$u5ipL1ZJK'7o].&ik)3DG([4oX?Tg:irXV3BQ%.Lu'1(&"5tHDV/rW;D!tp<>0ucj;Q:,c:*%[`@]G+gG49nZ<0O/ZL`D)pRXW`A/M0:^K3mD85+S76to4gds<Ggmk!kh3p8KGcf),%eTR_'Rc=7Lq$!"'f-9jgGs`/$n,e-8egOW87id/1Z"-9H<0+7QoWBSXC,Xe-[MoZWNE`/YFkfrn',O`>^''!UaHhd%H[DksKOh2:%nBls7;T/bAq[MVX7$0s7*F@],#GDOnmMQ5BD/:p'9c1K`@j86[[0YHDf9u;C)u,;fh;DoB]KXtA/Er0f/h:+.GTR\DMj,)$koP"o%11Bsa\=3l=rt]SZI]sJ!pn,OD_o=E@U+/$PF,)/I+(^+[O>&P9>2i5kh(C[dPe@1"Qq!,e]B7[#A:2<1N77-"@N"j@/@Nr#H6$A1%4P]=lFsV)UdG?u%+\#S5C=u5-5BL2]X%$d[Cu@=GZK8>nhEWun^M5rC`UDOE#(\M;LQi]Q7F\$u=N#bD_guGS*hn`U+M(bmUCVPu%,!Z>eNe#qX@M`pfO396+,q)jX[V:4+8">#\Nc$pTqf_jfO+7[ID("iLI7k!/BC5m`;MEZ&5med#D/ZPDLATFU5J22[4fk?bq`2kl%J15-`X="&kM8A*i`a1!U_'4b2+D2D*'ua)'Dmou7*D$@Zb.2>0Gq39qXS+gT<'Om4.^G(2AT7UI7Eu[j'oAVsQp$<NX[(UujiXHg%::2H5bYB\u?8#Dr(8lI7U`)%.TY@K@.[<P*#.s:)-.6AB@t2"@7kL8O&%?>#iA``RJm`k?=:Z&LpMdNV-%Q&f;e6uCrClI2H7>2(%ig(AQ-dc9YFTQOf.WAq<5\AFX0ou_M><r][oEO,a$5=NJ9g.(JiHC6XdOkfremH5t@Zt88'FsOo9nMe1R/`$'*'9Fhh="r1q*",R%H5g@nGALjmf%M+5[[s1ZL*JBphj&b=b&5pD^gs+"@KRQ,O6Mh&)R(&]Z8g[Yfe(okXke$5)>%Nhfo_Jk3D,$QZdJ)kh8Gc41(tMR%88?>:B)e'XDUBHChkE,'\4(K.KZ$MI6C$BaU,dBi#d^iM_j4_K;&!_uR;sKFUl@lfAZ'3s*L?aF`bQ.+D*]0'R;0s]TuOb.p!"qN%888?5mfFeufMEqr>r*R?*j(4P,*c]tBQ9;WEc'H$"'VAThuKo.0VEt+_``Yp[fYi:OE;=e'T]Sf$s2hs\5V:PA*Dg?@_c9-MAK3"%&>4:L^enmG$BtR6"THYX=+tU<KL\H!MIN8#PF!pu)NV39'!rn>o=9*L"CJ)APNej]UfMGi"9"Ff,rY:RQmg!bW?,`4Jk0aAS?<D!%dR_N#V^_7/ArfLp?Go%_H&CnEEl\U1b^Dd\5gpCtIMXAo`-ul[Jm?`de00Q88bEF7`sKCU<\ttmfr5=AYCi`&1jSa&%R9[k2^O3E%@C@SAZiZ):_(pW\HfD>h=9]5/_`N]bWU\B.WQ#>dL1Nhf0e>9K:hg%nmK+\tfPm8-Iq]K&W5EPI8iLq-EcL0fMKTjrWt(Z%3!<[]%lBHEN#'R]^2oS>=m^l!@%Ja$$@>imXS[%PNnSfXGpq'pMi-L(64oDfIFkC+q$/2XJgeit2=WZa`1:Z=TSaOd*`'?dp]S_a?`@tW>%\<u"K;"]e_ne;1?Gm0@LX0Erlj-feLPI0rMM"2BK&?-`=je;W0hCeLs)e`26LHtK3S,sf#G+)$O,Tc80T2;$K&X7dq:Y'dHlm"FC%3R!RH3g/./]-@@5aCeI'i,)on](c6/r8(SI3a-N/Ft?*O.JYRSi0mo0bQQB,G-aTh2%#5=>%oPZ5sP.#[:aKj[m[5.Q?&iUG%+&I%''^KFZYa#mF,:@lFku-eJ+5f;NY=#1aP*%KFZF$3GRIO'KhB$b6IkfXrg'_]@_Zck'o\G\.s^QPNEjkg6au$3cM89b+5&tjCu:E=%$.f`#]:Jm31NqTcSK*Ij_YcZYGjb"@i^-H^\k:3;QY=.EA-53?mFCOO1bC<S\g?Ro1J\LX4=A([E!CB0D^[4o7'4_$E6Uc58cG#A%mR\+,6lMWWGZ`OX?LUrNLZ+mR>&K^\3D>h*ZGWXk3[1?Alk"S&-ARJUh;DoB]KXtA/8:/1'JZ?p6pLAnb#P+<@QUGGMh3Xp'SlF6%AL8Mek@u/:rQV&ZHSGJaB>jqdiWYFt$n5'BfCPE]_=2&%n68`#Q@fVE8QCLPB5DskeE6GKBi.,8$0./%#R%E^n4CW=q1Un5OWsOt%0_9L[X)'Ji:G4bh<S4iT2GO9CB^?4/VE'331;&MT?LuWcF-F!PWd(DYHYf3'lp/Nd1RmU:p/J04f],_*fR]Sq4J6&\4?R3k`")5!%ACiQr87u^"9+gLD@1)tL*Mt5KGF6gR=XQ_R4&A56/[=8sMK?JpB`[K2Kou5^\NAO2jd49CdUo-hqBd2FYqLrC6-Pn$80)o_U22BK%B4#gu+_YK)3q)&RP1WT00Q0<K3]X=8[=qbJ>1MldBmuLB7A:YO.T4;;0E$'fYn'Us]5uH[dI[^P7q&2^L[MMQpTQt3::7uuB);7&%ErqaIVcaIO<arD,\Z6H-C*ftI/l!Tr2B;;G"*P3_-m<iFm8B>a`tkfKjuW8O$>bY,VK!*d/.OVulipmRk:krc</6/<kgV^8:+[He%D3K]iMW`X(]>4^>>#`/NW2=2T5T!?tJM8bu.KAA8rWRmg=V,le]V7^16>ks-=ea<:`)3I5)$.WM>_Y#Bg[f'/$+@_'/Et3:)4N4=%=_f7G^7M#'R_$<]'?InN.+0O"b@/b"@"T>V*Z'!p%&W929A:%&J(cEH7``YG>L8^Rp?S(o)=Ga5Y7EN)9B$u_fY.-=1c:f[AV[Hg%loj`h[#d6IOr^CH)+$51i`gjV[<B_Y+T@u/Z?q'7!?f;9P#0ScOf$SM8l2X`YG'l6-=I/gR4OM,:,B^lXVLW0ntZq:CdYHFA@BhM%K?_>t#IBpRQ7`r%$ap?"Ftu3a4II8@2RAnYn76iEg1@;#7qeMJ`i8!MWOf'[/4>!<HsE)/[Eo$7i>u1%k'TeKYYuDk4nS08L[C&:%B3)CQHYA+]q#0BVd\-r-JD3\*PO<LtY=Oc#q65_ZC3s9@*p&tp;2;Wg>-P.2[7/njO/[*ZB(d(qqK%6i]`:qn,[I;'iRiAC=$25o%Tl,f>O1qZr(f:ek31JV(.cfLc$81ODi:SWd+Gc;;NB1mq)iZQe\(fHLa4"b9>PurVis<89_Y8ocY^rd]gtNu[l!R_-SPWl%fodc3%b`YSCGa`c80Ot;j3%oD^qb<ko%bclL<b+%YWN-VKZ[-C,BQ4h<e&7F8_6rTq'J3$u471171A`2[M(M-J>V_I*3!"ng"8dlh%Q?M*%DX#<>NoHnc2oXhD-Grj\O*Hck/%9ICHOTELiSD3"$'8D*,'il31A:,r&V[GO_A1J1iangOT:bn91k#Cl4jARB%&MrcBi-dS-0,`&%E32Aj/sBqM/Mc<q/N#L9Z/hfb!laDh$Wp-PpukQ<"tsFD*<"i(*]IL;Vql`ChmCh&da5t?Xa\)oRcga%Z[H.%CaPJ';m,]QBm_-D%G-JqKjppPm@#_sIp!'GGdgqg#9H$*c.$*KQ4F<cP3UH5P`loQb@QR,P`dn/5W^1K)enG[b9iO\c.8;(71hgiQVDGpD/V3dTG,:(m%h=_9OAtRZ[Ru&HWK80Y<>3)`Hh$J[nc!kIsP@a8[4AQs-Ch@Wf'F9N3%3@GJ"'aWuA)RCn%3F>;aKO<`g:4$/P\O:3WHkF0iPX&+%r%^B^-r=^Kl(24oG$H-bX9/f2S2JIIMIIV#,R]>E8WkDogPT'u9\tc2c#j"pdh!e`"Bc&%ZPVnCM%-%pZ**eua0I(oHPAsgfG-pn%1>p/+)8]7U[IsWtgSuBP@eVdXHW`U6q2`J6%^FZQ4Z'OHV?>=k(FG9_L51I&Sb!gi3nLhD4nK\\rg8?\1Z^ZC\g?-.%u=F?ZeE2p%EEhF29=S`:jhbJmN3EF.UcQC"@KTOff7@d`(^^JMC(W3nJhrhZXp8^$Q$=:pg^gj5O,$Xk:`_P],"6<+*aH/<hpU6GhNu.:-0c:H%qLM<%)#+00RTKKOIZ`ORb9C42G>XBJh:!iOa5LbD/opT&nF6j.HnB2*hjf/**['=BGe#qhN:'n'1%c>G7,nc4CH0!%>;UgoLRIZP%Au9X:Gs@(P[r[q)cXGu7*+n>SR!CcKRC@7))9uZ&4GT@!F-rB@@:hKSRC@7)GrpeLq&F#'cXCELLRGVmR!CoORHY]'VK8,@S(HJ$%@RIW0YERPC0daU*>u9/1I_Z4j`]QsAh$XFoS?D8KA'(\./jO=$6!b/I:>ZXP-BpY!+q6*R6:?p@lbJPDk=>^#iTs,KB'SeFS(:\u%#7k1oO7#k0K(;c!$P=hSc.7n3m#-QjCQ&)Zqc2S!)pB7:_m3FCQGn"<TV\J-I:LO'/i>t*?@]?lW1am@S-D^f7]cnS,e\DHVJ[\7%H-!=b-+@tMs!2>=`Xn[Thg"8%Ml=Uehk)A%4O`uH.phT#T3]!D;.<9tQ^t3_p9AZRbS85`b9DReg$ss/kb^V5Fn6Pleo^IZKbG&Y%<V5G[cP'.2T(Hu3ImDEHM3p5f4&1pkAQeHhd*!d4Z;[!C':_cqb5V6Lq@`j8^S7cl"Gd2c;GA[EY=Ol=b/3kP`1L'.qsf@0$5:^*%f=30C`/P3<3Gr](PW3_9]1HU<NU,GD3tq,u2n4-l94%q_LjaDl[+jY!YfBH`gWWbG:J[jWDOP&GHpJAZRmCZ`]KXtA/:$L@ZCgB^%Y4rd2Z[@,7c"\D%5P_pYZZ'N.^3qQjGtE^kEN2ni%3_W/FE0]geTu3-\_MI%jD%cQ(E\U0LN6>WiRFlpC$5euAP8AWPIin)\I]_j%h*K9UQY=.g!g2NadBp+&D$0Iep]1-/e<[VC_A05"<+FQ:^N2']AZ[O>iX;("(#Iuj;4Z[s,a:,p%&&So8FbMT<O1udk$]sK3Xr*d%0^a[af!=<\;jqi;a%qSdh`tfN]KXtA/32^In]R-Q/"D;tlG=>B-qn$74%3T8[VMT+m#D'7[S$ZOEI'T`ELCBdg"f,VFpGBC6);5%%+^06;qNp#GitUit#$)kQ.f_jTbGLW<c%\80Yo1mCeaP(#DhjLuef^'mIdZ`^0,@QADD,9mUg$\D<ur@^#B['-":hXR$lET/q[Ljp%/]Z@NJR!bJO0_?qFIriK"02aa`d9Y&c_W$rKZ5-"pB$!_'NLe7>T++^V0b/$AOX*QH<33\e2FcLYD6ACVAX=,[QLK?FbT]GQ`Y"f%GlQA]FlV=idB'`E7cToJ)DT<m"P6LU*-8KAE$7YR6M3Nmbe:s1!UVgc\r#HRX\b^G_m?T]PcGa%Xl9U%\U(pCkk2c0@SO<NYCeIS%QLMe8kf)L3L-^%SAd/S5a$f#U*CcdET$HlWZGEEp83aB\T#TV\E!,4+Ap2@9,+QT6\6Kdnn7Y(sE#=L.-k8`p\uW4Y+0&,JJT;Jo%d(YO:CnoSe]88DGL$10*]5Va[!/esrq,MjDGfu\lKWO&NJR5b)c&>TRiAnF29re#-=9H2b*p7,j>dYZtm=N'5`*\^K!pC-sG=;4]%LEG(I<'^3C+`$hh.darrF>Y7d7Bqk71;Qchl+Q:tRse=)q(]S4PbDs^#R-c>=5jMmYYjuHM4;*pW3[d.n]_/X94HR;coh^[[J^\q%Etl[NG**5b"Vq($9h>gfQ+HQDdD'a2:hK.=%T!:&93BqSS4""e\K1P<h_.c'<qss,f95],n9pfGi9]a)d%XMHiClq`T%Po'@Ugq#%ARcV)0\do('#ft[,cLs1[VrL0He1-06p13!JTq`<6G#9/Z/Ks8]/lN)b7UEhG@;+UCcI%BL1qmG60ok9$DU5R)oU#S]VuU>1Ye*^%FF8_n=cUZ.p"!fcjubL,fI20kj5U%B0m)h@*:4Ht+@b>bH[LI5;ip;i]g3)'[_I?@,eLPqI(][@BH5gVZ2mfFdsGLAG3@U<9U-&B%`9V;m3F3A9S,8q;C<CZ#2sbL7%.Zr`80^3XJbHu$cP)X:<8me4%VEH^dnL\R(1s[+C`;WYlcf42UF\hiDfE%2?6<u1Q?5o-1g&2R%FIlc8r'fL@c3sr8LT[NGQ$Zlf1>1h3CUk6-BR(-e\9BMu<G;ZkP;q!LZjk#@*^Rh7l=&oCR8)="lEm$WbpupcGI:I^Urp$Hn;35:%j^u$U7^!>G]<&R3biQRGZlX(.LC+iph<"N)+SID2IV/n7gI+nZ'BLeB4d8mj&_ajN?[&+-pJB]L6+BYK^8a><,9f+mN,2dCbnl@>%5kTINc?flRDkU!L[,9\t`mDcoT#J3iW2bdSM4.HXS!7Ocr"VbsXPN9u.Y^+Snm@@C2(4%V()&X[m1fbnTh[ISC:,VlGNpNQBIeXV%KYpuE`!F15`XlV4\7.fC8p<J6gO[1Qns</VqG7C.XkTYcHe:Y=35#^DCn'&4>[kVJ1G=;+Z$R#-]UVEucVE'MR?s*KT6YFDQQaMt%]UY3%)<GL;9RfHoT6U_Wk:lFR`u#9W9H=BGc9Lp[_"O6gh((KLoAXkeI,$M2:b34>1UF]A?6<u1Q8EO[daB!V>E4g46\K816LH^#%aM#S!\^qZApC\_3?LAERgKuH[_@f1$Z/APYK\Xa66LH-haM#S!8Hg(*(a3+@OR5DgCcOg'"u6B<.u?t]+8gn"3o6\,3<'I=XG5&3%qrR:LccC0]]H@,VrWR0ZI[.V44.c9F*o":q*'8/`GuQPd2$bAU6%P&+r2pf`SJ#FY\i7B_g07\=M;Z?SY]g7M&3,`T'=T,;8:!\X%Dk]XW=Nq<Y/sH+O?S85.`RTR4X+[;Q_d0m^B^"fca.]CZmV]sGCl*]`g2,%`LP*u080_ejM_%0Qiu*1$nYLlc&W@2adlBEB0=bk:%o(u#fpq-tr_,b`AT+f9XKlBJc<-W2G'^6_8X^NR\B"5AH[t^Hdit?3)D[ec7@EE]8(O_3#muo8:pYDSPD[f'2B8lc>0ZTYuV*2IK%beWlW^O,`q6+2QXL,nX'+8N$I:q5Li;24_oYbkd(ekl/W#T&,&HgrJm1i+e1I%_muK[!HtfSk?uY:7#$=5qkb/_.$3!M:mK2KpsM%ABkt)"5^aL'\Ju4nW)lW!=i+Q?=adm1D/-V<0Ho^>.d*sabhfViK_Y3QJ+^EF%$B^ATn`iloF'j/P!IZKo"n#rIgO]iiQG'>PEq4%A&Oisilr;kAe$.D7_El)Gj?.86>l8Qd"kc?b64=Z^nC$Sig&=g]WroHh@d#*(pT;f&qO"fM_^t(8#R^k/hRT7LG+A5F;/*'aoThO%oWkB'<&S(7;?*rVKI(mhJSZCjAhmW!+-uAAB;R3L[[Zcp!Ft&6K\nrjOJ>_Tb.sTG;=3#5Z#oH\Y.XI8d26>``hB5-P+u7jgnq*W%\"SFF?0jGckS?(GYk,*)^lH1uZ2K./D(L$UNKXp8mQhP$Tp1=JD13E=-`B;aTR*)79FT3*L%j:DG)u$k76btTG4h\0F"l?CLe&,Y%fg?@<akSZbiihck%BV<9V&(s]7+Gq=-,dX`o*IE/5JG'NM*Y^Yb[0XU&li6>B`tQ`>r:adjj:nRJZ7AC+T7=e'n[LH'9_sUUAV_<%KB&@]E?DB'RKghX$K6kOWGlTMm*qil;j6e2e>/m=PEJ[88iegYl-uN);j6e2e>2/(P@CF:-(LEgp;oPW5IXRTP"n_D3]/ANe>/m=%PEJ[8b(ioZP#"dZ:JFG@2(@e>6q7pRLp'(,e>5jJg/[QY\Z5u?=1b3dJ]7$]e6)*Y@.\*3Ym1d,8fV$EbE7\CaC(&WOL4"(#L;j_%ZLu1f*o:S(:jLlif[CV*a^7@LHWP77(d"+oR<E20o.EWZM%.#a^+?s:1nD8S<=\81ECc3LD$mUJg$3k.&It"o<]V@KMi7iLleHUc%2#RWf-_[?(h=mB`)M4Q[G#NA=oVT,T5DeHENJ]eJ@]aU<<:HR,<?4k;<%'YWbk?=1Yh<U0o4.%]7DLQ.?!1jYXkof0p1r%K8O*EB%LG)7Mn/jelB]\J@5YH];0E-/UZ`s-_f5Q.7?N>+qR9i0cIr:3%;Xum"O!,G%\h&Hto/"TjEL*pnppqI?3Sa'Q4PNe#Xq0!U!`=C#%?]*[)`%IdX]%<jK#)&k4<+kmX)gf'GHXtcZ]QhRVls3uoIM0!r$P+!VD"r,`NA5I$%gWLL6IU<kA@Xn'64g))BjZ8nKq"&iU"d,n%=J>r[8VrB&)=k*gQ/m7a*p^^Z>oJqQ5U;/^FGHEZ$NGu?FcLN]q(0[Y;6T>ob!3aEOBqMtRT2$sR%T8BU+iXEk7D$r02o,nn1@Su%fPWs`,`X][ReCERG#PMb`N<^hU9go:h/5PrhB"/XX0j,r<M"=ZasE@"K:?`MqHu7ek$_VNraJ`)K.hsY*!5+]mJ7.LPH0(SUgAn>%IcgV*`[d._U4ClhW,\A*TRD@uVtl0aN"Ck:=:G..><[<Q!sUsGm+?Ms;S,/lBn:Ir!=gcu*2/*:!$%p\l[rptOMg*@U("1Q(=FRH%>N),M7oBol#ulRA]Gatg'R=\anBgG6<OA\iACm:RJY$WCJV3s[443X0LSSOd2$tV2KX=sr:c>oh'^]Zpf2KNg5dr;eAtl62X9*8*%?<Q>`KsL`M+niMbM'Vf41NSPJ?jSZDF$0YdDpk2qEp1QUKWtTCmG!N=g"J2<$J<p6eU8uFC[&)-q<02?fFRUD*:3s;-#o^uBj2)P%_!Vb\)U9?<M]OeqgjTpZ[KoTL=)15oW]]T>PY3Rf"uk<#otbNTc"5d=r*iN'j1a'?lJkqa2H?tDBle)d"`j9Ti;?H&U*q/"OhqUK%J6t=iT$_Hc6MCbtTtb>L`=3<k6XE4s[1Kg'._d899uEu;J2Y%?E!39d)B]96c-H09)@adY3*2?\'e]qPI0C'D;t^qsU'H(hqYXZ]%WehfIC8sjR0?qn9qR`%A"rJo/SSIM_!C+ST%etUCAqN:aF9Lcl+OP=s9elCnSr-Gq.+J+dFgr]U>Nr*!X9*Np"80W.9W:;:oIaOX%D-hF-M%+TCT-"C9MDPX]fB99^U-Ot$I=@T]J?qSTc@-\gU3@#uVgsQImmtT(X+jCrS]*a66fiI>Ach6HSEEI*>kh,^K?g<oK;f!Y%ZmWZ:X0PQ]6CI&?ed@A/4EdRD"W#QNi8/;BqHu7eAsG%*B_J/h"epbZk6Fc38!":+DDoXMiD0OAIWa'tKAqc?"&(`5LZa2SMRbpD%2Zp@2S=@W>e\8btUQ.j0:O"5]+4H`Waq'(c7Y#ss%j-8"2+.IHCT,9U6\X*>p#p-YmYYHog%E+o$Zh`Vas)+`@]j:`Rt8-\5#cPW%eT\ba^rhh:2mMk6^BL^dpXf]9--mD]q`s=k!k18\;BKJM<n^nV\%"VFMa.9:YD3+th-o2@b(:]X0\]DSN\NDhS[Sa)-1JW"[_Z%B%Hf[[+UZqA'mJ?&>=]AIf9XfYPif\/=L@n.$a<o'IO<`Ge=qr:EJ/@RT(Y[MrFTu!3.+4']"+qZul;d[0fJt]470bWbQCCFa)aadQ%[8ph6MR0HRZ,C\<i+Dl!51iO[3V5BO?i4,Qo%!_[m"8*Jo4oX"7t&!6<fHn.q"(g;J2joK@5T[r7VL8D292%ud_;3geJ.IPO'c45%D&Re*q)5EkV,2(lUOi9Ai^ICNN,1jE353n-p,sCuiUGiFd6,2-JobQp\_-C-;A6_$(q(>rK3u)a&(cld9XEc`ZCm2ln$,$jNo<#Z%+>f0"&a9lqOVZKZ!aGue8`+"P#7fOe<gZAij.I7ee.0FbYs"B63go,4;JA1Zo-Ql$Lt2884aVe:BR#-B/_.*9a5q.^S/%P8j>VPD%&!pu=X.(@0/NVJB7t_Y+A1uWm!-^]7)/`5:8MedO/qMD('uOXjM%/U&KA1<2"f'F-=DN1?lPY$]jV#PD!R3NKIB_I;c"#pL'Y^q"%#9*B;oi^]T&<t)`,4\<M^?!$dqj'K)0,V,/iF`8bGC2FOmJ2KDl[p)XO>[F9qK"HbP4,2+/WYnJ75((+G,<PUkuuAdQNL$-*28PS%gJ^D@&(@6S;172+MVXQ90"S_\2D2<U8NSIMV.>fm'WQU7^/#S?IYULmMEo]eRP`RIXZa*CN.9l35CfH0"Odsm)Gq,(ASh2u(Zn7I%AbqOk:`6_c9Xd`5Q.N&&S1A3uQg:GLe.EtQ42GO`]^Fnp)e*.r?S;0F1`ZI$hmV[V9$X.\R%2^&jm$!VN=fYa@-7h$;JE1c'9J-o%:6X,eJCNN1)<@)OO_1C\fV/P8q'0_.l&Qg?W+'q1,5('j9E/D%'cGP7lDd#MQ?n1QmIU0^1U6"L+%3st"&Dk'2+BfQPbs):d^q@#%^:qIXW78K$>RtYT%pNij'iqIqp1IoX/WF"2"eh>ZS)KYYPdK-U008a,jU+1Q;/7u!WA"`O=d[GAZVhp@<g4-e[]@^3N!eORJ^!h5%IB],A'!HG]9O:7VL5RVrIRiP][87*gEq$+J!2[XAgC''poDH#2(i&Dg"'/'t'<87(65.ui"d2n/0rE<o(j$T=#/Gd4fQ<RB_Us\P%j=Ou.mb1TJjPS49'gp;$qd#FS&fV;g:Q2?M'sJe+i9fQ-&fqIoX(Nn1q`qP3FP)u8iHNP6*7(*H!Jph$K5=*nC"AKcK+[9lFN*!C%L.![9);+='P+/qlNDJ,/Oc_-=\e;spbIGC5p3D(jR95VZ+DE_R8NQodE[^/pQlLH\cYoHJ-SVJ9h,()LQ?aSMA.<>ECO0C<T<Y;S%EIP]]1YeRTP#eC+fsT&O+J-Pik\C6km[1tm?5u]e>&2i>it]UPTN]372k\hnY7GfgXJoF4qL,$?5e*3AF4tc\Mm%`'-@h\!i1i.W%6-I(VVSNeXm]eKI?bQcFD-dqY5$)?537/_fLI)6Sd7tA\`lD$`9!19!EH+2r3qe0rl,Mr'[!7.pOqhK6_CM*E/;;Q'F'cC.jTr_7%=4BYGhWKTjikhBVGFq4m&629bkn9u7VT5FRQm7ui0]3$q:I#!pi;"3D_tRU&>6]c>S2dR9TrQ$JD\"3ZRR0H_?8X.eHi<@Y&Q%9q%`(Dn8,3g],<:ROS47KVHDOS`"MGDG#0jk")JjY?\FmR'X4!)E@\Z<]WXR_L=,'qY=!2A+`5dr#!Zm'?SN)3mFe+LSeEu9deRUijm%`G&WuAoLq3C&t*H_1tL6?Dq8s%;rW%l\"$3RZ6>A8IJ,Bah]=i8Wi5kWu6iN)8LPeGbjR9+;lcR1Y(.2H4L3[T7nLHkV>HZUDVE/%::8+(0U'ju#U+ns*qo*0W7*muWGmh;f'%ZP[@i1JW)+[P)/QnmPXo7JS/unWP",*ac_/#4)&:pdl!6G^/qQKE42'.6`@,pd-@-)1%?!'4&:i$>=Osnb;Zl0#S<EGgGL=K`nWn?N/+ur"Ko+0DUOV*pYkj!Bs/B83;[a48lc,>eC:+3hO&kFCR:)s\SrX=NB=lY42ps@dK%)&!qb!h,Mk1b_Ds9PiE=p!hne:fW&"U+k#GnOHesa`h,GE\RumbRZL5'#be8N&IRGZ@U_7?dL@>N.c?/`CV>[iQSjp9Y';-\RlrX%>dKKUC\H_.9`dbdg&!T')KX/PgiH2&s/SK)GN:UJ89ru&E_YkmHQS3WB(%A(U]ear+lEAqV\hQ\jI.meRPSBB=bq@L2>KOHHd'X]%Zuc&_#I`d+I[>YEcH]45D!Y?T1U0GAXOA5s_HDYp`Qu8L&\_jfIAu379u"O38LS:Bg-/%!+WV-3gd^6GP!AV`HI8&7fS#\/='05A%5$U!;KCoX$edZ<$dHcG@/o+odpnZ%P8;_kcZKX*`ohEB*KO;!1`!3;!$C3^COi2u1'eKe3)HS61L7QZC9qUnuq)+o51C,2t8ZCua%;?ZT"-O]:uiq>-#"W><:)1n-P#P*DN>Y!0'M8CcMlL.l36kPpIE5HL=3Kdp]3%?o\,Po=jgbfM]*'-J&Dd%()BBrO7&%73K("\;q%IP^GK?lag'(8U0r8rE)\9L`tpL'La8;3YJoW%+oLfe!f6ZA`u^GEDg'F$RrmH/21@p>_PD?:j-*_HRM4f(E+TnQ]Ho,_pFRLXiqt%l:Pj]!/WgWMW?hhY.A1t>7a-$1G>:DlJ-Sk:LG"HgupSb4\:73Eg)bG<oQuK\Y&^T(cA(i2aJWVCj+Gje4G^s\\5O1Rq"(Rc%[!1%i)BiOP!(m9R+u+n`6"QX(asScp.T;F1\F^$Nq'^`>,!-;SL!SgLXe6TE-nQ+F!CcIAeJWJ-O>Kle7f[N.k"h^MpaTH?=8eHosfpD%87Ff24`A4pB:n^Z^:WW4psLu-)#.nhG5Gi090YCO/q@R=YFQd0lQ.!HS+3B?M"[/bffbi:;SNF>A,FMnJ2f'@5\fdeVbALc4XkC#%FcVLmMaZpJ5+)9;>*fFV$P3SQ.JLr(2&.ReK7(^:F<jG^=!Bjq8lbKKg1h")/10T9I1712G['(,"bR2EQ;P(5Lc"<U8slcAkKR1c%7;6M,2@Yh:ah#_#>%8j"j-fcVI;Y+=HrSBX7#KX@^-'`rZ_T>C*g8<VP8&Dmo/[[W(dL]LNQSS$j;]5nS3rZf[CQeu=J("`Y!]);%boh?G79Ygs^n\9LK9$0bBu(A6<>\3H,g;W^(rf+K2(_AmicO>ZRN/^BB&2BWqn,,Fm'>^-(ij_e,GdL@^>ODLMlL'&XO3LQ_rO.\%X'D:E%=#?j8?-UCn$2hq_<G5@]q?!Ho'`,jJl,-Z,[E61(O!!531U!iDHUN,$o,95h,W^][?bC^keo<X8=T]Q/6WEW&Zb:7HZ8Cf%1u'"\iY9._hWBjO96H,FJsHD^P>FQu@D$>aX6utog&e%SB[YtK7"ZeK_)7)X\W4Z1&iL&t0*\Lh3s>-ON-=kPJ5@T(X0iq:agI9]%Dh!'IhBE$nAu!r_]88Cbh>lYb7@K/BeYTU3Sp/CN=2C#TIRjA':M"3o;rqiNO-hnXZ!*Wb(g\,-g7BVd8VXi'TqiE;48AYD(B*Sq%e.7\tJF5@9FtX?g&Zo'm9LI'uTCNCk$//IRfg`.UFq\XL"=>(V+Q9[>?N`SB3]O1"71;sT*gq?83+\Y5ceBE(AmR#="'8tC*;4&H%F^oY._aFR<7tIHN89B$0B3L%u)Z[?Gl[ZQZ@<N<]_D`t*GId9dCFSB&CpHqI/]2CK;%cH:LiWgOgfGblS.=)VW(7^/G!n**+>OJn%>?.Krm=psSnrmhleA20FZ-boYhj6@?e4:1EQ7.^!kjZ>,>='^f7THi)R=iGTkpTB%5gB3.F]Msm4EFTEdpkBNf&JAX,)HbaND=;Z%H($"3ZVto;REhb2M::f,<P'H`YmM@.MPbsa(tVs9L*)WlHYPh]%Ir)eD+Q-i[:*Go\/GR/mg"3EL1>]mR+k?&bmS%9pUf^i)O&I?%=eIQ'Pm"t6J^!h5IB],AEcQuaO@E-e9[i]i*bcqaGD$k*/=0`eEs<!.T;b;'"j;T(]be@uW0G(=;'9S,BXZjm[Pa0CEa&/`8ES#u%\WE+W#$5;0=lesFA$l9(+jR\:M'Ve!2M0J,NZu-tpo%JJq,pI;15R.e-8EpCm7Bssh:LSa;)=!_F%=S['9A.ZHOrND1P:[ljLR\$%%d[Z>Tl>Y"c]UT["4GX/[)P^#ehd',Sd&\9Pj9YeUg,f^4;DTNFIjh>]Pq8/=*lNh(@_m[iaL5#;fcPM7pIr.dTMo2N`p5\\P\Z*%ltK3g_Adr"E';0cf7r6V\(:-/ql)J-0]X;cB"84H]J+'J1TaWS1iu$k!eP,-+E-t!IB],A;NE*c@>6V%g6&:'\/2Q?7!DfIVapUI%iR/H<2jqG`JhK^Y?&dZ]Qs?)b'2p!7ba#t)68\pVFE:,066)u.Am/6P"$gW;`?kXWb::k.o?&9G@M)1+=;&PgQe1%m@R$AXBR'@D%,^H$VobI(unbapQ.:VUUiQMG`jeSi(oJPb8GWL2P`_Zo\2o\>5G^Njp*RJU/lP@I%-6u#EJu19jSM?KIF+c5.,_7K\'oOlHZP&c(%b[&bsa&4/3H5@oj`.j'/2*(j\7=)u)E4u5\gFt#0Ak=DE1;=^l"DC4Pb_]<SR<Xs/l:+R4lLe@J=Fq)^Rn4XU8rL]:kHqU6-Wu1C%9/:<1!u'!(C.a7r<0lhuCt+rSJb$;W&h.:rc2jtm18LF&H???S`<pTWfYZM].M_DH/U4iLO2(.g]jDkM_^2Lh%V?/:89G`KK%J6!%Kg!.>*8'[^=L^aR\A>eeVNV?WoOk'Qf1C2PV'.;u8Gc,G8.hn.f-m$iI!LT#T[u`f7`2.L]c@;)V6_,b831M^e!EL07YRuH*fe-H%e#O?IAO3@CS1R8UD'88r)OtuL=%k[_bDlKG-PcTJm;-QFXYQt<PpEGd9s>@9N9J7jJ#%n6G\UdXU[g7\0r\M##WPDm`O3\&V!HN[%EBQ)dc@I;^3]p&E/Y46pS,Nhed-qF7Ob*3ONjRN'_fa0Y%=Ft]ZQJ<Z!7,a2Mpo<uoEVKeXanf07,"WM)?"I/i+<qA51o80k-<mH%U1<tDd`)7=2B*(c:LaFUU4!%L<f%;pDn]QLR;2)>__B8SOB\l%OhcVB"R!`QH$04B6NLV!OnlD`!c;))Atj5RXAto&ARI$eGAX6S%mGE#g&8u`;h+]3hgRk(bQ_u70h/mhJ47MWY9B+j)#BKaKT:k5.i6*>4bomR;3(n?1A9-."-QBE0NA?,3dRMd2&<aI:X<XV4gm0)&%R`++k_'ETWrG(XTUjS^K[;Y>5d:Gt`DRL.(<O^s,@PC<`(_r'L!EBs;)U)4:&fk#]fdW@1%oSuE>G8*]c,=4@VOf^6PH,0<eh)b(%/O8kfLMOGr67Od8Tl\ra4:4uV+LX=4Q.<gMjFl=\$8C!4X`m&D8aP&<]_Mm[oqH&^e1UNr`Co\i[++!@UqTeF/=2bee_!$;h9U\h%?\r4;0_ZuQZjMFBGS(rJ/DC<]*h3@G>"P)n_XLr,X4/iF3IP$Xrp3(8ZjaD!"\L&FiIQ!Z?p^]3K]BsZVKR,:>IjMaaZ-n_U34%`%:L=lW@Eo(&*<RpnL2)p7ZGX:!\e=L*)l4PDId2t8a@J=J8i$uHJ`!4>bq$,e:rTn.@cDDWadd"!(*h,b-:t"h]m.ONCsY22\hj&#%-TXV44EX3ar*qo*%/3lR%1.9*5hosS:s9>qA8-a(<,G%NDEqD=7p;$EB9!JSh"jEBE$l,Zb5mdF$2UK2BWW?-;PlD=X)kjR0]N?r%gZ\=HDIQ<[3&kCd8Q@TAkrX3eZ,"#!,E-7A7P\ma-:Oqs]Ra*XhE/u/'?h\Y,-=,ai8XK-P4h]]MjY]U-s0Ng0;6O]dIn4FAXuN<%aqVtA@-:gg6kUFkN7+[@>R41C)n.-KPs?Fd"NsS91TVYCZ7CgF#bd>=9Q%aYF8!%-W`o'<]9bhK,<.hkj+@]H!/c_EpiV-rCf-#N%/Dq0K;#slS(I6B!4(m6SP/Ff8"G(MpC?Go@TpoMOe/u_K>IPEEh3*7nUn4Aq]X+67r,Xj&<'*[;"K?=a`+D2C:Jb/krX>_?E;(Q<%9$m<Sm(#Z.#T@;Q[sgl"1a`Q1*EO91#M;jeeee"Z@([LP.\fQZM>_D/Yb#;d.go^#R]d0J"mt"PM]R6s9t!j7<Sl""CKK"Tha<kB%V_O2d[ABF4.tVhRe42N5>@[0.(l\4l+H40hEDG]/;l)&?@HZFM6i3B:aOm&UW$VVVT_VZpK\3/B"fik@$0Sgu('8&T<?"@H=k/Ld%]fc6)3qi,d71h3^W-s0ldBr?k]Sl?t/8u5XE:`:ino,)MRG6'/^Nn-4j'[@kd0(%@Q7*t-<8Y:@\7,]n`oC#UHB:#-&-uaAiuS43%*s#T'JF+BY>E45\9bGa&R_<HnJ:#BME%`XA6=[f/4OA*Z)'q_:&gH7?;?SfZ:?aJ7HB"C:.0?q^"Dmf<fMVi7'%Z(qcLE=bilke>%]@iBYmbE.adWaiaqUibY&`2^G4a'!Wd#/TmG'U-d)S9e26Po<sC%60/28cLm'PS;'9(,:[CskMG@HgQqF+31UR_g%a3C.M(=sr_$%3i*H\cX?WUTL9D3l8c_sD.uL;>n,8S]%!tG)Z4)MV5[R)c4)tqb9A`YW`9O7!C10VNVP-g#s*7Jfn(Kt#'tpm)08eNmP"s_Unkcb%a!cc2r9h!;dji8(];%&[;VE@>\lOLE-:=Sbc'GKgYYS^bl=Y..V2g6LG?p/QS?[U1_m1T+0:SDuCG5:l)>M8SBrQ8J5gXElHP/bN%O`gl@;b\96@G$1j>HM:Vc,+QU%/iJ-9pZ2$Y;>Lf:.l;F]"uYbH$upMA]_72OHe/U-uVjlZ[mYPBI/])oaGFn$&G7j&JbW#I)b(<%Opk-MZ4e#Xi2R9c.j7@k7\lu4>pf"-$u%M&%%ctIBFG*k!muY.eh`:=[i@^^VGfoMPmc#NPLn&O@_!L0<h9%OOIa;K2L2nIGbth?%.(]ZCZP*fX/\@au$<MbC>qeL$'T5^F9mgX$JOIWW2M7]=X;_t&^.'NDKL!jRN?AAuMG(V2-n7JtduecLg_neJPmh00_CM*E/62/d%dV&nSV5.d-MN=("`+W<I*%_Vu7E`""BN_b\/^%bRdOa86&K0YQ%kO<LC><:*/6e(!L8!'T;mc1#GJ^.hBhAE$P+uS;.9_%5.,8X2%f*@e%,oan`7(@'A1_fr6<)3ELeKfJmNd%V"`TR_gca97=<+?FYG-e6[+s"Pu4+c:`5gh,5LE.>i;fR6MCX.au3au!cF(ET<-4CEm%.cg'$]j!cOs(9`A@V?Wk]8MhC@`'G2bp10O,KJ'h6eq<RYI#!&>DeoH`jf/dLmt6tj(9_hDO(o#Q5k%)O%CY::$]WL[2S$O0cj0t%Mjl<;c-Z=^&3#Xi2\1u>a:]Ke\2eBI-^JcU;4S^k'IfbHA?WtC?qe@dC4io/"HV;4M.^R\V%gK3+@^iUn<t.YlB;4.=&D`:Q+rli%)2&3,EHf8>qPNJ](4S<[fbE.[r:u;)oKP+DOTc!nYn@NI\D^5@Wl:S^-s-6m*I][B.,*X(q$ecsr<mLaiV,LD5LP9YE_6,07sY;8%U]i.i2B6gQ]@mG'#81k0/'sRbiQaY57>4#`*D'P>PA)7f=!`3do-R#(LuhZtKI[1nPp>8a&.+\aA2?ZkR3UZ]O`8603'KaISg.YS%+FB+nh+*m),N8D/#tKr-,=TJ;,N2=YE;A)N6R5ns&h]5bAI6p>'%T376;P*j=18_IlZS2>Fh:)ZjWi`AO`:+e3,apuk"%I!,b-k-%c5]Ae%Q-%1_O2Y-]LB^!,N4NBE4JMA[i>_?G)M#r$^&g%pOX25nB*'i.htMe*DiPfZgq&\nE%6NF2QsP5+njd+%:pKUT3UY#Chei%,%XocB#F>[fT'IVhRjJc&0&iiBD-Zr_;M9%5o'X_aF^4dY]HHX8R8J4pTW,L8p3I`9jTb/M</\9K6qf3\:C@ar0+oe8.V_p9sL*,%fV%Sg+t>\U7Qu4sh)rZeBKT@p>6)3Z)5OtX*j4`na,@E#"d0ET<5F@r+uH4=?@7Il>??`8m(bd=J4`431\s?rXgC7jo)7HMP#_3c%4SHg=rO4rhp*\b?j$,`Miu]B3AOTmcs79HIF4J)s#96;N"+_Z1d&<p)E&4iNr@7*iWjp2o@2$U[/i">no),0M7=aI$=tAqCire\`%rYE4Chj'P*"8Y`m?XI/.QA4tLlsIAC6P%uO4[7kN;:\[h=O6]sl<NRc0C7OZKICcPG@/k38lnjW]^4Uk$8rV*5&%H2"h_^#LViFg%6\QeuBXa/A2n-5ra;9Cc*O+^n!RC7e[n+-_d)0.l(Rb_uE>A:A])g1QQT`7a?/H&JNAY)8[&hi!YGZ.<Rr]N+48<ETNQN/a$c>Fu%_,iehd]m0&>O&)Kck)6Zo33dU0::a/_nVKRq-9^^SC?;\"UofX7fiHhfaP*^^$FT+g2eO<0H[qiqeLI`F4V>oAngb63&PZ9QW;2E%a-ZQe+[-ZO"3$kA\GTdo@LX7R%k&[*rD1k66Mda$s7#F5r51Tss6nieVu%PJcV#_U:gE'-T4d,am>ChDY+h]iY;44sB3-IC^3k_!%n,MNg^AZ<cp%\'L4oY.>$b663Xf+a*a"5X2hH_ejC=G:FFHn?DVFW"7oTb=&bY#oSFnS<"k<Je,^AmkMs6U>Xs7Hijci:oO^AI>:%Ie/KT55l?IrVYunTDmshhu,J_s4&3?qn%>Eq;6Vt[_J`Tp7D,`)=\O#\sN(CK/#>Yef(?*71[%"l.SYlHB>:Z:o1h3>V#$qroY02%Z/VCQU&>5D:rD+&603t6HJ;.Lr9\td5r)O6Q!3OQII-0:*U2I2RWcgaURa#YNZqrS6_7/Xq,+;k$V@I279A`b!CfOZnl:PT,V8k-%)QNgP%K41/X.qH\3S5nY+G9GjFnnlo4A[>WYCF4sm0>@%n`f?""F._@"-^:;;+micA!F/;O/'68*Q`ubCR\YPZ>)u=[2P(T<,!J&%DhB,rW352+d/j/k-LCL=Up"np@<2%\1TOeQ^(q>f?`c+#FS5LZWTu$^DdE#X<**SIBpp1eb`WFG^10*$4.`ob$dT<mC(#lteWVAS%I4_.G3YSPa<>Pqu>@Z[ueX4'S`.MFYR3c,:5$gPHH.BA#.VCL6HJHLjBqaC0H<$[:]eqZs853+>:\<lFHgIm39]K,%^.p,dnOcu`%fCO4jak+C)!YkpVpX\!n5rD](B>e,;B0s=Mj-;H.YI-K!5mk$^D7l%olQ,*O[3`f\T,.D[R57,<$P3;V].aFq5K`,hofWi<M@X6O%C<(b<N\+5@G$Eb*bm(8^fXfaLrI2ocf-euGHkJh\1XG;.GldEc=^Q$3qj<p!O4cPaQsKT;b^t#g_ojdFE&>`2@3+Rs)/8uP(:8tL%59=fK&%[([9T,EGP.>?#A&%EfDu81*^\->G#V7J_=%UTiLD?;ZAae_9)7X@cHB,AoFd/r7htlEnajhl5`8h!B<GWa=4]81JIjY*)%Y&SSTfflKZ>eTs<7kAR`73c[D'p%,!fKOE$b<r@bgGL;[efAa[jN\+%-C"fZ>?Zlf$5Wfr8\sg2#ejUsTo(H,pa[-_Y)6ElTH4mO%<m<3#=Gr(<`U+HDXJD8pj2B.]FY#>X>!=`T^%'<-E1&_$=_;R%HtLZMrTUOB1WRh--6!nr-F4cAA67%(ACb4Ym&ITQ)>0(<>:iL3%=bg^s@eXRl.PYQn:+g0jXaYIET<i"!n&ed9"Z\)_4`5-PE`Uaq:QO8nXJfS7Up9Is,jW_9<\Aqk*D7NWQ;8W+Y@k?8#pa7g!ibC3%!m+&X@6bYaRq%G#F/tDITcUO#X6-]Jes\P,$J?Ea+e)EoQHc\O0V8CkT37j/1FoNg1+Up:DJg1E/(D0d/$#D4'n:)_<a3kN=D?no%j`;E5CR2S:q&G1_7Wp<*EOb2FhqcH<3:E@J=^*nppM]^u?f$9tD7qIt+5d(h\,XWg0E'/)+8t#fs5\BRptpPnqSTLcqjX5Xm[r?m%ifF)AD"!YB?[hb@?U'#;PFo"u:VZo.\%hgXj"GlY&&7qZn)+0Ci=E^%qQkC'pnPTNcS9p^ia;`Zn"nTr\*%r5n'B9!o67tGbqC/'%renPdam8U1?[qn+5Q(HG=XkJ2TRW3^?iK>Ws7Hn#YP`J7IeMUtX4@4*qnG@(-Z/mf+8A]-5CP,3Ch*-f8ZiFlb+cWUSe!omM&EVh%s0=lgTC)0,1VZ%r+eQ/#aYp>=TY;Yfj(E".;E+@A=UIBC%qm&.df.FDi(o^5_a`c1Od:@CA\9DNrMcc=8)\)^m_,3-S)m@k:C>/!%V98E-Rf$<*m_)m@5?iAZNd9,3s&Bguq//\a_7Z]DG:^E'6N?N$=Q\AII\>!?RAat(B,%G<;obBD%k_!H0@Lr.(+GXPpjj`<k;d+\%@t1#(m-js[pHRLHAB\*#9-DR;`c`oD%:UC)0-`.o#dc*I#)Z0K[IC:Y3oc_E]BcG]Wnei1MWq7G-`oQ$VUDf(b7;u>aaHU*/F91V%l[FL&nG/Ph.]RfmVrJCWj].MioVV2f8]Q\dHV?Z7kl;>K#Tq:e.PI86M61sS"?.jV9.ekZfl_.X<U6R``X=0,\8nGS,)b4h3@T"5%qq+`boh;1B<UQBa8KPGCC2tEZA0kV%PJi?*-`paP[ftK:p:,"go^9pP=%=lqp:,+jWq"U)DcfB@8\B/n?nC.pBma@gBnMVbHQ&.k%=)XV'X'Rl%cq>J/kkZ56BH,>-H,-<IG"LeTPI;(]4.;_.*'33u)lnFHQ8`JP$D<>t("!4%9e$Rg%kuPQTqU(>kU\(fDeHLo;0WiB%8V/(tC/QDki)])6K6V]:mNd@89.*`gm/OndnNR>0PjhcSik7IBs-m9ZXg67NX7$kS[l:?DNFd(\#G'cd?e5dN/;/aUcFkAUjZ/u_%VOLWC]'!Cagpbj(h_Wm[YkS.BZQK3so:6DI+FcGY%qe[f3jT>eJ%&,<5Fn+2jZOQqD)hCYmp'\Xs6l#`rV<qRce-jp?&j-=g=DO/%HJ1+!n!KWOe[`%?kG?/hf%ipNp<bN#5.fInNM(9RhLr3`=in:gAo!J!\mV/r0Zr^m6<MAgI')uM@j.=cnNC+-d*k!0S<r+AcT+kj%!OJ\/P+Cu*4-?nP5E+'\ZB'FEr_=GGi["J.OP^#GriU+:hiq#kCnQSN1bV3JW/-D28(S]f9h_o"ESp-VqHus&f)7eMqq?8-fUR.m%qj"_cU3]bdci0>'A*rTqIC8e+j,V?u]YsXfbW[#Cr9;Eh*+C4+qr9&RY=9@GD<9:@WV?Af@lrOBnCHX.YJ0><4@AK"q>Y\&!d\.e%WOdIlLKnh!_U"1fYI*5#f&T:cPM^lefjB.(d8,4;r8#-fbqFP>o7-W)GQ7BoIf%NRrpQKZo"2[9h9UTDlgK;sm?bTfq>^3Fj6+2Q%c'eQ\p\4,`*l%X/GJAV8qVC3+s7Nl$GZ*Bm;#NmKqY1$S5CE@s,'$Zn~>%AI9_PrivateDataEnd