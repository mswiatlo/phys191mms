%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: spin_exchange.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: steven schowalter
%%CreationDate: 5/13/09
%%BoundingBox: 0 0 378 209
%%HiResBoundingBox: 0 0 377.5665 208.6797
%%CropBox: 0 0 377.5665 208.6797
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 72 8%%BeginData: 6648 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD07FFA8FFA8FD7DFF7D277DFFFFA8A8A8FFA8FFFD07A8FFFD07A8%FFA8FFFD05A8FFA8FFA8FFFD07A8FFFD07A8FFA8FFA8FFFD05A8FFA8FFA8%A8A8FFA8A8A8FFFD07A8FFA8FFA8FFFD07A8FF7E7E7EFD1EFF525252FFFF%A8A8FFFFFFA8FFA8FFA8FD07FFA8FFA8FFA8FFFFFFA8FFA8FD05FFA8FFA8%FFA8FD07FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FD07FFA8%FFA8FFA8FFFFFFA8FFA8FFA8FD04FF4F247EFD1DFFA8A8A8FFFFFFA8FD57%FF7F797FFFA8FD23FFA8FD55FFA9557FA9FFFFA8FD23FFA8FD04FFA8A8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FD39FFA97955FD05FFA8FD%2CFF7D7DA8FD46FFCB557FA9FD2AFFA8FFFFFFA8FFBCB5CA7D7DA8527D7D%FF7D7D7DFFFFFF7D7DA8FFA8FD35FFA97F55A9FD08FFA8FD29FFC3B5FFFF%FF7D5252527D7D7D52A87D7D7D52A8FD36FF7F7FA9FD2EFFA8FFFFFFA8FD%06FFA87DA87DFF7D7DA8FFA8FF7D7D7DFFA8FD31FFA97F55A9FD0CFFA8FD%23FFA8FD4AFF7F797FFD0EFFA8FD23FFA8FFFFFFA8FD05FFA8FD0FFFA8FD%2EFF7F557FA9FD0FFFA8FD2CFF7D7DA8A8A8FFFFFF7DFD04FFA8A8FD2FFF%A37F7FFD36FFA8FFFFFFA8FF5525A97D7DA8275252FF7D7D7DFFA8FD047D%FFA8FD2AFFA9557FA9FD13FFA8FD1EFFA8FFA8FD08FFA355FFFFFF7D527D%52FD047DA8A8FD047DFD2AFFA37F7FFD35FF7D5252FFFFA8FFFFFFA8FD07%FFA8FFFFFFA8A8A8FFFFFFA8A8A8FFA8FD26FFA9557FA9FD17FFA8FD1EFF%52A852FFFFA8FD0CFFA8A87DA87DA87DA8A8FD29FFA97FF979FD19FFA8FD%1FFFA8FFFFFFA8FFFFFFA8FFCAFFA9FFFFA8A87D52A87D7D52A87D7DFD04%FFA8FD23FF5579A37FA9FD19FFA8FD23FFA8FD04FFCAC3A27FFF7D27FD05%7D5252277D7DFD25FFA97F55A9FD1DFFA8FD23FFA8FFFFFFA8FFCAFFFFFF%7D7DA8A87DA8FF7D527DA8FD05FFA8FD1FFF79797FFD1FFFA8FD18FFA87D%A8FD19FFA8FD26FF7F55A9FD39FFA8A87D7DA8FD07FFA8FFFFFFA8A8A8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FD1BFF7F797FFD23FFA8FD%18FFA8A8A8FD3CFFA355A9FD3EFFA8527DFD08FFA8FD31FF7F797FFD27FF%A8FD17FFA8527D7DFD38FFA9557FFD41FFA87D7DA8FD08FFA8FD2DFF7F55%79FD2BFFA8FD17FFA8527D7DFD34FFA955A3FD46FFA87DA8FD08FFA8FD29%FF7F7979FD2FFFA8FD17FFA852527DFD30FFA9557FA9FD2EFFC3C3CAFD17%FFA87D527DA8FFFFA87D7DFFFFA8FD25FF7F5525A9FD2FFFCAFCFC9AFD19%FFA8FD04FF525252FFFFA8FD23FFA955A34F25FD2CFFCACABCC3C3CACAA8%FD18FF7D277DFFFFFF7D7DA8FFFFA8FD21FF7F5555FFFFFFA3FD28FFCAC3%C3BCC3C3CACAFFFFFFA8FD17FFA8527D7DFD28FFA9797FA9FD29FFCACAC3%C3C3CACAFD20FFA8A87DA8FD08FFA8FD1DFF7F5579FD29FFCAC3BCC3C3CA%CAFD0BFFA8FD17FFA827527DFD24FFA3557FFD26FFCACAC3C3BCC3CAFD28%FFA87D527DFD08FFA8FD19FF7F797FFD25FFCAC3BCC3BCCACAFD13FFA8FD%18FF7D277DFD08FFA8FD16FFCB7F55A9FD24FFC3C3B5BCCAFD18FFA8FD17%FFA87D52A8FD08FFA8FD14FFA979797FFD21FFCACABCC3BCCAC3FCC3FD19%FFA8FD17FFA85252A8FD08FFA8FD12FFA97F79A9FD20FFC3C3BCC3C3CAFD%04FFCAFD32FF7D5227A8FD08FFA8FD0FFFA9A9557FA9FD1DFFCACABCC3BC%C3CAFD23FFA8FD17FFA87DA8FD18FF7F7F7FFD1DFFFD05C3FD4CFFA8FD0B%FFA37FF92BFD1AFFCAC3BCC3BCC3CAFD0AFF7D277DFFFF5227A8FD05FFA8%FD09FFA8FD05FFA8FFFFFFA8FD2DFFA9557FA9797FFD17FFBCB5BCC3C3CA%CAFD0DFFA8A8A8FD047DA8A8FF7DA8A87D527DFFFFA8FF7DFF7D7D7DFF7D%A87D7D7DFD22FF7D7DFFFFA87F2BFFFFFFA9A955252BFD17FFC3C3BCC3BC%BCB5FD15FF52FFFFFF7D52A8A852A827527DFF527D7D527DFF7D7DFF5227%7D527D27FFA8FD1FFFA852FFFFCF554FA97F557F7FA9257FFD12FFCACAC3%C3BCC3C3FD19FFA87DFD06FF7DA8A8A87D7DFFA87DFF7DA8A8FF7DFF7D7D%7DA87D7DA8CFFD1FFFA8A8FFFF7EA35579F955FD04FFAFFFFFFFAFFFFFFF%A9FFFFFFAFFFCBCAA1C3BCBD9BCACAFFAFFFFFFFA9FFFFFFA9FFFFFFA9FF%FFFFA9FFFFFFA9FFFFFFA9FD07FFA9FD19FFA8FD23FF7F7FA9A9A9A3A9A9%A98D9BA9A9A9A2A2AFA9A9A2A3A19B9BA29BA2A2A9A9AFFD04A9A3A9A9A9%A3FD30A9CBFD04A9FD23FFA8FFCAFFFFB5B5FFCAB5C3FFCAFFFCB5C3C3BC%C3BCC3CAFFCAFD43FFA8FD24FFBCFCFFCABCC3FFFFCACAB5FCBCBCBCCACA%FD6EFFA8C3BCC3FCBCC3BCBCC3C3C3BCFD4FFFA8FD23FFBCBCC3BCBCC3B5%FCCACAC3BCFD19CAC3FFCACAC3CACACAC3FD14CAFFFD06CAC3CACACAC3FF%CACAC3CACACAC3FD06CAA8FD23FFA8FD05FFCACAFFFFFCB5CAFFCAFFCAFF%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF%CAFFCAFFCAFFCAFFCAFFCAFF7DA1FFFFA8767DFFCAFD07FFCAFFCAFD07FF%CAFFFFFFCAFFA8FD25FFCAFCCAFD36FFA85252A87D7DF87DFFFFA8A8FFA8%A8A8FD04FFA8FFFD05A8FFA8A8A8FD26FFA8FFC3B5CAFD37FFA8FF52A8A8%FFA8527DFF52A85252527DA87DA87D7DFF525252A8527D525252A8A8FD61%FF7DA8FFFFFF7DFFA87D7D52527D7D7D27FF527DA87D527DA827527D5252%7DFD24FFA8FD3DFFA8FD07FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFFD05%A8FFA8FD9FFFA8FFFFFFA8FD5BFFA8FD1FFF7D52FFFFA8A8A8FFA8A8FFA8%FFA8FFFD05A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8%A8A8FFA8FFA8FFA8FFA8FFFFA8A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8A8A8%FFA8FFA8FFA8FFA8A8FFA8A8FFA8FFA8FFA8A8A8FFA8A8FD1FFF7D52A8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FF%A8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FD20FFA8FFFFA87DFF7DFD09FF7DFF7DA8FD08FFA8A8FF7DA8FD08%FFA87DFF7DFD09FF7DFF7DA8FD08FFA87DFF7DA8FD08FFA87DFF52FD09FF%A8A8A87DFD23FF52527D52A8FD08FF527D7D52FD08FFA852FF527DFD08FF%7D7D7D52A8FD08FF7D7D7D52FD09FF527D277DFD08FF7D52A852A8FD08FF%27527D52FD23FFA87DA87DFD09FF7DA87DA8FD09FF7DA8A8A8FD08FFA852%A87DFD09FF7DA8A8A8FD08FFFD05A8FD08FFA87DA87DFD09FFA87D7DA8FD%FCFFFD1AFFA8FDADFF7D7DA8A87DFFFFA8A8FD05FFA8A8A8FFFFFFA8A8FF%FFFFA852FF52A8FD62FF7DF8A85227A8FFF8FD077D527D527DA87D27A8A8%A852527D7D52FD62FF7D277D7D7DFF7D52527D275227FD0952F87DA8FFA8%52FFA8A8FD61FFA87D7D52A8FF7DA8FD047D2752A852FD077DA8A852FF7D%FF52FD6EFF7DFD0CFFA8FFFFA8A8FDB4FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-05-12T01:38-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-05-13T14:56:31-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-05-13T14:56:31-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>144</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAkAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qkPnsaufKeojRxdnU&#xA;jGBaiwMSzlywAoZvgC/zd+Nab4qlP5bp57A1RvNRmo83K0W4MBcVklrw+rlkEfo+iAP5g2Kp/ZSa&#xA;9PFBK01t6c8fqkrA44cgpVN5jy6tv7Yqr+nrnD+/tefLp6MlOHLr/e9eH44quEeseoa3Fv6dBxPo&#xA;vWu9aj1enTFVnHXQIKy2xZjSfjC9F+AmorKCfiAGKttHrnGXjPa8hX0QYZKH4RTl+92+KvTtiq4x&#xA;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&#xA;KuxV2KuxV2KuxV2Kv//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:334AEA052240DE11AC91D52DFC338480</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:5930E7EF3041DE11AC91D52DFC338480</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPS-ItalicMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.00.3x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times New Roman Italic.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.0d6e5</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPSMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.3x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times New Roman.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -208.68 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 208.68 li
377.566 208.68 li
377.566 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
35.4727 5 mo
35.4727 174 li
309.473 174 li
309.473 5 li
35.4727 5 li
cp
clp
306.348 5.25 mo
306.348 4.625 306.035 4 305.619 3.47949 cv
305.098 3.0625 304.473 2.75 303.848 2.75 cv
303.223 2.75 302.598 3.0625 302.076 3.47949 cv
301.66 4 301.348 4.625 301.348 5.25 cv
301.348 5.875 301.66 6.5 302.076 7.02051 cv
302.598 7.4375 303.223 7.75 303.848 7.75 cv
304.473 7.75 305.098 7.4375 305.619 7.02051 cv
306.035 6.5 306.348 5.875 306.348 5.25 cv
306.348 5.25 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.882353 0.768627 0 0 cmyk
f
grestore
231.473 49.125 mo
231.473 48.5 231.16 47.875 230.744 47.3545 cv
230.223 46.9375 229.598 46.625 228.973 46.625 cv
228.348 46.625 227.723 46.9375 227.201 47.3545 cv
226.785 47.875 226.473 48.5 226.473 49.125 cv
226.473 49.75 226.785 50.375 227.201 50.8955 cv
227.723 51.3125 228.348 51.625 228.973 51.625 cv
229.598 51.625 230.223 51.3125 230.744 50.8955 cv
231.16 50.375 231.473 49.75 231.473 49.125 cv
231.473 49.125 li
cp
false sop
0.882353 0.768627 0 0 cmyk
f
156.598 89.625 mo
156.598 89 156.285 88.375 155.868 87.8545 cv
155.348 87.4375 154.723 87.125 154.098 87.125 cv
153.473 87.125 152.848 87.4375 152.327 87.8545 cv
151.91 88.375 151.598 89 151.598 89.625 cv
151.598 90.25 151.91 90.875 152.327 91.3955 cv
152.848 91.8125 153.473 92.125 154.098 92.125 cv
154.723 92.125 155.348 91.8125 155.868 91.3955 cv
156.285 90.875 156.598 90.25 156.598 89.625 cv
156.598 89.625 li
cp
f
81.6602 123.375 mo
81.6602 122.75 81.3477 122.125 80.9307 121.604 cv
80.4102 121.188 79.7852 120.875 79.1602 120.875 cv
78.5352 120.875 77.9102 121.188 77.3896 121.604 cv
76.9727 122.125 76.6602 122.75 76.6602 123.375 cv
76.6602 124 76.9727 124.625 77.3896 125.146 cv
77.9102 125.563 78.5352 125.875 79.1602 125.875 cv
79.7852 125.875 80.4102 125.563 80.9307 125.146 cv
81.3477 124.625 81.6602 124 81.6602 123.375 cv
81.6602 123.375 li
cp
f
66.7227 130.125 mo
66.7227 129.5 66.4102 128.875 65.9932 128.354 cv
65.4727 127.938 64.8477 127.625 64.2227 127.625 cv
63.5977 127.625 62.9727 127.938 62.4521 128.354 cv
62.0352 128.875 61.7227 129.5 61.7227 130.125 cv
61.7227 130.75 62.0352 131.375 62.4521 131.896 cv
62.9727 132.313 63.5977 132.625 64.2227 132.625 cv
64.8477 132.625 65.4727 132.313 65.9932 131.896 cv
66.4102 131.375 66.7227 130.75 66.7227 130.125 cv
66.7227 130.125 li
cp
f
51.7227 133.5 mo
51.7227 132.875 51.4102 132.25 50.9932 131.729 cv
50.4727 131.313 49.8477 131 49.2227 131 cv
48.5977 131 47.9727 131.313 47.4521 131.729 cv
47.0352 132.25 46.7227 132.875 46.7227 133.5 cv
46.7227 134.125 47.0352 134.75 47.4521 135.271 cv
47.9727 135.688 48.5977 136 49.2227 136 cv
49.8477 136 50.4727 135.688 50.9932 135.271 cv
51.4102 134.75 51.7227 134.125 51.7227 133.5 cv
51.7227 133.5 li
cp
f
44.2227 130.125 mo
44.2227 129.5 43.9102 128.875 43.4932 128.354 cv
42.9727 127.938 42.3477 127.625 41.7227 127.625 cv
41.0977 127.625 40.4727 127.938 39.9521 128.354 cv
39.5352 128.875 39.2227 129.5 39.2227 130.125 cv
39.2227 130.75 39.5352 131.375 39.9521 131.896 cv
40.4727 132.313 41.0977 132.625 41.7227 132.625 cv
42.3477 132.625 42.9727 132.313 43.4932 131.896 cv
43.9102 131.375 44.2227 130.75 44.2227 130.125 cv
44.2227 130.125 li
cp
f
gsave
35.4727 5 mo
35.4727 174 li
309.473 174 li
309.473 5 li
35.4727 5 li
cp
clp
1.625 lw
2 lc
0 lj
3.239 ml
[] 0 dsh
true sadj
4.28516 140.938 mo
4.53516 140.938 li
4.78516 140.938 li
4.97266 140.938 li
5.22266 140.938 li
5.47266 140.938 li
5.66016 140.938 li
5.91016 140.938 li
6.16016 140.938 li
6.34766 140.938 li
6.59766 140.938 li
6.84766 140.875 li
7.03516 140.875 li
7.28516 140.875 li
7.53516 140.875 li
7.97266 140.875 li
8.22266 140.875 li
8.41016 140.875 li
8.91016 140.813 li
9.09766 140.813 li
9.34766 140.813 li
9.78516 140.813 li
10.0352 140.813 li
10.2852 140.75 li
10.7227 140.75 li
11.6602 140.688 li
11.9102 140.688 li
12.0977 140.688 li
12.5977 140.625 li
13.4727 140.563 li
13.7227 140.563 li
13.9727 140.5 li
14.4102 140.5 li
15.3477 140.375 li
15.5352 140.375 li
15.7852 140.375 li
16.2227 140.313 li
17.1602 140.188 li
18.9727 140 li
19.2227 139.938 li
19.4727 139.938 li
19.9727 139.875 li
20.9727 139.688 li
22.9727 139.438 li
23.2227 139.375 li
23.4727 139.313 li
23.9727 139.25 li
24.9727 139.063 li
26.9727 138.75 li
27.2227 138.688 li
27.4727 138.625 li
27.9727 138.5 li
28.9727 138.313 li
30.9727 137.938 li
34.9102 137 li
35.1602 136.938 li
35.4102 136.875 li
35.8477 136.75 li
36.7852 136.5 li
38.6602 136.063 li
42.3477 135 li
49.8477 132.75 li
50.0352 132.688 li
50.2852 132.563 li
50.7227 132.438 li
51.6602 132.125 li
53.4727 131.5 li
57.0977 130.25 li
64.4102 127.563 li
80.2227 121.188 li
94.9727 114.75 li
110.973 107.375 li
126.723 99.8125 li
141.348 92.625 li
157.285 84.6875 li
172.098 77.1875 li
186.66 69.75 li
202.41 61.5625 li
217.16 53.9375 li
233.098 45.5625 li
248.785 37.375 li
263.41 29.6875 li
279.223 21.25 li
294.035 13.4375 li
310.098 4.9375 li
325.785 -3.4375 li
340.473 -11.3125 li
356.41 -19.8125 li
371.285 -27.75 li
385.848 -35.5 li
401.66 -44 li
416.41 -51.9375 li
432.41 -60.5 li
448.098 -68.9375 li
462.723 -76.8125 li
478.598 -85.3125 li
493.41 -93.3125 li
507.973 -101.125 li
523.723 -109.625 li
538.41 -117.5 li
554.41 -126.125 li
569.285 -134.125 li
583.848 -142 li
599.723 -150.563 li
614.473 -158.5 li
630.473 -167.188 li
646.223 -175.625 li
660.91 -183.563 li
676.785 -192.188 li
691.66 -200.188 li
706.16 -208.063 li
721.973 -216.563 li
736.723 -224.563 li
752.66 -233.188 li
752.723 -233.188 li
752.723 -233.188 li
752.723 -233.188 li
752.723 -233.188 li
752.785 -233.25 li
752.91 -233.313 li
752.91 -233.313 li
752.973 -233.313 li
752.973 -233.313 li
752.973 -233.313 li
753.035 -233.375 li
753.035 -233.375 li
753.035 -233.375 li
753.098 -233.375 li
753.098 -233.375 li
753.098 -233.375 li
753.098 -233.375 li
753.16 -233.438 li
753.16 -233.438 li
753.16 -233.438 li
753.16 -233.438 li
753.16 -233.438 li
@
grestore
306.348 86.25 mo
306.348 85.625 306.035 85 305.619 84.4795 cv
305.098 84.0625 304.473 83.75 303.848 83.75 cv
303.223 83.75 302.598 84.0625 302.076 84.4795 cv
301.66 85 301.348 85.625 301.348 86.25 cv
301.348 86.875 301.66 87.5 302.076 88.0205 cv
302.598 88.4375 303.223 88.75 303.848 88.75 cv
304.473 88.75 305.098 88.4375 305.619 88.0205 cv
306.035 87.5 306.348 86.875 306.348 86.25 cv
306.348 86.25 li
cp
0 0.992157 1 0 cmyk
f
231.473 109.875 mo
231.473 109.25 231.16 108.625 230.744 108.104 cv
230.223 107.688 229.598 107.375 228.973 107.375 cv
228.348 107.375 227.723 107.688 227.201 108.104 cv
226.785 108.625 226.473 109.25 226.473 109.875 cv
226.473 110.5 226.785 111.125 227.201 111.646 cv
227.723 112.063 228.348 112.375 228.973 112.375 cv
229.598 112.375 230.223 112.063 230.744 111.646 cv
231.16 111.125 231.473 110.5 231.473 109.875 cv
231.473 109.875 li
cp
f
156.598 126.75 mo
156.598 126.125 156.285 125.5 155.868 124.979 cv
155.348 124.563 154.723 124.25 154.098 124.25 cv
153.473 124.25 152.848 124.563 152.327 124.979 cv
151.91 125.5 151.598 126.125 151.598 126.75 cv
151.598 127.375 151.91 128 152.327 128.521 cv
152.848 128.938 153.473 129.25 154.098 129.25 cv
154.723 129.25 155.348 128.938 155.868 128.521 cv
156.285 128 156.598 127.375 156.598 126.75 cv
156.598 126.75 li
cp
f
81.6602 140.25 mo
81.6602 139.625 81.3477 139 80.9307 138.479 cv
80.4102 138.063 79.7852 137.75 79.1602 137.75 cv
78.5352 137.75 77.9102 138.063 77.3896 138.479 cv
76.9727 139 76.6602 139.625 76.6602 140.25 cv
76.6602 140.875 76.9727 141.5 77.3896 142.021 cv
77.9102 142.438 78.5352 142.75 79.1602 142.75 cv
79.7852 142.75 80.4102 142.438 80.9307 142.021 cv
81.3477 141.5 81.6602 140.875 81.6602 140.25 cv
81.6602 140.25 li
cp
f
66.7227 138.563 mo
66.7227 137.938 66.4102 137.313 65.9932 136.791 cv
65.4727 136.375 64.8477 136.063 64.2227 136.063 cv
63.5977 136.063 62.9727 136.375 62.4521 136.791 cv
62.0352 137.313 61.7227 137.938 61.7227 138.563 cv
61.7227 139.188 62.0352 139.813 62.4521 140.334 cv
62.9727 140.75 63.5977 141.063 64.2227 141.063 cv
64.8477 141.063 65.4727 140.75 65.9932 140.334 cv
66.4102 139.813 66.7227 139.188 66.7227 138.563 cv
66.7227 138.563 li
cp
f
51.7227 146.125 mo
51.7227 145.5 51.4102 144.875 50.9932 144.354 cv
50.4727 143.938 49.8477 143.625 49.2227 143.625 cv
48.5977 143.625 47.9727 143.938 47.4521 144.354 cv
47.0352 144.875 46.7227 145.5 46.7227 146.125 cv
46.7227 146.75 47.0352 147.375 47.4521 147.896 cv
47.9727 148.313 48.5977 148.625 49.2227 148.625 cv
49.8477 148.625 50.4727 148.313 50.9932 147.896 cv
51.4102 147.375 51.7227 146.75 51.7227 146.125 cv
51.7227 146.125 li
cp
f
gsave
35.4727 5 mo
35.4727 174 li
309.473 174 li
309.473 5 li
35.4727 5 li
cp
clp
44.2227 143.625 mo
44.2227 143 43.9102 142.375 43.4932 141.854 cv
42.9727 141.438 42.3477 141.125 41.7227 141.125 cv
41.0977 141.125 40.4727 141.438 39.9521 141.854 cv
39.5352 142.375 39.2227 143 39.2227 143.625 cv
39.2227 144.25 39.5352 144.875 39.9521 145.396 cv
40.4727 145.813 41.0977 146.125 41.7227 146.125 cv
42.3477 146.125 42.9727 145.813 43.4932 145.396 cv
43.9102 144.875 44.2227 144.25 44.2227 143.625 cv
44.2227 143.625 li
cp
f
35.7852 150.375 mo
35.7852 150 35.5977 149.625 35.3477 149.313 cv
35.0352 149.063 34.6602 148.875 34.2852 148.875 cv
33.9102 148.875 33.5352 149.063 33.2227 149.313 cv
32.9727 149.625 32.7852 150 32.7852 150.375 cv
32.7852 150.75 32.9727 151.125 33.2227 151.438 cv
33.5352 151.688 33.9102 151.875 34.2852 151.875 cv
34.6602 151.875 35.0352 151.688 35.3477 151.438 cv
35.5977 151.125 35.7852 150.75 35.7852 150.375 cv
35.7852 150.375 li
cp
f
grestore
59.2227 148.688 mo
59.2227 148.063 58.9102 147.438 58.4932 146.916 cv
57.9727 146.5 57.3477 146.188 56.7227 146.188 cv
56.0977 146.188 55.4727 146.5 54.9521 146.916 cv
54.5352 147.438 54.2227 148.063 54.2227 148.688 cv
54.2227 149.313 54.5352 149.938 54.9521 150.459 cv
55.4727 150.875 56.0977 151.188 56.7227 151.188 cv
57.3477 151.188 57.9727 150.875 58.4932 150.459 cv
58.9102 149.938 59.2227 149.313 59.2227 148.688 cv
59.2227 148.688 li
cp
f
55.4727 141.063 mo
55.4727 140.438 55.1602 139.813 54.7432 139.291 cv
54.2227 138.875 53.5977 138.563 52.9727 138.563 cv
52.3477 138.563 51.7227 138.875 51.2021 139.291 cv
50.7852 139.813 50.4727 140.438 50.4727 141.063 cv
50.4727 141.688 50.7852 142.313 51.2021 142.834 cv
51.7227 143.25 52.3477 143.563 52.9727 143.563 cv
53.5977 143.563 54.2227 143.25 54.7432 142.834 cv
55.1602 142.313 55.4727 141.688 55.4727 141.063 cv
55.4727 141.063 li
cp
f
47.9727 156.25 mo
47.9727 155.625 47.6602 155 47.2432 154.479 cv
46.7227 154.063 46.0977 153.75 45.4727 153.75 cv
44.8477 153.75 44.2227 154.063 43.7021 154.479 cv
43.2852 155 42.9727 155.625 42.9727 156.25 cv
42.9727 156.875 43.2852 157.5 43.7021 158.021 cv
44.2227 158.438 44.8477 158.75 45.4727 158.75 cv
46.0977 158.75 46.7227 158.438 47.2432 158.021 cv
47.6602 157.5 47.9727 156.875 47.9727 156.25 cv
47.9727 156.25 li
cp
f
70.4727 151.188 mo
70.4727 150.563 70.1602 149.938 69.7432 149.416 cv
69.2227 149 68.5977 148.688 67.9727 148.688 cv
67.3477 148.688 66.7227 149 66.2021 149.416 cv
65.7852 149.938 65.4727 150.563 65.4727 151.188 cv
65.4727 151.813 65.7852 152.438 66.2021 152.959 cv
66.7227 153.375 67.3477 153.688 67.9727 153.688 cv
68.5977 153.688 69.2227 153.375 69.7432 152.959 cv
70.1602 152.438 70.4727 151.813 70.4727 151.188 cv
70.4727 151.188 li
cp
f
74.2227 143.625 mo
74.2227 143 73.9102 142.375 73.4932 141.854 cv
72.9727 141.438 72.3477 141.125 71.7227 141.125 cv
71.0977 141.125 70.4727 141.438 69.9521 141.854 cv
69.5352 142.375 69.2227 143 69.2227 143.625 cv
69.2227 144.25 69.5352 144.875 69.9521 145.396 cv
70.4727 145.813 71.0977 146.125 71.7227 146.125 cv
72.3477 146.125 72.9727 145.813 73.4932 145.396 cv
73.9102 144.875 74.2227 144.25 74.2227 143.625 cv
74.2227 143.625 li
cp
f
gsave
35.4727 5 mo
35.4727 174 li
309.473 174 li
309.473 5 li
35.4727 5 li
cp
clp
1.625 lw
2 lc
0 lj
3.239 ml
[] 0 dsh
true sadj
4.28516 150.438 mo
4.53516 150.438 li
4.78516 150.438 li
4.97266 150.438 li
5.22266 150.438 li
5.47266 150.438 li
5.66016 150.438 li
5.91016 150.438 li
6.16016 150.438 li
6.34766 150.438 li
6.59766 150.438 li
6.84766 150.438 li
7.03516 150.438 li
7.28516 150.438 li
7.53516 150.375 li
7.97266 150.375 li
8.22266 150.375 li
8.41016 150.375 li
8.91016 150.375 li
9.09766 150.375 li
9.34766 150.375 li
9.78516 150.375 li
10.0352 150.375 li
10.2852 150.375 li
10.7227 150.375 li
11.6602 150.313 li
11.9102 150.313 li
12.0977 150.313 li
12.5977 150.313 li
13.4727 150.313 li
13.7227 150.25 li
13.9727 150.25 li
14.4102 150.25 li
15.3477 150.25 li
15.5352 150.188 li
15.7852 150.188 li
16.2227 150.188 li
17.1602 150.125 li
18.9727 150.063 li
19.2227 150.063 li
19.4727 150.063 li
19.9727 150 li
20.9727 150 li
22.9727 149.875 li
23.2227 149.875 li
23.4727 149.813 li
23.9727 149.813 li
24.9727 149.75 li
26.9727 149.625 li
27.2227 149.563 li
27.4727 149.563 li
27.9727 149.5 li
28.9727 149.438 li
30.9727 149.313 li
34.9102 148.938 li
35.1602 148.938 li
35.4102 148.875 li
35.8477 148.875 li
36.7852 148.75 li
38.6602 148.563 li
42.3477 148.188 li
42.5977 148.125 li
42.8477 148.125 li
43.2852 148.063 li
44.2227 147.938 li
46.0977 147.75 li
49.8477 147.25 li
50.0352 147.25 li
50.2852 147.188 li
50.7227 147.125 li
51.6602 147 li
53.4727 146.75 li
57.0977 146.25 li
64.4102 145.125 li
80.2227 142.438 li
94.9727 139.563 li
110.973 136.25 li
126.723 132.75 li
141.348 129.375 li
157.285 125.563 li
172.098 121.938 li
186.66 118.313 li
202.41 114.375 li
217.16 110.563 li
233.098 106.5 li
248.785 102.375 li
263.41 98.5625 li
279.223 94.375 li
294.035 90.5 li
310.098 86.1875 li
325.785 82 li
340.473 78.0625 li
356.41 73.8125 li
371.285 69.8125 li
385.848 65.875 li
401.66 61.625 li
416.41 57.625 li
432.41 53.3125 li
448.098 49 li
462.723 45.0625 li
478.598 40.75 li
493.41 36.6875 li
507.973 32.75 li
523.723 28.4375 li
538.41 24.4375 li
554.41 20.0625 li
569.285 16 li
583.848 12 li
599.723 7.6875 li
614.473 3.625 li
630.473 -0.75 li
646.223 -5.0625 li
660.91 -9.125 li
676.785 -13.4375 li
691.66 -17.5 li
706.16 -21.5 li
721.973 -25.875 li
736.723 -29.9375 li
752.66 -34.3125 li
752.723 -34.3125 li
752.723 -34.3125 li
752.723 -34.3125 li
752.723 -34.3125 li
752.785 -34.3125 li
752.91 -34.375 li
752.91 -34.375 li
752.973 -34.375 li
752.973 -34.375 li
752.973 -34.375 li
753.035 -34.375 li
753.035 -34.375 li
753.035 -34.375 li
753.098 -34.375 li
753.098 -34.4375 li
753.098 -34.4375 li
753.098 -34.4375 li
753.16 -34.4375 li
753.16 -34.4375 li
753.16 -34.4375 li
753.16 -34.4375 li
753.16 -34.4375 li
@
grestore
gsave
9.47266 0 mo
9.47266 187 li
309.473 187 li
309.473 0 li
9.47266 0 li
cp
clp
0.1875 lw
2 lc
0 lj
3.239 ml
[] 0 dsh
true sadj
309.285 5.25 mo
309.285 174 li
36.2852 5.25 mo
309.285 5.25 li
36.2852 174 mo
36.2852 5.25 li
309.285 174 mo
36.2852 174 li
0 0 0 1 cmyk
@
grestore
0.1875 lw
0 lc
0 lj
3.239 ml
[] 0 dsh
true sadj
41.7227 174 mo
41.7227 170.75 li
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 48 /zero putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBVI+Times-Roman /Times-Roman findfont ct_VMDictPut/ZWYBVI+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero 207{/.notdef}rp]ZWYBVI+Times-Roman nfZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf36.1211 184.992 mo(0.)[4.5 0 ]xsh%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBVI+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7A73D986C0D7DE9D329253DCB6E971CF9F86B9AEBF9128F879E3BA076A7524F8AC6EF0948A0BD36A1BBAD3176809EA5D8C10BC04F27D1FCF8D9BA3577509C082FF1EE49DF22B08F8B21F3A6C3932A3BC82C6C594431B4032E2BEF80E15787B3E427A047FD8FD191291F42BAC74588B21DCB1EB3232C29BA67B72B9A00CCBC571F0227C6EF50964CF91F1B0EC573A04AE3E4DF9447B77BD2A0A959F534BEC79AECEF51C27F8D677FD06B99742B747A695088E88EBCC4A6BCCC7402ABFDFE9926161D96> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBVI+Times-Roman /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/ZWYBVI+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero 4{/.notdef}rp /five 202{/.notdef}rp]ZWYBVI+Times-Roman nfZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf42.8711 184.992 mo(5)sh79.1602 174 mo
79.1602 170.75 li
71.7227 174 mo
71.7227 172.063 li
64.2227 174 mo
64.2227 172.063 li
56.7227 174 mo
56.7227 172.063 li
49.2227 174 mo
49.2227 172.063 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBVI+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBVI+Times-Roman /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/ZWYBVI+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]ZWYBVI+Times-Roman nfZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf73.5664 184.992 mo(1.)[4.5 0 ]xshZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf80.3242 184.992 mo(0)sh116.66 174 mo
116.66 170.75 li
109.16 174 mo
109.16 172.063 li
101.66 174 mo
101.66 172.063 li
94.1602 174 mo
94.1602 172.063 li
86.6602 174 mo
86.6602 172.063 li
@
ZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf111.004 184.992 mo(1.)[4.5 0 ]xshZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf117.762 184.992 mo(5)sh154.098 174 mo
154.098 170.75 li
146.598 174 mo
146.598 172.063 li
139.098 174 mo
139.098 172.063 li
131.598 174 mo
131.598 172.063 li
124.098 174 mo
124.098 172.063 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBVI+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBVI+Times-Roman /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/ZWYBVI+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]ZWYBVI+Times-Roman nfZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf148.449 184.992 mo(2.)[4.5 0 ]xshZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf155.199 184.992 mo(0)sh191.535 174 mo
191.535 170.75 li
184.035 174 mo
184.035 172.063 li
176.535 174 mo
176.535 172.063 li
169.035 174 mo
169.035 172.063 li
161.535 174 mo
161.535 172.063 li
@
ZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf185.895 184.992 mo(2.)[4.5 0 ]xshZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf192.645 184.992 mo(5)sh228.973 174 mo
228.973 170.75 li
221.473 174 mo
221.473 172.063 li
213.973 174 mo
213.973 172.063 li
206.473 174 mo
206.473 172.063 li
199.035 174 mo
199.035 172.063 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBVI+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7A73D960D5C905E34DC81A096980F2B4111B9B099A6DB83E1916FF3E1A9E04B02D3E9232818F77B09A9AACB5832FED542FDDA70002EB05443C3A08AC9203ACF784CB865C5B9F7D872416879897E73175190413158DECCEEC3F81053539EF7A5BA54848FD5EF8191B77C87FC4B2FB70A247D6480306D63973D6D1E40988764838CF4D7C7CFD56B10F551336B687A8CAD70446C673C2BFDC7C6AD86547DB031DFD479DCB051DAF5177334E8CD4B35F8B65FC86BD3BDBBB8D1E2B3149970112D8374721C0AB537409EB4ADF5E62264D22634EE> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBVI+Times-Roman /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/ZWYBVI+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /.notdef /five 202{/.notdef}rp]ZWYBVI+Times-Roman nfZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf223.332 184.992 mo(3.)[4.5 0 ]xshZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf230.09 184.992 mo(0)sh266.41 174 mo
266.41 170.75 li
258.91 174 mo
258.91 172.063 li
251.41 174 mo
251.41 172.063 li
243.91 174 mo
243.91 172.063 li
236.473 174 mo
236.473 172.063 li
@
ZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf260.785 184.992 mo(3.)[4.5 0 ]xshZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf267.527 184.992 mo(5)sh303.848 174 mo
303.848 170.75 li
296.348 174 mo
296.348 172.063 li
288.848 174 mo
288.848 172.063 li
281.41 174 mo
281.41 172.063 li
273.91 174 mo
273.91 172.063 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBVI+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBVI+Times-Roman /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/ZWYBVI+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five 202{/.notdef}rp]ZWYBVI+Times-Roman nfZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf298.223 184.992 mo(4.)[4.5 0 ]xshZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf304.973 184.992 mo(0)sh36.2852 174 mo
39.5352 174 li
@
ZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf24.7852 176.984 mo(0)sh36.2852 131.813 mo
39.5352 131.813 li
36.2852 140.25 mo
38.2227 140.25 li
36.2852 148.688 mo
38.2227 148.688 li
36.2852 157.125 mo
38.2227 157.125 li
36.2852 165.563 mo
38.2227 165.563 li
@
ZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf24.7852 134.805 mo(5)sh36.2852 89.625 mo
39.5352 89.625 li
36.2852 98.0625 mo
38.2227 98.0625 li
36.2852 106.5 mo
38.2227 106.5 li
36.2852 114.938 mo
38.2227 114.938 li
36.2852 123.375 mo
38.2227 123.375 li
@
ZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf20.2852 92.6172 mo(10)[4.5 0 ]xsh36.2852 47.4375 mo
39.5352 47.4375 li
36.2852 55.875 mo
38.2227 55.875 li
36.2852 64.3125 mo
38.2227 64.3125 li
36.2852 72.75 mo
38.2227 72.75 li
36.2852 81.1875 mo
38.2227 81.1875 li
@
ZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf20.2852 50.4297 mo(15)[4.5 0 ]xsh36.2852 5.25 mo
39.5352 5.25 li
36.2852 13.6875 mo
38.2227 13.6875 li
36.2852 22.125 mo
38.2227 22.125 li
36.2852 30.5625 mo
38.2227 30.5625 li
36.2852 39 mo
38.2227 39 li
@
ZWYBVI+Times-Roman*1 [9 0 0 -9 0 0 ]msf20.2852 8.24219 mo(20)[4.5 0 ]xshgsave
9.47266 0 mo
9.47266 187 li
309.473 187 li
309.473 0 li
9.47266 0 li
cp
clp
309.285 5.25 mo
306.098 5.25 li
309.285 13.6875 mo
307.348 13.6875 li
309.285 22.125 mo
307.348 22.125 li
309.285 30.5625 mo
307.348 30.5625 li
309.285 39 mo
307.348 39 li
309.285 47.4375 mo
306.098 47.4375 li
309.285 55.875 mo
307.348 55.875 li
309.285 64.3125 mo
307.348 64.3125 li
309.285 72.75 mo
307.348 72.75 li
309.285 81.1875 mo
307.348 81.1875 li
309.285 89.625 mo
306.098 89.625 li
309.285 98.0625 mo
307.348 98.0625 li
309.285 106.5 mo
307.348 106.5 li
309.285 114.938 mo
307.348 114.938 li
309.285 123.375 mo
307.348 123.375 li
309.285 131.813 mo
306.098 131.813 li
309.285 140.25 mo
307.348 140.25 li
309.285 148.688 mo
307.348 148.688 li
309.285 157.125 mo
307.348 157.125 li
309.285 165.563 mo
307.348 165.563 li
309.285 174 mo
306.098 174 li
303.848 5.25 mo
303.848 8.5 li
296.348 5.25 mo
296.348 7.1875 li
288.848 5.25 mo
288.848 7.1875 li
281.41 5.25 mo
281.41 7.1875 li
273.91 5.25 mo
273.91 7.1875 li
266.41 5.25 mo
266.41 8.5 li
258.91 5.25 mo
258.91 7.1875 li
251.41 5.25 mo
251.41 7.1875 li
243.91 5.25 mo
243.91 7.1875 li
236.473 5.25 mo
236.473 7.1875 li
228.973 5.25 mo
228.973 8.5 li
221.473 5.25 mo
221.473 7.1875 li
213.973 5.25 mo
213.973 7.1875 li
206.473 5.25 mo
206.473 7.1875 li
199.035 5.25 mo
199.035 7.1875 li
191.535 5.25 mo
191.535 8.5 li
184.035 5.25 mo
184.035 7.1875 li
176.535 5.25 mo
176.535 7.1875 li
169.035 5.25 mo
169.035 7.1875 li
161.535 5.25 mo
161.535 7.1875 li
154.098 5.25 mo
154.098 8.5 li
146.598 5.25 mo
146.598 7.1875 li
139.098 5.25 mo
139.098 7.1875 li
131.598 5.25 mo
131.598 7.1875 li
124.098 5.25 mo
124.098 7.1875 li
116.66 5.25 mo
116.66 8.5 li
109.16 5.25 mo
109.16 7.1875 li
101.66 5.25 mo
101.66 7.1875 li
94.1602 5.25 mo
94.1602 7.1875 li
86.6602 5.25 mo
86.6602 7.1875 li
79.1602 5.25 mo
79.1602 8.5 li
71.7227 5.25 mo
71.7227 7.1875 li
64.2227 5.25 mo
64.2227 7.1875 li
56.7227 5.25 mo
56.7227 7.1875 li
49.2227 5.25 mo
49.2227 7.1875 li
41.7227 5.25 mo
41.7227 8.5 li
@
grestore
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TimesNewRomanPSMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 72 /H putdup 87 /W putdup 100 /d putdup 104 /h putdup 105 /i putdup 107 /k putdup 116 /t putdup 122 /z putdef/FontBBox {-568 -307 2000 1007} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings12 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB222483BD74F8B> |-/space <1C60D8A8C9B8707C25> |-/parenleft <1C60D8A8C9B81F2C3AC09B674C4ECE2BEF4D70AD3508D915EA9AE12419376F6EEF231ECE8179CA4531F29291ACACE060AEF98AD6F2FFF2BEA533946FFA1C8BC3953D72A31BB8ABD9782D71B2146F964D99646263E2D414F84FA049D36B9B13B7F6C8AA7A4A5EB0> |-/parenright <1C60D8A8C9B81F2C3CA029BC286E27661FD7F18B990CFF4A0AF58404A2F35E11D14FBA406192D392AD203A879E34B8FA3132863211808E5BD63BDAA607B8E04E23E92C61AAA8B57E5E7609689020D20EB927A1EC6CC0BC06B540A016D558248DC4A3E8183F5F> |-/H <1C60D8A8C9B6079F62C8472A58E49E4C65298F7DBB13584B0C608B103B8F2B0C72AF215D43C457FE4678B9114F992A1CA0DD95AD962EE67821EBE89C76AF7B7C203022FE3C67E29F7C9AA5921E4D15A2645D93C73845A47B6C4F855F057FBA3B47AC2707354E73F37A88912B11BC586C19F99285C7E09F7C6AE400A135AD2578B2C1702C267512A0254A355FAF242A3E032C2D5773AA8E4D90998616B06DE2126832E624AA95B6CEA6DE0CF980ABC5058497B243E4F1F614D2E3330AC509CE2BF6F280235C57C7347C7DBE389D9DA8C428E4F439ED717BD43889835C90DE66BDF27965E2CAF6D3F8A236> |-/W <1C60D8A8C9B5D6EF4CB383496C62617B8BD4FD4927BDE48152A6FF6216428592F5AFA3D18F24C53020F77DA565222C98E1F496EC6F2EE4EB22E43F233D8D98DB46EC3FFD79A8A395ED6571E9EE52C2D64F4FF1F26706DF3355CFC8C908EAA86ADD43E05EADD0D2F7D3DC578FF752F1D87291BBD55E577C117CD30BA3049BD39543241DD7DCD07617FA8A494E710E269F478E2E95BEC8AA7E710ACD0612E8921B3DAA59E93D8AA4276CD08DDB3A9B4D762893C74EF3108E125B72E190D045E652A0B8E8729169D251777FA84DD9EC852ADB1FB8FFEDFE199F837B9E862E992403453891> |-/d <1C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D203065B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD3329A86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB857EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5CCB01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD104E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A618879362783A36815EA1CE5876FAC4F83CDFE1BD4A> |-/h <1C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435E027FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194A0134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2D9C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B585E2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED8E36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15E97FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C4483796F735A795EACD82F245D81FB43B5> |-/i <1C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE365B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A640085090E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCBCB8CA3E9F85837FAC6> |-/k <1C60D8A8C9B7A73DB907772911B7C2CEAC1D2074B2642ADEDFBA1679ED254D30D2D9A5BDAE41A6A7C0D78C5D75E9522858A70EEA458FC30CFDA879F9C1CE85600A63BE4554ACA119AD822CC5727738E5E5FAC782F5B6F69100B3F9A42C95FB8AA53FD907276C4A477291A36A9FD6B1870ACEAFC297FB6D4CC1F0091BA09524439681D5D4A76F017EDD23AA69786F58BFB619D5D45A35621B583AF1C763E994CD0C086A4B52B5442078A662891B62F92DB77130357FD06A533719ACFEBED1A5224DAFB3F947A309ADA52BC46E57C120F32619B58880DFB59CA5AB15473CEA89B7> |-/t <1C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED29448713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC43DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E798B36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |-/z <1C60D8A8C9B77FE2C18484DB453227C527C164B5A1471C4657A5A14A46A1D3A0BD899640627BE2A7B9DB921E26CD53975830B919737E4B957FDCE605D77DC327B798A39B69F36340D55162C5C44140DACBE16FE7873A74F99AB90B7497> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBVJ+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut/ZWYBVJ+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 30{/.notdef}rp /H 14{/.notdef}rp /W 12{/.notdef}rp /d 3{/.notdef}rp /h /i /.notdef /k 8{/.notdef}rp /t 5{/.notdef}rp /z 133{/.notdef}rp]ZWYBVJ+TimesNewRomanPSMT nfZWYBVJ+TimesNewRomanPSMT*1 [0 -12 -12 0 0 0 ]msf9.97266 121.5 mo(Width \(kHz\))[-10.8457 -3.33398 -6 -3.33398 -6 -3 -3.99609 -6 -8.66602 -5.32617 0 ]ysh%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBVJ+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B6079F6D0C3DD1DA701F2FEF50BE2CCF679467EAB463D54C495B1FC98737C4805A67EB9B211579E256E1BCD120087B7083980EFC748D95F15A9738703A6CB4125517112E8D63595864B93D16C7B325AB1759098D24D8A43A63AEECA533864B64013C499C4207455D5210408E58672A172F78CB14D73985071102DFA93B6532> |-/F <1C60D8A8C9B7EF322BE6235043C5A7A6ECCDDDC390BE41D3E01CEDAA91CB335118BB7C10CD87A1A789356A0826D033ECDD0352DC64AE55B383C11F3EB18A6F42CD78A260CB051779A3B4D92350DD65D27B671C1609DC36FBFF44C40F44FB014C0462CFF40EA9650CDFB895B99B69FA8BD3EB8152DF452581818551FCC7745E9E79F62FD5E1668E4EFD8B2F33AB5D5ED30AB06AFD78EF98B1A68AA26FC8B4D7DDC1356637FA048F199EDF19A428> |-/R <1C60D8A8C9B64EDFFA947759DE5E4889D88CE18F8690AE99A205DDE2B03BD344BEA750622B2A044F453846260E52F609F4B4A04ACF011765AB379E687DE6B09D424D16AEE22850269A8AC1FBA0CB1130D1AA42D9BB70A20B4BABF919356C91EFB227A4D8127EEE951F8E9564FE86E42C72F4A2240B89192C9DDC8F972B78271704B555EEFB95806003600DA3EB98ED971FD7E60CB5D9582744AABB3235A69A23AA1EE2086410DF2F65A7A8081CD915B1599189D60C09010312710E9ABC20DA4562DBD2C8D044173C4F2A486F4032CE9228CB8A1897A7C6FF5127> |-/V <1C60D8A8C9B6079F6D060A2FEA7FC1569E0C14DA541DD91C00EBC3777BDE67491C2EA2113C451959D17D324EE8DBB436A0F30BF65402B93EFD32E095FD4A5BC20760673D3864924C1ACF695D3BD682644F24B440E38C1FF24D4CC16712B502AE5F89EDD273AE3A1DBED84FBFBD9B8AF85ACA697ED4658DA6CFEAC078154F7D9BB4AB2053> |-/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984A59E1CFFFD06EA629758085868D3F5F7204292> |-/l <1C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C4304B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B6828D244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE5527D6441CE02F5A28D63A618F> |-/m <1C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE11167932D24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA1816E9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747A2556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68FD574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F249107C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D18CE6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE955617323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D987ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FAFEC679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE82B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B517996> |-/p <1C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD40EB48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A09244048D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBAC666023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F75904A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B8431B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C076E94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02DF1C7730E7CC0F462D79552DFA> |-/u <1C60D8A8C9B7A73DB9860E0681DA8AEA1E5FBC1C72A452614FEB33CC58A199CCF544A550BDEE35652D618DE4A02AA9CF0753ADA232102DC8DC25CB958152D1B74BC447B68C074C25C2126470565A20B42A419CDD0C7A1DA63C6A764D555B867A9BE961ADBD0AF5B2007F47FCC9435F8B51D3F3A5D83941DD57A0C4D32E169A6BACC26F8AD3C9372F1114911D1D3F3FB2725FADBF9F529AA2CFB178B79F97520325221F3417C7781EB09765> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBVJ+TimesNewRomanPSMT /Encoding getdup 65 /A putdup 70 /F putdup 82 /R putdup 86 /V putdup 101 /e putdup 108 /l putdup 109 /m putdup 112 /p putdup 117 /u putpop%ADOEndSubsetFont
/ZWYBVJ+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 23{/.notdef}rp /A 4{/.notdef}rp /F /.notdef /H 9{/.notdef}rp /R 3{/.notdef}rp /V /W 12{/.notdef}rp /d /e 2{/.notdef}rp /h /i /.notdef /k /l /m 2{/.notdef}rp /p 3{/.notdef}rp /t /u 4{/.notdef}rp /z 133{/.notdef}rp]ZWYBVJ+TimesNewRomanPSMT nfZWYBVJ+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf133.973 205 mo(RF Amplitude \(V\))[8.00391 6.67383 2.33789 8.66602 9.33398 6 3.33398 3.33398 3.33398 6 6 5.32617 3 3.99609 8.66602 0 ]xsh1 lw
[1 1 ] 0 dsh
36.4727 137 mo
309.473 137 li
0.882353 0.768627 0 0 cmyk
@
36.4727 149 mo
308.473 149 li
0 0.992157 1 0 cmyk
@
0.1875 lw
[] 0 dsh
377.473 193.5 mo
377.473 190.25 li
0 0 0 1 cmyk
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBVJ+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Gamma <1C60D8A8C9B7F9425500508AF94754D32B5FE904D6D9474E6511FD2FD3C32186D9DEFD3204482D994558D1E7DF043C75F90309119D1BA3F06505366B895212DE3E69AED2269F375D4F069A56C1C6EA7B97999DF583E0400A4BCC2C00E5E4B6D8777953944D> |-/arrowright <1C60D8A8C9B5EE31039870AE6632D47A0B323939F8C9895E62997C49DF864E3BC891175B7DCCC6C52DCE758FC8C449FC3C3D5DD72B8F691952CFA277E9819FFE9681FA75B3A6FE205B0EAA58> |-/period <1C60D8A8C9B8707CC95A9B5DFDE3A4AF8C8BB7D0C82C30C322ED94985BC6C2F162CD480F8280AD954FE8DC511B40B423DB4A6012D9C419E4DF4F375C6ADD098717CA70F621> |-/zero <1C60D8A8C9B7A73DAAFDCA97EBBC8D8E35A41D9404C5638B059E1CA50B5366543C3D584AD9E19987218AC5999BB0F2477597AB6F8DD868788C8440CBF4A338EF64ACD9BF2268656755741DB71FD86387D4A7AA1CFD19937BFD209E4FBCD1952717C8CF8C0555CB2D0238DC43B2A6A2DE4D7366DB210D2673870D0B0C58344E6AEF91B916BAAEAEF37B22F065E870AFE6638E56D0B4AE01785D59EE23402242D396440157FC51> |-/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F589D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C02720FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF41DB28C0847307B8DCBC66> |-/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11EC41D90433CE0F55F0A42A96AF852FD50FA> |-/three <1C60D8A8C9B7A73D83638F79AE86E17D4CE334FAA90E146D21CDA0FEB71815E9499D6C6A6E581E78F34038D792771470EBF894DABD777E9B4FDE68E7E1544BCF1EFB2DCE59357B716B4D2ADF3EAC3A9FF8BD07EC79AF5536B9B74185F8F7489AD909079119E88D2BB755D6F6AC02C01BDFADB347EC55DAC49C8BB047661CC7AAA3BDC1DB8E01EC56137B53ED31B24F4502353853D049BB0515CA4217D33D10484933F30AD1EAA43CFDF00AFA5462EE9B1772CE60A3392B8D9C1A3598CF2273E36A1FF3A58B2E24B1EACE5E34650257902678998DAAFF235764CCCA143A> |-/five <1C60D8A8C9B7A73DB97C1FD4849B14157B765BEEE66B9438731A1E1DBF6D904609867EBF49E3E19DC6BA786F7382AB36C8CFA3690DF4F8E7A258691DFDD71792965BBA1DCE407BE309901C1513A762BED3C73A852D4EDA1BE20A2B364C59E2224D36D9C8BEE5DE8D6C54C49D0F66DB7448A8FCE0E63D5DEE7BBBA026A808CDA9AD5556005639017FF42B963FB833B4B64B6445B350600BDCDD563F> |-/seven <1C60D8A8C9B7A73DFE31854B8CA51F015562FECC80A8475F282F772252E10D05B7D43981266F60616595AB1BFBC47BFB03D1BE> |-/eight <1C60D8A8C9B7A73DAB2BA6B835CAFB4C9A41096F555C470FE6294A707AE711C017C95446B200870C2B6A47FB931BCEBEB5BBC6B53605850C75701306FD83F9DC906687C2B3A2C9C0DB9DB68E95D3478DEA01153491C8534F5AD899980F04C195BFB522EDEF282420AA1F12E08397ECA941D5934294BD451B3952E6229D3E7987DD36FC8E43559904E0205D3416EDD1402AB05184D2018B2C7B816330FD0C2740A24C74F80E34F93317BBB1D6B8C4D916C15B7FF1D533D7762324A1017022A27246D93B9768262BFCC673CAD6781894C98679A5889F9338F377D1995AEDF5695FBA7A65628522691535557B2045419DD63F87D7A64B6A962B> |-/nine <1C60D8A8C9B7A73D92CE6A66BA49C70A16072730ADF99EB50B81EC870A54394DDFE38FABEC18FB7B826889153F28664691169009324BD4E9661571BB91EC6E47B44C4894E182CDFFE1F715113C62DB236897358730FEA1D138847386ACC90D129A1077A70DC9DAEA483EA5552EB360DE0397958942F0F1C3FE8C7E6CD3CF99FAB1F16B30CA1A210BFF9DDE43DE5ED76615C174EEED6DAB9E5A77B1C62FBE9CABC1B3A46D497C4D6EFFC96F4CC02C8A01382FD55BD7B4> |-/equal <1C60D8A8C9B7E7C1C5666C28B48CD4A694178AF152D7001F5F174D4D8F120B3533D4> |-/E <1C60D8A8C9B7D8BE19945133FE501067A24BBF08B984801DD42E090C7BFCA94BE6C4AA953A8A674F2ED3DEE261A8700CA873A3A1D3699D8129F8FA28DE52C44FD8214EA37190B26E64C97677BF6E1856F59EF49286A31D4133D861C74CDB92794376B13E311920B8F547FC8F105147550894C833300FA326DF7877402F2A3FD3184C9B8E130B79DB62E2735C65FD4E7A86140D8A7D764E8F05488CC1949558757A62743714E5384E2EF166B32CB849712A9C93B7CF04FCFE8063494A215FA79B98816AEC20BC3F> |-/S <1C60D8A8C9B7EF32243DA21D5631D8766D74D715030BA7905332A0CFAC49387DB487F69FE973B04989A1F5B84226AC0574A3AC8A92A20A67AC6A93CF1F8D7D050DEAAE8CF31B4A5FB504F0A0814E8C9022E7C7EFFB00070B62EB780F5BFD7AC1407620155D4B738E953EA9E8519FCB3635DEED6C82D9AB968BE1131CEEB6B072A246B745E2E47F0890CD4A4DD5061C30741173A5782D0F5AE0E645337518CA765AC1ABF9ABB13F9D6F8666630C08F558B2481DB7C0FEA08930FF35DE904907DBC222EF06C7863FAB3917A57116C566327E1977A70091D7628A2440BE3AB444BD01341C54F829742469A9B1CF3048C0B204E355F432B93B12EA12C84F80CE13D22435E5FCC1B5A000DE> |-/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9AF110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D399924398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D6603C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83F23AED1F56FC130F21> |-/plusminus <1C60D8A8C9B79676FB1F1C3483630A3E746B8D92259F8E9B8C36D901B78257C6EC5CBED7BFBCAAD6F9FE91B7B7741966EAEA858767D1> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBVJ+TimesNewRomanPSMT /Encoding getdup 33 /Gamma putdup 34 /arrowright putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 53 /five putdup 55 /seven putdup 56 /eight putdup 57 /nine putdup 61 /equal putdup 69 /E putdup 83 /S putdup 98 /b putdup 177 /plusminus putpop%ADOEndSubsetFont
/ZWYBVJ+TimesNewRomanPSMT*1 [32{/.notdef}rp /space /Gamma /arrowright 5{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /three /.notdef /five /.notdef /seven /eight /nine 3{/.notdef}rp /equal 3{/.notdef}rp /A 3{/.notdef}rp /E /F /.notdef /H 9{/.notdef}rp /R /S 2{/.notdef}rp /V /W 10{/.notdef}rp /b /.notdef /d /e 2{/.notdef}rp /h /i /.notdef /k /l /m 2{/.notdef}rp /p 3{/.notdef}rp /t /u 4{/.notdef}rp /z 54{/.notdef}rp /plusminus 78{/.notdef}rp]ZWYBVJ+TimesNewRomanPSMT nfZWYBVJ+TimesNewRomanPSMT*1 [10 0 0 -10 0 0 ]msf218.973 161.5 mo(!   = 2.80 \261 0.28 kHz)[5.78125 2.5 2.5 2.5 5.63965 2.5 5 2.5 5 5 2.5 5.48828 2.5 5 2.5 5 5 2.5 5 7.22168 0 ]xshZWYBVJ+TimesNewRomanPSMT*1 [6 0 0 -6 0 0 ]msf225.307 156.834 mo(SE)[3.33691 0 ]xsh211.973 156.834 mo(85)[3 0 ]xshZWYBVJ+TimesNewRomanPSMT*1 [10 0 0 -10 0 0 ]msf217.973 131 mo(!   = 3.92 \261 0.71 kHz)[5.78125 2.5 2.5 2.5 5.63965 2.5 5 2.5 5 5 2.5 5.48828 2.5 5 2.5 5 5 2.5 5 7.22168 0 ]xshZWYBVJ+TimesNewRomanPSMT*1 [6 0 0 -6 0 0 ]msf224.14 126 mo(SE)[3.33691 0 ]xsh210.973 126 mo(87)[3 0 ]xshZWYBVJ+TimesNewRomanPSMT*1 [9.6 0 0 -9.6 0 0 ]msf69.2227 27.6494 mo(Rb \(3"3\))[6.40332 4.7998 2.3999 3.19678 4.80029 9.6001 4.7998 0 ]xshZWYBVJ+TimesNewRomanPSMT*1 [4.8 0 0 -4.8 0 0 ]msf63.2227 22.8496 mo(85)[2.3999 0 ]xshZWYBVJ+TimesNewRomanPSMT*1 [9.6 0 0 -9.6 0 0 ]msf69.2227 44.6494 mo(Rb \(2"2\))[6.40332 4.7998 2.3999 3.19678 4.80029 9.6001 4.7998 0 ]xshZWYBVJ+TimesNewRomanPSMT*1 [4.8 0 0 -4.8 0 0 ]msf63.2227 39.8496 mo(87)[2.3999 0 ]xsh59.2021 23.4375 mo
59.2021 22.7979 58.9111 22.1582 58.4473 21.6934 cv
57.9814 21.2266 57.3418 20.9375 56.7021 20.9375 cv
56.0625 20.9375 55.4229 21.2266 54.957 21.6934 cv
54.4922 22.1582 54.2021 22.7979 54.2021 23.4375 cv
54.2021 24.0771 54.4922 24.7168 54.957 25.1816 cv
55.4229 25.6484 56.0625 25.9375 56.7021 25.9375 cv
57.3418 25.9375 57.9814 25.6484 58.4473 25.1816 cv
58.9111 24.7168 59.2021 24.0771 59.2021 23.4375 cv
59.2021 23.4375 li
cp
0 0.992157 1 0 cmyk
f
59.2021 40.75 mo
59.2021 40.1104 58.9111 39.4707 58.4473 39.0059 cv
57.9814 38.5391 57.3418 38.25 56.7021 38.25 cv
56.0625 38.25 55.4229 38.5391 54.957 39.0059 cv
54.4922 39.4707 54.2021 40.1104 54.2021 40.75 cv
54.2021 41.3896 54.4922 42.0293 54.957 42.4941 cv
55.4229 42.9609 56.0625 43.25 56.7021 43.25 cv
57.3418 43.25 57.9814 42.9609 58.4473 42.4941 cv
58.9111 42.0293 59.2021 41.3896 59.2021 40.75 cv
59.2021 40.75 li
cp
0.882353 0.768627 0 0 cmyk
f
0.5 lw
4 ml
113.472 64.834 mo
49.8052 64.834 li
49.8052 17.167 li
113.472 17.167 li
113.472 64.834 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
2 lw
53.2021 54.417 mo
56.2021 54.417 li
0 0.992157 1 0 cmyk
@
57.9521 54.417 mo
60.9521 54.417 li
0.882353 0.768627 0 0 cmyk
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBVJ+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/alpha <1C60D8A8C9B78FDBCCE5624A4ABB9A0318F5C7FE33AAAC248F0EA4A312A945BFC7480BDCBAAF301400364E3D91981E5130087F33E4752CDA80D616D2E9BB419DD06DE4AED010E2BB1632C4CF29B733AAA9ACDE696C69159F1C166EEFCF1528C8B3B8952E12E44A8E74C0A28A56A687C49A5A5ACDDD7CE725086B85A9FFAFF823749FF98B3290F9FE3C582D679648B62BA305D014E79654885BDAD8028CD2BE90> |-/beta <1C60D8A8C9B7BEB141E2E7F390C3F2BD35BE43E5AB4702708C4E733E7863E8144B2F7ECE2140D78C170DF3E9B1684DE64A12022D0252BB104AD257CEFDE94F920A1A518738B7FA9545C6E0034753E393A5C73497BDF9A4CD91EA351F7BD3E6E0BA517D000A6D9051B35497B55C54FDD7B34389DDA405DF6EE10303F6FB8A2B5CF1DAD8563AD456111BA297BACA6EA753EA7E07B23D273A27064B779AB11CAAF4FDF71FAA4F2450552B79A6F05C98AE4ED6A9BF3CA246CDE56D1636ADAF0E02A8EBBCDCDB905F9ACA8999BDF595346E7082696520B713544669> |-/plus <1C60D8A8C9B7E7C1AF20108BE9542537F46D63CC3CA2839958A1F5DF80C8F650E8951850C571859AA14DD682> |-/radical <1C60D8A8C9B79676FBA299FCF92DDB4EAACB384437269656AA016177FBDC37A1E0F381C86E93CA45D093> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBVJ+TimesNewRomanPSMT /Encoding getdup 35 /alpha putdup 36 /beta putdup 43 /plus putdup 195 /radical putpop%ADOEndSubsetFont
/ZWYBVJ+TimesNewRomanPSMT*1 [32{/.notdef}rp /space /Gamma /arrowright /alpha /beta 3{/.notdef}rp /parenleft /parenright /.notdef /plus 2{/.notdef}rp /period /.notdef /zero /one /two /three /.notdef /five /.notdef /seven /eight /nine 3{/.notdef}rp /equal 3{/.notdef}rp /A 3{/.notdef}rp /E /F /.notdef /H 9{/.notdef}rp /R /S 2{/.notdef}rp /V /W 10{/.notdef}rp /b /.notdef /d /e 2{/.notdef}rp /h /i /.notdef /k /l /m 2{/.notdef}rp /p 3{/.notdef}rp /t /u 4{/.notdef}rp /z 54{/.notdef}rp /plusminus 17{/.notdef}rp /radical 60{/.notdef}rp]ZWYBVJ+TimesNewRomanPSMT nfZWYBVJ+TimesNewRomanPSMT*1 [9.6 0 0 -9.6 0 0 ]msf66.0479 57.8999 mo(#\3031+$)[5.02979 5.26855 4.80029 5.41406 0 ]xsh%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TimesNewRomanPS-ItalicMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 120 /x putdup 127 /twosuperior putdef/FontBBox {-498 -307 1353 1023} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704AA3988900AFCFF05DD> |-/x <1C60D8A8C9B77FE28E7B59861DA633FA42A38BF207DC4A11329E63F668010B05585B22E39E733F2B39E647F14D7DCD27965006EEC01D3FBB556E503629E45F186BD20587B6FF8BB4E525ABE63E26F210C9F85E012A8DB6F803B316624083082E536A1274247334ADD37479C48FDB7D8ADD850A8832DF9217A2BFFEECF6DD96F21564B9189ECF65AD0E783A58F9E296A99147AE132DD5B0142AB4EA5741668F4195BDF7097E5D12CB419F2F282E538E1EB21217502E3C6B11740802EC650F4D2ADCD4B1772219DAF6BE6429CF2030BDF9C05BA7A5D790670BD325C71A55CFEDEE3AFA9492A129CF25024BDA2414AE27F397E2DB63BB72C98E3704AEDCD4D4A43DA02887C90FEE11520BD99634849C2457543FCB5BD3F0> |-/twosuperior <1C60D8A8C9B83E2DB9A2913DDA2883FCCAD1FFB5F7983AAEE819979604F2BFD2FB3F2B4F7B179641A2178085E4C0DB4113B39E6AFD3CF5A1D531060A6320BFD011B11FE55B33506C087A760DA37DE5443B29076BD391C84E00B18764B82B9D6DD6CBCE78B66885F3BD2503661D3E74DB2CA5E80CFD5FC68A55> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBVK+TimesNewRomanPS-ItalicMT /TimesNewRomanPS-ItalicMT findfont ct_VMDictPut/ZWYBVK+TimesNewRomanPS-ItalicMT*1 [120{/.notdef}rp /x 6{/.notdef}rp /twosuperior 128{/.notdef}rp]ZWYBVK+TimesNewRomanPS-ItalicMT nfZWYBVK+TimesNewRomanPS-ItalicMT*1 [9.6 0 0 -9.6 0 0 ]msf91.4448 57.8999 mo(x\177)[4.26074 0 ]xsh%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBVK+TimesNewRomanPS-ItalicMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/endash <1C60D8A8C9B7A73DB62A0F798E4A97B8264A4A5B99089F> |-/emdash <1C60D8A8C9B59F85EA24FEB3C3CBC3AB076E0561B2772455> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBVK+TimesNewRomanPS-ItalicMT /Encoding getdup 208 /endash putdup 209 /emdash putpop%ADOEndSubsetFont
/ZWYBVK+TimesNewRomanPS-ItalicMT*1 [120{/.notdef}rp /x 6{/.notdef}rp /twosuperior 80{/.notdef}rp /endash /emdash 46{/.notdef}rp]ZWYBVK+TimesNewRomanPS-ItalicMT nfZWYBVK+TimesNewRomanPS-ItalicMT*1 [9.6 0 0 -9.6 0 0 ]msf76.6016 51.1001 mo(\321\321\320)[8.53613 8.53564 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/ZWYBVK+TimesNewRomanPS-ItalicMT*1 uf/ZWYBVK+TimesNewRomanPS-ItalicMT uf/TimesNewRomanPS-ItalicMT uf/ZWYBVJ+TimesNewRomanPSMT*1 uf/ZWYBVJ+TimesNewRomanPSMT uf/TimesNewRomanPSMT uf/ZWYBVI+Times-Roman*1 uf/ZWYBVI+Times-Roman uf/Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (steven schowalter) ()%%Title: (spin_exchange.eps)%%CreationDate: 5/13/09 2:56 PM%AI9_DataStream%Gb"-6B3QlJcS0\E5lO+P,c"4/VhF[LKG&T()'G#1b.dUr5+LMZ/:2]?-K/8)o3Q(sCBM\'/6eEN8X:p22a:H*qh+E/Ie%Esc,OEU%PDZsc9\Raf@kOso3k486g,@><S)g5NP[eD;[8'0T1m\h].8G34&O0U/As49#T,/ila_[Pg(]JNrmaKGdHI?fjo>BPJ5OSHRe,*1Y%;P&g`W9Nt_`6TZpP>PtO*eqc!1]BW6S(?-S[GJBTg7gACo^G5Q^T6I<3ZRYf/bPU6`F$f@+^^hb7\,5p*Mq^VL4.<"#K-PoEn'2`%)0_$7^t7?lSp>[CVMo*tJ!7'Oj5+b.k?DWfI(qR+O6?!Tq253diYMuUC,B)uNM^Z@hb`;ej//Tn=INjLmmJoGiu%\!*D`NY+).08%-Q'>mnWNnhbSRV2@PAZa#7/stIP`'g(-GpA(l]<Yc)/tRVrDWg-(6#q`A"AT&l6"NW-8B(4I)8"s(B.I-\L!W2]+1po1q.#et>Me%Q('A.#60><St]qCJu6Z!QcgO:CQA_)*Z.[eo%N?(cO]QAKm1_X%Uak-s"X(?dbq\mqqr9H2CHBgbS!8dO3fpE4+I%Y>j*d<H9UH2%f97.9g*B!`3phsV9Jhl&`8(ij4%%&PmNeNP2M'g4dAOJSOhjkJ@6mE1NS&^n/Pum-gA,RS0c4PVd3W-MZU%r)a<^(HOWSfLd?NYj%[.lj'.@Tm<_2j;4,K_L+b5IuU3kZ^;Y!3N'NB76X(eZn[6cl*7*u@"s%RP"VQ?$(&J)0ob$_T-krSom4R7P->F;fTD$KAN7#JW8/%SoPf5jZ)h<>_]`0>DWKi6?l/=:M?"a5c[;I>Sd31VkHgG%;cZRe*qNA%B\&mBE`n%:M<`V5c[3PhCKB!8YH-$b%5g$/gh;$G.A%-%b@U5S))3!^)%V9hT#-uVF,k<ei?u!a3PeL)"`k;h8tNkXi$Ym_)8T+9[tk@]0$FWN_C(]_r.LXISk.0],PVT:L>VJPbR%YiC_HNi%$K_LVThW'+hhgY$,:>Gt=<q"#TB&^%F#&%sFttrW*C_ZaOk>9`K2sZjp^'*G'dU+4ccD![DeK=G'3CQ/KtIfbK:hW>Ak1DoIZfi2%2t.Ja_>N4==[bY'"Kqql5SRo47P<,M\7T9!"RFEli(_,tR5l-JN1>ib^a2.%lU>!5s.BhF:8CRN*P>*Y9qK6"i$YlUoF:C:3$Ib-%:M9j:F*U3s(3t[CN^+`:/^gjo.jDC;a9e[S=qLKr>Z65u1-1#0!ghgS7P:j"3&`U9BI,tm]p&34F7PBNS8]gKB!UP%2l)3ar^Z0R%k'$<Ub:@V6bZQ-]AD/E\/^h=+J+0m?6R&GOX"7^_?3_=0Le2hq`eHHREP*K#dP#m0@;,QLIM8^%#le"m4HY,WJ$Bjd/H7's>i'^q%HmAY<s,otE=oM.pV,HAq.ODr,$3,$+njNIOroNb4Zi$<jF*W[4nr<R:r%"&RBDFL^7n`l<4GU=sT4D6LBCQZ2NTS:$$F+id812UB%>RLL<9GYh5A<BU'DtjP9,>Y#(r#8[+p_4NKXL;#TY@r\L3MBgN>Gj@XS1ML+jW[VQQfBXp7n,,D<L2NmYq+s6eiZILA_<<Nof`cN%`HgdXLm?/g1)n+U/h1I'g(iX>GWT&'VN\kU/13Q2dA7FdTq>o@1[(+r"7oQSEV4h:ZH/l9^Ei)ARX*<BAIG`NaWc+i!Dhe\Lda5"%Sl$Ol.ca-)A.,'fGiZhSOjJg3&+5k'UJI39ETi;r^1Dk&\U9pK(q`.8ORs/uF"-o<e40RML5`"*)@_9m-f?Y.8Ea!(/WC)2_5P@N%OQJ-&17"-.?_g=E/5*38Cs`l3(_-+/`[6-fj&02n1_+f=MCbH#%VA/lVo3NoT`U2gpV8*^ALlq1`sBt1:H8T$'H(=;9M%Nqn=,?V%`GkmDJ\Oc@A3B@Jd$H_h\@=$JW$Eo>-2pq9!KBJqZ3f'kP4H*_2GfF`?\,j]<fm54dKlpV):9p[1G.UV;3+6D?,2g=a!"BDp`!fo%@>t@?-dsd(S>(3R?PRSb0#o<^7-;>N]=\7k+9=42<4'maFf>S+MpT"*'8/]o8grp2Aqh]Fe"AD<,*O5#NVQd"B7eJN^r?5A,'-`+%0'.uCQOZ\qjoZ27#j4hU;'>La@:M?NH-!W-S0moj'OV:_5WBak8VtrJ30,4='Ljb(:Q`j4@1B_10470'98rM+j+tnl0WU9jP"\R`%Sl>>K7a9=Q3X'sbE9P%VZm4'EX]&@BV^-uVA;i(Z"n[l4/!LEUGWRME,r+N\,Z+gg2qel'6s_!NbN0*7Fs2Y8'"mr/IOiT"TbiGK%(HEG=^nqCn,-?lhH]r_VNB]<iFol+?Beg%d[d[mkV.K(Z1!9j'PEasgi1[X-HaIP,5`0!+0g[sh2A.2riE^u";W:p^0<LnH\-roH%O%7<j-rn'Nr&3EX7"0\A@$kqY>N@L2HE60H'<jlt1\+^XkSu"Gb4V(b9@XDCA-J,VBnB?!hK\0r+2]i=;'\eF".N9(O8"sI6D>6\%j1m12P<"qfJZKa/8=<"kGRNRAN&W0NJTMroS-)?@poMQt<;=H2dQ&U"8n5bZ$Rh98X*.$jhLLO'0ai"R8Mg\^[E'8K]IT79Bo-Pt%/FMcn?:^ldn>XJ9];36?AWRd@$#=37ncZO[GJG,U"FV5E3Q_.C5_Yg3eWpNVOM;))^]<$snD59ZDfK,7+Bj[0HNVZ#=A8<O"Yu,N%*/IK5;f"dj[4#`WX[^57)$.MgAS+6^/I:L&--Tf^1=>TAHHQ@:b2Q/ap.=gL+ck[n"/EsSds3,jUc6`&^O]R1T9,U6Z^[-2j8V+6%$*[>6Npn'Ir[SA+EB,A:7o*7^+8lH%!k$%dGOaE-aR!0CO=*ibrKbMb6s3VUjFP=mGG)-[,*rQLNB&R;E!o3i4HeIo4lGJ.^fteD%%f?R(JBegQ^E^G-1Q41XalkD-UI)i\(!lJb+"J/Kb!S6;N?s?.s)R0Za;R0M6jKa\_+N=dKGH%sKh+Y<E*,ITZ\SQ8O-S>qhtV%V%I>ksYM.Db,'PKbM0:`g7-5`"l:"UhuX@pX?'%;2"[Om>P&S6P:=!UF9ck-H+)).$H'6G>5_aG],4A=[p]j0V>EG$W#`4r#/"@MMg%L&PBooh!P+!R;MY,JT)RJ/5qo_L;_NOf5g+lq4+G."0+(VPm"_bA)kP(\^oq<[kF=)/EDl=mCEmca*MO*N/UX^!B:i=?.`,2jH2(%Vl+:7V>O^#D50%shofr-_6ASEBM8J7'EuZ5/]qsV:D\47pag/$`i\nt@iI$PqE2h/Jh7q-:ncNFgqUdOJSJ`oMV'5tp>T`545&Z4%etekl(>6J)c&8kuYf)5u8=F$lhV$t0OSrDPWBe)DCuoiGXT1*k=u(\?a[u2U:+8[9X[I$(9)G!+%F"EGK.,d9T-^'Ybd2u778AUc%KM+^)!-9OV'$HB<'mU/=_:E*7[7Z:i$#G*X77e^s('RFNaLc\EGRQtj+^,CZHe=<3<XL;d/`pPRQhQfcI5hf_Iha:T34bT;B18rU%A2sB-c_S>GP:M*eS@TbI>akLl:)<bT0`Dp[mW='WR!&DeiRE_,o`tC'4df6Z)1"skH@12r*-S8YVmfq#eCe:bm.8`;fZZdlV)LH2%8I+uZFaA[CD`N+co)DT.\IEi!K0/OYSb)VN(WDS>H,Zhso]gsK59OeIMDbR9bntZnU*c]'KX@9ug.nHP'/GduBt>QaQZ?"@[?TD=%4!,RBN9[/=niYGipnm0]IPuj^bkW<M<`7c8E6']2BkIVeR!qrsNDX?Dmg]qqB))!6p"$$ePNe^mi8\lE/S:P;5O-J,.5D)6>]`)2%o_E\\=/+"'_p82/-%.Wk0'B"GGUYQaJ,eKJe7bi[g9o@(r&pJ@hg*`%@*HOGUX$N]*5Vrc5mMfk5lY!XF-pKfnt.YUs4\K97efbI%?%ZHrLgH2"H65o/iiWdO@u6M?+&*M<rd>r>,+.;D_nd%!5+d"E4I%.LOV<OFpf4%85U5;Q)A:#Mn1RJV#fX;PnH8"hJ!.Po?hOa)%%"LSgUe*P\Qi;<'Fi]H+QEpl=.HV=Yh"VQNc:,DWd"DSn5`hroJhuWnJ`*r%q5i>=o?mX/#Lmkc3EaW>M7BLSJj`7h^N5&`9%)Wi%">r(-I8*;925sH41cd"Dc5$;7o0+NRg8%/AfhIqulGH6=k6"?H2Hbi5V`+^(TCJ^[VhZ.AYVb<P(\P<YIro;GdBKr^+?l<Sq/<:b%61;@e9DIF.?@TY[01UE0I>/f+3!:e09&nb2,#^8b=%.(`.a[4<;Egh>bt)Zeo`OFia[!*mp[r@E?iQPbcCc[T8T]PW`/uI_UfLk#%]hq@p/B0CsX(.BcBnn24An/c?9S*jEU74_p'I#..BA"/s%gcu)IRg,DnOFb,J=LQ\[,:?n?kE+k@T!WU/L37kK?g\cG^lV&%RrG)%Kpp:6rFHL2eH+rT!W)ua5*`"j8,Pltm:+L`$40Rk6#J$?UcMHH_S<r9dOD3;%i66FbJXP'7fr"+q!eS"&PpbuLd])FeXo]_145q>%Dq3(l"T>N;3Eh6Q+_\c92MENXf@Fnt*`Zg9jg6ppT=Fg0rhR`L>Fia24$Q,BC*%=%hiWt;ncns!3V\@WhaKVZBu%*jlP[Y#I(7M7%?YH3#0+2..IpFW2$f8IiWuf3QbhW$IErP=;SkOmepsbA#@1$B%Dk[,Z#E0FI@=16cQsPIl1seS3bng>%:f(q;#jC5sF74emg9e,^%1[+'(d!760,0q5/.h=]t?@EuG'S"j[9?c(Aq+.AP`A]B14M;nfo`o2E,O=3Dr;1"_;P4JK>8mOZ%jt;p+Jj#'%e%.!bbeuX__NBl%fgd$6q,p2IA2K!B:&!1NB?K8n/j@Igjcp91*d5PoR2^W/FU@%4d4^YqC6:ouP<+\UfN3sE8Ana[3dr5HSj696iXa`a>Z>3le4TYT%SO%<6:XIamZd+ANLL&E[@"]f6ploroU]3P`@O*,a^AEOHeBo@Fkc=`nA+!:ij"p)jUMoTREP"<.C6=>p\D1bAGXoMk?m8Mtq3U$:%rY"#YhgrtuIgIb!Qf,0!#qkt=i5Ya/h"Y6.S+oWqs,t%SrfXqRrfXpOr?Z_(qb-K0p6Xi?ln?J]fO'eCZ+hQf@fOL1eKaq!ZQ(Th%/HC]#,4OJq#CV.G=Qdd3"3oL?2.J=TXIUPX<n9ts(#2i&a<R/cO1j)O5?_oA&"`LNs0u*MITem9.kclL"Qr1jDPHQ`9<^0GggD.&%StX7N@TYoTs,ZY,l:CNC60H*e`FL67`:6HVT+PYMVZHM9G%Q6nB?![-OTC:i)[+=^:/Yqj%5j^HF+/j;R`RelC^OS4!CUYA0D(!O%WOk(i3rIS=hYP>rG_7o!A$T?i]A/A]B_'CUNN'P=k1QQVlONX(mJhAe*2COdeB)OR>qVrIEjJo([/0/B[a;d`<UXu_m*GG]Bu@N]%)HnTS.K!<G!OEN4qL.E"lT^rnquH9deH-`1lDFT'L.ed'Hp9Q'2b%h?1_W>6=+0pPMB*t(GoMPW:3tfFh[X8:Q<PQWFm%9qi(R(h%`nV,F>k*_.4:1?L.9g_)q)?4p@u:Rso,i(c6f&=3>H[8k-:Z>ZA"2#Bl!L<$QsO\k?VEq==-EM'*G4FSfEu$t7P&/<*.OM4crg:*%L@TfrQd4Lgo3]-Ls(+*U%gTfJmBS\hO$u&iQ#KZgHtR+TfDc9UMbcDb/2[::+ug@uU22#^3NGpsi\^!q95OEJk9\s&@54s8D=QWC%SrIi_LrF30fU:!V^HNUa&2]hFGHsI`6'He*ONSm8b\HgAs+9V[bIssuEn9:@4Y_G7s$s]Nh]BXj?Zc-8*SPTTkmb\<gDBc2G,S']%33:"MS0U=sSUOr+mML*/h\sA(:F?NEX3PZ,&8"i$T)NgC'r85+9lDeW8RoongpuNUikFbE5igjQp_>_\g-+gsq3cRn(bLNqq5%Ca%B[N5"\s(F@n*\"d1W"4%Q<L4l2)>XjndjV^9P3^1B@n*r<l+'IG8C+kg*re_N*A]OHSD)-'g1n:`:Mos*'BHF/YX"MHcjZ!V$Z0"%\`J0U9Y:<G,9n6=`r/2`n=_:$X#`IP/uGRuH2!/?S;S?Gccr-QM^6:lROr-BnU0%VeD'kQL+qhd71iVFZ:fu^'>VZA(n39ub::;3%2KdI89_<g:%T[>dW"u*R3YJV.+h12D_4oC!$jV\Td]/-,a1*Ek-'#?U2`p&\A`n\i[jG$nl26U?I"/@?.Fn_DiU-0.LNln]B>*0E%&o$>K/_mYh@n#'MD%TkIYhE6QhO9X7B*`G#nT2D26u#qY!7k=Nfi%Y@)D!"].R$2[fUL+]I"-9(DX)&D:d%jCHDu#j,`K;$>2hG0%M-/QO`0&6SO\cYe\5N-4/OtDd;"?53I8.:M6kmGd>+)I/2FX[))!$<NO'14Rr]QWlOj*V2Qi_tdg=`!Od4(n<-:0\^W)'u9g>eLh%:)i.W(QYAG0cJO/nO3);]*Dj4&"h&N+sIGO=$a52KF+KX/6W)0mKLGoI]7G$-f^YX'DY,R&0[WH$?;?<-*8[/((/h!_,j&&C*]PH%C^B!f9LgCb$/?l#+(FO9/s[AY\BG<Q)^Ae!XY,khECH>L7M]]UN@jg&a]m>;[9u5L@A$'o._,Z6O^qUn883d9k)3ZT:O9r9/Fnq\%]R+ltBJ4-sG2AY\8*KJ^CjT"-^?s4&Io1NE8VuY42OmNTd/dK,(kq;ZHS$$I@5!M9A*,@UZ:1:BZfZ+]*@$E;eYYKCqk)"-qj_"q%2>bl[dhS3tIQmNDG>oKFDF;(D?,;Q+CcH\^%!`fZ3qMcI1$VHWS!#\9<F'O>F`06,gWgXmhZ]t3-:<KQP*k[SFdj^pBDq%)#-;Zm%-trC9jO!(#p-/V((pq.AK!I&#70KQ&KYu(lqJ!:l5K73&IZ2"9aKRrkLHYXQ0+\>N=4>GVBZV$BKs^hV2Qf^GckN`A#\&KHb])d=%-4J8HD:*0s3:41gMNub1B/V\7/oHJA`qL'(.HH,@`fc.^d8hD9Cp[6#M1f;YaGHCe7r>$+1hmtH'r/4b=sMg'f&V7lM"ZVQg&#;r%`jjKC'Jug-UfEg8nN;])+5!;te5W^QY-e+N)P(Sr$f9e6>(5*96`?OuKbc1"UjbB<s'XXBX?W2T\X1^]3,U(sht+B5jPD:77X+Jo%J';Gqgi0Ro'QjF^KVL\cL^R^scpl[-"hJ+N[mYpH8>Zi#.6Yt*U^/,XdW]p8\;R]05;68>BnbE1eIIcP=!aGs[Td(W_lJTH7bAA^%99R0+V])&m%L/Ace^cGOYhhQ?Rsu.?+8o5]AGPe*?^C(Q[Na.53pcf"+]-sk2kHM4'X_'PL6B<m:t!Z5.a+OqQEF7M`_;VWH:'"\%9XQ.WD<B$E3%J$:E".pA4#@[hh#WlFVG5).#MK@]0q1+X;P^CRc.`XE&@e:MM@H<q\"B3TjNa48V^[a'Z><.u.7cu\Wn`M%U(_6E%VD<BOm?sm\\A?s2lF9-0l,;b\H/5!AM6L<HHaX%YDVZ1k7H^qi6Nss)P/9beb>dbF8$AZT>J?#SkKX,8cR8bCm<S"Hi;SM>0IU@F%:h]]O`/NE#8N7P[:+iA!-7:]nX5%)d$Wdf`<JNFu:F+^-lt5dUMh:D_hgj7I].2<FWHaP\fg)a7j7lh6PeH<Z1_i%\L9dEZ%fTpI%LDLh'H>k&+Kc_:Rg$;)@pn"X9=*H<Y3lQ=>r`FKhL5ml"T:Wi7(A!2t?>;*r-^'@_4J?*RaqK#H:VjLd:\_=>pB1]X9om%ba#p'U%n"M2RQ4'8a<uFH;Af?(tnb?R7DXRXf/!`>J4/T&sodl%_'fo(mGDlAM^FY(6S$t"gYu1*tM9h+;;/./U*\9Nn@`;V:>V"'jAuT#m%0tB?d1,l2lDLYe=AqQ*<_*d7)Gj(uQ$;<.?RD_7B^kDc1Fj:8Mbupf%LPO%:G2cAf3k>j[\Hl$aq'd@8Sf3qkEN-lD@eAUL*_,#/%PN4;cpZ:R[op%2SB#gH^AU*gsc+ffUjDs3N3E3RAm+bIggd;1g03]i3B4H-5eDbG-hQ;hM7Tos%kW'M29FWWN%IBp)L;'8phCDBn%h"f-9]6m_<I>Lm@c=\qVhXQ7?r,kf6noG4T(%jttZ8]"bZmYeIFmY%Hmpe%/^N+(on0S!d0S[sNPf(s0:072(1_Z=)T(e00rp``\%dfcd[Wkr@lX"W[HAOuQDpI42R%d#^VVdZSk;m@i;U1=Fa5e!_MpPq>GnGCUkbZHTB=Jjbm+aATP/@?1*9O%i31cDnW)X@EHGld9T%m.p>G$A2UfHLr!Q#u52?TJ).WQ4_L/m]]>I@%_1=Zu\D&4O/.hmT]NQ095ae1PNl\*mi8"06X9!eE',,'>(k8%qfm1"NTpPk]/k,%Xp]?Lr0>tTEsF9[TQL"C=2dEj_J&,$f_)MSqiVQ<5$b/3me(3rrb8]mlRj;.2N`P7-tH?P7i>a<Xo3[mWcGEbl4X7g"PGB+8a16g%>eIo:%BQ^HloDM1[NdCV=97Wm=uQSQ327"-NI^_70.H$Y!u+$E@*_H]h4MXV<"J2?GFC0(!Nfte1%V%K1`!S3*=U\8#`@JDGKQJd%+],c*\B#Th:$d2dWH_GG'VG`4qF[)%f@Tja.sje#-NDcM"^8H-h&+Ge(\'mXnLfR3QCbh6.]1l*bkFoMEr[+`!EsmlM4C$)C4S9Y%B?pY+qhQ<r`DD5u-KEM;K0IZ76_81U/s?&rCHK^=o=gR>"aWAnX,&:V?tH!jkg))%!;&!6?T!>!qEQ"T9=%mKH=W[$Y6+'5D,<"k%H?G[dIPV%/Ui5I`Zp)iKACoqVm_8r:FQ[uAE\o]XHK40qVa`pIl.\`e0*=Xa;1^BRDGO0:JhGE*nF_\_d''#+B&3OO',2@1m_"8G%kBb]#HtU*)@9oNZ06aUS5UUs1ruhJu>tbRuP^Y,?Mu#]^D._sKEDb0e3h)[/Fp4OE/tcVk"=5'>E<L)jB2MOp1n!$[/'n8Q]E7a'%aT(j0\iW2CO(R+:-8W1C$UDJU6*r7ZYho,pSTbL,c/1<7[Eu[a94s;#!#f"&^Lq0kEMk6:1dKI"PY,:[!]K?tKiLCuTDSSK+I0IM%9VJ-qKm`)4FnQ)+WE#Stn'9=/[>KLc4YEoBXG>&mIgSFs(K&FN^EuIIDZVcMDDp&/74Q7-k6,^AJnCn00%e.a_e-no^$"VDdc]Tc%UT+7A=9()#EL\t63^^i)3ZsSmk;gsC8r)RUnoSGIIQ4'k-QJ&:Y3mbM=h8mHNQFsRPl-W<S,Ggnkj8G"lFBV,4Y>(E^"T=>;nuN%%iK_,,HnPobILO\,2nL-+Vc!<ejOA,?1etMC5>_Gk/'e_hoPEb`7`j+Z8QDU*g7BP[<6Jl.UoiI#7'cA^%E9HYo^,sGBCtm8I@DW"%N1RKALY_$thG]B<a"R;bmNH95p/@-'rd#(o4\aBYm/tYtkm@<WGYO)5>C$3/A"q'*13hOC1[-jleDP%bQc],2b(^c!?87FtS[uYl%]a8cRbmk/Rp&iP;=2S[(Z1uN;qVZ>_T`6o3DgD$YoeZL[=YfuVqJ"4gXe$MrVcq3_/r#t8=T(n.fW&Hj4G=9uNsh_\c_87/dA>i:%+VMGP:$1K8^OI9H:Zc;aSpYoBoub8lU09a!BU[1X=iQ@.aaGilPP<%Oo)3_$Tl_,?hpLOP52%M$nl-ie?FuY`f"#uqk/%^E.DZK7%mrJ<X+=6/FHTHP=jX,,=)Xeminns;D*@+hG%jh+"QPpid",Qu#9$#Z,Zo%[ZCkph2C.1O3kPS:&XHc'2T0_q>B;,nnG(6Cp'O.aH%lqY*phBS7Ml1/ur_>ku^N6_a,*@%4q(oU-MWk%Os,&%5-^<a8=".d[mTt(;je"AXCpXqY?JQ@LB.'*eBn;^j9f@\WF%!8q*A"n]C%0sql!7CFJI*1l5>?N;V$p!F=!6LT^f"H"c9%8a-c$XgeokSjQaNIdtP0(+[LJj,p]pU(82NTAUqkf!lXm:O3:Gl3mnk8Bi@f5GqB%X2ijke$,CdX(iMcOd8CAYg%jTgSJB7ne0X?qi:o3p,eUdXT&mk,%?iO,n,+iKF,,UYk6sQC$H'IU8c;3(E,XWQO86&EQ^:l_1<q_%FeTRD#X"jBHJD/B^k1Dmolda<$]V"hQ=Cdk;7R6(kZ-=go[2h:IWXulg,<)^KpN9,Ik3@OkBTK>i"SOB/pW-miR8+L%ak)0*_\Bm%7"GMn5fN$3R*S^'I*i<d&4pKuRQN"3+\>B:L(l7K:G;Pj@[)+R1i?'IoVE_ZAX)3s_YgW40$[7Ua^g,XO-2p'kD+Ol>-&goYtsKS%!tU7F$GJ-Fio#Y^Uc6&F[)a$KkOMfZi'GF-Z<"Sh\Hna[D00BJfIQ\p%GjO#h_A]in''(j($CBta8Re,bZg4/4jLl*nc?E)ZIGTr%3a!%XpYdR\(F9&qrXN#)"Oj:t3fjQ)&a0khc<J)>ku&UIpYgi%BWu$f56Tc@c:q8C=aI[LkQu-:Xs@V?cIB-nUT*6Fp#PI6/[B-o%d59a<qMqJ)_l;SW?bpcZ26rg=O3C4gfO%6-5QAG44RdZtATOuNl5bK*Vt3Nu7qh6e=1FKdMNf@((nfu5-H`Sn`153PU.ks$,>g5$%DKIu+c4.BPX)H[ZRdZX.$K$!Z+7hM)m.+F">Ym:F^&se2O*&(aYU#DHB3.^O'l)SSZd6gB_eMKrLG8LjhB=)2T.C)$9NH9OcMN;]%.7Y./+P9GWIP4)2%46@LJ^lD!/_+$lfoj:&<gMf.2)CT+Gf9jB;G[)/c-`W\k!f]/%?9m_Z&;VhE`K_+RB<Y"Mu="3g"W^11ftds%ad2YmSb?//l_s-i6PAa6_a1R'LNHgOYEVLd4XADN^=0]KK9Gs<HgCF>Vmh+CkJq%Tf6d`:l_deJCoj6qnnX@Vo:=M,G)-1[fGB%D%S^-:*7FN!7aj)tphuC7A)TF?#3bK:VchJTjKJAHSF,D]gY9j$R(<8WX_j/L(]bh)"Ug#n,N^'Q;9gR;6XcR$m31m2(<3UL&"Z2qA%SLnhm'i%RD:(667+cUnL\\3VbdlDT9UCh'jUqs3bS_'fG;o)us<^OXR5\ShCZF!dD#@\h[`.=<>Q7s$([eXGr&B+4Xah&#:&:r"%%kjOsuj139LLT&/!C)c/":"dXJ#tT:gJqkV`ZdEI#C.J\R9'3ME;?9V)2&*QISr[_J2.Y[>NV4!Z#k4KDMMIH[CcnN4Y(aQ-<rg_i%#lnNFaXW-pea*YDZh_/Em.2F.^Br='FC:mn8Ge=2C(5:\XM;8QK))UUU\TIPTt>oKp)2<&-:\hIjlo9PnSNe-dsYNm?._N13K"gh%K-6B./08).nPNT:iW_l@JTj]M+lW,M4$+DX&k7#OYD\U>Tq!#9=f1/ais:aZN$)O;=:%]]g#%$h>k[=V<,oojm,0SQK"/Md%rGfW%/oq7f*C76(Ccilf@+DlhF2(M:W@ufm>`0Aa?,X[PGokN8)MR7URsJoC7"NM0TN7nqRFX]*V$4%[QYh(d3"rDol"NN2B;Xf-CYWLU%N1mGuGT50*-oSFOTftmn2.=D%iGEO$I`]$Z!]K8tjY`h*Bg]N2X[2-<$P.L?PrmlL'Cs.Zq>*bg5QgJ!Rg9#,mj#ba[Q7^4=R38C%*VDm78BJ;^fmO!KG@,>(MuG3!n,0cBDM?&BPOIqBbg.[/-pl?jj>F-J7XFsf3\E8Q$G<Llr*mS$ME4]%TPMY[?lEVj?T_I-=LWg1%;kH8A-)fFR+HrAg'668T<@"Bm:O"CrMTEK0m7M^eT=VA-/a^F38OXc+Wc-a"gHAt1p5>3n$[&oBFsGb,0XAj%DK(@#)4r'%q`^=O%[4]U3DDR-(9UBuh,LLJePrrGkr0S^cf![*V>[EUm4JZ"q8#"u?(Y%-(:68:RH4nJrV?D?^D@=)f#P#C2a:[lV@NWg-bd*jsh9gb4%Csn@bnR4R!8eXXd3dUUlKT8GMdanZP$PkM)TX!ZPEHFb9C+2KBQbY(YnH?6c?0F@[;=6!tWdl/?C^;2dAu7S8]t;tY+BR<_,\50G%pMFU:d$ZB[6*Df*A["G]IYt8l9iPh9]nY'G9l'BRHSJLd?!_1BfF3>XoV1uqOFBktC:g7g"<Qftn=$?;g<OLqZ<Xh]_p2"'UtlJA%4&$YPc*$%Gfl/m_FfsW*&h/&>\#/%Ir>=sVC)XFb)a=4flh>].U<XImX30e]n[VcCqp*LO<d$4IO6tcDC_oJ;C`G`oH_G;q_HHWN%R.#_]YO1-W/QfqB5f.%b'WkI(DOBsL=*DK?hp+RPm=d'Z&fSpQ_H%YB*/7l]qi%/pS0TRSVG\sUL,:r>6`,GqDnDNY2sP3B9ioZA%n2dnph)=ICj%l%Mb`Qn%<q=6sbB-mZTAJCl\utEgjs`F+GYlC4$6-"BAm8a9GP;]^/ZGCV@jfhcddB!IOsY?OLg;fr>WZ#HldO2i%X[&^D9$NH"$;h2caF:KJFCo<(0aaj\GEpgHLP3q0n+^_#Ugi4?MF*!(Zk[s]aMQ:nm`r5f;FV@/Db)Br@0It3@'?Pm/O&,gSFW^5%3=@?&DItp/FEoCSS'EOu?)F.K4*`8^+1FkfF6Lh(kj[CK>KEKO#Hsac-Xpo@*'3["3oTLeNH==UJVk=eZGj:U%\7kLSWGG5E=SOb%#+];>Cm[R+1<lJUZ3<22Tef(icCcu=(3Gj0BAO,=Gdif&B:_DeS&r'-%\7l-[,S`=UDu<h5dG":f(`YpMme4C'RH<i*mfs[(UH=S%m>rmYVi\&+`q<JF9W;;klc$'ePJkM9>5u"MPEB_:g=M<1=.]!8`KT#pA;hlR9=ecq`KcF3-+%>eATF1biBa].b0Rgd4\a-le"o,n%KDDW[cInb\g8>(+Z:URP6W+ue&3p3+8@S.pRIZ9,UcBs5=[fKJdC(^)28+c#4>c^%KfZis?8.2\)O,'.c+.Z%NF,<'rDiF<`*C^<%e'm_30b6UVRmAHY3YKk%fknE!&5>o/ET7.fP(h2"+#,+9+So]+#pn?Icn_k?<$>AZQ!JR-;'N*4`V.5;QX*d?8F5IFTcq*Q"Al\r%-CL/oca#,BB.KQ[n3XGSga!)a1UYsK1u0jBmZ@DA'gPH,@s*C!VFeuX;R4`qBg3+:o(Wu$R\59q^6b\l2X)KJcV!p=.\0V[6fPLF%0M6]L7WP2381$(\kEhV?9rgB?Wu-(/H$mVeac?.;eUsj%>MAPi,/HatQ#n7LIV7/R-4-9EUDo+q!h;q^p[hp#N*/RG42VoEaWtH<%0@;An"d>r_ViRiXp5CS/[YfLIVAV`VZQ!J/=_,^4*>kE,<NQE7k&/1:3e(*P1M&YfhBHaZgPXG_^S)#M]("B1oo16@icn4&>`L#1%Zk6'W'BNJ*>DoRC))8C@$mHl<`Qe1fd2kK4kN4+]b8*,i;e(IB#?ZS2JI0<^:<4oLhd;mfZq-kNq8^@'m;&*R;_h+!?_M$%oHRua%[%os%cX(DAEUVg/ao&<:O#c0DKI8kJW]5J_8[EL!hU,3-M$@1*lJ?NJ)5kT*Z5Sre,Y&oDfL3<W94q)edF7BB[!/OOO!j8+=-GqL%4YfM8X[`RnP&,AR'JsF_66+N7p;jbVgg8"8B5X^&eBmN9*Z9t+_M1Qm<8U"F&XlnI^Mt0\`Zqh@I7cI.c&"q[59gokd+/I6eh30I%OYQRHfg:YBj;^0TaXB:W@7Mt6a&-l;_UD/[.a-:q<?A.lA[qiS^M2b82KN:=\`L,6[;afBdRNN#Y"M9s,<'GWc<=!qTUD5um_U$!%2OrYDVKXC5jOG-'0%eLNPD-*`h,*h:l>4Kr)I#cBRjfTeWM:ru5^]lB'@\eJ:(sR]AE:Ju*#3l<Y_l;bG?/=@%qkLJ^('\me7V?^%7bkHDiRXk\8,7*N&ZT'ZLYG.KWf;Bc3uP#ekJJaS"moj,XI0Ts0.jZ(%ju"d3D7nAQ4IVW&';9NiP]k9B>b[kms=eK!Ye?ugtKe0%Q(,l21@&@qZ^A(j*hfcA6>*aFLQ.Zle.oTTkk&9Nb1;E7WM0a!LDsPeMX;58cc4R?i*OpQZVd=(F[,3QfP<:Rg+.!<])U1"?).Z"%#%7Da[%'WK,=VMiW(k2Z4Vahp;$?UFnD;HeYV$m*9GY+7fMLbM1CM^#nQDg.d,b-?CN0f#]\koV5u/GTPekU_"3/"[9XorPMYke6%6Uu?Ei-mSrl2p^3Bl#l24W[L&pG,1tRj^u.dP/G$W$;#^aIlSj$YLh3[Bjpg,CRC#NnnS+,P?5L)6(+"a[gjVfh+^`ZP2"Y7Om\7%.iG>5cSdOVTqBRc;B^B]D'#]/53lHk%>,L'R]6ZL1<Sb+ZJk+cPmq)5G5YS[dC*7OKp-[70cBC\;W0OD$edlrSBKW*ha/f_!b7)S%fTgc^E+X9iJ`']V(!bnu*RpBQiJ<bp8;:&.YtTkXW>KgABJ.<!ak;[COSGU]OAMR.37"Z&2E-Q$-T4la@bo=Yb`@8?`WR(Hq>S8/%W].ONbe<]oEeC\D)u&"E'K-p)X/W6.f#^B76n+<E*+t`C)A:itXbs\m.gB!Sf^nlM%iomm`#UIll+c"H6?VcJ..#fD@c=M^@,le-%KSu2+:_EX5$G^"qK%IO9r7-CB"](ra)Q0RHn"d0**DO85"0V'?#sKYXZCB_sfr[]j8fXmph<+T]'4p]5FbX3"e)/unr&2VX$Tsh'%]=gT@J`<EXW^o['2O:AMQo<Xb`@T]e'A!=9B%TCPD/$0,Cb1d_ZU<'F8HRP`ae_U.dNlFjZ"X<5n^$.8D/a6S!-W:D@>>ElTj1T7%ZJ0HN35a&=:#0oNJ9FUBlmd+s&Ems0;;X56l?V)XZjl?kH,=0inS184WWKe%0R3M^R#/<=la=Vc=l&XrQabH(cM<UC7_@@Ep"QOY%V\`sYU5FiR@e=irYLu[q9IaVpXjLEh)@a.:)em4N[Jj.3Qjns7<pDN.Fc(VS<Y?>#acG7DR1@?K7Z20.eOGhboX%trgD`&P,c=g,%ToPX_V*(5lg>?lcF(J5cc*H>b.^%+)mb?kmjJ8rc-0/+6EP$=#?#2n`58(#)3%2u>E-jsX;eO#Ml-bZPj2)i-$iSq@4kUa:dcWVj%COOsYVDC>/fP3=8T!hAkQJ9W\drTcuH$VEmVUN_b1VS-Th/#-c!"ac"`=9-;<"fmbl)a<aELonfghXSu2Ot.#D_[_V0:*/q't0Q*%Vmc_jK\9NeSY"Z=S&)d82VmZ.:<h'jf?C,@bGDPd)-J2RDFM*5<63m%2P&^iY1WUjB@A;l-#1gsoodnPVN[uIktg/Z2P&_$aY>'q%b,3Y2V:3hV2U&&IlUn`%Ebj?M-7?H1bbik4V:u8cQH;-^0]jpUc2qK[b,3Y2V8Kpt<jV&_pe"C4DbJc*`_gL*bbik4V:19"g+]!k%0DA,[HJL9E:+qr/mjr1ZCc]6Ed`,I/SkZ,L94q^8)PY,mqMinEq\HL%oQ'3_gd,ImHiQO>B)l],@+>jSRJBJGNk]8,@]ZHSkugSb%26/KtFq^K9BjjrPE)<`5:Z8RR>r\ldV\_OjXN+tQ?.d&Y:1[XH*3;jsI9LOG.M=GJLBQo!)-!>Q4=%&SDi65jLLaS?<h1[U2(1to%YlR2u"+r?=V/V/:m9Q:VFqD&M`9jD9.CDTDfA8-cH<t=3%CTl:3t94%$f.qYP,ld]frR!8@@92uhh=njDA-Xk/p"LII'T:uG;eHE%+d$Z[13XjL/.::e7#Z,SP!PoNK.r"%bM5[9V-0KR.B1J&bam"*iR#lS].#Hk[[:\^D)fZh_B).@D!&s\`jn2@]QG.4.bIOmZOqIr%'l+7o^2X?.cJl2IrG0E_:nCFq=0@aPL257@#]$ah10'<5KUq0.6"HF3,/7qB/*^5B)/aSW2EGg%CD4>2M,$PCNEQ%2m70NPSUXkk%:cS?%e&_#/_a#W*R?*ieR$?rcgs;iX[C@$D/PdrMmIk&0JbJCTDQ1u.kmH[Tf$_ua@dP!#?V.?ti[rK>m!AW'1Q1</Q\35[00X&B%QmpfZRL100A6t74jX;Vg8^dt1RgD)H<6%hm9X\t#5XCDLfdJYQ^!-n=m;5lXCi=bg!3VQaUVF!pq&".DaKQT5$2n[f\4_/$r0@?2%O%gplfIt8CR"Pl.LfG2T,hbt(Ya<FM5LhH]TT<rH%?2jm3QnU2\&+\%mb>28<XTZ12Uo``<k,K"q7(^(4/#R/k%n^7iQc/6]_-+*%PtH=&OaEDi+c<Fu.rn=%3O>,UCL,mo2sSCprl!9Hh=)aI3JNb[Mj/=qC(A@6ZXl/N8ZZKHFK;3!XS%PAc.g=QY`\akKuD\LNAkXt%Qn-sQIFHos2iddg4L+V2ia+U"q<][K<NBUDf;Ro@)I*BD;JkGf@$fIG)nsVK9OcH+`U4/`R+=f;g-=kK>is-pFsCgrZVTTiFiCKF%FprTEfs_En2"Y"P0kP1640U5BB@qaDD-%V]e;QV,,Dc`adVL.f#n>%qrjG]56&oYZ_sY[(/,jDg`DBJ^YJ2nt>,UI'$W2U+=?.7=%RcE+mgGlGMA)XM0>Z#,Q>YV'*kGgW$<k67;1hhOrB0!-j]2q)%.9u!qY4p4_>YXW/JjJ(k@pl`*aP;+^597r:<&#Z8)DpW`)8"N7%P4\&(HcYTdL*%e7:bQ"-[(ZUem>H#0oU`F350`#=^KtP7R.mH4.E4GJnu'&/gCB]E)jInfnJUK,c'E:qLtWJC(V2\=5E%,<RFKfG%h*5S'P1>m3[_<SGTQL#.m)fm<O/]nfN.CV-?F)\/q'uVFF_]WXpQIPYLJ(X.J+c@[9YkMHc>qE/_\3W0A6*\&9cI[C,nS)i/k>8d%;&Z#t_Vn78*]""($,><;5_8Z0@/"qro$]#10kpp"\Shc'jdjZN`u`./H;:%Vf;_j4dis&7Q`q$P_F&f`fFH(ZZ/s/L1q)a*Z2=,j%\i[B;(]P35%W.A^pE<,j.Ap$)7?<CW['Fh?QSW,k,].YoDRWNk5cq.<c@\LkqH.h\2JH.0XL2CnE&$U'85'B;J^/%7`QW4b0?ZUS%Qe05S(L"5PmX73@2-knG;qs@>9#d&AYf\L0dMu%DTiHgPJehL'5st7dBi^ZkN2?]'15sY%(u#/aZ]%I_SY)Kb!@_nuEEZ+lUr]^p%%-][E[-[A,JOrjf17HbG=R?P@3nIfSPd]R]0!3\u=i1Jk+(!T=DV;&gKEca4*XZCcr[K0eBa^h$pCZ53)JB&Sd[GV:NIMAB!&m*I%L)`Id-UgO/g<'K(F\/Qc(>Z[0A3XGFb)e(ZGMR)^R6##7d@T_jf%lD[Bserfdj]4]7db:YRlH%#FV6btVd$e"$6`(.kBD7DON+3h%SXO9p#W*#\rT^6QZeLH32EQ+NW)E`!6K5,A<i'lun!(dS#7f1V\fQk%VQF4)p;S"`[i+(E?qVG?%I2Cr=Pm7a4WHP`P4ookEZ3NA%Omdt1S]WtA,jO#)#,;TEkfh1CYs0kN+iM%W[Y)j6.=N:r=m#97_:Y3#Np'usZGs0Jc4#WCWA91Hc?/_H]duF\3Ii`c[=2eZ"_]h"%&6G-&3t'DQ%Nt<5YF>^*Sj1nB(80J'5lD&V#$n<9;,<4,=sj\sAVCP5!#:VGCLdJ"`M^(EY*B0(2[@^N7^eWeBPibJT>$_+!M6dn%B4Y,.:Wu?.h4f;nP\cr!jh-D<Y%=m2U3rhE31GcBej]C>[dg^r;*K]bpPVK9/A6",.EZ:l1U=E_Hoea*s$BRHKDWY_nAH8dmg0kk%p"`G[fCcIi2q/W.qO(FXF*9L,EEtflG=/K2f5GeHb,To+`[S%>oeZ=L):bp4>1_(Kl]0`tDQ(/&J17Psb3e7V#W[_\fCb?ad&lR<%(u%Mc^MVI:Z``V,mW6`cEiiX!:HLGAH,!\ab14(PC\TL5W9^obT?=0_k1(@9fC`?06Ieq=5P(n((9qhelh[#^bXdu2@9l*uN1oXg%os:9U[\\(iSZ7-.IXW4PhPf`9XWI`6Uop>8<PL-9isT%mrc[T'friB);-cDc(Yu*?.jnA5f(Cg0F48]7=LYH*\YWmXC[J4+T4rVo%[I$RU(3TQ].ZLJ)Xe$f@=4^5Ags`IlVsB*m%CjumlaK>ag)>,4N)IJ/Hb-&u\pdlAI2d>-bgc^(*oH+*&&qWJSCce*k=PcgH@24F%4_UnmC!ZS*Xm;m3FsW\u]'S_Q(3TS7-;Kq)hShCRlXqRqD=b>f;Z;t7kEsCH#Bg!rd)O\9l_d*`MQ2+EfAj2;>gl/*^5[()&F/e&%Trt#us%AKBZ;FoB[;OK6>h@<WT[qt=\8GS:o;[7#f'?L^rQNe3f9Y^u=l.l>Q+DG,<W/H=j'0j![9AW0;u*IqeSh"G/"O8#(<Q'5%`jS^qcTF6YW\Lkh>sD9&<WSi^DP=5*PWks[M$glI`c_7(c$$`P>H$k#DRKrHbI2G_%''0+@oqsGoeX$,NBH^reFbW$l=]k"H$]k&%7TKDgE^fBHoeTC",nU`YfC^pqLt1+tSCdEi:5FV(IWdi2[M!%DX84j*@>sOKR3+'Fh%$ee?,%-R<)rUtLps`sf?]s2a:5^=mn2P?%c5H.r`g_Ub08T:aN*X'am0oh6m@s&C,$B$imoB&"1l7,?HCASr=D2\X"e"aX%^45]M1YV\?]ccGdC/(eJ5NR-iPem40Uj(i%SitA%@6MZ,DQh^kj..B3!r5gGculBFo6?lo4qBW)4Spe^:J^WH.i16+rddbG_h6/0d.Q=D6C1;O'OCQmAE\'oU.CUuK-jm784VlUmHg*U%No!"ao-+-*?_)4OqRSSpU"f1bGP[&#%-a7JUEt=-\ae,ZiHBa#md?Uo0/%P<o]mg45a)/,]A'7@:Al!8frRTdk"h1nfod61ba,F]%s*R&q",5ZR!L]MUO[6a.?9LrrTA2OnI!C6,mp0]^FYM$d>?@*$n+5;GZ]h93r4Bk<[h_X6cF[G-`P\?FO)MISo.7f.f\%3M&sDsS%.plY1krlbA^2$GbAVdQC34j8rLNLtA-^)6*.7ujg%(jm&0U"F\<[NRJZ2C<Q%UT:Dfi]S21=K@`/p,2%T?u\I,>XZ`HZco?IQ!Y`%^*L9L^G>0gl4tH@PX7m>ZU^H6^Nq"MnU`CL,[YPZ5FOXr_]!DjZ]D+shj]*@HX"<R,#(hhJ!?=&pcO,FZ^<+,mGC1KD:,[k9MqC#%i8b$TX*[/L4(jXuHNk"dSk+n-Hbu\)<DW*s(X9>YPEN;eqsYGmRj!l_HVCZZ*#&StMLepDSfBRM1V>^/&pp'6IpGd:nAiR(qWm8K%S+SW2]bABREdR&uJu8KD$@`2@kU/-2%q!A3hPg]M_9VfRT+HAY#p1u&#^hR:+.G!Y$R>lkV;CrBR\o(%3]EKakIJV"m5'n,MmP1^%j(,sePohGfE-r?t4Qu,HNl20VM#;eJ5I@cVK,Q%#5ap:p:4.$+.%n5G-1_U\WcAf<^JdJ%'Z,_4$HSK9'Oa'C6sJ>C#kbJB@%ZUh%9D%/*_&lrh0&-)m03T`Dhlg-R7,O9IcmX^WCd*oV$&HG4P,6D;&kD+uBj9a7Ga?6lj$b'E\D&-/*3/\Q;5[LQ3:A_RNR5Fe\-pVM%#XEK";tj!(0lJ8#2mi(2LIdQm*;VE4j8F/sYS?t4LeK!h.sDe%s1E0]MS!d_/W.c[Hdq\CV(/&EmP.O6?)1Dao#X(F?**^Qifn+W%GDo)-f5.B&p+FPfC9>J[L9J2jH/3[Rd_n4>o'2f:!'t$Ea-'s)7@Onq^O&I,h.A6hrd&+2ek:-mf].(57;LH@E;2*Z^/n-KFGPZ^%[T@IF"1CFI^Zt;596`]!1Hj?&HVpdC`^nojap4.%$W[BCbec3^q&nfb[)lVXnbaPcG6mr/6VYldNB?((\"ujq2=T5uArd!$qakd%%If>=TYjlI)i+ZeY@Z-Ah&E;cGYdbUenOQA>h\DlYQJ<&[)Z9pIg2Xc!l(@krH%64>-2KMf#7'8=QlhQ:`+XUL7c`G8Sq`jd^%<E:%OI:&D"B)-`U^e&e8b/UgCJ^_bjA!&Op7:Ne*U?(Z2a?(8Q^Pp$m8IhC(;PhqFFd&*-S!?DEY<us4dFP[A$n\NKUR[rF6$>n>+KR+%^[c3GT0Gb,e;\N5/m.%PB892T<+7b/IC.-R(cPRqKPLdR,,Q;FU]SM_S1rKWdeP5_<jb+S:jf`q5W9&!3o"kAE":$eR$SPdmm;p'%SX&JJ73in)P%,6nJU1ts%bX*jSp*"AQgSTkJf5Akn5%d3XB`bu@0PpQ=Q]1g_5.T;0!@8E>(O9<0=%dVFMf(43IS4VGB6U%LjdB#%h.aV4701h_TS.Y,[K%fKG_D<NO/a6L]YE*3@Ok:Bd0V#jkEZ=:i$$c'W0a\t[TJHPOku8C?r0CL=\gkWJ;ST(+DL<8Te%-P<Y?)B%/el\?p,R(!["W^am]V:\7.$<eJ&0)C\jj3HG<1'0nu:dZ)lRc>?rnO[^BWs@m4".o[\a&3NP!?V2#$<4OH=lQ+])WAjl7Y"%fje'%ZE_`AJr,@B`ZCN87lu@T,s\g9O,oJ&FfAX@3+%cMfNapO6t63*5fMC->-Pm*B#EuD6'5:8#74?JBjpudqq=8.D%W#&0n_gbZ:MS/%#:h!QFI=&#R7"E)0^=@fdd0X]h_,U:=+-1Rjao=E0?,`&L/J.5ZG&;E0q&;2;h>=*mcBknje3N;I<6Q`G@K48VtL8Q_mg_g?L*/G%]lt0A9&Sj%c]`$u*b3`*YY,n9*u0uOZ/t:]MjN\>8UW<^W27h(]q@P:R2cLa'`5miH+I<*U#8seQ"?6f,Zj\t!'+M/o:u`MiAibT%^+;XJEu(nM*nlCuJ\3RZ#JMSp/q\('b(cl]GM;&(K>"u6:rJ:ATQS;J^OST;+7!aJHLtlG+>,u)eENcV$tFZMg+sg:9R7T+%DkuF%?Qb(O.oD):i^f=UQ+5UR26Jm[eW[r3h%D;6/V^X,Ac[J?]s22>8#EcI_,i5.R;-89@="!bL<Ub7Flql"II<WK;p,j>oU<n;SF:Hn%\IH63I:HUon9qN3>qG\BB7_qiROriP_)_YZ]*AF%@X)dmN$1Jd6s"oQ=h<I<aU+i-'dt/mg2._dGS%1h-%^RA&\>^O.bKE[O2SqG%Sh54?+Bk_aRY)5JX8l3kR*\"%,&Dk*h[=X`a@O"P5ar0n4gZC2!C;!e,0m_dZq*W1rV/)^T<F$^QVNC:]^D=6g^W:in-nF2H3e?$%*20@Fd5o]Rn;UrH9O(6cil@_3'IFmkUT7:bmX*!ng$GZ8nr@0tqI)aM:rU]4_K@dacO,02qib-RMI!l?[9Y>qXe.#n9J*OLf&M*b%lO$4:^[iH$O0B_YjTU-T>BPiG\6re?/S,ag8QjdO=*kpD:@n8rks2WHj2BD3r(,r$IAA:q7en=>>Pq#Xqk1bo'+hnDquh`B^3;p1%o=Q"QQ#?#ii1T?cr'SDb"*7e_AXJR$@pAH`2V;G1:SBP4$X@e0h735W^n6#p.aDDt^9CtSnF0h-.Ga:p=6uc-"D@J5I0RUE=h4#t%]SoQeQTNNH.M7aA/:[[J3r@s0rpJY)'@YWk<R>EHW(J%"-R-Qr*neI!M9R,jU2rJ:#7l!?jHml]4IX*og'JBe3!Br-LRpG`"S<g+%aXD\eHtt6j',2/D=5\iGORT&6_Xd5%6Gf93#pbAb*!P->L#4PVTT_OjjRM1ATB$.78TDs>Q:-E0>ngh;qHT]lI%VXVT^))37sD]$%+qdT5JBM7PBRtu'kMH=JfHm:\61=_NNt.!/C*-\sqsrR2qP7ZK"mJ9<MlRjhX)HPmM6#K@$u"P=0qmoSKQ*j&knr?sb%qbaP$Dc@%3.=03fQu!HW=uZo#+*rG$W<[=4ea,@86"jEY1JA78X5+Dc$:6RrsEuIQ#p`nKjG!VWa&?:pm"gX*.ot7W:,@m/eiE<ehgp;Ph-!*%Q)`BUB"l;p(I@F*86h-a_H,<SI_0]98.dUWC/@JsGjT<n10r>Yi`0'kR!,QK(QaK7/mmcp,`HH?Y_AAUN<q\=5j'2XZO1@OA.9Fb%fFV:'1`"_CE!;I/+taAa9&%gV$,htI:s`=[Ld^Ti+_W9He21dgKgo`8)?\ZTK1_S7B/P8r7HgFCggA8b5.E46i8[`7Ml-\P8KC(4%.[4gXW"AUf'QQ9IOV>krP]r50Y4hBg-arbJ=GI3=#GS>WE$0K$/HeUDnimH1cc8&9!$Y(uIM*qsGrR""`"EAd%4WQbi2P/-e9E0J%1M-!"hCg(3?2iaa@6qY^1Y'4C:'jFqf]<]p>mQ(@1O+rgaTqOt+d%f&Eu0PN@\`(r6JW\_B=$WnDD<*A\h7Unr<N2dG#!&6pgRSO%%3]#B!N7c<j]Lj!Biat.G$]Sbc?dI=o?'&"Q*\g=p*jE\+:FW2AblqjHgFNTkdVpedt,1Hc.)FtE/_o==ds)&K?AInks^Vq9_`6R%a7LD`ad$gi%&gqQ\Y_SJ(\V]D@Ik"7<?AqArpo1cUL3U8?+jT3@R6$K#4Z;jbIr@E&BBB]iqo(J(r(U-!bNUT8W:U*pdl]tYSQ*e%kd<%`MNMReTH+VI36iZg+flf20[BeoYElpiUNrTLVj)_5B*lA&2HZ[1?VX]K'Z^"J^dl'OAT2/Ak]d&"<HP'DQ8i6N$E%gmF(u7M%b)ro?g)kaYNa9"EY;K*YCfEHl52US4Cam^kU`7Oj8CnI<J]j5:I(/o,dn=^Q*5"l;rKm7FfYIE3T7*h:/"CPOIY]C4M2Yd'Y!h8s%_/<:u'rEJnI]<WB;.FG^P!S^f)p*j%8-Xbf$g>]em77HJk;SM4N[+`(1AUY.8HtO5>W/ZYEZN7E<ld.]%Ao:3YUUO+`?0!K1m.lK%Y0:FoFsM^]Pt&'qR:O)fXZDV2X=Lk+)f?j5C/5GeGBS^:Q1".$ku)EKUL*;B7OW645(/1]*B_%3@R2S+e3Y>MO_"WAo<MYq!)O*B%_PTZY_W)XaYTC3M5-`OY=^ouiE?N@7:6YhQOhbRBj?s>sG3W2m%uF#60Hm]=JeTV$W%EMn3)b&qa[P9"KJAt2&!cc3N(&I(8'VX*%b7p]#1i><+(\C+HS0K:K1Y^cC@O;imrm%8oN@!:KR6n(D3uFS0co6<]>O4b8&%d6snY,m==*q&h&1",2l0(]ei*nZ'i6ReW]OQPI%`s5`F#;L%!?%Z?%O?F?(A/'^S\sJO%$2=TVdRlq"?pUbUq4[,4=pAFNDQhAf%f(t*\se3\*`_rZZ-%8L.A2[Al@U:=W&GAV]RL^C%*3jEpmoM1a,cU6NBf8d>PK7rg2Q:AABh)k-]\;b$)TU7I%TJBdI(Q@UBI(@dX2e,0`K%U[+psi@;uj(uE-)"9%dFj>mhYnLnVmFP%^f7(N!cp1hIYjso<)oo>.RY%#H2:)c`_.UU!Y"AkV8.akk+"o6\B*MQ71'5u_Q3h9=ZqFlR11U<bmMhRpQ62QIo."0g6+S6d82>+%_3R4!RFh/nJT/?,OU0^-#D/RTPR.$8Tl_hBA"KksYH%+POUS6]@`]`]V]3^3<QRL.^mS^U&ZY^R#$rMnq!SWcccEc1Z",!Ir5Q$N%4-DmiK%A!I+u8b5,m2l8n"R[2Mc3sN^*2<Zk`KW5#\&@Yq,Y%V1n--n]@$6-QUa_\3[tHpH[8"E'of1)$6YObLSo7mqi97m);>f3%OHjE#(6h-/<XWd(=qEG3IbD-%[o[J)[BLQ`Ddbodm3)M&^>F"m>#8<mS%BF]NDXIT\@gAs6s(fbVG%GZbJuq3PGN$qn]UV7#Xe1a%pr0K=iRkPgZjUh*BNtp=GlKRuFY0NoT[hg,;*IOR#dJ"m2?\m&M]mXUcAIT\_W<rPEeG^g6VWA3?d#i"h/`4iXp*?]2o"KY^tOK/%2Z/SN6*.l9-.`3]$qt<jg=8^ui@_NFFtEug&n2&pFZn>C6q9#&;M3dlQ#?B1E@_u4?5me&N?n\FO'0%72g-c\J$PbaYif1dV^eX!%66*7B)smOY@5_QP=qDs7fL-qu7X:kWP/#F"6aT/\r0Cq9a%_9)-$Cl%;kC+\&fO,(YkNY#[6X)FXd]qA6NYM$0I74$ei"g*SI@-S%V(%OsXmKY$*<0\^XWQ6*gVt-.G'LH<-\JL]D:Olt(_X-`7rU8#l==So3#RlIk<EI7,LiWW]/Ah<3qe4f3Ctf-+IkWA^]nOqI+<02%)bpV)*>.YA3#PtEgl<=8)$EPiG<9[n)-gKhfcWnAo]%8n#3G4]2B7gZOs)Wj+W6(GZQ^?-!=uT%!@YM(KO6lbkE5jd7N=B1f9?[T%Tk_UK\XAY4GXrNd#"^AA5_^!GKu+5I(X$pC-:1!E2o'l>M$5_n:(cLa1KtP#VWX5!6K.,jm)[;Aeh4CX8h"!%W]O4hHqGh,'!BJR%$(Bb./^9gpl7<mN.C$FIJ_S?^jI?g;V?FSA8oS#EWU<93ONWg;F#)[0LgN3>PRRr0?IJ\IKXI#[V&R7Tiae_&+cV[OPI[aRm4a<?%]88`.6rKD]iTsQ[:P;j^89qJ&;Rdj[dQ^$lYYeu((]KY)-Ng7,XkOLm-\GlXYoVT[>Vb7&fZ(4*925\Ai\\*cR:N6ZKbi<iE>[Hk%grZ5'&QFo&flj^4Ss+_.PmiKVpld(n@meqR*Q`j#JThscjP7k-F\B=V86\gn9o_@P$K*'>`<,5i#OAZtck-V"ae9IWKh(cF3\T\'%"^$0X@81ME"mf)3@c9q>@/)B9YB8]5poESCq/iUB743`Zo?)Sj=EmAT<U'8@M$ne$(ajK@Gf\u@Soq>/jR!]8OKAWV24/-QRFst`%\@gRVHIS,eJlcB=;3*4g6[AcU7C?<Ol=LI4erZ^'f#])%]=g?]&e>Q1e1$;M"S%#8&-;=dab*dV9P^j_*q[c0N3n>jRYR1SIdC/&%M1B=n^Lg9_3Wm[gEiq9EBLhU>P.,(>;3):\SeUT$KUd8:8RcJu*i"4M6.dl[H?:7cp1s(P@>iZs4R@t`F&.G>GHjW9P7:<?CP,G2%qjn!8HI+dI61cuFhESl$DQN4%YBpGAs)."Q)fAWH#(eSs2)lMb!Z)eTfYD'I>u(QZ*aCYH8a0q;[j-Wj5nQ9TMhdT"n(YpKfL.KN%B,4^Z-Tna_*h#@!CJV%tBomak+<0J#.?//J0,`p0!KCXJEbAVX+1)^=GQVg;QUOF^GS.rtbNp>TF>O;0'dMAP_>Sia9hb"Q=PWNu%+[%1r?8*\cC:YE:ENSE2Hoj![B,OCg6m';jbYTn5i9O*<,X^m3$9+'0+t;=(6)fmkdV'hrN?)]L)9CW1):26=@RLK-@O`Jk3dEf6%F4N$m)nenL8.sO3FJFpkC#0"B5/NXb@]r*LTU)WE8Rrms2'q;k=EL)/BJ/Z>fUp)dJUQZ*.U-I40\=^cTC@<o.>QS-.#J8*h2B"]%8gY\9O2s5CLr`Nip*YkOhXT"C/$$qU-sF8I+_0-L+o^Pa;NRQ""#uAh[p%q_?L^IaPW1e8[hA?#5ka8(U7?UYdG!V2cO\j8r%PO:%pUskZXZE'C.p.2_=76/6`+Y48QYIqg6Z-IcrD'pG7t(E^L!_1+1:D`ii&$!iqf#'o8qM`FWcV'PB'hrYoWGVP'AU!]XjQg\UZ,H9%l,k\Bd'TBq!1(OUWX<1-?,/<$E!NU^e!$n]"*G\-FA[M/&TFrAoTDUb.Leu>H<$5ojYCkTJ+h9<Np7TfhMDC[TB96n+uq"+&I22V%"]<\Q9[uc`3T"8>6k,0G"h7IrfLRDq+Vc5J/2[1X7g!IrjM5e,dg`1&`"jHhC;T@ZaPcLLfg,#oNR4\M&]bVP.htq8@f&Ae@L(T;%'[VJtl3tgn=,t#L<:Ae5hH2OhOcW&<_3niL2PQ4B=Ogh\I3>"P#)"^0fq=Q<%r?Ygaaiap`AG!._4G1^qD"<FU8F_>)k]$OjsIq<%S6T@]aN:ZLS+%q'#$'gGDkpFnmY+k%"ZJfb)pp\a'IZj62M3+e<]U#!+l<DO.g`N=P"NNDJ-jM&ll6kB$#;!s#3V7@C'%[%BX,iO%!LCk$eV#fF"FSO\I5PG-;#k7g%b(WX.(BQ7m"tkp/^;j]Jj!!#Wf:hX,D^07#uD[XohnYX.n-lBJ]cSWWZc2Q+$dK84Ukg5r;\OK%X!-7]WAT?AM:pFZ6,%s>Ggk7O%^Yrq8ern_W$Oqenkl&!R?9C'l>OTj70!9hL%R7%nL\-u03/*igET#M>Jl)DhN"U!#kGC2WloWU%[j&Od@ga0=!XIS.&ph+h\Hi*M_\=p?L1f$LL)`ZL*>MU,"XNI0;Ok3T7i^E>HmoS-,W@mWh0,(nH7kY^pnEuRiT&!b]09$!71FF$%:7r@p$5mAua=oR[Sq9ssm"@\18_r'BbIK7`^nYSA$bY<_Zej>;nNo^Ak+GLqnh)$VOj4qGT+IMnKF98"5nL0=P1U6ppa%TD>Z4VP%Y^HL<cJ6?*960t@gn5T!ngs8oXf-41`PW\uf2:YD61)r.6g]Mo<7bYIjQ?HKm=Y7(f:KZbEX%P+$EfOs8>G^/Uo56sY$"K8:;]XI%eeD2AR0$S'0cfK5`He/u9\Ga7Q^hEc!#HnLQ/0S>)h\Td]8ng/(P=fGJ&@>'n))!n!-f40pD0]MJUjFH!9a5?h?$"aH?n#BmS%c?%TYO;7af.&$r7R,U`6m`c1r<bP60&4,TR0eS:oXX>=qDG;b[lOn-0@2D.>`/n0;K.!m'Ug3"R<Tq67PGKD<%kJjk]cM$9DV?FtE0+%Dc;a-&J0s#g2.2&MC@+1gJ3#*@hBpZTtbrX6@a%sN?H1aXMu\4RO-f37("\sXDiFX$[GQVn&Lp*d'$`SY[Y?a`\_2Z=?TBg)8fTL%9R3'LF*)bT_A44(CRCm5Y2$W6"TV@`O&`d-KH;H6J?3C[i6^Bb#ndN$p2Ca]:am+*(kP:MGhpPaH/J"WTgA`Vd(a^X+?Kguj<H`L%6]di@`8:Nb1B^hkQFV&5B*bea^ub7aWkRc%S0>u!!C^o!WdCC]^W%9$Jo^q*.h>oF';lfKp462H-,jtqm1Rn>"r#b%>m9C:rat/R%XMJfI%L#EI:mAs"HiJ41Y"Uo+6F&qJ/b\q7!Z`Rt!e`@T?u]M=#Ac-L3>S+Fcd3LE):!F^3^S'5'd,7m-c@4!Pq#HbR_BL%,B)j'%1`$L&S\P"O#E)IhL^ecek!DAb@CCK0TFhOl][FT.GeC+o7joe;`P0Y0D.&BW!o0WL&.<1Kdo=&[Im7O:[2L;)+OC&jBsf>AN$G$H%H2j4OSn+Ofag(]%McGk(!2hq/3rpe;F"s7/o6:DnN?\cD?m8,]T<;+bP?<CcN#$>=1O^-QE_S&XR(4bXbbLIW3R5[R?UEL/;q/f8%)Or5t:Zoj>;2[l3E5u0fG+Pl-DeJV+o(DNK.p(gr094f=<u7Ida6\EQ(H0B,ggAHr/,[8=nLU;iY*dPP"mbnVD,'%.mPk\,/9+qp%L;B.?TI`T90!2B!],=\<fa6RN>DQpMMt&`m-!\hiANX=TO:(f2/s`H4r+mg,HUSoRVEm3:NX15@$au-%_YFCK-+_r"</Htqb.c^*%DWK8(OII6`FthI[P8"kV==+7_p=Zp-rZRBs1&ADd?se[`.-u%5L/YJs,3"e.`T71uR#I7U$THff9_d(hjU["=F.Pa6F"dW>#F<Ms%Z-u%L7?^s\p&=M^"SQ;TM,2b_:E%AbE^^9"3FmFPm/srVI6<'3j>-g4>-GSteGBOFb%%7,C;8$U2N7.EN[N&:Mbs'=$Hg+a,6NDh%2&5Z*&1&F-TC9"4mc^f@ogVGd<%IYY3>>33Ip".s2B6aJHK)FBg%Yu2<fKn:N*osLr#[quBUpr[;ohTeZ9&q=d/BuK`T8<pGbZd5%%3V.MEbhY=EV=*Fg00`jD%Qk'i)YeL1Q#e&8-=DgG6V[*`FQEsY%aVi=-/CZ4iFG=q-N5S#T\s6cie(T^mbU@&)t2$1nq9T79%hS%SJ*oC$s)?8*F.=eKZd<?Vte8-31N0ar-\V*PC/WD0J(0I*qr;Ob69lDq`uWt<epa+ZHR>Mq[fSl1tm`#hA9!oglBY%0#-;mRS?6h%DeXQ^JT[)[;&;]a.LOW5k?-Ee_X>#O5obWV):%:.C4eL-(=kYno!!GGTA(Wi9,hdu*SQgPGhD'Yha!5fh1RcFiPh'/g_1"DI[r&S%7Q@Zg?oa!K)][Rgln\:c.bO64i^`k-m0+E[@LrU%=qk=_Wsmt^3+Cu;1=:E5;2!$h:q?fhL:W?J_2D6B>$Ek?b)h68*oN\,ls1\@%eHdtJWNV(E>C*ba^mc,)\X(7,?9ebH"gtsr&pNP00d,K$Tu32[0R>A+\]:?@So;7f!4bRTYE.H3;'f.dM&sa3cCun&o;E;Y%Vq+T%.tr!N0-^,@l'WLu8m^\F;F,0PjH-<7-+7f`;KpWD0h+]J2'j^)pIlJT=I?;-2i]j*kr=L_5fZa.(I#4-5\_UA4g^ICUa"eh%@dh5%0)%@h_Tj/qPp"+tLd`89`I%nI?WC@_!7g\.m`SZ@X`T7$haKhC6`ijFKuG1S,(bE94,I`0Ys=m1h,'P%m=`om<WN)ScDf[\(Xao"%dNS@+5HKgDkc^<qj-uq[Tlbn#`L<$_2<'"Q!)9F39<;Gso!Hf<Slift\F=Hs]*L_GSV-2p4Vk"1kHIqk96,'*bQU'%O>oDLj1Ke9%%]L9uN+eKH*4*V5K[nijE"QV1c-$dj<1*6/L0"tEAst(P#ai#-)C1NCTg5&BJLqmKS:]mX9H[-FWn9'NhWt7UbdA>Po"[HJ+#s4s%&ZG.Enb=2-SiM$L74Q#1KjCLYdr<rg8bnb1?8@AL:m`^)DA/oS`6dEqF5T!=/]/Kn]57Ne#(`rp`(_>IHc=!'H+?"f"bSLf5/%^$%m5b]J(5PDnXCJt3"8FjAkHa(R4?bcWqjR,>-W$2?&_F"VDV!c.AqB_p`%eu/BeFHIqp;p1a^"$"DMR])\PD^TYJk^/lP-:@0o>@l%p=$`#^,+q5Z're3HtU`Ii4IVGhjJPV.b[pYn'Kp>^`ZGe%pTb\=lm9A"^FqD2Wm,pCAGksB?kWh*dFT1B?kX7s-W"i4)#s9cbQe$%%J9fFcO0-0;=ololjejk?RL.I4<7G_kT,p$=SHK<GJq^Oa3cuES6GX%(W60FNnr+HWjF+!E%Poa4=t*g'D(ka]+DAMoJWi&<Zdad%,@)OZWOpVLLpYL[CfkFu3P8DO[9VQIBo//0I2ERdff:M9V=8$IJk\Yc*%+-@1840[+ta72*EPV]N3UX6DeE_Ud.,"+K+unX3R6O^%Nl$%dYU`4_Rt(Gh^^#t@%R8&,O+KcXJg^o*F]g"+OWBd$?i.YD5"17Th0$.?]KQI&/=<@ZL:o)niKrVhm.rMa)cEW('fN;_+!J]G%LuGDcET(iLJ6\%>Trog?;$dRC'(2CJ3<&'cj1B[(rLI[M&Z?$Ms-<?u`E^Ig%[Sh&X78,8*:TDjEOm"YZd4P'I6I$_>_h-pW-7bt%%*)V\MqA,d=:+E#SR!UmU!CaDqp$qM^tr7X"WBd.S(:]7qd=oF_e$f]r>BP9i)68_%Js(+I1$Fi_E?E=A\Dd-?><_/%FIbL%(TS4%%[mP*O0.p<?Dg&3j>cM0"_98]9B6RjDh#M1p!$:rGQ.oB_"M8=Nh%J?LJ*GXj0g_shCg=ri9:kJZH*f^7g\usU%ZqbfB0bOT&.-l%*VMpX.#^!YLe25A/+-kMY5K:0gMt'f9hfsJ`>2]4OhKJjg,DmEgPj\e,Pf@g>qh.WjBm#F?j@*Zjfc7'YQI@N;:P-M@-UO$]e9RB%`$.qc_;7P5mnc(A7<=#)Ao`@!E4daULPQBMRlIR(l+W\N*'%=^DAV%dk8PH?c50(+e#OmRGVpO1MRbLddO6c(LgY;_9uK8Q+4E13%9M89P4&KDSnu:YWQ!U^okN89D@h,]VkXl(`Q)RJhcH2Yh*(Ub4.G`@:2_9b&G%PAbI`\u8PMCiu'm&=NBk2T3GIpdrliSd%QE/l[%].@6k`,N.f9]J8M"/R5fnZ_<K=N[.+^]?r^DD9PF(ishAK$aYm?WKOj<EMp!ALt!0!R"(ELsX!.:FpT!HgPY>mPZf/g+m!g9O$h'%!HW*PNeFcY[uaPn,iH5#V7)]cdBKY[`O>N[0-.@OAll>lP.h-HGsLbF8YNuhQ-%GQHZP3(QYn/;r0Y^ir>"?c@sVi@5)o(IFD-'0%*rMPsmG_A\HHEWQ^F,j"g:[l$MLb??k=\Xe''sE,,Kkc=:rb"U(T>YOkQ'VC;Y9i8il_,lAVHLoi\$P6pV9-rfu(-)HKXc3hT8#2%FFrWkQ\S,>*F;(FF:."GMbMG9Bc9DtMA*j2=mLZ/NVDbU\_%\C&=uZn"5/>'0_uC:^TC`\ml!&k'O0bA)^e!=m&70VV7bSY1).IY%e@%^jXEWN=[ADp=C7KSV8iNeB]sN-fDW=Q!\ui6f?,+kkH<5HlhDj.<Z%7A<Nr9>F?`[K5g$l`S'IZg"i/H0\YTOO@M52I/8e`n&%[h%pX4Xm8?I?nS8Cu2)>rAoYjN!SbLGV$0Ime0I/T<P2NR/O0,A;e?K%+Gc_Q[d=\G:\"LnL`#+Qaf./bJ&8q:RK9=Dqb9s-Ubc+%M@AQ/1m'ih=G.V/hD@tC>o1[V-C<.+H+\oq^_I-48LQGP>qFi/?oc*+Z`T>?.@!&h4A<9\(g3i&#6?hF[Wo@/U;=`)S_ZePCI<ZR%>+4^Tlo/oJ-g*!+C.(TAoU9.j.K5TE&T4%nU!77m!f?U[/-CItRr)]bSjWk3JVU$H@K'Fj;c+1Dej@JI+,$&6'Gn49(&&H]>T)LD%9C=<@#lgHQ3PXUgdT4Tf*VYi(rSl_-[M<I!XcUPO;0Z(`f<Ce&[egET0sKMaeU</'`Lcbj^jW%VJfZ(2I'6Hkm]0Z2YH%'*b&iY<%h,c?#'@uj4=6NrZ>tAo6Ret5eJnX9Q<MjE#i!5DR_,L>inLZA`h$gR%>A%.RMG.m[AdDT%]@c=Z#i]p0;GY59;+4m]ReO4s4r8t=%M-sJR.4CerXb$U#f^QRB:pq,+8H$sS50,SiO;6*(f=8C`cjGAt;o$FKM=[9eE-`jdPfk<9kgjr9&G0/`fc]]fo`Vuhs.fc:I0u$*%e/sK.iZWEVN;J-*_B`0WdX7a-i<a?P\H7]5=.UuIZW1H2*h8c%n"6CI;Dt$d2\D7&Z-&dt7W7J8\-eQA]H76^T;`<q<midCr0W.F%UjGZHauKuj-)&q2:aHF5=Ie;#)ant^dA/c-fIrq-fXi^3X0ikpfc*(_Y6ij_EHUtR7-'?*\N1UC?^VZ5gr.ORK-[HQ85bq=EZ5c>%5Q4c@_W;0UW:V8[@ff69Btc:b:hWWfNqoM[51=qp59iA5"RuS\(I)A$0:>2td7IGh#:X]<A+;iFWd+$GHoVc\1hlc:&pu!Xoo&mR%![,=^S:kG..3Vd8&buGo?lPLHPpRg>Z(9@JSVFYfoE_^@V9S"Y2^GXDC"r_[9-iJh;&K7&NmYmN7$M"NdGAe!UUZ/rfW@db%]1*8%UCSI88@M-#N2'q^!di;p1$be8>$.^)^`XBO5T$s[^\r\4$+q'<'BO9YZW0au_h(dOUaH,'kmmB18Z?1W\'SWSf#b^WF*S.cai6/]%SK$Hq#7d5Q%)*;L%J9&m-O3Al%$B.!-^!#MEdbPoR8c46Z@DT]kPg8,mOF`.i]7hLDol5p@l];B1l.A+CSK*r3`[X*gYVkd-G@#-%["@0s;/3>ane!oKqSQQ[Imj&$^5iI:Rp^.?^<-QfoONQ]/964IAi#:5cl4o#iADmY:6<c9Qi;hN(GY]**shIpqN4j!gG+">9/d^`%U`]*!iQ!ef6&`O73,T:.#BL+:aMO#N04O[2Yifa\E8LQ=%sQ$)*$nI`+&6M!jID?X8G@QMU`+n#Vq#=%rdTu7a^gi[VdeipFh&L_%Zh)l.@k`(]>mDu3=(@Wk\3DFgGlF03G>Xn&Q6UjkE+ds*m]'*aV;aqX2sKr%0Y'7s\`.37LmBhPA4R&@nNC1RY3oU;Fc,Y[rNZ'^%XT2EcnjKGT9:+7_9]\W;i9VWS$%EH3UUTur-a_*&H,?J'78JS#AT<='.^2Y3Xs1OJO;L,#7c):Oj=T)=2>W?VMm'/'Kr8SVP=BkI%S>mXe7a%!NfM-)RoK_Hk.`t8lUE5^[$=AbY&iI&Nn:ZD>jX&]LqtYBt$/`C[d,8j24T7la#Nf*C*s[n>e3^M8]m'U2iNXac^3K4%%HI9+rN796D:jW#&bId-^8oK32e_fd)V7/[_?#.VFPhuC-p;Ut;:jW#&I&=BT*D17"g@fu98a5p2nnrf0dbCBbXkIX[:jW#&E&4P<%LD$H*<3X$3$fo6i;60RN,dt`e&%jR#4VD@UOD]3&@kHX;W[Ae-?L+ioSsJb<D[@#X,1<F]"0RCU)-W2j+5Cj5Cp-ERZ;@cls5HCt%faN*)+a#gk*6sWR#C#pqr=dL53?pri*la<kXY<3[27QjY"Wp,l'>e'7m*T&]!I+Sc4[L:>&$13.:j!UpD_`GV0>9FWGj"iM,S%?s%(A?$3"*80E'cMAmj+n?B`[4F#]+(u')iUMJc@q-Db6%q,.AsjI!$A6A:!8u_g6njp):=i"jKLmP=TXf)?KibrPb#u$^,68"n,&g4%W=XVBd?_XDPJ'p_iI&GuGo$Cie3QaV!UO:#?mQ_lk!jIM4"efj8!BV:-j$$q*(E[X.?XNmJ,5b#2b`jL@b9YbmhNeOH9P%.!$tDi%\mW[)'h30H'4F)WO[7/XL0V?Dof+(U@n`NSG;hbGGP<n.E'?_mp$hG[',lm(3bt[97$r,`s/YNif;pB`I"Lr"8$p<SY`$YN-)2Y,%U-">Ab/,\k@,&'(8-;2bY(-/u2`'K_FUn$Q`c('uW6!&9aBM&3<1U/bRpR8RZfKI4IW2p]4$T`(maW6uj$VsAGJ7.eKAELVo]DJn%CcaMTkYDs5kJ+TTI^cDQ$f@1QD,U?-U>=PW]R9aI(^<0Yf>bV&++>m>h0W)?i/O_,T#4=tI^iN&=IlM@r)3e)Sq1g:`U80Hio9XJ%n_EeHb(&8dG&!Rcrqab(s"9e*^B)dHVar]DM'dJ?9jf(#C*mVh^\(sf#XoeOK\r\oA;%.V(ubD4k9'Xh-L_hj"BCoJ`<=G`VO@?_%,@%tTqf=O0q2K9HhV;]V@&M6P3$d2\/Ws4KKJ*gLp:pDoN:;sZIK+6+R0T'3rHO,3qs)`s0YVHmnuq$-^[I6rL@)IqK:3t_PcT,O%-nFS>U_t^A<`min-oqZm'aF>T9R6p44)`/Pd5!(b<lDW%6d)tq$ZkaQRFM$!dcP3.(sH%B4'>f-[SO&\IS0Z)l$=[6mTd=OPA3"P%>1N5l/090r^6QYl(t@_VT0CpjbNc5blINQbPTAll(A[ItfjqV$EM;NVf!%-rBUI+h/pqgN)&=1[OQ);R5&)ot5Q>%,\GOUrU_u9c%0Vt5W:,Al<2fmbWM/.Tp7=D#l-r[kGaD9n<Q,2d-2nlsT]4Lp8r;B^b%n0V@X"C.Fk2/YlC-fooRVq<DH*V6JpX$3b+S$M!QXST`%c"EGS2]hj5R:E-5S/X+7*G<RBF)9.]gJ>PpGU>;^h>V#^3Hhu.U]+/g3N`cMa6$:tqI&?"/,n.e7Lc7VOcRgtmut,,[M.?\D1=:1%BuTP[C\-Y6bS.OP+9]"WT2Va!qn2-i\aXtB[//5^-jIE]S>2m8r;0#2*\R!;1Pg9)^!gH*ROt2bO+%7Mpf.25>`D`;euC$g2<$.S%f68mANjaNkkBam2B]7Z1%DTHpJ`NcIYYUlRjAb<.^6&qMq8NSdA*:^8]?s+J+5?YCK=&sA0'XB/Y<D"eZOj>&X%IK3E-F3i-0"B/%k"=HUllYc"Tu@=\Bu9'"l5H^EqKi<AkI6dr=7DO<rTiJOeZuY<0J.A9&q:;SZ^^H[]hYal-Z34+&[pB)r*;27/S)J;lV:qorqZ?\%O'>M[53(P9Pg?eAPNHLh(AXC?]HqOoC9>=ao&JSF471f"CVnG6IF<H84+11G:#b>65<7cUrI4OH3SrKc@eGY/e)MrC^%paRp&B@1%@njE3Ch37jGMOO,pWj))VUs.#WW)SPZpt4AG8lG3^:n`lD@^qEd^6bNefUli!S:UEH-*\c)=WPBa6pN^N>\^6*X;R__;eT@Ib*Y>%rR^?_gGM)5)Zt<[me'l0>h*5UAOe[&[8QqrQ9CLDl:#qRU+S9/:"sOI['fU=^@B*(eEY%<[]ilH/3X!tJ,;o#I4N"dqJN+tVf2MC%s(OF+oU@^e)ePMiVQ%-*i6hKME*\CVYQuDu;V'`76`n-Wdslgnm?c_64K>#<Ig-E0MOX*gf?i7/b&41Zr&,jc8\Y2=0,J3nf#J41%Y<RN4+#PT-2@ATErPLQI.m\E)FoV!\k<$;*mCuhl-2]]fs6@?J09)Ng2M;-bMV\)NZ.WfWAo"sKI'N52ig!T#?U*@.I/;jum]4*g%QR_:Wc(-rRID*;#"PSWbp@$2L,0fne:mYBjp%cVF,2pGY\@b`=J+(_&S&HK2iePK49TsV8/]T$R.GE:i!Klg;/k2)/[/$a&s%tEJ%>u6#'rUT+ArkHJ7UWW#u,5=,k.4j:3%HYoe6KGtJ^D.7+(.92_@!le+&F:7"H_j"FnG\NC70UnCl_SMn&?Nff8F!W&9]+>0EHF#9%FtcXb-@hLUB=.H!=qJ[T7qb&^6$G$%+fA!h2(9m%P_:TlecER`YhVV%V(!9Qo-Xp?#]V2"S?(![Sh5CqfG(C/AU*L*[:@%-1=P<a%hL3CccPB:lG8JRA[ha8"\[B(opGc*k-bFIhfr<3uJ3jk#-Sr[f:fYdB_BoA@kX-*=Vm4q!Q^B!URLtK^&Cl(jk!>Y,+"'mJmn\Sd%m:.&tSbbMWc2giX,US\Z?%M@%YX->8gUL\3\.&8u8XMtV5uA6>G/@GrSs@4jUcc%$"%aSD72,mLXY*Is"kCG53C.R.9Z.$eWN2c;%('JRs`kgb5&To]ab7tj.)L4&mVX]I@/UM/hE,FRa>mDlF>2*J#b<U8[#7jcZLK-[p:'DaF$uQ@+R^N@eU97T/D+G/n&ZUq)VLi4k%:e)]P)fTRNPj3k&8TLV5cEs<:O(fhNYmXb_7MY2RUY=;^/4`dW-;8u=.#1>C;_#i-g#B/:E?J5s[)m+t8nTnQ.RKA#"k?Y8cqIhN%@:R`I:$VR1F_bGp$IfA40^&TJ#dqV%&b]aI?WU*D5YX"%]FZgX1fFPi?iX#iB\4NQL<QOk,0Q-/C+tr(,I=j?=D\2]1pi8`DMO2?%"&+'+,N.KM33F_TH8+ScG3To1bIT*p6,Y5=#6e.C5Cfb%i.doZ><#Bh%P0/$OhtiNXk!Kn&V7=AfFG5/MEOE_,mlq"(X$K<,n):i%=qX-NXk?1D"#_DrOZFZ7>_`g:NlI#m'o/KSNs$@4[5](m6qRHc&8d?^.npHEh^1X/4Fl9?D/h?#Z;;89Pcm$C+fI<\>\DLtdsBS8%.ihEbPDd4+2,I@.jFJ.7j+=MHK.t.#<LYf_$3HM!M,tJqb$?X#G,S6N;)RGNC^S.Gc%R152+]E;lb20ID(I$(&@?0h;.jDC]O!H1%1!WgZS[s)b-]<m#Q:6MX.]N&PLfP0+h0L(=Ct2M?W)nsQ=ij27brCDBL8/'4WX#-F+G-;t61UFM!Q,8+L.'Cj3FsGc!?72tn=>Yi%VF-EC,?860g[B:kY:OJr)aO6aQ\DchbF8lD*>=fR%ST_h\[Z$T'uE+L3+l93.u6%"`#4AXF,pFjHX'fC[t75iMG._,Aqi$kZk4!&%9rLX*(=X=!F$uUDQ:2YnUJl0V=]!S+.Z@hEKa[LL"imo9T>:q!CrOK@0TP6m3+C/]`s-\=SSsU&OSVil5S1j\!CU<iEJ-Xm9+-W"%(DJ_O`KSN&M<)p`F-"r?Y33>,`u,0$1fe0^!_h<<LPQKZJLh,d!CDoVNsU8#0Hcb12R3'T+lL/c:^(7pE<6]n-R8pF,=K3kO>jI3%.F=_7"OTJ+PMg[2;ENj_)A7pm&m7FbcXi.o`/%BdD(W-)PYY;34Rso@,:SsnVA:/r(.],re"_SaAns65S_4V[e?':b'CN=>N*Mp<%9Wf1PXa['hL^V3+h#.6^c#b7dLJD-.o=;dV\?+J=Y4?7F1hn.`TgL/l]Ks$H7-_luFI\opd$ZOqA!>8"9+lQ>]ZuQp2EnrfGCF#,%$+k5/6k.+J")a5KC+sM)]:s4Z(7_:]`(5%\@Dl,7V@Gu3AQDgK*^_sCr5]O,A9?bBiC+NAJP0njoG9)Q+`DE@Ue"&pn"pEr@c@L7%T:!tR^?l^?;>_Gjh_!6Od6[Ce;V0$$bY[d?,_u*_;ds"dWI579`D^S?;,%:aVh@-S0W+N71<uWR0k$iV%!1_mfSNE?@_go2L!%bF%a<.+8V\3g#!#'KIAf7U-#kMc!gAVgr7M53IM]ef`m7UC^.YK6K_sGa95pg6Aj"M7H*X=L1"VM7TGYW*N`tFgQ-KD';BoW8?^*cSf%^#HQ2VI7C$^q:,#)FVNh>WNbf]j]!FrkmZCC2$sIl+X>0@IXJA[\fQ*Ak=H4Hb5H(*7HH34AN46nX*;hZn.>bQFNS595Jj,5Yb_R%Zc$r)',f5_P.6rFATaFAAgX(rii=X#QtBL\)PlX._Fg-(TXl]E(ciZ;`%3Y!,Mg7"9<@rq"f'?UZ\3>$6AML7I8(\^?bb#20U,N@%[mYM/Yf$ZU78/dE_B`_VoUN1L_51'AP+VqL#$:4gK@T?<dAm):Cb,r,'+9Y``_m-[66Xk`>RJI&%M"Xcgc<BX,+RnN2^CL9L\FAc%C+fdS5/`=,8@*9!;-A@O)[DqL[GXInF9p#W:6as?M95&2NRm;%DFHkR$aQ6::6PQD&G!;Xc_9sL9ej-2n[F[TPD$&/BXJ21^TCfW%AUC\1e/]6a1JKoU>>^L1C(gALH;DtE6"&*2S$ISZJ$rcjMLe@11`*nooL[fq@$=M+>hkQI$nCjNh/BYDV^DTC0p9?]&JD(-j:(f;%8b/NB6((X560VA!Ohj"CAS+M%5rc6J`_cN@6Id.hk%3PI+[lHS\s84dV?K07;gMnrRk6ogfNci:>I-nqbn%p&44e"td>?S-ToESt%"/emC`u*eu'3R\kEaE.Z2C..V.H&</cUk@`ed;_:K#E4\WN$'C[u(lC-E$5fOc4/H'Nd%":WF2o<#gQHnMt5$0S)i:g6jEk<$?+H%,YE,9Pd"e9Z4(FoAQmKVa69n4:R!=S7#Pb>&*Yn5EC#bV*5P<Tb@XX=NmjNnQZA`DkLh7L8d#\f;gV9EWX^ut92]/d(1\[5ELMk!%8;iJf0^BlS-EhF['Sqs35'0C>W04\Z:eea-`CA:,(_WYV]Cum%cm'Z58GPW[S>::[;+]SO3#;l-bF2JsP.H4A0BWQ/0BPY7<(U@B%0Y0-<>]g:Hlqm3@/$jnC4qeLdi=@m/5plSBR%m:<(=7.P>r31NY9j=.blgahBhoMm*KV.A$Ju0SkHh]d@#Y0S_>&QV5blJ)Rj(T[%3%8UB#Gf<9e6^>ti1-X>8\or(T!IIBs$]=m`Nflr3+E&I1#3SsKOf(+:tI3!e;U[u?NIMiEQ8pu,,#.*SsZgFG-6X479E]e@='[I%17IKdlq5^ERB1C.SJg]Uep+hRK!SUg&r7&4#0&&i.[hQDMSY.<L2ld$It/!/Gn<!X1l"e/G!r]NNj;W7,]`39b=n;PEs.W@cXc[=%(:B.jAsVFB;a<AnPK"OQX$J/]5XX=B@7?*mK8q3b"ld=0Oq--1/4H/PR9)600lT`S3LC<gFCZ=chr7440fG#A8^6WFo)r<dRJ[*.%"D9XrI9+r%!*rj(@(1e!iad,fLEYiA"Yj1UU\tW'q&(ITNI6O*Il!JSEj,ZXU9T5YYJM\;GWtB*Si+H:XX$%4EG/4.W25Hd"q$%(%So$MJb`*/nZ(D%dEOklFWV,X63V2;i36Z8:4Dc6i=?sI![!;#f4]"h@qS>)MC%dp]L&P@*RM37-P]dl]8\6s(X91KPgcb%f,b5;o%\I0ZCC.7knBl;(J;=)tV+MlQa2taI,Yf-dcaEg!7cr'2PLndYEZXoS/pGH+.2PZ^FK&tY59^J'rMb@q,Y2/C%dOFFf'9"eH0V]A$%3L;`s;=ZSp[iYZ36%r$mjGT,7)90,`E:5"f<D5Af3r):.T/:'ce/gW+ICKeB,);"Eaf4[Bf+/+Fcci:tKNZmLcDRb"\PMH`k>N.q%4.igqSPNB6k^:N"OgJHf.4_Rm.ENo:_K"^:ZFr">/j#\'pl!<#-CNLkSPMi:ZVS^>0gXu$MM6-W1S9h(9L@$Par*O2$*<eKNiEWZ%\Gtmk!5e!sJ0)1O82Er0J`O(Y3)mN-`AM`f.,8'Re-\!lloNq/dW?,0"Z;(a*0K%cPslc\bo(.p"u0@)d%Nd25tuDMGiYk9<fG65%f<#ZXE6OkLNXa,Z56IlDL1_X`"#5?a777hGo5fBB?n5KN@?ShA&gq2`oGegN";I_6$$79m1/"b]^hX9rYd;Co&0X/$fJD"]BLG)g%Os^tu8TB:Tr2dOH#BV(H!%8M6URG"[.2N7&`i4!/33D2G%eiqZJAP.2hGZ-2(C>=]"%f.*GYBI)B._7`3G'l\N^:54!;ACNG$mNa%9$ICU2i/*9U1"INjp1TZJq2U0Y!DKYN2#I>4k3"uq12?5ncM*bH`B78>gn5R#D'o*lOO%OM-N.KoFmM";P=C5+)kem'Hbg[#:^n$%>d_ad,$]Rn7gR4]@8'q86e)DnYI.?+#Lu#bN(X[ba9BhmoUlCI8Aqn@,?4S[iPCo&jAL51lk4%CSDg1(RY,?G>V'-$:oc&OLK+S>%T?hT76*7KoAmB]@>U1#K*n8mO1_Ne13+!g[4E.Z19AtGsU+.cWE+)dji+Nh0lG1A(o75!o>[=IfUWN\*GgG?s".*d$"I1";WEK\Q%%NIWeK<bTGku=j?#;0Km&saQJbXEUYGMkt@;WG%b5KXXR.Qd-%+i-#@hEX4:'HD@]ES=p9J[_]bf,JrrkstLA4^gV<*XA^u8Nj"Z%K/t_,mHIGca7p=CaH@VNpV,r&r`G\?KC7i\k"=WB(1/hASE?(cA2>+)noP.[T3n,bBa&]'9GQ(tGL1P>8^?5XeZT=GNW5YWfeJWc%Hr]W!A%Hg)3m`7CCJ#t,:'BL`ne6BjZ+d3I]N!TlXIi%bT1W@;#12eSrcc[1mJeiT597I_obYGo?S"bGk.j2b7$Qg.4O#A%))!kG%CK,r(!*)D%d!kK5JoYcp5_(&Ok?!Xn!DQsdobcluki!hN0ZYRn@sr`_fFMA$G:"h%53,!s!OWf8n&uoI-DL)EM$31$H@lR'M*`kZ%J>]`brr?(1B<sYq@]1D:g'A!,.f]lC*D+ge(t'[.dTdX;,e9+mU!q[UIK3TM1YLJ\=X,>n5\1'_U(9[\$u-uM3_f`k,3q<c!brq2%b9Z$1X?M%4X66flh=UtpCCOHV,.ug9oIU@9i?hmsgX4HoG1GEkdLr`ZB3"Oh%`PcFME\;edbJC2=;^H6W/:9e57e.R&`o%:J;Pao%ECV6Oi$kf,+V%"`[aQsucD1fsL9R4?("a,7$`6<ZO="t7@g!F!1^Q;H#82bdC%2^R0Ueb4`j`R-1EW0g/^U[bJJ;mCYICJ(:*3F<%R]'c@-:l&>?q9F"e:c%C-:h(7#O=o-%rsNJ'c.JtQ*P+mLjkYu(ZA-WTH8U+4.b:'ST[n^hj`1XUs-"I&fKjL1gNa%#n^d91dqoP%r#:K5OS'h1*e,5^N@+,TT6(qks7AI?c.^X9DK[_2f>3oLUU"K6V*P>j;.[mKBf\0^I@#ub@%)sF/[X1:GB1<tna"J2\"MgnF4m=X%X^K0@FSJu@+\QEi"kRslqA%5AopGrfQXg_(B!(*?epeYO=50F8%,jI0$"@a?J8eJO&Ai:X+^!-"`6C+ICDtY0_f/+u1KI@-L4n^)%<JUdQR8N<#FFqn^ngP]U'21p*,+N$t?!*4b0WYB]JjR?\bmIrHTjgD[Q"R`HTrB^i'IlRcW]ZW+&L9Dm<D9/AMA8W^MN0E[Ne/dT%'9&fpIa1_CRa/%V-Q#n$XU++@$<Nr:+_cJ@gVO]9O.`?u0oOh*5^,/2m1EkPPO:QX4"%4=8-G^PaRL'-_/sdEc;--ONno3,M@,)+%BE)+jbW=_8Kbc_]:,m9h'cA/OQ(*92N"MM9^YHe2>sbdjI>U$]Pr*fbl8C_^JZ=%([jZpr/M`l;(PPQ<7AeQ5U(EL&aCO9a$B[<,%XF^']Kog^AAuD.X7E3WBcmeEX#gn!/.X'^&7,0_udf,`shV!B'*OP\jAE$2b<@fr.=H7eY-51#a&[=,<ABLAS6M@:D::X:i-LMR`%TtMlu$luN*^FcStdqIW.#hc[q3p#.q#92]N^3/;W\gJV?=ESN<ht)mjlT^8?gY7c*Dt!-YX.M`&bO5pI^3Fe1]_^X4o1-"-T>SP_%#Ol"ef,hlDQ1X5U07e#I\7t>[>LhPUp%8(?jlY*o=8)@E*8H!_\6F:b_CG7`g"h,RprO]+fltj2m/M7-^>##N*,XFf8X$QZg,)/f%A'4<i^$l,eVi:WBdFkX3HqOZLe`D4cC`f:V2:WF>SS30"PcLAKK^gXZAsM*1K=Q./eB/S^Dd(-n\_.QY"U3Mj>Fn+?2>N7g-W06!%bfo=>*M!9o!OFXlaQXdPXiWJk?F$=>egFjKoJ;790O'_`35*SnkL=H@:Q6UV'<0O#/rcA<&6q4]a0Hl(q[F2[2SLfN4:O=HfKM(M%7P(U4L+l@9I!?nO2;=T70q24fK'u,RW%2Kh]JU>!4DChT0ndqh:15PgYj_Gs_e='<Q!][/ch,,A,T<i\jgdpg'M\gA-YHG/p!%Np%n#Lt<"m82Yk=+r$c1N:i^/*1Y+B2l#iC*ChrK5W!Wk9POI/N]hN+oE]4lU7]dKiI6%XQ>Ue[HZ'TGeBpm$-/1E&6Ot0Vhs%V^.:*%9nNEL^2,'Fob8MU1:?VE!RX'XY_bJk7:tHAV2)f$YaWt?iGWWb(S=1i<_hI*jDO`#DKPQb(6Np5kr"W1X>s1_D3tQ4;"_bMApNs)%b]uX\*`E="/?c_)j#[!@A1uehR_1HD@LP\gZ7cpJ,C_oRb+]rTIkE4;S9+:_lYA9]:f-E'Mls!!KrXCCZ5;n!]2]7uHX1/sK"\;5%r6If[bm1VTnb_BNs05'OVr3ALg(j4f8pk&G5N1+cG#%*M\FgBCcEMpCm;VGtKo_C(J,ZBp3dc:$Z*EiZmc48<?gU%*[f:+4q"=(T%ln<RT5Hg+*rl]=pq=rM>lb[doq>/3k5:`Tf+nCVPlT]d'pjY'p=lf~>%AI9_PrivateDataEnd