%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 87raw_width.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: steven schowalter
%%CreationDate: 5/13/09
%%BoundingBox: 0 0 320 208
%%HiResBoundingBox: 0 0 319.4727 207.6797
%%CropBox: 0 0 319.4727 207.6797
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 84 8%%BeginData: 7970 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0DFFA8A8A8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FF%A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FD0DFFA8A8FD45FFA8FD1BFFA8FD0EFFA8FD0DFFA8FD31FFA87F245584%FD3BFFA8FD0DFFA8A8FD2FFFCF7F468C6870A8FD48FFA8FFFFFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FD07FF71FC6FBCFCC3FD3AFFA8FD0DFFA8A8FFFFA8A8FFFD07%A8FFA8FFFD19A8FF7DFD05FFA2FCBB7D84BC8DFD3AFFA8FD0DFFA8FFFFFF%A8FD09FF7D7DA8FD1AFFA8FD05FF9C93A87DA87D71CAFD39FFA8FD08FFA8%FFFFFFA8FFA8FFA8A8FFFFCACAFD05FF52FD047D527D7DFD15FF7DFD05FF%8DA1847D7DA88CB5FD39FFA8FD08FF7DFFFF27FFA8FFFFFFA8FFFFBCFCCA%FD04FF7DFF7D52277D7D27A8FD14FFA8FD04FFA1B5A1A87DA8A8A871FD39%FFA8FD08FF27A8A852A8FFA8FFFFA8FFFFB5FCC3FD04FF52527DFD045227%A8FD14FF7DFD04FFB69AA87D7D7DA88494BCFD38FFA8FD08FF7D7DA87DFF%A8FFFFFFA8FFFFFFCAFD05FFA8FD05FFA8FD16FFA8A8FFFFFF69FFA8A87D%A8A8FF77BCFD38FFA8FD0DFFA8A8FFFFA8A8FD25FFA8FFFFFFA195FFA87D%7D7DA8A8A869FD46FFA8FFFFFFA8FD09FF7DA8FD0CFFA8FD06FF7D7DFD06%FFA8A8FFFF9B9AFFA8A87DA8A8FFAF72CAFD37FFA8FD0DFFA8A8FFFFA8FD%09FF7D7DFFFD057DA87DA8527D52FD057DA8FF527D7D7D52FFFFFFA8FFFF%FF8DCBFFA8A87D7DA8A8FF94BDFD37FFA8FD0DFFA8FFFFFFA8FFFFA97FA9%A9FFFFFFA8A8FF5252527D2727FD077D277D527DFF7D7DA8527DFFFFFFA8%FFFFA895FFFFA8A87DA87DFFFF7F78FD37FFA8FD0EFFA8FFA8A8FFFFA9FF%A9FD04FF7D277D5252277D527D27FD04527D2752275252FF27FF7D5252FF%FFFF7DFFFFBC94FFFFA87D7D7DA8A8FFA88DCAFD36FFA8FD0DFFA8FFFFFF%A8FD11FFA8FFA8FFA8FD05FFA8FD0AFFA8FFFF71A9FFFFA8A87DA87DFFFF%FF71C3FD36FFA8FD0DFFA8A8FFFFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFFCAB0A8FFFF%A87D7D7DA8A8FFFF9B94FD36FFA8FD0DFFA8FFFFFFFD28A8FFCB4EFFFFFF%A8A87DA8A8A8FFFF7F78CFFD35FFA8FD0DFFA8A8FD2BFF93BDFFFFA8A87D%7D7DA8A8FFFFFF8CCAFD43FFA8FD2CFF9CA2FFFFFFA8A87DA8A8FD04FF55%A9FD35FFA8FD0DFFA8A8FD2AFFCA8DFD04FFA8A87D7DA8A8FFFFFF9BB5FD%35FFA8FD0DFFA8FD2BFFA279FD04FFA8A87DA87DFD04FFA278FD35FFA8FD%0EFFA8FD2AFFB59BFD04FFA87D7D7DA8A8FFFFFFA971CAFD34FFA8FD0DFF%A8FD2BFF4EA9FD04FFA8A87DA87DFD05FF94CAFD34FFA8FFFFA8A8FD09FF%A8A8FD29FFC38DAFFD04FFA87D7D7DA8A8FD04FF7F78FD34FFA8FF7D7D7D%A8FD08FFA8FD2AFFA271FD05FFA8A87DA8A8A8FD04FFA1B5FD34FFA87DA8%FFFFA8FD08FFA8A8FD29FF8DA2FD04FFA8A87D7D7DA8A8FD05FF6ACAFD35%FF7D7D7DFD04FFA8FFFF7DFFA8FD2AFF55A9FD05FFA8A87DA8A8FD06FF95%A1FD33FFA8A8A8277DFD04FF27FF7D277DFFA8FD28FFC36AFD06FFA8A87D%7DA8A8FD05FF789CFD32FFA8A8A87DFD06FF527D7D27FFA8FD29FF9B9BFD%06FFA8A87DA87DFD06FFCA8DFD0DFF7D7DFFA8A87D7DFFFF7DA8FF7DFF7D%7DA87DFD14FFFD05A87DFFFFFFA8A8A8FFFFFFA8FD27FFCA8DA2FD06FFA8%7D7D7DA8A8FD05FFAF72A1FFFFFF7D7DA8FFA87D7DA8A8A852A827A87D52%FF7D527DA8527D7D527D527D52FD12FFA8FFA87D7DFD09FFA8FD29FF4EFD%07FFA8A87DA87DFD07FF94BDFFFFFF7D7DFFFFFF52527DFFFFA87D527DFF%52FF7DA852FF527DA852527D527DFD12FFA8A8FFFFFFA8FD08FFA8A8FD27%FFBC94FD07FFA87D7D7DA8A8FD06FFA94DFFFFA8527DA87DA8FFA8FFFF52%52FF527D7D7DA8A8277DA8FD0452A8275252FD12FFA8A8527D52FD09FFA8%FD27FFCF94A2FD07FFA8A87DA8A8A8FD06FFCAB5CAFD04FF7D27A8FD04FF%A8FD0BFFA8FFA8FFA8FFA8FD13FFA8FFA85252A8FD08FFA8A8FD26FFCA69%FD07FFA8A87D7D7DA8A8FD07FF71A2FD04FF7D7DFD2DFFA87D52FD09FFA8%FD27FFC39CFD08FFA8A87DA8A8FD08FFC393FD31FFA8FFA85252A8FD08FF%A8A8FD26FF949BFD08FFA8A87D7DA8A8FD07FFA98DCAFD30FFA8FF7D5252%FD09FFA8FD26FFCA8DFD09FFA8A87DA87DFD09FF95A2FD30FFA8FFA87D7D%7DFD09FFA8FD25FF9B77FD09FFA87D7D7DA8A8FD08FFC38DFD30FFA8FFA8%7D527DFD08FFA8FD26FFB6C3FD09FFA8A87DA87DFD0AFF95CAFD2FFFA8FF%A8522752FD09FFA8FD24FFCA69FD0AFFA87D7D7DA8A8FD09FF939BFD2FFF%A8FFA87D52A8FD08FFA8FD25FF9B9BFD0AFFA8A87DA8A8A8FD09FFCA8DFD%2FFFFD05A8FD0AFFA8FD23FFCAB0A1FD09FFA8A87D7D7DA8A8FD09FFCA94%A1FD2FFFA87D527DFD09FFA8FD24FFC393FD0BFFA8A87DA8A8FD0BFFBCBC%FD2EFFA8A8527D7DA8FD08FFA8A8FD23FF8DC4FD0BFFA8A87D7DA8A8FD0A%FFCA8CCBFD2DFFA8FFFFFFA8FD09FFA8FD23FFC3B5CFFD0BFFA8A87DA87D%FD0CFFBC94FD2DFFA8FD0EFFA8FD21FFAFB59AFD0CFFA87D7D7DA8A8FD0B%FFC38DA8FD2CFFA8FD0BFFA8FFA8FD22FFC3FCFD0DFFA8A87DA87DFD0DFF%B5B6FD2CFFA8FD07FFA827A8A827A8FFA8FD21FF8CC3FD0DFFA87D7D7DA8%A8FD0CFFCA8CA8FD2BFFA8FD07FF7D277DFF27A8A8FD21FFBCB5FD0EFFA8%A87DA8A8A8FD0DFFBB8DFD2BFFA8FD08FF7DA87DA8A8FFA8FD1FFFA2FCC3%FD0DFFA8A87D7D7DA8A8FD0DFFCAFC77FD38FFA8FD20FFB5B5FD0FFFA8A8%7DA8A8FD0FFFBCB0A9FD29FFA8FD0EFFA8FD1EFFBCFCFD10FFA8A87D7DA8%A8FD0FFFFC94AFFD36FFA8FD1EFFC3FCCAFD10FFA8A87DA87DFD10FFCAFC%9BFD28FFA8FD0EFFA8FD1CFFCA8CC3FD11FFA87D7D7DA8A8FD10FFC38C9B%AFFD26FFA8FD0DFFA8FD1CFFCAFCBCFD12FFA8A87DA87DFD12FFC3FCA2FD%26FFA8FD29FFCAFCBCFD13FFA87D7D7DA8A8FD12FFBC8C9CFD33FFA8FD1A%FFC3FCBCFD14FFA8A87DA8A8A8FD13FFBCFC9BAFFD23FFA8FD0DFFA8A8FD%17FFA8B5FCC3FD14FFA8A87D7D7DA8A8FD14FFC38C94A8FD22FFA8FD0DFF%A8FD17FFC3FCFCFD17FFA8A87DA8A8FD16FFCAFCFC9BFD21FFA8FD0EFFA8%FD14FFC3FCFCBCFD18FFA8A87D7DA8A8FD17FFBBFC8DA2AFFD2CFFA8FD13%FFC3B5FCBCCAFD19FFA8A87DA87DFD19FFCAB5FCB6A1FD1DFFA8FD0EFFA8%FD0FFFC3BCFCFCB5CAFD1BFFA87D7D7DA8A8FD1AFFCAFCFC8CBCA2FD1AFF%A8FD0DFFA8FD0DFFC3BCFCFCFCC3CAFD1DFFA8A87DA87DFD1DFFCAC2FCFC%8DBDC3FD17FFA8FD16FFC3C3B5FD04FCC3CAFD20FFA87D7D7DA8A8FD1FFF%C3BCFCFCFCB5BCC4CAFD20FFA8FFFFCABCC3BCB5FCFCFCB5BCCACAFD23FF%A8A87DA8A8A8FD22FFCAC3B5B5FCFCFCB6BCC3C3FD0DFFA8FD0DFFA8A8B6%FCFCFCB5BCC3C3FD27FFA8A87D7D7DA8A8FD25FFCACAC4C2B5B5FD05FCB5%B5BCBCC3C3CACAFFFFA8FD0DFFA8FFC3CAFD2EFFA8A87DA8A8FD2DFFCACA%C3C3BCBCB5FD06FCCAAFFD0EFFCAFD30FFA8A87D7DA8A8FD35FFCAFFCAC3%CAFD0EFFA8A8A8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DA87DA87DA8%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFAFFFA8FFAFFFA8FD%0EFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FD9BFFA852%52527D52A8FD15FF7D527D7D527DFD16FF527D525252A8FD15FFA8527D52%7D52FD28FF52A8525252A8FD15FFA85252F85252FD16FF7D7D7D27527DFD%15FFA87D5227277DFD27FFA8527DA87D7DFD16FF7D52A87D7DA8FD16FF52%7D7DA852FD16FFA852A87D7D7DFDC5FFA8FFA8FFA8FD05FFA8FD07FFA8FF%A8FD6BFFA852527D7D52FF7D52A852A8FFFFA827A8A852A852A8FF7DA8FD%68FF7D7D527D527D52275252527DFF7D7D27A8527D527D27A852FD68FF7D%5227A87DFD04527D52A8A87D7D27A8527D7D527DA87DFD68FFA87DA8A87D%7D7D52FD047DFF52FD047DA8FD047D52FD76FFA8FD07FFA8FDAFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-05-12T02:42:41-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-05-13T03:45:16-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-05-13T03:45:16-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>168</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAqAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqlr2Frca1PJP&#xA;GkvG2gVUdEYD95MagleX44qqvoukOyMbKCsbclpGo34ld9vBsVX/AKJ0r/lig/5FJ/TFVkWi6RFE&#xA;kaWUHFFCrWNSaAUG5GKtLoekid5vqkNXRU4+mlBwLGo2788Vbk0XSJFCtZQUDK20ajdWDDoPEYqv&#xA;/ROlf8sUH/IpP6Yqsj0XSI1KrZQULM28andmLHqPE4q46LpBlWQ2UHJVZR+7WlGIJ2p/kjFXS6Lp&#xA;EsTxvZQcXUq1I1BoRQ7gYqv/AETpX/LFB/yKT+mKqceh6TG8rC0hPquHIMaUFFVaDb/JriqD12HQ&#xA;dM02XU7iyg9Ky/esSiIAPsEsadArE5KEDIiIFkq8h03/AJyJ8pXevixk8spb6bLQQaizxFvjYqjS&#xA;w+kPTRuJ3LbdwO2fm0umhcBnic8ecaNX1jGfKUhtt1/hJp2n8iazw/E8OXDQl0ujdHh51sd6ey6b&#xA;p2jy6fbSJYwojRqVUojECmwJpvmudWrDRdIErSCyg5Mqqf3a0opJG1P8o4q6TRdIkUK1lBQMrbRq&#xA;N1YMOg8Riq/9E6V/yxQf8ik/piqnBoekxIVFpC1Xd6mNK/GxanTtWmKtnRdIMqyGyg5KrKP3a0ox&#xA;BO1P8kYq6XRdIlieN7KDi6lWpGoNCKHcDFV/6J0r/lig/wCRSf0xVYmi6QjOwsoKyNyasanfiF22&#xA;8FxVz6LpDsjGygrG3JaRqN+JXfbwbFV/6J0r/lig/wCRSf0xVTt9D0mGCOEWkLCNFQM0aVPEUqds&#xA;VbGi6QJWkFlByZVU/u1pRSSNqf5RxV0mi6RIoVrKCgZW2jUbqwYdB4jFUNrOkaadJveFtFE/oSFZ&#xA;Eij5AhSdqqRiqbYq7FXYqgolJ1i4cOSptoAE24/bmPLpX8cVS/6rPf63qEb3tzDFbiARRQOEUc0L&#xA;Mem5JxVVTRYpGdU1W8dozxkVbgEqaVo1BsaHBbIxIokc0t81ND5c8u3+uz3Gq3lvp0Rnnt7WaL1j&#xA;Gn22X1mhQ8FqxBfoNqmgJYpTZ+afL/qXUGu6jqPle8s3gjltdau7WAt9aDm3MUscs0Egk9GQDhIT&#xA;VWBG2KozTfMHkbU7xbKw84i4vnnmtY7RL+L1nntv75EiPxsUG5oOm/TFU/8A0B/2sr7/AJHf824q&#xA;79Af9rK+/wCR3/NuKu/QH/ayvv8Akd/zbirv0B/2sr7/AJHf824q79Af9rK+/wCR3/NuKrvLks8m&#xA;mH1pWmeK5u4RI9CxSG6liSpAFSEQDFWA/n3qsraDYeVbUgXfmO5ET8jxUW8FJJKt25P6a0puCcJy&#xA;yxwMoSEcnKPO7P8ANrqBZvatutO97A00J5jlyxM8OEcUqAPusHmPxyssETyF5fb65pAjUypZW5W8&#xA;bi04d5bg+oQFBFSP5twOO3HMI6KHBw9e/q3x9qNUNV49+nb0WeDhG1V+N93p35LeaF1jybBY3E3P&#xA;WNGraajGftKFd1hboKho0G/iDXL8c4H0wkZ8PUjhPycft7Qzw5vEMBjx5fVEA8Q89/jy5C9tmfZa&#xA;6N2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVB60rNo96quYyYJPjWlR8B/mDD8MVRmKuxV5Be/lz5x1D&#xA;8tX8mXVpbUmvL26+tG+LBDLfTXlqJIpbWdZ409SMSI3UA03pir0ywtZob/g828NnbRvHGiJEzKZQ&#xA;SFoWUeADbYqt07/jvav/ANG//Js4qxnyH+VqeU/MGr6uupy3v6TLBIXXjxVpPUrI3JvUeu3Kg7+O&#xA;Yen0nhyMru3pO2PaE63BjxcAh4fX4VttsPL9TIfOugXXmLynqmhWt3HYy6nbvam7lhNwqJL8Mh9J&#xA;ZICx4EhfjFDQ70ocx5thHmv8nde802942r+Z42v74JDOILF47IW0EU6wRrbG6Z+aTXTTc3marAfD&#xA;stFVWP8AKHVf8TWGsT6/HLb6dqNxqdtY/U3Cq93dSXMwVvrJUOwuHTnwrQJ4P6ir0zFXYq7FXYq7&#xA;FUq8s/8AHOm/5jtQ/wCo6bFXm99APMXn/wAy649JLLy1Db6Tp7ofhadystwSN6sjSFCdug8MhLEe&#xA;ISuJj0qV0eR4o9D3eR+XQZc4waCOECUZ5TxS4o16f4eGXWJ+O/d1CwsP09eLXcWtqSvOpAMlxvwp&#xA;t06139qbzefR3leWby/+a5sayfo7zXpsV5FFHGrRi7t0EbszbMgVIqmlQWkFfHLM0iRA9N47Q7t7&#xA;lPrd8IB6Rd1CEcuhkduPDIbmZvhltwwhy57k7fF6zlbpXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUD&#xA;rkbyaReBJWhIhkJZApJHA7fGrDFUdirsVdiqDjVv0zcNzPH6vAPT2415zb9K1+nFUNp3/He1f/o3&#xA;/wCTZxV1vrOoy3SQyaDfW8bNxNzI9iY1H8xEdy8lPktcyp6eAjYyQJ7vXf2wA+1Ch55ntYPJ2tT3&#xA;V21jDFZzObtJ3tGjYISrCeNo2Q8qbhhmKl5frH5z2ui+U9Eh8rapY6tcrYtJeXd1LPqKvdRW3qxa&#xA;ebhJuX1y7ZXVAzswI+weS4qh/wDldfnU3GnLH+h5oNQ1G9sjKRHbRxCzvVtvSaW41GNWnML+uFQM&#xA;zbAJRuaqoHTPz48xajbWVy2veXrYJA91qLxwySxJz0x7pYZEF00oeKWGSqqwZ6cdqElVZN+e3mKH&#xA;SWvk1DRLrXrnTrWezggWd7QSS3FyDFKgv2jqI40RniZiJj6YMh4jFWV+QPzgl8yebp9FvNS0eazm&#xA;h1CWCOwdkuYRaG0KCVzcS1Lx3coqqrvCzDuqqsb8pa9f2fl6011dajeyvdYtdLt7271vUNUjuBJf&#xA;yqeSS3EIgmijSNuCMyvHy58uXwKvV/yy1vUtc8g6Jq2p3cF7qF5bLJdz20Yij9Qkhk4B5KPGRwff&#xA;7QOy/ZCqtY6na6V5Z1HUrt/TtrO51OaVwpeipezkniNz8sjOQiCTyb9NglmyRxwFykaHRiPkTTZ4&#xA;PyqbUrxQNS12VtVvnAALPdXAda022QigGw7ZKh0MJf0ox4RLzqgb77F97sO28vFqDACcY4/SIylx&#xA;GNbEXZ2vzSiH/ju3n/MLa7cq/wC7Lj9im3zrv7U3XUJp+Ysf1DSPJ/msSywDQ72Bb2aD7a2V3xS4&#xA;7GtSiAr3HvTLhlAwzjPJLHDaWwviMfpifI8Xwdt2NjlkzHFHHHLPJCURxbcJq+IeYp6hHIkkayJu&#xA;jgMpIINCKjY75SC6qUSDRXYodirsVdirsVdirsVdirsVdirsVdiqD1pWbR71VcxkwSfGtKj4D/MG&#xA;H4YqjMVdirsVQcYk/TNweQ9P6vB8NDy5c5t+VentTFUC9vr1tq17c2dta3FvdCKhmuZIXVo1KkcV&#xA;gmFPfliqr9Z81f8AVusf+k6b/skxV31nzV/1brH/AKTpv+yTFXfWfNX/AFbrH/pOm/7JMVd9Z81f&#xA;9W6x/wCk6b/skxV31nzV/wBW6x/6Tpv+yTFXfWfNX/Vusf8ApOm/7JMVd9Z81f8AVusf+k6b/skx&#xA;V31nzV/1brH/AKTpv+yTFXfWfNX/AFbrH/pOm/7JMVYP+Zn6QtPIA0D1xBrPmTUGs4Ibdi6OuoXj&#xA;NLGZWWMhRDMamgr075PFKIyR4sng77S4eLcbgV5mhvsOZdv2PhJnLJ4XjQxwMpR4uHbvvy57My16&#xA;0gs/Kr2kC8YLeOGKJfBEdFUfcME5mRMjzLqHmcNf09eb7fVbWg5VNfUuP2abfOu/0ZFWd+YdCOvf&#xA;lpeaSi85rmwP1dTv+/RecP8AyUVcydHk4MoPEYdOIcwDsSPMA7NmHJwTEiBLhINHka6HyK/8r9dh&#xA;1vyLpN4lxNdTCBIruW5JMv1hFAlDMftUbbl3zEiYbiEjOIJAkRV11o97n9sabJi1EhkhHHI+rhjV&#xA;C+gplOSdY7FXYq7FXYq7FXYq7FXYq7FXYq7FUHrQkOj3ojYK/oSULAsPsHsCv68VRmKuxV2KoOMS&#xA;fpm4PIen9Xg+Gh5cuc2/KvT2piqMxV2KuxV2KuxV2KuxV2KuxV2KvOdfddc/OHy/pCTNLbaBbz6t&#xA;fWjLxjSfiIbZw23N/wDSK+C08SaW4MgAmRk4ZUI8HDfEJczxfw1Q5bm+63cRxHHoTOWKxklUcnFy&#xA;4eY4et78/wBTMPNX/HBuv+ef/JxcqdO8uhr+nrzfb6ra0HKpr6lx+zTb513+jFXrWh/8cez/AOMS&#xA;fqxVhP5UNJpt/wCaPKck6CLRtSlbTbEgCSO0uz9aRgerIfXp02PfpmXrp5J5BkyThOWSINR5xr0+&#xA;od+3Prz8nY6qGM4cc8eOcRVSlLeMpf0f1fqs9DzEdc7FXYq7FXYq7FXYq7FXYq7FXYq7FUHrQkOj&#xA;3ojYK/oSULAsPsHsCv68VSe+1rzdPcyDy9pVjd2dvI0U9xfXz2zO8bFZFijht7v7JFKyFd+1Nyqn&#xA;enXU91Zxzz2z2c7VEttIVLIysVI5KSGFRVSOo3xVE4qg4xJ+mbg8h6f1eD4aHly5zb8q9PamKozF&#xA;XYq7FXYq7FXYq7FXYq7FXYq82/Ky4bXvMvm7za0pnt57qPS9MkeP02W2tFMtAvWhNwBvuStcuGeU&#xA;sEYiYlC5SA4a4elE/wAX0/b8Bt+19NHTyhi4ODJGA4vVxCRO9+Xu/tMz81f8cG6/55/8nFyl1Dy6&#xA;Gv6evN9vqtrQcqmvqXH7NNvnXf6MVetaH/xx7P8A4xJ+rFWDX8i6D+dljcmONLTzVpxtZJ5GVP8A&#xA;SrNqjiT1Z1eKPj+1tT7OXSlHwhUI2Jbz4gDuPTHh5y3BOzt8MJZtJMeJM+F6o4xGRFfxSsbRrz/S&#xA;9Gyl1DsVdirsVdirsVdirsVdirsVdirsVQetCQ6PeiNgr+hJQsCw+wewK/rxV5tN5Zm1TzJf3Tap&#xA;Y+UhZ3kzTy6QzRarcJ6jMr3jyMsIV0o9HilBBqCuKvTrC+tL61S6s5hcWz8hHMu6vwYqSp6EVXYj&#xA;Y9RtiryLUYfzXuPIFtp1rbaqutxX+oz3Nz9YgjnktWmuxYRLL66mqmW1cg0XgjA/ylV6fpsepLeK&#xA;LuWN5lsrUXZVD8UoMvJlYFQBy7ccVTXFXYq7FXYq7FXYq7FXYq7FUk87eYI/L/lPVNXaUQyW0D/V&#xA;3ZS49dxwhBUdayMoyGSYiLJ4fM3t8t3O7M0ktRqIYxEzs7gEAkDc0TtytL/ys0iXS/IekxTnldXU&#xA;bX105+0Zb12uX5e4MtD8szdZnnlyXMiUgBG4/T6Rw7eRq+nuadX4fiy8MGMOI0JcwPP8fEpr5q/4&#xA;4N1/zz/5OLmK47y2An/EF6K7C0tTSp7yXHalB9/9qr1vQ/8Ajj2f/GJP1Yqwr86beS38v6f5mt4U&#xA;muvLGoQagFcVBiDcJFNATSrKxp0417ZkYImVwEIzlIeniPCInnxWeoFuz7KyAZeCc548cwYy4BZP&#xA;9Gutln8M0c0Mc0TrJHIodJEIZWVhUFWHUHscxgbddOJiSDsQgdK8yeXdYNNJ1Sz1E+ms9LSeKf8A&#xA;dOzIsn7tm+BmjYBulQfDCxQd7598i2OqHSL3zHpdrqqukbafNe28dwHkAKKYmcPVgwoKb1xVTvfO&#xA;tnY+ZrXQrywvYEvWkjttXdIxYvNFbG7eLn6nqgiFGbmY+GxXlyBGKpfH+Z+l3Glpq1jpmoXumtqD&#xA;6bLcxJbqY3WdbdZWilmjmZJHccRGjPTqoxVGeYfP+j6FrEGmXUFzK7rDLd3MCxtDaRXU/wBWgluC&#xA;zo4SSaqjgrUoSaKCcVam8/6RDfavp80Mseo6W3CGzkktUlvmNuboLZB51Dn01Jo5Qim9BviqW2/5&#xA;t6Ef0PNqFlc6Ppus6cdWi1XUZdPgtYbfkiKJ3+tMyuzTwhQqt/eL4NxVZfpmqaZqtjFf6Zdw39jO&#xA;CYLu2kSaFwCVJSRCytQgjY4qicVdirsVQOuLOdIvPRdUb0ZKl1LinA7UDJiry38zfNkenaiT5g8m&#xA;6FfyQeq2kT39w9zcmKIsUkEUenXPpcuJYL6njvsaKvXYCTBGWT0yVWqDopp0+jFV+KoOMSfpm4PI&#xA;en9Xg+Gh5cuc2/KvT2piqMxV2KuxV2KuxV2KuxV2KuxV51+bckmqXHl7yXEXA8wXytfqEHB7G0/f&#xA;TqX61BVTQdR1IHWeDPLHljKJ4ZCz9PEP6p7r6Ho7ns3Tw8HLmnESEI0PXwyEpcpAda7vvei5B0yU&#xA;+av+ODdf88/+Ti4q8uhb/c9eL4WtqeprvJcfs0oOnWuKvWtD/wCOPZ/8Yk/Virtc0q31bRr7S7gV&#xA;hvYJIH8QJFK1HuK1GEVe4sd3f5NuDNLFMTgeGUTYPcxT8pdSvb38vbS0f0rfVdJWTSrhSpcRz2ZM&#xA;NZYwY9zxDMobfsd8lkiRI3GOPqIxkJCIPIWCenx73O7WhEZzKM5ZIz9XHKJjxXzNHpaR6vp3nDyD&#xA;5bvz5dWPV9U13VJLrnBYcDHc3FvJNK0qxyOHSa4hSGNmp6YdQzNTlkHWM0n8l6Zeagup3dxqSXzG&#xA;OSSO21bVILXmgAottFcRwcfh3Hp0buNziqA1/wAk6pr2vGbUdSt5PLrQNbfopbaeK6VJVpMY76K7&#xA;j4NKeIZvSqEHFePJiVUgl/JSI6bJpCakkum3Gqy6tM9/FdX19E7Sh4jZXU9431eZF5K03Bi9akda&#xA;qptr/wCXWoa3q/1641aOKK6WC21e3htWX6xaWN695ZxRu07GF19RklejcwTRU2oqgb/8rvMEnnvU&#xA;/N1jr9taz6hA1mbZ7CWVfqzW/pCOU/XED8ZUjl5KqH4SvRsVSOP8g76xsrGDQdV0jRriDSv0VfX1&#xA;rofCe6PrRSG5d472MiWlsgDbspZ2VgxXgq9O8saTc6PoNnplzNBNJaIY1a0t/qkCxhj6UcUBknKL&#xA;HHxQVkYmlSa4qmmKuxV2KoPWhIdHvRGwV/QkoWBYfYPYFf14q8t/OvTdW1DUEhs9MluIl05y95bW&#xA;M15JUu37pnivbD0xQbbPUMwpxJDKvV7CRJbC2kQgo8SMpUAAgqCKAbU+WKq+KoOMyfpm4HEen9Xg&#xA;+Kp5cuc23GnT3riqMxV2KuxV2KuxV2KuxV2KuxV5z5bD+YPzZ17W5DysvLkK6PYry9VPrE1Jbh42&#xA;GyMECKyjffc9hOIywib4oxnX8Q4ZAdeHvBvcu51csUNJjxx4TkJMpekice6PEecTz+D0bIOmSnzV&#xA;/wAcG6/55/8AJxcVeXQt/uevF8LW1PU13kuP2aUHTrXFXrWh/wDHHs/+MSfqxVG4q838v+n5c/N3&#xA;W9EqI7LzJBHq9hGq1AnXklwpbqCxjaSnTft0ysCMZUCLP8Iib/rGXLfl+gcz0Oq49ToIZSJHwTwG&#xA;RkKr+GIjz2HX7T/D0jLHnnYq7FXYq7FXYq7FXYq7FXYq7FUHrRkGj3pjUM/oSUDEqPsHuA36sVeO&#xA;fnTomq69cGSzOk20/wBXudJlu7nU4YXje4aRLaGIvAzpLcIxMiVHIfBy25FV6v5S0ObRNDisJphP&#xA;MJJpnZE9NFNxM0xRE5PRU58R8R8cVTjFUHGZP0zcDiPT+rwfFU8uXObbjTp71xVGYq7FXYq7FXYq&#xA;7FXYq7FUl86eYovLnlXU9ZkIDWkDGAEFg0zfBCtBT7UjKOuQnIRFk19rm9naSWozwxRF8R76267n&#xA;ySr8p/Lr6H5HsIpx/p99y1C/bcEzXPx0YGlCkfFDQfs4wgIjYRH9W6PmOLffn+gcnJ7b1hz6mRuR&#xA;jD0x4uGwI9PTtzvv955svybqUp81f8cG6/55/wDJxcVeXQt/uevF8LW1PU13kuP2aUHTrXFXrWh/&#xA;8cez/wCMSfqxVG4q88/OOC7sLTRvOVkjyXHli8E80cZoWs5uKXKVFW+JVC7V2J2OCWSQFAy4TzHE&#xA;IRPdxE7VHnv8xzd52HHHknPDMR/eRoSMDMg/0QN7P47mf21xBc28VzbyLNbzoskMqEMro45KykdQ&#xA;QajCDbpZwlGRjIVIbEHoqYsXYq7FXYq7FXYq7FXYq7FXYqg9aMg0e9Mahn9CSgYlR9g9wG/VirDd&#xA;V/KeC+1K/vxqIV7hLlbCKW2jlS2kvz/pc5AKGaUr8ETOf3afDQ4qz1EVEVF+yoAFSSaD3OKt4qg4&#xA;zJ+mbgcR6f1eD4qnly5zbcadPeuKozFXYq7FXYq7FXYq7FXYq8087D/Fvn3RvJ8aiXTdIddX100q&#xA;KqCsEJYVILcySppUEEHMeZ4sgjVgb3vselEHn79npuzh+V0WTUmRjPJ+7gNtxzmSJD6eQsddnpeZ&#xA;DzLsVSnzV/xwbr/nn/ycXFXl8J/3O3gqNrW1NKtXeS47U4j6DXx7VVes6H/xx7P/AIxJ+rFUbiqF&#xA;1XTbXVNNudPukWS3uo2ikVgGFGFK0Ph1yMoiQot2nzyxZIzialE2wb8n9Xmhsr/yZqMjNqnliUwI&#xA;ZaB5bNiTbyU5P9lfhoCeI4775Xp5kxo847Hl8DQ5bch5O79odNHxI6jH/d548XXaX8Qs/Vvve3Pk&#xA;9Dy5552KuxV2KuxV2KuxV2KuxV2KoPWjINHvTGoZ/QkoGJUfYPcBv1YqjMVUL+S7jsLmSzjEt2kT&#xA;tbxNsGkCkop3Gxb3xV42nnX8zZPy5ulZ7uDzY06HTp302ZZZoEghlnjAWznt45Tcetbx+pFQ0Xue&#xA;RVer6e92b795HxrZ2xm9VwZVestQQi8Ca9SDTwxVNMVdirsVdirsVdirsVSXzl5psvK/l271m7+I&#xA;QqFggqA0sz7Rxr8z1p0FT2yvLlEImRc/szs+erzxxR68z3DqUh/Kfyvd6Zokus6ujf4j19zeak0l&#xA;SyhmJhiAO6hUNSp3BJHYUq02IAcVVKW5dj7Q68Zcow4yDgwjhjWwPfL4nryPPqzjMl592KpT5q/4&#xA;4N1/zz/5OLiry6Gn6evN9/qtrUcmJ/vLj9kjiPmDU9+gxV61of8Axx7P/jEn6sVRuKuxV5X+adpe&#xA;eV/MGmfmNpMHNbQ/VvMMKGjTWr0VSV2BI6Vr9rh1AzGnWPIJ0Kl6Se7z/XfR6vsaY1emnopyN/Xi&#xA;/rC7j378xX9L49NsL+z1CxgvrKVZ7S6jWaCZejI45KRXxBzKlEg0XlpRMSQRRCvgYuxV2KuxV2Ku&#xA;xV2KuxV2KoHXGnGkXnoort6MlQ7FBTgd6hXxVHYq7FXYqg42b9M3C8Dx+rwH1NuNec23WtfoxVGY&#xA;q7FXYq7FXYq7FVO4uILaCS4uJFhghUySyyEKiIoqzMx2AAxJZQgZERiLJeUacl1+aPm2PWJ0ePyN&#xA;oUp/RsMigC9uV2MrK25Ue42G2xLZrxeed/5OP+yL2mbh7I0xxijrMw9R/wBTj3e/8bgB63mweJdi&#xA;rsVSnzV/xwbr/nn/AMnFxV5dDT9PXm+/1W1qOTE/3lx+yRxHzBqe/QYq9a0P/jj2f/GJP1YqjcVd&#xA;iqG1PTbLU9PuNPvolntLpGimibcFWFPv8DkZxEhR5Fu0+eeGYyQNSibDyHyZrN9+W3mc+SPMUldA&#xA;vpGk0HUyCI0aRv7tidgrMfi3+FjU/C1RVpshFYZ/UPoP84fzf6w6d/0/zQer7X0sNfh/Paceof3s&#xA;OoP86u49fn/Ors+XvHOxV2KuxV2KuxV2KuxV2KoPWmZdHvWVDIRBJ8C0qfgP8xUfjiqMxV2KuxVB&#xA;xs36ZuF4Hj9XgPqbca85tuta/RiqMxV2KuxV2KuxVB6xrOl6Np8uo6pcpaWUArJNIaD5AdWY9lG5&#xA;7ZCc4xFyNByNLpcmfIMeOJlM9B+Pt5PKbiXzD+bl59XthPo/5fwPWa4YcJ75l7KDyUqrDbsOpq1A&#xA;MAynqDQ9OPv6n8fjueyhDB2LDinw5daeUeccfv8AP+wbbnrWnadY6bYwWFhAltZ26hIYYxRVUf57&#xA;nvmwjERFDk8VnzzyzM5nilLmURkmp2KuxVKfNX/HBuv+ef8AycXFXl0NP09eb7/VbWo5MT/eXH7J&#xA;HEfMGp79Bir1rQ/+OPZ/8Yk/ViqNxV2KuxVIPO/kvSPN+hyaVqIKmvO2uVALwygbOteo7MO4+/Kc&#xA;+EZI0f7HZ9ldq5dFmGSG/SUekh3F5x5Y8/a/5D1OHyj+YAJsqcdL14EshjBookbqyduX2k/aFNxH&#xA;FqbPBl9OTpLpP9UvM7HrR+rfa/sXFq8Z1Wg3j/Hj/igfId3kP82xsOxwTwXEEc9vIs0Eqh4pY2DI&#xA;ysKhlYVBBHfMginjyCDRX4odirsVdirsVdirsVQetMy6PesqGQiCT4FpU/Af5io/HFUZirsVdiqD&#xA;jZv0zcLwPH6vAfU2415zbda1+jFUZirsVdiqD1TWdI0mBZ9UvYLGFjxWS4kSJS3gC5GQnOMdyab9&#xA;PpcuY8OOMpn+iCfuedan+dkd/O2m+RNKuPMGpbD1/SdLWMFuId/svxr1J4j/ACswpa8S2xgyP2PV&#xA;af2TOIDJrckcOPuscR8h0v5nydpf5Vaxr19FrX5i6i2ozoxkg0OE8bOGv7JoaN2qF60+JmxhpJTP&#xA;FlN+XRdR7RYdNA4dBDgHI5D9cv1fH4CL0+KKKKNYokWOJAFRFAVVUbAADYDNgBTx8pGRsmyV2KHY&#xA;q7FXYqlPmr/jg3X/ADz/AOTi4q8uhYnXrxK7C1tSByYjeS4/YPwjp1G579Bir1rQ/wDjj2f/ABiT&#xA;9WKo3FXYq7FXYqlvmDy5ovmHTm07WLVbuzZg/psWUhl6MrKVZT8jleTFGYqQsOXotdm0uTxMUuGX&#xA;479nlZ8l/mZ+Xkrz+TLs655fDFn0W5+KRQSSxRRx3qTvEQSeqnMcHNhFD95j7j9Q9x/RuO4PVHW9&#xA;ndp/4wPy+oP8cfokf6Q/X/pmQeWfz08n6rILPVeegampCyW99tEH3JAnoFAFP92BMnDWYpbXR7jt&#xA;+z7XX672U1mEcUB4uPoYb/Zz+VjzehwTwXEKT28izQSqHjljYMjKdwVYbEHMkh5sgg0V+KHYq7FX&#xA;Yq7FUHrTMuj3rKhkIgk+BaVPwH+YqPxxVGYq7FXYqlGpaxYaRPqF/qMn1ewtbSCSe6bdVHqSinFa&#xA;uTv2XIzmIizyDfptPkz5BjxjinLkGDt/zkF5RllaHTNO1TUpqfALe3Ug+HVw/X/JzB/lKB5CReqH&#xA;sVqoi8k8WMecv2V9qxvzG/NTU+SaH5EltWHSXU5DGKVH7Egtvfo5wfms0vpx/P8AASOwuzcO+bVi&#xA;XlAX9o4/ucPLX5462C+p+Y7TQYJB/vLYR+pIhr0LUU/dKcfC1E+chH3fj9KnX9jafbHhnmI6zNA/&#xA;j+qEVpP5E+U4pRea7NdeYNSYVnnvJW4M/chFPL6HdslDs+A3lcj5tOp9sNVIcGERwY+giN69/wCo&#xA;B6Bp+nWGnWkdnYW8draxCkcEKhEX5KtBmbGIiKAoPMZs88sjOZMpHqdyiMk1OxV2KuxV2KuxVKfN&#xA;X/HBuv8Ann/ycXFXl0LE69eJXYWtqQOTEbyXH7B+EdOo3PfoMVetaH/xx7P/AIxJ+rFUbirsVdir&#xA;sVdirsVSjzB5R8teYoRFrOnQ3gAokjrSRR/kSLR1+g5Vkwwn9QtztF2nqNKbwzlH7viORYA/5GS6&#xA;VI8/k7zNf6K7nm8DMZInYfZDcDF8I/yg2Yv5OUf7uch5cx8npB7Vwz7avBjy9OIbS+e/2GLmuf8A&#xA;nILQlJlh07zNEWFWjAilC+wX6qO/8rfdgEtTDmBMeWx/HwXwuxNR9MsmnPnvH/fH7Qqj84tf0yQx&#xA;+Z/JWpWSx7Pc2g+sRk0/ZJWNKfKQ4/nZR+uEh7t0H2Xw5t9NqcU76S9J/SfsCJsP+cgfy6uCVuZ7&#xA;rTmHVbm3cmv/ADw9bDHtLEedj4NWb2L18fpEZ/1ZD/fcKe2f5rfl1dorRa/aKGNB6zmA/SJQhH05&#xA;dHWYj/EHW5fZzXwNHDP4er7rTaDzZ5WuHCQazYyuTQKlzCxqfYNlozQPIj5uFPs3UxFyxzH+bL9S&#xA;tq1wjaLeyQ/vwIJKCMqa/Ae5IH45MFxJRI2IpH4WLsVdiqWXsHq3VzFcWBvbK5t4o5EIhaNqNJyR&#xA;klda7MO1MBAIos8eSUJCUSRIciNiqLdXEKwwwaXKsK0TirW6rGiqacVEnTYCgwgUxlIyNnclV+u3&#xA;P/LBP/wUH/VXFCyK+vGiRpNOnSQqC6c4G4kjcV9TemKtLfX/AK7g6fN6IVSjcoKliW5A/vfDjirc&#xA;l9eKoKadO55KCOcA2LAMf7zsN8VX/Xbn/lgn/wCCg/6q4qsjvrxlJfTp0PJgBzgOwYhT/edxvirj&#xA;fXnqqo06cxlSWfnBsQRQU9TvU/dirpb68WJ2j06d5ApKJzgXkQNhX1Nq4qv+u3P/ACwT/wDBQf8A&#xA;VXFVOO+vy8ok0+YIGAhIaCpXipqf3v8ANXFUFr7aleaY9rbadMzysoJZ4FChTyr/AHm/2aYqwqPy&#xA;l5oXVLic2DehJBBGn7+I/Gjyl/g58V2dfiG579BirO9Imv4NLtYZ9OmSaOJFkQPAwDAbivqb4qiB&#xA;fXnqsp06cRhQVfnBuSTUU9TtQffirpL68VQU06dzyUEc4BsWAY/3nYb4qv8Artz/AMsE/wDwUH/V&#xA;XFVOG+vyhM2nzK/JwAGgpxDEIf709VpXFWzfXnqqo06cxlSWfnBsQRQU9TvU/dirpb68WJ2j06d5&#xA;ApKJzgXkQNhX1Nq4qv8Artz/AMsE/wDwUH/VXFViX14WcNp06hWoh5wHkOINf7zbckYq5768DIF0&#xA;6dgzUc84BxHEmv8Aeb7gDFV/125/5YJ/+Cg/6q4qgpYkv7WJdU0T6xIVBkjkW2kUOR8QHKRsjKAP&#xA;MNuLUZMZuEjH3EhJbnyL5MupJFm8nW4RlH72OK0jYkk8h+7dSKUG9e+VHS4j/CHY4+3tdDlmyf6Y&#xA;n70ouPyc/Lsx0j8qT8qqtVu2UgFgC29yRsN/fKj2fh/m/aXOj7XdpA/3v+xh/wASjfL/AOXui+WI&#xA;tTfQtOvllv7doWilnhdOhpQGXrU9Tk8GlhiJMeridqdvajXRjHNwnh7hRZ3mS6Z2KuxV2KuxV2Ks&#xA;U/NDVNW0vyTqF7pN3NZ6jGqi1mtrQ30vqMeKAQhJvhLEc29NuK1IFaYq821jzp+b8Y1OfSRd3lgW&#xA;WSzuf0cVeOYWl4Usvq0tvFNSW9hto3J9Tir1Eo5fAq9yhMphQyqFlKgyKDUBqbgH54quxV2KuxV2&#xA;KsM/NXW9Z0fy/bXOkXdxaXj3sEQNtYPqJdWJLpJHGkrJHxBLMFrtxUgmuKvP5fPn53S+Yp4m0K80&#xA;2zXUo47a3e2guEKSJZFLZ5rdriqcJbmSSYMoUgfEtGQKvc8VdirsVdirsVYV+Ymu6zpWo+WV026u&#xA;YUutRWO+trfT5L5ZrcFTIsskaSGAcaqp+H42UluCvirBPJfmz845/NGm2uqrcXOmXNzRrtrMJbXE&#xA;DLO00qH6tazW8cCpCI1moxdmBMnw4q9wxV2KuxV2KuxV5v8AmN5o846R5ms4fLpnvHbTL64GjCwl&#xA;mt57iKGQ24e8jRvTdpQvFeajirA1Z0oqlfkDzd+Zmpebra11e1uU0hluEaSe2CRTQQlxHfLKILco&#xA;00qhUifiRGQSpPxlV65irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirzjW/wA1Nb0jzFca&#xA;VcaJZi3g1XTdMF0+pOjtDqtRBc+l9UNKMpUpz+0D8XEcsVVtO/Nu1dNX/SlvDZT2DxR2VvC99dvd&#xA;G5luI7Z1VLFCyTC0LqYPVIHLkF47qpNpX/OQ+h3ttolzNptxbQX3BdXk4XUotHm02TUohD6ds31v&#xA;4IuLcOLLUNQjFWVedPzDi0LSY7zTLMaxcT2F3q0MPrfV4/qNjCss0zS8JSB+9jRQEJLOO1SFUt1X&#xA;839Ms5dEnjNhHourPPDLq+pXr6fBFNBCJaRPLbtHcI1eIkSTiWqBWhxVS8u/nLY6tp9pG1oo8xan&#xA;636I020N5d2lw0QcoP0kLOO3TmsZc1+ytGOKs28u65Z69olnq9mGWC8jDiOQUdGB4vG43+JHBVvc&#xA;YqmOKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsP83/lb5d81&#xA;ajJqGozXUVw9l9RH1eREVCrtJDcqGR/38Bkk9JjUDm3wnFUHeflBpM+pR6jDrGqWVzbR2EVibd7U&#xA;C3GmxTwwmPnbyMxaO8nV/ULV5npReKqVWX/OP+h2Fnb2ll5j1qCO2KtEQdOYhksX02vx2TDe0kMZ&#xA;2/yvtb4qmfmH8sJb7TNI0+y1OZUs9PuNAv7iUwrcS6VeiFZ+LLC0Szr9WjKn0qHcbE8gqu0T8o7H&#xA;RZNMNlr+qiLSZbmezt2+oGJWvIwkwCi0HFCeThU4gMxoKUAVQ9l+Uk2jXEepaV5j1S61KygeKytr&#xA;57JbV+U5ujHI0FkssccsxHq+iVLqApqABirLvKegL5f8vWWkiX13t1Yzz04+pNK5lmcLvxDSOxAr&#xA;t0xVNsVdirsVdirsVdirsVdirsVdirsVf//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:374AEA052240DE11AC91D52DFC338480</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:456C97C30041DE11AC91D52DFC338480</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>True</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPS-ItalicMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.00.3x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times New Roman Italic.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.0d6e5</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPSMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.3x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times New Roman.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -207.68 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 207.68 li
319.473 207.68 li
319.473 0 li
cp
clp
[1 0 0 1 0 0 ]ct
170.973 176.499 mo
157.473 176.499 li
157.473 5.499 li
170.973 5.499 li
170.973 176.499 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.262745 0.207843 0.211765 0 cmyk
f
39.8574 169.582 mo
39.9824 169.519 li
39.5352 168.625 li
39.5352 169.625 li
39.5977 169.625 li
39.7227 169.625 li
39.8217 169.625 li
40.1833 169.553 li
40.7597 169.495 li
40.7882 169.492 li
41.9897 169.302 li
44.4297 168.99 li
49.7664 168.111 li
54.7176 167.233 li
59.5543 166.291 li
64.8381 165.096 li
69.7435 163.775 li
75.0967 162.201 li
80.3322 160.308 li
85.2571 158.288 li
90.5649 155.697 li
95.6471 152.802 li
95.8048 152.645 li
95.8673 152.582 li
95.1602 151.875 li
95.6074 152.769 li
95.7324 152.707 li
95.7665 152.69 li
96.1121 152.482 li
96.7371 152.107 li
96.7628 152.092 li
97.9837 151.257 li
100.497 149.452 li
100.617 149.332 li
100.68 149.27 li
99.9727 148.563 li
100.527 149.395 li
100.715 149.27 li
100.751 149.245 li
101.079 148.983 li
101.748 148.496 li
101.757 148.49 li
103.106 147.462 li
105.598 145.274 li
105.607 145.269 li
105.753 145.197 li
105.93 145.02 li
106 144.95 li
106.094 144.809 li
106.285 144.656 li
106.307 144.638 li
106.954 144.056 li
106.974 144.038 li
108.189 142.823 li
110.635 140.252 li
109.91 139.563 li
110.357 140.457 li
110.482 140.394 li
110.628 140.322 li
110.805 140.145 li
110.992 139.957 li
111.024 139.925 li
111.351 139.533 li
112.037 138.785 li
113.375 137.191 li
116.073 133.723 li
116.18 133.51 li
115.285 133.063 li
115.732 133.957 li
115.857 133.894 li
116.156 133.745 li
116.395 133.267 li
116.658 132.899 li
117.348 131.958 li
118.681 130.054 li
121.282 125.929 li
121.367 125.76 li
121.389 125.715 li
121.523 125.537 li
121.548 125.504 li
121.883 124.967 li
121.902 124.937 li
122.474 123.857 li
123.724 121.669 li
126.208 116.956 li
126.296 116.691 li
126.324 116.608 li
126.455 116.389 li
126.484 116.341 li
126.813 115.618 li
127.5 114.244 li
128.826 111.339 li
131.472 105.04 li
131.546 104.816 li
131.609 104.629 li
131.727 104.275 li
132.029 103.49 li
132.655 101.925 li
133.913 98.5903 li
136.361 91.5611 li
141.684 74.2135 li
146.877 54.8165 li
151.76 36.099 li
151.81 35.8486 li
151.901 35.6214 li
151.935 35.5361 li
152.068 34.8743 li
152.435 33.7124 li
153.063 31.2599 li
154.347 26.7383 li
154.43 26.5722 li
154.489 26.4524 li
154.562 26.088 li
154.721 25.6636 li
154.737 25.6224 li
155.059 24.4613 li
155.677 22.3621 li
156.961 18.5087 li
157.055 18.3222 li
157.086 18.2587 li
157.171 18.0037 li
157.178 17.9831 li
157.297 17.5674 li
157.593 16.7965 li
158.227 15.1502 li
158.254 15.0683 li
158.305 14.9922 li
158.379 14.8808 li
158.535 14.4134 li
158.827 13.7118 li
159.438 12.3684 li
159.492 12.2597 li
159.524 12.1962 li
159.574 12.0454 li
159.705 11.827 li
159.714 11.8128 li
160.034 11.2356 li
160.079 11.1544 li
160.149 10.9462 li
160.18 10.8847 li
159.285 10.4375 li
160.085 11.0375 li
160.273 10.7875 li
160.314 10.7329 li
160.659 10.1106 li
160.67 10.0916 li
160.742 9.94721 li
160.805 9.82221 li
160.908 9.61469 li
161.196 9.155 li
160.348 8.625 li
160.795 9.51943 li
160.92 9.45693 li
161.218 9.30785 li
161.402 8.94038 li
161.483 8.81823 li
161.738 8.46103 li
161.742 8.45711 li
161.867 8.33211 li
161.992 8.20711 li
162.107 8.09236 li
162.242 7.82221 li
161.348 7.375 li
162.055 8.08211 li
162.117 8.01961 li
161.41 7.3125 li
161.965 8.14455 li
162.152 8.01955 li
162.373 7.87223 li
162.555 7.50971 li
161.66 7.0625 li
162.367 7.76961 li
162.43 7.70711 li
161.723 7 li
162.277 7.83205 li
162.465 7.70705 li
162.501 7.68292 li
162.847 7.40587 li
162.891 7.37129 li
162.992 7.26961 li
162.285 6.5625 li
162.285 7.5625 li
162.348 7.5625 li
162.762 7.5625 li
163.18 7.14461 li
162.473 6.4375 li
162.92 7.33193 li
163.045 7.26943 li
162.598 6.375 li
162.598 7.375 li
162.66 7.375 li
163.074 7.375 li
163.492 6.95711 li
162.785 6.25 li
162.785 7.25 li
162.848 7.25 li
163.084 7.25 li
163.42 7.08193 li
162.973 6.1875 li
162.973 7.1875 li
163.035 7.1875 li
163.449 7.1875 li
163.805 6.83211 li
163.098 6.125 li
163.098 7.125 li
163.16 7.125 li
163.574 7.125 li
163.93 6.76961 li
163.223 6.0625 li
163.223 7.0625 li
163.348 7.0625 li
163.41 7.0625 li
163.824 7.0625 li
164.18 6.70711 li
163.473 6 li
163.473 7 li
163.535 7 li
163.598 7 li
163.723 7 li
163.785 7 li
163.848 7 li
163.91 7 li
164.324 7 li
164.68 6.64461 li
163.973 5.9375 li
163.525 6.83193 li
163.65 6.89443 li
163.862 7 li
164.16 7 li
164.223 7 li
164.285 7 li
164.41 7 li
164.473 7 li
164.535 7 li
164.535 6 li
163.828 6.70711 li
163.891 6.76961 li
164.183 7.0625 li
164.66 7.0625 li
164.785 7.0625 li
164.785 6.0625 li
164.078 6.76961 li
164.141 6.83211 li
164.433 7.125 li
164.91 7.125 li
164.91 6.125 li
164.203 6.83211 li
164.266 6.89461 li
164.558 7.1875 li
164.873 7.1875 li
164.906 7.19868 li
165.223 6.25 li
164.516 6.95711 li
164.578 7.01961 li
164.641 7.08211 li
164.807 7.24903 li
165.219 7.38618 li
165.535 6.4375 li
164.828 7.14461 li
164.891 7.20711 li
164.953 7.26961 li
165.068 7.38436 li
165.338 7.51943 li
165.463 7.58193 li
165.91 6.6875 li
165.203 7.39461 li
165.266 7.45711 li
165.453 7.64461 li
165.516 7.70711 li
165.578 7.76961 li
165.766 7.95711 li
165.828 8.01961 li
165.943 8.13436 li
166.213 8.26943 li
166.66 7.375 li
165.828 7.9297 li
165.953 8.1172 li
165.962 8.13058 li
166.284 8.58124 li
166.428 8.78334 li
166.775 8.95693 li
167.223 8.0625 li
166.328 8.50971 li
166.391 8.63471 li
166.431 8.71528 li
166.666 9.02822 li
166.946 9.42024 li
167.563 10.4688 li
167.669 10.6279 li
167.703 10.6972 li
167.72 10.7316 li
167.908 11.044 li
168.195 11.6181 li
168.846 13.0499 li
168.941 13.1933 li
168.961 13.2537 li
168.984 13.3212 li
169.188 13.7291 li
169.482 14.4342 li
170.08 15.9894 li
170.128 16.18 li
170.169 16.3481 li
170.316 16.5683 li
170.399 16.8162 li
170.402 16.8258 li
170.718 17.7113 li
171.337 19.4436 li
172.516 23.1669 li
174.964 31.5146 li
175.073 31.7861 li
175.117 32.0086 li
175.126 32.0548 li
175.322 32.7085 li
175.633 33.887 li
176.32 36.3244 li
177.63 41.376 li
180.255 51.5641 li
185.447 71.146 li
190.32 87.5139 li
190.378 87.7425 li
190.404 87.849 li
190.529 88.0991 li
190.628 88.4925 li
190.635 88.5206 li
190.96 89.5617 li
191.651 91.5719 li
192.967 95.4584 li
195.578 102.545 li
195.628 102.743 li
195.669 102.911 li
195.816 103.131 li
195.899 103.379 li
195.906 103.4 li
196.227 104.234 li
196.232 104.247 li
196.859 105.751 li
198.052 108.766 li
200.57 114.306 li
200.609 114.384 li
200.649 114.504 li
200.658 114.532 li
200.794 114.871 li
200.81 114.91 li
201.141 115.572 li
201.766 116.822 li
202.962 119.214 li
205.399 123.652 li
205.453 123.76 li
205.516 123.885 li
205.533 123.919 li
205.732 124.25 li
206.036 124.798 li
206.042 124.809 li
206.679 125.891 li
208.006 128.04 li
210.695 132.074 li
210.828 132.207 li
210.883 132.262 li
210.953 132.367 li
210.962 132.381 li
211.284 132.831 li
211.917 133.718 li
213.124 135.305 li
215.604 138.358 li
215.703 138.457 li
215.758 138.512 li
215.828 138.617 li
215.883 138.699 li
216.296 139.112 li
216.892 139.828 li
216.914 139.854 li
218.257 141.261 li
220.953 143.957 li
221.016 144.02 li
221.078 144.082 li
221.148 144.152 li
221.289 144.246 li
221.442 144.437 li
221.493 144.501 li
222.179 145.118 li
222.19 145.128 li
223.455 146.204 li
225.924 148.241 li
225.953 148.27 li
226.016 148.332 li
226.141 148.457 li
226.228 148.544 li
226.588 148.76 li
227.16 149.218 li
227.176 149.231 li
228.391 150.126 li
230.841 151.822 li
231.41 151 li
230.703 151.707 li
230.766 151.77 li
231.058 152.063 li
231.535 152.063 li
231.535 151.063 li
230.98 151.895 li
231.132 151.995 li
231.41 152.218 li
231.479 152.273 li
232.22 152.677 li
233.524 153.484 li
236.184 155.005 li
241.107 157.529 li
246.478 159.867 li
251.712 161.759 li
256.626 163.334 li
261.911 164.781 li
266.879 165.976 li
271.72 166.982 li
276.99 167.923 li
281.883 168.738 li
287.277 169.5 li
287.41 169.5 li
288.473 169.5 li
288.473 167.5 li
287.41 167.5 li
287.348 167.5 li
287.348 168.5 li
287.487 167.51 li
282.188 166.762 li
277.33 165.952 li
272.1 165.018 li
267.317 164.024 li
262.409 162.844 li
257.195 161.416 li
252.358 159.866 li
247.218 158.008 li
241.963 155.721 li
237.136 153.245 li
234.547 151.766 li
233.225 150.948 li
232.591 150.602 li
232.347 150.407 li
232.314 150.38 li
232.09 150.23 li
231.838 150.063 li
231.473 150.063 li
231.473 151.063 li
232.18 150.355 li
232.117 150.293 li
232.053 150.229 li
229.554 148.498 li
228.395 147.644 li
227.785 147.157 li
227.732 147.115 li
227.468 146.956 li
227.43 146.918 li
227.367 146.855 li
227.305 146.793 li
227.271 146.759 li
224.74 144.671 li
223.506 143.622 li
222.952 143.124 li
222.754 142.875 li
222.657 142.754 li
222.34 142.543 li
221.785 143.375 li
222.492 142.668 li
222.43 142.605 li
222.367 142.543 li
219.688 139.864 li
218.407 138.521 li
217.803 137.797 li
217.775 137.763 li
217.437 137.425 li
217.367 137.32 li
217.312 137.238 li
217.117 137.043 li
217.091 137.017 li
214.697 134.07 li
213.528 132.532 li
212.911 131.669 li
212.608 131.244 li
212.492 131.07 li
212.437 130.988 li
212.242 130.793 li
212.18 130.73 li
211.473 131.438 li
212.305 130.883 li
209.689 126.959 li
208.392 124.859 li
207.779 123.817 li
207.472 123.264 li
207.464 123.25 li
207.287 122.956 li
207.242 122.865 li
207.18 122.74 li
207.171 122.723 li
204.733 118.285 li
203.555 115.928 li
202.93 114.678 li
202.636 114.09 li
202.537 113.843 li
202.484 113.684 li
202.461 113.616 li
202.375 113.444 li
199.893 107.984 li
198.711 104.998 li
198.089 103.503 li
197.789 102.725 li
197.671 102.371 li
197.629 102.244 li
197.526 102.089 li
197.505 102.007 li
197.492 101.955 li
194.853 94.7915 li
193.545 90.9292 li
192.86 88.9381 li
192.561 87.9793 li
192.443 87.5075 li
192.416 87.4009 li
192.291 87.1509 li
192.255 87.0075 li
192.25 86.9861 li
187.373 70.6042 li
182.191 51.0625 li
179.566 40.8755 li
178.25 35.8011 li
177.563 33.3624 li
177.248 32.1661 li
177.069 31.5702 li
177.016 31.3039 li
176.998 31.2139 li
176.856 30.8605 li
174.429 22.5834 li
173.233 18.8063 li
172.602 17.0387 li
172.293 16.1735 li
172.171 15.8088 li
172.129 15.6817 li
172.026 15.5269 li
172.005 15.445 li
171.99 15.3857 li
171.339 13.6911 li
171.021 12.9279 li
171.007 12.8959 li
170.836 12.5539 li
170.796 12.4338 li
170.754 12.3067 li
170.6 12.075 li
170 10.7568 li
169.68 10.1153 li
169.662 10.0809 li
169.475 9.76847 li
169.43 9.67779 li
169.402 9.6221 li
169.258 9.40607 li
168.625 8.32975 li
168.286 7.85626 li
168.279 7.84664 li
168.139 7.6597 li
168.117 7.61529 li
167.968 7.31714 li
167.767 7.21664 li
167.608 6.9943 li
167.492 6.8203 li
167.345 6.59932 li
166.982 6.41807 li
166.535 7.3125 li
167.242 6.60539 li
167.18 6.54289 li
166.992 6.35539 li
166.93 6.29289 li
166.867 6.23039 li
166.68 6.04289 li
166.617 5.98039 li
166.502 5.86563 li
166.232 5.73057 li
166.107 5.66807 li
165.66 6.5625 li
166.367 5.85539 li
166.305 5.79289 li
166.242 5.73039 li
166.075 5.56347 li
165.664 5.42632 li
165.348 6.375 li
166.055 5.66789 li
165.992 5.60539 li
165.93 5.54289 li
165.763 5.37597 li
165.351 5.23882 li
165.197 5.1875 li
164.973 5.1875 li
164.973 6.1875 li
165.68 5.48039 li
165.617 5.41789 li
165.324 5.125 li
164.848 5.125 li
164.848 6.125 li
165.555 5.41789 li
165.492 5.35539 li
165.199 5.0625 li
164.66 5.0625 li
164.598 5.0625 li
164.598 6.0625 li
165.305 5.35539 li
165.242 5.29289 li
164.949 5 li
164.473 5 li
164.41 5 li
164.285 5 li
164.223 5 li
164.16 5 li
164.098 5 li
164.098 6 li
164.545 5.10557 li
164.42 5.04307 li
163.775 4.72074 li
163.203 5.29289 li
163.91 6 li
163.91 5 li
163.848 5 li
163.785 5 li
163.723 5 li
163.598 5 li
163.535 5 li
163.473 5 li
163.058 5 li
162.703 5.35539 li
163.41 6.0625 li
163.41 5.0625 li
163.348 5.0625 li
163.223 5.0625 li
162.808 5.0625 li
162.453 5.41789 li
163.16 6.125 li
163.16 5.125 li
163.098 5.125 li
162.683 5.125 li
162.328 5.48039 li
163.035 6.1875 li
163.035 5.1875 li
162.973 5.1875 li
162.737 5.1875 li
162.4 5.35557 li
162.848 6.25 li
162.848 5.25 li
162.785 5.25 li
162.371 5.25 li
161.953 5.66789 li
162.66 6.375 li
162.66 5.375 li
162.598 5.375 li
162.362 5.375 li
162.025 5.54307 li
161.88 5.61564 li
161.641 5.85539 li
162.348 6.5625 li
162.348 5.5625 li
162.285 5.5625 li
161.871 5.5625 li
161.555 5.87872 li
161.319 6.06709 li
161.168 6.16795 li
161.086 6.22287 li
160.953 6.35539 li
160.838 6.47017 li
160.703 6.74029 li
161.598 7.1875 li
161.043 6.35545 li
160.855 6.48045 li
160.773 6.5354 li
160.641 6.66789 li
160.526 6.78267 li
160.463 6.90769 li
160.453 6.91789 li
160.328 7.04289 li
160.266 7.10539 li
160.207 7.16387 li
159.846 7.66876 li
159.837 7.68223 li
159.703 7.8828 li
159.669 7.93459 li
159.578 8.11529 li
160.473 8.5625 li
160.025 7.66807 li
159.9 7.73057 li
159.649 7.85641 li
159.187 8.595 li
159.162 8.63538 li
159.016 8.92779 li
158.953 9.05279 li
158.9 9.1585 li
158.632 9.64214 li
158.485 9.8375 li
158.431 9.90962 li
158.328 10.1153 li
158.296 10.1789 li
158.241 10.3456 li
157.982 10.8123 li
157.803 11.1105 li
157.746 11.2046 li
157.671 11.4288 li
157.641 11.4903 li
157.633 11.5065 li
156.993 12.9131 li
156.675 13.6779 li
156.66 13.7116 li
156.566 13.9942 li
156.516 14.0703 li
156.441 14.1817 li
156.344 14.4747 li
155.727 16.0785 li
155.414 16.891 li
155.398 16.9326 li
155.267 17.3921 li
155.234 17.4913 li
155.141 17.6778 li
155.109 17.7413 li
153.768 21.7633 li
153.136 23.9131 li
152.833 25.0025 li
152.661 25.4614 li
152.633 25.537 li
152.581 25.7976 li
152.516 25.9278 li
152.474 26.0118 li
151.132 30.7391 li
150.511 33.1629 li
150.128 34.3757 li
150.01 34.9639 li
149.919 35.1911 li
149.885 35.2764 li
149.81 35.6508 li
144.944 54.3055 li
139.761 73.6616 li
134.46 90.9385 li
132.032 97.9091 li
130.791 101.2 li
130.167 102.76 li
129.852 103.579 li
129.844 103.6 li
129.711 103.996 li
129.649 104.184 li
129.598 104.335 li
126.994 110.536 li
125.695 113.381 li
125.007 114.757 li
124.711 115.409 li
124.553 115.673 li
124.496 115.767 li
124.399 116.059 li
124.362 116.169 li
121.971 120.706 li
120.722 122.892 li
120.168 123.938 li
119.897 124.371 li
119.735 124.587 li
119.681 124.66 li
119.578 124.865 li
119.538 124.946 li
117.015 128.946 li
115.722 130.792 li
115.037 131.727 li
114.721 132.169 li
114.676 132.233 li
114.516 132.553 li
115.41 133 li
114.963 132.106 li
114.838 132.168 li
114.54 132.317 li
114.372 132.652 li
111.82 135.934 li
110.533 137.465 li
109.845 138.217 li
109.546 138.575 li
109.391 138.73 li
109.328 138.793 li
110.035 139.5 li
109.588 138.606 li
109.463 138.668 li
109.306 138.746 li
106.756 141.427 li
105.597 142.587 li
105.013 143.112 li
104.723 143.344 li
104.602 143.441 li
104.391 143.758 li
105.223 144.313 li
104.516 143.605 li
104.453 143.668 li
105.16 144.375 li
104.713 143.481 li
104.588 143.543 li
104.472 143.601 li
101.839 145.913 li
100.562 146.886 li
99.8845 147.379 li
99.8657 147.392 li
99.5693 147.63 li
99.418 147.73 li
99.3356 147.785 li
99.203 147.918 li
99.1982 147.923 li
96.8361 149.619 li
95.6826 150.408 li
95.0832 150.768 li
94.8036 150.935 li
94.7129 150.981 li
94.5678 151.053 li
94.3905 151.23 li
94.328 151.293 li
95.0352 152 li
94.5402 151.131 li
89.6304 153.928 li
84.4381 156.462 li
79.6126 158.442 li
74.4737 160.299 li
69.202 161.85 li
64.3574 163.154 li
59.1416 164.334 li
54.3524 165.267 li
49.4287 166.139 li
44.1401 167.01 li
41.7054 167.323 li
40.5322 167.508 li
39.9356 167.567 li
39.8869 167.572 li
39.6236 167.625 li
39.5977 167.625 li
39.5352 167.625 li
39.299 167.625 li
38.0685 168.24 li
38.9629 170.029 li
cp
0.882353 0.768627 0 0 cmyk
f
40.9102 169.25 mo
40.9102 168.875 40.7227 168.5 40.4727 168.188 cv
40.1602 167.938 39.7852 167.75 39.4102 167.75 cv
39.0352 167.75 38.6602 167.938 38.3477 168.188 cv
38.0977 168.5 37.9102 168.875 37.9102 169.25 cv
37.9102 169.625 38.0977 170 38.3477 170.313 cv
38.6602 170.563 39.0352 170.75 39.4102 170.75 cv
39.7852 170.75 40.1602 170.563 40.4727 170.313 cv
40.7227 170 40.9102 169.625 40.9102 169.25 cv
cp
0 0.992157 1 0 cmyk
f
42.2852 168.375 mo
42.2852 168 42.0977 167.625 41.8477 167.313 cv
41.5352 167.063 41.1602 166.875 40.7852 166.875 cv
40.4102 166.875 40.0352 167.063 39.7227 167.313 cv
39.4727 167.625 39.2852 168 39.2852 168.375 cv
39.2852 168.75 39.4727 169.125 39.7227 169.438 cv
40.0352 169.688 40.4102 169.875 40.7852 169.875 cv
41.1602 169.875 41.5352 169.688 41.8477 169.438 cv
42.0977 169.125 42.2852 168.75 42.2852 168.375 cv
cp
f
43.7227 168.125 mo
43.7227 167.75 43.5352 167.375 43.2852 167.063 cv
42.9727 166.813 42.5977 166.625 42.2227 166.625 cv
41.8477 166.625 41.4727 166.813 41.1602 167.063 cv
40.9102 167.375 40.7227 167.75 40.7227 168.125 cv
40.7227 168.5 40.9102 168.875 41.1602 169.188 cv
41.4727 169.438 41.8477 169.625 42.2227 169.625 cv
42.5977 169.625 42.9727 169.438 43.2852 169.188 cv
43.5352 168.875 43.7227 168.5 43.7227 168.125 cv
cp
f
45.0977 167.875 mo
45.0977 167.5 44.9102 167.125 44.6602 166.813 cv
44.3477 166.563 43.9727 166.375 43.5977 166.375 cv
43.2227 166.375 42.8477 166.563 42.5352 166.813 cv
42.2852 167.125 42.0977 167.5 42.0977 167.875 cv
42.0977 168.25 42.2852 168.625 42.5352 168.938 cv
42.8477 169.188 43.2227 169.375 43.5977 169.375 cv
43.9727 169.375 44.3477 169.188 44.6602 168.938 cv
44.9102 168.625 45.0977 168.25 45.0977 167.875 cv
cp
f
46.4727 168 mo
46.4727 167.625 46.2852 167.25 46.0352 166.938 cv
45.7227 166.688 45.3477 166.5 44.9727 166.5 cv
44.5977 166.5 44.2227 166.688 43.9102 166.938 cv
43.6602 167.25 43.4727 167.625 43.4727 168 cv
43.4727 168.375 43.6602 168.75 43.9102 169.063 cv
44.2227 169.313 44.5977 169.5 44.9727 169.5 cv
45.3477 169.5 45.7227 169.313 46.0352 169.063 cv
46.2852 168.75 46.4727 168.375 46.4727 168 cv
cp
f
47.8477 167.438 mo
47.8477 167.063 47.6602 166.688 47.4102 166.375 cv
47.0977 166.125 46.7227 165.938 46.3477 165.938 cv
45.9727 165.938 45.5977 166.125 45.2852 166.375 cv
45.0352 166.688 44.8477 167.063 44.8477 167.438 cv
44.8477 167.813 45.0352 168.188 45.2852 168.5 cv
45.5977 168.75 45.9727 168.938 46.3477 168.938 cv
46.7227 168.938 47.0977 168.75 47.4102 168.5 cv
47.6602 168.188 47.8477 167.813 47.8477 167.438 cv
cp
f
49.2227 167.5 mo
49.2227 167.125 49.0352 166.75 48.7852 166.438 cv
48.4727 166.188 48.0977 166 47.7227 166 cv
47.3477 166 46.9727 166.188 46.6602 166.438 cv
46.4102 166.75 46.2227 167.125 46.2227 167.5 cv
46.2227 167.875 46.4102 168.25 46.6602 168.563 cv
46.9727 168.813 47.3477 169 47.7227 169 cv
48.0977 169 48.4727 168.813 48.7852 168.563 cv
49.0352 168.25 49.2227 167.875 49.2227 167.5 cv
cp
f
50.5977 167.25 mo
50.5977 166.875 50.4102 166.5 50.1602 166.188 cv
49.8477 165.938 49.4727 165.75 49.0977 165.75 cv
48.7227 165.75 48.3477 165.938 48.0352 166.188 cv
47.7852 166.5 47.5977 166.875 47.5977 167.25 cv
47.5977 167.625 47.7852 168 48.0352 168.313 cv
48.3477 168.563 48.7227 168.75 49.0977 168.75 cv
49.4727 168.75 49.8477 168.563 50.1602 168.313 cv
50.4102 168 50.5977 167.625 50.5977 167.25 cv
cp
f
51.9727 166.875 mo
51.9727 166.5 51.7852 166.125 51.5352 165.813 cv
51.2227 165.563 50.8477 165.375 50.4727 165.375 cv
50.0977 165.375 49.7227 165.563 49.4102 165.813 cv
49.1602 166.125 48.9727 166.5 48.9727 166.875 cv
48.9727 167.25 49.1602 167.625 49.4102 167.938 cv
49.7227 168.188 50.0977 168.375 50.4727 168.375 cv
50.8477 168.375 51.2227 168.188 51.5352 167.938 cv
51.7852 167.625 51.9727 167.25 51.9727 166.875 cv
cp
f
53.3477 166.875 mo
53.3477 166.5 53.1602 166.125 52.9102 165.813 cv
52.5977 165.563 52.2227 165.375 51.8477 165.375 cv
51.4727 165.375 51.0977 165.563 50.7852 165.813 cv
50.5352 166.125 50.3477 166.5 50.3477 166.875 cv
50.3477 167.25 50.5352 167.625 50.7852 167.938 cv
51.0977 168.188 51.4727 168.375 51.8477 168.375 cv
52.2227 168.375 52.5977 168.188 52.9102 167.938 cv
53.1602 167.625 53.3477 167.25 53.3477 166.875 cv
cp
f
54.7227 166.25 mo
54.7227 165.875 54.5352 165.5 54.2852 165.188 cv
53.9727 164.938 53.5977 164.75 53.2227 164.75 cv
52.8477 164.75 52.4727 164.938 52.1602 165.188 cv
51.9102 165.5 51.7227 165.875 51.7227 166.25 cv
51.7227 166.625 51.9102 167 52.1602 167.313 cv
52.4727 167.563 52.8477 167.75 53.2227 167.75 cv
53.5977 167.75 53.9727 167.563 54.2852 167.313 cv
54.5352 167 54.7227 166.625 54.7227 166.25 cv
cp
f
56.0977 166.438 mo
56.0977 166.063 55.9102 165.688 55.6602 165.375 cv
55.3477 165.125 54.9727 164.938 54.5977 164.938 cv
54.2227 164.938 53.8477 165.125 53.5352 165.375 cv
53.2852 165.688 53.0977 166.063 53.0977 166.438 cv
53.0977 166.813 53.2852 167.188 53.5352 167.5 cv
53.8477 167.75 54.2227 167.938 54.5977 167.938 cv
54.9727 167.938 55.3477 167.75 55.6602 167.5 cv
55.9102 167.188 56.0977 166.813 56.0977 166.438 cv
cp
f
57.4727 165.813 mo
57.4727 165.438 57.2852 165.063 57.0352 164.75 cv
56.7227 164.5 56.3477 164.313 55.9727 164.313 cv
55.5977 164.313 55.2227 164.5 54.9102 164.75 cv
54.6602 165.063 54.4727 165.438 54.4727 165.813 cv
54.4727 166.188 54.6602 166.563 54.9102 166.875 cv
55.2227 167.125 55.5977 167.313 55.9727 167.313 cv
56.3477 167.313 56.7227 167.125 57.0352 166.875 cv
57.2852 166.563 57.4727 166.188 57.4727 165.813 cv
cp
f
58.8477 165.875 mo
58.8477 165.5 58.6602 165.125 58.4102 164.813 cv
58.0977 164.563 57.7227 164.375 57.3477 164.375 cv
56.9727 164.375 56.5977 164.563 56.2852 164.813 cv
56.0352 165.125 55.8477 165.5 55.8477 165.875 cv
55.8477 166.25 56.0352 166.625 56.2852 166.938 cv
56.5977 167.188 56.9727 167.375 57.3477 167.375 cv
57.7227 167.375 58.0977 167.188 58.4102 166.938 cv
58.6602 166.625 58.8477 166.25 58.8477 165.875 cv
cp
f
60.2227 165.25 mo
60.2227 164.875 60.0352 164.5 59.7852 164.188 cv
59.4727 163.938 59.0977 163.75 58.7227 163.75 cv
58.3477 163.75 57.9727 163.938 57.6602 164.188 cv
57.4102 164.5 57.2227 164.875 57.2227 165.25 cv
57.2227 165.625 57.4102 166 57.6602 166.313 cv
57.9727 166.563 58.3477 166.75 58.7227 166.75 cv
59.0977 166.75 59.4727 166.563 59.7852 166.313 cv
60.0352 166 60.2227 165.625 60.2227 165.25 cv
cp
f
61.5977 165.313 mo
61.5977 164.938 61.4102 164.563 61.1602 164.25 cv
60.8477 164 60.4727 163.813 60.0977 163.813 cv
59.7227 163.813 59.3477 164 59.0352 164.25 cv
58.7852 164.563 58.5977 164.938 58.5977 165.313 cv
58.5977 165.688 58.7852 166.063 59.0352 166.375 cv
59.3477 166.625 59.7227 166.813 60.0977 166.813 cv
60.4727 166.813 60.8477 166.625 61.1602 166.375 cv
61.4102 166.063 61.5977 165.688 61.5977 165.313 cv
cp
f
62.9727 164.813 mo
62.9727 164.438 62.7852 164.063 62.5352 163.75 cv
62.2227 163.5 61.8477 163.313 61.4727 163.313 cv
61.0977 163.313 60.7227 163.5 60.4102 163.75 cv
60.1602 164.063 59.9727 164.438 59.9727 164.813 cv
59.9727 165.188 60.1602 165.563 60.4102 165.875 cv
60.7227 166.125 61.0977 166.313 61.4727 166.313 cv
61.8477 166.313 62.2227 166.125 62.5352 165.875 cv
62.7852 165.563 62.9727 165.188 62.9727 164.813 cv
cp
f
64.3477 164.438 mo
64.3477 164.063 64.1602 163.688 63.9102 163.375 cv
63.5977 163.125 63.2227 162.938 62.8477 162.938 cv
62.4727 162.938 62.0977 163.125 61.7852 163.375 cv
61.5352 163.688 61.3477 164.063 61.3477 164.438 cv
61.3477 164.813 61.5352 165.188 61.7852 165.5 cv
62.0977 165.75 62.4727 165.938 62.8477 165.938 cv
63.2227 165.938 63.5977 165.75 63.9102 165.5 cv
64.1602 165.188 64.3477 164.813 64.3477 164.438 cv
cp
f
65.7227 164.188 mo
65.7227 163.813 65.5352 163.438 65.2852 163.125 cv
64.9727 162.875 64.5977 162.688 64.2227 162.688 cv
63.8477 162.688 63.4727 162.875 63.1602 163.125 cv
62.9102 163.438 62.7227 163.813 62.7227 164.188 cv
62.7227 164.563 62.9102 164.938 63.1602 165.25 cv
63.4727 165.5 63.8477 165.688 64.2227 165.688 cv
64.5977 165.688 64.9727 165.5 65.2852 165.25 cv
65.5352 164.938 65.7227 164.563 65.7227 164.188 cv
cp
f
67.0977 163.625 mo
67.0977 163.25 66.9102 162.875 66.6602 162.563 cv
66.3477 162.313 65.9727 162.125 65.5977 162.125 cv
65.2227 162.125 64.8477 162.313 64.5352 162.563 cv
64.2852 162.875 64.0977 163.25 64.0977 163.625 cv
64.0977 164 64.2852 164.375 64.5352 164.688 cv
64.8477 164.938 65.2227 165.125 65.5977 165.125 cv
65.9727 165.125 66.3477 164.938 66.6602 164.688 cv
66.9102 164.375 67.0977 164 67.0977 163.625 cv
cp
f
68.4727 163.563 mo
68.4727 163.188 68.2852 162.813 68.0352 162.5 cv
67.7227 162.25 67.3477 162.063 66.9727 162.063 cv
66.5977 162.063 66.2227 162.25 65.9102 162.5 cv
65.6602 162.813 65.4727 163.188 65.4727 163.563 cv
65.4727 163.938 65.6602 164.313 65.9102 164.625 cv
66.2227 164.875 66.5977 165.063 66.9727 165.063 cv
67.3477 165.063 67.7227 164.875 68.0352 164.625 cv
68.2852 164.313 68.4727 163.938 68.4727 163.563 cv
cp
f
69.8477 163.125 mo
69.8477 162.75 69.6602 162.375 69.4102 162.063 cv
69.0977 161.813 68.7227 161.625 68.3477 161.625 cv
67.9727 161.625 67.5977 161.813 67.2852 162.063 cv
67.0352 162.375 66.8477 162.75 66.8477 163.125 cv
66.8477 163.5 67.0352 163.875 67.2852 164.188 cv
67.5977 164.438 67.9727 164.625 68.3477 164.625 cv
68.7227 164.625 69.0977 164.438 69.4102 164.188 cv
69.6602 163.875 69.8477 163.5 69.8477 163.125 cv
cp
f
71.2227 163.313 mo
71.2227 162.938 71.0352 162.563 70.7852 162.25 cv
70.4727 162 70.0977 161.813 69.7227 161.813 cv
69.3477 161.813 68.9727 162 68.6602 162.25 cv
68.4102 162.563 68.2227 162.938 68.2227 163.313 cv
68.2227 163.688 68.4102 164.063 68.6602 164.375 cv
68.9727 164.625 69.3477 164.813 69.7227 164.813 cv
70.0977 164.813 70.4727 164.625 70.7852 164.375 cv
71.0352 164.063 71.2227 163.688 71.2227 163.313 cv
cp
f
72.6602 162.438 mo
72.6602 162.063 72.4727 161.688 72.2227 161.375 cv
71.9102 161.125 71.5352 160.938 71.1602 160.938 cv
70.7852 160.938 70.4102 161.125 70.0977 161.375 cv
69.8477 161.688 69.6602 162.063 69.6602 162.438 cv
69.6602 162.813 69.8477 163.188 70.0977 163.5 cv
70.4102 163.75 70.7852 163.938 71.1602 163.938 cv
71.5352 163.938 71.9102 163.75 72.2227 163.5 cv
72.4727 163.188 72.6602 162.813 72.6602 162.438 cv
cp
f
74.0352 161.813 mo
74.0352 161.438 73.8477 161.063 73.5977 160.75 cv
73.2852 160.5 72.9102 160.313 72.5352 160.313 cv
72.1602 160.313 71.7852 160.5 71.4727 160.75 cv
71.2227 161.063 71.0352 161.438 71.0352 161.813 cv
71.0352 162.188 71.2227 162.563 71.4727 162.875 cv
71.7852 163.125 72.1602 163.313 72.5352 163.313 cv
72.9102 163.313 73.2852 163.125 73.5977 162.875 cv
73.8477 162.563 74.0352 162.188 74.0352 161.813 cv
cp
f
75.4102 161.625 mo
75.4102 161.25 75.2227 160.875 74.9727 160.563 cv
74.6602 160.313 74.2852 160.125 73.9102 160.125 cv
73.5352 160.125 73.1602 160.313 72.8477 160.563 cv
72.5977 160.875 72.4102 161.25 72.4102 161.625 cv
72.4102 162 72.5977 162.375 72.8477 162.688 cv
73.1602 162.938 73.5352 163.125 73.9102 163.125 cv
74.2852 163.125 74.6602 162.938 74.9727 162.688 cv
75.2227 162.375 75.4102 162 75.4102 161.625 cv
cp
f
76.7852 161.125 mo
76.7852 160.75 76.5977 160.375 76.3477 160.063 cv
76.0352 159.813 75.6602 159.625 75.2852 159.625 cv
74.9102 159.625 74.5352 159.813 74.2227 160.063 cv
73.9727 160.375 73.7852 160.75 73.7852 161.125 cv
73.7852 161.5 73.9727 161.875 74.2227 162.188 cv
74.5352 162.438 74.9102 162.625 75.2852 162.625 cv
75.6602 162.625 76.0352 162.438 76.3477 162.188 cv
76.5977 161.875 76.7852 161.5 76.7852 161.125 cv
cp
f
78.1602 160.813 mo
78.1602 160.438 77.9727 160.063 77.7227 159.75 cv
77.4102 159.5 77.0352 159.313 76.6602 159.313 cv
76.2852 159.313 75.9102 159.5 75.5977 159.75 cv
75.3477 160.063 75.1602 160.438 75.1602 160.813 cv
75.1602 161.188 75.3477 161.563 75.5977 161.875 cv
75.9102 162.125 76.2852 162.313 76.6602 162.313 cv
77.0352 162.313 77.4102 162.125 77.7227 161.875 cv
77.9727 161.563 78.1602 161.188 78.1602 160.813 cv
cp
f
79.5352 159.938 mo
79.5352 159.563 79.3477 159.188 79.0977 158.875 cv
78.7852 158.625 78.4102 158.438 78.0352 158.438 cv
77.6602 158.438 77.2852 158.625 76.9727 158.875 cv
76.7227 159.188 76.5352 159.563 76.5352 159.938 cv
76.5352 160.313 76.7227 160.688 76.9727 161 cv
77.2852 161.25 77.6602 161.438 78.0352 161.438 cv
78.4102 161.438 78.7852 161.25 79.0977 161 cv
79.3477 160.688 79.5352 160.313 79.5352 159.938 cv
cp
f
80.9102 160 mo
80.9102 159.625 80.7227 159.25 80.4727 158.938 cv
80.1602 158.688 79.7852 158.5 79.4102 158.5 cv
79.0352 158.5 78.6602 158.688 78.3477 158.938 cv
78.0977 159.25 77.9102 159.625 77.9102 160 cv
77.9102 160.375 78.0977 160.75 78.3477 161.063 cv
78.6602 161.313 79.0352 161.5 79.4102 161.5 cv
79.7852 161.5 80.1602 161.313 80.4727 161.063 cv
80.7227 160.75 80.9102 160.375 80.9102 160 cv
cp
f
82.2852 159.313 mo
82.2852 158.938 82.0977 158.563 81.8477 158.25 cv
81.5352 158 81.1602 157.813 80.7852 157.813 cv
80.4102 157.813 80.0352 158 79.7227 158.25 cv
79.4727 158.563 79.2852 158.938 79.2852 159.313 cv
79.2852 159.688 79.4727 160.063 79.7227 160.375 cv
80.0352 160.625 80.4102 160.813 80.7852 160.813 cv
81.1602 160.813 81.5352 160.625 81.8477 160.375 cv
82.0977 160.063 82.2852 159.688 82.2852 159.313 cv
cp
f
83.6602 158.563 mo
83.6602 158.188 83.4727 157.813 83.2227 157.5 cv
82.9102 157.25 82.5352 157.063 82.1602 157.063 cv
81.7852 157.063 81.4102 157.25 81.0977 157.5 cv
80.8477 157.813 80.6602 158.188 80.6602 158.563 cv
80.6602 158.938 80.8477 159.313 81.0977 159.625 cv
81.4102 159.875 81.7852 160.063 82.1602 160.063 cv
82.5352 160.063 82.9102 159.875 83.2227 159.625 cv
83.4727 159.313 83.6602 158.938 83.6602 158.563 cv
cp
f
85.0352 158.25 mo
85.0352 157.875 84.8477 157.5 84.5977 157.188 cv
84.2852 156.938 83.9102 156.75 83.5352 156.75 cv
83.1602 156.75 82.7852 156.938 82.4727 157.188 cv
82.2227 157.5 82.0352 157.875 82.0352 158.25 cv
82.0352 158.625 82.2227 159 82.4727 159.313 cv
82.7852 159.563 83.1602 159.75 83.5352 159.75 cv
83.9102 159.75 84.2852 159.563 84.5977 159.313 cv
84.8477 159 85.0352 158.625 85.0352 158.25 cv
cp
f
86.4102 157.75 mo
86.4102 157.375 86.2227 157 85.9727 156.688 cv
85.6602 156.438 85.2852 156.25 84.9102 156.25 cv
84.5352 156.25 84.1602 156.438 83.8477 156.688 cv
83.5977 157 83.4102 157.375 83.4102 157.75 cv
83.4102 158.125 83.5977 158.5 83.8477 158.813 cv
84.1602 159.063 84.5352 159.25 84.9102 159.25 cv
85.2852 159.25 85.6602 159.063 85.9727 158.813 cv
86.2227 158.5 86.4102 158.125 86.4102 157.75 cv
cp
f
87.7852 156.938 mo
87.7852 156.563 87.5977 156.188 87.3477 155.875 cv
87.0352 155.625 86.6602 155.438 86.2852 155.438 cv
85.9102 155.438 85.5352 155.625 85.2227 155.875 cv
84.9727 156.188 84.7852 156.563 84.7852 156.938 cv
84.7852 157.313 84.9727 157.688 85.2227 158 cv
85.5352 158.25 85.9102 158.438 86.2852 158.438 cv
86.6602 158.438 87.0352 158.25 87.3477 158 cv
87.5977 157.688 87.7852 157.313 87.7852 156.938 cv
cp
f
89.1602 156.75 mo
89.1602 156.375 88.9727 156 88.7227 155.688 cv
88.4102 155.438 88.0352 155.25 87.6602 155.25 cv
87.2852 155.25 86.9102 155.438 86.5977 155.688 cv
86.3477 156 86.1602 156.375 86.1602 156.75 cv
86.1602 157.125 86.3477 157.5 86.5977 157.813 cv
86.9102 158.063 87.2852 158.25 87.6602 158.25 cv
88.0352 158.25 88.4102 158.063 88.7227 157.813 cv
88.9727 157.5 89.1602 157.125 89.1602 156.75 cv
cp
f
90.5352 155.375 mo
90.5352 155 90.3477 154.625 90.0977 154.313 cv
89.7852 154.063 89.4102 153.875 89.0352 153.875 cv
88.6602 153.875 88.2852 154.063 87.9727 154.313 cv
87.7227 154.625 87.5352 155 87.5352 155.375 cv
87.5352 155.75 87.7227 156.125 87.9727 156.438 cv
88.2852 156.688 88.6602 156.875 89.0352 156.875 cv
89.4102 156.875 89.7852 156.688 90.0977 156.438 cv
90.3477 156.125 90.5352 155.75 90.5352 155.375 cv
cp
f
91.9102 155.188 mo
91.9102 154.813 91.7227 154.438 91.4727 154.125 cv
91.1602 153.875 90.7852 153.688 90.4102 153.688 cv
90.0352 153.688 89.6602 153.875 89.3477 154.125 cv
89.0977 154.438 88.9102 154.813 88.9102 155.188 cv
88.9102 155.563 89.0977 155.938 89.3477 156.25 cv
89.6602 156.5 90.0352 156.688 90.4102 156.688 cv
90.7852 156.688 91.1602 156.5 91.4727 156.25 cv
91.7227 155.938 91.9102 155.563 91.9102 155.188 cv
cp
f
93.2852 154.125 mo
93.2852 153.75 93.0977 153.375 92.8477 153.063 cv
92.5352 152.813 92.1602 152.625 91.7852 152.625 cv
91.4102 152.625 91.0352 152.813 90.7227 153.063 cv
90.4727 153.375 90.2852 153.75 90.2852 154.125 cv
90.2852 154.5 90.4727 154.875 90.7227 155.188 cv
91.0352 155.438 91.4102 155.625 91.7852 155.625 cv
92.1602 155.625 92.5352 155.438 92.8477 155.188 cv
93.0977 154.875 93.2852 154.5 93.2852 154.125 cv
cp
f
94.6602 153.313 mo
94.6602 152.938 94.4727 152.563 94.2227 152.25 cv
93.9102 152 93.5352 151.813 93.1602 151.813 cv
92.7852 151.813 92.4102 152 92.0977 152.25 cv
91.8477 152.563 91.6602 152.938 91.6602 153.313 cv
91.6602 153.688 91.8477 154.063 92.0977 154.375 cv
92.4102 154.625 92.7852 154.813 93.1602 154.813 cv
93.5352 154.813 93.9102 154.625 94.2227 154.375 cv
94.4727 154.063 94.6602 153.688 94.6602 153.313 cv
cp
f
96.0352 152.688 mo
96.0352 152.313 95.8477 151.938 95.5977 151.625 cv
95.2852 151.375 94.9102 151.188 94.5352 151.188 cv
94.1602 151.188 93.7852 151.375 93.4727 151.625 cv
93.2227 151.938 93.0352 152.313 93.0352 152.688 cv
93.0352 153.063 93.2227 153.438 93.4727 153.75 cv
93.7852 154 94.1602 154.188 94.5352 154.188 cv
94.9102 154.188 95.2852 154 95.5977 153.75 cv
95.8477 153.438 96.0352 153.063 96.0352 152.688 cv
cp
f
97.4102 152 mo
97.4102 151.625 97.2227 151.25 96.9727 150.938 cv
96.6602 150.688 96.2852 150.5 95.9102 150.5 cv
95.5352 150.5 95.1602 150.688 94.8477 150.938 cv
94.5977 151.25 94.4102 151.625 94.4102 152 cv
94.4102 152.375 94.5977 152.75 94.8477 153.063 cv
95.1602 153.313 95.5352 153.5 95.9102 153.5 cv
96.2852 153.5 96.6602 153.313 96.9727 153.063 cv
97.2227 152.75 97.4102 152.375 97.4102 152 cv
cp
f
98.7852 150.938 mo
98.7852 150.563 98.5977 150.188 98.3477 149.875 cv
98.0352 149.625 97.6602 149.438 97.2852 149.438 cv
96.9102 149.438 96.5352 149.625 96.2227 149.875 cv
95.9727 150.188 95.7852 150.563 95.7852 150.938 cv
95.7852 151.313 95.9727 151.688 96.2227 152 cv
96.5352 152.25 96.9102 152.438 97.2852 152.438 cv
97.6602 152.438 98.0352 152.25 98.3477 152 cv
98.5977 151.688 98.7852 151.313 98.7852 150.938 cv
cp
f
100.16 149.875 mo
100.16 149.5 99.9727 149.125 99.7227 148.813 cv
99.4102 148.563 99.0352 148.375 98.6602 148.375 cv
98.2852 148.375 97.9102 148.563 97.5977 148.813 cv
97.3477 149.125 97.1602 149.5 97.1602 149.875 cv
97.1602 150.25 97.3477 150.625 97.5977 150.938 cv
97.9102 151.188 98.2852 151.375 98.6602 151.375 cv
99.0352 151.375 99.4102 151.188 99.7227 150.938 cv
99.9727 150.625 100.16 150.25 100.16 149.875 cv
cp
f
101.598 148.813 mo
101.598 148.438 101.41 148.063 101.16 147.75 cv
100.848 147.5 100.473 147.313 100.098 147.313 cv
99.7227 147.313 99.3477 147.5 99.0352 147.75 cv
98.7852 148.063 98.5977 148.438 98.5977 148.813 cv
98.5977 149.188 98.7852 149.563 99.0352 149.875 cv
99.3477 150.125 99.7227 150.313 100.098 150.313 cv
100.473 150.313 100.848 150.125 101.16 149.875 cv
101.41 149.563 101.598 149.188 101.598 148.813 cv
cp
f
102.973 147.875 mo
102.973 147.5 102.785 147.125 102.535 146.813 cv
102.223 146.563 101.848 146.375 101.473 146.375 cv
101.098 146.375 100.723 146.563 100.41 146.813 cv
100.16 147.125 99.9727 147.5 99.9727 147.875 cv
99.9727 148.25 100.16 148.625 100.41 148.938 cv
100.723 149.188 101.098 149.375 101.473 149.375 cv
101.848 149.375 102.223 149.188 102.535 148.938 cv
102.785 148.625 102.973 148.25 102.973 147.875 cv
cp
f
104.348 147 mo
104.348 146.625 104.16 146.25 103.91 145.938 cv
103.598 145.688 103.223 145.5 102.848 145.5 cv
102.473 145.5 102.098 145.688 101.785 145.938 cv
101.535 146.25 101.348 146.625 101.348 147 cv
101.348 147.375 101.535 147.75 101.785 148.063 cv
102.098 148.313 102.473 148.5 102.848 148.5 cv
103.223 148.5 103.598 148.313 103.91 148.063 cv
104.16 147.75 104.348 147.375 104.348 147 cv
cp
f
105.723 145.563 mo
105.723 145.188 105.535 144.813 105.285 144.5 cv
104.973 144.25 104.598 144.063 104.223 144.063 cv
103.848 144.063 103.473 144.25 103.16 144.5 cv
102.91 144.813 102.723 145.188 102.723 145.563 cv
102.723 145.938 102.91 146.313 103.16 146.625 cv
103.473 146.875 103.848 147.063 104.223 147.063 cv
104.598 147.063 104.973 146.875 105.285 146.625 cv
105.535 146.313 105.723 145.938 105.723 145.563 cv
cp
f
107.098 144.688 mo
107.098 144.313 106.91 143.938 106.66 143.625 cv
106.348 143.375 105.973 143.188 105.598 143.188 cv
105.223 143.188 104.848 143.375 104.535 143.625 cv
104.285 143.938 104.098 144.313 104.098 144.688 cv
104.098 145.063 104.285 145.438 104.535 145.75 cv
104.848 146 105.223 146.188 105.598 146.188 cv
105.973 146.188 106.348 146 106.66 145.75 cv
106.91 145.438 107.098 145.063 107.098 144.688 cv
cp
f
108.473 143.063 mo
108.473 142.688 108.285 142.313 108.035 142 cv
107.723 141.75 107.348 141.563 106.973 141.563 cv
106.598 141.563 106.223 141.75 105.91 142 cv
105.66 142.313 105.473 142.688 105.473 143.063 cv
105.473 143.438 105.66 143.813 105.91 144.125 cv
106.223 144.375 106.598 144.563 106.973 144.563 cv
107.348 144.563 107.723 144.375 108.035 144.125 cv
108.285 143.813 108.473 143.438 108.473 143.063 cv
cp
f
109.848 142.125 mo
109.848 141.75 109.66 141.375 109.41 141.063 cv
109.098 140.813 108.723 140.625 108.348 140.625 cv
107.973 140.625 107.598 140.813 107.285 141.063 cv
107.035 141.375 106.848 141.75 106.848 142.125 cv
106.848 142.5 107.035 142.875 107.285 143.188 cv
107.598 143.438 107.973 143.625 108.348 143.625 cv
108.723 143.625 109.098 143.438 109.41 143.188 cv
109.66 142.875 109.848 142.5 109.848 142.125 cv
cp
f
111.223 140.438 mo
111.223 140.063 111.035 139.688 110.785 139.375 cv
110.473 139.125 110.098 138.938 109.723 138.938 cv
109.348 138.938 108.973 139.125 108.66 139.375 cv
108.41 139.688 108.223 140.063 108.223 140.438 cv
108.223 140.813 108.41 141.188 108.66 141.5 cv
108.973 141.75 109.348 141.938 109.723 141.938 cv
110.098 141.938 110.473 141.75 110.785 141.5 cv
111.035 141.188 111.223 140.813 111.223 140.438 cv
cp
f
112.598 139 mo
112.598 138.625 112.41 138.25 112.16 137.938 cv
111.848 137.688 111.473 137.5 111.098 137.5 cv
110.723 137.5 110.348 137.688 110.035 137.938 cv
109.785 138.25 109.598 138.625 109.598 139 cv
109.598 139.375 109.785 139.75 110.035 140.063 cv
110.348 140.313 110.723 140.5 111.098 140.5 cv
111.473 140.5 111.848 140.313 112.16 140.063 cv
112.41 139.75 112.598 139.375 112.598 139 cv
cp
f
113.973 137.188 mo
113.973 136.813 113.785 136.438 113.535 136.125 cv
113.223 135.875 112.848 135.688 112.473 135.688 cv
112.098 135.688 111.723 135.875 111.41 136.125 cv
111.16 136.438 110.973 136.813 110.973 137.188 cv
110.973 137.563 111.16 137.938 111.41 138.25 cv
111.723 138.5 112.098 138.688 112.473 138.688 cv
112.848 138.688 113.223 138.5 113.535 138.25 cv
113.785 137.938 113.973 137.563 113.973 137.188 cv
cp
f
115.348 135.688 mo
115.348 135.313 115.16 134.938 114.91 134.625 cv
114.598 134.375 114.223 134.188 113.848 134.188 cv
113.473 134.188 113.098 134.375 112.785 134.625 cv
112.535 134.938 112.348 135.313 112.348 135.688 cv
112.348 136.063 112.535 136.438 112.785 136.75 cv
113.098 137 113.473 137.188 113.848 137.188 cv
114.223 137.188 114.598 137 114.91 136.75 cv
115.16 136.438 115.348 136.063 115.348 135.688 cv
cp
f
116.723 133.813 mo
116.723 133.438 116.535 133.063 116.285 132.75 cv
115.973 132.5 115.598 132.313 115.223 132.313 cv
114.848 132.313 114.473 132.5 114.16 132.75 cv
113.91 133.063 113.723 133.438 113.723 133.813 cv
113.723 134.188 113.91 134.563 114.16 134.875 cv
114.473 135.125 114.848 135.313 115.223 135.313 cv
115.598 135.313 115.973 135.125 116.285 134.875 cv
116.535 134.563 116.723 134.188 116.723 133.813 cv
cp
f
118.098 132.125 mo
118.098 131.75 117.91 131.375 117.66 131.063 cv
117.348 130.813 116.973 130.625 116.598 130.625 cv
116.223 130.625 115.848 130.813 115.535 131.063 cv
115.285 131.375 115.098 131.75 115.098 132.125 cv
115.098 132.5 115.285 132.875 115.535 133.188 cv
115.848 133.438 116.223 133.625 116.598 133.625 cv
116.973 133.625 117.348 133.438 117.66 133.188 cv
117.91 132.875 118.098 132.5 118.098 132.125 cv
cp
f
119.473 129.938 mo
119.473 129.563 119.285 129.188 119.035 128.875 cv
118.723 128.625 118.348 128.438 117.973 128.438 cv
117.598 128.438 117.223 128.625 116.91 128.875 cv
116.66 129.188 116.473 129.563 116.473 129.938 cv
116.473 130.313 116.66 130.688 116.91 131 cv
117.223 131.25 117.598 131.438 117.973 131.438 cv
118.348 131.438 118.723 131.25 119.035 131 cv
119.285 130.688 119.473 130.313 119.473 129.938 cv
cp
f
120.848 127.438 mo
120.848 127.063 120.66 126.688 120.41 126.375 cv
120.098 126.125 119.723 125.938 119.348 125.938 cv
118.973 125.938 118.598 126.125 118.285 126.375 cv
118.035 126.688 117.848 127.063 117.848 127.438 cv
117.848 127.813 118.035 128.188 118.285 128.5 cv
118.598 128.75 118.973 128.938 119.348 128.938 cv
119.723 128.938 120.098 128.75 120.41 128.5 cv
120.66 128.188 120.848 127.813 120.848 127.438 cv
cp
f
122.223 125.438 mo
122.223 125.063 122.035 124.688 121.785 124.375 cv
121.473 124.125 121.098 123.938 120.723 123.938 cv
120.348 123.938 119.973 124.125 119.66 124.375 cv
119.41 124.688 119.223 125.063 119.223 125.438 cv
119.223 125.813 119.41 126.188 119.66 126.5 cv
119.973 126.75 120.348 126.938 120.723 126.938 cv
121.098 126.938 121.473 126.75 121.785 126.5 cv
122.035 126.188 122.223 125.813 122.223 125.438 cv
cp
f
123.598 122.375 mo
123.598 122 123.41 121.625 123.16 121.313 cv
122.848 121.063 122.473 120.875 122.098 120.875 cv
121.723 120.875 121.348 121.063 121.035 121.313 cv
120.785 121.625 120.598 122 120.598 122.375 cv
120.598 122.75 120.785 123.125 121.035 123.438 cv
121.348 123.688 121.723 123.875 122.098 123.875 cv
122.473 123.875 122.848 123.688 123.16 123.438 cv
123.41 123.125 123.598 122.75 123.598 122.375 cv
cp
f
124.973 120.375 mo
124.973 120 124.785 119.625 124.535 119.313 cv
124.223 119.063 123.848 118.875 123.473 118.875 cv
123.098 118.875 122.723 119.063 122.41 119.313 cv
122.16 119.625 121.973 120 121.973 120.375 cv
121.973 120.75 122.16 121.125 122.41 121.438 cv
122.723 121.688 123.098 121.875 123.473 121.875 cv
123.848 121.875 124.223 121.688 124.535 121.438 cv
124.785 121.125 124.973 120.75 124.973 120.375 cv
cp
f
126.348 117.375 mo
126.348 117 126.16 116.625 125.91 116.313 cv
125.598 116.063 125.223 115.875 124.848 115.875 cv
124.473 115.875 124.098 116.063 123.785 116.313 cv
123.535 116.625 123.348 117 123.348 117.375 cv
123.348 117.75 123.535 118.125 123.785 118.438 cv
124.098 118.688 124.473 118.875 124.848 118.875 cv
125.223 118.875 125.598 118.688 125.91 118.438 cv
126.16 118.125 126.348 117.75 126.348 117.375 cv
cp
f
127.723 114.563 mo
127.723 114.188 127.535 113.813 127.285 113.5 cv
126.973 113.25 126.598 113.063 126.223 113.063 cv
125.848 113.063 125.473 113.25 125.16 113.5 cv
124.91 113.813 124.723 114.188 124.723 114.563 cv
124.723 114.938 124.91 115.313 125.16 115.625 cv
125.473 115.875 125.848 116.063 126.223 116.063 cv
126.598 116.063 126.973 115.875 127.285 115.625 cv
127.535 115.313 127.723 114.938 127.723 114.563 cv
cp
f
129.098 111.063 mo
129.098 110.688 128.91 110.313 128.66 110 cv
128.348 109.75 127.973 109.563 127.598 109.563 cv
127.223 109.563 126.848 109.75 126.535 110 cv
126.285 110.313 126.098 110.688 126.098 111.063 cv
126.098 111.438 126.285 111.813 126.535 112.125 cv
126.848 112.375 127.223 112.563 127.598 112.563 cv
127.973 112.563 128.348 112.375 128.66 112.125 cv
128.91 111.813 129.098 111.438 129.098 111.063 cv
cp
f
130.535 108.25 mo
130.535 107.875 130.348 107.5 130.098 107.188 cv
129.785 106.938 129.41 106.75 129.035 106.75 cv
128.66 106.75 128.285 106.938 127.973 107.188 cv
127.723 107.5 127.535 107.875 127.535 108.25 cv
127.535 108.625 127.723 109 127.973 109.313 cv
128.285 109.563 128.66 109.75 129.035 109.75 cv
129.41 109.75 129.785 109.563 130.098 109.313 cv
130.348 109 130.535 108.625 130.535 108.25 cv
cp
f
131.91 104.5 mo
131.91 104.125 131.723 103.75 131.473 103.438 cv
131.16 103.188 130.785 103 130.41 103 cv
130.035 103 129.66 103.188 129.348 103.438 cv
129.098 103.75 128.91 104.125 128.91 104.5 cv
128.91 104.875 129.098 105.25 129.348 105.563 cv
129.66 105.813 130.035 106 130.41 106 cv
130.785 106 131.16 105.813 131.473 105.563 cv
131.723 105.25 131.91 104.875 131.91 104.5 cv
cp
f
133.285 100.813 mo
133.285 100.438 133.098 100.063 132.848 99.75 cv
132.535 99.5 132.16 99.3125 131.785 99.3125 cv
131.41 99.3125 131.035 99.5 130.723 99.75 cv
130.473 100.063 130.285 100.438 130.285 100.813 cv
130.285 101.188 130.473 101.563 130.723 101.875 cv
131.035 102.125 131.41 102.313 131.785 102.313 cv
132.16 102.313 132.535 102.125 132.848 101.875 cv
133.098 101.563 133.285 101.188 133.285 100.813 cv
cp
f
134.66 96.25 mo
134.66 95.875 134.473 95.5 134.223 95.1875 cv
133.91 94.9375 133.535 94.75 133.16 94.75 cv
132.785 94.75 132.41 94.9375 132.098 95.1875 cv
131.848 95.5 131.66 95.875 131.66 96.25 cv
131.66 96.625 131.848 97 132.098 97.3125 cv
132.41 97.5625 132.785 97.75 133.16 97.75 cv
133.535 97.75 133.91 97.5625 134.223 97.3125 cv
134.473 97 134.66 96.625 134.66 96.25 cv
cp
f
136.035 92.5625 mo
136.035 92.1875 135.848 91.8125 135.598 91.5 cv
135.285 91.25 134.91 91.0625 134.535 91.0625 cv
134.16 91.0625 133.785 91.25 133.473 91.5 cv
133.223 91.8125 133.035 92.1875 133.035 92.5625 cv
133.035 92.9375 133.223 93.3125 133.473 93.625 cv
133.785 93.875 134.16 94.0625 134.535 94.0625 cv
134.91 94.0625 135.285 93.875 135.598 93.625 cv
135.848 93.3125 136.035 92.9375 136.035 92.5625 cv
cp
f
137.41 87.875 mo
137.41 87.5 137.223 87.125 136.973 86.8125 cv
136.66 86.5625 136.285 86.375 135.91 86.375 cv
135.535 86.375 135.16 86.5625 134.848 86.8125 cv
134.598 87.125 134.41 87.5 134.41 87.875 cv
134.41 88.25 134.598 88.625 134.848 88.9375 cv
135.16 89.1875 135.535 89.375 135.91 89.375 cv
136.285 89.375 136.66 89.1875 136.973 88.9375 cv
137.223 88.625 137.41 88.25 137.41 87.875 cv
cp
f
138.785 83.8125 mo
138.785 83.4375 138.598 83.0625 138.348 82.75 cv
138.035 82.5 137.66 82.3125 137.285 82.3125 cv
136.91 82.3125 136.535 82.5 136.223 82.75 cv
135.973 83.0625 135.785 83.4375 135.785 83.8125 cv
135.785 84.1875 135.973 84.5625 136.223 84.875 cv
136.535 85.125 136.91 85.3125 137.285 85.3125 cv
137.66 85.3125 138.035 85.125 138.348 84.875 cv
138.598 84.5625 138.785 84.1875 138.785 83.8125 cv
cp
f
140.16 78.75 mo
140.16 78.375 139.973 78 139.723 77.6875 cv
139.41 77.4375 139.035 77.25 138.66 77.25 cv
138.285 77.25 137.91 77.4375 137.598 77.6875 cv
137.348 78 137.16 78.375 137.16 78.75 cv
137.16 79.125 137.348 79.5 137.598 79.8125 cv
137.91 80.0625 138.285 80.25 138.66 80.25 cv
139.035 80.25 139.41 80.0625 139.723 79.8125 cv
139.973 79.5 140.16 79.125 140.16 78.75 cv
cp
f
141.535 74.375 mo
141.535 74 141.348 73.625 141.098 73.3125 cv
140.785 73.0625 140.41 72.875 140.035 72.875 cv
139.66 72.875 139.285 73.0625 138.973 73.3125 cv
138.723 73.625 138.535 74 138.535 74.375 cv
138.535 74.75 138.723 75.125 138.973 75.4375 cv
139.285 75.6875 139.66 75.875 140.035 75.875 cv
140.41 75.875 140.785 75.6875 141.098 75.4375 cv
141.348 75.125 141.535 74.75 141.535 74.375 cv
cp
f
142.91 68.4375 mo
142.91 68.0625 142.723 67.6875 142.473 67.375 cv
142.16 67.125 141.785 66.9375 141.41 66.9375 cv
141.035 66.9375 140.66 67.125 140.348 67.375 cv
140.098 67.6875 139.91 68.0625 139.91 68.4375 cv
139.91 68.8125 140.098 69.1875 140.348 69.5 cv
140.66 69.75 141.035 69.9375 141.41 69.9375 cv
141.785 69.9375 142.16 69.75 142.473 69.5 cv
142.723 69.1875 142.91 68.8125 142.91 68.4375 cv
cp
f
144.285 63.9375 mo
144.285 63.5625 144.098 63.1875 143.848 62.875 cv
143.535 62.625 143.16 62.4375 142.785 62.4375 cv
142.41 62.4375 142.035 62.625 141.723 62.875 cv
141.473 63.1875 141.285 63.5625 141.285 63.9375 cv
141.285 64.3125 141.473 64.6875 141.723 65 cv
142.035 65.25 142.41 65.4375 142.785 65.4375 cv
143.16 65.4375 143.535 65.25 143.848 65 cv
144.098 64.6875 144.285 64.3125 144.285 63.9375 cv
cp
f
145.66 58.6875 mo
145.66 58.3125 145.473 57.9375 145.223 57.625 cv
144.91 57.375 144.535 57.1875 144.16 57.1875 cv
143.785 57.1875 143.41 57.375 143.098 57.625 cv
142.848 57.9375 142.66 58.3125 142.66 58.6875 cv
142.66 59.0625 142.848 59.4375 143.098 59.75 cv
143.41 60 143.785 60.1875 144.16 60.1875 cv
144.535 60.1875 144.91 60 145.223 59.75 cv
145.473 59.4375 145.66 59.0625 145.66 58.6875 cv
cp
f
147.035 53.4375 mo
147.035 53.0625 146.848 52.6875 146.598 52.375 cv
146.285 52.125 145.91 51.9375 145.535 51.9375 cv
145.16 51.9375 144.785 52.125 144.473 52.375 cv
144.223 52.6875 144.035 53.0625 144.035 53.4375 cv
144.035 53.8125 144.223 54.1875 144.473 54.5 cv
144.785 54.75 145.16 54.9375 145.535 54.9375 cv
145.91 54.9375 146.285 54.75 146.598 54.5 cv
146.848 54.1875 147.035 53.8125 147.035 53.4375 cv
cp
f
148.41 48.8125 mo
148.41 48.4375 148.223 48.0625 147.973 47.75 cv
147.66 47.5 147.285 47.3125 146.91 47.3125 cv
146.535 47.3125 146.16 47.5 145.848 47.75 cv
145.598 48.0625 145.41 48.4375 145.41 48.8125 cv
145.41 49.1875 145.598 49.5625 145.848 49.875 cv
146.16 50.125 146.535 50.3125 146.91 50.3125 cv
147.285 50.3125 147.66 50.125 147.973 49.875 cv
148.223 49.5625 148.41 49.1875 148.41 48.8125 cv
cp
f
149.785 43.375 mo
149.785 43 149.598 42.625 149.348 42.3125 cv
149.035 42.0625 148.66 41.875 148.285 41.875 cv
147.91 41.875 147.535 42.0625 147.223 42.3125 cv
146.973 42.625 146.785 43 146.785 43.375 cv
146.785 43.75 146.973 44.125 147.223 44.4375 cv
147.535 44.6875 147.91 44.875 148.285 44.875 cv
148.66 44.875 149.035 44.6875 149.348 44.4375 cv
149.598 44.125 149.785 43.75 149.785 43.375 cv
cp
f
151.16 38.6875 mo
151.16 38.3125 150.973 37.9375 150.723 37.625 cv
150.41 37.375 150.035 37.1875 149.66 37.1875 cv
149.285 37.1875 148.91 37.375 148.598 37.625 cv
148.348 37.9375 148.16 38.3125 148.16 38.6875 cv
148.16 39.0625 148.348 39.4375 148.598 39.75 cv
148.91 40 149.285 40.1875 149.66 40.1875 cv
150.035 40.1875 150.41 40 150.723 39.75 cv
150.973 39.4375 151.16 39.0625 151.16 38.6875 cv
cp
f
152.535 34.3125 mo
152.535 33.9375 152.348 33.5625 152.098 33.25 cv
151.785 33 151.41 32.8125 151.035 32.8125 cv
150.66 32.8125 150.285 33 149.973 33.25 cv
149.723 33.5625 149.535 33.9375 149.535 34.3125 cv
149.535 34.6875 149.723 35.0625 149.973 35.375 cv
150.285 35.625 150.66 35.8125 151.035 35.8125 cv
151.41 35.8125 151.785 35.625 152.098 35.375 cv
152.348 35.0625 152.535 34.6875 152.535 34.3125 cv
cp
f
153.91 30.0625 mo
153.91 29.6875 153.723 29.3125 153.473 29 cv
153.16 28.75 152.785 28.5625 152.41 28.5625 cv
152.035 28.5625 151.66 28.75 151.348 29 cv
151.098 29.3125 150.91 29.6875 150.91 30.0625 cv
150.91 30.4375 151.098 30.8125 151.348 31.125 cv
151.66 31.375 152.035 31.5625 152.41 31.5625 cv
152.785 31.5625 153.16 31.375 153.473 31.125 cv
153.723 30.8125 153.91 30.4375 153.91 30.0625 cv
cp
f
155.285 25.375 mo
155.285 25 155.098 24.625 154.848 24.3125 cv
154.535 24.0625 154.16 23.875 153.785 23.875 cv
153.41 23.875 153.035 24.0625 152.723 24.3125 cv
152.473 24.625 152.285 25 152.285 25.375 cv
152.285 25.75 152.473 26.125 152.723 26.4375 cv
153.035 26.6875 153.41 26.875 153.785 26.875 cv
154.16 26.875 154.535 26.6875 154.848 26.4375 cv
155.098 26.125 155.285 25.75 155.285 25.375 cv
cp
f
156.66 22.0625 mo
156.66 21.6875 156.473 21.3125 156.223 21 cv
155.91 20.75 155.535 20.5625 155.16 20.5625 cv
154.785 20.5625 154.41 20.75 154.098 21 cv
153.848 21.3125 153.66 21.6875 153.66 22.0625 cv
153.66 22.4375 153.848 22.8125 154.098 23.125 cv
154.41 23.375 154.785 23.5625 155.16 23.5625 cv
155.535 23.5625 155.91 23.375 156.223 23.125 cv
156.473 22.8125 156.66 22.4375 156.66 22.0625 cv
cp
f
158.098 19.125 mo
158.098 18.75 157.91 18.375 157.66 18.0625 cv
157.348 17.8125 156.973 17.625 156.598 17.625 cv
156.223 17.625 155.848 17.8125 155.535 18.0625 cv
155.285 18.375 155.098 18.75 155.098 19.125 cv
155.098 19.5 155.285 19.875 155.535 20.1875 cv
155.848 20.4375 156.223 20.625 156.598 20.625 cv
156.973 20.625 157.348 20.4375 157.66 20.1875 cv
157.91 19.875 158.098 19.5 158.098 19.125 cv
cp
f
159.473 15.375 mo
159.473 15 159.285 14.625 159.035 14.3125 cv
158.723 14.0625 158.348 13.875 157.973 13.875 cv
157.598 13.875 157.223 14.0625 156.91 14.3125 cv
156.66 14.625 156.473 15 156.473 15.375 cv
156.473 15.75 156.66 16.125 156.91 16.4375 cv
157.223 16.6875 157.598 16.875 157.973 16.875 cv
158.348 16.875 158.723 16.6875 159.035 16.4375 cv
159.285 16.125 159.473 15.75 159.473 15.375 cv
cp
f
160.848 13 mo
160.848 12.625 160.66 12.25 160.41 11.9375 cv
160.098 11.6875 159.723 11.5 159.348 11.5 cv
158.973 11.5 158.598 11.6875 158.285 11.9375 cv
158.035 12.25 157.848 12.625 157.848 13 cv
157.848 13.375 158.035 13.75 158.285 14.0625 cv
158.598 14.3125 158.973 14.5 159.348 14.5 cv
159.723 14.5 160.098 14.3125 160.41 14.0625 cv
160.66 13.75 160.848 13.375 160.848 13 cv
cp
f
162.223 12 mo
162.223 11.625 162.035 11.25 161.785 10.9375 cv
161.473 10.6875 161.098 10.5 160.723 10.5 cv
160.348 10.5 159.973 10.6875 159.66 10.9375 cv
159.41 11.25 159.223 11.625 159.223 12 cv
159.223 12.375 159.41 12.75 159.66 13.0625 cv
159.973 13.3125 160.348 13.5 160.723 13.5 cv
161.098 13.5 161.473 13.3125 161.785 13.0625 cv
162.035 12.75 162.223 12.375 162.223 12 cv
cp
f
163.598 9.625 mo
163.598 9.25 163.41 8.875 163.16 8.5625 cv
162.848 8.3125 162.473 8.125 162.098 8.125 cv
161.723 8.125 161.348 8.3125 161.035 8.5625 cv
160.785 8.875 160.598 9.25 160.598 9.625 cv
160.598 10 160.785 10.375 161.035 10.6875 cv
161.348 10.9375 161.723 11.125 162.098 11.125 cv
162.473 11.125 162.848 10.9375 163.16 10.6875 cv
163.41 10.375 163.598 10 163.598 9.625 cv
cp
f
164.973 9.4375 mo
164.973 9.0625 164.785 8.6875 164.535 8.375 cv
164.223 8.125 163.848 7.9375 163.473 7.9375 cv
163.098 7.9375 162.723 8.125 162.41 8.375 cv
162.16 8.6875 161.973 9.0625 161.973 9.4375 cv
161.973 9.8125 162.16 10.1875 162.41 10.5 cv
162.723 10.75 163.098 10.9375 163.473 10.9375 cv
163.848 10.9375 164.223 10.75 164.535 10.5 cv
164.785 10.1875 164.973 9.8125 164.973 9.4375 cv
cp
f
166.348 8.9375 mo
166.348 8.5625 166.16 8.1875 165.91 7.875 cv
165.598 7.625 165.223 7.4375 164.848 7.4375 cv
164.473 7.4375 164.098 7.625 163.785 7.875 cv
163.535 8.1875 163.348 8.5625 163.348 8.9375 cv
163.348 9.3125 163.535 9.6875 163.785 10 cv
164.098 10.25 164.473 10.4375 164.848 10.4375 cv
165.223 10.4375 165.598 10.25 165.91 10 cv
166.16 9.6875 166.348 9.3125 166.348 8.9375 cv
cp
f
167.723 9.9375 mo
167.723 9.5625 167.535 9.1875 167.285 8.875 cv
166.973 8.625 166.598 8.4375 166.223 8.4375 cv
165.848 8.4375 165.473 8.625 165.16 8.875 cv
164.91 9.1875 164.723 9.5625 164.723 9.9375 cv
164.723 10.3125 164.91 10.6875 165.16 11 cv
165.473 11.25 165.848 11.4375 166.223 11.4375 cv
166.598 11.4375 166.973 11.25 167.285 11 cv
167.535 10.6875 167.723 10.3125 167.723 9.9375 cv
cp
f
169.098 10 mo
169.098 9.625 168.91 9.25 168.66 8.9375 cv
168.348 8.6875 167.973 8.5 167.598 8.5 cv
167.223 8.5 166.848 8.6875 166.535 8.9375 cv
166.285 9.25 166.098 9.625 166.098 10 cv
166.098 10.375 166.285 10.75 166.535 11.0625 cv
166.848 11.3125 167.223 11.5 167.598 11.5 cv
167.973 11.5 168.348 11.3125 168.66 11.0625 cv
168.91 10.75 169.098 10.375 169.098 10 cv
cp
f
170.473 12 mo
170.473 11.625 170.285 11.25 170.035 10.9375 cv
169.723 10.6875 169.348 10.5 168.973 10.5 cv
168.598 10.5 168.223 10.6875 167.91 10.9375 cv
167.66 11.25 167.473 11.625 167.473 12 cv
167.473 12.375 167.66 12.75 167.91 13.0625 cv
168.223 13.3125 168.598 13.5 168.973 13.5 cv
169.348 13.5 169.723 13.3125 170.035 13.0625 cv
170.285 12.75 170.473 12.375 170.473 12 cv
cp
f
171.848 13.8125 mo
171.848 13.4375 171.66 13.0625 171.41 12.75 cv
171.098 12.5 170.723 12.3125 170.348 12.3125 cv
169.973 12.3125 169.598 12.5 169.285 12.75 cv
169.035 13.0625 168.848 13.4375 168.848 13.8125 cv
168.848 14.1875 169.035 14.5625 169.285 14.875 cv
169.598 15.125 169.973 15.3125 170.348 15.3125 cv
170.723 15.3125 171.098 15.125 171.41 14.875 cv
171.66 14.5625 171.848 14.1875 171.848 13.8125 cv
cp
f
173.223 18.25 mo
173.223 17.875 173.035 17.5 172.785 17.1875 cv
172.473 16.9375 172.098 16.75 171.723 16.75 cv
171.348 16.75 170.973 16.9375 170.66 17.1875 cv
170.41 17.5 170.223 17.875 170.223 18.25 cv
170.223 18.625 170.41 19 170.66 19.3125 cv
170.973 19.5625 171.348 19.75 171.723 19.75 cv
172.098 19.75 172.473 19.5625 172.785 19.3125 cv
173.035 19 173.223 18.625 173.223 18.25 cv
cp
f
174.598 19.375 mo
174.598 19 174.41 18.625 174.16 18.3125 cv
173.848 18.0625 173.473 17.875 173.098 17.875 cv
172.723 17.875 172.348 18.0625 172.035 18.3125 cv
171.785 18.625 171.598 19 171.598 19.375 cv
171.598 19.75 171.785 20.125 172.035 20.4375 cv
172.348 20.6875 172.723 20.875 173.098 20.875 cv
173.473 20.875 173.848 20.6875 174.16 20.4375 cv
174.41 20.125 174.598 19.75 174.598 19.375 cv
cp
f
175.973 23.875 mo
175.973 23.5 175.785 23.125 175.535 22.8125 cv
175.223 22.5625 174.848 22.375 174.473 22.375 cv
174.098 22.375 173.723 22.5625 173.41 22.8125 cv
173.16 23.125 172.973 23.5 172.973 23.875 cv
172.973 24.25 173.16 24.625 173.41 24.9375 cv
173.723 25.1875 174.098 25.375 174.473 25.375 cv
174.848 25.375 175.223 25.1875 175.535 24.9375 cv
175.785 24.625 175.973 24.25 175.973 23.875 cv
cp
f
177.348 27.8125 mo
177.348 27.4375 177.16 27.0625 176.91 26.75 cv
176.598 26.5 176.223 26.3125 175.848 26.3125 cv
175.473 26.3125 175.098 26.5 174.785 26.75 cv
174.535 27.0625 174.348 27.4375 174.348 27.8125 cv
174.348 28.1875 174.535 28.5625 174.785 28.875 cv
175.098 29.125 175.473 29.3125 175.848 29.3125 cv
176.223 29.3125 176.598 29.125 176.91 28.875 cv
177.16 28.5625 177.348 28.1875 177.348 27.8125 cv
cp
f
178.723 33 mo
178.723 32.625 178.535 32.25 178.285 31.9375 cv
177.973 31.6875 177.598 31.5 177.223 31.5 cv
176.848 31.5 176.473 31.6875 176.16 31.9375 cv
175.91 32.25 175.723 32.625 175.723 33 cv
175.723 33.375 175.91 33.75 176.16 34.0625 cv
176.473 34.3125 176.848 34.5 177.223 34.5 cv
177.598 34.5 177.973 34.3125 178.285 34.0625 cv
178.535 33.75 178.723 33.375 178.723 33 cv
cp
f
180.098 38.4375 mo
180.098 38.0625 179.91 37.6875 179.66 37.375 cv
179.348 37.125 178.973 36.9375 178.598 36.9375 cv
178.223 36.9375 177.848 37.125 177.535 37.375 cv
177.285 37.6875 177.098 38.0625 177.098 38.4375 cv
177.098 38.8125 177.285 39.1875 177.535 39.5 cv
177.848 39.75 178.223 39.9375 178.598 39.9375 cv
178.973 39.9375 179.348 39.75 179.66 39.5 cv
179.91 39.1875 180.098 38.8125 180.098 38.4375 cv
cp
f
181.473 42.8125 mo
181.473 42.4375 181.285 42.0625 181.035 41.75 cv
180.723 41.5 180.348 41.3125 179.973 41.3125 cv
179.598 41.3125 179.223 41.5 178.91 41.75 cv
178.66 42.0625 178.473 42.4375 178.473 42.8125 cv
178.473 43.1875 178.66 43.5625 178.91 43.875 cv
179.223 44.125 179.598 44.3125 179.973 44.3125 cv
180.348 44.3125 180.723 44.125 181.035 43.875 cv
181.285 43.5625 181.473 43.1875 181.473 42.8125 cv
cp
f
182.848 48.5625 mo
182.848 48.1875 182.66 47.8125 182.41 47.5 cv
182.098 47.25 181.723 47.0625 181.348 47.0625 cv
180.973 47.0625 180.598 47.25 180.285 47.5 cv
180.035 47.8125 179.848 48.1875 179.848 48.5625 cv
179.848 48.9375 180.035 49.3125 180.285 49.625 cv
180.598 49.875 180.973 50.0625 181.348 50.0625 cv
181.723 50.0625 182.098 49.875 182.41 49.625 cv
182.66 49.3125 182.848 48.9375 182.848 48.5625 cv
cp
f
184.223 54.25 mo
184.223 53.875 184.035 53.5 183.785 53.1875 cv
183.473 52.9375 183.098 52.75 182.723 52.75 cv
182.348 52.75 181.973 52.9375 181.66 53.1875 cv
181.41 53.5 181.223 53.875 181.223 54.25 cv
181.223 54.625 181.41 55 181.66 55.3125 cv
181.973 55.5625 182.348 55.75 182.723 55.75 cv
183.098 55.75 183.473 55.5625 183.785 55.3125 cv
184.035 55 184.223 54.625 184.223 54.25 cv
cp
f
185.598 60.125 mo
185.598 59.75 185.41 59.375 185.16 59.0625 cv
184.848 58.8125 184.473 58.625 184.098 58.625 cv
183.723 58.625 183.348 58.8125 183.035 59.0625 cv
182.785 59.375 182.598 59.75 182.598 60.125 cv
182.598 60.5 182.785 60.875 183.035 61.1875 cv
183.348 61.4375 183.723 61.625 184.098 61.625 cv
184.473 61.625 184.848 61.4375 185.16 61.1875 cv
185.41 60.875 185.598 60.5 185.598 60.125 cv
cp
f
187.035 66.0625 mo
187.035 65.6875 186.848 65.3125 186.598 65 cv
186.285 64.75 185.91 64.5625 185.535 64.5625 cv
185.16 64.5625 184.785 64.75 184.473 65 cv
184.223 65.3125 184.035 65.6875 184.035 66.0625 cv
184.035 66.4375 184.223 66.8125 184.473 67.125 cv
184.785 67.375 185.16 67.5625 185.535 67.5625 cv
185.91 67.5625 186.285 67.375 186.598 67.125 cv
186.848 66.8125 187.035 66.4375 187.035 66.0625 cv
cp
f
188.41 70.1875 mo
188.41 69.8125 188.223 69.4375 187.973 69.125 cv
187.66 68.875 187.285 68.6875 186.91 68.6875 cv
186.535 68.6875 186.16 68.875 185.848 69.125 cv
185.598 69.4375 185.41 69.8125 185.41 70.1875 cv
185.41 70.5625 185.598 70.9375 185.848 71.25 cv
186.16 71.5 186.535 71.6875 186.91 71.6875 cv
187.285 71.6875 187.66 71.5 187.973 71.25 cv
188.223 70.9375 188.41 70.5625 188.41 70.1875 cv
cp
f
189.785 75.5625 mo
189.785 75.1875 189.598 74.8125 189.348 74.5 cv
189.035 74.25 188.66 74.0625 188.285 74.0625 cv
187.91 74.0625 187.535 74.25 187.223 74.5 cv
186.973 74.8125 186.785 75.1875 186.785 75.5625 cv
186.785 75.9375 186.973 76.3125 187.223 76.625 cv
187.535 76.875 187.91 77.0625 188.285 77.0625 cv
188.66 77.0625 189.035 76.875 189.348 76.625 cv
189.598 76.3125 189.785 75.9375 189.785 75.5625 cv
cp
f
191.16 80.5 mo
191.16 80.125 190.973 79.75 190.723 79.4375 cv
190.41 79.1875 190.035 79 189.66 79 cv
189.285 79 188.91 79.1875 188.598 79.4375 cv
188.348 79.75 188.16 80.125 188.16 80.5 cv
188.16 80.875 188.348 81.25 188.598 81.5625 cv
188.91 81.8125 189.285 82 189.66 82 cv
190.035 82 190.41 81.8125 190.723 81.5625 cv
190.973 81.25 191.16 80.875 191.16 80.5 cv
cp
f
192.535 85.875 mo
192.535 85.5 192.348 85.125 192.098 84.8125 cv
191.785 84.5625 191.41 84.375 191.035 84.375 cv
190.66 84.375 190.285 84.5625 189.973 84.8125 cv
189.723 85.125 189.535 85.5 189.535 85.875 cv
189.535 86.25 189.723 86.625 189.973 86.9375 cv
190.285 87.1875 190.66 87.375 191.035 87.375 cv
191.41 87.375 191.785 87.1875 192.098 86.9375 cv
192.348 86.625 192.535 86.25 192.535 85.875 cv
cp
f
193.91 90.4375 mo
193.91 90.0625 193.723 89.6875 193.473 89.375 cv
193.16 89.125 192.785 88.9375 192.41 88.9375 cv
192.035 88.9375 191.66 89.125 191.348 89.375 cv
191.098 89.6875 190.91 90.0625 190.91 90.4375 cv
190.91 90.8125 191.098 91.1875 191.348 91.5 cv
191.66 91.75 192.035 91.9375 192.41 91.9375 cv
192.785 91.9375 193.16 91.75 193.473 91.5 cv
193.723 91.1875 193.91 90.8125 193.91 90.4375 cv
cp
f
195.285 94.125 mo
195.285 93.75 195.098 93.375 194.848 93.0625 cv
194.535 92.8125 194.16 92.625 193.785 92.625 cv
193.41 92.625 193.035 92.8125 192.723 93.0625 cv
192.473 93.375 192.285 93.75 192.285 94.125 cv
192.285 94.5 192.473 94.875 192.723 95.1875 cv
193.035 95.4375 193.41 95.625 193.785 95.625 cv
194.16 95.625 194.535 95.4375 194.848 95.1875 cv
195.098 94.875 195.285 94.5 195.285 94.125 cv
cp
f
196.66 98.375 mo
196.66 98 196.473 97.625 196.223 97.3125 cv
195.91 97.0625 195.535 96.875 195.16 96.875 cv
194.785 96.875 194.41 97.0625 194.098 97.3125 cv
193.848 97.625 193.66 98 193.66 98.375 cv
193.66 98.75 193.848 99.125 194.098 99.4375 cv
194.41 99.6875 194.785 99.875 195.16 99.875 cv
195.535 99.875 195.91 99.6875 196.223 99.4375 cv
196.473 99.125 196.66 98.75 196.66 98.375 cv
cp
f
198.035 102.563 mo
198.035 102.188 197.848 101.813 197.598 101.5 cv
197.285 101.25 196.91 101.063 196.535 101.063 cv
196.16 101.063 195.785 101.25 195.473 101.5 cv
195.223 101.813 195.035 102.188 195.035 102.563 cv
195.035 102.938 195.223 103.313 195.473 103.625 cv
195.785 103.875 196.16 104.063 196.535 104.063 cv
196.91 104.063 197.285 103.875 197.598 103.625 cv
197.848 103.313 198.035 102.938 198.035 102.563 cv
cp
f
199.41 106.25 mo
199.41 105.875 199.223 105.5 198.973 105.188 cv
198.66 104.938 198.285 104.75 197.91 104.75 cv
197.535 104.75 197.16 104.938 196.848 105.188 cv
196.598 105.5 196.41 105.875 196.41 106.25 cv
196.41 106.625 196.598 107 196.848 107.313 cv
197.16 107.563 197.535 107.75 197.91 107.75 cv
198.285 107.75 198.66 107.563 198.973 107.313 cv
199.223 107 199.41 106.625 199.41 106.25 cv
cp
f
200.785 109.938 mo
200.785 109.563 200.598 109.188 200.348 108.875 cv
200.035 108.625 199.66 108.438 199.285 108.438 cv
198.91 108.438 198.535 108.625 198.223 108.875 cv
197.973 109.188 197.785 109.563 197.785 109.938 cv
197.785 110.313 197.973 110.688 198.223 111 cv
198.535 111.25 198.91 111.438 199.285 111.438 cv
199.66 111.438 200.035 111.25 200.348 111 cv
200.598 110.688 200.785 110.313 200.785 109.938 cv
cp
f
202.16 113.188 mo
202.16 112.813 201.973 112.438 201.723 112.125 cv
201.41 111.875 201.035 111.688 200.66 111.688 cv
200.285 111.688 199.91 111.875 199.598 112.125 cv
199.348 112.438 199.16 112.813 199.16 113.188 cv
199.16 113.563 199.348 113.938 199.598 114.25 cv
199.91 114.5 200.285 114.688 200.66 114.688 cv
201.035 114.688 201.41 114.5 201.723 114.25 cv
201.973 113.938 202.16 113.563 202.16 113.188 cv
cp
f
203.535 116.438 mo
203.535 116.063 203.348 115.688 203.098 115.375 cv
202.785 115.125 202.41 114.938 202.035 114.938 cv
201.66 114.938 201.285 115.125 200.973 115.375 cv
200.723 115.688 200.535 116.063 200.535 116.438 cv
200.535 116.813 200.723 117.188 200.973 117.5 cv
201.285 117.75 201.66 117.938 202.035 117.938 cv
202.41 117.938 202.785 117.75 203.098 117.5 cv
203.348 117.188 203.535 116.813 203.535 116.438 cv
cp
f
204.91 119.313 mo
204.91 118.938 204.723 118.563 204.473 118.25 cv
204.16 118 203.785 117.813 203.41 117.813 cv
203.035 117.813 202.66 118 202.348 118.25 cv
202.098 118.563 201.91 118.938 201.91 119.313 cv
201.91 119.688 202.098 120.063 202.348 120.375 cv
202.66 120.625 203.035 120.813 203.41 120.813 cv
203.785 120.813 204.16 120.625 204.473 120.375 cv
204.723 120.063 204.91 119.688 204.91 119.313 cv
cp
f
206.285 121.5 mo
206.285 121.125 206.098 120.75 205.848 120.438 cv
205.535 120.188 205.16 120 204.785 120 cv
204.41 120 204.035 120.188 203.723 120.438 cv
203.473 120.75 203.285 121.125 203.285 121.5 cv
203.285 121.875 203.473 122.25 203.723 122.563 cv
204.035 122.813 204.41 123 204.785 123 cv
205.16 123 205.535 122.813 205.848 122.563 cv
206.098 122.25 206.285 121.875 206.285 121.5 cv
cp
f
207.66 124.625 mo
207.66 124.25 207.473 123.875 207.223 123.563 cv
206.91 123.313 206.535 123.125 206.16 123.125 cv
205.785 123.125 205.41 123.313 205.098 123.563 cv
204.848 123.875 204.66 124.25 204.66 124.625 cv
204.66 125 204.848 125.375 205.098 125.688 cv
205.41 125.938 205.785 126.125 206.16 126.125 cv
206.535 126.125 206.91 125.938 207.223 125.688 cv
207.473 125.375 207.66 125 207.66 124.625 cv
cp
f
209.035 126.625 mo
209.035 126.25 208.848 125.875 208.598 125.563 cv
208.285 125.313 207.91 125.125 207.535 125.125 cv
207.16 125.125 206.785 125.313 206.473 125.563 cv
206.223 125.875 206.035 126.25 206.035 126.625 cv
206.035 127 206.223 127.375 206.473 127.688 cv
206.785 127.938 207.16 128.125 207.535 128.125 cv
207.91 128.125 208.285 127.938 208.598 127.688 cv
208.848 127.375 209.035 127 209.035 126.625 cv
cp
f
210.41 129.438 mo
210.41 129.063 210.223 128.688 209.973 128.375 cv
209.66 128.125 209.285 127.938 208.91 127.938 cv
208.535 127.938 208.16 128.125 207.848 128.375 cv
207.598 128.688 207.41 129.063 207.41 129.438 cv
207.41 129.813 207.598 130.188 207.848 130.5 cv
208.16 130.75 208.535 130.938 208.91 130.938 cv
209.285 130.938 209.66 130.75 209.973 130.5 cv
210.223 130.188 210.41 129.813 210.41 129.438 cv
cp
f
211.785 131.438 mo
211.785 131.063 211.598 130.688 211.348 130.375 cv
211.035 130.125 210.66 129.938 210.285 129.938 cv
209.91 129.938 209.535 130.125 209.223 130.375 cv
208.973 130.688 208.785 131.063 208.785 131.438 cv
208.785 131.813 208.973 132.188 209.223 132.5 cv
209.535 132.75 209.91 132.938 210.285 132.938 cv
210.66 132.938 211.035 132.75 211.348 132.5 cv
211.598 132.188 211.785 131.813 211.785 131.438 cv
cp
f
213.16 133.688 mo
213.16 133.313 212.973 132.938 212.723 132.625 cv
212.41 132.375 212.035 132.188 211.66 132.188 cv
211.285 132.188 210.91 132.375 210.598 132.625 cv
210.348 132.938 210.16 133.313 210.16 133.688 cv
210.16 134.063 210.348 134.438 210.598 134.75 cv
210.91 135 211.285 135.188 211.66 135.188 cv
212.035 135.188 212.41 135 212.723 134.75 cv
212.973 134.438 213.16 134.063 213.16 133.688 cv
cp
f
214.535 135.25 mo
214.535 134.875 214.348 134.5 214.098 134.188 cv
213.785 133.938 213.41 133.75 213.035 133.75 cv
212.66 133.75 212.285 133.938 211.973 134.188 cv
211.723 134.5 211.535 134.875 211.535 135.25 cv
211.535 135.625 211.723 136 211.973 136.313 cv
212.285 136.563 212.66 136.75 213.035 136.75 cv
213.41 136.75 213.785 136.563 214.098 136.313 cv
214.348 136 214.535 135.625 214.535 135.25 cv
cp
f
215.973 137.063 mo
215.973 136.688 215.785 136.313 215.535 136 cv
215.223 135.75 214.848 135.563 214.473 135.563 cv
214.098 135.563 213.723 135.75 213.41 136 cv
213.16 136.313 212.973 136.688 212.973 137.063 cv
212.973 137.438 213.16 137.813 213.41 138.125 cv
213.723 138.375 214.098 138.563 214.473 138.563 cv
214.848 138.563 215.223 138.375 215.535 138.125 cv
215.785 137.813 215.973 137.438 215.973 137.063 cv
cp
f
217.348 138.625 mo
217.348 138.25 217.16 137.875 216.91 137.563 cv
216.598 137.313 216.223 137.125 215.848 137.125 cv
215.473 137.125 215.098 137.313 214.785 137.563 cv
214.535 137.875 214.348 138.25 214.348 138.625 cv
214.348 139 214.535 139.375 214.785 139.688 cv
215.098 139.938 215.473 140.125 215.848 140.125 cv
216.223 140.125 216.598 139.938 216.91 139.688 cv
217.16 139.375 217.348 139 217.348 138.625 cv
cp
f
218.723 140.25 mo
218.723 139.875 218.535 139.5 218.285 139.188 cv
217.973 138.938 217.598 138.75 217.223 138.75 cv
216.848 138.75 216.473 138.938 216.16 139.188 cv
215.91 139.5 215.723 139.875 215.723 140.25 cv
215.723 140.625 215.91 141 216.16 141.313 cv
216.473 141.563 216.848 141.75 217.223 141.75 cv
217.598 141.75 217.973 141.563 218.285 141.313 cv
218.535 141 218.723 140.625 218.723 140.25 cv
cp
f
220.098 141.813 mo
220.098 141.438 219.91 141.063 219.66 140.75 cv
219.348 140.5 218.973 140.313 218.598 140.313 cv
218.223 140.313 217.848 140.5 217.535 140.75 cv
217.285 141.063 217.098 141.438 217.098 141.813 cv
217.098 142.188 217.285 142.563 217.535 142.875 cv
217.848 143.125 218.223 143.313 218.598 143.313 cv
218.973 143.313 219.348 143.125 219.66 142.875 cv
219.91 142.563 220.098 142.188 220.098 141.813 cv
cp
f
221.473 143.125 mo
221.473 142.75 221.285 142.375 221.035 142.063 cv
220.723 141.813 220.348 141.625 219.973 141.625 cv
219.598 141.625 219.223 141.813 218.91 142.063 cv
218.66 142.375 218.473 142.75 218.473 143.125 cv
218.473 143.5 218.66 143.875 218.91 144.188 cv
219.223 144.438 219.598 144.625 219.973 144.625 cv
220.348 144.625 220.723 144.438 221.035 144.188 cv
221.285 143.875 221.473 143.5 221.473 143.125 cv
cp
f
222.848 144.563 mo
222.848 144.188 222.66 143.813 222.41 143.5 cv
222.098 143.25 221.723 143.063 221.348 143.063 cv
220.973 143.063 220.598 143.25 220.285 143.5 cv
220.035 143.813 219.848 144.188 219.848 144.563 cv
219.848 144.938 220.035 145.313 220.285 145.625 cv
220.598 145.875 220.973 146.063 221.348 146.063 cv
221.723 146.063 222.098 145.875 222.41 145.625 cv
222.66 145.313 222.848 144.938 222.848 144.563 cv
cp
f
224.223 145.75 mo
224.223 145.375 224.035 145 223.785 144.688 cv
223.473 144.438 223.098 144.25 222.723 144.25 cv
222.348 144.25 221.973 144.438 221.66 144.688 cv
221.41 145 221.223 145.375 221.223 145.75 cv
221.223 146.125 221.41 146.5 221.66 146.813 cv
221.973 147.063 222.348 147.25 222.723 147.25 cv
223.098 147.25 223.473 147.063 223.785 146.813 cv
224.035 146.5 224.223 146.125 224.223 145.75 cv
cp
f
225.598 146.813 mo
225.598 146.438 225.41 146.063 225.16 145.75 cv
224.848 145.5 224.473 145.313 224.098 145.313 cv
223.723 145.313 223.348 145.5 223.035 145.75 cv
222.785 146.063 222.598 146.438 222.598 146.813 cv
222.598 147.188 222.785 147.563 223.035 147.875 cv
223.348 148.125 223.723 148.313 224.098 148.313 cv
224.473 148.313 224.848 148.125 225.16 147.875 cv
225.41 147.563 225.598 147.188 225.598 146.813 cv
cp
f
226.973 148.188 mo
226.973 147.813 226.785 147.438 226.535 147.125 cv
226.223 146.875 225.848 146.688 225.473 146.688 cv
225.098 146.688 224.723 146.875 224.41 147.125 cv
224.16 147.438 223.973 147.813 223.973 148.188 cv
223.973 148.563 224.16 148.938 224.41 149.25 cv
224.723 149.5 225.098 149.688 225.473 149.688 cv
225.848 149.688 226.223 149.5 226.535 149.25 cv
226.785 148.938 226.973 148.563 226.973 148.188 cv
cp
f
228.348 148.938 mo
228.348 148.563 228.16 148.188 227.91 147.875 cv
227.598 147.625 227.223 147.438 226.848 147.438 cv
226.473 147.438 226.098 147.625 225.785 147.875 cv
225.535 148.188 225.348 148.563 225.348 148.938 cv
225.348 149.313 225.535 149.688 225.785 150 cv
226.098 150.25 226.473 150.438 226.848 150.438 cv
227.223 150.438 227.598 150.25 227.91 150 cv
228.16 149.688 228.348 149.313 228.348 148.938 cv
cp
f
229.723 150.5 mo
229.723 150.125 229.535 149.75 229.285 149.438 cv
228.973 149.188 228.598 149 228.223 149 cv
227.848 149 227.473 149.188 227.16 149.438 cv
226.91 149.75 226.723 150.125 226.723 150.5 cv
226.723 150.875 226.91 151.25 227.16 151.563 cv
227.473 151.813 227.848 152 228.223 152 cv
228.598 152 228.973 151.813 229.285 151.563 cv
229.535 151.25 229.723 150.875 229.723 150.5 cv
cp
f
231.098 150.625 mo
231.098 150.25 230.91 149.875 230.66 149.563 cv
230.348 149.313 229.973 149.125 229.598 149.125 cv
229.223 149.125 228.848 149.313 228.535 149.563 cv
228.285 149.875 228.098 150.25 228.098 150.625 cv
228.098 151 228.285 151.375 228.535 151.688 cv
228.848 151.938 229.223 152.125 229.598 152.125 cv
229.973 152.125 230.348 151.938 230.66 151.688 cv
230.91 151.375 231.098 151 231.098 150.625 cv
cp
f
232.473 152.063 mo
232.473 151.688 232.285 151.313 232.035 151 cv
231.723 150.75 231.348 150.563 230.973 150.563 cv
230.598 150.563 230.223 150.75 229.91 151 cv
229.66 151.313 229.473 151.688 229.473 152.063 cv
229.473 152.438 229.66 152.813 229.91 153.125 cv
230.223 153.375 230.598 153.563 230.973 153.563 cv
231.348 153.563 231.723 153.375 232.035 153.125 cv
232.285 152.813 232.473 152.438 232.473 152.063 cv
cp
f
233.848 152.813 mo
233.848 152.438 233.66 152.063 233.41 151.75 cv
233.098 151.5 232.723 151.313 232.348 151.313 cv
231.973 151.313 231.598 151.5 231.285 151.75 cv
231.035 152.063 230.848 152.438 230.848 152.813 cv
230.848 153.188 231.035 153.563 231.285 153.875 cv
231.598 154.125 231.973 154.313 232.348 154.313 cv
232.723 154.313 233.098 154.125 233.41 153.875 cv
233.66 153.563 233.848 153.188 233.848 152.813 cv
cp
f
235.223 153.75 mo
235.223 153.375 235.035 153 234.785 152.688 cv
234.473 152.438 234.098 152.25 233.723 152.25 cv
233.348 152.25 232.973 152.438 232.66 152.688 cv
232.41 153 232.223 153.375 232.223 153.75 cv
232.223 154.125 232.41 154.5 232.66 154.813 cv
232.973 155.063 233.348 155.25 233.723 155.25 cv
234.098 155.25 234.473 155.063 234.785 154.813 cv
235.035 154.5 235.223 154.125 235.223 153.75 cv
cp
f
236.598 154.375 mo
236.598 154 236.41 153.625 236.16 153.313 cv
235.848 153.063 235.473 152.875 235.098 152.875 cv
234.723 152.875 234.348 153.063 234.035 153.313 cv
233.785 153.625 233.598 154 233.598 154.375 cv
233.598 154.75 233.785 155.125 234.035 155.438 cv
234.348 155.688 234.723 155.875 235.098 155.875 cv
235.473 155.875 235.848 155.688 236.16 155.438 cv
236.41 155.125 236.598 154.75 236.598 154.375 cv
cp
f
237.973 155.125 mo
237.973 154.75 237.785 154.375 237.535 154.063 cv
237.223 153.813 236.848 153.625 236.473 153.625 cv
236.098 153.625 235.723 153.813 235.41 154.063 cv
235.16 154.375 234.973 154.75 234.973 155.125 cv
234.973 155.5 235.16 155.875 235.41 156.188 cv
235.723 156.438 236.098 156.625 236.473 156.625 cv
236.848 156.625 237.223 156.438 237.535 156.188 cv
237.785 155.875 237.973 155.5 237.973 155.125 cv
cp
f
239.348 155.875 mo
239.348 155.5 239.16 155.125 238.91 154.813 cv
238.598 154.563 238.223 154.375 237.848 154.375 cv
237.473 154.375 237.098 154.563 236.785 154.813 cv
236.535 155.125 236.348 155.5 236.348 155.875 cv
236.348 156.25 236.535 156.625 236.785 156.938 cv
237.098 157.188 237.473 157.375 237.848 157.375 cv
238.223 157.375 238.598 157.188 238.91 156.938 cv
239.16 156.625 239.348 156.25 239.348 155.875 cv
cp
f
240.723 156.438 mo
240.723 156.063 240.535 155.688 240.285 155.375 cv
239.973 155.125 239.598 154.938 239.223 154.938 cv
238.848 154.938 238.473 155.125 238.16 155.375 cv
237.91 155.688 237.723 156.063 237.723 156.438 cv
237.723 156.813 237.91 157.188 238.16 157.5 cv
238.473 157.75 238.848 157.938 239.223 157.938 cv
239.598 157.938 239.973 157.75 240.285 157.5 cv
240.535 157.188 240.723 156.813 240.723 156.438 cv
cp
f
242.098 157.313 mo
242.098 156.938 241.91 156.563 241.66 156.25 cv
241.348 156 240.973 155.813 240.598 155.813 cv
240.223 155.813 239.848 156 239.535 156.25 cv
239.285 156.563 239.098 156.938 239.098 157.313 cv
239.098 157.688 239.285 158.063 239.535 158.375 cv
239.848 158.625 240.223 158.813 240.598 158.813 cv
240.973 158.813 241.348 158.625 241.66 158.375 cv
241.91 158.063 242.098 157.688 242.098 157.313 cv
cp
f
243.473 157.938 mo
243.473 157.563 243.285 157.188 243.035 156.875 cv
242.723 156.625 242.348 156.438 241.973 156.438 cv
241.598 156.438 241.223 156.625 240.91 156.875 cv
240.66 157.188 240.473 157.563 240.473 157.938 cv
240.473 158.313 240.66 158.688 240.91 159 cv
241.223 159.25 241.598 159.438 241.973 159.438 cv
242.348 159.438 242.723 159.25 243.035 159 cv
243.285 158.688 243.473 158.313 243.473 157.938 cv
cp
f
244.91 158.313 mo
244.91 157.938 244.723 157.563 244.473 157.25 cv
244.16 157 243.785 156.813 243.41 156.813 cv
243.035 156.813 242.66 157 242.348 157.25 cv
242.098 157.563 241.91 157.938 241.91 158.313 cv
241.91 158.688 242.098 159.063 242.348 159.375 cv
242.66 159.625 243.035 159.813 243.41 159.813 cv
243.785 159.813 244.16 159.625 244.473 159.375 cv
244.723 159.063 244.91 158.688 244.91 158.313 cv
cp
f
246.285 158.875 mo
246.285 158.5 246.098 158.125 245.848 157.813 cv
245.535 157.563 245.16 157.375 244.785 157.375 cv
244.41 157.375 244.035 157.563 243.723 157.813 cv
243.473 158.125 243.285 158.5 243.285 158.875 cv
243.285 159.25 243.473 159.625 243.723 159.938 cv
244.035 160.188 244.41 160.375 244.785 160.375 cv
245.16 160.375 245.535 160.188 245.848 159.938 cv
246.098 159.625 246.285 159.25 246.285 158.875 cv
cp
f
247.66 159.438 mo
247.66 159.063 247.473 158.688 247.223 158.375 cv
246.91 158.125 246.535 157.938 246.16 157.938 cv
245.785 157.938 245.41 158.125 245.098 158.375 cv
244.848 158.688 244.66 159.063 244.66 159.438 cv
244.66 159.813 244.848 160.188 245.098 160.5 cv
245.41 160.75 245.785 160.938 246.16 160.938 cv
246.535 160.938 246.91 160.75 247.223 160.5 cv
247.473 160.188 247.66 159.813 247.66 159.438 cv
cp
f
249.035 160 mo
249.035 159.625 248.848 159.25 248.598 158.938 cv
248.285 158.688 247.91 158.5 247.535 158.5 cv
247.16 158.5 246.785 158.688 246.473 158.938 cv
246.223 159.25 246.035 159.625 246.035 160 cv
246.035 160.375 246.223 160.75 246.473 161.063 cv
246.785 161.313 247.16 161.5 247.535 161.5 cv
247.91 161.5 248.285 161.313 248.598 161.063 cv
248.848 160.75 249.035 160.375 249.035 160 cv
cp
f
250.41 160.375 mo
250.41 160 250.223 159.625 249.973 159.313 cv
249.66 159.063 249.285 158.875 248.91 158.875 cv
248.535 158.875 248.16 159.063 247.848 159.313 cv
247.598 159.625 247.41 160 247.41 160.375 cv
247.41 160.75 247.598 161.125 247.848 161.438 cv
248.16 161.688 248.535 161.875 248.91 161.875 cv
249.285 161.875 249.66 161.688 249.973 161.438 cv
250.223 161.125 250.41 160.75 250.41 160.375 cv
cp
f
251.785 161.063 mo
251.785 160.688 251.598 160.313 251.348 160 cv
251.035 159.75 250.66 159.563 250.285 159.563 cv
249.91 159.563 249.535 159.75 249.223 160 cv
248.973 160.313 248.785 160.688 248.785 161.063 cv
248.785 161.438 248.973 161.813 249.223 162.125 cv
249.535 162.375 249.91 162.563 250.285 162.563 cv
250.66 162.563 251.035 162.375 251.348 162.125 cv
251.598 161.813 251.785 161.438 251.785 161.063 cv
cp
f
253.16 161.688 mo
253.16 161.313 252.973 160.938 252.723 160.625 cv
252.41 160.375 252.035 160.188 251.66 160.188 cv
251.285 160.188 250.91 160.375 250.598 160.625 cv
250.348 160.938 250.16 161.313 250.16 161.688 cv
250.16 162.063 250.348 162.438 250.598 162.75 cv
250.91 163 251.285 163.188 251.66 163.188 cv
252.035 163.188 252.41 163 252.723 162.75 cv
252.973 162.438 253.16 162.063 253.16 161.688 cv
cp
f
254.535 161.875 mo
254.535 161.5 254.348 161.125 254.098 160.813 cv
253.785 160.563 253.41 160.375 253.035 160.375 cv
252.66 160.375 252.285 160.563 251.973 160.813 cv
251.723 161.125 251.535 161.5 251.535 161.875 cv
251.535 162.25 251.723 162.625 251.973 162.938 cv
252.285 163.188 252.66 163.375 253.035 163.375 cv
253.41 163.375 253.785 163.188 254.098 162.938 cv
254.348 162.625 254.535 162.25 254.535 161.875 cv
cp
f
255.91 162.438 mo
255.91 162.063 255.723 161.688 255.473 161.375 cv
255.16 161.125 254.785 160.938 254.41 160.938 cv
254.035 160.938 253.66 161.125 253.348 161.375 cv
253.098 161.688 252.91 162.063 252.91 162.438 cv
252.91 162.813 253.098 163.188 253.348 163.5 cv
253.66 163.75 254.035 163.938 254.41 163.938 cv
254.785 163.938 255.16 163.75 255.473 163.5 cv
255.723 163.188 255.91 162.813 255.91 162.438 cv
cp
f
257.285 162.688 mo
257.285 162.313 257.098 161.938 256.848 161.625 cv
256.535 161.375 256.16 161.188 255.785 161.188 cv
255.41 161.188 255.035 161.375 254.723 161.625 cv
254.473 161.938 254.285 162.313 254.285 162.688 cv
254.285 163.063 254.473 163.438 254.723 163.75 cv
255.035 164 255.41 164.188 255.785 164.188 cv
256.16 164.188 256.535 164 256.848 163.75 cv
257.098 163.438 257.285 163.063 257.285 162.688 cv
cp
f
258.66 163.063 mo
258.66 162.688 258.473 162.313 258.223 162 cv
257.91 161.75 257.535 161.563 257.16 161.563 cv
256.785 161.563 256.41 161.75 256.098 162 cv
255.848 162.313 255.66 162.688 255.66 163.063 cv
255.66 163.438 255.848 163.813 256.098 164.125 cv
256.41 164.375 256.785 164.563 257.16 164.563 cv
257.535 164.563 257.91 164.375 258.223 164.125 cv
258.473 163.813 258.66 163.438 258.66 163.063 cv
cp
f
260.035 163.5 mo
260.035 163.125 259.848 162.75 259.598 162.438 cv
259.285 162.188 258.91 162 258.535 162 cv
258.16 162 257.785 162.188 257.473 162.438 cv
257.223 162.75 257.035 163.125 257.035 163.5 cv
257.035 163.875 257.223 164.25 257.473 164.563 cv
257.785 164.813 258.16 165 258.535 165 cv
258.91 165 259.285 164.813 259.598 164.563 cv
259.848 164.25 260.035 163.875 260.035 163.5 cv
cp
f
261.41 163.938 mo
261.41 163.563 261.223 163.188 260.973 162.875 cv
260.66 162.625 260.285 162.438 259.91 162.438 cv
259.535 162.438 259.16 162.625 258.848 162.875 cv
258.598 163.188 258.41 163.563 258.41 163.938 cv
258.41 164.313 258.598 164.688 258.848 165 cv
259.16 165.25 259.535 165.438 259.91 165.438 cv
260.285 165.438 260.66 165.25 260.973 165 cv
261.223 164.688 261.41 164.313 261.41 163.938 cv
cp
f
262.785 164.063 mo
262.785 163.688 262.598 163.313 262.348 163 cv
262.035 162.75 261.66 162.563 261.285 162.563 cv
260.91 162.563 260.535 162.75 260.223 163 cv
259.973 163.313 259.785 163.688 259.785 164.063 cv
259.785 164.438 259.973 164.813 260.223 165.125 cv
260.535 165.375 260.91 165.563 261.285 165.563 cv
261.66 165.563 262.035 165.375 262.348 165.125 cv
262.598 164.813 262.785 164.438 262.785 164.063 cv
cp
f
264.16 164.625 mo
264.16 164.25 263.973 163.875 263.723 163.563 cv
263.41 163.313 263.035 163.125 262.66 163.125 cv
262.285 163.125 261.91 163.313 261.598 163.563 cv
261.348 163.875 261.16 164.25 261.16 164.625 cv
261.16 165 261.348 165.375 261.598 165.688 cv
261.91 165.938 262.285 166.125 262.66 166.125 cv
263.035 166.125 263.41 165.938 263.723 165.688 cv
263.973 165.375 264.16 165 264.16 164.625 cv
cp
f
265.535 164.75 mo
265.535 164.375 265.348 164 265.098 163.688 cv
264.785 163.438 264.41 163.25 264.035 163.25 cv
263.66 163.25 263.285 163.438 262.973 163.688 cv
262.723 164 262.535 164.375 262.535 164.75 cv
262.535 165.125 262.723 165.5 262.973 165.813 cv
263.285 166.063 263.66 166.25 264.035 166.25 cv
264.41 166.25 264.785 166.063 265.098 165.813 cv
265.348 165.5 265.535 165.125 265.535 164.75 cv
cp
f
266.91 165.063 mo
266.91 164.688 266.723 164.313 266.473 164 cv
266.16 163.75 265.785 163.563 265.41 163.563 cv
265.035 163.563 264.66 163.75 264.348 164 cv
264.098 164.313 263.91 164.688 263.91 165.063 cv
263.91 165.438 264.098 165.813 264.348 166.125 cv
264.66 166.375 265.035 166.563 265.41 166.563 cv
265.785 166.563 266.16 166.375 266.473 166.125 cv
266.723 165.813 266.91 165.438 266.91 165.063 cv
cp
f
268.285 165.438 mo
268.285 165.063 268.098 164.688 267.848 164.375 cv
267.535 164.125 267.16 163.938 266.785 163.938 cv
266.41 163.938 266.035 164.125 265.723 164.375 cv
265.473 164.688 265.285 165.063 265.285 165.438 cv
265.285 165.813 265.473 166.188 265.723 166.5 cv
266.035 166.75 266.41 166.938 266.785 166.938 cv
267.16 166.938 267.535 166.75 267.848 166.5 cv
268.098 166.188 268.285 165.813 268.285 165.438 cv
cp
f
269.66 166.125 mo
269.66 165.75 269.473 165.375 269.223 165.063 cv
268.91 164.813 268.535 164.625 268.16 164.625 cv
267.785 164.625 267.41 164.813 267.098 165.063 cv
266.848 165.375 266.66 165.75 266.66 166.125 cv
266.66 166.5 266.848 166.875 267.098 167.188 cv
267.41 167.438 267.785 167.625 268.16 167.625 cv
268.535 167.625 268.91 167.438 269.223 167.188 cv
269.473 166.875 269.66 166.5 269.66 166.125 cv
cp
f
271.035 165.813 mo
271.035 165.438 270.848 165.063 270.598 164.75 cv
270.285 164.5 269.91 164.313 269.535 164.313 cv
269.16 164.313 268.785 164.5 268.473 164.75 cv
268.223 165.063 268.035 165.438 268.035 165.813 cv
268.035 166.188 268.223 166.563 268.473 166.875 cv
268.785 167.125 269.16 167.313 269.535 167.313 cv
269.91 167.313 270.285 167.125 270.598 166.875 cv
270.848 166.563 271.035 166.188 271.035 165.813 cv
cp
f
272.41 166 mo
272.41 165.625 272.223 165.25 271.973 164.938 cv
271.66 164.688 271.285 164.5 270.91 164.5 cv
270.535 164.5 270.16 164.688 269.848 164.938 cv
269.598 165.25 269.41 165.625 269.41 166 cv
269.41 166.375 269.598 166.75 269.848 167.063 cv
270.16 167.313 270.535 167.5 270.91 167.5 cv
271.285 167.5 271.66 167.313 271.973 167.063 cv
272.223 166.75 272.41 166.375 272.41 166 cv
cp
f
273.848 166.438 mo
273.848 166.063 273.66 165.688 273.41 165.375 cv
273.098 165.125 272.723 164.938 272.348 164.938 cv
271.973 164.938 271.598 165.125 271.285 165.375 cv
271.035 165.688 270.848 166.063 270.848 166.438 cv
270.848 166.813 271.035 167.188 271.285 167.5 cv
271.598 167.75 271.973 167.938 272.348 167.938 cv
272.723 167.938 273.098 167.75 273.41 167.5 cv
273.66 167.188 273.848 166.813 273.848 166.438 cv
cp
f
275.223 166.938 mo
275.223 166.563 275.035 166.188 274.785 165.875 cv
274.473 165.625 274.098 165.438 273.723 165.438 cv
273.348 165.438 272.973 165.625 272.66 165.875 cv
272.41 166.188 272.223 166.563 272.223 166.938 cv
272.223 167.313 272.41 167.688 272.66 168 cv
272.973 168.25 273.348 168.438 273.723 168.438 cv
274.098 168.438 274.473 168.25 274.785 168 cv
275.035 167.688 275.223 167.313 275.223 166.938 cv
cp
f
276.598 167.125 mo
276.598 166.75 276.41 166.375 276.16 166.063 cv
275.848 165.813 275.473 165.625 275.098 165.625 cv
274.723 165.625 274.348 165.813 274.035 166.063 cv
273.785 166.375 273.598 166.75 273.598 167.125 cv
273.598 167.5 273.785 167.875 274.035 168.188 cv
274.348 168.438 274.723 168.625 275.098 168.625 cv
275.473 168.625 275.848 168.438 276.16 168.188 cv
276.41 167.875 276.598 167.5 276.598 167.125 cv
cp
f
277.973 167.25 mo
277.973 166.875 277.785 166.5 277.535 166.188 cv
277.223 165.938 276.848 165.75 276.473 165.75 cv
276.098 165.75 275.723 165.938 275.41 166.188 cv
275.16 166.5 274.973 166.875 274.973 167.25 cv
274.973 167.625 275.16 168 275.41 168.313 cv
275.723 168.563 276.098 168.75 276.473 168.75 cv
276.848 168.75 277.223 168.563 277.535 168.313 cv
277.785 168 277.973 167.625 277.973 167.25 cv
cp
f
279.348 167.563 mo
279.348 167.188 279.16 166.813 278.91 166.5 cv
278.598 166.25 278.223 166.063 277.848 166.063 cv
277.473 166.063 277.098 166.25 276.785 166.5 cv
276.535 166.813 276.348 167.188 276.348 167.563 cv
276.348 167.938 276.535 168.313 276.785 168.625 cv
277.098 168.875 277.473 169.063 277.848 169.063 cv
278.223 169.063 278.598 168.875 278.91 168.625 cv
279.16 168.313 279.348 167.938 279.348 167.563 cv
cp
f
280.723 167.563 mo
280.723 167.188 280.535 166.813 280.285 166.5 cv
279.973 166.25 279.598 166.063 279.223 166.063 cv
278.848 166.063 278.473 166.25 278.16 166.5 cv
277.91 166.813 277.723 167.188 277.723 167.563 cv
277.723 167.938 277.91 168.313 278.16 168.625 cv
278.473 168.875 278.848 169.063 279.223 169.063 cv
279.598 169.063 279.973 168.875 280.285 168.625 cv
280.535 168.313 280.723 167.938 280.723 167.563 cv
cp
f
282.098 167.875 mo
282.098 167.5 281.91 167.125 281.66 166.813 cv
281.348 166.563 280.973 166.375 280.598 166.375 cv
280.223 166.375 279.848 166.563 279.535 166.813 cv
279.285 167.125 279.098 167.5 279.098 167.875 cv
279.098 168.25 279.285 168.625 279.535 168.938 cv
279.848 169.188 280.223 169.375 280.598 169.375 cv
280.973 169.375 281.348 169.188 281.66 168.938 cv
281.91 168.625 282.098 168.25 282.098 167.875 cv
cp
f
283.473 168 mo
283.473 167.625 283.285 167.25 283.035 166.938 cv
282.723 166.688 282.348 166.5 281.973 166.5 cv
281.598 166.5 281.223 166.688 280.91 166.938 cv
280.66 167.25 280.473 167.625 280.473 168 cv
280.473 168.375 280.66 168.75 280.91 169.063 cv
281.223 169.313 281.598 169.5 281.973 169.5 cv
282.348 169.5 282.723 169.313 283.035 169.063 cv
283.285 168.75 283.473 168.375 283.473 168 cv
cp
f
284.848 168.313 mo
284.848 167.938 284.66 167.563 284.41 167.25 cv
284.098 167 283.723 166.813 283.348 166.813 cv
282.973 166.813 282.598 167 282.285 167.25 cv
282.035 167.563 281.848 167.938 281.848 168.313 cv
281.848 168.688 282.035 169.063 282.285 169.375 cv
282.598 169.625 282.973 169.813 283.348 169.813 cv
283.723 169.813 284.098 169.625 284.41 169.375 cv
284.66 169.063 284.848 168.688 284.848 168.313 cv
cp
f
286.223 168.313 mo
286.223 167.938 286.035 167.563 285.785 167.25 cv
285.473 167 285.098 166.813 284.723 166.813 cv
284.348 166.813 283.973 167 283.66 167.25 cv
283.41 167.563 283.223 167.938 283.223 168.313 cv
283.223 168.688 283.41 169.063 283.66 169.375 cv
283.973 169.625 284.348 169.813 284.723 169.813 cv
285.098 169.813 285.473 169.625 285.785 169.375 cv
286.035 169.063 286.223 168.688 286.223 168.313 cv
cp
f
287.598 168.625 mo
287.598 168.25 287.41 167.875 287.16 167.563 cv
286.848 167.313 286.473 167.125 286.098 167.125 cv
285.723 167.125 285.348 167.313 285.035 167.563 cv
284.785 167.875 284.598 168.25 284.598 168.625 cv
284.598 169 284.785 169.375 285.035 169.688 cv
285.348 169.938 285.723 170.125 286.098 170.125 cv
286.473 170.125 286.848 169.938 287.16 169.688 cv
287.41 169.375 287.598 169 287.598 168.625 cv
cp
f
288.973 168.813 mo
288.973 168.438 288.785 168.063 288.535 167.75 cv
288.223 167.5 287.848 167.313 287.473 167.313 cv
287.098 167.313 286.723 167.5 286.41 167.75 cv
286.16 168.063 285.973 168.438 285.973 168.813 cv
285.973 169.188 286.16 169.563 286.41 169.875 cv
286.723 170.125 287.098 170.313 287.473 170.313 cv
287.848 170.313 288.223 170.125 288.535 169.875 cv
288.785 169.563 288.973 169.188 288.973 168.813 cv
cp
f
290.348 168.875 mo
290.348 168.5 290.16 168.125 289.91 167.813 cv
289.598 167.563 289.223 167.375 288.848 167.375 cv
288.473 167.375 288.098 167.563 287.785 167.813 cv
287.535 168.125 287.348 168.5 287.348 168.875 cv
287.348 169.25 287.535 169.625 287.785 169.938 cv
288.098 170.188 288.473 170.375 288.848 170.375 cv
289.223 170.375 289.598 170.188 289.91 169.938 cv
290.16 169.625 290.348 169.25 290.348 168.875 cv
cp
f
291.723 169 mo
291.723 168.625 291.535 168.25 291.285 167.938 cv
290.973 167.688 290.598 167.5 290.223 167.5 cv
289.848 167.5 289.473 167.688 289.16 167.938 cv
288.91 168.25 288.723 168.625 288.723 169 cv
288.723 169.375 288.91 169.75 289.16 170.063 cv
289.473 170.313 289.848 170.5 290.223 170.5 cv
290.598 170.5 290.973 170.313 291.285 170.063 cv
291.535 169.75 291.723 169.375 291.723 169 cv
cp
f
293.098 169.25 mo
293.098 168.875 292.91 168.5 292.66 168.188 cv
292.348 167.938 291.973 167.75 291.598 167.75 cv
291.223 167.75 290.848 167.938 290.535 168.188 cv
290.285 168.5 290.098 168.875 290.098 169.25 cv
290.098 169.625 290.285 170 290.535 170.313 cv
290.848 170.563 291.223 170.75 291.598 170.75 cv
291.973 170.75 292.348 170.563 292.66 170.313 cv
292.91 170 293.098 169.625 293.098 169.25 cv
cp
f
294.473 169.563 mo
294.473 169.188 294.285 168.813 294.035 168.5 cv
293.723 168.25 293.348 168.063 292.973 168.063 cv
292.598 168.063 292.223 168.25 291.91 168.5 cv
291.66 168.813 291.473 169.188 291.473 169.563 cv
291.473 169.938 291.66 170.313 291.91 170.625 cv
292.223 170.875 292.598 171.063 292.973 171.063 cv
293.348 171.063 293.723 170.875 294.035 170.625 cv
294.285 170.313 294.473 169.938 294.473 169.563 cv
cp
f
295.848 169.688 mo
295.848 169.313 295.66 168.938 295.41 168.625 cv
295.098 168.375 294.723 168.188 294.348 168.188 cv
293.973 168.188 293.598 168.375 293.285 168.625 cv
293.035 168.938 292.848 169.313 292.848 169.688 cv
292.848 170.063 293.035 170.438 293.285 170.75 cv
293.598 171 293.973 171.188 294.348 171.188 cv
294.723 171.188 295.098 171 295.41 170.75 cv
295.66 170.438 295.848 170.063 295.848 169.688 cv
cp
f
297.223 169.625 mo
297.223 169.25 297.035 168.875 296.785 168.563 cv
296.473 168.313 296.098 168.125 295.723 168.125 cv
295.348 168.125 294.973 168.313 294.66 168.563 cv
294.41 168.875 294.223 169.25 294.223 169.625 cv
294.223 170 294.41 170.375 294.66 170.688 cv
294.973 170.938 295.348 171.125 295.723 171.125 cv
296.098 171.125 296.473 170.938 296.785 170.688 cv
297.035 170.375 297.223 170 297.223 169.625 cv
cp
f
298.598 169.75 mo
298.598 169.375 298.41 169 298.16 168.688 cv
297.848 168.438 297.473 168.25 297.098 168.25 cv
296.723 168.25 296.348 168.438 296.035 168.688 cv
295.785 169 295.598 169.375 295.598 169.75 cv
295.598 170.125 295.785 170.5 296.035 170.813 cv
296.348 171.063 296.723 171.25 297.098 171.25 cv
297.473 171.25 297.848 171.063 298.16 170.813 cv
298.41 170.5 298.598 170.125 298.598 169.75 cv
cp
f
299.973 169.938 mo
299.973 169.563 299.785 169.188 299.535 168.875 cv
299.223 168.625 298.848 168.438 298.473 168.438 cv
298.098 168.438 297.723 168.625 297.41 168.875 cv
297.16 169.188 296.973 169.563 296.973 169.938 cv
296.973 170.313 297.16 170.688 297.41 171 cv
297.723 171.25 298.098 171.438 298.473 171.438 cv
298.848 171.438 299.223 171.25 299.535 171 cv
299.785 170.688 299.973 170.313 299.973 169.938 cv
cp
f
301.41 170.5 mo
301.41 170.125 301.223 169.75 300.973 169.438 cv
300.66 169.188 300.285 169 299.91 169 cv
299.535 169 299.16 169.188 298.848 169.438 cv
298.598 169.75 298.41 170.125 298.41 170.5 cv
298.41 170.875 298.598 171.25 298.848 171.563 cv
299.16 171.813 299.535 172 299.91 172 cv
300.285 172 300.66 171.813 300.973 171.563 cv
301.223 171.25 301.41 170.875 301.41 170.5 cv
cp
f
302.785 170.313 mo
302.785 169.938 302.598 169.563 302.348 169.25 cv
302.035 169 301.66 168.813 301.285 168.813 cv
300.91 168.813 300.535 169 300.223 169.25 cv
299.973 169.563 299.785 169.938 299.785 170.313 cv
299.785 170.688 299.973 171.063 300.223 171.375 cv
300.535 171.625 300.91 171.813 301.285 171.813 cv
301.66 171.813 302.035 171.625 302.348 171.375 cv
302.598 171.063 302.785 170.688 302.785 170.313 cv
cp
f
304.16 170.313 mo
304.16 169.938 303.973 169.563 303.723 169.25 cv
303.41 169 303.035 168.813 302.66 168.813 cv
302.285 168.813 301.91 169 301.598 169.25 cv
301.348 169.563 301.16 169.938 301.16 170.313 cv
301.16 170.688 301.348 171.063 301.598 171.375 cv
301.91 171.625 302.285 171.813 302.66 171.813 cv
303.035 171.813 303.41 171.625 303.723 171.375 cv
303.973 171.063 304.16 170.688 304.16 170.313 cv
cp
f
305.535 170.5 mo
305.535 170.125 305.348 169.75 305.098 169.438 cv
304.785 169.188 304.41 169 304.035 169 cv
303.66 169 303.285 169.188 302.973 169.438 cv
302.723 169.75 302.535 170.125 302.535 170.5 cv
302.535 170.875 302.723 171.25 302.973 171.563 cv
303.285 171.813 303.66 172 304.035 172 cv
304.41 172 304.785 171.813 305.098 171.563 cv
305.348 171.25 305.535 170.875 305.535 170.5 cv
cp
f
306.91 170.625 mo
306.91 170.25 306.723 169.875 306.473 169.563 cv
306.16 169.313 305.785 169.125 305.41 169.125 cv
305.035 169.125 304.66 169.313 304.348 169.563 cv
304.098 169.875 303.91 170.25 303.91 170.625 cv
303.91 171 304.098 171.375 304.348 171.688 cv
304.66 171.938 305.035 172.125 305.41 172.125 cv
305.785 172.125 306.16 171.938 306.473 171.688 cv
306.723 171.375 306.91 171 306.91 170.625 cv
cp
f
308.285 170.563 mo
308.285 170.188 308.098 169.813 307.848 169.5 cv
307.535 169.25 307.16 169.063 306.785 169.063 cv
306.41 169.063 306.035 169.25 305.723 169.5 cv
305.473 169.813 305.285 170.188 305.285 170.563 cv
305.285 170.938 305.473 171.313 305.723 171.625 cv
306.035 171.875 306.41 172.063 306.785 172.063 cv
307.16 172.063 307.535 171.875 307.848 171.625 cv
308.098 171.313 308.285 170.938 308.285 170.563 cv
cp
f
309.66 170.938 mo
309.66 170.563 309.473 170.188 309.223 169.875 cv
308.91 169.625 308.535 169.438 308.16 169.438 cv
307.785 169.438 307.41 169.625 307.098 169.875 cv
306.848 170.188 306.66 170.563 306.66 170.938 cv
306.66 171.313 306.848 171.688 307.098 172 cv
307.41 172.25 307.785 172.438 308.16 172.438 cv
308.535 172.438 308.91 172.25 309.223 172 cv
309.473 171.688 309.66 171.313 309.66 170.938 cv
cp
f
311.035 170.875 mo
311.035 170.5 310.848 170.125 310.598 169.813 cv
310.285 169.563 309.91 169.375 309.535 169.375 cv
309.16 169.375 308.785 169.563 308.473 169.813 cv
308.223 170.125 308.035 170.5 308.035 170.875 cv
308.035 171.25 308.223 171.625 308.473 171.938 cv
308.785 172.188 309.16 172.375 309.535 172.375 cv
309.91 172.375 310.285 172.188 310.598 171.938 cv
310.848 171.625 311.035 171.25 311.035 170.875 cv
cp
f
312.41 171.125 mo
312.41 170.75 312.223 170.375 311.973 170.063 cv
311.66 169.813 311.285 169.625 310.91 169.625 cv
310.535 169.625 310.16 169.813 309.848 170.063 cv
309.598 170.375 309.41 170.75 309.41 171.125 cv
309.41 171.5 309.598 171.875 309.848 172.188 cv
310.16 172.438 310.535 172.625 310.91 172.625 cv
311.285 172.625 311.66 172.438 311.973 172.188 cv
312.223 171.875 312.41 171.5 312.41 171.125 cv
cp
f
313.785 171.063 mo
313.785 170.688 313.598 170.313 313.348 170 cv
313.035 169.75 312.66 169.563 312.285 169.563 cv
311.91 169.563 311.535 169.75 311.223 170 cv
310.973 170.313 310.785 170.688 310.785 171.063 cv
310.785 171.438 310.973 171.813 311.223 172.125 cv
311.535 172.375 311.91 172.563 312.285 172.563 cv
312.66 172.563 313.035 172.375 313.348 172.125 cv
313.598 171.813 313.785 171.438 313.785 171.063 cv
cp
f
315.16 171.5 mo
315.16 171.125 314.973 170.75 314.723 170.438 cv
314.41 170.188 314.035 170 313.66 170 cv
313.285 170 312.91 170.188 312.598 170.438 cv
312.348 170.75 312.16 171.125 312.16 171.5 cv
312.16 171.875 312.348 172.25 312.598 172.563 cv
312.91 172.813 313.285 173 313.66 173 cv
314.035 173 314.41 172.813 314.723 172.563 cv
314.973 172.25 315.16 171.875 315.16 171.5 cv
cp
f
gsave
19.476 0 mo
19.476 189.999 li
319.473 189.999 li
319.473 0 li
19.476 0 li
clp
319.254 0.40625 mo
319.254 177.094 li
319.441 177.094 li
319.441 0.40625 li
cp
33.6289 0.59375 mo
319.441 0.59375 li
319.441 0.40625 li
33.6289 0.40625 li
cp
33.8164 177.094 mo
33.8164 0.40625 li
33.6289 0.40625 li
33.6289 177.094 li
cp
319.441 176.906 mo
33.6289 176.906 li
33.6289 177.094 li
319.441 177.094 li
cp
0 0 0 1 cmyk
f
grestore
74.0039 177 mo
74.0039 173.625 li
73.8164 173.625 li
73.8164 177 li
cp
60.1914 177 mo
60.1914 175 li
60.0039 175 li
60.0039 177 li
cp
46.4414 177 mo
46.4414 175 li
46.2539 175 li
46.2539 177 li
cp
0 0 0 1 cmyk
f
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 50 /two putdup 51 /three putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-/three <1C60D8A8C9B7A73D960D5C905E34DC81A096980F2B4111B9B099A6DB83E1916FF3E1A9E04B02D3E9232818F77B09A9AACB5832FED542FDDA70002EB05443C3A08AC9203ACF784CB865C5B9F7D872416879897E73175190413158DECCEEC3F81053539EF7A5BA54848FD5EF8191B77C87FC4B2FB70A247D6480306D63973D6D1E40988764838CF4D7C7CFD56B10F551336B687A8CAD70446C673C2BFDC7C6AD86547DB031DFD479DCB051DAF5177334E8CD4B35F8B65FC86BD3BDBBB8D1E2B3149970112D8374721C0AB537409EB4ADF5E62264D22634EE> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBUA+Times-Roman /Times-Roman findfont ct_VMDictPut/ZWYBUA+Times-Roman*1 [48{/.notdef}rp /zero /.notdef /two /three 204{/.notdef}rp]ZWYBUA+Times-Roman nfZWYBUA+Times-Roman*1 [9 0 0 -9 0 0 ]msf66.7305 188.016 mo(230)[4.5 4.5 0 ]xsh142.879 177 mo
142.879 173.625 li
142.691 173.625 li
142.691 177 li
cp
129.129 177 mo
129.129 175 li
128.941 175 li
128.941 177 li
cp
115.316 177 mo
115.316 175 li
115.129 175 li
115.129 177 li
cp
101.566 177 mo
101.566 175 li
101.379 175 li
101.379 177 li
cp
87.7539 177 mo
87.7539 175 li
87.5664 175 li
87.5664 177 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBUA+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBUA+Times-Roman /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/ZWYBUA+Times-Roman*1 [48{/.notdef}rp /zero /.notdef /two /three /four 203{/.notdef}rp]ZWYBUA+Times-Roman nfZWYBUA+Times-Roman*1 [9 0 0 -9 0 0 ]msf135.637 188.016 mo(240)[4.5 4.5 0 ]xsh211.754 177 mo
211.754 173.625 li
211.566 173.625 li
211.566 177 li
cp
198.004 177 mo
198.004 175 li
197.816 175 li
197.816 177 li
cp
184.191 177 mo
184.191 175 li
184.004 175 li
184.004 177 li
cp
170.441 177 mo
170.441 175 li
170.254 175 li
170.254 177 li
cp
156.691 177 mo
156.691 175 li
156.504 175 li
156.504 177 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBUA+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7A73D986C0D7DE9D329253DCB6E971CF9F86B9AEBF9128F879E3BA076A7524F8AC6EF0948A0BD36A1BBAD3176809EA5D8C10BC04F27D1FCF8D9BA3577509C082FF1EE49DF22B08F8B21F3A6C3932A3BC82C6C594431B4032E2BEF80E15787B3E427A047FD8FD191291F42BAC74588B21DCB1EB3232C29BA67B72B9A00CCBC571F0227C6EF50964CF91F1B0EC573A04AE3E4DF9447B77BD2A0A959F534BEC79AECEF51C27F8D677FD06B99742B747A695088E88EBCC4A6BCCC7402ABFDFE9926161D96> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBUA+Times-Roman /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/ZWYBUA+Times-Roman*1 [48{/.notdef}rp /zero /.notdef /two /three /four /five 202{/.notdef}rp]ZWYBUA+Times-Roman nfZWYBUA+Times-Roman*1 [9 0 0 -9 0 0 ]msf204.527 188.016 mo(250)[4.5 4.5 0 ]xsh280.691 177 mo
280.691 173.625 li
280.504 173.625 li
280.504 177 li
cp
266.879 177 mo
266.879 175 li
266.691 175 li
266.691 177 li
cp
253.129 177 mo
253.129 175 li
252.941 175 li
252.941 177 li
cp
239.316 177 mo
239.316 175 li
239.129 175 li
239.129 177 li
cp
225.566 177 mo
225.566 175 li
225.379 175 li
225.379 177 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBUA+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7A73DB6D2877672A15D933475028E1A563F35D9B429BC044364BBEA6C8D8E288B5629F6BF21219495DF799C22E6D194E7EF19D2BF50638A5DFD525E61CAA756DFB58BC6CF02B70355716B1567E587BDF24EE1CD60FDA306A5E8E3EC9A065FDF865555F45DE4B3A9666958B7C5B64C412BD6705A27F81BA359AA5385B74802E199214ED2C08D85C8D9515B8A71A37E696B11B788D46272326187B79B809C5ABF82FEBD4C4DE257125A17BA43> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBUA+Times-Roman /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/ZWYBUA+Times-Roman*1 [48{/.notdef}rp /zero /.notdef /two /three /four /five /six 201{/.notdef}rp]ZWYBUA+Times-Roman nfZWYBUA+Times-Roman*1 [9 0 0 -9 0 0 ]msf273.434 188.016 mo(260)[4.5 4.5 0 ]xsh33.7227 126.031 mo
37.0977 126.031 li
37.0977 125.844 li
33.7227 125.844 li
cp
33.7227 136.281 mo
35.7227 136.281 li
35.7227 136.094 li
33.7227 136.094 li
cp
33.7227 146.594 mo
35.7227 146.594 li
35.7227 146.406 li
33.7227 146.406 li
cp
33.7227 156.844 mo
35.7227 156.844 li
35.7227 156.656 li
33.7227 156.656 li
cp
33.7227 167.094 mo
35.7227 167.094 li
35.7227 166.906 li
33.7227 166.906 li
cp
308.254 177 mo
308.254 175 li
308.066 175 li
308.066 177 li
cp
294.441 177 mo
294.441 175 li
294.254 175 li
294.254 177 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBUA+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBUA+Times-Roman /Encoding getdup 46 /period putpop%ADOEndSubsetFont
/ZWYBUA+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /three /four /five /six 201{/.notdef}rp]ZWYBUA+Times-Roman nfZWYBUA+Times-Roman*1 [9 0 0 -9 0 0 ]msf19.4727 128.914 mo(0.)[4.5 0 ]xsh26.2227 128.914 mo(5)sh33.7227 74.5938 mo
37.0977 74.5938 li
37.0977 74.4063 li
33.7227 74.4063 li
cp
33.7227 84.9063 mo
35.7227 84.9063 li
35.7227 84.7188 li
33.7227 84.7188 li
cp
33.7227 95.1563 mo
35.7227 95.1563 li
35.7227 94.9688 li
33.7227 94.9688 li
cp
33.7227 105.469 mo
35.7227 105.469 li
35.7227 105.281 li
33.7227 105.281 li
cp
33.7227 115.719 mo
35.7227 115.719 li
35.7227 115.531 li
33.7227 115.531 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBUA+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBUA+Times-Roman /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/ZWYBUA+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six 201{/.notdef}rp]ZWYBUA+Times-Roman nfZWYBUA+Times-Roman*1 [9 0 0 -9 0 0 ]msf19.4727 77.5078 mo(1.)[4.5 0 ]xsh26.2227 77.5078 mo(0)sh33.7227 23.2188 mo
37.0977 23.2188 li
37.0977 23.0313 li
33.7227 23.0313 li
cp
33.7227 33.4688 mo
35.7227 33.4688 li
35.7227 33.2813 li
33.7227 33.2813 li
cp
33.7227 43.7813 mo
35.7227 43.7813 li
35.7227 43.5938 li
33.7227 43.5938 li
cp
33.7227 54.0313 mo
35.7227 54.0313 li
35.7227 53.8438 li
33.7227 53.8438 li
cp
33.7227 64.3438 mo
35.7227 64.3438 li
35.7227 64.1563 li
33.7227 64.1563 li
cp
f
ZWYBUA+Times-Roman*1 [9 0 0 -9 0 0 ]msf19.4727 26.1094 mo(1.)[4.5 0 ]xsh26.2227 26.1094 mo(5)shgsave
19.476 0 mo
19.476 189.999 li
319.473 189.999 li
319.473 0 li
19.476 0 li
clp
319.348 2.46875 mo
317.348 2.46875 li
317.348 2.65625 li
319.348 2.65625 li
cp
319.348 12.7188 mo
317.348 12.7188 li
317.348 12.9063 li
319.348 12.9063 li
cp
319.348 23.0313 mo
315.973 23.0313 li
315.973 23.2188 li
319.348 23.2188 li
cp
319.348 33.2813 mo
317.348 33.2813 li
317.348 33.4688 li
319.348 33.4688 li
cp
319.348 43.5938 mo
317.348 43.5938 li
317.348 43.7813 li
319.348 43.7813 li
cp
319.348 53.8438 mo
317.348 53.8438 li
317.348 54.0313 li
319.348 54.0313 li
cp
319.348 64.1563 mo
317.348 64.1563 li
317.348 64.3438 li
319.348 64.3438 li
cp
319.348 74.4063 mo
315.973 74.4063 li
315.973 74.5938 li
319.348 74.5938 li
cp
319.348 84.7188 mo
317.348 84.7188 li
317.348 84.9063 li
319.348 84.9063 li
cp
319.348 94.9688 mo
317.348 94.9688 li
317.348 95.1563 li
319.348 95.1563 li
cp
319.348 105.281 mo
317.348 105.281 li
317.348 105.469 li
319.348 105.469 li
cp
319.348 115.531 mo
317.348 115.531 li
317.348 115.719 li
319.348 115.719 li
cp
319.348 125.844 mo
315.973 125.844 li
315.973 126.031 li
319.348 126.031 li
cp
319.348 136.094 mo
317.348 136.094 li
317.348 136.281 li
319.348 136.281 li
cp
319.348 146.406 mo
317.348 146.406 li
317.348 146.594 li
319.348 146.594 li
cp
319.348 156.656 mo
317.348 156.656 li
317.348 156.844 li
319.348 156.844 li
cp
319.348 166.906 mo
317.348 166.906 li
317.348 167.094 li
319.348 167.094 li
cp
308.066 0.5 mo
308.066 2.5 li
308.254 2.5 li
308.254 0.5 li
cp
294.254 0.5 mo
294.254 2.5 li
294.441 2.5 li
294.441 0.5 li
cp
280.504 0.5 mo
280.504 3.875 li
280.691 3.875 li
280.691 0.5 li
cp
266.691 0.5 mo
266.691 2.5 li
266.879 2.5 li
266.879 0.5 li
cp
252.941 0.5 mo
252.941 2.5 li
253.129 2.5 li
253.129 0.5 li
cp
239.129 0.5 mo
239.129 2.5 li
239.316 2.5 li
239.316 0.5 li
cp
225.379 0.5 mo
225.379 2.5 li
225.566 2.5 li
225.566 0.5 li
cp
211.566 0.5 mo
211.566 3.875 li
211.754 3.875 li
211.754 0.5 li
cp
197.816 0.5 mo
197.816 2.5 li
198.004 2.5 li
198.004 0.5 li
cp
184.004 0.5 mo
184.004 2.5 li
184.191 2.5 li
184.191 0.5 li
cp
170.254 0.5 mo
170.254 2.5 li
170.441 2.5 li
170.441 0.5 li
cp
156.504 0.5 mo
156.504 2.5 li
156.691 2.5 li
156.691 0.5 li
cp
142.691 0.5 mo
142.691 3.875 li
142.879 3.875 li
142.879 0.5 li
cp
128.941 0.5 mo
128.941 2.5 li
129.129 2.5 li
129.129 0.5 li
cp
115.129 0.5 mo
115.129 2.5 li
115.316 2.5 li
115.316 0.5 li
cp
101.379 0.5 mo
101.379 2.5 li
101.566 2.5 li
101.566 0.5 li
cp
87.5664 0.5 mo
87.5664 2.5 li
87.7539 2.5 li
87.7539 0.5 li
cp
73.8164 0.5 mo
73.8164 3.875 li
74.0039 3.875 li
74.0039 0.5 li
cp
60.0039 0.5 mo
60.0039 2.5 li
60.1914 2.5 li
60.1914 0.5 li
cp
46.2539 0.5 mo
46.2539 2.5 li
46.4414 2.5 li
46.4414 0.5 li
cp
33.7227 2.65625 mo
35.7227 2.65625 li
35.7227 2.46875 li
33.7227 2.46875 li
cp
33.7227 12.9063 mo
35.7227 12.9063 li
35.7227 12.7188 li
33.7227 12.7188 li
cp
f
grestore
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TimesNewRomanPSMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 72 /H putdup 83 /S putdup 86 /V putdup 87 /W putdup 97 /a putdup 100 /d putdup 103 /g putdup 104 /h putdup 105 /i putdup 107 /k putdup 108 /l putdup 110 /n putdup 116 /t putdup 122 /z putdef/FontBBox {-568 -307 2000 1007} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings18 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB222483BD74F8B> |-/space <1C60D8A8C9B8707C25> |-/parenleft <1C60D8A8C9B81F2C3AC09B674C4ECE2BEF4D70AD3508D915EA9AE12419376F6EEF231ECE8179CA4531F29291ACACE060AEF98AD6F2FFF2BEA533946FFA1C8BC3953D72A31BB8ABD9782D71B2146F964D99646263E2D414F84FA049D36B9B13B7F6C8AA7A4A5EB0> |-/parenright <1C60D8A8C9B81F2C3CA029BC286E27661FD7F18B990CFF4A0AF58404A2F35E11D14FBA406192D392AD203A879E34B8FA3132863211808E5BD63BDAA607B8E04E23E92C61AAA8B57E5E7609689020D20EB927A1EC6CC0BC06B540A016D558248DC4A3E8183F5F> |-/H <1C60D8A8C9B6079F62C8472A58E49E4C65298F7DBB13584B0C608B103B8F2B0C72AF215D43C457FE4678B9114F992A1CA0DD95AD962EE67821EBE89C76AF7B7C203022FE3C67E29F7C9AA5921E4D15A2645D93C73845A47B6C4F855F057FBA3B47AC2707354E73F37A88912B11BC586C19F99285C7E09F7C6AE400A135AD2578B2C1702C267512A0254A355FAF242A3E032C2D5773AA8E4D90998616B06DE2126832E624AA95B6CEA6DE0CF980ABC5058497B243E4F1F614D2E3330AC509CE2BF6F280235C57C7347C7DBE389D9DA8C428E4F439ED717BD43889835C90DE66BDF27965E2CAF6D3F8A236> |-/S <1C60D8A8C9B7EF32243DA21D5631D8766D74D715030BA7905332A0CFAC49387DB487F69FE973B04989A1F5B84226AC0574A3AC8A92A20A67AC6A93CF1F8D7D050DEAAE8CF31B4A5FB504F0A0814E8C9022E7C7EFFB00070B62EB780F5BFD7AC1407620155D4B738E953EA9E8519FCB3635DEED6C82D9AB968BE1131CEEB6B072A246B745E2E47F0890CD4A4DD5061C30741173A5782D0F5AE0E645337518CA765AC1ABF9ABB13F9D6F8666630C08F558B2481DB7C0FEA08930FF35DE904907DBC222EF06C7863FAB3917A57116C566327E1977A70091D7628A2440BE3AB444BD01341C54F829742469A9B1CF3048C0B204E355F432B93B12EA12C84F80CE13D22435E5FCC1B5A000DE> |-/V <1C60D8A8C9B6079F6D060A2FEA7FC1569E0C14DA541DD91C00EBC3777BDE67491C2EA2113C451959D17D324EE8DBB436A0F30BF65402B93EFD32E095FD4A5BC20760673D3864924C1ACF695D3BD682644F24B440E38C1FF24D4CC16712B502AE5F89EDD273AE3A1DBED84FBFBD9B8AF85ACA697ED4658DA6CFEAC078154F7D9BB4AB2053> |-/W <1C60D8A8C9B5D6EF4CB383496C62617B8BD4FD4927BDE48152A6FF6216428592F5AFA3D18F24C53020F77DA565222C98E1F496EC6F2EE4EB22E43F233D8D98DB46EC3FFD79A8A395ED6571E9EE52C2D64F4FF1F26706DF3355CFC8C908EAA86ADD43E05EADD0D2F7D3DC578FF752F1D87291BBD55E577C117CD30BA3049BD39543241DD7DCD07617FA8A494E710E269F478E2E95BEC8AA7E710ACD0612E8921B3DAA59E93D8AA4276CD08DDB3A9B4D762893C74EF3108E125B72E190D045E652A0B8E8729169D251777FA84DD9EC852ADB1FB8FFEDFE199F837B9E862E992403453891> |-/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272EF1EF1464C3F0D45D7CBB8749AF571E09> |-/d <1C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D203065B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD3329A86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB857EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5CCB01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD104E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A618879362783A36815EA1CE5876FAC4F83CDFE1BD4A> |-/g <1C60D8A8C9B7A73DAC44F2C448ECAF253E44055AA4AFC4D4E618BBF7F60847F4AD57852D125F52503D138EEBB5C35DB7E6FF089D85EF3D59177D6853B7FF4DCA48A2C6450DAF6AE7485D918680B6246955433B7E96C0D52B86F6985D93AEA8FD99F7CE5A6EDF9F82F3DCD54C24AC7F5725E8D752728B16161496E9D02EA707BCC03E7CE1BDA2E3632B4A11707F59DF2FD8556EC51A6594DBA10EC63EB7A8585255CC0C8C8B32CD6316A41829AE725CE606F4A4FD4DA668556D79F4AC25BF9E697A5DB9F54B573E1EAA6D791100EAD10708C7E706E8CBDD596589510D4EA45E3CA12E8144CF2A4E025D5293F77BF25BA77276DF7C97999133B17612ABFFD70E77479B9C8ABBB3A51D3A6F6F66CA99610B1A23618D13E1A07B26D29ACFC8191E5B2829F3C990A5C474E53FC8B282F11A7FFA86D56BD2349AEC811B22D3002781921B9EDDEAA1B62C5F206266BA751F865F9A5F5AF517BC35F6F732012015D0BB42652388A219FCF002C2C0335D2D190C0C425C4FA28367480051E56A90DD46F1C707> |-/h <1C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435E027FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194A0134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2D9C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B585E2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED8E36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15E97FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C4483796F735A795EACD82F245D81FB43B5> |-/i <1C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE365B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A640085090E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCBCB8CA3E9F85837FAC6> |-/k <1C60D8A8C9B7A73DB907772911B7C2CEAC1D2074B2642ADEDFBA1679ED254D30D2D9A5BDAE41A6A7C0D78C5D75E9522858A70EEA458FC30CFDA879F9C1CE85600A63BE4554ACA119AD822CC5727738E5E5FAC782F5B6F69100B3F9A42C95FB8AA53FD907276C4A477291A36A9FD6B1870ACEAFC297FB6D4CC1F0091BA09524439681D5D4A76F017EDD23AA69786F58BFB619D5D45A35621B583AF1C763E994CD0C086A4B52B5442078A662891B62F92DB77130357FD06A533719ACFEBED1A5224DAFB3F947A309ADA52BC46E57C120F32619B58880DFB59CA5AB15473CEA89B7> |-/l <1C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C4304B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B6828D244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE5527D6441CE02F5A28D63A618F> |-/n <1C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7BC81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD9D4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494DF60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B280026130687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F2E277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6A0027198438FE663C2EACF82CEB86F7C727594> |-/t <1C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED29448713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC43DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E798B36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |-/z <1C60D8A8C9B77FE2C18484DB453227C527C164B5A1471C4657A5A14A46A1D3A0BD899640627BE2A7B9DB921E26CD53975830B919737E4B957FDCE605D77DC327B798A39B69F36340D55162C5C44140DACBE16FE7873A74F99AB90B7497> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBUB+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut/ZWYBUB+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 30{/.notdef}rp /H 10{/.notdef}rp /S 2{/.notdef}rp /V /W 9{/.notdef}rp /a 2{/.notdef}rp /d 2{/.notdef}rp /g /h /i /.notdef /k /l /.notdef /n 5{/.notdef}rp /t 5{/.notdef}rp /z 133{/.notdef}rp]ZWYBUB+TimesNewRomanPSMT nfZWYBUB+TimesNewRomanPSMT*1 [0 -12 -12 0 0 0 ]msf9.97266 114.5 mo(Signal \(V\))[-6.67383 -3.33398 -6 -6 -5.32617 -3.33398 -3 -3.99609 -8.66602 0 ]yshZWYBUB+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf141.473 204 mo(Width \(kHz\))[10.8457 3.33398 6 3.33398 6 3 3.99609 6 8.66602 5.32617 0 ]xsh55.9102 22.2925 mo
55.9102 21.5894 55.5586 20.8862 55.0898 20.3003 cv
54.5039 19.8315 53.8008 19.48 53.0977 19.48 cv
52.3945 19.48 51.6914 19.8315 51.1055 20.3003 cv
50.6367 20.8862 50.2852 21.5894 50.2852 22.2925 cv
50.2852 22.9956 50.6367 23.6987 51.1055 24.2847 cv
51.6914 24.7534 52.3945 25.105 53.0977 25.105 cv
53.8008 25.105 54.5039 24.7534 55.0898 24.2847 cv
55.5586 23.6987 55.9102 22.9956 55.9102 22.2925 cv
cp
0 0.992157 1 0 cmyk
f
50.2852 37.481 mo
57.7852 37.481 li
57.7852 36.481 li
50.2852 36.481 li
0.882353 0.768627 0 0 cmyk
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBUB+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6079F62679EB6BE171B70F78590F81AB62F69F1BD2EFC86EAE566847745E296D0CF61872DA4D8690C62AB23EE8E1DEB0EAD4BD93A2494CA759A81248BAF55E0D2E2E5FE71261287BF00F8CDF501793AB3272F80F7AE3E407CA730AC3648B3AC2D58C8D1FD60CD7DB1F886A79A4080D8870256B6E127906D500379950803F077453028FB6169> |-/F <1C60D8A8C9B7EF322BE6235043C5A7A6ECCDDDC390BE41D3E01CEDAA91CB335118BB7C10CD87A1A789356A0826D033ECDD0352DC64AE55B383C11F3EB18A6F42CD78A260CB051779A3B4D92350DD65D27B671C1609DC36FBFF44C40F44FB014C0462CFF40EA9650CDFB895B99B69FA8BD3EB8152DF452581818551FCC7745E9E79F62FD5E1668E4EFD8B2F33AB5D5ED30AB06AFD78EF98B1A68AA26FC8B4D7DDC1356637FA048F199EDF19A428> |-/L <1C60D8A8C9B7D8BE1910D0EBEC744B6638E6ED4C6FC0AF39F5B8B10BFA09270956A997B577BBD8E3EC179B174ED931484CCFFCF819D4978AE37145A7A3C221DF78A5AAD08DFCBE2638BCFCF6B4930FFFAD1163890B85697ECB905727AF12A0E5C1679B01834AD8D0C4111313E17E548887938F4F64DA1DB39BD7CD68748B847D2C24AD687E0CDB56> |-/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984A59E1CFFFD06EA629758085868D3F5F7204292> |-/o <1C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD4416250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF996A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA436702294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68D9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |-/r <1C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2CE6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E983E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B53A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA455AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D8C360275B503E4954E912CD342> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBUB+TimesNewRomanPSMT /Encoding getdup 68 /D putdup 70 /F putdup 76 /L putdup 101 /e putdup 111 /o putdup 114 /r putpop%ADOEndSubsetFont
/ZWYBUB+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 26{/.notdef}rp /D /.notdef /F /.notdef /H 3{/.notdef}rp /L 6{/.notdef}rp /S 2{/.notdef}rp /V /W 9{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /h /i /.notdef /k /l /.notdef /n /o 2{/.notdef}rp /r /.notdef /t 5{/.notdef}rp /z 133{/.notdef}rp]ZWYBUB+TimesNewRomanPSMT nfZWYBUB+TimesNewRomanPSMT*1 [11.25 0 0 -11.25 0 0 ]msf67.4688 24.4766 mo(Data)[8.12402 4.99316 3.12598 0 ]xsh68.0938 39.4766 mo(Lorentzian Fit)[6.87207 5.625 3.74609 4.99316 5.625 3.12598 4.99316 3.12598 4.99316 5.625 2.8125 6.25684 3.12598 0 ]xsh141.223 45.729 mo
141.223 45.479 li
43.9726 45.479 li
43.9726 12.854 li
140.973 12.854 li
140.973 45.729 li
141.223 45.729 li
141.223 45.479 li
141.223 45.729 li
141.473 45.729 li
141.473 12.354 li
43.4727 12.354 li
43.4727 45.979 li
141.473 45.979 li
141.473 45.729 li
141.223 45.729 li
cp
f
164.723 176 mo
164.723 175 li
163.723 175 li
163.723 176 li
cp
164.723 174 mo
164.723 173 li
163.723 173 li
163.723 174 li
cp
164.723 172 mo
164.723 171 li
163.723 171 li
163.723 172 li
cp
164.723 170 mo
164.723 169 li
163.723 169 li
163.723 170 li
cp
164.723 168 mo
164.723 167 li
163.723 167 li
163.723 168 li
cp
164.723 166 mo
164.723 165 li
163.723 165 li
163.723 166 li
cp
164.723 164 mo
164.723 163 li
163.723 163 li
163.723 164 li
cp
164.723 162 mo
164.723 161 li
163.723 161 li
163.723 162 li
cp
164.723 160 mo
164.723 159 li
163.723 159 li
163.723 160 li
cp
164.723 158 mo
164.723 157 li
163.723 157 li
163.723 158 li
cp
164.723 156 mo
164.723 155 li
163.723 155 li
163.723 156 li
cp
164.723 154 mo
164.723 153 li
163.723 153 li
163.723 154 li
cp
164.723 152 mo
164.723 151 li
163.723 151 li
163.723 152 li
cp
164.723 150 mo
164.723 149 li
163.723 149 li
163.723 150 li
cp
164.723 148 mo
164.723 147 li
163.723 147 li
163.723 148 li
cp
164.723 146 mo
164.723 145 li
163.723 145 li
163.723 146 li
cp
164.723 144 mo
164.723 143 li
163.723 143 li
163.723 144 li
cp
164.723 142 mo
164.723 141 li
163.723 141 li
163.723 142 li
cp
164.723 140 mo
164.723 139 li
163.723 139 li
163.723 140 li
cp
164.723 138 mo
164.723 137 li
163.723 137 li
163.723 138 li
cp
164.723 136 mo
164.723 135 li
163.723 135 li
163.723 136 li
cp
164.723 134 mo
164.723 133 li
163.723 133 li
163.723 134 li
cp
164.723 132 mo
164.723 131 li
163.723 131 li
163.723 132 li
cp
164.723 130 mo
164.723 129 li
163.723 129 li
163.723 130 li
cp
164.723 128 mo
164.723 127 li
163.723 127 li
163.723 128 li
cp
164.723 126 mo
164.723 125 li
163.723 125 li
163.723 126 li
cp
164.723 124 mo
164.723 123 li
163.723 123 li
163.723 124 li
cp
164.723 122 mo
164.723 121 li
163.723 121 li
163.723 122 li
cp
164.723 120 mo
164.723 119 li
163.723 119 li
163.723 120 li
cp
164.723 118 mo
164.723 117 li
163.723 117 li
163.723 118 li
cp
164.723 116 mo
164.723 115 li
163.723 115 li
163.723 116 li
cp
164.723 114 mo
164.723 113 li
163.723 113 li
163.723 114 li
cp
164.723 112 mo
164.723 111 li
163.723 111 li
163.723 112 li
cp
164.723 110 mo
164.723 109 li
163.723 109 li
163.723 110 li
cp
164.723 108 mo
164.723 107 li
163.723 107 li
163.723 108 li
cp
164.723 106 mo
164.723 105 li
163.723 105 li
163.723 106 li
cp
164.723 104 mo
164.723 103 li
163.723 103 li
163.723 104 li
cp
164.723 102 mo
164.723 101 li
163.723 101 li
163.723 102 li
cp
164.723 100 mo
164.723 99 li
163.723 99 li
163.723 100 li
cp
164.723 98 mo
164.723 97 li
163.723 97 li
163.723 98 li
cp
164.723 96 mo
164.723 95 li
163.723 95 li
163.723 96 li
cp
164.723 94 mo
164.723 93 li
163.723 93 li
163.723 94 li
cp
164.723 92 mo
164.723 91 li
163.723 91 li
163.723 92 li
cp
164.723 90 mo
164.723 89 li
163.723 89 li
163.723 90 li
cp
164.723 88 mo
164.723 87 li
163.723 87 li
163.723 88 li
cp
164.723 86 mo
164.723 85 li
163.723 85 li
163.723 86 li
cp
164.723 84 mo
164.723 83 li
163.723 83 li
163.723 84 li
cp
164.723 82 mo
164.723 81 li
163.723 81 li
163.723 82 li
cp
164.723 80.0001 mo
164.723 79.0001 li
163.723 79.0001 li
163.723 80.0001 li
cp
164.723 78.0001 mo
164.723 77.0001 li
163.723 77.0001 li
163.723 78.0001 li
cp
164.723 76.0001 mo
164.723 75.0001 li
163.723 75.0001 li
163.723 76.0001 li
cp
164.723 74.0001 mo
164.723 73.0001 li
163.723 73.0001 li
163.723 74.0001 li
cp
164.723 72.0001 mo
164.723 71.0001 li
163.723 71.0001 li
163.723 72.0001 li
cp
164.723 70.0001 mo
164.723 69.0001 li
163.723 69.0001 li
163.723 70.0001 li
cp
164.723 68.0001 mo
164.723 67.0001 li
163.723 67.0001 li
163.723 68.0001 li
cp
164.723 66.0001 mo
164.723 65.0001 li
163.723 65.0001 li
163.723 66.0001 li
cp
164.723 64.0001 mo
164.723 63.0001 li
163.723 63.0001 li
163.723 64.0001 li
cp
164.723 62.0001 mo
164.723 61.0002 li
163.723 61.0002 li
163.723 62.0001 li
cp
164.723 60.0002 mo
164.723 59.0002 li
163.723 59.0002 li
163.723 60.0002 li
cp
164.723 58.0002 mo
164.723 57.0002 li
163.723 57.0002 li
163.723 58.0002 li
cp
164.723 56.0002 mo
164.723 55.0002 li
163.723 55.0002 li
163.723 56.0002 li
cp
164.723 54.0002 mo
164.723 53.0002 li
163.723 53.0002 li
163.723 54.0002 li
cp
164.723 52.0002 mo
164.723 51.0002 li
163.723 51.0002 li
163.723 52.0002 li
cp
164.723 50.0002 mo
164.723 49.0002 li
163.723 49.0002 li
163.723 50.0002 li
cp
164.723 48.0002 mo
164.723 47.0002 li
163.723 47.0002 li
163.723 48.0002 li
cp
164.723 46.0002 mo
164.723 45.0002 li
163.723 45.0002 li
163.723 46.0002 li
cp
164.723 44.0002 mo
164.723 43.0002 li
163.723 43.0002 li
163.723 44.0002 li
cp
164.723 42.0002 mo
164.723 41.0002 li
163.723 41.0002 li
163.723 42.0002 li
cp
164.723 40.0003 mo
164.723 39.0003 li
163.723 39.0003 li
163.723 40.0003 li
cp
164.723 38.0003 mo
164.723 37.0003 li
163.723 37.0003 li
163.723 38.0003 li
cp
164.723 36.0003 mo
164.723 35.0003 li
163.723 35.0003 li
163.723 36.0003 li
cp
164.723 34.0003 mo
164.723 33.0003 li
163.723 33.0003 li
163.723 34.0003 li
cp
164.723 32.0003 mo
164.723 31.0003 li
163.723 31.0003 li
163.723 32.0003 li
cp
164.723 30.0003 mo
164.723 29.0003 li
163.723 29.0003 li
163.723 30.0003 li
cp
164.723 28.0003 mo
164.723 27.0003 li
163.723 27.0003 li
163.723 28.0003 li
cp
164.723 26.0003 mo
164.723 25.0003 li
163.723 25.0003 li
163.723 26.0003 li
cp
164.723 24.0003 mo
164.723 23.0003 li
163.723 23.0003 li
163.723 24.0003 li
cp
164.723 22.0004 mo
164.723 21.0004 li
163.723 21.0004 li
163.723 22.0004 li
cp
164.723 20.0004 mo
164.723 19.0004 li
163.723 19.0004 li
163.723 20.0004 li
cp
164.723 18.0004 mo
164.723 17.0004 li
163.723 17.0004 li
163.723 18.0004 li
cp
164.723 16.0004 mo
164.723 15.0004 li
163.723 15.0004 li
163.723 16.0004 li
cp
164.723 14.0004 mo
164.723 13.0004 li
163.723 13.0004 li
163.723 14.0004 li
cp
164.723 12.0004 mo
164.723 11.0004 li
163.723 11.0004 li
163.723 12.0004 li
cp
164.723 10.0004 mo
164.723 9.00041 li
163.723 9.00041 li
163.723 10.0004 li
cp
164.723 8.00041 mo
164.723 7.00043 li
163.723 7.00043 li
163.723 8.00041 li
cp
164.723 6.00043 mo
164.723 6 li
163.723 6 li
163.723 6.00043 li
cp
f
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TimesNewRomanPS-ItalicMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdup 61 /equal putdup 120 /x putdef/FontBBox {-498 -307 1353 1023} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704AA3988900AFCFF05DD> |-/space <1C60D8A8C9B8707C25> |-/zero <1C60D8A8C9B7A73DB95E4C3B2CBDAA180DE16ED2E0B54D373FA0624F4D4D6AEC3868DC3B6FCE2354D83BCFB00DD4446A756F968EEE24EB76F936C153C554CF6C4FC531FF7FF83B6E48CEE21091E0E09B4C454DFC4E65880C366E13FC5BC8A513523C320C7B30F5347C743B956722220B3BEF7EACE8E5F9F591092F7BD516A6AD1802BEF3B681970F31BDF1B1A76203F2B6ADF0680B5FEC4F306B1764ABEA599CAC4C746792036F08DB0B307F28AC5ED1> |-/equal <1C60D8A8C9B65648F95751FAB6ED1FA6A9E711BDE78207211AD63FE41946D8888717> |-/x <1C60D8A8C9B77FE28E7B59861DA633FA42A38BF207DC4A11329E63F668010B05585B22E39E733F2B39E647F14D7DCD27965006EEC01D3FBB556E503629E45F186BD20587B6FF8BB4E525ABE63E26F210C9F85E012A8DB6F803B316624083082E536A1274247334ADD37479C48FDB7D8ADD850A8832DF9217A2BFFEECF6DD96F21564B9189ECF65AD0E783A58F9E296A99147AE132DD5B0142AB4EA5741668F4195BDF7097E5D12CB419F2F282E538E1EB21217502E3C6B11740802EC650F4D2ADCD4B1772219DAF6BE6429CF2030BDF9C05BA7A5D790670BD325C71A55CFEDEE3AFA9492A129CF25024BDA2414AE27F397E2DB63BB72C98E3704AEDCD4D4A43DA02887C90FEE11520BD99634849C2457543FCB5BD3F0> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBUC+TimesNewRomanPS-ItalicMT /TimesNewRomanPS-ItalicMT findfont ct_VMDictPut/ZWYBUC+TimesNewRomanPS-ItalicMT*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 12{/.notdef}rp /equal 58{/.notdef}rp /x 135{/.notdef}rp]ZWYBUC+TimesNewRomanPS-ItalicMT nfZWYBUC+TimesNewRomanPS-ItalicMT*1 [12 0 0 -12 0 0 ]msf199.473 85 mo(x  = )[5.32617 3 3 8.09766 0 ]xsh%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBUB+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8707CC95A9B5DFDE3A4AF8C8BB7D0C82C30C322ED94985BC6C2F162CD480F8280AD954FE8DC511B40B423DB4A6012D9C419E4DF4F375C6ADD098717CA70F621> |-/zero <1C60D8A8C9B7A73DAAFDCA97EBBC8D8E35A41D9404C5638B059E1CA50B5366543C3D584AD9E19987218AC5999BB0F2477597AB6F8DD868788C8440CBF4A338EF64ACD9BF2268656755741DB71FD86387D4A7AA1CFD19937BFD209E4FBCD1952717C8CF8C0555CB2D0238DC43B2A6A2DE4D7366DB210D2673870D0B0C58344E6AEF91B916BAAEAEF37B22F065E870AFE6638E56D0B4AE01785D59EE23402242D396440157FC51> |-/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11EC41D90433CE0F55F0A42A96AF852FD50FA> |-/three <1C60D8A8C9B7A73D83638F79AE86E17D4CE334FAA90E146D21CDA0FEB71815E9499D6C6A6E581E78F34038D792771470EBF894DABD777E9B4FDE68E7E1544BCF1EFB2DCE59357B716B4D2ADF3EAC3A9FF8BD07EC79AF5536B9B74185F8F7489AD909079119E88D2BB755D6F6AC02C01BDFADB347EC55DAC49C8BB047661CC7AAA3BDC1DB8E01EC56137B53ED31B24F4502353853D049BB0515CA4217D33D10484933F30AD1EAA43CFDF00AFA5462EE9B1772CE60A3392B8D9C1A3598CF2273E36A1FF3A58B2E24B1EACE5E34650257902678998DAAFF235764CCCA143A> |-/four <1C60D8A8C9B7A73DB6B62B7A95EE6C20B94EAC94CA9AB50BFD020369D6A63C8EA15A0D9A89B2ED9293078F8D3EE629592E255C65B246> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBUB+TimesNewRomanPSMT /Encoding getdup 46 /period putdup 48 /zero putdup 50 /two putdup 51 /three putdup 52 /four putpop%ADOEndSubsetFont
/ZWYBUB+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /.notdef /two /three /four 15{/.notdef}rp /D /.notdef /F /.notdef /H 3{/.notdef}rp /L 6{/.notdef}rp /S 2{/.notdef}rp /V /W 9{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /h /i /.notdef /k /l /.notdef /n /o 2{/.notdef}rp /r /.notdef /t 5{/.notdef}rp /z 133{/.notdef}rp]ZWYBUB+TimesNewRomanPSMT nfZWYBUB+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf221.896 85 mo(243.0 kHz)[6 6 6 3 6 3 6 8.66602 0 ]xshZWYBUC+TimesNewRomanPS-ItalicMT*1 [8 0 0 -8 0 0 ]msf205.473 88 mo(0)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/ZWYBUC+TimesNewRomanPS-ItalicMT*1 uf/ZWYBUC+TimesNewRomanPS-ItalicMT uf/TimesNewRomanPS-ItalicMT uf/ZWYBUB+TimesNewRomanPSMT*1 uf/ZWYBUB+TimesNewRomanPSMT uf/TimesNewRomanPSMT uf/ZWYBUA+Times-Roman*1 uf/ZWYBUA+Times-Roman uf/Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (steven schowalter) ()%%Title: (87raw_width.eps)%%CreationDate: 5/13/09 3:45 AM%AI9_DataStream%Gb!R&GCMA.cRA^?!PSX]+bA";d"YL\8P&;5PY"2.J5GsrlhTRgp1(YWG_Tps4aTE^[D+$GnQ<4Nac\4._-is$l*WUdO$`m8S6qE_%^R3:B;^oO9.qr?E=R04j,BKE#9$54O0eQ+Nbge?=>E^/:2a/2S>O#m$m!&?E;9iPHe*-Ug)^"98_gek5]D_d)$f+;<RsV![mu:2p%X3QbeMI#k()Em^H6@PQ*s1p!oQcE0.V6PYmUYBMALTJ24a^EK_W9kn=Rm0HW<]XNodNAHF`dT3d5aa%6(+,Siqdf9H</3J`;Fj0[%r/+!n4[MM*UPJ<6pn67(:>4tN)S=]epd's2n0%=[^L+#$0u>^2Xb_:%4MF&>nX/nUnOugm,kO$daX1R2Ih>Rl^4a!?Le:kCLE8+u%O3VE$ClCIShK,'7]i'=ah8WR9o9U0<r:qX-6(cqV=q_>Wf+LNo+%rI/C",1q7\8noX8^XHs-#fkg?S=MrQuu1n6)YX0U3`?00B2d%`h!nJIp*CSl,BI!%^14"Qk,-'KtMTaDl[/+B_lVCgAic1pchXU,SdI#_[gmKaKj]o^aLoOnd*K-^%"T5NbE4Nlfg\%?1i,TDe$'s%a5s[kp1M?<>gCKB\9'd&nV]^`j3NO=?V4gA)>#FJiJJI1m2RqfNA2h!1f7n!l;!,*O%q>uqj;Z2%QeNU3\up`90Vi!i`Y]!L&FgD%MhXD:X$,0d6smoC]cAq6a-QqEeL)QO?D@UIPHt1(dZ<N==?r)-.lG<U"B3DJrgN\m^[PkE<$n8fZ4*Ai1jgb[HkqXA<0lLH/AkCh%L8V=NSlR?12L-gDL0=jqC&!?bkqpm^V^iM5VP6<r7=dK,q?Lph$IhrfW!2):'5A8?:od]O2iC+L;Ck/*8d1ee.d8e&?)bX28qjoF%H;+0.qElBgVsl$[0$CsOHpTD%'7<+u(_[i;Gm5LF:T+@?Jkm4B_ZY6$`WVq'$Ut8kck=/.Bc0ACT.k0X$`,O(J4Zt:i'T(5(OSQ?%8d3Air'8R7NX6I-QJdt>8OcI$:\mi_7\E,pfc778j<)m'n\HT[6tVO>RQMfN#(N<^N/u4;_$YH(`Wr.*$V!YK+$N9BT`dQQ(5rbf%aXe&S+a>=&!@"9>kW,C[2J8h8"RAmBi/Q]LN1BM]H;=<*i0'DZI$#?6+4Pkh1!50s_:rMMj=-#u5+racD\sS4$$d=NTam%,(M&cT%G_][e5TnS$BUI0SUGh<rTbKg$N%`hR'"jFb&ZcYU"E2Y.2C!$SV!h-<5prdupW7LIO7\r]-D>$,k6*`>KaRfLkZ?qjnr>BE\5h]C%L*rPc$$A&8fBEh&enKq[\j":GbPF=dNu05&D&jRsYH5JI/npZb.>e3+#ChS0'^7hR,#@jGjBjZ6Id;L*5@4sN55:cLQi,$;aD_#1%q3T?hhq9Q5SYcAWH1FB'9E#Y5jL>,Tr::(b,uUK;-3),!nlu,erX%:C,0s]ci02A8q9=AN^M&!mZC"<c8j]LTa_0Qsric.0nUIo>%bu!0m*8^BqgK^)]p/]qRkLu:R-%l:I08Tl'=")P4-1Y+QiGYS;,u^coU'ajti+p+e$#$N*W?fsG@QKtjE4Zf*r,_/6p\t\@Q\8&/%OqB4`FJVe:AjQC<S,-.4rhA-CgM!Yqr6:I&3K.:E'FTUg.@Vk&ZR'ZSN*:1W!cMXB(gj?[C-a9u1;Zlprm-D>4DI6W:GGQ$@ic/^%GJu\oKbdQ!qO>]nOQfVoIYfMeJ%f=!PS^Yt!]aI9Ul=]9HK^uc1#ff3n</PE'9].,ZnH!`*@ZW]OJK"o?a5^8Me!Ok+2TU]!^118%i156R-#%U7E)Hi=cq6o^&\rU@7'J!bkuc<i6<_K@/<R1_'ngW2-d.R*i/u9n%L;JlB.U+`("53-OYg%YY=sfB(ht^6J7,76P*Ftq%-7\d,]M85's.M>Dag;)\PS3Jp+tZBM^;Dm]2,[d1.!aAkb*eNRKP;]AeY`b+c0,R7DMm?S0G!cq8c[HGO"#q+'#;eYM?O3J5t..n%R:5[Tjcp8N+(7lPV$%!j;(7.]$ZQc+,?2ftML6di&3A-M!K6fAan&1PPNC_hNLTuF0l0I_":Ci'!h[gRI"P=A7VJCC,NECK:adeb%dK;sQ";\i^i&tqthkFeG3'+2'=j;mrn7*FW^d`])S(m(:OT#3Da#sA40T5aY^ujB28ka4rlVSj@a*!8nA6C"`cLYkD&4r5LP\DBh%$.4t](J=Q!FY4i>AW))rUeKX05bfdj2<r[NJ4PP3R;WHmGo0nS8dlpZPOX2,7.uDp:"$ehPYq5Mn-kH:&uNF.`aa+]")*CQ;IFD\%EJaLC8G&\fNDL"u9:#0Mn6es]Ec5[?7SjrIdJKTaa[ijA/79,T+?Yiuo+(fJPpi^-*fWj([*$Xi-Il6,n:Yd0COu-\og1Fn>O)N/%2iZE<3JH_17&?D3Z:mjY9.GYcOYY0?kd`D)YboM&=[!5+:"gb<N.7%WJ4AXBT"M&ORbjf5<WT0PZ*oJDAMTCNKm7-a)[^i(e##,t%CK+>Dd[#l`N/I-DK8nLE,a$3-o,2q(AH:B00#hOmn@':-YQ>qP<!XHF8Z-U7`klHuZAmc^`^ODiq9IOm;.=QscAJ?W*:Z"I4(B1Q%L9:[uFRkEogf/$On":m=9Yb#d#6ped2lqou<Fqid=;$rk*t26ObU?$iO0m.#5^Ge*ZSdcj$__?f+"[/o5%q!l6=hX7#rG[F':F`G%47N.a;HTiiCC]ACb%$,Sfio)#p)Tfq7Z:PF.p1iSkgZDf)/H=4ccCK*-&1lfT$'CXXECWSbSc;^oQ#"K1t_pMQc)cRX7o$N7p_m)%Ttk1H["<YM-qNM3`C*#-<@JaiH^hAPFO%Q119ck^YS%$bZ:+9R/\p+?GKf>8.&=+[C$n8.H3!o1W;ZkY-@,^EK-Ziq[XK0A!+V)k%5>jqZ/>*4Pl'c)P6c`'NO2CDH$fWHB9*J$k-qQ1"V+&,u`Z>g+$P99cnU+sh!M4/%@%r8Tn5c6=WMQ\;!9Fc_-=s7f-M\Fa2Y,M8%O@Q?pJPdW3aU0s:)=^;;fF+'bUAY]GVseEpUBL2q.r1a@aG/(Y0PjkiW2<t^\<8,Ro1Dm3%(+^.P,XNmUq&E=^C^hWo<Hl%/?qoA%Hk.WT(Wkkuh1>)E?&;*fUm2"i]#`N[`hh&`W`^_M*GB;#M9OKB:*_auWtO&V(i(E*HGE]iV$J'YX;+;,h#p*B.h/rp@QbOTQU7K2%O*e-*X?Z>Oi+JU@)l=Is)<`)798#5(gV?ba4*8^\8C)ZLbV**4/;cm31=;`i;;l`\Cf*Li%IbX<<_D7=$>EA(j;M8q!?c(fO/;N7%9m]7!Jg\CU&\K=:1r*!:Zprs3F>`oT9X(?-E"?NoLI>2X0m,34=1$>;`$?@9P0pF0<tmHTRZ$5gcc]ddN!O_pq'N/k)J^:`j8Mir%F(haRW"_P\^`t85[>Kn^qHY4"CQbHe6InEo4:P1Z/=BoKXe6Ge(cmtm`(sn\H_0mpMr;Be5md!mU=;ol!A*5r9RJF$%OaqG"+2/D%'#li[jY3!24;q<dBcE3heJg'cF]aHLMT)At(DD9>Q-#Dkof?3qQ/jB`Le+7&5h>4uiI,"7kgWK1gL"k4f9%V+!E`J),3kRa3?2WS%L#lL#]SUu71%7hiNk0&&+GjJY&*([i,17qMr/@b91@^pVJsgdmg^c/(oQHhN4d0-`mHSN.RXLWB<\KqdAs^$XG&#_.[S&h7L;1;O%37n3(4f<A!rABqr^MW_B4)>FGQ5%QZ7)L?T1Zk/@ZSOH*T%[,]#K5m]9q1?^A3GI@e$[QO/Ci.sb\dOm/VA0mOa>_HCEo,fi=ff2%YTAo*BjTCJYmm)hM>@0R*I+WP16,H-iab$MQ-oie9BJSdOGJB"T'?5L;FYuj$`:7@1qF\sC_>JR#&gfFj?%s[-'fh+AmPduIF<?5%(:3_-:7CIE]YB0rMKQ*W*aOpkaeTB@/`it(-WofE@IK_6/,"H8e7$:=e^'!KDZ>>Oe%XiiQg/fNn3-VY-1O(]O4@+*pX*">8ilJs%D#C-Hrd5pIm\iMFA<b.GdGmX"V7&JADBi"rZmK9?EAHs(gM5`4<V%N>[5T#"8cuPgBXBh<f&Z#-X8\Z'k]OuD%GZ2d26PptI0l1O%WcG;Cg8c7BI#$59E-43FSK;\*QfsXEI8[Q#ea7-pqkP_U;KY=+:@tR#`'gZ\DL?i1_aGGd:fS/\K^ZimX:DirMNQVEk`/&Pdd='p%`1Sgf$k,<5k`)3(YMJOh/.HU+$Ylf7B_;U[L7OCOEFM%H[+1egn2ir4TRi$qqW#$\T#d63Vk\->o]ah^#2RDbVph.!Q.XtYC+o*5%0c0_alES,&@Ja>!9m(b3I/do>>*CT:?kjTYS3m7HW$<-i]DnL06N+OHD>`=qLq5XL7Mib2^%L7LUWK(p`lA3V[JJ>oGLcGmrek/N%m<1Pn)#7jlBW6hNR>a6S2Ys>AkQ?h:g8IXNo`tN5KT&`d)eD6)S+r=V:(#aH^H+V&)U^I4heV-+LCH#6jiO`fH\sgPlSnfsS+@r_%4(uEo4:pSl!5[p/JO&^0l[79"N)Zp3p]mf[rp3EMLdZWI4@c,WmX(O%7To%^R@r\mPTTDUHD"8!+I,\nV,ON[2XXLAj-nK-k*rn.%O4l9dUJWDT]hKj5VpQCa]an+@XjOuo6!0RpZnLr0l$YCCPFl`&1.HZDn#>3$<Wg%u].2hPV:=JieS+NKk56Uj+c4sj@]J4!oc],E%kC;TFi=(9WNsYe_K!.XQZ*#-=K1H3Pk58;uM0ei-T[!b4&&#:T`a_0j$PUuBrc>d$6N?C^!iPpo4Yq:^Dp:Y1+2tTX7A=/5a9b7<%lL1Or76f4W:@B3[QLQ%l?i`:H$>@+M)o*Tc_^B%bOBY7nN]W5<]CZ#n5WJPTJUrZoYhu%ZOAtV?(<<XCT]WRQiq,b>B_["MP"Hi?%$8T[U.[`\7J6r#?p-QkJ8nrS*n4R5R1-Q=Qs.f9O<54Y3TQ1j*K%J115L"ZO2*q3[7\1gfImqh+L?KSngO(@NG`mJ<lV>g%lEEJj%*;&+b^/2Q"DlWfC`q\"ikTV`=$N"NTq<98FT[J/L09qd@)kB:IZ+[1]`%HN6:Rb^)Tg:?\!r^m8Ubc'-)nKiO`88jJ(f!Pmri:L_%X7ag68F%TS`hcN3^B;InI\Cu>,FG'W6n=WJjbMmr3[gr84TtEH^Ua#H""i5/e*46@!*DA8+H^:m!3:2\6WJUXs($UBO<s&UcKIcr%7]te\,YtJA?N*5/g5gSr-2"r9r8H"W9?Y#`e8BcOF]'_U/%knj0cW/1%F]tUAfG^qk%>]orLX+D[JMUA)Zph!GPkU[2(q+SEOX>2%%/m\@CD+PrU0f1lN$=+CBoSuTm.6r)(3>du1V]TE-P1tpre$LA?fJ#>e4TYVT0m,PohjTZ-]K4u+8$p44$Q8FZ_rET'`J'jA!,Ap%s6^EoEJV>VTq_S^PQ#(lj0RZ^UXHa^>ji0%>%HPq5!N3khU,[<R!qmDrY;r#o^@<qruJ>cIg9fThZ95GGJIhi*O+4H#H[Lr)XJ[u%D+qP$B,A?78Hf%)CS1_3_*(SKFu8Zuf:l!CZ*ZsZ=dQP!!rK(H<KW;oqgR,ghHP&=%j(H#s7iI3Ia2-2Z\$a=#&]_AUQ1f'VdO8,%\AC@$P:2M_6rAJHr]aSF)DW&]1f!qjP*(RDmPVh0,KbOD*UIQT%0,8CU-DL?$5$I@&LdZ@8[:WC_#PAHl4>PprP-k@!5K`C,3nYa%X4nNe>CE0^^]!)=lM'K]K$>85aV`etIPa@hDj=?ug`>!BqJFcgZWmFUh`op<H5o;3$p2_U=F2\c*&^?iJ%CI_[*R9;I<N3hU"U`6%,_+eRc'7o95/r(;%>1RPp"np*YJtOgKm<W<$k<hYe\<$Y$*+Hq,Fa!B,WA7Og67ZXfDeb8+F1&75YSZEqGu?W0Z.WXM(n*5=0mOC%9LTJ%6c<uDN_f-egrIIe?IJI!L^DH@';!5$Bf*H%(W(Beec/@&T)6\eX$bEeRA+,7XiY83s7pjbffqu^\PWHp6<JjPMg6VhJ"//g%?iGtpo)AqI*PML9^N_X8Qe>crmBll%b@4URilR.DnL#s=7b<*js66o2T3c,s<r@/1YU!b@25RgCl;NCb7k_bh2?2cXYsUKU`q?eg%?Mq9&UR`[i17CF67e>eM*t:"/m=s$TO-*%2=5V'ZfEa.*RXXG7@/7i`n$5.q[T%WBbeLmkUK-U:m_Y#GDR>NeZtM[g"oGRYVZ%,[%eAYFJ>-NpTAt1kp[+cpOa%p4;D'Jo*TKb?bC32P%0JeZ7g4N.j'I@HbX5=q4IEEZ,o941OJ'icHT?dJ8;f3Ai5A1JTTmtSfR<5_*%b;b2PUG3`Iqi,%=hh%&(k]9&:C)C256OYI<QeEAPL]1n\gZZ&B_-2//`p2ID+etL#T-;eC)>2qo*e+jsVsur,mRg)ZW.j(LX.rI-%^j&7rrL=hIk.c8aLe"$+Iul62]VGpi`_RuB!NP)5HodOU;muJmMl?Z7`$DM>GhD5>"q<u6XZr`lSMloN2Iima6DO\eT9>@8f"S<*%JTn4W9=%"Js)@A,<`:hK`#3VA?6MZ)QeS'NUY4mT`db?u@g"1U2,>NY*;%i%]oPbF6hR)E#AiZlO2l"I1\p"l#9;^S]hSt*0&pTF%eg_SPi\$5h]&.!ifeb5lQYO"\(o,[IrDo[$DiO7-X5uaMHN4(L#:7)2s7cpP+FqTU+`_DlLMaF^h'%:-Ud$b"2NiC^lk2i+F5)u"%D'G$C>fFOA/,><(@;T6fr3<Cf_,(d@.\$4u2rf]BJ>pdKfj&BEAf!2CLMH1^\_?8Z1M@u#o,VuW$LqQBOUAe^V'RHTfUOqf2drc@%YN&om_gs*T8I^#'.fNa]pQtb=4mW^JO#d[]2T3d9/I(0!WDf!]"Li`?]%o#a[sKH5l8auFM&RYW$bR$086]!($=Q]F4V1:P`32`V%\rVRWT#5LUJsa?U"8X0A"Q3aW@>6:-;857,VX%D`3KG[gbqlXrFa%X>LJ$ED+0,eH))_Rk16CZ/?q1heC`oQ'/fK_]nMY(ndkKgW%OE:$_)Qg2Y:L;lq["$H_DU3C%#&V\G'E=g#L6uQ9k:7#H_fuEH(lUhhXgabZ5$a(E9%(94:q)6:.ET+QZ"#Vq1gRKmFoTp?IikY"%[q_P4C6mkbXc>Fa]nSh*ZE/k[[Roj'f8BP$:07*bY;'d8`]oH6F&c+N33DL@eS]MbB\DVnnN-q4gS(ZE;\RVS3,[3=m][`#%tV,o%&-Wg+OW=5a&-%EJLJ9A5,4KGP9Hl_j4mY'2nP>5=rj)"Ii8`u^NXQl&F*Q^equU:LI5\dOK;NJ?)/JgcQVs,K%oj37K-9<h@CBGH%25,Y'DO5**DR\N".TT`BNT%qZ\[WhMRG(-c`5r5pPr004Te7]<4OiN47,#(1jEQWB^%P9*la;MZ>d$<?2@6jl3I1(Qj6c8BptkI"%1%&E`#E<I(B`a;n4GkBJ#I\:V<TVfhWLA;Ii^:%k_<\^5bmuI:#h>\JBKW+Y>1Y"h&,%RbgV]/9HUTHDj(cg;*f]M0[sm<f\teri%a%?!h(&R#eV@-KM*3D4h>hF[_3cl7;F<fKlM4@D`.(6O.O)kRU6:dQPrQRS+d]i<Zo[ZlCU%`];_dUA=LaTgr<]0C91a8V+p&oW'%Up08)qI[9iJ`c%%1^lV(QOd'Y0@'N+?#,*E?^8%\>0gV+,*`AgefP+u`H>@tOV:>aST1R.q29&8r<T.'>j>_]lF(.1R<5h$1(doK%.C#s1RP`]r,\t6H77M+F;7&2B?k,.sl)>b<(&Z6hg`T4OZIX*"dhP1,2TAZRN*4qb2VO6#jrg9#6osS<.:]1s+gG^"0A;7XUhMj3%i;TD2TJ#.0,DVuQ$LPqd4t"hFc4!C"oq^41,S4q^7^'k&a4:_8>g#hK,FP]5C$7U,)>E$g9k6@F`^k><Ke@:>c^r#Q^EaVJ&s`_s%e$gN5<!Q+6:/>qOn]mLaX6;LP_9<[t*_:#SCP8!E\0KYNm$TL-ja7A:c2#QB_*KtZ;IME/C1K9rQAOta1_W2"EkE:Cq]*fK9hK;q%k@Etr\b6IsfTQ!3`eDjQ;Z3c#?L0L@n&#%+p/Hq9>bjRdiScI.Lu,capk"'!2O4e?>4Kd$q!C3PV<'u7[@IYX45]]rW%B7sOkoJ(%+=^BKJZrDXM9C#F'ibA%acX5ZNr,*s4+5iuC2\lSd-GLY2ncb*;MTrt3HAB>o`[uY#D#PA]_!4?N)I'cai@,][&QS+b/:,c2IB,O%0=UYnRqufH4Xl`k2NLa?%nF[rm9nq_-uS0grD]F,5,UZDa,H[9*&SXU[*&uhObsO'Sbk)^$\]daNcAFrd,[MocDD]357bKdG3l?Z%ceQZ0>CS9T?Ie%S\D-4I]/O*A_V=U+4s0/n,3@S=b$Ca-IlKdTgFH=-p6'XsM=L9F]mKO,0QL4DJ=_q<_U.4shsafM&;C!in\+c5%aIg1O?!"JXaY,REqIhjQ7ZB[o+`nQW<.B+#Y2Y#bjk^HjW=Xl7IU*+dL&3,(/]8/O)81Q=#\+.B:O,']?)>"'AK&oDn@VV]2Ki.o%VCH9YZ;kUW[J#3$<kC\FrP$5ECMS#JI-P=)KLGAdKIE65&SO(,%Go5(kFiH5;=&9iLM7Yj(H;(#NFaK%`n3[eTZR2PA^:^^0*krm%L<m&qQPf'Gd%.Yqn)cm>"T":133r]j>O=<^%i?^`(\:b<"-95-S,5!WT]\BU]=Hq]TbYqq<\(^t"k4>V@+20W2\.8bCBQ$R+,!60%I;0(1V=KmWlcE@D<^;A]H`MmPJqPk>28-RR-1B$#5heW53kVpCC$#(m.UFt56-6hN'L<nK]((uZ@m/T!0[6U[]LdK[TSO_[AKrWe%%\HBQ(qnnm3DD[ba78J_cO?*@*RkR9JYl4rX]7HUXl2oR]JBRW:^G^;o&f4UH?*g*FL4(W<:#.dp8";T?k"q1^5m)QY>5]DX0Jg,%)C\m`6KRFD?ir7!)GF^@HR>BcL!Jta;!D=m=Tbe/mB"picYH1Hear-em7>i=JbUU!`=U\mds&dH1b7P4`dW"45W>Tkem<hCVe--F%T_3r$B+"8p(;`<k'KXf=.NX)D#+Bof#kah]N&At7PtAE5ho]+(4mf7,`0Efr3maYsmiZ?IoJ%Opepf'u5`aumHDRn`d"2%F*8%<E%c@IRobN&6FRiTk=E$N"Dej/Q+<F>6qrOTON3S'[dSWPMNRumJ-YQK2&grB$p3`%XK*c*iW]:U)Z/V-)RY?l$rI]Zl*$T:8Bi/3Z[%``pB-X=)Vjmp,?-C'jOojmLY7BOBR'IHWq)($!+O$ZG-QaVnjS>$STWT-%/9*=bkSWt]5G%\&gi5uBP`1'--3)-;eJ9l;qQMZNm<%:'!N6$2qT&n+I@?SY:>*an>+t'^3$3M<;b_2Yd9]nrA8nKmW@*..f0Go#YAVJB"JIn&\.[XYe#%#q-cT<W7jhY^<'ae,V>u\^?F6%W?e\/MFU-5W((s9-]\6a0b#r[>hQZkeI^*FJ1kR;)itE)T+ku,4Dl)%=+@.G9n;Y;fBYou+r0,'Z]CG3WgWD2Kf&c88@`'Ul8a/O%=V&U@T7Q[aA/I&GDG%<`3^go*g`_j<i]5F>b1ih*noSVLIb57tqm(mI:9Q,XHU@[?0<%/n;=[(\W4.i9G&J1Nj1oN_mV,f`D&lk`%4U$cj+'sZEiqM*fmDl/EH*\EnHQ!^'p5_Ra:K,,Qi&=Cc2YDGZ+:KWK9Un59Q;fa#juT_6Ssn=`M6s[[O4^''e:b*I\o>9YjR(ef%&T6(ZU>=9SiF+V8D"SKPm.!_n^3eM>H2B$84Fb%7m@GfEbOq0;pN0be9tr.d@oL]\LLM6k>W,@s+]3NKNbt@G=2i&Q9>qZVbtITj%I-&`;m8dRVq3F'":YT=Jrp+7R%V)K)hUU3NpqcfDBlk-C#ToYrVoY#-eVm;qJTu$]QTR,u5&&d]CaTb..)r,1A,%LY/Ua/D4ai?,%DuEp[:Q)L&$f,@M*JE-JO[=P>_XupFSO$(2c4JO+"^BGl38>1"aH50WP;72dHDoV+Poe*&EE"8aMM6;U==b_X,3ZGX!OL((>r!1`%84sD8A9V&1^]l5BGHM2,7pU!ZNjHD.A4,3JYd&gKlhe,&J$11[43]J=^QgQ0G&h5mFapnFD=!e3R(79abR&&+B^0Xp\/jd;"&7Y0%=TQLm.g!=\BcGY0*iMoG.\,5n7>gVLkI=q*oF1oQ.G6E+Q"j"OJ@=(]=*:1R;(aWPJBB52-LX.a>7>2QMh/aX&-T1ipou/!f6!\'%adX-V"cB;("t6c'Olc).YPT$82V(B&TEr4qOtBLH3LG>+D4H1]gS&Hh<4)t"4ZU9`#7C;5\*f^t$l[6g*ROC,;Hh=6.<tcMdWs,I%p8r+JH"o)0<4B!m$Q<c7cU^bS0;NpJkj:,ZDInFdoSpm8V>\D&!UG5'\1l.L9Z!G=pVl@((tCekGuL>]L^"'M?DIg#>]B\^h6Zc<%F:L/'bC*\N+n1;N%oYdb!>Be&lg7/3([=^$/B8+#@W3KBd&UKFTqCX:qU)h5Zu%SqS<j^cIk6H<k>@KXE*S`Rb<bt:4mj!M&=q_>%_*fM5'NcUdjCVc>Hm/$ZQ@eUW89.KccoYgh-*<&!Q_J'Xks^(=7Z#1*jQ=BOT@b>n7lgRAj23c8)kSI@aU$2o4Gd1$%t@iobTG9<%O7i;N%uJgF^.pRhkD;W<286d_aY*2J$bFXA<b+[19fE5cToDK(2!0YIX7l]0hO2&A1M$m]il\qRk:jPYs-NoNh8n(bkMR)#93;0s%7aVn<:Pk\?kQ(,\%mV*6N3cB9@8scAZjpRKqO$&`$a4'O[)UpMFR7d%/D9Ou`LUGp`5%Z"Vji4%i3qf@@eNn4D,39o)n=<U3,_0B%Xa37>TUs-SG6d*o!VQ%[@C^^Xj$'Jc1+I'KIjkcjkkgZli2pV7j'3%P.th_5kLH>M6=Ugt_PR009$Dr*)mm6fR2h\cbeBa1Y7m.D%1eK+GNFcVEO_n$1p0AUnnsqb-ik))[lTAdO=2(_c$gPNnmm(K%+C4FqWlZN(mu$jEU$@VpoK4QB\P4K"d*=#@2A+(+F;[V[ZD"O:%+[eE2pFKc@Y`4P0?Aq,&%.a$1X'\D$)RV8s.7sM6:!%U&kU^H<N)SQ\9).W#dAZJ&Fp`d*NU`6;`N!O\C0m9tk1>.&G#`@[D:At4%XG-Z78UL;7!cH*5BngSnW4d-(.B2g0**TP2>&W3."Bs]lZ>/,CIGOBNJ)>$Bo1*nO/7qtSB98TIUIs]Xr]&#<7[B]*?E]\_$m<U)%e=5PVVCs?pVN=KC]s7<khn,^nbXJ_)%:ek;d)2##As-i6@Z:/kQlfqQqeIrlV8D&HXUmh1jUBl58'SXpBNUof3ECe2R@6VLgJUs8%"8Z>,&m*Xl#N]V76TJsU@imRRD<n,a4*LDU0H$QuY]F482=B!oE#=M&;"2sH6+<"^XVTZO\4?YO&I7,)\fuDXTBnXkR%E`YHa!qk%W8+TLW]AoV3NRC[8po*r+l:_uS_TT_kW:NS-/G,OHLl90Ud1^A9T)(:!/"L._qjp_kJ=-k$P.<c(QBWSSMDW8DYC;_Qc?'Yp:aT/%E%mIUi+#<T8`]3Q])ZdgT._TUO!>U%+J#804&&"F?d)JbUW`+[8n2kIn5YljHsg)ZcJYUEL30`COi:7IqDDH($R!W4?.XH?hN6jC%ijQcjA[7H;j3oRYF(f*()^EVI]>T%ejL*dcb(@?\T0oBW9@fl3Ai2(3`1qH.NW@>I#SP.3Q-dmrNJ3-7n(h4hF*i<.%M%5>87#5D%"V7C!3BK21&X8da_?0iKf!qa*me>BJ%jshlDFTQ1.q2D_GohtE)G]iF3dPVD7"N2'?rWusEbAlfQ)7l'H1*fX_3sMi8e6r`HtGis%EQ?nl[:nmlZ<mef4c2blL!Z84GYQh6BQtD"OC.^aGJYEbg_Y(,oYHZ8q4!#^F6<Sn_"0)6Hij^&4o+po"i(^VmhQK8GhklG0eIO6%LiM$X!B\;TcBaVVl*;66o'-Fg'oTd@;-Cugg!*ZI*r56ldWp>ZMBXkt7\B;;foO[02ie=URK@E.426%0\"^m$3p9g()43lu`"u53%"m.BV>1BI2>M6AuL!&IZg54&1)abkrCF?]X;8r0.N-;&,Q-\)bgllp?D5SQtT%5jhY.X0V+T'.&mtDZaFLffd9'BFNeM9,%IZMej%Q0i]CiFuWnD/L_XL.mq5fHej`hNcr+F8XZa'(+DR7.UR&G4CYt\K$H\o3Y=(9A2Zu9j(&p))W`09?TudIFs@bPXRCu^+&clM8ifT%M0\ItfZ4QiGS)%c]h+Tc#RjojTDch@UEXJZ^c5a7>72?rY.1UOKVau$"2-+`JAnj/%dHAlp7crCR&_EWE8X"fR5HeLhWs"B+re)T%VDKI^]YEo$X,"\'d198Pq-8OUWqQU39eW55'C.Mj$u;<,*ScOS@da]MerIc^#ZE7d+,7/_BMs3EN@FA<@Y`Q,,r[dFd?3P^Zl1i'%WY+i;fN>,"Y\@.KI:V*_n90!RI[WgDUUW/Zror$X/MtnCQdtTif3,kt+qS7]0V29a`J`']7G]t(NgI&/TlrQ%5#/-qC1lK2,2A(6%.2L4B*RT-aoE@C]L1nG5:&tt;CE^#jc)Y8*'V/D:F!31M@C6kGBhG<SO(1t*=F(g=mHAU7dBo+YpWT:4kR;17qh@cJBAW@,_VM/q%q(uA-YJTVP'6eerQWts+J?bN$9/Mhk/m>-uIK/s-cI$e%,r1PQo\rX!]-oe?R\jXf.brk#n?QST@ZI"HgISq8/PDtn;&[(/(qFg)%kgu`7)k'-j0hT]V=Gh)7gW4`K/MuU(BsA&E2`?q-QA7jXgomf+Qq;2O[u3S+\b$S`9?>!$7W+71d8G-%iN5aODIJQg4g<OgB8]PF%';tD98^;D^aN6!2T>"^@Hdd5YVor&([JcH7ea?Rcp)H-V$p&cZ`tEFV=QceBkSV;Tc(T4(TVH.D/=](?%?tGNkn`/c3HWOaF>R3@%i>aoA$p)X^=YPU`ig<$0AIC,X6YD<`S3^e[/N?rEST?s8iE\n_ST>"+AL?"K3HWR:d+j*3690.bJ7R,TD=YS,Q95>_E-e('*mh*)%(%^92F-g.kVi\(!iqcn8VMm.)q;PKG:?#d*W;jHhaj.=XgTZV_kBD3ailUCnZH&/h--JIAdaUTJ'j@tZ0Y*^:n/tiRi9-`)T)-a.%l*DA'c1n.kkIci$kYm(.GpH/:0(E.+`6UY$dbR#eNr7l_C!KFi2NXtV[-^M3:@Fkd%s@hmCs9'T((=Y,#A"EmF$>Y&j-T?'r[N>0%/6B4VoX)2#bQCR_ZO$di7RF[6]?M-!@`h7n/\L%?G1$-!,K:l@`7bW>TO\QN=q3HM+Tr1_Z75H@8qag_fUI,!8eX,oM:Xj5e>665%!(rm8,h%Y2?FGdPCs(37?:`2-S&E<dAonuDVAgi/*P29b$A^,aXA4l,1l]$_-1c"Lms/<&a#A1j"D>g9H^QiHPI'??\`mFi][P$;%9<'uYL:?n?,StK,Eeo92]eCaG]&iIm`PBf_a(N/T4;33>HS@$o9CIkN,hSKQdS9qQDCi&_6%\97kJlVJJ6<(j\U-%a`a#8:B>^+L%a<5WG0@;An!L&77ViR9Np5CA)[YB4ENYt2FZeK&E\R`mg#42*'C@2-.F1:?_SNgkNRBdfBDnK`/gY?[5aOZ%P9rr\!p$F$KG]tFC%*0-c<ZlMo3'BOU-:QoVK)0)m*Ca(&G`Q`kDd2P8n8'WHOcP&?E;e%bW2mB66JH7(1%`g5d5?&PiZq-kNdDpJ9gXe@4Veht,5=N]>%ksr'_d$b#MhKqCfNdD"T8`t:*I;B[Z7sOUAY2'#76^lh)mMu[(RqT#2Zat?mb`">h5IkooF_N1`9X:jmfk&R1q<2P(9BJ$1k/W[4%hQ'#AN#nCXZ.U?(.7kRC1)u;,\Ia6#(\YrFK(<(t[,u2(HIU:PD*9X$hh;;rbg55\,)FUmP+dTYcqGLK\^"-jBkXhtA?7Rb+Ur:K%!+GIUBc\.=0:XE.GYHE1j-8oYEtEMrdW9"mcJ^n!M.pOHE9*=?l:G,B!o@9@Ec3UTmLm(lo5(hUHe0,GWM>b3*V5/9j<8]tI;!'<%cjXn1hC/#0p2e-Qc@gk`3r@8-ms0&eOL7%eb'RHck?(3#/*Y,b$AhLBVu\ggT5<s!F\T"p"mR6K\RF>b7:fo:(e&@iAT%<_*ma.V%0H\TMQc(Z=QCSOF2iZ(H&*FLt]#9!+,t+\XaG9AMOh,d$*1&8@-(AJkHoPnU\a4]'4Y(BX</oT%iLJ4;=]R^+RhoR(SGiB2QOcT[%Qnm[`hU\[_oTtYB&'LHcR'#udCY]UAo-?L^`'g>sUh)rlDrr]9m8u@uWfVP:i%_%[I_kD&I&mKh`FqBgjb^UY1Ja%E3KrcTM@C$X%5L+9bBi.(qf_RG,fd!)N,/1[':;eSG'aJVR"Q%f#hTMUs4qG1t/uPRk;!6N'"_u8106G4\jGbU(E=Qiu3.#%cPr9+$K8Z?+N*DuL%\;9g8gTbA.REk69m4<G1"`=LmfQ'r<gngn0@>ab+;)n?I@=2!N78RT/;"NkeH-&ToXB^!@?Z;3=\')rc]j55>lKrUI;P/E)P*%5s%`0QLIMHX.T7OkdON/U_LBCUp[aBgZkLIR3J4dXpA+EiO;RY$LbZ8p-Fpc=pW_q1S`^QqO"m?1B+ZrN&2_u1gZE!r0>4[U]hceWPI%67Nt1Z1N)'8ukoN-bIerE6XLPk6j=oC.YCD`(K$PiA`6gWGimn_r_5a`EkCGFs9$o4rFGJN&r8jkLFuBRmlH[)sucsbJo"%[su'1%";^P,rn.%F2m59d^%idkS%U'XkLec.2@nuO)3,$3a@7i&'+S5+ZRlZc95r=g+mN[B(fXdL0Ar$W/Dt4SGPHd6d)B/mD?mq0Mr!]<%=nlc?o4Uc*6q\?*E$P3*>QB6gfY#A)iS,7".gBHQY:1W7pRS"9d8'_2mr3.2Mu&Zsa_i8WA@Jmu^uO(/lo*R"lgpI@)Dg_XT:tE$%`OARu=np)fg$L(t$PZsJD2<j%An)^](,I>M]f7=M"]AAd=b[r%X0%B3S;lWlGIAN:G";TphnLjY8u?,X\89k'B^0Y[s)rHkQN23t%OC<nUr5$^Z3SEf1AtNKJr(c$(m=7)71[M,.c5,V_oPqBU$T.@[R_H5DO"V&e\f1$Fh))1JXt^>+Iq+mkPI=IS/<c&N:KLOL/ZtW3%"?b0Q:0t\fL3%ZLe5N@qEu(O[UES*,l=<f_+h)W-WL5TqZh5D]R(V+El4gS`EfZJ?c"3J>^SmEN3jo"R[8W)kZG30R1?N>FS)gZX%?]3AP(;*5a0Qm"/3W#<:4Q:'bA[[sVLO7ERD]CLMof:n+[eM.h>#XQ6jJK;(YB8]Ofa'N#'!#Ep.G+'.DdDpSc\MtW[4^.QL!Rgn%_L"HAjJbebcZ<LDqNd7<B=jY;e8./rD4C;PQ^LQ\jm]SHoIcG(B9c,&J+D[5flU6q+>ts3$Y7^(#"3Osgs3L!4e$>4YOt$2F:OPJ%`,%K8>WV4O=DBabeI6+(Anfq?<d(f\#5:I;FOU1LG1q;61RlZ>Qd-miA<(K;.HQ;r+a84bFB5_0Aa_:B9ueK:C!h+u--`&VVc*oj%:L83&S^mZ&0dOrbVR+FAZd=pPbbh^]8im],C"[S<41n51VR+FA>6n`AaZ6\8Cpn.@(Q9ppS'ELM%^0>7c).i,/+0:I-"YQY8#\'r%S'ELMc6?"t_/)05gb0'$FhqlTX'@]d]qiWQl)\L<*,E642P!i#SV(3^M[n(t2g.:O9?=!:b,+]M#*Ia8!HcGQ!GILG2+CR-7T7Dj%TouI60qCdHAL2aF\6W%t2=ZMp$]j#\%/8:T.6LqDMqRO!ZO3>_n)JK>0"g/biauD9*3;XmIC_&g"qn.'LBR%YZakp9jt<'EISY'"%fd4ZhBT8FsDOm4F2)]8$@A$QmTbOilaa@-e[hZhp&]nh2GJ\#**L]b?RGP.>jp%=HRQD2&X=q/S6R=ZtF6E(bOThr!F7rndMs_@#%`o(Y#(6;8bEm:/1pgcpk>O\(CO>*gRh0DDII@?>D9bTEn$M.SFVlc4Z(Yrds<R04OGrulQXUM7g'#W*0o.1)91M%>1O.oo<F7+G7%>b31QFP=_aGYb.,&:*ITCCP@!E!@l=iq+#blbp;P4e6SpS0ofrhbE8XXIXsa%!SKklspk;+uA<oKlf\M]>s3bG,^sFT``oZ3O*@k%k]G>%Ul00DHScGfq3Mg*KsUdqN=<S/%>:0)o5TmS-8g,l\$KaC/T/O:aYQO^YO+;hT_EdGQZUV#BaX+)maBO!@dTL#RS'[[;I0$[%]R'OL0pgr9h[G?K?g=L9@E,j99K.LkaLpkbb#.:18]M,%Rm,Ls1r`ALoTsSV5Z*R]=XZ)fHC6]/?8(mS_s>8P#f&C\=m5<qA3NIp%:LoiQl@a<rhV9EZ/:L1kBuct]:[AnpFrWi'Ar'H`pEY&ZAal#,E'H$2+k=W!`.iFogs)-l3U[E$2S!bL]!n-bE4;JumdZ#n0:@lZ%hf))(b$1AF*H/HWoqoCtD!@pgo%YG`>k:=mVR.Rg*)ATdQrr['_jtAgNQ:sRVdHXd9ho^;.<dBnl!Dm[P5FC`EqGMs/$<"2P!7o3%cNrF.LYN7JR?(!3XM$K:Zf[4W_X2S,X_iLH\=LSPCN!M(Kpsg3IHmJ?@uTCe2gS1'f0H@c[='C+0/s%Q^(0="@^97XmVL@>k"&t8%fP(P;cH/CZ,Aa$X:\tQCmSn6\L-'/:gB1O2qCR[DF0se:YUa(9fRW^4=5!r0>U]"`M$]g&llh>pFiqQ"G#Jf8NgWnbk1#DA/mCRq%1u4DJT%Hd)XOfTNj.%Nbg)6;9a0dquY[bR[iS8HY;.BtR9k?BKW]=86FcXLd`W9SUjgZ)o?G5,giH*:a]q7I.e_po\k`j,7%%J(<%SU5QZa#tH7+bkZq6%(R09&hdtUj&cm6Z1crI-_(^XnX'8obDIa?X0`aCYI:?RlX'S]ae*tmq]I4@W9E[Vsth:'e-'5>][B[DOV.q%S@lgN7SDN]dG;8'@=R=-_qfX\qZdd21Ab7lesC%X<2dI%>hT6b(CskWG!OfrT[Q&?KhDoS0f<gTqPi31_e!Vq^M?'f8AT(Yb]:'a%_d`u/EOp-b&aV:QdKj>u(I-?+>oK;%_Vn*uPdC[!NP=645_8Y=?oQS3k0ks+1%#1O^0qE!(EAI<G6>9`%I?="XphY:.L\H=7OKBb%Ht`Q4f#)NeeU3e_oNYToYPu8#mnR0SV*6?aTgb.64s\64j\9J;o>lT6VO#NMA8!WV["V7^mA=bX0P[ZDILq^9O/:OI-LG\*456^d%\<ng1,RtX;J^3S+Mj`1$^0CapI6eBJ?"he=QKRd_eT<elVR1;UQ&[4j@$OY9UbeSn6E=o]"C8=]2Jp^>=gQO]@Ph_j-eg&O).S#$%I',3ge)Rd?/0MpV.8FZE/ofRPM]pnDPa5C"flFTfT(HVU2V*7BLrFA$0BK&*R*3s&VTe"O]oS1:34D$+rId4XiuAEd@fCB\VS%Rf%T)4md5g=-EZ1=E6/X(YmZ2b]tZA'>aUF4#I>'e<moQ3X'L).t?ZKs_]bfu5!e$Ep-BZq;M,+A7L+RAIIICIpgKP=DOB-T@sPsq4Z%L3jOP/&t:Elj=oZm,t#6j<9^_jZ>OX"V@%@N7PJ)HI$K8fA!s.&Re?:F:3qLMd"[)Oh\4Tk8_^-(=`h\PW/44Pt#\nI<M+Y3<u._%EC6WfD1hLo]2fH_NZ.!W!i_]uGM_Or6@)Dg*1@L_4:m-N"ueC$Au9hA(Ru&rI-L>5NS.5-4;`.ajd?9^F.PC$NA9$HNkIA`Hb#Uh%;j]FSW?5;T!IDukoEF(D6i/E"Y;q..<nY$i!57Lp&jQE/=b-,>P@r,AoU5kqI07)U'6E'0Vaj,!P6Ep'6T-rT>boL^=b'iKWNDG,%AH@,%!OT1q]k%5US"o\hDpDL9Vq9LpEk7KrjWjf3Qh"9XZ?+UJm$FYR=r'cGPg@_bk:pu/rDGhOB07bd.3GJ\rI^I-\U*5#E[dVj%cH+Edjg-qsr#`G5cfVl[#<\uogq-@.j*io9h"UYj3#cT=p\Ho-l8RJN;"jY[c$hS#4SS\H%un?SDpC>=WI+T6]g?o:=3c,qT3^$=%]_L/VLL(([h!ut^P7'Zt&f8:6:OC"M<^4CP1@Fg>`r0B7p\HoI*))c*F5Q:r*h(KhTC;d%l$NBkn6=1XYMV0bo!eHUhp10Y?GF#q%<+ieochUU+QWQ5np\Hm_b\36Ri4XSW)+2TXf?\eEg60n?/T16foCI;gnA]FNhu$?uZeXm0I&l.fmc3&DS,MI(lf\(-^4l"Jdos#h%eSf3CC<h2)SAX.+pEn+2YFi.tAfkeOgV&&rkp]]*D_c@Df8lTQmT.*eS](?loj`i*f!kKYqI(?GY-%0cRj0G#NdL`k;Sbb>\u!Go%rKb7r*q&]B<Wi!kp_M2&YeS_,pA=XI3E!ZX5/,#-*mD+iRJ6L=^":SNmn2?noQf!K?1.Bl)`V7mI2,uQ?9^)GBoCm7Vr_i"EfQn7%S)I\g3OJ<:me*n/2""DZL%"'nFLe9(qtLpjfn8/%[tK,,SGcf"B$*I7qTX/WcHQ%Z3?-K1'+X3=f?a7n57?e"Y'^,;eK!J0me(Wa%[:q)aqDmHu2sYm>o6I[>n)IVOr`\.C2c%Y_`P$^Qamb\;Q>j%"F**Fca3]G4qDnD[MKjo#$2=:1l!p$F-sae-^=U]aCrc.QKR<Zf%c$!j:/1]o*k#T6Blq4=*rTroD3tM6Op\Ho-lK@iIH#F"oG.7=YjbeAtf?ZH#Q:++lI]oAb6EIRY2Z(1:p'J!CX.L2hU8NZHa'8LS%dp_V3olJtpYW<e<SpUF5psX2_T1chnkBm/t.>"(_lg_%jF_[N\Qe=#%FBr;K-/#nRhlh)-ZYLAB3CL/V"Pt*c(Gd?i)X(mCnmS66%3@jB2DfBqiH9;Q&@j*I'(ntko7>asn(k(pS/ImQJ(S1NCGl'0JAoB?!NSTj4XoeDu[E-m$@i,J87FhS!#RYC\e34!)SZdEOC\JW#%\[Jt"mNYf(n%MUNIjKd=="G^uNm:9aV;J6[eT3#`e.5;\L&0-mLN(sI5D@9j=V7eH3]FqKkjr)i&]S,8k%/0Lgr=4u_F*rV/3Gjm%:5,%$]6E6,667Ans!HW?#]IbWoAOXj:(0WgrN5$Hm+i'tYM%99,I7je_8R6H4#^W>G3uY[U:fsP4?n2r2V3S*B5?2&DBX7J=Zp$i%r!om2.#F/7C:=p?81Nr'c*+b-p*RJ6D`E"M9VR1#aW$faP4k3F>[7Me278FdcMEh^K['tN/ffooS[9Go(%.:@'p']Y0!a$P'l8ts%9-SIOIYG8uQges=&rS`.1`=#cCs*dp6D\X#&1[.N6_SgPnhXHt8N1X<V%THq(@M0f,<OSB7j1`T%7!\J\PU#^]]*`+KZ'i.20"hB%I103N]nLoWD_$''[))"m&!)S;H6BkKOpo8A)`Nju>7.HsZACh']Y=tgLOmPBapFm"T"oul5V+Rt"4?/@>%$rG'ofTjS(4m[qe-M1%Rh:aOCZ8r'ga[Ic#n]Z"]"_5U%.WCXb0k8FICgJTd>s>oo^1cWS+T,-HR4^0Q.M7mYon_Z$2bH)@Yi+d21-A_HD_N*(O!N2r'oUW%K`92L@dl0CJ(Bgj#p]\ojjs10+s^%k6N3li+6AQ$DkE.+(b;t_]:#lVW'B93Ye(S-*]2H*47#6fVE^.L&(c0p_*LD;J2FHj4F;#s%E_p)hPQeZcU:R\1Qgp0<`@1J2K3UQq,A]k/d8KZP6*75CV<?7X"?j7+nP<LghRa8jK!Tm=m8pA7U9[B*.W$@]>:j5s!hqB,A8+2b%`6g$&g9]62Ga>+LiC,u7EO2-FEY<#GEoQlb)s=o3Xq:G2[o_O6"9F>Y#`8GiNgMa0jUFq3qB8m31q)"W+2*["b'#f@`JI84:oeg'%]RO7s?J4UJ=.%(!]1#YF=K:Aci"j4cflJHDXmBu)=/CO-]po^pl:tm^HR2*QdGUf5WZ<'MiU6"]-*R28;B'k5-a2ZH$kO,lE\,[,%"kO&QprtldCt9-6khDk'[,+4B7G:`O,W&TIL5`kbf=`BCclj=Ug"sN01U-g9Hom"B4i7*Dhnc9LgG>f1(aJe;-IuUE+_jFg_+]W(%Wbu8U7#UEn-6>D4n93dGEk'RS-/]!g^"[S&neus>!bRJq$\ugbRd0)Uqd<@1:!1rE8jY#H*[?K)GG8n3JE)c\JBEah:eU54"cY^_%<'*iT'%T-/802.?nM/o*F)W7.9nkoY7uS2jjV\$[n1[1<q5+%G].?G;&Wf%D7-]TUQ]0)Jh,,B%S%5L5hnJ]!3+KYf$Pp<(]o!Y2%48<?O:;V6rLb;N+YJf]#Wr!Bqhd]s:ZWB5e-</k\lm#='e..2Mms5JWZR_c!?UN-#701jN9>j$lRH><E(9Dck3FCm4/]L3kX9XEr%7-Eo3Ph5#=2:6-p'nrDZn0+O^fSXe#G)7o'dD&=*4qK>k<19E&X`D!sio`UDIU)%[HVugJ<lNN.l0[OW"02;W*W=:^,p`bjGD1F^%@`pABb)!KmIHaIPfg;a^cb:*")]_e@Fltppoodt50Ua0Ng:%eZ2"TNC7bn1o9Nmd&9mM.c-m;eN\0okUp",VYB".AL6sJtbXU5:8%V8R'8+=A-D#=gStJV2RCVZXJQL1^I\,j/OL[`.G`&mU3)Pp5<^2r$iM*;3WW(R=(ZAtUQ\p@iS-q)Ip?^9T&M*Y+d4&a1GfP[8.m%W(qVu#^f#cE/3.bDcQnE!WkJ3Kcebm>N58EjL5rj7s4BD+hj^VHWQ0_"HJV?X\//13Lr[Oc<%u"_L02a.GK`K=P$uu2IhN8$V8-C%o5pI*FOS_"1JLgcQnO2)h^EE0V-k.%pot>r-m=iXK#KFJ(OX<]2*g@jX:ErG#_=Qn?JcO@maLf]VIZGG7`C!(aG?W/q(<GY2n@/S%#^e_BSWm74NY&KUg"js\LXg^q'@;Y&:!O9q:B@DI)AlG9okFWAA=sHh+thd^+s]MgBUC'tc5"j^6Nj8JJgPq`f?;NI>D!!3&f'r,%HQ,d5$rAk#B^p2j!u/"_Z'ct9,UrB589dPW3h_`#i2:+V.Y[O?K@AV[O)2P2'AMD+M(cO(@Y7l]=&K?qF)Y89Gu?[>g;.)%<?=X)%;;h_fpF^/l4_`p6.2k-'n[X#F\liW'o'"eHl4:.&=&E+DJka8#qL`n2aZt4p9mQWCN$F*L'Bdh=9FOYFen_qDR(O^-aC*a'.8qT,%ChSH)<K"Z%\5np2HfCh8WGg2-?Qh-6%>k(BXL8AZ1hC1rg^J'*hRKn>W9p2Q$oQWhSrc"*XJ,r/>fRkNA,$0D@SK(.-M-r^cNUY@%nZbC&.^c+bf-e5/"lIXdkG8_RMQg#mC<uF8YA;Yf8AuC`LGrYj'_`spg3`2OP='Nd0ui:ukr1cA8",56FG0d5SK<E\]/"Mb;<2tc%7RIb54:^I"6UFPtOT=S7]J(V(hXG?Dr7+X5_P9Bm37h!rJ5LjZ7I(JFK^nK61D5G+`qG7L!r9)OB"?YoT1@/9%MVQ/Ea[A&7jQ#q%g:n$f'4lcI@H%45Q4?U!$2YB*fTUiGKKsSM\?7"6c@HJ`&:9/N-bTQI+6,o6Z&-Yq<>-Dld.bLsqK"R2)SkN0>Oqs@M[,7b>NBl"%JaOg93"10]U'"UEY&kTep*)0<LX1f0/a"CZDSSUA`7JWLT5Js]\_ER^cgD*2&WFud`7&*k$$5fT,G_ut``Z4fW>C22eGCrLOm?h"%Y3?CGKIQoo%8D4&85s6Z'2nuAA)<^=#M`0jjpXVQb3mr%Kf*lMUGj@GNpg2,D29Q6*8P\R'e7Ne_iE"?lTh4"](-%"-.0W/ma^9j%1j8mZ>&86I^U`#Td[92EHBXcL'm:87_\d\3)GY^JXI/jWd?n!9Bf8+q]\\1$`gWNk-e,"(hj2_ObDP*ANG%6qS_pgi\bU#Q=H=.N%TK^Ng?3K&$.4[n=k*OJ@+P9=O):'e'15\(L4^%&`%T]"n;itB]r2Gt50\KfIX;lu"_d2j`f_?'K:T8=-37Qa>.=+`,gOPLqpQ;cS%#,Ij^%U.R>hRF_H>W)Y(KH`B^io#*BOY**:l]jHZgL0mZVfCLd>fb(@o^tt^R(ltblKrKr2f#p#X;rK'lSdM`V2*4l<CBEEJl;-=%):X"a>;Z26%/pZIm-,BK`9]j4[@sY^oR'<k4(`CIpjI"6"L?uZ]G$!B8KU7$rNLK!D<tO*_O,75gHp-:.u4EL>N!HVS@XUlI%hqN%Em3T2,]g2pF#Pj5-GB)Q;W0pEl&`@](H9CeYe^i`PT#"HeF"[qUR4h&3iP/n(tPEpVJcVe>cWsGET/6+8`d``qL2!bLK8]?RrN9:%GU)9U_/=Gp*o;.6;N.;JRBMV(XqlbsK)H_\qXAnP;;e*^!,srKKCuCO#"P57j3Tr4Hr;Vf]Y:p^:OKk]pZ2#:BpSM+*j:jIg=kb@%`&A63POk.[?Q3?gM:LM9.AFeO,/'99.T5LrW3Otroh56l>CssNNt]1X5eF\0EQMT</AU7rd<_Wg98rl@esV33Y>^+2a)mZa..FlH%@QXP=0'3&&q[h`bnl%`*2rf#:7pJV8<HDT[Bctq^Lo.L&]Hb>?>\&%k&7j`./3J[S*9:q4P9-L?aeoCk(-TA4=ABuC4b^LL]XsP=%SHD0ge,P`NHi%$oig.6$2(k]EB5;8Tq4[Uak[mo&A@Hk"6tRYTI;N>bO4H[+,IEa=\&I"\<T'Fs-3l$@d3Kipq)D:B%@r[@=LXju%/g^To1/9&;9]m33:e]$l&Y,`Ee[8[<1a>6[JshhBh@AZaY8[eS9*(E.-3sN1.0*23*&*,RGa8D?Z[N],X5[EQ7_df.hdH%I(BDBl%.8-iLCGkULVIAlGOk2\(=X5rf$4br\/A?=kkX:>b`MMl:e@jJ=Beokhaa#W;Rm)N!P#CN($h^4BhoG1P(+8i7U<E,P>n+5WT+Ee(%@Xt^%lr;%;=V+ANmU%GMf\Z,5OT/eZ,PH#ZVbdo_Z!D8?`KnJJ9l7,?]VOdDehCfnd!TtK'8ar:?#=@:lG+O%hlLPHR#=b+FCuiG%AdI?OeUaNim;8uG\X3jZLuV-^Uq`ri^K)[^8)'0lXe@DHD;P#D%_"1&?7,umYEcE0^j:46cF[f\VDD&S[Z=qR*'1QlEd1pU.36TN%@o/DQ^n%]Ep($C<*D(k!Tf:nWk#h4kj^+:.qRrVJnW]bMj?T*P"ts%;3fhF>2qg^*q=5[a<TS6$W/M[,c++QjhIHY1CjObe8I0>h%@U.FFO91N/2Q[E><=0klh\S*u!ZH7Oc:Lk??_l/`'Tgd6M9ad!`*L#4/>PNLM:S"U>5Zt^F=H,U;E8-6H`9nnMsHkh?R&IAH')c'%JEM</?,1*P%4n:_i,F%</mo>]Y[h#>ifp=J!BXRPR8Xp;OnL&TRaVIQecdt&FTEBkA*+&s$NLn,=:E$U#ES%5Z!,pkh*3&cS4;1>%.5[&uB\_lE)"C(@$Zdu_5^HM#R7T-pi$si)NS2gWN-$EAA2H`9AL/%#J6ZOS68ij/)GB12:l$_-Lt6c;4JD6:,Y9GLf=&hWS@t_I%f=.R(j'#<+*f&0kked"&)*Ne<cin^`k2aVK2.$p0."u.a]2JFer0hHFL-C%r`9M+<DqSJ(mEig8%71t]Df@[-Ub\DJD<%Xu!79^X%%$,46:rb);W)P33B[nE1EOAn=?%'u;!^gPnqY:Wu<.\.#\`otR>;dahT\Mj>UWVjk58^@kIFhEQ/3Z85kT<n@ZnYN`9AL-'Xq!5l%^t3KDmh`<f2d"!>[a9Xqd/'2<<N.g#P^mk07&P?T,aGif;Z&j`Xd#X5+/Q+lKQ68D[WR3Ob7+%=kOhYQj"P)%G2^XM0s)Z-!\/dp%5Y`NG\gYbt@<W6DHA@QcQ''J#*SCh(N90`ad14HH_Y4rnN322nBr#C<<WR#qk8,/(pBOo#33uaTj)69l0TJoh6K7eX<^TFg[K\e*%-R+Dsmmf>cloPMN@J^V^ru$@&Q>dTkgPpf(==qNhD\7NGI]`a^CKW3Z#p.K=l(j+fH06!-+`0!0V:Am#1XjbY=Tbg]oYP4I2ARZ-%HJt]aXY5]h[,'/uot#89&U1[<oZTs@`$@9t*:kR=?k_>@N)mu4&QP=PjRNhFn6kt5r8PVP)%Ei61Utor<1jh)g8WFW$?TB<D`f63%D*f?lB1<7?P5.sdZ%]glNUt-';o6.Kh\W?4ldE-`D0gOM"e*o(m1!bK"^8SR$d*(uK.TfGYTBn17;Q[aPED/"AT(9r@S7q?aeL`\%AkVSfWj]@C0Bck>EuNDQ[e*no4AKPHK/IMOV*S91N4*g4ofGa^ISDPh1krrg7L%o+6G'I$4#W/j&9o6Sk_)p#`[;e;.FXkfBq.S+%UI+0W%Wfd7M?I3[ab0K)(feRQH1*eG:W%FaMB\>B[M?`tnMLT2>_cniV2XLQ_;cEmg.%Xpr_W[s6%\u3\:%<]lT?\_@UDRg[Cmn0%iNdY3^9nS%g0&_"X]Ce2gIFb7^33k&g"pn9P-FUU5=Sm\#^>1lqhaiT.AEX+#(]Jl*0(CGmtN^OKBZ*SH*Y(983\C#T?fc#c5'gr%LbE3VM\#s5;<liJ0?A"C)5s<(p9mM6P$<n4dd>2XLg4&35/eDb#Z"5NWP!M'#uq,!+6<@^p5'W7>t\&PKi-gB2n"-#<a%)-LL>:_%HW)Y^"\5?_oo=DmL^Z*:E7PK(-8bt6`O;?L1[Kgl2<c]?QU>WQOX_C.K#;q-BR0'$Vj6OtE_*:R_f90n=/nP^h??(<jU:_Aoe[Rl%BZI2TlZ3VdgaHr128lJt6*,20]\?&t=fF=50<T'_m//&l[pM%A_'M.?D3n200BUA:D=lH(YafHWQt87TD3n1.O=mJqddauqBnP0b%;Ju8]DNY*+,BGH70I?$S?_>''C<YF8b"@Pa33K+$=\6$upuZcnl!%,q:+>+LnRYL4"TpVk3G\%qLd+Dr]QnU:jd%[8AoL@2ANAD'%*D18@q%c,EC14T9#H&9-I1g.@&Qh8G'ETf(r/+GHn?`DC%T:rPq7lal#)soV6K,#Lm8tNp,aGB`h_]*2itOX@!B$Ml-g>H78P)*/%-2Rs,+NNSJgYoPG^i<3GqI+uQ,N@2RUuB\GV*sY_L_u:U=[Hg$]_GSi3XAu".qtn>*:E5O97)fEX&?4roK6KVMK*>$7B4FE\K]5S%RP@]/Y_Z93<6AlKb3T6!VbC5tF1UQ(NB-\J2R=4)HOfC2)bs*/.RU"hKkJ[I2#68>Dn,$BfKiiRKR;#Xi'N?A!&jO/X(#&l76sL9%lLuPfN@aY9$p*q@p&S?sYKI?4E^a<LD4M:G6_d`"TG<0hnI?\)\`K#CB=Ccj'hJNKVDp&_d>uZeQ7L6qopeW3Z!P,B$0(ePOQVR4%U&O,&`W;uo5N[Us`uK&CECZ6U])uq6Gn:@b7lt:cRXu\-F\/HSW#R[/$K+qRVCOnM8Bc.dV,:MPm3=:-oJWZVBO:ZEe(Z.$HpK^?%],lfu9Q.<!\+@[kGcX.a>0^N%7j07bP1Qp/$ub'PhXl70hI"!YZoF.CVo4N&(.pft-QEjW=gOKHoh<Pl%i[oB2$,l.:PTO-rT#6i%fo"_YlDA]T_"u>j19_fK]]`OMkC$me0s=UiY@(Ema1UD'Sg!7H.cQ_PAXP9VVMJ<!s#_"dbo-+fY=Vj\&]U"^)%mKi`.RkBM>3;V%J]J^5YL`O,9AJaK?FZhH&ls;]?H&5'8\cKjBm*>Rd3G5jEBfa]qlrMOpM+++m;rs5qd>Ind7TUY.amY!jq3aXUSLJF&?Edj*MeAt%%`!:N_Kl?JQ:odSXRlc]hNHJ9Wor&1)j1##(k'=miq(^/S7k&lCdsYrE/QZkM)3!nP8a@/`e0Cu!V!4-:2MF>0tVmpQQF``m8VD\%GfR`b]3uY7Z9gE!2Y.+.)(gf=SjeTrE>Bu84%PUZaNW.o9=2+Z6&s4$"ETSc\cbqjSrG8g.>$Y`,"0+rpeY)UFh%9/oWTX=G6Ho;%G/+_Dr`%-Hp:tNc^2sT0HZY&Pdf!O%7K+-s"Z+c_6^Eq'Q1MIWKt6B@3Ae+`U0,SE.DTR*]B=]OW.Q^=Edcq9PRd8q?KW^&,.;>Z%D1B2aI(Zd9YAZQr\gZ/BkVJt&1P^YHhuGA.qoNPZk2S<o]u/-E3)M%2+sile#T.^gq,-+\MfKgELgj5_IO*D+is,mWEk.(sF=%Ac%iq8=l9'X3RO,d(U*fJD@SFHNh<m]WqBh6m[+Tu[&i0+2',5+k89o6GKYBV=+.h*]^"?dE'44]@\]hK:s0B!(F?C'^[-.^>*It:sh%h>@ZA7&4R&G@5[O7J?sK8.NlSR!jMqK@[MG3-0=?=r6Z7$hAUO/^KXA14=SIfM>XV0-f2gOsBO'gdg)PA)&1eN^CgG/fZZ)0=i=8%1)hN3`&;X'bN-N>jJKb3,)SC_MQPNk$mXRn]NE8X.GZ_E6:/l"/F03KKX^XeSfZhjgb0NgCZBrbg/N81Y+mNsKch-#;"m#uM=0h)%iJ3>]E-P_XX7W/l!<Njd_scRpZ6`"0FrIT1*KDIj&SGr&d<56N4@6'o*0\\*1grA4iokQjh6>%tX.B)7:[O(bUlS\nUMuaf[]ObC%6k;?R\'`qbX.r,YK10%?Xt?_VkGW/ZP)KU)ct1<G((AY9S8cOWGj!-['&;YqR:On<7@B@]37=nP]=-hgA*T`t?#4;^4f)Ws[]M$V%4YC:6iX:?]7:b<tm,:BtBWu3hkGS35?XAh5Ol`>aL5n:5OP%ZuV4=)IjkIZN8SKj+]WXoAG7XS-Yu!_I.'e0U:/Y.o4((PHkVDkI%9KQWQECa0==9\:;Qk];[q"DM&f]&)QE>6d,iG)Pt9TZr/YKedX1ihI/.J.N1p,FEnA&\VAB#pV6aN(O&gNoqABq-/35Ns0p4=<XC%b$lr'&ZJ?i.TW@s<oqGgO2E\H>+/K.:`Kq\WG!H"gcLAZ:=^(lh70V.^!Vh_<p_^K)BA*Y#:DJC;L0BSEd5nL1aVBr#B-]$c&[Yh%a'`hTbY[>F=Y^U.`@W@K*cf=-h+!]!oq`)c-IKDbFQ`SDaUpNXN#A='"9kq$7>T"uOd7H6k&pmX]P2;@ea&8ZaPo<O)Y:Wn[aIB?%n8;=0NDP&Ie-Mng,oE+mq;W:+h27'm5bYoa(qd8XI+jTahr6quq%Q#8Q$KKk?>[qP>VrAnT:lC3V;X\=aRoJ@Cigji(Kn,EZiguD%bff_Dh+d&7eYoD?T4<5lo]4fTItI'O^\[NGB5gX"i1%g)^:hZ4L+MK*>&^fcanE-U$O,nL>pLI:@l@=D%;?=1m4%GCdL[XP^bKBl%1KHubo4%fSL*TfXQ+YD(bj=(G![I=S]9`]oqef2+a,c"k_FY"=.uUO;Y;2CZG_^Km+"9EgbFAof5]$&'^5ktDLY83D/3]Id23=BY%[9L<RO`abfSQ@AWjL4=;Xf#op8f0qtpkV(])8p19_Rjg!bJQ>^l!]J%[4CsTI)8)[d/?-T)uPo&\Z,NEq>!-NnIF!%]XGNP7dtq%%q%)k;=GZ1l3uSi[Dq^s\r]r9ke/h$R#M3EhHP#?^I-eL]%g2tKe'YMsbh?f[V4j/C\B<?gGY<Apiu\\MOMZ18D2t.m1`mUPK#*1*%+f;KrHjOP)T1;G;k!0%Z4P)NVeqgt+AT:VEPqGBRk5nnR5(o11s(#aPMlhb)Oe/1m?\skC4*OV);&UUMc=r(hK_7mlb@!?1KO:)c%?<?NMTY+[AQVLnmU0RqAQ'f6RX7gq0]Y>)\6BBR,f?'5(k.)KVnfn!N).;W$5>(bQgH'UOiCWp9%K)NRMD%LqW@l_E^dETEkSs6[%6pg[FenL"jlX!6VgZ7mY8=4G-nZ&]Y),pNb^A-(hg)ZJD`+\Atr=IPR&BH6_c0JKdS_>2VeKHdm6G71HWPKVFIc$4`Js=[V"4*4(%MK/-`T1,U>$1,.YNT9*HcqY9,W??kuF^oP9*>WUIL9qJ]TR`_HLA4Ger^;!YDYNQoKQ[)=8rnA6(?6/MQm`tmpBC1Y>nBoY,?W9P%7(iro=BPjDXG2R6e,@nss0M%7A/*F`9qm]e`MBOE:PYL%:<t$TD>=h?"&Z`![JQ5_Wa;ZSO%]H&j@ATsrAf?OIp"lnaJMREX5?tV%j>?85%(E7#KqIWDZCR^U[^o-#9(fg)HEkpI]aOSHk2!eV>hahI_\$It6/pXMnB$:qLjjNoUUTuB+>V&E_Em1X5YO/'0\tBQ7n^;8%*n!7`gTe4[5BA=_D3H:N-g^3f2"T,2al35]1>:"([Vt2kr^67R4FDGdn?uM3-bn-IF3![8l-Z`DH5.LJk&U^r%tsi9"emq/A^pP1%]0Idq=OBl:hgui^1GnCiQU&(0h$q;Kk>-&0Jmus_UC<oXpTmtada.UL\Q!CHrB(ZmhUoA7)']`&/6_:PA.2/ai'S3o-%f7Qc%t?.%oI*aPfST!OC[a(EEUC_uDN?$V(_kVJkK+9Z?%VShFH/5g20O1.b28tE1mIhhHW5iC&"Y.%qs6V>]9IjOO&T_#1NSYYqrBX>Ll@!k%&NJFnMLOs.$UWc/io+W8_=[1p!Hc6c]u-Lh/R^raT@/d:@!q8@jn5s4R-lVs0NL37a2uj;`9hhn+[C""Ld'P^o8YYcpn^J5[#i.?%nM"1J%\b5]N4\00r\Vo9JQqD4pq?HjY+3pZ&j9V*HeSr0,J6Rr:Un*Q86E8)VpE]DijE1!RJg1abT%)_=8C])\OW@_\G:_)R4Le/%]8j<(b8PZ>nakM:8%IpuaM)rk!Xh:6D\XVV)Cmc-p&t=8!?+ag6ccOr2[7qr+-Z/$:2+O*R3$T[@s]KF6M+HG8a["3^D;W[pT?("%Ia*&,Zs"c(94''K<_4:;\C>ZLC6d<:[oh?FBsgPG4^`#qFMAj6A@.eQBQ.!BaDgt^-AT#"9?QL0j\^t$=h0e\io4`n=^W5t:8])&%R2WkRGA^IAa]b:,<kQo=S3BA&7W'(gH*AIR?8e;sSR)a.$Yq'>5\o3*!'htY\0f/:>uftV_$T_LM@A@b6tc64[bf@,5Tm\+5$?R`%0.XXV-9A'<Lou5ZeV&`Ia8BCZ2IbnR"/:Q?PG=%#IDO2,gW]pc]_DpLQ-K-L3:MF3o:&=Q:KYZ)f>ELU/niYoX@7/MX4'q&hq8#t%_S3)rJK1X`;34K8."L0%F6>L"(,_jt>9rRs^3^7pRmH*1bqTY20'@K>-la`_m'r\;kX5Z&\[/PiKJeaHSiXgDko=WorS1d_`(+`%%/FnJ42rG'=2=[MtAnkeT!Us_@)dk%GHYii]`[j*dR322;WB_8Y/2W=[>UX@;J;GcsRt,ptR>6>4cod9[A:1Xji7e<Mc:,d9OmYrV%ljI]$X#i0=OXhBCTgcI1S46rM#4NN)N_Lq^c,KNU$pq%V<>-Ed"/9D&*r=e&3qVE8N%K(s4l"g\8.&jC*hpO*N*!$T]KarbTI@=E%dV6g]XW<5-J^I)t<m[[SH5/%TpuQ67`@=Ps<k^u8*peNnnb)/tRgcWJh4p>`$_jPG'WNg+0CrsD]@DsQ9W,/+-DroGGnCoVNL?97%XmIJO)Fc;Z&K$MP-T&WR.XLIaV(m$ERP2Lr35.Ba\`r0UAFE7"ehXML<b)KsM(cg;X`Vt7Xr^YT]X=";6R5o?]3U<Y]U'dh"V9hG%0?aVamcjI",)g700XBTIEC2K"[f+!G^hc6$Rhjo>ZIHZjTsduOZUsj8)Cl$p][_[bJrP0P35jG.Ynnnsc&`Wa1Ml)M];>*IbWeqD%Rf!)?h\n`mRqrPlfg"IT#>A4WE=W7BIIk?eidnl0K\uI$?AGmnO-?MN%g*+?c+ST>a*%Ng-:utn*Wqip&W,%@gUi!.kBu%/NsK.e%S/S8\(3<[IB_7Z3EX_"41i]+[3tclFJ@9OQD!V!;2_/s9?a<nEetd79#t/hLj0+:rSp>NWkf,hFo4P3"3mK1]0LJQYU7%bU$P8Q9%Xf'I6g,!7OG]*&a^,)>5Pl8[1:=_JfL\;VPqHSk<otoBs\g-\C7Fl@t9QEKRm:EYQUtZaBJ2f36GdpI%ZG/hF2kRqE\eUW?neNT,%oeDH^b4n'k86&tpL4IGn>X:qE=&tYa7[A6%V9aN"WI>/MYe2J7I6lU\.-J?sEqFj)I>E2X]A^0QC\(a>^0hM;>cQi+!%OdN$gL6[%=)\"6LHa*]rY*Y.n<m/OU6P=DW>,2kK$nto(W(=n@b>&Vq1>f,r,>p+[)SYcY;,t8cU#t7EW,a,jNmWnh,dR"b9''a&RJ=OoI(.F%)m?2qY<Kdp8,qKF#6E-]d'lrG&C2U:61PERF=*KA7JoSFA[CTY,)Aj[F:c.85kTi@P\.]1T\kOgb89IBJ,Dn<Z2a>sn@,+i$XZdC%j!h_g.d6KE-_ohFpH&:+.g#]FC)MN+HLJQSF;K7KJU3a/8odNn*QY%_BdlD2!LUKO+c1NK,h+=Nogk*9ZJn+B8SKKRa;NL5P_mSX%"<EX\6<m&SZj]+`iZ`BBA?$ckhFb(/0eR'Pl_He'1MH#(Xcn]V8_[DCR:VJcEEXNT@bjo@Zp_aV,[&Jt;,ZI4=er7CJq/<l"?u`W%Omu"`P-cEkJ6>H=a.[MJSK`KGZ`HP-n2DdFC<]9u3m(urrhR;"+))>T*@_`1+u2P7@L]0oX@Uo7k\Kg7L/(I+_F.sK`2&47(+Djj%AJnN:IOFdig8BndP_ag$=Yh8&P1?%fd8*42ai9nboiB^Y;41b/$KtSh$*1s9dZcF`&jm9],"P$hg5Ec;14(Il7[cqb,>0el6Y3>a%qb9/*MJ11IMHZBD>``C@;+[&g0lSnMV!-1Hd*e)3[Nq>G<2SleaMaodr%h(32_E)79BeEaY)O.?"Kdo!G_Cph[HP\0!c=6C)O-*R%-Yil/R'`"gZlYqs>U!nsb,,]l["cXa!/%QiR=JrJ#t8[7)'("P3k)%9Xjs0E<:i*u[8ZK?-"Jd;>ZW_gQDCcW.a+ig[/QuV-l#US%bqttg7>u#sEPE3Y%+DSpUe#l;Bj/Gi8Jkf,;B$gK-7Hr3i^qVhaTCMP$q@KQl-3i(k^]g<1Kb&k:2<CNU'rL0C68SbB,\N01?QkS%Icr#G\?&(KOC'd1>?[MV//:lU7#.-UP">kWXr#3]/?P8t(GhdD6YI6SM6%;9QL^H6d23*'i?mVZ<Z<IL4=H<a&lse%Pp)]\&_UiM%U[e`<T_4Pb@CYWd75M!.EgAtE,-@&nMD2J@3srr"<gVX@9Vb+O?B'%WWsNN?,h!C/0f!9k+AtOU-hZ*T@!$[s#l#c703[_a/7d3<%Qm,@7<!k#T)iD(C.9%?BS<>)E*GnMI7/SR7rFD\T<s1s&6Y3'R\HsK;Wu$lLZ>o7X3qB?^M@DB]f*Z1+*>G2G-t7$dEV>]Q%uKs-%X3IJmq%I2#rh.n?iqbaD5_"?.8!dDDh$le.ri%&.NjG(^')%Jp,dUYlXX%C++@!7gaUElX19F)o/^8h17C5<IKrg8c.oKo!=VB4T%nr:r+p/<gG1Am5ncZ#r=YGC\9;,eDP.9(8"O3(5*T8"Fj,8c,QR/:L^GY4GFD3-2pG.9<\U7Q2<CJ(KJ]uW#r.>pbj`Jl[Edci<b%2e48'1h/Y.f$`8k[,4gCRF]EQ(MOn&@T?"KSngPJ1(n\B)4c?,3j39Hb2AoY#O=%`W>V6Y=eckc]r^)P%&N5?rC(:U%YqmOePIQ-%'M2HYXJVsG=[q@aI7TeX:MEbK7!U8b(!*IEl_+r(9*"?E;@nY/O]`tY+n2H,"pIS!6@/]DUa9l/JKifFD'?bs*2t<i.>'BVUpVPh%kt7>nhUC%Fr0n#4%%@8G,1t,8[C;<DWFg)d\YQd`ZIM%-N3`TZ>@aii&kU8_?BPAX%T#RGaOk%#'Rd?1%T5mL,EWBcWND[^0hnnu%V-$56[XJLH#]WFj'Th2br_BNCF[O6Sg2'Utd]A*/F/H2g,ppJ-DfK^-X3GNe#@>5n&,VCf3LI1ChsAH<)3YJ>.*.?3&-Kba3-]Nh%$db1Z8KPor5>SV#Xf>iK7j"MM*8nfhX<suKXX^VJG!F7C"LO+*\;[a<8Lcu.M[5lVIdbr7I)a;e?^^mebWAT'/)P?jF.cdDb^*,a%..=^<'P1IlH.X]H$&UL5T6(<2?^mG7;KYGnPW:A,7Q/LskOY"\V.2j<C$1sJXqrLJM>BcoE8#=8m4M\oBI%A"9-1%6fp4o8L`7A`%Y?N8o\f@h-$bf\A.Ti6aXjg=C&^R#+L0E-Z2SDY/D+H=_bSk*"[n'T(*6]m5f!gUp9[rCh\$!e2N^:'a>7+;l_`IRY'X!EO6rHKG%<IbZ4hmb;BXm4&rbK#JD=4Lt@3*)s9PH:sThVEdXFf:!u#8k9BWS;EkD7Nt7h<KhY*35IYmKXTraFu$@$2DG:ka'&H/@=5N91=a"%>2VlJYLo,=!u;:4Z$!"OA^IgkMks98B%H^:P?,:PI(<?UoT#;3HC*?RdHFh(d$T*^D@*bWP229PJ$>^A5GQF3_>c.loDb/ls'#,A%n,;#lV`*+4BsKnX^Vp-=g<5^oaZeOYQXDL@fFqPEp".@8f/N-Ggl^Zj=H^YSD8i[KCMhAnkhkJ9FnEf>_,-I9JYM@L_e=Y`L,>P+%A$]k4c@G?S$*",r%]RD"2G`$mn'tL=@;IdW2M)N;ffoQ.\AN,8Cm&.Qqlen%:Kr1j=TV(?jA+=O-#RU.T-,g/jG>s+Z9F/-X(*=b%?e'MQ3A$3F_98=Idua4F_6eg(+T\6,oIn7_f<"STQf".]'nc\AG:,GBTVJ&:qK#R;_ON2sC6OI01d@M`72!4iN\n/E<=lUg</ZZV%V*`2?[9N1T[ED*ASHn$RKR6hkjW7.#Jo@3]pX0&*%Ob3TRCj%_V0-m)NZBC8@n&A"4l*r*I[J"Y@Sr2UDblC`!>5\QeRP\m#=0Jp%C@"A\4./ZX*R.+f-6#Dbj];"?Uk:t`fQ@@Oclm*1Jd9n"CgZOk;6nKk*8q=X!R8FmT?M(V&JB4BU2pD;<dYI8Zu<*h\l+T6IE(uV%b8G#[4%2.=8DD%I.$;T128FV!03-P^,qV&08c/HO:BF"=:J1Cd/0f>th?Y\f.JMPsh;fgt*4kgPeDc;C>)X\@mFGDjj1mLi5Y91j%Qk9I0+GZ9=``$X@gGh,3\j=R2Q`r]"[qW?6R7QcZe%1G-2=/lq]$sF)B;2]A]-!$t/>Mf>WJfY7,6\O$b2\F;b6#\2"5BP;dL)]O%c$Vq'oHnRn(5Q3l\MT't^,$1V8Qo]001<ff?s9iaL:P3l:KKH:`:,f1>Oc28lY^a/V9G>/eQtR(E6.%s>^u(3ihD0Hq9s_\@4BVU%]M&qa/`>oK>&(s#X\?Gu0VBp9_'=PbN7/]`rVf_ddnkFJVo,qg$DL4jQfWtQ$+R-og(d[?Aie_Op#uSqT0/8O.<6Vf]A_7plg,M\%>QqO=_82*(3im_@)LC'g@.\`RSLt#?H[CDs:X!QJJFNUI#&do%,go]qH69fH3P5l#>Rp?DHtQA&aRgF,o><@:%FPGF$7&7>0S_ku%\ZP8&'#pWeebI7Upg!]ORI<9%6br@AaDrNqDnuebfH&/LotWW-=W!Ju%.n%aluMkYC$eB4fc2`Ha)XlsK`M_rEOV<lIuCppMI&H_%co'V\KbgsG.uWt3+@?9<>=9`+Km.T+WVHAf//pn-.M$OI\YoZ]+!FB>`,,PF;.SH5bitN&SE!>g=:b!3D@#oa?=E4QJP"X2!Ji\9%)^_>B6Ze"+&?`m>RC4_+)lAItV%)ZiSE8^#PXs:Bk%$ON25If#DUt0B,2Tj[Vi?.@,$Md>^*@S)'_u-.0U1NLqki0EEnYB6907KN%QQ:CONS0%5&#P1Y]3@GUjtkm/.D/_DjP3^cA%5dOGA(K5)pPbE$YUWBBW9lIjM!1-l("DTVWU?&5g4-48.JD-+Q[o?j#q"Skn#Oq%"-0?\&N%M7":`ne_Qo;l;38+'fFf4Q*6,)h@tH;@;YIP<$O7N,KC9Y!a7kgACc/(kcu%S]e[o%3K%(6AJ%DqB,_jd&Skg-pOioGu%PTW'qYhl+<o(<LU`/GZdrn.f`'FY7Y8#V3Na7@R+2bOp?cof0^i,!943Se_G03W?iQDi]e+9<!Y6lkb[VB;LiJcKO&2EOO,LoV!h%1-No#I;hW3d)FMS?-=L;qo^B##["U$jKrBCSe)GlL3cs):rhlN[`>u+)o;B589t9iK-SeEnGq6IMZk>C&Ig"Oq?%o3NbDR#cb9IX%mVG+)qFi-#>FuBK3?Z!VY!gBhgi[(<+IrmO][1k+B9H^)UU[d<kBb4DUB2e-qLhhGl1q!EGUT>)2;]6D5c5VU/>2`s!"[$^j$1^(%$8BA>g@Jl=AKEShH#%WfV'Q!7-0=MRS!"Yeh8hZB*7:],OGC,0-?BgOFl]==]n/h!'F+iEP+W\VoR(#R#@_p!:4])-&pr.jYJ6J4%KDDnI\8)1;_.fF/88iKcBmr>W4.0Z,89RGEHO63^>E62!G!3*O7%VU*aWq?4!ku7W]<dD@G3*\\cDM>3?[.FdQDc6KB<n^G3bMem%KF9SZ9Y[`H"i65M*WBYdN>n'15:oS^&/l+Oh?-JaRo;?OVtGRU)fQJoQ3[JI0!_#:rPb?/n0O+RgD@=E<=?d3-5AoQS7VF>#UET=%2\sULSOi"Ep,lK!!W/B51P7AscNLm1!;D1]Hf6B%'n8A&MX\AG@:rUp:D?=QTr.%6"9P;#c(oA([E0[F\NL`0HL?f`cB6";N/R:`%CdEL*Q78DH"^.IXCa+^Ca#meqliRk1Fkp0Kr5R<cErB0+@Zf:gXWZ5R`I#,#J12^DEUAZ1N27ROL>tP;=b8$L-B,1+,?ZQgUtVf8%c<Rg=LeaK&7,,blFu6XG2S3#GA<QZ`L9NmiL_>Qt@&b"`,#,Am\9Bt:(\TLTiO7j%aZMPm]#G:-`6_sUI"fQGFpQS\B8"HN+K5re%%BaA^Mr_d``buld1$F4n"goLKd?0WQi$e`1ce*^!</O/"V%+smbjfWr8gJ0'.T_9sMV<KVUIe9jPI)%ko/`QuLbOFY"4oM;;'8-a%L"mSA6+7O/.81=qI#kKNqGmF1k+:-\=XoOd9/d8U+BbHP*&tV6EFjB78H[6tVa?U3njS(6*p48dE5an*jZGP#OK"",ejsftacU>V%IG5?pBfr!S>rn,"n`7PL^,jp:HA_*F-&3_#l%+5(8?HP-W(E4j:1/,sil7S3)6"+Vo.[o'&``mPZEF6Tf`&0*[i07Viapck!Sq8V%H:1=KQS@=_Lg1;9LP"-E3B5iX!a8Uq4i=JHAr'hTcbl*g;Zr4K?H)RRPD&I;Q;gZs-T<j>QSp<BaECI*JR.Sa)5nbX@89'H32&-(%=XC>d,7"JnMte$G0e]`/Dio9-@O(Cm`fX"8K1pD(knTppVt?6V\1_(Z'l2+<RKZu8mgX=ik7qcPndS#'s.3`G&^C+OHYtHigb'?D%-8-'QEhuM.El5`<&#Z]nj^tr)/),Hndg%\J@jhkTH[K.,`(VA3f2L'15,1g.d6B/Wisu\5"DXQj#QTR^0@nql7[L*>/\W5c:qW7`%9r'"C8.V)%F!d]1!F6[KF<J[IR,/)q"q6S1YMBrF9AKH2[:WB;Gt3WARm^?)\qAi!oD0YC'$4bATP,I=BW9UOQ2ZO&PhBrl*VC2D%/KWHZ$3:6EE#;`&^5!G=->0A5K.oJWX?!j:Tn2FFg?T:%:0V(k`1628p_.qsaDL?UkKXjPAfXCl@'rBqS6Fsa"59?,Ca+_nYg3HF%,7a#K=ak"8U=d<3[p``C:@@Z3QWtnNG?sYF>hF-'885:hkGG*t];^+$/9Sj6UH=q4&8>lP%VM]SfZ_477iHX6Uj$mV*(Bq'<Rh&W%WNh^%D%2uA.FS=_GWN0f,_jc'T;/BLWVq*%-M?Oi2q,]c+W+[X&_5_p/>=,6\coJdma\AS15][I9V,Im")XMhd]?sD1bjqS^`Pdd%1'J[##B1+,mSkp=r%&_nY,H"TRjh%N/'-Q*mP0$9&[rM"FBU%OFdD'!C&ud?r)i@)[!<2r2iG]W<9hJB3It5DA+Q)gCN5XN7C)26%9*;^]OiKQ=YrO,4ik:b+n2"+QKA%"/<G)pmhOUY&)3/uGl`qQg4E'-d&J5;g4?u*ioD0YC'$8)+Y_&7Ni@ZG'-D_7Pl:+`rKRlr:%:B>@\<9tCEFZi.s-^J(NjhqhJ%T9bJf`YL7-<NfS5Q'4bQ/hOKERH7B/l(8aHGFSd$5sLQYa@0RTMZgKb6lWei>$th;9IW1p??/`%2/p_)?BW\BcNf3-!u#=rEuA!)R\mP^]p]o@&uY,u`<TLd'lpNt3rA*J6SsW=TUcKoj9AsnBSU.>J*Ve,([0WpZ&pT6D'X1=5Z'^m%=G/BX\56`A]>s(,7D'n'eZrI>bCWClVGo_1\pln$m5UH(LL*G4%3L5FjNA=i$bcBDHLRR5G49V#A]>39D9b\Y'RHr3lKf>RbgqS/%FV)^Rm7u=S/%JZDeg`R3La".k9N@.L5/?UVH$p8\M.Er$9]J[#Id+e!\OoJM!%(a'Zg#["WrptIAcD<V_eCD`C[aV+Fd-Pb*tC]q%1$7DKe>EH!Mta7*jZ%,;#&<AuL*&3%o8kilVP>/mc3,K77j&lGG8HuAimfX<Fgg9T6CdK'?L(C\'T8?sRBt`cDBfR]_I2R5K>H#Y%l^JBcELe7(KWiAWL9Le.,Qtcn18jO-8cus8_.k.)5Tk[n4mD)8K/A7\[-?epAk'lV(k"p-+-&aG`,'>%r>B180A+CcLOAUGfnu]D%[mY^YX<3Emr09!#dZZBLL.!^%&\cg6(!5IdR;,7-dN3A^k*5!e"pZ0;6k-l:Tk;GH=Jnf1K?:)HST,<T\nncDkU,@bX\=aVMIA\6%mdYRN&Mo:)'h5=O-kS<,1\>be"c<tY?<\PL72/=DJ.D@tJ?!g?0_$srds#l`Z:Na^p>CU'kH,MFNNt@uk>K3,FWhJ;X5JgDB6/up%>9KmTI5^'N>_g/*G*LUrOXO?ebK4d14.hAXa8HlFiC^T/h.IT[DJ.1UCGM\(8UVeG0[3XLJC.Jn%N^%dR^J6"QBEeAJL+"qe-bAI%=\=f[^^su?b@R5Wg0e9<Rl?#a8@b68=7LFS#M">]B+)?RN/p?_b%S);,_"DZ?Jg6O1-?8m)8o+EaI/Z,&B-ec,%Ff9c[FSf),YLN%Hs0?LCQ%Grm'2fB!D9qHYU2AIIcFrR3<h7amVVL>9Je]q*sU>PKor-/kn1ShDWjEXRE.n6i1hGL+7XW)&Mo8SZ2E4MT8DV@8Cg;-%qSe`3N1aRiS2"<P`F?$uea:/2H$AA9@HPTq:^>;T9T?,i]rC(SS/]m43hmQ'dF'BccVCsE.+u\F.@]\lYdnc%%D%EX`O\a$PW;s%%.@IP8!*YtsCa+^CZfK0\h.5.t=&(V5AB21=nL_J6FFW6B/gtm*`6FZn=*kRC0fujJGXep%kdo>=kgJ':j9NW93?l]rdr#1T(p.M0%cWUcL@Q8V1fNkdQ]&ktf<?!.aEFp[CBb.FpCgLJe9;:&jnI*?8-^-P&Icc\e&+<j>I`:acCZH@<SMoVB&S<e!Mm:j5(1C'>K,n+m%)NsXk>;hhD(!#_MYu*9F=j\$T*JXLN+Jso=p/ZjWlY9-m!lAWFF"D+"FGIBHk4M0U,`9M9^h5'1rX=mcV7U,2f_K%1MQKs/';2M+%ZC,K_Fo[7P+P6E0l=Loi#.2gG1Rcc38/#YF3(>-d0T65EDM2nN@qXem+>rqVkm,7K@4#guKI^\F?jt5!Glp($'<WaG_A5+eq2@'L%V"Cd/I.=c*a".rI9duKG"l1fn:Wb3%ZcA[>eo((5/f7iq1FggkK:Aih">'KP[r5#UI^9t<()h%g#s@`9Y-_:"\iXCT31.mj26D36%c^S%ICt'(+f)t(TT@Xl6>EQ;]S9OoL:_:<_l)2r%j2:_.E4+L)^3PdCVjGVMK7;+/DtMY$R+"Y1lJTL/WR4_K[l'O<aD2=:(DATY%I9KjZM[(JeW;.;$kC-L*6[VnSS@1I[<!2R4P]Eg,N-N1Ma6*%'Qc(RJU-=3#;MqYr<@giBkNc-YD?m@`gWA(8Z(6F&)-?fHNS[@P%\S81*%VW?L!s0f)5WXJ>/p.*'-$t-;Rmm9bPXF$1h&Uj?B=Z4OM<"So>Zi=C-ub8h5i(JkHA5&O[sm11-T`Hn[gl0IFG#,4ma]Kr%*?lYiU&kXMk21b1$BQ/d[-"C9=ZA!9^n>*u*WDBe9HbbQ3&^I'&.oJp*$BFf5c4^'O&n'cCMQi///6:AU-(JuAb3^(,t@_UL3fs-%Z)#N%\WZ>j4N>.N*(^:EqqLVZEd]2/rj\cBRAH5i,b\:]L2QDRBhP?d>?5FS7Y!$?h$>>54C)SW$g=U"JRc8<U@_^.?3d\V/CJBN%=)FV.nf#Llith]2J8Z`jNVlhNSU><f'$U\UTGeRn"k23&BSWF+mHQV*g9/0FFVc\6Gdt&0-mMctk#`^&3?EX;rN[Rt_$=]7K5<U6%`<]Ss&X@HB,n7b;E2)'m8,-du((8X-\\B$GQ=u/MD`IX3P:2Q\kq<cTie#F3<&:CI%<%Tm+iZ)gjcI9jPSe\&AEFd8Vld1\:;Nn1%lQTsE:VmN3h8.\+OCkm]c2^Q1gpYls&#.O(hucO9[5h/=F/C$`NQK`sMn4ZQ9+?Pl&BE7Z9dK8@()[oLgpN05d/aU'V1us*_1]8!%)6>qjH5@(1+>E?Rds<^eU*)uee<!fl'OX)"g3HR+c$,5O)tI!5^'TbZ@=BM52gat'`i4JKWUp>gahu/4TJb5KBHTBK@p6_uONZ[s%U(=E:U8'ea3!nft8VFC,>uppBnQU_(Q!8BG2=QSB%P>R-dF$TBf&jWWSmm&JI_68A"hKjmO-IUMDG6d@G>5N1K+Z_s-V&_Wb1XVU%&aSrO.4TiS$NTBG,K?],ED_N<F_$\,jQ%WUf(f+FP=Q5'*rPtnCrtmuh=&?4;GH]gm3.4\52N)sLD;@u]7M#&ML9IaM`r\9bQ(sM%0bj2aMW(p_ZSj&(_mGr_iTmeV">H/L(C,i]8>RR'PuX"/4D@^T`['mif7It"`p43YM&D>e)Co,F8a^!<jVDN4-O8+.l\lV:!&+(:%hV4K(lY`\d"9=AGS?CM)LO2bA8HC$[LBruQA?j<(f=E'OK"^P=(g'!'A.'IBY1rMAY/"n_,<&AC[S0m*ap,'Qpf<R1XI$?LjC:(_%i/AjrU>-CGg=VV&-0V9_U"*)?MEYpgbK>.9JfnA,m(,;u@XBXHSHUPu%7Z47PP7G.G6o`gKpYlc$6E4uN&HoIN!e\M$K<jFj8(L3%2+aN_&kN'\,-8B]5p4S'=0fZtB+Sd;@!`TCR[)%!C?$+][qL??_odl'f%rj_kW1ZjahdN!p$!+DA,5=^@$PFcnd[NIG9dBKZOZ0;%d]GrB%Bfa39tNS)9Q3H[,-,$:-<==^AX_?un(J8U4e:4n&j(C3\n>nIR7('H`'-:&^lht6qKo>srhLrDEKQq:Xt3,dLfN(GCJ*(#%""e3$D?t%I6/(BOEL:OcCZZl;=kj!uM+Q))?P]84%TS/bBHTlY?s)hGMQu+[%o8of@\tecGFKsHUA%@JL$Bh>Ka2^AS&/0rhfdj7%j[8l*%BT>b5,X6;B$dW0YNW;Uc[U%+G\eXe["u'm=#@CmV*hRg'8F)0,<HEt0Hh-EhH]#-;-gTq1U\Z:c3QE6Or8eqLEf[%,55F%%h8`d[iJSI/(\#Rja,X9@(2;qb/um-74!jth"n'9i]:trh3Rj.'8CW1/V6b^fVu[bWk:duYm?I_n.?oon"W=H=Tj,uBi?L>ar9E5c%Dmb<4TF/aOfU5FeAUZ?BFIrG4%#./?pQ%DN<UE41p0]E75+DU"oT%b<=5.g\X!^c1VB=.'AkU)j=)BHaNm$rMP1NO8Z8<d@lVA_`%6)jqN"HH<7&i;Dd-Ib`ON+,-lBt4SuR6DUsaAT!(5"'rVV?VuY*j1bdR!WXUcYuGaAQKb)6%"!87M)b5j"uS/;hkS7EG0W_?s;i*%(C;J6B()r,1n2P1BttY9$recHM*god%B#J\[8Dd8m]t'+a@0\gJ4W>9iaQl&gWQJ`eZ*.qcL\!-4Bi"b0GtF>d<Ih6,;IZlk#(VO%,UN-D5+boEdV&7*+M%`d)7r7`29LX1^+[&dLpE[mJtb=dXu/ubFsaF)-'%%OVVm'gZq?G,8[E"u'A7"TdYO<j<MC^cZZE[6X5JN1%8X)"s2M%VmSFti3PXraDL9mJ[nB#_N\GoGkone.8?Kn\$+#KDQiZ%6.=YT)SH`cjWJLh-4rQLrmQC?Y3QDB1rM(h$XR`2<9L62g!%.^,F2j8jO,J\gMF7-P\p*[A$=6-_g'>arm1"5,RCHs,H]F(lsG"Nc!Vd<NT^5%ijme`/ChE?5Tj'MW2THEq\@m6[$R%!P]1dB,8A%Rbe15UVp"La:__hg*'<,-h:_9'/oe4N^:*Z,.3MU_IU_TE5:$Mb*aBA^sOCPrbs,T,\$Uiho)F$-IK)`hZLm\Ec[jC(WC/n.j*sJ%LQ#Srno/.@;F[`sc*>9aE\'T&IbPFBi.JC6M;Ct*",eK^_`(4)Lm&E9@Kn2VIbA/p<^g,@#58:IZlkQ#0fPWoiCT8)b]J>[<^'BS%L_EVZ\RDmW+(\Kl=ut/RZgVE@4c>F(nTTX9]!2_K=CeFX/47[2h]_^WL?>k#AD1m8W[4:kiJNC]oR/P=/\<gXe%4(s6%f3_[^I<P%6uq[&YGXaWBZ71HgSsteTh4n.I,2N2/1"Q?Z4NKSRE)BfpMEn^bDgs[qo6:[&G*Hs&6d9ddVlt+r)Jt.^qQD,J6=>4']V1>^)O4p%E$#RN5'6DTnnD`!nFU"JAVS:g)hfYHlDNHp9d2=0qu#d$p<P-hl(COZlLF-5=dtaPIl]geL?HW;-M@B)jpb/"H5?^f\?4@\CteBd%<&_M=4B(Q><e0dnR*M&4&Pil,,:hKP#P/-&dqlpIH65oT=T(<GSGR,kUM_ARN-fGrXLuB1!f7IpfY?dR,[MgG[,Xf$Gjs4*p3In"%3^7hsh@f2QhCa7nh"e?6QXTgK)/Jb`EhZ$h4D#mb%-I`T\N-Ef/@*D<ZHo]%![iMQ5eeMkh5?'Q=)=)M*+gesFk[cn1L$N;BZ^GD%*hV%#0p>/fXo7S&pkZVt;t$kprbh$ED8!`YO^CPnD7/F"hO+j!_&P!6&@j6`#%f3Z6f7Y-L3+M5J`Ih]%W4f>8db?[1(E$rcuYo-%J5)e="#bcZ=r-SQmV?2<g2tD&^tSmC[c;-6(SX=WL"E?pH*GUCe+hr:+1QfDrFu;2%p1o"[[)t"h;sM0(Z8sHm1.nHR1Im.kO2AG%FZ/:qBu<ag0[&U;[%cp*0XC?/Q2,!DgUr8+QcK@d4^>7Y`6;XkCIUbNb\Vi26Ko#bH[K.,`(VA3QYfO4?KstgY(7+mLp?I6Qe/7?%]`9^Ap?dc(V7UXQiV(p?#3t[k4]J32s5"MTWWk.76ESWQ$&j`G;G8p+,9!gM775KTOVM]i*U:onFW,DD$e5N*cB;'5/7ZRYT'gD=%M'7B$C<tJD9Q)W[Yq$$iNh7$Gq%pIuDi%`^B1t?qY<S"j2\1A?`mm,`RXRXTlgAF7q?(EggsMW.=gFDOqt(B#,fc.D3178`oR+/Y%ce?TWeflV@"Q%?<W$Rnu!I'UPl\i9TB]:/tqq'rX+h_D0)=.![k5&jBR!eUbPG7m%o@!HV$Mdp8:7Kh?33>S^%GWp:#JN4X%,lOE%F"nOEH3((IUba&?HNW*f+c>D;<bf%ePBN$cop%D;Vur!H*G'<.0WGlL(6-oj4q][<`oi"l0GEQW(7g]UcRXqAcL[s9[p&.Dj7egm%qt!s_!tP'Hf0h=jaX-Lo7Q"J$i+shpCI)@e#5eq[$@I<\7;?7rcl9jJYbf&X_!<QVo%Y6GSKmDNlAuOV!GQ/(]IFa?LV/o"A.qQ4%pq,4qV`A(\!RY8liFT#d<l#L9%p^NunFp!nEq$Q>p)IW4fDD^OMMfnFBC"W>U.Feap=ro9As=U=pJQZk'Q(t6]ag"&^("t03+WU_%c#qTX^JuP'YbA]B6[?K&j7E*kAeI\L.[^&$gWQD7^q6CE@,jh:IDZg*H/mKa[lqH+0,+i/12K2+)sDHGMsl<cOf[3+WU,bC#M?Do%Ukp`[]O/C;T[1DA;Fh-[f%L>uHoQ.mHMLbnX[P]Y%ld5)='%WjPjT+WfY"qSQUDEmB>p2@5GLpFp%=?D-CFcZDIT&n1VF11^bd_G%a32p8ceKo\5k-H!Ru&XF.XWlg[L-@U5#Gkr>;hhD);cY$&5uQTU+L1+(n1H_^p]"kc!7"'X@7$<0h2W-g[>Z/HYd"q`(QiG2aOa/%W_TGfn9tY+&C3`o*t/Xn*hqC$K<L(R-O0jEC+oGo^+</68P2qrmHD/'`DUpc>;qnE'kI].^@W]!XY4>p.)(tKOSDT;mRf69kch*F%K-%6$4.qi]`WP?ET@Xl6P=Y7-&,Q[4QYEVDm#f'?*)k`r;Utb8OCau$JTTgI-Z,VfnDt23_L@uSl$Pe=E\Re9m/aS2mRUUB4,9[=%gsZsejCq`gLS+j\4e-9D.DC2/[E&dkbp-CiDM_pgi9i=GI1`q'c&!='53;h:UA')(&%$;n_TPBVlGM<7I*-q3oHB&TI3'4i>BN^)%Y.rLI2`7o5oqp<?R951GC5%%;rq[ELcoNmDUY-Ru!f:io'OXh#Bm54<5'%K^a9U7G1p]VW'oe8AhTFCpLa7GZTf0MEHC=[cPCJ1*%(UKA!Si->4P2=b:DY/<8Gk15?GCSZm34qIb_Zl"<`J6m9GmHP\L5HGCQP@UZ5"Xgs!^VaQGkWDNro(Z$LJ)f?1rilR5,KZJYb8o9%JM@[sO8-B%Lm^Yo)g6Q'e'"snR@2Bj`3lR+dlm$&(FPH6?C#k#kX\ANBi$cG9MFfT(4L&QAIJhK:2H(DK(B$6gg#tBPSFbAb2?@G%S1`\6K7<..@%ImA:@AU`X(X(?!_)%kCk5W=.1`q8HsU0u9HmVVf+O/.9nqK).ISI)gbrcXpH_b/2l5$0iZAs.$ep?ee",8MF1"om%K4gGO=Vq18#K3u0,0_OBUsI:,(RQ3a,[a/bARJp3_^513V`E%+U]u]kYbR^$8UZ-FA+TO@?4o\%OSR^#';^c%J2OMqCUTi;31+N'%>s'hfa6Rd[ZZ^]-DY!d^3a=iqbKdbg.Lo&D0QV>'P8tjp07-,_F1:TTdQ4ic#nVHSFJAArM0+u)^kJb%giT8BjcjH4L9s+7fgHH7%[opKf3,D'e!/=]&:"_@(2EA1.GMd#A770MN23<":$f>g+>1Mc+8sH>QNjo1BFPS+kbn4YZ)3Ysh7cll-)m![+WB/[%ipA@0F33h&%BJ!*a73+Gr0JttUnGp2Ak4M0U,`7sVFSt-O&fo=Q4WCu_N&.,FJ^YX;ea'I-]3#%e>?Q=p^4OZ&XZ\[a7[gH\5]8pAJh&J(a4b=;%p:AW?)998oODlm@c>KfSa#!"\?(\Abl#K7jX`0G(nj)BUOXO@p]ANIP*&^m_*f;WRRi&*,D;KB8]5Xt%Th]6G1D>e6`-f`,\kMFl%4n"-N`iqOi<`4U'\2BCkP%"`TOU5cX)nj2^huG^H+E5]Jje+u=>Sl"orFHXHg:1sr]c&EOg&BKiXs>`QY@Y\+-2IRp\^cpWgXg.`%XHOP5%Q?rf@T4#J(jge_?]-k#a^p1*T6S/I&E\o_XfSqJ>g?O9,?h<Am"Bor\7/,4^M]LU\TO%;US[KjlA\/^E2<if7Gnp?+n:[R%@-@BX+U]3ZCa6WZGn4J.Z5_<d..1:^,o4ETgg.m_k$)lWCoZZ0ae6"dF=_04%9h@'%TA\::!1T4WEktBU5$RgmfV#n\X7e,P2]GR%bGd%84?DO#jT?XqW#UY:#2piN?EkYCW5I\<g8t3%*.&E3Z%;[:mLBZ&q?A#l,`Xc'!o?AHV&e\S#D+%:VVm7WW^o<Ylc(Jm@>5m6%6;A))h&PBII(>*7Kem7V9qn-aZ3_N$JZK@uU-p36np,Cr0N0*_Y@^1:Z3/M8`s+1kEC?I?n58Q&$3D0a%t+ftba'O@W0Sb;,=e9W%qk70*"Gps8l*4AW(GG"Bi7j;.ie/73l5h&o6(=&aBQ'1m'1<%XD>,.Y,[-bLNJDRM,WAf=:H>[QMGp!aF+(/k\>LIn>!_`SC(-fP%n^f9Y=:fM&rt^3R-PLoVK3G!2&d1lF4-JjH`(_IP>@$WHB^nJMO)?f#l3LBNf30D<eWhL7FUH4F!;<<(Rn.!I_m8LT99bHNXt!qS%DXrQ9lTFQd=0_G.m58U342[<e9Gt*mCYp[G&ddQtKo$^f`W_s@_/P38k5'n/#5XsBZMQEHe]e9pOVPQ?Q(dfF&P/)-ds@V>Sf>9:%^`Oj8Y7#-R'e>T7\BA"&EdFOt4LQt[C@(#"7S\@OG&]3J"c:%?jKgDmZhalgARohkA[/WQ=L;ISM@p+/gAkB/#<I-1mr3-`QBs20%WW'1Sa\jKQ]Rg5d]&Q`8HgPfKr:I/r[Gkb-9ocj040oQ$:Mu+>\Q>0Q>mL?EX'eNSMHN*e!uH*+.bXN(F40`jeG?Bee[0HeeESAl%C,n@>ZNpt\->&_UdT^SQ(nl,ng-Qp@$9I\S,3-OhjucokBR3O>Q?et/eh_3`/Y*./RW;[A`!Tsq*EqRTEF4@qI1f-7LN!j=/U13`%gSmqurG[Y`nFpt(mKtgV.ja<m2X/?U.W*J$k"NXE/$/k2THW!G#tD5&_lJlf,M5M&?I*R^$t[[CoJ]c$9>A3!HnI!>52_n1;q@]>%7(BMmetSGJ=011'X`S!TNNiucg9Fs`!,$t/3qQ<Sb8:NS7+?#@SpM&KUaBi$o_fp"4hJnV2^L7T438E`NbHq'aF.28UMj:rY5:L3%\^b\,&dl0:4q%Gb2[B1c%A?4$)9F+ME\eg4?:ZjH@j\F),`_4Vk2:i'D@R(rkBBB/S?3Y=*H?qBD2pG6;Vb>l^t'dRR;i&JJtkc)%mGUU#8AsT^f;q1<Yk"msF%>'T]`mp`-W)omU.L&/,8c1&DZL:N>oh+^24oX`$Wo\-7WB9'_lrn5EBbJkMV9g+S,-Z><J>C$'EZ5%%3H."h700S5,IDWt8(%Ha"H;b7p<<\HQ5C(FJBiM-M=dBn>m#JCjd,D4FO`MKY-?R/Wu]#.?Eg*tlh7t\_[L*e7N_I<6/=iXk_QGr%U&b=pB"3dl.S6unFZL/aSo'o@DH'PA=TqKl4h3<],a::.%WsnifgHIf97Odc,):cI!oEpAh\jrX>FE0.rnp:!3Z-eA_t=QP!sJ^%%L:c[(nHY!&V^?n2VVD>s-u.R<aI;p@RZFC2g&,[=j)Td<4RR=,7r_-R:AlK8[Nm:s22P9'=%%7Xj=IBW,i.BqI-KCD,^0o.RDpU2%D[Bd.!IK(CB5/?el"oD8!:Qjk5*R9kRJcS34QZ%<d=bjX!g7V@@%Ern.u4hj=#D#_93[rA&28D4;651iVjfd"Z.54:JMF#+N)X2(%]F2qH2Qpc',_gTX)i!lZM_`NGa#A7Tm$?k)5#k+RUbDJDDLu6j1qh/j!`p'E.Jk$]Cjes'rcF.b:VJ4]#j::\C4W/"[9iLRYcqi]%^dId<PIU*K)t43I'HKa$JN6%+,lek)&8`8D!4#]2:*5$g%#@;BGCh?+c1W@3JOdcU*a[ss_s5aAd0XVpfm"=@`5k7G7Y[.fX[_jg%Y[jO1X=Fat\\gP)/(+bKaaI+:/I#qr45#?W2X^XRmERP07f?m5ciFUDPF6)N;Mh49@*@#m9dDIS$dBST/S?s/hhk`/IDqTr213S2%paO\HL/aMi])4B]9B*#1f#qie^`$\`l*Y#lW;ohLQQ1=NX_"`=NK_t3X'>gI1A_U3nE<Z@LN@dPqPIfCBd\2j_\%n)&\0PfA9@^X%Zi`Z<,Wb_kHeU=1^BOHAJSs.p0=#ZoD>^^9D04acZG=PqK'mngCFgO?$2_I9JKtL\95m;j=!a<8-t:Cs,Lu>b81JKXMR79(<4_(m%Jd&S0<R(aC"HFO2p4jSa,#ND/)I40oGne_aR>.8gU]"8lX6UQ\'dlH9kr:QjTHW['i3[2j"MafO>*rAYO'.Qd1]-hGZ#5TsKZ:i$%d">9%Q3I5,RjR$uYJ5!3LcB+l*.^N5fAD(g=u.X+^76dOe=_a*fKD-r0B+9T`7srE"7aj`3\8AE#tGob,j/NW6Gi/)*XBQbD@B/@%rm\%m&$b#/[4q-J,!5(-b=)N^*cTlrPg=Ups(I9.7V15P#>HWcR9C2?I5k6?;sHDZOW@:DjO&d(9,-suFH=i8Mn#m&nopt!k6(sV%9EFYSe===@*VCu+Z.#.Q=c^ItH.6]MJ^fni,UL@Y3eJJV-dg.ac=/3A%b+.OV(lO/PMH]`LQQ[!L.d"bIiX=MIi?&3PMF[2rPVrV%nV>doK_)ch$e,fKB4'R\@eBL@DA#[V[$0odq(i@GHd\O7B.7@?@C:YrU^KYWMVfG@1aET"h,&llKX"d_Z"_&[!_e*LA*9-/#gWn*%J-(Bjb*@gLV-#;X$Db7LeQUgbWZJ3jEp\`Y6'8-J#0"7<2s!bal:rI!_RoHOE;>He>Dl7bFPTjf4Q?&("Wc*3A2HNc:sk,;8QRGP%bn+5'9TD0$VOJM"0S$L*h[TXP1I=7"1X\NQ*-*(R6;,V>C"i^-J=R1&H-X["F#mC@?.K$$V?Yp5Ejh38JghYinoSLX8IYFb-([[A%ACCLa9Z4.=qC]C@Vc4WQ]tTc+`mk/B<VS]ZqgQ[>;_D=W'G]k1b1Y3U<!FX3^o#@&Bgrt%KIEi9/$YptE!E0\$Eg)AmZ_S-RHpqC%G#V7[2O%9PW"58BHsU0u9HqSs&)jU9-^*;nX;e>=32pM;50'86Aq&pA(]q[[gPNGP6Qf\c'8>]'2Dqeentq:3OuK0s3hmQ'dF,N'%9%iIkVnS[L*>T[6F*HZ?)fug;a9L1F11pur!_nS<gXDE^,k8c2nZRMaDC1fj4_&mB9Q9[lP@0ZR7UNZ<o2o^T=C6@EoQ;/YI;rY;%E1jV<d4aO+>Pb1*U8]2GNG_:8MU[Hh7k]XSmSj$MSHAEj[I<O*\jMf]LTF=31?V=?LLb3la4$GN,dG8-nZQE.:FFWJXl%XCGZ30(%SR*-Cn.")En&dU(iMq\<^8?3VlUU`SYgpV$f$Mm:%Jb+N@;$1=D0&0M;0JZY%/GFM:A=T7(a_\5)$pJ7*j4-`g)P:DAlJoYbSFk<%Pkb<ka63+abTrA>X/m408?Pl'aQN4LR5V-6%PB[Yi01*@1?7YOXO)4ooqc"O]Hs@?e#mUMoTQiBOFGMXEV(8_%us1S-ipeM_n=4/%FPRobn,j?A3G7tp:@gl$71F\gQ9#dihMfgl5[6Cflet6rXI.tA-/%-m$o0PBoL&M#Z*5!mAJX;25*ge=c/+&*3]d9#kR`*]nWkU5%Y1=I)AN:aV9P&TVf7o"cf1S*6TWG\'[nej0$t(Li*<k47O`tI5[\Im][>YjJ6f+V&BE\TM*ZuQpH$p8\M'TfHMB=s0H5WRmAUTCW%^N-uF\[bL#=!$3]jd#FA5S"-`?5AG_fdOq')AVN,H"IFsOV:I'G.8m@I[$Lar;qSW#@#hE2Df2U@;s]5WFScOF][o"C6Ukb&TW^P%mm%sLH@6AaM5L/f5LpTV-6mocch6=.$+E/2o5tK`mu99T8i@cIPC>:-ZLOWr&ibN<Fj?Sb,Tl,*/Em0oD,*YQaqF?L10/@'BB[5_%_N7Rn)c1q._V?$X]-C'T/arg)3+)f2lm)^f;'/'t(qmY>Rm[qIjMuUZT3d6u>`g]8j1?c/ngY%rmL!W1-@!L-bX!f6nKG&3/"%#5%E6h59k`]H>\jO]2,LVN+NP$89F$YqUC+_(O6qHEo7_;=<>b^9'K$^9eBLb'/P4emfa6*%`]HiC05l^f=UD6*C&29Z8B.:[ujp.d:%p^ue.9-*5sT`0(V="3@Ve$_-9E6cnXN0bPinaJET+]*UQ#b'^OgRQU6(Sb<a'p$!UKBcJ4E)*_gQuVu=SHA":\A#ik!f7HuQ.,KO%5,2fUSKBi9kA>M#o'I7OQ03\XX*qHFZ"K!b*$u4Bl9"8f0LI^DjIWi7UJZQ=D+IlQ7[cU7@I<_V4IS7s%RqGj7j_46k^^4m0=o%W%'N'Xe:lR6n9ML:QHC4<g`[6l$nXR.JZ#cXnj.aT2Ql_\SCepSAKB$I<[tNZ_3'idSX>)m&ES8j#BVupQ8`,X'k_um!kQB)ADHku?%q_Tp6]hdZmUGOkVqOeKa4jiQ=9asjcF1.<36Ff5&lflD9>-Y+jD2phN$o/]IlZjm@)0r8&SAsps*YV9RXtLcnJBN:$k3>u_51oun%BOka6(5rD9>VG(2l=:4$71fc9f[A#o"/Fm3iO4M?br[d]W+G=O*bA-LJ6S]9ljM01N*]l09qo`skc.)#aY]HSNb^WIA@9^P096_6%qIlet&Ai<kWLpW5_+Q#Heeo0el\MG!3-8UYf+-D*RPgfj6#VtI7%n3L4ap@\.?&ii.+%O(VjKPfR^L4pl2bt1")<D)Z`hd3A+]UA%DA#Y`Rt(Sp5,1f+[p"fB:l\oKgnj.9j*LPj`E*ZS8G\1^%DK[BC*hmKA>IK$H-Di0*U^Hu--]DTCqtUp79eD-1,S75JNY)-g"qiO%mV6%)7%'eR+dNDV"6:Mqf,$0*8E(>qId6p$8Tb!F<qCR$E0]WAJ]?lrDHi!)*Zn?T`2,"ude#CPGbU4GCh>G)OK0>C*#t+;P[JTq%,*Y$5.A-<RY`Brlj1EP@*9V0FU4tbc??IZ!h@S>P;7%?PHT2T`'!l^gFdmd38Hfn7c#,Kt[<_W>WCf#KZPY8t<7J&nLk1(_A_3HW%5!td,nIj4aO.P%[k+9g,.nnuko+Hc(LA#i\4Icf(?GhGSmeSYcHgp&HO@6tL&SL#"#QfjISkuO:XF1;pdQ*i(=TgL)1j_.hk?tc5%iRB>*(0=g=gf9o^>O,mm3J(#U$Cr4tCN.5RE>pNIp&$g_U>,GF*4u=0+PZ$FF8S+NEPU-Nb*aBA^bHhMnSfXD,[tdh[2^UjBk;^C%<A3t9/n-_t=7:(0CC;!"lrBR@h;em.*i.W36-*X4bJ%[LGGr3EgJT?5lOLVXeoFWR[;jQ20B=eX'n$53C-[fGn`cEI(:VtabW+u8%:RDR;XpqopYK5WUl;m`X"=K?rfe@\dR%j+]ANA1:1d`C/j_sN*\sS%6r#DEQA?&6.5$:;<q#qre9IEAA?:CC5:e`Z::XlXS'.g^b%!3CHi-i5$&25\u5I*mb4$7+[Q@/&<dT&GhLAm5&\P0?s212jc3)Jif3eRPeVZ/T#)4fPp5U"PED,I`jSMB!SLID*iZ%cWiN0<r(o%ErF)h)D*D]+;(B%.X&-724c@!"^DDmP64%)^TPkg4UEk_`hEN3^?mQVa%?s\4cli:(gAZA(`2A3n;fSEP>;WeS9$9;Ki^D@)q?Eu%a_odeFK:P:K%'Vu.1I&[!uoH?\g"7!3l/M0_+oqlil`^fU>%C('kb#)R;21JX1q[=F?fs(1*\'08BMFN4<<-D&jn[FY,tj[V_<ss%b'[?G_X'Y\<1dImjJ'c)Tq7e1n5)_uLR7TE;A1Q#Y8pELQMD5g-&5aj.^N'AQDSH]1@=:KK'*nC,@5+YO1rnlo_%Q'=5O_9GjV/!%!RqCYDWlLO,,<1U6fhql.;-nq<$^,`2U.W.Xu?bmaI7F.KGGO^`V&2R[P$,716X3,r%1"OE]gj_B\G.;+K82d^iuM)$.'fM=c1Ut%C7c;UiOUe\p>F)]+JHa$GGtK)c6e_LXb3Tm6iNk]$Nkd0r0Aa.f^5i3P3W/$H:P+t+M2)cFJ#.aK"sn!l1KeI-#%S#HPUR`d+IME%cKbAT`*S%Qh!YNlfqXgm^8!CYTsSUW3FVN!3bd3,@BE*6Q'4`?(_P`Z4U;+Gei\NtT0]9!VKo2PJ;nH56'M*Gj'rI;nU^qb?getH%OFKq;,NqOi:P="Gg7gYAK;g\BGNd$lM,mhdmE"rI,MlOPDJh;o`o/5`KJk2Z?$Y]kL3`1ekL58^ZskCe$HqoZ2_-L4rA6I")=2!;%gO3sTHAc8qm\2&X![.cu]T+-/"lEdV2i\D.HtXO]bDN7#74?[*<QU!sHhW"5i3X9HWaW'qRlF>2i$[9@$<(\]M.'n8iUU6g,4uS,%`154(Tp%$Ua]K.7fT`PpK8?MR:BX3]L`f0l$UY%:.l!;A9*1m7&ci:UnpL^D1hT8JiEB<RO'G-oLGIf'CZN962FmNhOud@0B4u3o%R1Wq.OVm+#HTYVq#YEOgZAG-g<Q+3%4Zc.;(&"3!.*Ta52*Q."OJ/Vr%(KGZ'?:9YEFRkQ$r_@8#X(X0G]]i,?aWs4"s@]=L]+)3%42Ou_K!U[Dr9WCg&Se9Ecp2cu"t:gZic1:JK.BQ9oM+XdhcOhAePXRmR>5qOIobpLi4/9fI`Bu^Id<^HGS](=NTAe@b6oYkH;4l_%LRFkedY]3aJ3X/RK8HNLl%):<R@mC*mYlR:!WKA3fRO1sAO]3?OjkCfI6+`l,_cbB-Beff$SRLhX[5=bY`j"A#1!Y!9&_9t5og>m%Me,L82V%Q-\-pZh6S<LO,[Qt;,A=QYCajn`&lWP8!Bm#[coJcZRZ\PdS^[sr(?)Y1]e<#h"uAguI[&o;qefO[&?l1=D0N(*Aqf72%&q19AK#Lh5:/LU#("^$##O!e>cim7f5h=kFB!+afV+F7Ld0*771`UaW&ie4^&cNP_\V[BFJ?;D-1I3pM@mljIiCK2(`9(JX5$:o$%do*!Bi'`$5L`OQg";il7K7=9oSmr,gd(3?rTEVJMPP&ksfpi;9_a;k.CMCG>HG#(XOKqEa;_(7aLLrPCpneJTZ`D+PX[/)Y0J-k!%<\fVT_sbb]U[.DEHj7]piA*'?7-oC!Y'i&"3rI95`6ae^dq-+kK*-LTgX"9"b=UXU!G2j[#kM!:;k<*k]G`6m1J].0CJYD9Sn(G@%attIU-QifJ)H:tqi0-.'M">pP&g]&C,DEN$oF`%2n0pNdkP3ih/Q"4^FQlWBaXEa"BXk?U.3hl5&Xeq7`_bJ\Ri-3L\QKl:,cIgf%*`2rnqW@I1U<$!\5_uo*i'aiZ^YgK?#S!ea1dO-iUj_9,&8om?4lR\@b=jP$cqP*9D2*6t1LBR^-->8(kZ4"9A^(V`iD?3GB'?Ui%<DEu&lYlJ'G3"KT;3@F^+pI\0+t"j2HrYg&XdQ0IP##?5+71ISIM`=85Tm4J2.k3#Y07.X-'Golh;e'PL.^H,/S.+Ke0l&))U/k1%M\c<i;i^9Xa4E8"D00,,k6tLhF(_P9E'HT0B=>S[et"Er4jFag65$HB2sE`%K07\t$>VlP_"@uJHh_Z8)G5N0+@ANL@EthIlI".<%g_D+rblZ/XeSO<nrZs?Hj$O.loua!([V*&Sc*h)jG:',H128+6!X<>T&rYRmLR:"j[Og9u[Tcpfm*9]G&=#e2J%4"Q,s'=Tj9:F8%ST[CHm/_Bkc0L:48JJc_JPJ_JkgkFoPWg&5F,"b@+0j`tBHLiu@3?'fqC=?/>bDS(hPR.oH]0M2UdUk%\e7nGHU)_D<j66d%f:K<%f-%NXNTQt/Y+cEZTGgYhCiuUR;-"pircD`c8c5II*+pTnVAV.;EXWBR^bRGsK\0`'4Q-t6l!.Ueg"ER-W%iLTX[fDZ@,'h,1nuTf%2'OiM#csd-@tu0LFLtKF::IdZ>%C.r."*d*4bic_\]<n+7Ed$?(C,j56n<#,>YH=n+rO/)]+=,S+tH+-$/fZmmQ,"EQ7L?L%l^;u%6SsAFAq'm@J]RSXp+q1SNa4M0=!RPKlJWbdcV4F"E`T=f"S:=j?I8pX>Z&Akb@pD07K)7!pjmd`HAfckN"_dg\mM^Hf5Xs?d.K%"%*!4mh0$a+ILd*n..*AFg[6erp5jU4hoZ^d<qG_'_$ICS$Rlf02_apmj`X:3DEFoNq.Ma+]]ToTf&4uf*AJmE!9no8e9MDk`P1mjm%G@^pfH-Z8/aI+TX'liDUNpZ@n/TtLeoQl7pS="U4!R>(0O=#hK%9[1-$dheW9^o<E@F,gt$tacEA%r.'QW]6B5S5t3>F>dDBRDW>%mNXp!04H8j/6hCf7[XI`*.BT63[*WA*unP&!<<@kfUtF=aK^fuiA;*I/(nb@m\e<q5-m"$k6(._3@2p2LqFQ9'sqW^+/q+SjhlYo%&!uWAmcM$[FdWkRNY[:M+t*t`H[K.,`(VB.ifN[J7COo*J7\2Q][pY&332_5$34:D9-!:%&7^XfcV7+t2G<U?Mcb"QR\M[eJ6biQ%BZV3t+!VX-7\X"t2HR2*7GUBQ1.!jkc.T*j,luIQXR58t-B]3h)`9;[oeOdK%dJ/+m?7?Gggc`+5%U4$6LJ)d=BR.C7>:PID"S(1%4M[9--##hOK'L(j$D@M``_O?)FLtK)S8&g%X[RD4:Nn^]=(:A(R!X3e?c5V^3Gc(c\E[Tc:^uunn-16F)"*.?8QSk,?f:"d4tXIN%&o6Gd()8^(OdZVJl2tkY>ggOq_&@5$=tkN*@tl.V3/HhXLqPrfm]mTGac8'D(sJc[8p?)<CgLJe9;6Z6eo@:&ff`Q'rphW)k5'B_%B"GNqQAZ/`"VsS6>0%T-MB76N4]qGZV$IC[Oet4Y^,[C^-u2@*ONDn=L^+kRBZsSsCj4"X%5u70Mpt"S&ne'oO5tV;h.-'Q,$ldW%f4ea6$DA7emFOo6ZP8N0m,aSqLSgciaB.?m&[;Z@Eia(OB@K'SB,mP!+uh5@I1"=GPe$n_JU.MK+[ltcO$'D6#g8!E)GS>4kpL[a%h/f(V-9qY\O9h\"m/Dr!8XW41E\Tab8T4FYLG(TU/rF4p5i.[E!.MJh4&`0b7Isu;,j*!&/!rD'0B!@S]'dJS<^ng4J5<SJ:eoB<%@*aU$Vft]QB.\/!HA&o+]FBq;Qj:]&HsU0u9HmUjgG!**/AjdtHYNQ8_!@16(FRVa+7m3?\roLJM.j5<X*"V0])"!L6]^/QJ35bl%1ta#srEBM(Q7#Na@#+sG[6%k_D`*kaMkiTM3&=e#fXbjD^tn&BqBBMaa_J^Q!pN*GI6DsJYIN7e;f%Y3!89nK2^b5>h'VRTH/6t\%k)YEaoH8u8eeHr&-8l@>]s3K_@#eVSn8T:3eaKf348En_&XQdoCK%"P3E*dGYZ).?4rr<E'#/=n>TH\47.`BV[f/a(#f=iX)h9W8%8-$"@'ZO(BSXYX[Ch@c`SCb.X@0o\"D>#@(M33h@m5Zrhj-,RZ:d-=B530n7&2-l_4I?V?jU=$/cX!75./UoE.$9l+b:nsJ_^7u:%0ZgBN2EHo<T'-T`S#]`r/!.g+PX&jq=Y$S^Y0'/[FGg.a"(L(+O_4,QAW#uA+*LoXBbi;]/Anm+"Gm]+OD-:C6U`6P)+R(M*an`p%]Y92g6ud*ghp3_"*1CD83LcO0i>1`kbs98CSj4#l\DhnK1Y7Q2&/*GH7oS4gBb.FbF%J/O7FJbDR^/>`?ZHlXN14-ce2CC6]llf!%XVNmI*bC=SPZG[V+#*Ha]Y93T*Q`JrEB*u?U9]6:n1M=mqE"<QZ0=*(gO/m+*phptS$EiiqmEC@loHa:Oc//H,IMR5HAXN\>/ENL%>hXJD7"Ppo)d*'UZ8n]^U#G@3%X9]c_O[)ubUSbeLoi).4@BgsA94W$!'8g0j-G?ngs3i`'VO)F8BfiBFUjPdNGHsV#.>cM2BBDf%rcTt_mbHn01IucBR;R%rFSB;(16VI)%2%fD8Hprrh3H2#Mp,U:CO/G1N4)8-TG[8#qi&keMjR']\Vkp>+Bn:Hh&5j!8QaP`Un+#N%lPOi8#pE"Y;SZ[.`S\BYY]VV$S=DAb[fN9@BJ;CKG%A,mD7#E#2&CmRJOgP/mmiuAK7OYId\^Dlj_\O=:mT9DaR#H'7>Y!O!Ej;h%?DJUCg<cX3\k+X//0*XPBYcjt"H^/!+N1sa2MVN=*9;HqA/c1l".Q#P0sqZO[kLd!]P@jh3IBJT1O5EFiic?2*/t&11f,d2MP9Gl%ldM+n,Va++JJ02C@9@5VHh:mP(/Bki^4Y-E:Ie\CHC?k<.5X0\)N#h8@_A,!MBZsuF7@,E\''9laBSk1$L@\<*"#"bNT`hQT$a,s%("\sK#uTM0D$jC(kh6,gPXrI,i<SC=-dc8UpKm3`_sI/hpH_N?mb"up&$!)``rOH<g+BC>U=pRtoECaB320RCL9G@d0;NgpgRL7Q%4[ol8$EiGU=1Z#D/6H[cj\0bh)Sn-0bjfWs8gJ.MLB%dO'J\X9`fq1`d,.6h'!;=i9`V#G56WaXV`s4hZu$gTil`%`*q/#E_lej?%fpun=^$9%tM2m*cE/o_SGod4(7!!KkKVg$7WOF>@LTug'!OjRO9J2@C[:if=UgqV[`+Z/l3d^*nHnhbRC:pCeG`Puur:RlpN##\O%#Udh#FO_CBO,aM3i?%%/$k,)%A:7rA2O^$%^\dFiGE*YL@T9!`\M=hbornom2lP?WSP?KN-V%J>n<l\#8SR??S[M%q1p=7B5^p"1%)'.F@GO8=`bD4sI,2n<fU9U1"Tp;Zu)Q*Yc3:&GiENBAmb8up#DY+TBPQfTF,gh,s#o(Cei7t'sHGi<_Q8u3A1>?c2>>)CbXdI5=%f#+dZcdT<as#P(fpR,R8'>9I('4L7m?X0_/F3>4k\[^q84A]+r(j`IY+K[e`c3Rbf2'a1[HQlM<PtkE!<P(G)Hd_#7jOaj"E^@:U%jRn=l7'<[Ip(MqTWa[MnR1fVT0A%9p_!(2D.3H8ck/4cCPEW[cb@LS91dX/:Q<\Cmf&'@u;AZ-\USu`9OMj+4%5e]O\J$cN+:R>X%P)MBf`H#H3W"*)ZB),*PDatWI5+RKmYSe+Cf@?`NC)I]9CL)p0@lYSnXW1Q)`7?q:??kB:[j'3XLcN$iXdGVLO%>WoA_j"5*lp\t%D6@u%V'7Nq"\_/`\M>BTPXsL<[QPYb6k[7`m,@8#Uo$B/lS\cEeQo_(7us?Z+dCu(S@>;?=PS=c&N6%)'mrJmjk/Cb7%#IChZZJ@%*uM+MUc_&%DRcW&7S0Y&f:E,5Jc833^>\Dh:SL8:2%MorIg4"m418-T)R`qh45aNGlX2F%SZQsp2'DmQUIPR$enn%lc*jiKddqdA%ZNWiUX$uU<>2t@cN5(P.%1jk`lDi8j7iEBcmcr^^:0Wo1B4Ag)kLfddA+=k57j<+b$A/fmJLp3:A^ar0%(B0+Tm,-gAF@:'<Y3J`%n+7C*M2YXr1,V(/@ql4$h0Yg:m-j>tLuSb,g5O,bS&*`:-^m$r-ggabI!]mE(,!du$6fStC\K%Z<j_G>Fh>p$S`HmtT17B5P23Q'%oO^d,VZB*%&9:iY8DMa@Cu_XE\rhpn:>.t3KBZ"J5@UELcZkqI`ZD$3dlNRG-kQb\1iqYq!b285N@H_mHn#WS/NC4a]H.ZJW+B8X%YCP`=duq$l[E<AcPUI0qk5mIpIKG(k:[Hi%kI]g/-2/PB1f?<TePu&%=Oaojbe&h;W4m8k[d9cM&6e\8gArB.%WTnj/gJ?7cB]YW%M"Knio9Tu<`1uhi-t=;%\rt7U=HOe?^=`;(gMZX8i37>?geP;f2r*N%:%5Gm-Vg""(jWN)#E5R)6?C\$)/J-C!?8t56@XPOO=g=U%%_<X_cIeL03=FoQIsBPl?umFr,Z8Nmr+&\%CGgQOP*=]sVeG/:ZPnc]P)O6nk#=A#]e3sAEO=fT65X-?."pq!Aja=J]A'kRAWftR%I`OnJNG0j2C36+p#=L"V<8?*@=[O+#8[Z:/5lA",8)P*a+qa+1V\IpL9V`$m[^pA0m<DMbo,C\WLKHP15$3lJ7LC'V@m;:VbE*C&%2R"Jg,cqUpiuKtbbnbX6cm\93.%;a;>Z#EB"`+=IW4Q:)W;XFtlq]PuOi20G`K!,O_,<(J0EL=E5FE4k)9lQE4+HB^p10iV'W#LX%OaWNHeT-o=!X:g/l@"cj*-J9DLV+gT`Rkt-Z]jqL/l]C^+&QJAemui>(mZkS7"f&?*s<3&lk&nYqj7[Xh]tRi?osoEJ/Kl7c$A$Q%B)C1Ji5a)[F#P?`PJS[`QQA3R20@Zlf*#,8^b@bV#+Ee?q`_@r6m_V)iPW$<n=<:O9i\-A>,'ePXps?t]+>)q9'&1jd.uo/Ef7j<%FLsmS\%.p*f+![_EJrR_"bFp&*\no9p*4`$M(U0`':mk;A<@PP&Z9-VkUTI0ne@<!c"(LX$e8Ll(`lpHL,CoM<c'&n`g(,.Mc"`d%@?F),+7.<%&1u\ZbYjT*0_:*6+3M\8^a#^froq;4]\D\[7h:UnQX(apkL]ouoS(`SK4#sG<$`+3EH4%>pS"Stl<jL/m^$UgU37*H%5ti61(kL9[&rBMk:h0OOA=0&)gXFYiQMh`h<m@boZ*%tc2P),[f%q_+<0+F<L?1OlKn$e2/')dQjaWN:(oC[E5:1LijHUDaZTanY%k"L4lMi9nuk3*.Vqde/G6fIJ'H$p8\M.F"+K9<7d&!Wk.=le-i<SK[>\=&l`<49T"kM$oKfGn4<+e#V?6PTam+OfJ11tr4&.O'5-%FFrFeZ""2/kaY9uR)MD4>$"[&O3LX`GuYr*p\;D8Lm^Z:gHnfTkQCt-p-#_rZ)ZjBfcKn(l9f@135pHY/mmem[-U.9T-W[_%:8Q7%8::i<d1)VBliUI;KS]u87pcuoK(Iq@B@FkI,PBgXF4KJ9]Y6H=";7OCf92b'[.Fhl1g!q:A\I;<hWo%/4Z*4]m\3HCk;G<bUeORC%4\QM@5cG^NqH+Rrd>,,rs-j=D&&R;(kf/9ZG'=;LU!'C`m>e/\7^Ot3J7Nnlj6=Q1P1WK58n-hub;AUaOXA`I4VQ61[SSj<N2R3g%_]jD0gpb=$`B>-fEqX+Va3Yk]gZFGA3+U0@(XAm::_1HS,G+T/L2(q/Qn*9G[AMbD6)#G\Kf/!*B\gMmnTfNpZP?''dYtW,;'rc>%H@!=#dKq\OmBVT_ma4?'+@_ZLT\D,<aMfYZ)PPmlA"7)pTWj(A'$d\9FY4tW(p?csa2DEV6g>kA]1^+JU>r=DDH%.t%<qJ6/*n5@%JG=rFl\g!Z'U)a[C(Qs"en#f"U>'!=_-O\,Ah:i;JaJ>WJMid2'NU:(LIgM6G"R,l<Fu6rMi!;-cD<,0<8t4":&rt'LkK?82E/ce%]J<6\1SYjdB"#d\68?mlkoQ2C1K5"%CssW"HC@A_ZRbcQ],%5rTnGp#F/7jdd-+1]`I9:Mi^9g4SgGao@G&$;,g6`l\KY')F$%O&%1q!917jC-RgEAji19b>6W&TPL2Q9&MW(*_,Q88"[l1G$65FgCq'#SGt-iMSnP@552X&18:npQh#ftC:JjXR$/iD8g:JqnngXmkDN%@]KJXkRjTqaL&LPW=Bf`Tr^OSS=1:L_OP2IG%Z[m;_2<[X4TP5B@!"!Wg6G4VEWr+nTfNp1PoYK.?oM5#t-j5A$Zk'Hsp,r)nH\k%7pI>F@a+3_==lGed\_^96iH^d96o@OAab.+Y\b(k!X=Fh&]2=k-"a1.nidc\(a8`pm^&ljjOCZVR;Y1"[Q>$'GEi*][t"!Fhp.:t%HN3m"^ZCNkr6QDC5C^>47djQuIsa3'=,YQ#%V"!&7,EW)I/@\djL'$MioI;<i00V26Blj%>PIf?o=&XCJ,,5`E9\B7DWeXsr@QLq%YC,1Kctq[Eqs#h:mham\iS/k]p<.CSkI9d;LO]$fGQ6>Xqf"BQmN"_F-h6<HLTYY4-,!JW/5t,2/*<q^rT27qs6.KPrQY*:rO3mK%lPma6s+as2s8CjSnu'8!pg9ihh<4MsroHqjs6oDss7l3#rp?n<r@]T!]5QTB_YJ2#r7t0+21E#--/lJ?!fKL_/fC#D^ED(%fB%T"%E38*jV/hhi>T_T5P3X[uYs_iH)Bu'Xj?uh<UnI%!]#_42X*>4SY4Atk]o':/oJ2?7c9%q/[i=QR8OtoB,`JgW+9g3l(XVG=$Z\N@%\Ag0)b#K3sS\J<olh2!8\^#E,f4B;MqiBh^rCM7l,?dCP#I]MXb7hF&X-FC=^F\CeIcVZSPtR_0ANNC/L[e4OXgJM:kca%15cXsC%YD)!SmTR1-KBNgmGQ-ISrr+tM;s,56-[7XIh<"bR.e$-qi,!O8i9s5b5:WCm..O_7-G7l\`7J2]0H'7Ure!62rVQ70cq43NS/6Id%@iS%m1JkF>?4RZUX(Aq(Jm+92>!9pi6/_&;S5<#,#L5sA"'I;W'3K1fPP+tLHh!,7Zl0[@K\9AAjrnJ*Z>/Vd##d''(Q:-'4'7,H%eDPEQ<Lb0RL`^7GXCVHJH;?>AH2Yu<1=+lI'R:]T%G!36lX70;3[Sf*p$U-u/40q[!2s=;f$IP"CTu#$QjBpR$!7Fr!S/uViP"^+%XK_\9HauH6,)X$n>;U,_J9>h#AfVPX%dql;VR((eET^jQQDk$H:KB1NlX0atDQ'ZIQGQYW;H^j(WN;jR<EA'aPr7p:b"DZIb'J5@%D<k<jE*Hm*hO(7ch3hB'[jK[HpEhMJm,it9iU4X1G'd[]It(oj]g2sP]05[F#'amf&Y=,]LhA;(`j;6GnuV"EH.M"0cY@?fB.XVc%MVSa5XCK-n<V^X_(7?-j=jN.nn(YjSDP?m8hgY(hJ,Z3Ms7Us>q<PLSs4&d;qt7_:mi"Fcqg?-H%=e'LGJEqJiK&G8IJim3++NtL%hgYLBYQ!dQ5Q/k(J%tsLY<N!QIDbirhnT'0^L$GKIeAb"l\Fps>lXcUIE20Vc[YbsO!"A??i9-\qPVZSqUKN!].H[p)tLbDm]V*=%Z[_bPeB@leH9_6)^M:0+p\mZaJ,fE*Ghs7OAEem<"<H[8qX8H?iV90de+IqAVU(>'FGl1Fb,LA]oY,YOHe8)]>K4.Tn!hN?mCIG/%m!XL[pQlTNP&n(t/SR^IA\KJXk\9*(l.:&Bq7^EQ8`_Pi8*]h]U[M!\kF%X3^";EC;/e,D:%E;[WtJIS7o",O($Xq#*RW5\Gj%#1%34_KG+B,"ph<ga!4DXn7RbkaTHt.BohP3SU78YP7FQ@S!WSr<,]UJFcb',*,N[gi[>"GBo7B23cKh,)06$n"laEqE5:!SbZF*T9#%O3qUdA&\FP=n$W"qSqb<agmHYQi/(TBGdJ9]Eafg@+tV!p<WcNFhmI;P,=9^rM+[%l?26uds]GDde`!?mi]>+_V:EKP_:t!pKL>k%r2n&>Ei#<s*be>(Fi#e`T2>$;ofZX\KM<Kh2YkT:bT"qm,la5'nUI)O5Q+V8IG=Mqm$/@/FoJ)qIaRWabL6F2e,-c/[XWh50:!lQ%ZCh'6[ibP3a6i?qr@`ZsPOJM4qd9BXJ,AU<5PRIWqq:^noBYjorep5prU"74q<n:^ro:Utrph*_^]2@KQ&hR9qYT0_[=8/GRt(4`%5MqWJ'3,"J&,uNWq@DK_*s$cc1B~>%AI9_PrivateDataEnd