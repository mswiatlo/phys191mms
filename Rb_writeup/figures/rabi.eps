%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: rabi.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: steven schowalter
%%CreationDate: 5/12/09
%%BoundingBox: 0 0 312 123
%%HiResBoundingBox: 0 0 311.6153 122.7696
%%CropBox: 0 0 311.6153 122.7696
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 52 8%%BeginData: 5162 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0CFFFD04A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FF%A8A8A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FF%A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FF%A8A8A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FF%7DFD06FFA87D7D7D52A8A8FD72FFA8FD06FFA8527D52A8FFA8CFA9A9FD6F%FFA8FD08FFA8FFA8FFA8FF7FA9FD6FFFA8FFA8A8FD09FFA8FFA9A9A9CBFD%6DFFA8A87D527DFD08FFA8FF7FA979FFA9FD6CFFA8FF7D7DA8FFFFFFA8FF%A8A8A8FFFFA9A979A97FFD6CFFA87D2752A8FFFFA827525227A8A8FFA9A9%4FA955A979FD6AFFA8FF7D7DA8FFFFFF7DA87D7DA8FFFFFFA37FA979A97F%A9A3FD68FFA8FF52F8A8FD08FFA8FFA9A955A955A955A979A97FFFA9FD64%FFA8FF7D527DFD08FFA8FFFF7F7FA979A9FD047FA37FA9A3FD63FFA8A87D%527DFD06FFA8FFA8FFA97F55A94FA955A379FD047F79A379FD05A9FD5CFF%A8FFA8FD05FF7DA8527DFFA8FFFF7F7FA979A97F7FA97F7F7FA379A955FF%55A955A97FA97FFD09A9FFA9FD2CFFA9FFCBFFA9FD1BFFCBFFA8FF5227A8%FFFFA8FD0452FFA8FFA97F55A955A979FD047FA3797F7F79A955A3557F7F%797F797F557F55A94FA92BA955A355FD057FA37FA97FA97FA97FA97FA9A9%A3A37FA37FA979A955A955A955A955A3557F797F797F797F7F5579557955%55795555557F5579557F557F557F557F557F557F557F797F557F557FFFA8%FFA87DA8FFFFFFA8FFA8FFFFA8FFFFFD047FA37F7FA3797F7F7F79A979A9%55A9FD077FA3FD047FA3FD057F797F797F797F557F557F5579557F557955%795579557F557F557F557F55A3557F557F557F79FD057FA97FA97FA97F7F%A97FA9A3CBA3FF7FFFA3FFA9FFA9FFA9FFA9FFA9FD07FFA8FFA852A8FD08%FFA8FFA97F79A379A3797F7F7F797F79FD097F557F7F7F79FD097F557F55%7F557F557F4FA94FA955A955CB7FA97FFD09A9FFA9A9FFCBFFA9FD2AFFA8%FF5227A8FD0BFFFD097FA37F7F7FA3FD057FA37FA3FD057FA355A955A94F%A955A379A97FA9A9FD47FFA8FF7D27A8FFFFFFFD04A8FFA8FFA97F79A37F%7F79A37F7F797F7F7F79A979A355A379FD057F79797F55A379A97FA9A9FF%CBFD4BFFA8FF7D7DA8FFFFA8277D5252A8A8FFFFFD057FA3FD057FA97F7F%A379A979FD057FA37FA97FFFA9FFA9FD51FFA8FF52F8A8FFFFA8FD047DA8%A8FFA97F797F797F7F7F55FD057F55A94FA94FA955A97FFFA9FD58FFA8FF%7D52A8FD08FFA8FFFF7FA379A97FA3FD087FA979A97FFD5EFFA8FF7D27FD%09FFA8FFA9FD077F79A37F7F79A955A97FFD60FFA8FF5227A8FD0BFF79A9%79A955A97F7F7FA37F7FA3A9FD62FFA8FF52F8A8FFFFA87D7D7D52FFA8FF%A9797F7F7F797F7F557F7FA37FA9FD63FFA8FF7D7DFFFFFFA8277D5252A8%FFFFFF79A979A979A97FA37FA9A3FD65FFA8FF5227A8FD04FFA8FFA8FFA8%FFA97F7F79A955FD047FFD67FFA8FF5252A8FD08FFA8FFFF79A955FF55A9%55FFA9FD67FFA8FF7D27FD09FFA8FFA97F7F55A955A37FFD69FFA8FF7D52%A8FFFFFFA8FFA8A8FD04FF79A955FF55FFA9FD69FFA8A85227A8FFFFA852%7D5252FFA8FFFF79A355A97FFD6BFFA87D527DA8FFFFFFFD047DA8FFFFFF%55A955FFA9FD6BFFA8522752A8FD08FFA8FFFF55A379A9FD6CFFA8A87DA8%A8FD0BFF55A97FFD6DFFA8FD0CFFA8FFFF557FFD6EFFA8FD07FF52A87DA8%FFA8FFFF55FD6FFFA8FD06FFA8FD0452FFA8FFFF79A9FD6EFFA8FD09FFA8%FFFFA8FFFFA9FD6FFFA8FD0CFFA8FFA8FD1DFFA8FD1DFFA8FD1DFFA8FD16%FFA8FD0DFFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8%A8A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8%FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8%A8A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8%FD0CFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8%FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FD05FFA8FFA8FFA8FFA8FFA8%FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8%FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FD05FFA8FFA8FFA8FD0FFFA8FD0E%FFA8FD0DFFA8FFA8FD0DFFA8A8FD0DFFA8A8FD0DFFA8A8FD0CFFA8A8A8FD%0DFFA8A8FD14FFA827A8FD0CFFA852A8FD0CFFA82752A8FD0BFFA85227FD%0CFFA82727A8FD0BFFA85227FD0CFFA82727A8FD0BFFA85227FD14FFA87D%FD0EFF7DFD0DFFA87D7DFD0DFF7DA8FD0CFFA87D7DFD0DFF527DFD0CFFA8%7D7DFD0DFF7D7DA8FDFCFFFDC9FFA8A8A8FD7DFF52277D7D7DFD04A852A8%7DA87D7DA8FD70FFA87D52272727F8A87D52272727527D7DFD70FFA8527D%527D527DA8A852FD057DA8FD7EFFA8FDB1FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-05-12T11:25:06-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-05-12T11:25:06-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-05-12T11:25:06-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>104</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAaAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qx7z3N5uh8uzP5UiW&#xA;bWOaCNG4H4a70ErInWnKp+zWm9MVSPQZfzNvfMouNQ9Sx0JLyU/VJEtOT231aiqWQvIONzQoQale&#xA;XLtiqZ2kelw2eh/WdOjdry4EKykFirNbSv6j+ogY8inGnTcEHLsWHjEjf0xv37gfpv4Knw0bSA5c&#xA;WMHNgFJ9NOi1I7f5RylVp0LRTE0X1C39N+XJfTTfmSW7d64qubRtIYqWsYCUPJT6abGhHh4HFWho&#xA;mjiVpRZQc3VVP7tKUUkjan+UcVaOhaKYmi+oW/pvy5L6ab8yS3bvXFVzaNpDFS1jASh5KfTTY0I8&#xA;PA4q4aNpAcuLGDmwCk+mnRakdv8AKOKrBoOiiJ4vqMBjcuWBjU19Qlm7f5WKr20bSGKlrGAlDyU+&#xA;mmxoR4eBxVw0bSA5cWMHNgFJ9NOi1I7f5RxVY+g6K0EkJsYBHIGDgRqPt1Lb098VXto2kMVLWMBK&#xA;Hkp9NNjQjw8Dirho2kBy4sYObAKT6adFqR2/yjiq06FopiaL6hb+m/LkvppvzJLdu9cVbfRNHdo2&#xA;aygrG3JP3adSpXw8GOKtjRtIDlxYwc2AUn006LUjt/lHFVp0LRTE0X1C39N+XJfTTfmSW7d64qub&#xA;RtIYqWsYCUPJT6abGhHh4HFWhomjiVpRZQc3VVP7tKUUkjan+UcVaOhaKYmi+oW/pvy5L6ab8yS3&#xA;bvXFVzaNpDFS1jASh5KfTTY0I8PA4q4aNpAcuLGDmwCk+mnRakdv8o4qsGg6KIni+owGNy5YGNTX&#xA;1CWbt/lYqvbRtIYqWsYCUPJT6abGhHh4HFXDRtIDlxYwc2AUn006LUjt/lHFVj6DorQSQmxgEcgY&#xA;OBGo+3UtvT3xVe2jaQxUtYwEoeSn002NCPDwOKpf5g0fS00bUJY7CBpDbuDROJoqsRQxqzbVPQYq&#xA;82uPOo1D8z20XTvMeotOs7QJ9X+rfUYpkLg27WbQtLMkfplZ5DMrBvs8R9lV6d5p806V5Z0h9V1M&#xA;yfVkYLxiXm5JqTRduiqWPsPHbFUrtfzL8tXPmKPy+hmXUZbiW2jDqiofRgSf1Axf7LpIOA+02/w0&#xA;UkKqchjXR/L0iMjrDqFsJBGymhlVo6fCqDkDKCQd/c5m6L+Md+M/ZR/QgpZ+X/nCWXTdAtJ05za1&#xA;da2fUZySi2d7NQCv2tiBmz7V0AE8khyxxxf7KEUAs40rVLHVtMtdTsJBNZXsST28oqOSSKGU0PTY&#xA;5pM+GWKZhMVKJo/BkisqV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxVLfMpj/QGoCRkRTBIKyFVWpU0qWDj8MVeL+avMOsWf56WTWGrNbaXLJbw6poUZZbudoBLR0t&#xA;y0byo5KisaMCCD/PxVe4alpem6paNZ6laxXlo5UvbzosiEqeS1VgRsRiqAsvJnlKxu4ryz0ezt7u&#xA;F5JYriOFFkV5V4yMHA5VZdjiqWXgdPL2hmSo/wBOsN2PZplC9Wk61FN/oHTM3Q85f8Ln/uUF5t5V&#xA;kkhl8gzRnieXmC4jXqFM0H1im/gznOs1wBGpB/2gfKXD+hiOi/yvq95plhoc9u1Dp/kzUjbnr+8i&#xA;njaIsD8J4ra+HfI63BHLPID/AB6rHfuIN/7pQy+D8z5bOykm1CD10s/K1p5jnkjorySTeorxj9kV&#xA;MQpt3zUy7FE5AQNcWoliHkBVH7U2y3/FWgC4vYHvEjbT0tpLtpPgVFvCRB8TUHxlaDNT+Ry1EiN8&#xA;fFX+b9XyTaYrdWzPIizIXhZUmUMCUZwCqsK7FgwoD45jGEqBrmlVyKuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVAeYFdtD1AICXNvJQLsfsnwaP/AIkMVYTreteZLf8ANHT7&#xA;WHzBb2+gSyW1vcabJC5f1pIbmRYFYQMhacIH5G4XhwA4nkOSrJPPfle58z+XZtJtr9tOkldG+sKG&#xA;bZT0Kq0ZNPtL8WzAHFWO6H+WOq2XnGDzJeauk0kdxdXElvHCyowubdLcqA8jhWYxrI8g3qvEUVmx&#xA;VNbxCnk/Tq1FdQ0kgEBaV1G26USPr16H5nM3s/8AvD/wvJ/0zkgvL9IlkitPKpX4Tp9rqbep1Fbr&#xA;S1kTYigo1F36nOwzxBlm/pyx/wCxyUf1sFSOGOC3vIkFUTRdSsLeM1JCtc6qEVf+RCLkTIyMSf8A&#xA;Vccj/pcN/eSlue2W7jiszF6hn8v2ekSL/O4utPi41G/Ctxt8zjGfATK+WaU/9jlPz9P3Koa28l3o&#xA;/m3gfUm1Wy0X05KV5fVba2nFKU7znb/KyemAhkw3yhLL/spTj+j7EFHeYJ3fVvME8Mp9O51aw1Pm&#xA;Cfh/RkV49ajtx0hDtvlGliBjxAjcY5w/05gP+npSVVNQv01GZYrh1L+cjqMxVzRrNJWsigApyQrC&#xA;CR/N47ZE4oGAsf8AIXhH9auO/fv8lb0fW9VW90m4nvZDawa1c6hKxdirQ34so0jP8yodZ+HttsMd&#xA;RpsfDMCI4jijHl1h4hJ+Phb/AHralpfm3zFY2OgXV3qNw/6Jg1GbW/WlaQSm6tmubUS1NG9J6BK9&#xA;BtTJZtDhnLJGMY/vDAQoVXDLhlXvHPzW0TH5s826fBHbS6lJLc2Wn3emF5eLGXUmkvhbTSA1+NV0&#xA;wdez++VnQ6fITIQAjKcZ7dIVj4gPL95/sVtXXz35r+sRWyX3xSWsOhJM0SPTXTPFE87AUr8ErMV6&#xA;fD0plZ7MwUZGPKRycz/dcMjw/MVfPdbX2/5m+br5oo7BbdrrVYYLTSopEqi6hbpbS6gXKleXFbuQ&#xA;cQ3WE+5wT7G08LM+LhgTKX9QmYx/7mO9fxhbV4/zJ87apF62h6ekkesgv5eMkEpWP6ijG+S6YNsZ&#xA;JE9OLYUJ6NTKz2RpsRrLLfH/AHm434/o4fcDcufwWyix54/MG8je503Rma1uw1/pnO2mr9TthN6l&#xA;vKeShbi4aGL0q02l+yeByr+TdJA8M5+qPpl6h9UuGpD+jG5cXP6OfqTZbbzR+Z08o9DSmjhLnVY+&#xA;VrIpbTFkZBYP6jDjeuoV+xFacdjgGi0MRvPf6PqH11fHt/kxy+HNbK5Nd/NiIxyzaWZY4GGo3MMc&#xA;cYaW1nMajT4z6n+9FuJJmLftemgr8ZwHTaA2BOr9A3O0hf7w7fTKoiunFL+aFsuj1X84bZSZbCK/&#xA;k05fVuY40jiW+N2imOGBi/wfVHZg5P2go8cTg7OlykYiew5ng4eZltvxiq7r8l3ba7/OW3YxejBe&#xA;myratOI4o1vHuhIYrxR6lY47Q+kJE6tV6DZcfD7NlvZjxeqrJ4eGrhy3M/VR6envK7qsbfnE3KM/&#xA;V/3b/owzEQoXXkT+mFX4wPgKj6v/ADctqUyJHZ3P1b+ut/8AlV879fdS7txx/nJI8cckttAkrCyl&#xA;nX0WMSRGItqKoV+IzgTAQn7NU8GwE9nCyBI16q33u/3f+b6fV19Xku6mth+ct4B6t9b6Y2oKBNwW&#xA;KYae1qo4tFsPWF5Jy58vsLQDfJHL2dDlGU+DlzHHxd/83gHLvK7qzaZ+cUxeQ6nY2puSbswKvqLb&#xA;SQhxHZoxRTJDN+7MkjUZaPxHxDjAZuzhtwTlXpvlxA1czvtKPq4RyPpvkbd1a30382xIzPqliFdv&#xA;roRl5BJWkFdOqIgTbrHWk4pJy7U2yEs3Z9fRP+b8K/vOf1X/AA/TXVd1SPSPzXiX/jv2Nw0IEkfq&#xA;23ETSSBPUil4KCkUREnpFPjNV5k8SWidRoD/AJOYvulyAuiL5k7cV7c+Hns7qqaN+aCVH+I7OT0R&#xA;xheSyH74SK3J51Rk4tEzL6YjajBfi61ETqNCf8lIXz9fKv5vO763yvbkndUOifmONl8z2pVQ0Ss+&#xA;nqWKsWImfjKo9ZAVACgIaGq77R/M6P8A1KXf9f2cvpO/9Lz23aLZ0P8AMYlR/ie2C0ELkacvLgKE&#xA;zispAnbcdPT3+xtu/mdH/qMu/wCv7OX0/wCy/pLRXfoHz+1A/muFQyqshi0yNSOIX4ouc0gV2oef&#xA;MOu/wqtMj+a0n+on45D9vpGw6VR7yVoq11p+tw+W9UGramNSuZYXIENslvCiqhHFIqXUnxdW5M+/&#xA;TjmJqcmKRHhw4AO+XET7zsPlEfFQ80816fokv/OQ+kTzzzjVjHZLaRfVhIDHH9Ylf05PrCuIhwHq&#xA;MIGVWI3qTTGS9O8969rWheXZtQ0fTm1O+R0VLZVkfZj14RAua/Z26VqdgcVY7pf5i+ZrzzPZ6b/h&#xA;+4/RV3qU9s+q/VriOOG1jsmmjL8xu7XC+mX2SnTqMVTS8dW8n6dRFUDUNJHwBQD/ALkbbf4Gfv1r&#xA;vXsMzez/AO8P/C8n/TOSC8pilMHl+zmUAmLT5HC9vh02I0zs5R4ssh3zH/TSTBM7+AW1y8SEs7XM&#xA;tkp/m9S910L8vjRcx8UuKN/0RL5Q036Er9O5DUIJOX91q8OnItP91xXukyA/63wgZHN9BHfjMviY&#xA;ZgqF0C1+vDyrZp8X6Yhuoi/SptNOtl6nwKsu/gO2W6qfB40v9TMT/psk/wC35qFPS1udY0/SUt+T&#xA;trml6zdQ0UjmYn1CND7V/SopTxw5jHDOd/5LJiHz8In/AKZITq18r+ZdRiF9Dp7o195WeaGOfilN&#xA;Vlne4jhlrx4mktDWlPozDnrcOM8Jl9Ooo1/qYiIkj5JpHP8Ald5hns7m3W5itmOiafaWMrksY7+3&#xA;MJlZgv7I+ow71NcoHbWGMgaMv3s5HzgeKvj65J4U5vPym0+8bX45rt0tdbGmqFiXi8S6cqqyhqn4&#xA;ZlTiwAG1cw8fbs4eGRH1Y/E59eP/AInovCm0n5d+W5rq7uZ0lle71KDV2VpKLHcWyhUEYULSM0Ys&#xA;prUs3Y0zFHa2YRjEUOGBhy5iXf59x8gmkyh8reXIWZo9OgVmvW1QngCfrrji1wK9JCNuWY0tbmPO&#xA;R+jg/wA3+b7lpHxWlpCoWGGONQ7yAIoUB5CWd9h9pixLHvXKJZJHmSf2ckquQV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2Kpb5lYLoGoEqrj0JKhgpX7J3IdkH44q8k816lx/wCcgtFs/SY2we0a&#xA;aQOiobl4LpbcM5T1Qyx+sfTWTgaiqkvUKvX9a1zSdEsH1DVblLSzjIDzPWgLGg2AJ9z4DfpiqFtv&#xA;OHly51T9FQXge/M0tuIeEg/ewRrLIvIrx2jkDDfftWhxVKNXlWDyTYzOWZY7zSnbZwaLqFuaASEn&#xA;5b08Nsz+zY3lrvhk/wCmckF5ReQNb6DrabCW20/TVWnQF9LhSSn+t6jffXrnZY5cWXH3Snk/6aSr&#xA;7gwTjVRXXZIx1Pme1toqk0UTyag33epcO305h4P7q/8AoHkfkMX6IgJV9KsLqXWLcxRM0Seeb6Pl&#xA;QnhDFalx2+x/o3GtetMhnyxGM2d/ykPmZff6rVl/lL8vDp0OjT6hLyv9Fu9UmgKEFHS/lkVK7ClI&#xA;Cn05qNf2t4hyCA9GSOMH/MAv/ZWkBlWl6FpGlWlpa2FqkENjE0FoKcmjjchnRXbk9GKqTvvQZq8+&#xA;pyZZSlM2ZGz5llSOyhXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgPMAJ&#xA;0PUACV/0eTdQ7H7J7IVb7jiryrzHNq0H59aZ6ItiLlbaKEzWiTXAgVJWuRBeMpFuGHWPkGahIBxV&#xA;6l5i8uaP5i0x9M1aEz2bsGZA7xmq+DIVYVBIND0NMVSrTPy38p6dq0OrwW8j6hBLJPFPNPLKwllh&#xA;+rlvjY9ISUUdAD0xVLvMEYj/AC5EgQLwlsbiQceJYRXcLn9iOpKptt9J65suyf8AGAO8THzhIILz&#xA;fWATovnJq/HHb+W4oB25XsMFu3L7xnWaf+9weZzk/wCaZSYMusPK11q+teZEj4Rx2Hm2w1AeqWFV&#xA;tre2uXC0BNSZeS12NadM1OXWxw4sRP8AFppx2/pSnEfcyp6Rp+lWGnC4FnF6Qup5LqcAs3KaY1kf&#xA;4iacj2G2c5lzzyVxG+ECI9w5MkVlSuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxVLfMsayaBqCsgf9xIQpXluFPbjJ/xE4q8Os7tfMf51jUL2XSra70rUXgjtXuk9d0tr&#xA;m4sYiiJH6rTOsLP6ZloBTkKEAqvYvPem+Z9S8uzWvlq9Ww1RnQpOzmP4Qd/jVZCtDRum9OPQ4qxz&#xA;RdC/M2PzhBf6ldL+hTdXE81tHeySBY3thEkfpNDxdWmAkUBl9MjYnk1VVbzhNKn5TX8yuCyQRtGw&#xA;+LjxkSlavLWhHt8hm17EAOrgD3/oKJckitPKb6xqPm7R4mRUnj8tTJzZhxS0CyH4gGPKkB47deub&#xA;eeuGGGDIehzj/Tbf75jT1iOCCN5XjjVHnYSTMoALuFVAzEdTwRVqewAzlTImgTy5fezX5FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUt8yll0DUCrBKQSVYmm3E9&#xA;+cVP+CxVyeWfLiXH1lNKtFuRM1yJxBGJPWdzI0nMLy5l2LFutcVQPnnzfB5S8vS6zPbPdJEyp6SM&#xA;E+14s2w2FB4tQd8VSjQ/zS03V/Mg0SCBfjubi3iuVmDq4t7dJ+QAUCp5lWUElCN+uKqHnpnl/JnX&#xA;wwZmXSZx8SkbCGopVI6gDvT6Tm27CP8Ah2H/AIZH70S5Mw07RrGxlkuYowLy4jhiupxWsgt1Kx1B&#xA;JAoGPTMDNqJTAiT6QSQO6+aUdlCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxVL/ADE7JoV+ycuXoSBeILGpU+Cyf8RxVMMVaZVYUYBh4Hcbb4qsW1tkKlIkUoSV&#xA;IUAgtsSPn3xVJ7a3nj0uLTJtLa4tmVob2OQWzRyRsjKwChwGVzT7Q3XrvkoTMSJRNEciqYC9vPUY&#xA;HT5vToOJ5QVrU129T5ZFVpvtQ9JyNOl9UcuC84eJoTwqfU2qKVxVc17eck46fMVJ+MloBQUPT95v&#xA;vTFWhe33rNWwm9HivCjQ8uVW5V/e9KcaYq0b7UPScjTpfVHLgvOHiaE8Kn1NqilcVXNe3nJOOnzF&#xA;SfjJaAUFD0/eb70xVwvbz1GB0+b06DieUFa1NdvU+WKrBfakIXJ0+UzAv6ahoQpFTwqfUPalcVXt&#xA;e3nJOOnzFSfjJaAUFD0/eb70xVwvbz1GB0+b06DieUFa1NdvU+WKrHvtS9CQpp8ono/pAtCVrvw5&#xA;fvAd9q4qva9vOScdPmKk/GS0AoKHp+833pirhe3nqMDp83p0HE8oK1qa7ep8sVWm+1D0nI06X1Ry&#xA;4Lzh4mhPCp9TaopXFW3vb7lHwsJuPL97Voa8eJ+z+968qfRirYvbz1GB0+b06DieUFa1NdvU+WKr&#xA;Tfah6TkadL6o5cF5w8TQnhU+ptUUriq5r285Jx0+YqT8ZLQCgoen7zfemKtC9vvWathN6PFeFGh5&#xA;cqtyr+96U40xVo32oek5GnS+qOXBecPE0J4VPqbVFK4qua9vOScdPmKk/GS0AoKHp+833pirhe3n&#xA;qMDp83p0HE8oK1qa7ep8sVWC+1IQuTp8pmBf01DQhSKnhU+oe1K4qva9vOScdPmKk/GS0AoKHp+8&#xA;33pirhe3nqMDp83p0HE8oK1qa7ep8sVWPfal6EhTT5RPR/SBaErXfhy/eA77VxVe17eck46fMVJ+&#xA;MloBQUPT95vvTFUHq7313p15aDTpiJoGSP4rYkswINQ8hWg2xVOMVdirsVY5rul+arnzPoV5pl+t&#xA;vo9oZv0pbFiDJy48PhCkSbBl3I415bnFWR4q7FXYqx/R9M8xQebNevr259TRrxbUaXbNKzmJooys&#xA;3GOixxoxIPdi1atTiAqyDFXYqtmDNC4UVYqQACVNafzDp88VYT+Wug/mFpaynzdqq6gXs7GJVV2k&#xA;/wBJhi43Mm6oF5NQbV505GhxVnGKuxVI/ONn5gu9Ijj0CYQail7ZTFzKYgYIrqOS5QsEkr6kCulC&#xA;p64q7yRpuuaZ5XsbHXbo3mqQiQTXLSPM7qZXaPnI+7P6ZUPSi8q8QFoMVTzFXYqwP8xdB/MHU76z&#xA;bytemyhSFlunN41upPqo3ERrDLUsisOfIFdqUHLkqze0S4jtYUuZBNcJGqzTABQ7gAMwUdKnemKq&#xA;uKuxVgEPl78wf+VhjU2vmTy0l1LIbN7x5EeF7bgtIFij4sJacVMhQCpoX+Iqs/xV2KqN6szWc6wb&#xA;zmNxEOXD4yp4/FRuO/ehxVhn5deXvzD0m6vG806smoWzxRJaRrJJKV4KB8XqioZaHk3I+oTXagGK&#xA;s5xV2KpD510/zBqGii20G4+qagZ4XW4MjRBFRwzcuAJdTShTao+4qteRdN8wab5ZtrPX7n65qkbT&#xA;GW4aR5nZXlZo+cjBeThCA3FQtdlAWmKp/irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQer6&#xA;pb6Vp0t/cRzSQw8eaW8TzyfEwTZIwzEAtUnsNzsMVSLQvzM8n6zbi4hvDZwOlvJBJqCmzEy3cYlh&#xA;MPr8PUDIQar4061AVTyDW9FuDSC/tpj6IuaRzRt+4PSXY/Y/yumKoLT/ADr5T1CKCS11a1P1gK0M&#xA;byrHKyuOSH0nKuOa/EtRuN8VROneY9D1K7ktLC8juZooo7g+meStDKzKkkbj4XXlGy1UmhFDiqY4&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqo31t9asri1&#xA;DmL143i9VQCV5qV5AGoqK98VeT3X/ON/l+5S3SXWLxltbK30+OsdqT6dram0jYkxfa9OlfliqbeW&#xA;/wAivLOhXGqzxXdzcNq9pc2dwZFtwyrdkCRo5EiWVfgRFCc+G3LjyNcVSP8A6Ft0W8Bn1TVbhr2V&#xA;le6a3jt1jZkazPJFkjcqG/RsZ4ktTkwq3XFWY+Tfy5g8s6jHNDdST2tlYtp9gsrF5eM9095O8rUF&#xA;fjZUQdlXcktsqzPFXYq7FXYq7FXYq7FXYq7FXYq7FXYq/wD/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:B8757E203240DE11AC91D52DFC338480</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:B9757E203240DE11AC91D52DFC338480</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.0d6e5</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPSMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.3x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times New Roman.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -122.77 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 122.77 li
311.615 122.77 li
311.615 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.8125 lw
2 lc
0 lj
3.239 ml
[] 0 dsh
true sadj
36.0215 5.53125 mo
36.0215 5.53125 li
36.084 6.03125 li
36.084 6.03125 li
36.1465 6.59375 li
36.1465 7.09375 li
36.209 7.09375 li
36.209 7.65625 li
36.2715 8.21875 li
36.2715 9.28125 li
36.334 9.84375 li
36.334 10.3438 li
36.3965 11.4063 li
36.3965 11.9688 li
36.459 13.0313 li
36.459 13.5938 li
36.459 14.6563 li
36.5215 15.7188 li
36.5215 16.7813 li
36.584 17.9063 li
36.584 19.5313 li
36.6465 20.5938 li
36.6465 21.6563 li
36.709 23.2813 li
36.709 24.3438 li
36.7715 25.9688 li
36.7715 27.5938 li
36.834 28.6563 li
36.834 30.2813 li
36.8965 31.9063 li
36.8965 33.5313 li
36.8965 35.0938 li
36.959 36.7188 li
36.959 38.9063 li
37.0215 40.4688 li
37.0215 42.0938 li
37.084 43.7188 li
37.084 45.9063 li
37.1465 47.4688 li
37.1465 49.0938 li
37.209 50.7188 li
37.209 52.3438 li
37.2715 53.9688 li
37.2715 55.5938 li
37.334 57.7188 li
37.334 59.3438 li
37.3965 60.9688 li
37.3965 62.5938 li
37.3965 63.6563 li
37.459 65.2813 li
37.459 66.9063 li
37.5215 68.4688 li
37.5215 69.5938 li
37.584 71.1563 li
37.584 72.7813 li
37.6465 73.9063 li
37.6465 74.9688 li
37.709 76.5938 li
37.709 77.6563 li
37.7715 78.7188 li
37.7715 79.7813 li
37.834 80.8438 li
37.834 81.4063 li
37.834 82.4688 li
37.8965 83.5938 li
37.8965 84.0938 li
37.959 85.1563 li
37.959 85.7188 li
38.0215 86.2813 li
38.0215 86.7813 li
38.084 87.3438 li
38.084 87.3438 li
38.1465 87.8438 li
38.1465 87.8438 li
38.209 88.4063 li
38.209 88.4063 li
38.2715 88.4063 li
38.2715 88.4063 li
38.334 88.4063 li
38.334 87.8438 li
38.334 87.8438 li
38.3965 87.8438 li
38.3965 87.3438 li
38.459 86.7813 li
38.459 86.2813 li
38.5215 85.7188 li
38.5215 85.1563 li
38.584 84.6563 li
38.584 83.5938 li
38.6465 83.0313 li
38.6465 81.9688 li
38.709 81.4063 li
38.709 80.3438 li
38.7715 79.2813 li
38.7715 78.1563 li
38.7715 77.0938 li
38.834 76.0313 li
38.834 74.4063 li
38.8965 73.3438 li
38.8965 72.2813 li
38.959 70.6563 li
38.959 69.0313 li
39.0215 67.9688 li
39.0215 66.3438 li
39.084 64.7188 li
39.084 63.6563 li
39.1465 62.0313 li
39.1465 60.4063 li
39.209 58.7813 li
39.209 57.1563 li
39.209 56.0938 li
39.2715 54.4688 li
39.2715 52.9063 li
39.334 51.2813 li
39.334 49.6563 li
39.3965 48.0313 li
39.3965 46.4063 li
39.459 44.7813 li
39.459 43.2188 li
39.5215 41.5938 li
39.5215 39.9688 li
39.584 38.3438 li
39.584 36.7188 li
39.6465 35.6563 li
39.6465 34.0313 li
39.709 32.4063 li
39.709 31.3438 li
39.709 29.7188 li
39.7715 28.6563 li
39.7715 27.0313 li
39.834 25.9688 li
39.834 24.9063 li
39.8965 23.7813 li
39.8965 22.2188 li
39.959 21.6563 li
39.959 20.5938 li
40.0215 19.5313 li
40.0215 18.4063 li
40.084 17.3438 li
40.084 16.7813 li
40.1465 15.7188 li
40.1465 15.2188 li
40.1465 14.6563 li
40.209 14.0938 li
40.209 13.5938 li
40.2715 13.0313 li
40.2715 12.5313 li
40.334 11.9688 li
40.334 11.4063 li
40.3965 11.4063 li
40.3965 11.4063 li
40.459 10.9063 li
40.459 10.9063 li
40.5215 10.9063 li
40.5215 10.9063 li
40.584 10.9063 li
40.584 11.4063 li
40.6465 11.4063 li
40.6465 11.4063 li
40.6465 11.9688 li
40.709 12.5313 li
40.709 13.0313 li
40.7715 13.0313 li
40.7715 14.0938 li
40.834 14.6563 li
40.834 15.2188 li
40.8965 15.7188 li
40.8965 16.2813 li
40.959 17.3438 li
40.959 18.4063 li
41.0215 18.9688 li
41.0215 20.0313 li
41.084 21.0938 li
41.084 22.2188 li
41.084 23.2813 li
41.1465 24.3438 li
41.1465 25.4063 li
41.209 26.5313 li
41.209 27.5938 li
41.2715 29.2188 li
41.2715 30.2813 li
41.334 31.9063 li
41.334 32.9688 li
41.3965 34.5938 li
41.3965 35.6563 li
41.459 37.2813 li
41.459 38.3438 li
41.5215 39.9688 li
41.5215 41.5938 li
41.584 42.6563 li
41.584 44.2813 li
41.584 45.9063 li
41.6465 46.9688 li
41.6465 48.5938 li
41.709 50.2188 li
41.709 51.2813 li
41.7715 52.9063 li
41.7715 53.9688 li
41.834 55.5938 li
41.834 56.6563 li
41.8965 58.2813 li
41.8965 59.3438 li
41.959 60.4063 li
41.959 62.0313 li
42.0215 63.0938 li
42.0215 64.1563 li
42.0215 65.7813 li
42.084 66.9063 li
42.084 67.9688 li
42.1465 69.0313 li
42.1465 70.0938 li
42.209 71.1563 li
42.209 71.7188 li
42.2715 72.7813 li
42.2715 73.3438 li
42.334 74.4063 li
42.334 74.9688 li
42.3965 76.0313 li
42.3965 76.5938 li
42.459 77.0938 li
42.459 77.6563 li
42.459 78.1563 li
42.5215 78.7188 li
42.5215 79.2813 li
42.584 79.2813 li
42.584 79.2813 li
42.6465 79.7813 li
42.6465 79.7813 li
42.709 79.7813 li
42.709 79.7813 li
42.7715 79.7813 li
42.7715 79.7813 li
42.834 79.7813 li
42.834 79.2813 li
42.8965 79.2813 li
42.8965 78.7188 li
42.959 78.7188 li
42.959 78.1563 li
42.959 77.6563 li
43.0215 77.0938 li
43.0215 76.5938 li
43.084 76.0313 li
43.084 75.4688 li
43.1465 74.4063 li
43.1465 73.9063 li
43.209 72.7813 li
43.209 72.2813 li
43.2715 71.1563 li
43.2715 70.0938 li
43.334 69.0313 li
43.334 67.9688 li
43.3965 66.9063 li
43.3965 65.7813 li
43.3965 64.7188 li
43.459 63.6563 li
43.459 62.5938 li
43.5215 61.4688 li
43.5215 59.9063 li
43.584 58.7813 li
43.584 57.7188 li
43.6465 56.0938 li
43.6465 55.0313 li
43.709 53.9688 li
43.709 52.3438 li
43.7715 51.2813 li
43.7715 49.6563 li
43.834 48.5938 li
43.834 46.9688 li
43.8965 45.9063 li
43.8965 44.2813 li
43.8965 43.2188 li
43.959 41.5938 li
43.959 40.4688 li
44.0215 38.9063 li
44.0215 37.7813 li
44.084 36.2188 li
44.084 35.0938 li
44.1465 34.0313 li
44.1465 32.9688 li
44.209 31.3438 li
44.209 30.2813 li
44.2715 29.2188 li
44.2715 28.0938 li
44.334 27.0313 li
44.334 25.9688 li
44.334 25.4063 li
44.3965 24.3438 li
44.3965 23.2813 li
44.459 22.7188 li
44.459 21.6563 li
44.5215 21.0938 li
44.5215 20.0313 li
44.584 19.5313 li
44.584 18.9688 li
44.6465 18.4063 li
44.6465 17.3438 li
44.709 16.7813 li
44.709 16.7813 li
44.7715 16.2813 li
44.7715 15.7188 li
44.7715 15.2188 li
44.834 15.2188 li
44.834 15.2188 li
44.8965 14.6563 li
44.8965 14.6563 li
44.959 14.6563 li
44.959 14.6563 li
45.0215 14.6563 li
45.0215 14.6563 li
45.084 14.6563 li
45.084 15.2188 li
45.1465 15.2188 li
45.1465 15.7188 li
45.209 15.7188 li
45.209 16.2813 li
45.2715 16.7813 li
45.2715 17.3438 li
45.2715 17.3438 li
45.334 18.4063 li
45.334 18.9688 li
45.3965 19.5313 li
45.3965 20.0313 li
45.459 21.0938 li
45.459 21.6563 li
45.5215 22.2188 li
45.5215 23.2813 li
45.584 24.3438 li
45.584 24.9063 li
45.6465 25.9688 li
45.6465 27.0313 li
45.709 28.0938 li
45.709 29.2188 li
45.709 30.2813 li
45.7715 31.3438 li
45.7715 32.4063 li
45.834 33.5313 li
45.834 34.5938 li
45.8965 35.6563 li
45.8965 36.7188 li
45.959 37.7813 li
45.959 39.4063 li
46.0215 40.4688 li
46.0215 41.5938 li
46.084 43.2188 li
46.084 44.2813 li
46.1465 45.3438 li
46.1465 46.4063 li
46.209 48.0313 li
46.209 49.0938 li
46.209 50.2188 li
46.2715 51.7813 li
46.2715 52.9063 li
46.334 53.9688 li
46.334 55.0313 li
46.3965 56.0938 li
46.3965 57.1563 li
46.459 58.2813 li
46.459 59.3438 li
46.5215 60.4063 li
46.5215 61.4688 li
46.584 62.0313 li
46.584 63.0938 li
46.6465 64.1563 li
46.6465 65.2813 li
46.6465 65.7813 li
46.709 66.9063 li
46.709 67.4063 li
46.7715 67.9688 li
46.7715 68.4688 li
46.834 69.5938 li
46.834 70.0938 li
46.8965 70.6563 li
46.8965 71.1563 li
46.959 71.7188 li
46.959 71.7188 li
47.0215 72.2813 li
47.0215 72.7813 li
47.084 73.3438 li
47.084 73.3438 li
47.1465 73.3438 li
47.1465 73.3438 li
47.1465 73.9063 li
47.209 73.9063 li
47.209 73.9063 li
47.2715 73.3438 li
47.2715 73.3438 li
47.334 73.3438 li
47.334 73.3438 li
47.3965 72.7813 li
47.3965 72.2813 li
47.459 72.2813 li
47.459 71.7188 li
47.5215 71.1563 li
47.5215 70.6563 li
47.584 70.0938 li
47.584 69.5938 li
47.584 69.0313 li
47.6465 68.4688 li
47.6465 67.9688 li
47.709 66.9063 li
47.709 66.3438 li
47.7715 65.2813 li
47.7715 64.7188 li
47.834 63.6563 li
47.834 62.5938 li
47.8965 62.0313 li
47.8965 60.9688 li
47.959 59.9063 li
47.959 58.7813 li
48.0215 57.7188 li
48.0215 56.6563 li
48.0215 55.5938 li
48.084 54.4688 li
48.084 53.4063 li
48.1465 52.3438 li
48.1465 51.2813 li
48.209 50.2188 li
48.209 49.0938 li
48.2715 48.0313 li
48.2715 46.9688 li
48.334 45.3438 li
48.334 44.2813 li
48.3965 43.2188 li
48.3965 42.0938 li
48.459 41.0313 li
48.459 39.9688 li
48.5215 38.9063 li
48.5215 37.7813 li
48.5215 36.7188 li
48.584 35.6563 li
48.584 34.5938 li
48.6465 33.5313 li
48.6465 32.4063 li
48.709 31.3438 li
48.709 30.2813 li
48.7715 29.2188 li
48.7715 28.6563 li
48.834 27.5938 li
48.834 26.5313 li
48.8965 25.9688 li
48.8965 24.9063 li
48.959 24.3438 li
48.959 23.7813 li
48.959 22.7188 li
49.0215 22.2188 li
49.0215 21.6563 li
49.084 21.0938 li
49.084 20.5938 li
49.1465 20.0313 li
49.1465 19.5313 li
49.209 19.5313 li
49.209 18.9688 li
49.2715 18.4063 li
49.2715 18.4063 li
49.334 17.9063 li
49.334 17.9063 li
49.3965 17.9063 li
49.3965 17.3438 li
49.459 17.3438 li
49.459 17.3438 li
49.459 17.3438 li
49.5215 17.3438 li
49.5215 17.9063 li
49.584 17.9063 li
49.584 17.9063 li
49.6465 18.4063 li
49.6465 18.4063 li
49.709 18.9688 li
49.709 18.9688 li
49.7715 19.5313 li
49.7715 20.0313 li
49.834 20.5938 li
49.834 21.0938 li
49.8965 21.6563 li
49.8965 22.2188 li
49.8965 22.7188 li
49.959 23.2813 li
49.959 23.7813 li
50.0215 24.9063 li
50.0215 25.4063 li
50.084 26.5313 li
50.084 27.0313 li
50.1465 28.0938 li
50.1465 28.6563 li
50.209 29.7188 li
50.209 30.7813 li
50.2715 31.3438 li
50.2715 32.4063 li
50.334 33.5313 li
50.334 34.5938 li
50.334 35.6563 li
50.3965 36.7188 li
50.3965 37.2813 li
50.459 38.3438 li
50.459 39.4063 li
50.5215 40.4688 li
50.5215 41.5938 li
50.584 42.6563 li
50.584 43.7188 li
50.6465 44.7813 li
50.6465 45.9063 li
50.709 46.9688 li
50.709 48.0313 li
50.7715 49.0938 li
50.7715 50.2188 li
50.834 51.2813 li
50.834 51.7813 li
50.834 52.9063 li
50.8965 53.9688 li
50.8965 55.0313 li
50.959 55.5938 li
50.959 56.6563 li
51.0215 57.7188 li
51.0215 58.2813 li
51.084 59.3438 li
51.084 59.9063 li
51.1465 60.9688 li
51.1465 61.4688 li
51.209 62.0313 li
51.209 63.0938 li
51.2715 63.6563 li
51.2715 64.1563 li
51.2715 64.7188 li
51.334 65.2813 li
51.334 65.7813 li
51.3965 66.3438 li
51.3965 66.9063 li
51.459 66.9063 li
51.459 67.4063 li
51.5215 67.4063 li
51.5215 67.9688 li
51.584 67.9688 li
51.584 68.4688 li
51.6465 68.4688 li
51.6465 68.4688 li
51.709 68.4688 li
51.709 68.4688 li
51.7715 68.4688 li
51.7715 68.4688 li
51.7715 68.4688 li
51.834 67.9688 li
51.834 67.9688 li
51.8965 67.9688 li
51.8965 67.4063 li
51.959 66.9063 li
51.959 66.9063 li
52.0215 66.3438 li
52.0215 65.7813 li
52.084 65.2813 li
52.084 64.7188 li
52.1465 64.1563 li
52.1465 63.6563 li
52.209 63.0938 li
52.209 62.5938 li
52.209 62.0313 li
52.2715 60.9688 li
52.2715 60.4063 li
52.334 59.3438 li
52.334 58.7813 li
52.3965 57.7188 li
52.3965 57.1563 li
52.459 56.0938 li
52.459 55.5938 li
52.5215 54.4688 li
52.5215 53.4063 li
52.584 52.9063 li
52.584 51.7813 li
52.6465 50.7188 li
52.6465 49.6563 li
52.709 48.5938 li
52.709 48.0313 li
52.709 46.9688 li
52.7715 45.9063 li
52.7715 44.7813 li
52.834 43.7188 li
52.834 42.6563 li
52.8965 41.5938 li
52.8965 40.4688 li
52.959 39.9688 li
52.959 38.9063 li
53.0215 37.7813 li
53.0215 36.7188 li
53.084 35.6563 li
53.084 35.0938 li
53.1465 34.0313 li
53.1465 32.9688 li
53.1465 32.4063 li
53.209 31.3438 li
53.209 30.7813 li
53.2715 29.7188 li
53.2715 29.2188 li
53.334 28.0938 li
53.334 27.5938 li
53.3965 27.0313 li
53.3965 25.9688 li
53.459 25.4063 li
53.459 24.9063 li
53.5215 24.3438 li
53.5215 23.7813 li
53.584 23.2813 li
53.584 22.7188 li
53.584 22.2188 li
53.6465 22.2188 li
53.6465 21.6563 li
53.709 21.0938 li
53.709 21.0938 li
53.7715 20.5938 li
53.7715 20.5938 li
53.834 20.0313 li
53.834 20.0313 li
53.8965 20.0313 li
53.8965 20.0313 li
53.959 20.0313 li
53.959 20.0313 li
54.0215 20.0313 li
54.0215 20.0313 li
54.084 20.0313 li
54.084 20.0313 li
54.084 20.5938 li
54.1465 20.5938 li
54.1465 21.0938 li
54.209 21.0938 li
54.209 21.6563 li
54.2715 22.2188 li
54.2715 22.2188 li
54.334 22.7188 li
54.334 23.2813 li
54.3965 23.7813 li
54.3965 24.3438 li
54.459 24.9063 li
54.459 25.4063 li
54.5215 25.9688 li
54.5215 26.5313 li
54.5215 27.0313 li
54.584 28.0938 li
54.584 28.6563 li
54.6465 29.2188 li
54.6465 30.2813 li
54.709 30.7813 li
54.709 31.9063 li
54.7715 32.4063 li
54.7715 33.5313 li
54.834 34.0313 li
54.834 35.0938 li
54.8965 36.2188 li
54.8965 36.7188 li
54.959 37.7813 li
54.959 38.3438 li
55.0215 39.4063 li
55.0215 40.4688 li
55.0215 41.0313 li
55.084 42.0938 li
55.084 43.2188 li
55.1465 44.2813 li
55.1465 44.7813 li
55.209 45.9063 li
55.209 46.9688 li
55.2715 47.4688 li
55.2715 48.5938 li
55.334 49.6563 li
55.334 50.2188 li
55.3965 51.2813 li
55.3965 51.7813 li
55.459 52.9063 li
55.459 53.4063 li
55.459 54.4688 li
55.5215 55.0313 li
55.5215 55.5938 li
55.584 56.6563 li
55.584 57.1563 li
55.6465 57.7188 li
55.6465 58.2813 li
55.709 58.7813 li
55.709 59.3438 li
55.7715 59.9063 li
55.7715 60.4063 li
55.834 60.9688 li
55.834 61.4688 li
55.8965 62.0313 li
55.8965 62.0313 li
55.959 62.5938 li
55.959 63.0938 li
55.959 63.0938 li
56.0215 63.6563 li
56.0215 63.6563 li
56.084 63.6563 li
56.084 64.1563 li
56.1465 64.1563 li
56.1465 64.1563 li
56.209 64.1563 li
56.209 64.1563 li
56.2715 64.1563 li
56.2715 64.1563 li
56.334 64.1563 li
56.334 64.1563 li
56.3965 63.6563 li
56.3965 63.6563 li
56.3965 63.0938 li
56.459 63.0938 li
56.459 62.5938 li
56.5215 62.5938 li
56.5215 62.0313 li
56.584 61.4688 li
56.584 60.9688 li
56.6465 60.4063 li
56.6465 59.9063 li
56.709 59.3438 li
56.709 58.7813 li
56.7715 58.2813 li
56.7715 57.7188 li
56.834 57.1563 li
56.834 56.6563 li
56.834 55.5938 li
56.8965 55.0313 li
56.8965 54.4688 li
56.959 53.4063 li
56.959 52.9063 li
57.0215 51.7813 li
57.0215 51.2813 li
57.084 50.2188 li
57.084 49.6563 li
57.1465 48.5938 li
57.1465 48.0313 li
57.209 46.9688 li
57.209 45.9063 li
57.2715 45.3438 li
57.2715 44.2813 li
57.334 43.7188 li
57.334 42.6563 li
57.334 41.5938 li
57.3965 41.0313 li
57.3965 39.9688 li
57.459 39.4063 li
57.459 38.3438 li
57.5215 37.2813 li
57.5215 36.7188 li
57.584 35.6563 li
57.584 35.0938 li
57.6465 34.0313 li
57.6465 33.5313 li
57.709 32.4063 li
57.709 31.9063 li
57.7715 31.3438 li
57.7715 30.2813 li
57.7715 29.7188 li
57.834 29.2188 li
57.834 28.6563 li
57.8965 28.0938 li
57.8965 27.5938 li
57.959 26.5313 li
57.959 26.5313 li
58.0215 25.9688 li
58.0215 25.4063 li
58.084 24.9063 li
58.084 24.3438 li
58.1465 23.7813 li
58.1465 23.7813 li
58.209 23.2813 li
58.209 23.2813 li
58.2715 22.7188 li
58.2715 22.7188 li
58.2715 22.2188 li
58.334 22.2188 li
58.334 22.2188 li
58.3965 22.2188 li
58.3965 22.2188 li
58.459 22.2188 li
58.459 22.2188 li
58.5215 22.2188 li
58.5215 22.2188 li
58.584 22.2188 li
58.584 22.2188 li
58.6465 22.7188 li
58.6465 22.7188 li
58.709 22.7188 li
58.709 23.2813 li
58.709 23.2813 li
58.7715 23.7813 li
58.7715 24.3438 li
58.834 24.3438 li
58.834 24.9063 li
58.8965 25.4063 li
58.8965 25.9688 li
58.959 26.5313 li
58.959 27.0313 li
59.0215 27.5938 li
59.0215 28.0938 li
59.084 28.6563 li
59.084 29.2188 li
59.1465 29.7188 li
59.1465 30.2813 li
59.1465 30.7813 li
59.209 31.9063 li
59.209 32.4063 li
59.2715 32.9688 li
59.2715 34.0313 li
59.334 34.5938 li
59.334 35.0938 li
59.3965 36.2188 li
59.3965 36.7188 li
59.459 37.7813 li
59.459 38.3438 li
59.5215 39.4063 li
59.5215 39.9688 li
59.584 40.4688 li
59.584 41.5938 li
59.6465 42.0938 li
59.6465 43.2188 li
59.6465 43.7188 li
59.709 44.7813 li
59.709 45.3438 li
59.7715 46.4063 li
59.7715 46.9688 li
59.834 47.4688 li
59.834 48.5938 li
59.8965 49.0938 li
59.8965 49.6563 li
59.959 50.7188 li
59.959 51.2813 li
60.0215 51.7813 li
60.0215 52.3438 li
60.084 53.4063 li
60.084 53.9688 li
60.084 54.4688 li
60.1465 55.0313 li
60.1465 55.5938 li
60.209 56.0938 li
60.209 56.6563 li
60.2715 57.1563 li
60.2715 57.1563 li
60.334 57.7188 li
60.334 58.2813 li
60.3965 58.7813 li
60.3965 58.7813 li
60.459 59.3438 li
60.459 59.3438 li
60.5215 59.9063 li
60.5215 59.9063 li
60.584 59.9063 li
60.584 60.4063 li
60.584 60.4063 li
60.6465 60.4063 li
60.6465 60.4063 li
60.709 60.4063 li
60.709 60.4063 li
60.7715 60.4063 li
60.7715 60.4063 li
60.834 60.4063 li
60.834 60.4063 li
60.8965 60.4063 li
60.8965 59.9063 li
60.959 59.9063 li
60.959 59.3438 li
61.0215 59.3438 li
61.0215 58.7813 li
61.0215 58.7813 li
61.084 58.2813 li
61.084 57.7188 li
61.1465 57.7188 li
61.1465 57.1563 li
61.209 56.6563 li
61.209 56.0938 li
61.2715 55.5938 li
61.2715 55.0313 li
61.334 54.4688 li
61.334 53.9688 li
61.3965 53.4063 li
61.3965 52.9063 li
61.459 52.3438 li
61.459 51.2813 li
61.5215 50.7188 li
61.5215 50.2188 li
61.5215 49.6563 li
61.584 48.5938 li
61.584 48.0313 li
61.6465 46.9688 li
61.6465 46.4063 li
61.709 45.9063 li
61.709 44.7813 li
61.7715 44.2813 li
61.7715 43.2188 li
61.834 42.6563 li
61.834 42.0938 li
61.8965 41.0313 li
61.8965 40.4688 li
61.959 39.4063 li
61.959 38.9063 li
61.959 38.3438 li
62.0215 37.2813 li
62.0215 36.7188 li
62.084 35.6563 li
62.084 35.0938 li
62.1465 34.5938 li
62.1465 34.0313 li
62.209 32.9688 li
62.209 32.4063 li
62.2715 31.9063 li
62.2715 31.3438 li
62.334 30.7813 li
62.334 30.2813 li
62.3965 29.7188 li
62.3965 29.2188 li
62.3965 28.6563 li
62.459 28.0938 li
62.459 27.5938 li
62.5215 27.0313 li
62.5215 26.5313 li
62.584 26.5313 li
62.584 25.9688 li
62.6465 25.4063 li
62.6465 25.4063 li
62.709 24.9063 li
62.709 24.9063 li
62.7715 24.3438 li
62.7715 24.3438 li
62.834 24.3438 li
62.834 24.3438 li
62.8965 23.7813 li
62.8965 23.7813 li
62.8965 23.7813 li
62.959 23.7813 li
62.959 23.7813 li
63.0215 23.7813 li
63.0215 23.7813 li
63.084 23.7813 li
63.084 24.3438 li
63.1465 24.3438 li
63.1465 24.3438 li
63.209 24.9063 li
63.209 24.9063 li
63.2715 24.9063 li
63.2715 25.4063 li
63.334 25.4063 li
63.334 25.9688 li
63.334 26.5313 li
63.3965 26.5313 li
63.3965 27.0313 li
63.459 27.5938 li
63.459 28.0938 li
63.5215 28.6563 li
63.5215 29.2188 li
63.584 29.2188 li
63.584 29.7188 li
63.6465 30.2813 li
63.6465 30.7813 li
63.709 31.3438 li
63.709 32.4063 li
63.7715 32.9688 li
63.7715 33.5313 li
63.834 34.0313 li
63.834 34.5938 li
63.834 35.0938 li
63.8965 36.2188 li
63.8965 36.7188 li
63.959 37.2813 li
63.959 37.7813 li
64.0215 38.3438 li
64.0215 39.4063 li
64.084 39.9688 li
64.084 40.4688 li
64.1465 41.0313 li
64.1465 42.0938 li
64.209 42.6563 li
64.209 43.2188 li
64.2715 44.2813 li
64.2715 44.7813 li
64.2715 45.3438 li
64.334 45.9063 li
64.334 46.4063 li
64.3965 47.4688 li
64.3965 48.0313 li
64.459 48.5938 li
64.459 49.0938 li
64.5215 49.6563 li
64.5215 50.2188 li
64.584 50.7188 li
64.584 51.2813 li
64.6465 51.7813 li
64.6465 52.3438 li
64.709 52.9063 li
64.709 53.4063 li
64.709 53.9688 li
64.7715 53.9688 li
64.7715 54.4688 li
64.834 55.0313 li
64.834 55.5938 li
64.8965 55.5938 li
64.8965 56.0938 li
64.959 56.0938 li
64.959 56.0938 li
65.0215 56.6563 li
65.0215 56.6563 li
65.084 57.1563 li
65.084 57.1563 li
65.1465 57.1563 li
65.1465 57.1563 li
65.209 57.1563 li
65.209 57.7188 li
65.209 57.7188 li
65.2715 57.7188 li
65.2715 57.1563 li
65.334 57.1563 li
65.334 57.1563 li
65.3965 57.1563 li
65.3965 57.1563 li
65.459 56.6563 li
65.459 56.6563 li
65.5215 56.6563 li
65.5215 56.0938 li
65.584 56.0938 li
65.584 55.5938 li
65.6465 55.0313 li
65.6465 55.0313 li
65.6465 54.4688 li
65.709 54.4688 li
65.709 53.9688 li
65.7715 53.4063 li
65.7715 52.9063 li
65.834 52.3438 li
65.834 51.7813 li
65.8965 51.2813 li
65.8965 50.7188 li
65.959 50.2188 li
65.959 49.6563 li
66.0215 49.0938 li
66.0215 48.5938 li
66.084 48.0313 li
66.084 47.4688 li
66.1465 46.9688 li
66.1465 46.4063 li
66.1465 45.3438 li
66.209 44.7813 li
66.209 44.2813 li
66.2715 43.7188 li
66.2715 42.6563 li
66.334 42.0938 li
66.334 41.5938 li
66.3965 41.0313 li
66.3965 39.9688 li
66.459 39.4063 li
66.459 38.9063 li
66.5215 38.3438 li
66.5215 37.7813 li
66.584 36.7188 li
66.584 36.2188 li
66.584 35.6563 li
66.6465 35.0938 li
66.6465 34.5938 li
66.709 34.0313 li
66.709 33.5313 li
66.7715 32.9688 li
66.7715 32.4063 li
66.834 31.9063 li
66.834 31.3438 li
66.8965 30.7813 li
66.8965 30.2813 li
66.959 29.7188 li
66.959 29.2188 li
67.0215 29.2188 li
67.0215 28.6563 li
67.084 28.0938 li
67.084 28.0938 li
67.084 27.5938 li
67.1465 27.0313 li
67.1465 27.0313 li
67.209 26.5313 li
67.209 26.5313 li
67.2715 26.5313 li
67.2715 25.9688 li
67.334 25.9688 li
67.334 25.9688 li
67.3965 25.9688 li
67.3965 25.4063 li
67.459 25.4063 li
67.459 25.4063 li
67.5215 25.4063 li
67.5215 25.4063 li
67.5215 25.4063 li
67.584 25.4063 li
67.584 25.4063 li
67.6465 25.9688 li
67.6465 25.9688 li
67.709 25.9688 li
67.709 26.5313 li
67.7715 26.5313 li
67.7715 26.5313 li
67.834 27.0313 li
67.834 27.0313 li
67.8965 27.5938 li
67.8965 27.5938 li
67.959 28.0938 li
67.959 28.6563 li
67.959 28.6563 li
68.0215 29.2188 li
68.0215 29.7188 li
68.084 30.2813 li
68.084 30.2813 li
68.1465 30.7813 li
68.1465 31.3438 li
68.209 31.9063 li
68.209 32.4063 li
68.2715 32.9688 li
68.2715 33.5313 li
68.334 34.0313 li
68.334 34.5938 li
68.3965 35.0938 li
68.3965 35.6563 li
68.459 36.2188 li
68.459 36.7188 li
68.459 37.2813 li
68.5215 37.7813 li
68.5215 38.3438 li
68.584 38.9063 li
68.584 39.4063 li
68.6465 39.9688 li
68.6465 40.4688 li
68.709 41.5938 li
68.709 42.0938 li
68.7715 42.6563 li
68.7715 43.2188 li
68.834 43.7188 li
68.834 44.2813 li
68.8965 44.7813 li
68.8965 45.3438 li
68.8965 45.9063 li
68.959 46.4063 li
68.959 46.9688 li
69.0215 47.4688 li
69.0215 48.0313 li
69.084 48.5938 li
69.084 49.0938 li
69.1465 49.6563 li
69.1465 49.6563 li
69.209 50.2188 li
69.209 50.7188 li
69.2715 51.2813 li
69.2715 51.2813 li
69.334 51.7813 li
69.334 52.3438 li
69.3965 52.3438 li
69.3965 52.9063 li
69.3965 53.4063 li
69.459 53.4063 li
69.459 53.4063 li
69.5215 53.9688 li
69.5215 53.9688 li
69.584 54.4688 li
69.584 54.4688 li
69.6465 54.4688 li
69.6465 54.4688 li
69.709 54.4688 li
69.709 55.0313 li
69.7715 55.0313 li
69.7715 55.0313 li
69.834 55.0313 li
69.834 55.0313 li
69.834 54.4688 li
69.8965 54.4688 li
69.8965 54.4688 li
69.959 54.4688 li
69.959 54.4688 li
70.0215 53.9688 li
70.0215 53.9688 li
70.084 53.4063 li
70.084 53.4063 li
70.1465 53.4063 li
70.1465 52.9063 li
70.209 52.3438 li
70.209 52.3438 li
70.2715 51.7813 li
70.2715 51.2813 li
70.334 51.2813 li
70.334 50.7188 li
70.334 50.2188 li
70.3965 49.6563 li
70.3965 49.6563 li
70.459 49.0938 li
70.459 48.5938 li
70.5215 48.0313 li
70.5215 47.4688 li
70.584 46.9688 li
70.584 46.4063 li
70.6465 45.9063 li
70.6465 45.3438 li
70.709 44.7813 li
70.709 44.2813 li
70.7715 43.7188 li
70.7715 43.2188 li
70.7715 42.6563 li
70.834 42.0938 li
70.834 41.5938 li
70.8965 40.4688 li
70.8965 39.9688 li
70.959 39.4063 li
70.959 38.9063 li
71.0215 38.3438 li
71.0215 37.7813 li
71.084 37.2813 li
71.084 36.7188 li
71.1465 36.2188 li
71.1465 35.6563 li
71.209 35.0938 li
71.209 34.5938 li
71.209 34.0313 li
71.2715 33.5313 li
71.2715 32.9688 li
71.334 32.9688 li
71.334 32.4063 li
71.3965 31.9063 li
71.3965 31.3438 li
71.459 30.7813 li
71.459 30.7813 li
71.5215 30.2813 li
71.5215 29.7188 li
71.584 29.7188 li
71.584 29.2188 li
71.6465 29.2188 li
71.6465 28.6563 li
71.709 28.6563 li
71.709 28.0938 li
71.709 28.0938 li
71.7715 27.5938 li
71.7715 27.5938 li
71.834 27.5938 li
71.834 27.0313 li
71.8965 27.0313 li
71.8965 27.0313 li
71.959 27.0313 li
71.959 27.0313 li
72.0215 27.0313 li
72.0215 27.0313 li
72.084 27.0313 li
72.084 27.0313 li
72.1465 27.0313 li
72.1465 27.0313 li
72.1465 27.0313 li
72.209 27.0313 li
72.209 27.5938 li
72.2715 27.5938 li
72.2715 27.5938 li
72.334 28.0938 li
72.334 28.0938 li
72.3965 28.0938 li
72.3965 28.6563 li
72.459 28.6563 li
72.459 29.2188 li
72.5215 29.2188 li
72.5215 29.7188 li
72.584 30.2813 li
72.584 30.2813 li
72.6465 30.7813 li
72.6465 31.3438 li
72.6465 31.3438 li
72.709 31.9063 li
72.709 32.4063 li
72.7715 32.9688 li
72.7715 33.5313 li
72.834 33.5313 li
72.834 34.0313 li
72.8965 34.5938 li
72.8965 35.0938 li
72.959 35.6563 li
72.959 36.2188 li
73.0215 36.7188 li
73.0215 37.2813 li
73.084 37.7813 li
73.084 37.7813 li
73.084 38.3438 li
73.1465 38.9063 li
73.1465 39.4063 li
73.209 39.9688 li
73.209 40.4688 li
73.2715 41.0313 li
73.2715 41.5938 li
73.334 42.0938 li
73.334 42.6563 li
73.3965 43.2188 li
73.3965 43.7188 li
73.459 44.2813 li
73.459 44.7813 li
73.5215 44.7813 li
73.5215 45.3438 li
73.5215 45.9063 li
73.584 46.4063 li
73.584 46.9688 li
73.6465 47.4688 li
73.6465 47.4688 li
73.709 48.0313 li
73.709 48.5938 li
73.7715 48.5938 li
73.7715 49.0938 li
73.834 49.6563 li
73.834 49.6563 li
73.8965 50.2188 li
73.8965 50.2188 li
73.959 50.7188 li
73.959 50.7188 li
74.0215 51.2813 li
74.0215 51.2813 li
74.0215 51.7813 li
74.084 51.7813 li
74.084 51.7813 li
74.1465 51.7813 li
74.1465 52.3438 li
74.209 52.3438 li
74.209 52.3438 li
74.2715 52.3438 li
74.2715 52.3438 li
74.334 52.3438 li
74.334 52.3438 li
74.3965 52.3438 li
74.3965 52.3438 li
74.459 52.3438 li
74.459 52.3438 li
74.459 52.3438 li
74.5215 52.3438 li
74.5215 51.7813 li
74.584 51.7813 li
74.584 51.7813 li
74.6465 51.2813 li
74.6465 51.2813 li
74.709 50.7188 li
74.709 50.7188 li
74.7715 50.2188 li
74.7715 50.2188 li
74.834 49.6563 li
74.834 49.6563 li
74.8965 49.0938 li
74.8965 48.5938 li
74.959 48.0313 li
74.959 48.0313 li
74.959 47.4688 li
75.0215 46.9688 li
75.0215 46.4063 li
75.084 46.4063 li
75.084 45.9063 li
75.1465 45.3438 li
75.1465 44.7813 li
75.209 44.2813 li
75.209 43.7188 li
75.2715 43.2188 li
75.2715 42.6563 li
75.334 42.6563 li
75.334 42.0938 li
75.3965 41.5938 li
75.3965 41.0313 li
75.3965 40.4688 li
75.459 39.9688 li
75.459 39.4063 li
75.5215 38.9063 li
75.5215 38.3438 li
75.584 37.7813 li
75.584 37.2813 li
75.6465 36.7188 li
75.6465 36.2188 li
75.709 36.2188 li
75.709 35.6563 li
75.7715 35.0938 li
75.7715 34.5938 li
75.834 34.0313 li
75.834 33.5313 li
75.8965 33.5313 li
75.8965 32.9688 li
75.8965 32.4063 li
75.959 31.9063 li
75.959 31.9063 li
76.0215 31.3438 li
76.0215 31.3438 li
76.084 30.7813 li
76.084 30.2813 li
76.1465 30.2813 li
76.1465 29.7188 li
76.209 29.7188 li
76.209 29.2188 li
76.2715 29.2188 li
76.2715 29.2188 li
76.334 28.6563 li
76.334 28.6563 li
76.334 28.6563 li
76.3965 28.0938 li
76.3965 28.0938 li
76.459 28.0938 li
76.459 28.0938 li
76.5215 28.0938 li
76.5215 28.0938 li
76.584 28.0938 li
76.584 28.0938 li
76.6465 28.0938 li
76.6465 28.0938 li
76.709 28.0938 li
76.709 28.0938 li
76.7715 28.0938 li
76.7715 28.0938 li
76.7715 28.6563 li
76.834 28.6563 li
76.834 28.6563 li
76.8965 29.2188 li
76.8965 29.2188 li
76.959 29.2188 li
76.959 29.7188 li
77.0215 29.7188 li
77.0215 30.2813 li
77.084 30.2813 li
77.084 30.7813 li
77.1465 30.7813 li
77.1465 31.3438 li
77.209 31.3438 li
77.209 31.9063 li
77.2715 32.4063 li
77.2715 32.4063 li
77.2715 32.9688 li
77.334 33.5313 li
77.334 33.5313 li
77.3965 34.0313 li
77.3965 34.5938 li
77.459 35.0938 li
77.459 35.0938 li
77.5215 35.6563 li
77.5215 36.2188 li
77.584 36.7188 li
77.584 37.2813 li
77.6465 37.7813 li
77.6465 37.7813 li
77.709 38.3438 li
77.709 38.9063 li
77.709 39.4063 li
77.7715 39.9688 li
77.7715 39.9688 li
77.834 40.4688 li
77.834 41.0313 li
77.8965 41.5938 li
77.8965 42.0938 li
77.959 42.0938 li
77.959 42.6563 li
78.0215 43.2188 li
78.0215 43.7188 li
78.084 44.2813 li
78.084 44.2813 li
78.1465 44.7813 li
78.1465 45.3438 li
78.209 45.9063 li
78.209 45.9063 li
78.209 46.4063 li
78.2715 46.9688 li
78.2715 46.9688 li
78.334 47.4688 li
78.334 47.4688 li
78.3965 48.0313 li
78.3965 48.0313 li
78.459 48.5938 li
78.459 48.5938 li
78.5215 49.0938 li
78.5215 49.0938 li
78.584 49.6563 li
78.584 49.6563 li
78.6465 49.6563 li
78.6465 50.2188 li
78.6465 50.2188 li
78.709 50.2188 li
78.709 50.2188 li
78.7715 50.2188 li
78.7715 50.7188 li
78.834 50.7188 li
78.834 50.7188 li
78.8965 50.7188 li
78.8965 50.7188 li
78.959 50.7188 li
78.959 50.7188 li
79.0215 50.2188 li
79.0215 50.2188 li
79.084 50.2188 li
79.084 50.2188 li
79.084 50.2188 li
79.1465 49.6563 li
79.1465 49.6563 li
79.209 49.6563 li
79.209 49.0938 li
79.2715 49.0938 li
79.2715 48.5938 li
79.334 48.5938 li
79.334 48.5938 li
79.3965 48.0313 li
79.3965 47.4688 li
79.459 47.4688 li
79.459 46.9688 li
79.5215 46.9688 li
79.5215 46.4063 li
79.584 45.9063 li
79.584 45.9063 li
79.584 45.3438 li
79.6465 44.7813 li
79.6465 44.7813 li
79.709 44.2813 li
79.709 43.7188 li
79.7715 43.2188 li
79.7715 42.6563 li
79.834 42.6563 li
79.834 42.0938 li
79.8965 41.5938 li
79.8965 41.0313 li
79.959 40.4688 li
79.959 39.9688 li
80.0215 39.9688 li
80.0215 39.4063 li
80.0215 38.9063 li
80.084 38.3438 li
80.084 37.7813 li
80.1465 37.2813 li
80.1465 37.2813 li
80.209 36.7188 li
80.209 36.2188 li
80.2715 35.6563 li
80.2715 35.6563 li
80.334 35.0938 li
80.334 34.5938 li
80.3965 34.0313 li
80.3965 34.0313 li
80.459 33.5313 li
80.459 32.9688 li
80.5215 32.9688 li
80.5215 32.4063 li
80.5215 31.9063 li
80.584 31.9063 li
80.584 31.3438 li
80.6465 31.3438 li
80.6465 30.7813 li
80.709 30.7813 li
80.709 30.2813 li
80.7715 30.2813 li
80.7715 30.2813 li
80.834 29.7188 li
80.834 29.7188 li
80.8965 29.7188 li
80.8965 29.2188 li
80.959 29.2188 li
80.959 29.2188 li
80.959 29.2188 li
81.0215 29.2188 li
81.0215 28.6563 li
81.084 28.6563 li
81.084 28.6563 li
81.1465 28.6563 li
81.1465 28.6563 li
81.209 28.6563 li
81.209 28.6563 li
81.2715 28.6563 li
81.2715 29.2188 li
81.334 29.2188 li
81.334 29.2188 li
81.3965 29.2188 li
81.3965 29.2188 li
81.459 29.7188 li
81.459 29.7188 li
81.459 29.7188 li
81.5215 30.2813 li
81.5215 30.2813 li
81.584 30.2813 li
81.584 30.7813 li
81.6465 30.7813 li
81.6465 31.3438 li
81.709 31.3438 li
81.709 31.9063 li
81.7715 31.9063 li
81.7715 32.4063 li
81.834 32.4063 li
81.834 32.9688 li
81.8965 32.9688 li
81.8965 33.5313 li
81.8965 34.0313 li
81.959 34.0313 li
81.959 34.5938 li
82.0215 35.0938 li
82.0215 35.0938 li
82.084 35.6563 li
82.084 36.2188 li
82.1465 36.7188 li
82.1465 36.7188 li
82.209 37.2813 li
82.209 37.7813 li
82.2715 38.3438 li
82.2715 38.3438 li
82.334 38.9063 li
82.334 39.4063 li
82.334 39.9688 li
82.3965 39.9688 li
82.3965 40.4688 li
82.459 41.0313 li
82.459 41.5938 li
82.5215 41.5938 li
82.5215 42.0938 li
82.584 42.6563 li
82.584 42.6563 li
82.6465 43.2188 li
82.6465 43.7188 li
82.709 43.7188 li
82.709 44.2813 li
82.7715 44.7813 li
82.7715 44.7813 li
82.834 45.3438 li
82.834 45.3438 li
82.834 45.9063 li
82.8965 46.4063 li
82.8965 46.4063 li
82.959 46.9688 li
82.959 46.9688 li
83.0215 46.9688 li
83.0215 47.4688 li
83.084 47.4688 li
83.084 48.0313 li
83.1465 48.0313 li
83.1465 48.0313 li
83.209 48.5938 li
83.209 48.5938 li
83.2715 48.5938 li
83.2715 48.5938 li
83.2715 48.5938 li
83.334 49.0938 li
83.334 49.0938 li
83.3965 49.0938 li
83.3965 49.0938 li
83.459 49.0938 li
83.459 49.0938 li
83.5215 49.0938 li
83.5215 49.0938 li
83.584 49.0938 li
83.584 48.5938 li
83.6465 48.5938 li
83.6465 48.5938 li
83.709 48.5938 li
83.709 48.5938 li
83.7715 48.0313 li
83.7715 48.0313 li
83.7715 48.0313 li
83.834 47.4688 li
83.834 47.4688 li
83.8965 46.9688 li
83.8965 46.9688 li
83.959 46.9688 li
83.959 46.4063 li
84.0215 46.4063 li
84.0215 45.9063 li
84.084 45.3438 li
84.084 45.3438 li
84.1465 44.7813 li
84.1465 44.7813 li
84.209 44.2813 li
84.209 43.7188 li
84.209 43.7188 li
84.2715 43.2188 li
84.2715 42.6563 li
84.334 42.6563 li
84.334 42.0938 li
84.3965 41.5938 li
84.3965 41.0313 li
84.459 41.0313 li
84.459 40.4688 li
84.5215 39.9688 li
84.5215 39.9688 li
84.584 39.4063 li
84.584 38.9063 li
84.6465 38.3438 li
84.6465 38.3438 li
84.709 37.7813 li
84.709 37.2813 li
84.709 36.7188 li
84.7715 36.7188 li
84.7715 36.2188 li
84.834 35.6563 li
84.834 35.6563 li
84.8965 35.0938 li
84.8965 34.5938 li
84.959 34.5938 li
84.959 34.0313 li
85.0215 33.5313 li
85.0215 33.5313 li
85.084 32.9688 li
85.084 32.9688 li
85.1465 32.4063 li
85.1465 32.4063 li
85.1465 31.9063 li
85.209 31.9063 li
85.209 31.3438 li
85.2715 31.3438 li
85.2715 30.7813 li
85.334 30.7813 li
85.334 30.7813 li
85.3965 30.2813 li
85.3965 30.2813 li
85.459 30.2813 li
85.459 29.7188 li
85.5215 29.7188 li
85.5215 29.7188 li
85.584 29.7188 li
85.584 29.7188 li
85.584 29.7188 li
85.6465 29.2188 li
85.6465 29.2188 li
85.709 29.2188 li
85.709 29.2188 li
85.7715 29.2188 li
85.7715 29.2188 li
85.834 29.2188 li
85.834 29.7188 li
85.8965 29.7188 li
85.8965 29.7188 li
85.959 29.7188 li
85.959 29.7188 li
86.0215 29.7188 li
86.0215 30.2813 li
86.084 30.2813 li
86.084 30.2813 li
86.084 30.7813 li
86.1465 30.7813 li
86.1465 30.7813 li
86.209 31.3438 li
86.209 31.3438 li
86.2715 31.9063 li
86.2715 31.9063 li
86.334 32.4063 li
86.334 32.4063 li
86.3965 32.9688 li
86.3965 32.9688 li
86.459 33.5313 li
86.459 33.5313 li
86.5215 34.0313 li
86.5215 34.0313 li
86.5215 34.5938 li
86.584 35.0938 li
86.584 35.0938 li
86.6465 35.6563 li
86.6465 36.2188 li
86.709 36.2188 li
86.709 36.7188 li
86.7715 37.2813 li
86.7715 37.2813 li
86.834 37.7813 li
86.834 38.3438 li
86.8965 38.3438 li
86.8965 38.9063 li
86.959 39.4063 li
86.959 39.4063 li
87.0215 39.9688 li
87.0215 40.4688 li
87.0215 40.4688 li
87.084 41.0313 li
87.084 41.5938 li
87.1465 41.5938 li
87.1465 42.0938 li
87.209 42.6563 li
87.209 42.6563 li
87.2715 43.2188 li
87.2715 43.2188 li
87.334 43.7188 li
87.334 44.2813 li
87.3965 44.2813 li
87.3965 44.7813 li
87.459 44.7813 li
87.459 45.3438 li
87.459 45.3438 li
87.5215 45.3438 li
87.5215 45.9063 li
87.584 45.9063 li
87.584 46.4063 li
87.6465 46.4063 li
87.6465 46.4063 li
87.709 46.9688 li
87.709 46.9688 li
87.7715 46.9688 li
87.7715 46.9688 li
87.834 47.4688 li
87.834 47.4688 li
87.8965 47.4688 li
87.8965 47.4688 li
87.8965 47.4688 li
87.959 47.4688 li
87.959 47.4688 li
88.0215 47.4688 li
88.0215 47.4688 li
88.084 47.4688 li
88.084 47.4688 li
88.1465 47.4688 li
88.1465 47.4688 li
88.209 47.4688 li
88.209 47.4688 li
88.2715 47.4688 li
88.2715 46.9688 li
88.334 46.9688 li
88.334 46.9688 li
88.3965 46.9688 li
88.3965 46.4063 li
88.3965 46.4063 li
88.459 46.4063 li
88.459 45.9063 li
88.5215 45.9063 li
88.5215 45.3438 li
88.584 45.3438 li
88.584 44.7813 li
88.6465 44.7813 li
88.6465 44.2813 li
88.709 44.2813 li
88.709 43.7188 li
88.7715 43.7188 li
88.7715 43.2188 li
88.834 42.6563 li
88.834 42.6563 li
88.834 42.0938 li
88.8965 42.0938 li
88.8965 41.5938 li
88.959 41.0313 li
88.959 41.0313 li
89.0215 40.4688 li
89.0215 39.9688 li
89.084 39.9688 li
89.084 39.4063 li
89.1465 38.9063 li
89.1465 38.3438 li
89.209 38.3438 li
89.209 37.7813 li
89.2715 37.7813 li
89.2715 37.2813 li
89.334 36.7188 li
89.334 36.7188 li
89.334 36.2188 li
89.3965 35.6563 li
89.3965 35.6563 li
89.459 35.0938 li
89.459 34.5938 li
89.5215 34.5938 li
89.5215 34.0313 li
89.584 34.0313 li
89.584 33.5313 li
89.6465 33.5313 li
89.6465 32.9688 li
89.709 32.9688 li
89.709 32.4063 li
89.7715 32.4063 li
89.7715 31.9063 li
89.7715 31.9063 li
89.834 31.3438 li
89.834 31.3438 li
89.8965 31.3438 li
89.8965 30.7813 li
89.959 30.7813 li
89.959 30.7813 li
90.0215 30.2813 li
90.0215 30.2813 li
90.084 30.2813 li
90.084 30.2813 li
90.1465 30.2813 li
90.1465 29.7188 li
90.209 29.7188 li
90.209 29.7188 li
90.2715 29.7188 li
90.2715 29.7188 li
90.2715 29.7188 li
90.334 29.7188 li
90.334 29.7188 li
90.3965 29.7188 li
90.3965 29.7188 li
90.459 29.7188 li
90.459 30.2813 li
90.5215 30.2813 li
90.5215 30.2813 li
90.584 30.2813 li
90.584 30.2813 li
90.6465 30.7813 li
90.6465 30.7813 li
90.709 30.7813 li
90.709 30.7813 li
90.709 31.3438 li
90.7715 31.3438 li
90.7715 31.9063 li
90.834 31.9063 li
90.834 31.9063 li
90.8965 32.4063 li
90.8965 32.4063 li
90.959 32.9688 li
90.959 32.9688 li
91.0215 33.5313 li
91.0215 33.5313 li
91.084 34.0313 li
91.084 34.0313 li
91.1465 34.5938 li
91.1465 35.0938 li
91.1465 35.0938 li
91.209 35.6563 li
91.209 35.6563 li
91.2715 36.2188 li
91.2715 36.7188 li
91.334 36.7188 li
91.334 37.2813 li
91.3965 37.2813 li
91.3965 37.7813 li
91.459 37.7813 li
91.459 38.3438 li
91.5215 38.9063 li
91.5215 38.9063 li
91.584 39.4063 li
91.584 39.9688 li
91.6465 39.9688 li
91.6465 40.4688 li
91.6465 40.4688 li
91.709 41.0313 li
91.709 41.5938 li
91.7715 41.5938 li
91.7715 42.0938 li
91.834 42.0938 li
91.834 42.6563 li
91.8965 43.2188 li
91.8965 43.2188 li
91.959 43.7188 li
91.959 43.7188 li
92.0215 43.7188 li
92.0215 44.2813 li
92.084 44.2813 li
92.084 44.7813 li
92.084 44.7813 li
92.1465 45.3438 li
92.1465 45.3438 li
92.209 45.3438 li
92.209 45.9063 li
92.2715 45.9063 li
92.2715 45.9063 li
92.334 45.9063 li
92.334 46.4063 li
92.3965 46.4063 li
92.3965 46.4063 li
92.459 46.4063 li
92.459 46.4063 li
92.5215 46.4063 li
92.5215 46.4063 li
92.584 46.4063 li
92.584 46.4063 li
92.584 46.4063 li
92.6465 46.4063 li
92.6465 46.4063 li
92.709 46.4063 li
92.709 46.4063 li
92.7715 46.4063 li
92.7715 46.4063 li
92.834 46.4063 li
92.834 46.4063 li
92.8965 45.9063 li
92.8965 45.9063 li
92.959 45.9063 li
92.959 45.3438 li
93.0215 45.3438 li
93.0215 45.3438 li
93.0215 44.7813 li
93.084 44.7813 li
93.084 44.7813 li
93.1465 44.2813 li
93.1465 44.2813 li
93.209 43.7188 li
93.209 43.7188 li
93.2715 43.2188 li
93.2715 43.2188 li
93.334 42.6563 li
93.334 42.6563 li
93.3965 42.0938 li
93.3965 42.0938 li
93.459 41.5938 li
93.459 41.5938 li
93.459 41.0313 li
93.5215 40.4688 li
93.5215 40.4688 li
93.584 39.9688 li
93.584 39.4063 li
93.6465 39.4063 li
93.6465 38.9063 li
93.709 38.9063 li
93.709 38.3438 li
93.7715 37.7813 li
93.7715 37.7813 li
93.834 37.2813 li
93.834 36.7188 li
93.8965 36.7188 li
93.8965 36.2188 li
93.959 36.2188 li
93.959 35.6563 li
93.959 35.0938 li
94.0215 35.0938 li
94.0215 34.5938 li
94.084 34.5938 li
94.084 34.0313 li
94.1465 34.0313 li
94.1465 33.5313 li
94.209 33.5313 li
94.209 32.9688 li
94.2715 32.9688 li
94.2715 32.4063 li
94.334 32.4063 li
94.334 31.9063 li
94.3965 31.9063 li
94.3965 31.9063 li
94.3965 31.3438 li
94.459 31.3438 li
94.459 31.3438 li
94.5215 30.7813 li
94.5215 30.7813 li
94.584 30.7813 li
94.584 30.7813 li
94.6465 30.2813 li
94.6465 30.2813 li
94.709 30.2813 li
94.709 30.2813 li
94.7715 30.2813 li
94.7715 30.2813 li
94.834 30.2813 li
94.834 30.2813 li
94.8965 30.2813 li
94.8965 30.2813 li
94.8965 30.2813 li
94.959 30.2813 li
94.959 30.2813 li
95.0215 30.2813 li
95.0215 30.2813 li
95.084 30.2813 li
95.084 30.2813 li
95.1465 30.2813 li
95.1465 30.7813 li
95.209 30.7813 li
95.209 30.7813 li
95.2715 31.3438 li
95.2715 31.3438 li
95.334 31.3438 li
95.334 31.3438 li
95.334 31.9063 li
95.3965 31.9063 li
95.3965 32.4063 li
95.459 32.4063 li
95.459 32.9688 li
95.5215 32.9688 li
95.5215 32.9688 li
95.584 33.5313 li
95.584 33.5313 li
95.6465 34.0313 li
95.6465 34.0313 li
95.709 34.5938 li
95.709 34.5938 li
95.7715 35.0938 li
95.7715 35.6563 li
95.834 35.6563 li
95.834 36.2188 li
95.834 36.2188 li
95.8965 36.7188 li
95.8965 36.7188 li
95.959 37.2813 li
95.959 37.2813 li
96.0215 37.7813 li
96.0215 38.3438 li
96.084 38.3438 li
96.084 38.9063 li
96.1465 38.9063 li
96.1465 39.4063 li
96.209 39.4063 li
96.209 39.9688 li
96.2715 40.4688 li
96.2715 40.4688 li
96.2715 41.0313 li
96.334 41.0313 li
96.334 41.5938 li
96.3965 41.5938 li
96.3965 42.0938 li
96.459 42.0938 li
96.459 42.6563 li
96.5215 42.6563 li
96.5215 43.2188 li
96.584 43.2188 li
96.584 43.7188 li
96.6465 43.7188 li
96.6465 43.7188 li
96.709 44.2813 li
96.709 44.2813 li
96.709 44.2813 li
96.7715 44.7813 li
96.7715 44.7813 li
96.834 44.7813 li
96.834 45.3438 li
96.8965 45.3438 li
96.8965 45.3438 li
96.959 45.3438 li
96.959 45.3438 li
97.0215 45.3438 li
97.0215 45.9063 li
97.084 45.9063 li
97.084 45.9063 li
97.1465 45.9063 li
97.1465 45.9063 li
97.209 45.9063 li
97.209 45.9063 li
97.209 45.9063 li
97.2715 45.9063 li
97.2715 45.9063 li
97.334 45.3438 li
97.334 45.3438 li
97.3965 45.3438 li
97.3965 45.3438 li
97.459 45.3438 li
97.459 45.3438 li
97.5215 44.7813 li
97.5215 44.7813 li
97.584 44.7813 li
97.584 44.2813 li
97.6465 44.2813 li
97.6465 44.2813 li
97.6465 43.7188 li
97.709 43.7188 li
97.709 43.7188 li
97.7715 43.2188 li
97.7715 43.2188 li
97.834 42.6563 li
97.834 42.6563 li
97.8965 42.0938 li
97.8965 42.0938 li
97.959 41.5938 li
97.959 41.5938 li
98.0215 41.0313 li
98.0215 41.0313 li
98.084 40.4688 li
98.084 39.9688 li
98.1465 39.9688 li
98.1465 39.4063 li
98.1465 39.4063 li
98.209 38.9063 li
98.209 38.9063 li
98.2715 38.3438 li
98.2715 37.7813 li
98.334 37.7813 li
98.334 37.2813 li
98.3965 37.2813 li
98.3965 36.7188 li
98.459 36.2188 li
98.459 36.2188 li
98.5215 35.6563 li
98.5215 35.6563 li
98.584 35.0938 li
98.584 35.0938 li
98.584 34.5938 li
98.6465 34.5938 li
98.6465 34.0313 li
98.709 34.0313 li
98.709 33.5313 li
98.7715 33.5313 li
98.7715 32.9688 li
98.834 32.9688 li
98.834 32.4063 li
98.8965 32.4063 li
98.8965 31.9063 li
98.959 31.9063 li
98.959 31.9063 li
99.0215 31.3438 li
99.0215 31.3438 li
99.0215 31.3438 li
99.084 31.3438 li
99.084 30.7813 li
99.1465 30.7813 li
99.1465 30.7813 li
99.209 30.7813 li
99.209 30.7813 li
99.2715 30.2813 li
99.2715 30.2813 li
99.334 30.2813 li
99.334 30.2813 li
99.3965 30.2813 li
99.3965 30.2813 li
99.459 30.2813 li
99.459 30.2813 li
99.5215 30.2813 li
99.5215 30.2813 li
99.5215 30.2813 li
99.584 30.2813 li
99.584 30.2813 li
99.6465 30.7813 li
99.6465 30.7813 li
99.709 30.7813 li
99.709 30.7813 li
99.7715 30.7813 li
99.7715 31.3438 li
99.834 31.3438 li
99.834 31.3438 li
99.8965 31.3438 li
99.8965 31.9063 li
99.959 31.9063 li
99.959 31.9063 li
99.959 32.4063 li
100.021 32.4063 li
100.021 32.9688 li
100.084 32.9688 li
100.084 33.5313 li
100.146 33.5313 li
100.146 33.5313 li
100.209 34.0313 li
100.209 34.0313 li
100.271 34.5938 li
100.271 34.5938 li
100.334 35.0938 li
100.334 35.0938 li
100.396 35.6563 li
100.396 35.6563 li
100.459 36.2188 li
100.459 36.2188 li
100.459 36.7188 li
100.521 36.7188 li
100.521 37.2813 li
100.584 37.7813 li
100.584 37.7813 li
100.646 38.3438 li
100.646 38.3438 li
100.709 38.9063 li
100.709 38.9063 li
100.771 39.4063 li
100.771 39.9688 li
100.834 39.9688 li
100.834 39.9688 li
100.896 40.4688 li
100.896 40.4688 li
100.896 41.0313 li
100.959 41.0313 li
100.959 41.5938 li
101.021 41.5938 li
101.021 42.0938 li
101.084 42.0938 li
101.084 42.6563 li
101.146 42.6563 li
101.146 42.6563 li
101.209 43.2188 li
101.209 43.2188 li
101.271 43.7188 li
101.271 43.7188 li
101.334 43.7188 li
101.334 44.2813 li
101.396 44.2813 li
101.396 44.2813 li
101.396 44.2813 li
101.459 44.7813 li
101.459 44.7813 li
101.521 44.7813 li
101.521 44.7813 li
101.584 44.7813 li
101.584 44.7813 li
101.646 44.7813 li
101.646 44.7813 li
101.709 44.7813 li
101.709 44.7813 li
101.771 44.7813 li
101.771 45.3438 li
101.834 44.7813 li
101.834 44.7813 li
101.834 44.7813 li
101.896 44.7813 li
101.896 44.7813 li
101.959 44.7813 li
101.959 44.7813 li
102.021 44.2813 li
102.021 44.2813 li
102.084 44.2813 li
102.084 44.2813 li
102.146 43.7188 li
102.146 43.7188 li
102.209 43.7188 li
102.209 43.2188 li
102.271 43.2188 li
102.271 43.2188 li
102.271 42.6563 li
102.334 42.6563 li
102.334 42.0938 li
102.396 42.0938 li
102.396 42.0938 li
102.459 41.5938 li
102.459 41.5938 li
102.521 41.0313 li
102.521 41.0313 li
102.584 40.4688 li
102.584 40.4688 li
102.646 39.9688 li
102.646 39.9688 li
102.709 39.4063 li
102.709 38.9063 li
102.771 38.9063 li
102.771 38.3438 li
102.771 38.3438 li
102.834 37.7813 li
102.834 37.7813 li
102.896 37.2813 li
102.896 37.2813 li
102.959 36.7188 li
102.959 36.7188 li
103.021 36.2188 li
103.021 35.6563 li
103.084 35.6563 li
103.084 35.0938 li
103.146 35.0938 li
103.146 34.5938 li
103.209 34.5938 li
103.209 34.0313 li
103.209 34.0313 li
103.271 33.5313 li
103.271 33.5313 li
103.334 32.9688 li
103.334 32.9688 li
103.396 32.9688 li
103.396 32.4063 li
103.459 32.4063 li
103.459 31.9063 li
103.521 31.9063 li
103.521 31.9063 li
103.584 31.3438 li
103.584 31.3438 li
103.646 31.3438 li
103.646 31.3438 li
103.709 30.7813 li
103.709 30.7813 li
103.709 30.7813 li
103.771 30.7813 li
103.771 30.7813 li
103.834 30.7813 li
103.834 30.2813 li
103.896 30.2813 li
103.896 30.2813 li
103.959 30.2813 li
103.959 30.2813 li
104.021 30.2813 li
104.021 30.2813 li
104.084 30.2813 li
104.084 30.2813 li
104.146 30.2813 li
104.146 30.2813 li
104.146 30.7813 li
104.209 30.7813 li
104.209 30.7813 li
104.271 30.7813 li
104.271 30.7813 li
104.334 31.3438 li
104.334 31.3438 li
104.396 31.3438 li
104.396 31.3438 li
104.459 31.9063 li
104.459 31.9063 li
104.521 31.9063 li
104.521 32.4063 li
104.584 32.4063 li
104.584 32.9688 li
104.646 32.9688 li
104.646 32.9688 li
104.646 33.5313 li
104.709 33.5313 li
104.709 33.5313 li
104.771 34.0313 li
104.771 34.0313 li
104.834 34.5938 li
104.834 34.5938 li
104.896 35.0938 li
104.896 35.0938 li
104.959 35.6563 li
104.959 35.6563 li
105.021 36.2188 li
105.021 36.2188 li
105.084 36.7188 li
105.084 36.7188 li
105.084 37.2813 li
105.146 37.2813 li
105.146 37.7813 li
105.209 37.7813 li
105.209 38.3438 li
105.271 38.3438 li
105.271 38.9063 li
105.334 38.9063 li
105.334 39.4063 li
105.396 39.4063 li
105.396 39.9688 li
105.459 39.9688 li
105.459 40.4688 li
105.521 40.4688 li
105.521 41.0313 li
105.521 41.0313 li
105.584 41.5938 li
105.584 41.5938 li
105.646 41.5938 li
105.646 42.0938 li
105.709 42.0938 li
105.709 42.0938 li
105.771 42.6563 li
105.771 42.6563 li
105.834 43.2188 li
105.834 43.2188 li
105.896 43.2188 li
105.896 43.2188 li
105.959 43.7188 li
105.959 43.7188 li
106.021 43.7188 li
106.021 43.7188 li
106.021 43.7188 li
106.084 44.2813 li
106.084 44.2813 li
106.146 44.2813 li
106.146 44.2813 li
106.209 44.2813 li
106.209 44.2813 li
106.271 44.2813 li
106.271 44.2813 li
106.334 44.2813 li
106.334 44.2813 li
106.396 44.2813 li
106.396 44.2813 li
106.459 44.2813 li
106.459 44.2813 li
106.459 44.2813 li
106.521 43.7188 li
106.521 43.7188 li
106.584 43.7188 li
106.584 43.7188 li
106.646 43.7188 li
106.646 43.2188 li
106.709 43.2188 li
106.709 43.2188 li
106.771 42.6563 li
106.771 42.6563 li
106.834 42.6563 li
106.834 42.0938 li
106.896 42.0938 li
106.896 42.0938 li
106.959 41.5938 li
106.959 41.5938 li
106.959 41.0313 li
107.021 41.0313 li
107.021 40.4688 li
107.084 40.4688 li
107.084 40.4688 li
107.146 39.9688 li
107.146 39.9688 li
107.209 39.4063 li
107.209 39.4063 li
107.271 38.9063 li
107.271 38.3438 li
107.334 38.3438 li
107.334 37.7813 li
107.396 37.7813 li
107.396 37.2813 li
107.396 37.2813 li
107.459 36.7188 li
107.459 36.7188 li
107.521 36.2188 li
107.521 36.2188 li
107.584 35.6563 li
107.584 35.6563 li
107.646 35.0938 li
107.646 35.0938 li
107.709 34.5938 li
107.709 34.5938 li
107.771 34.0313 li
107.771 34.0313 li
107.834 34.0313 li
107.834 33.5313 li
107.834 33.5313 li
107.896 32.9688 li
107.896 32.9688 li
107.959 32.4063 li
107.959 32.4063 li
108.021 32.4063 li
108.021 31.9063 li
108.084 31.9063 li
108.084 31.9063 li
108.146 31.3438 li
108.146 31.3438 li
108.209 31.3438 li
108.209 31.3438 li
108.271 31.3438 li
108.271 30.7813 li
108.334 30.7813 li
108.334 30.7813 li
108.334 30.7813 li
108.396 30.7813 li
108.396 30.7813 li
108.459 30.7813 li
108.459 30.7813 li
108.521 30.7813 li
108.521 30.7813 li
108.584 30.7813 li
108.584 30.7813 li
108.646 30.7813 li
108.646 30.7813 li
108.709 30.7813 li
108.709 30.7813 li
108.771 30.7813 li
108.771 30.7813 li
108.771 30.7813 li
108.834 31.3438 li
108.834 31.3438 li
108.896 31.3438 li
108.896 31.3438 li
108.959 31.3438 li
108.959 31.9063 li
109.021 31.9063 li
109.021 31.9063 li
109.084 32.4063 li
109.084 32.4063 li
109.146 32.4063 li
109.146 32.9688 li
109.209 32.9688 li
109.209 32.9688 li
109.271 33.5313 li
109.271 33.5313 li
109.271 34.0313 li
109.334 34.0313 li
109.334 34.5938 li
109.396 34.5938 li
109.396 34.5938 li
109.459 35.0938 li
109.459 35.0938 li
109.521 35.6563 li
109.521 35.6563 li
109.584 36.2188 li
109.584 36.2188 li
109.646 36.7188 li
109.646 36.7188 li
109.709 37.2813 li
109.709 37.2813 li
109.709 37.7813 li
109.771 37.7813 li
109.771 38.3438 li
109.834 38.3438 li
109.834 38.9063 li
109.896 38.9063 li
109.896 39.4063 li
109.959 39.4063 li
109.959 39.4063 li
110.021 39.9688 li
110.021 39.9688 li
110.084 40.4688 li
110.084 40.4688 li
110.146 40.4688 li
110.146 41.0313 li
110.209 41.0313 li
110.209 41.5938 li
110.209 41.5938 li
110.271 41.5938 li
110.271 42.0938 li
110.334 42.0938 li
110.334 42.0938 li
110.396 42.6563 li
110.396 42.6563 li
110.459 42.6563 li
110.459 42.6563 li
110.521 42.6563 li
110.521 43.2188 li
110.584 43.2188 li
110.584 43.2188 li
110.646 43.2188 li
110.646 43.2188 li
110.646 43.2188 li
110.709 43.7188 li
110.709 43.7188 li
110.771 43.7188 li
110.771 43.7188 li
110.834 43.7188 li
110.834 43.7188 li
110.896 43.7188 li
110.896 43.7188 li
110.959 43.7188 li
110.959 43.7188 li
111.021 43.7188 li
111.021 43.2188 li
111.084 43.2188 li
111.084 43.2188 li
111.084 43.2188 li
111.146 43.2188 li
111.146 42.6563 li
111.209 42.6563 li
111.209 42.6563 li
111.271 42.6563 li
111.271 42.0938 li
111.334 42.0938 li
111.334 42.0938 li
111.396 41.5938 li
111.396 41.5938 li
111.459 41.5938 li
111.459 41.0313 li
111.521 41.0313 li
111.521 41.0313 li
111.584 40.4688 li
111.584 40.4688 li
111.584 39.9688 li
111.646 39.9688 li
111.646 39.4063 li
111.709 39.4063 li
111.709 39.4063 li
111.771 38.9063 li
111.771 38.9063 li
111.834 38.3438 li
111.834 38.3438 li
111.896 37.7813 li
111.896 37.7813 li
111.959 37.2813 li
111.959 37.2813 li
112.021 36.7188 li
112.021 36.7188 li
112.021 36.2188 li
112.084 36.2188 li
112.084 35.6563 li
112.146 35.6563 li
112.146 35.0938 li
112.209 35.0938 li
112.209 34.5938 li
112.271 34.5938 li
112.271 34.5938 li
112.334 34.0313 li
112.334 34.0313 li
112.396 33.5313 li
112.396 33.5313 li
112.459 33.5313 li
112.459 32.9688 li
112.521 32.9688 li
112.521 32.4063 li
112.521 32.4063 li
112.584 32.4063 li
112.584 31.9063 li
112.646 31.9063 li
112.646 31.9063 li
112.709 31.9063 li
112.709 31.3438 li
112.771 31.3438 li
112.771 31.3438 li
112.834 31.3438 li
112.834 31.3438 li
112.896 31.3438 li
112.896 30.7813 li
112.959 30.7813 li
112.959 30.7813 li
112.959 30.7813 li
113.021 30.7813 li
113.021 30.7813 li
113.084 30.7813 li
113.084 30.7813 li
113.146 30.7813 li
113.146 30.7813 li
113.209 30.7813 li
113.209 30.7813 li
113.271 30.7813 li
113.271 30.7813 li
113.334 31.3438 li
113.334 31.3438 li
113.396 31.3438 li
113.396 31.3438 li
113.396 31.3438 li
113.459 31.9063 li
113.459 31.9063 li
113.521 31.9063 li
113.521 31.9063 li
113.584 31.9063 li
113.584 32.4063 li
113.646 32.4063 li
113.646 32.4063 li
113.709 32.9688 li
113.709 32.9688 li
113.771 32.9688 li
113.771 33.5313 li
113.834 33.5313 li
113.834 34.0313 li
113.896 34.0313 li
113.896 34.0313 li
113.896 34.5938 li
113.959 34.5938 li
113.959 35.0938 li
114.021 35.0938 li
114.021 35.0938 li
114.084 35.6563 li
114.084 35.6563 li
114.146 36.2188 li
114.146 36.2188 li
114.209 36.7188 li
114.209 36.7188 li
114.271 37.2813 li
114.271 37.2813 li
114.334 37.2813 li
114.334 37.7813 li
114.334 37.7813 li
114.396 38.3438 li
114.396 38.3438 li
114.459 38.9063 li
114.459 38.9063 li
114.521 38.9063 li
114.521 39.4063 li
114.584 39.4063 li
114.584 39.9688 li
114.646 39.9688 li
114.646 39.9688 li
114.709 40.4688 li
114.709 40.4688 li
114.771 40.4688 li
114.771 41.0313 li
114.834 41.0313 li
114.834 41.0313 li
114.834 41.5938 li
114.896 41.5938 li
114.896 41.5938 li
114.959 41.5938 li
114.959 42.0938 li
115.021 42.0938 li
115.021 42.0938 li
115.084 42.0938 li
115.084 42.6563 li
115.146 42.6563 li
115.146 42.6563 li
115.209 42.6563 li
115.209 42.6563 li
115.271 42.6563 li
115.271 42.6563 li
115.271 42.6563 li
115.334 42.6563 li
115.334 42.6563 li
115.396 42.6563 li
115.396 42.6563 li
115.459 42.6563 li
115.459 42.6563 li
115.521 42.6563 li
115.521 42.6563 li
115.584 42.6563 li
115.584 42.6563 li
115.646 42.6563 li
115.646 42.6563 li
115.709 42.0938 li
115.709 42.0938 li
115.771 42.0938 li
115.771 42.0938 li
115.771 42.0938 li
115.834 41.5938 li
115.834 41.5938 li
115.896 41.5938 li
115.896 41.0313 li
115.959 41.0313 li
115.959 41.0313 li
116.021 41.0313 li
116.021 40.4688 li
116.084 40.4688 li
116.084 39.9688 li
116.146 39.9688 li
116.146 39.9688 li
116.209 39.4063 li
116.209 39.4063 li
116.209 38.9063 li
116.271 38.9063 li
116.271 38.3438 li
116.334 38.3438 li
116.334 38.3438 li
116.396 37.7813 li
116.396 37.7813 li
116.459 37.2813 li
116.459 37.2813 li
116.521 36.7188 li
116.521 36.7188 li
116.584 36.7188 li
116.584 36.2188 li
116.646 36.2188 li
116.646 35.6563 li
116.646 35.6563 li
116.709 35.0938 li
116.709 35.0938 li
116.771 34.5938 li
116.771 34.5938 li
116.834 34.5938 li
116.834 34.0313 li
116.896 34.0313 li
116.896 33.5313 li
116.959 33.5313 li
116.959 33.5313 li
117.021 32.9688 li
117.021 32.9688 li
117.084 32.9688 li
117.084 32.4063 li
117.146 32.4063 li
117.146 32.4063 li
117.146 32.4063 li
117.209 31.9063 li
117.209 31.9063 li
117.271 31.9063 li
117.271 31.9063 li
117.334 31.3438 li
117.334 31.3438 li
117.396 31.3438 li
117.396 31.3438 li
117.459 31.3438 li
117.459 31.3438 li
117.521 31.3438 li
117.521 31.3438 li
117.584 31.3438 li
117.584 31.3438 li
117.584 31.3438 li
117.646 31.3438 li
117.646 30.7813 li
117.709 31.3438 li
117.709 31.3438 li
117.771 31.3438 li
117.771 31.3438 li
117.834 31.3438 li
117.834 31.3438 li
117.896 31.3438 li
117.896 31.3438 li
117.959 31.3438 li
117.959 31.9063 li
118.021 31.9063 li
118.021 31.9063 li
118.084 31.9063 li
118.084 31.9063 li
118.084 32.4063 li
118.146 32.4063 li
118.146 32.4063 li
118.209 32.9688 li
118.209 32.9688 li
118.271 32.9688 li
118.271 32.9688 li
118.334 33.5313 li
118.334 33.5313 li
118.396 34.0313 li
118.396 34.0313 li
118.459 34.0313 li
118.459 34.5938 li
118.521 34.5938 li
118.521 34.5938 li
118.521 35.0938 li
118.584 35.0938 li
118.584 35.6563 li
118.646 35.6563 li
118.646 35.6563 li
118.709 36.2188 li
118.709 36.2188 li
118.771 36.7188 li
118.771 36.7188 li
118.834 37.2813 li
118.834 37.2813 li
118.896 37.2813 li
118.896 37.7813 li
118.959 37.7813 li
118.959 37.7813 li
119.021 38.3438 li
119.021 38.3438 li
119.021 38.9063 li
119.084 38.9063 li
119.084 38.9063 li
119.146 39.4063 li
119.146 39.4063 li
119.209 39.4063 li
119.209 39.9688 li
119.271 39.9688 li
119.271 39.9688 li
119.334 40.4688 li
119.334 40.4688 li
119.396 40.4688 li
119.396 41.0313 li
119.459 41.0313 li
119.459 41.0313 li
119.459 41.0313 li
119.521 41.5938 li
119.521 41.5938 li
119.584 41.5938 li
119.584 41.5938 li
119.646 41.5938 li
119.646 41.5938 li
119.709 42.0938 li
119.709 42.0938 li
119.771 42.0938 li
119.771 42.0938 li
119.834 42.0938 li
119.834 42.0938 li
119.896 42.0938 li
119.896 42.0938 li
119.896 42.0938 li
119.959 42.0938 li
119.959 42.0938 li
120.021 42.0938 li
120.021 42.0938 li
120.084 42.0938 li
120.084 42.0938 li
120.146 42.0938 li
120.146 42.0938 li
120.209 41.5938 li
120.209 41.5938 li
120.271 41.5938 li
120.271 41.5938 li
120.334 41.5938 li
120.334 41.5938 li
120.396 41.0313 li
120.396 41.0313 li
120.396 41.0313 li
120.459 40.4688 li
120.459 40.4688 li
120.521 40.4688 li
120.521 40.4688 li
120.584 39.9688 li
120.584 39.9688 li
120.646 39.9688 li
120.646 39.4063 li
120.709 39.4063 li
120.709 39.4063 li
120.771 38.9063 li
120.771 38.9063 li
120.834 38.3438 li
120.834 38.3438 li
120.834 38.3438 li
120.896 37.7813 li
120.896 37.7813 li
120.959 37.2813 li
120.959 37.2813 li
121.021 37.2813 li
121.021 36.7188 li
121.084 36.7188 li
121.084 36.2188 li
121.146 36.2188 li
121.146 36.2188 li
121.209 35.6563 li
121.209 35.6563 li
121.271 35.0938 li
121.271 35.0938 li
121.334 35.0938 li
121.334 34.5938 li
121.334 34.5938 li
121.396 34.0313 li
121.396 34.0313 li
121.459 34.0313 li
121.459 33.5313 li
121.521 33.5313 li
121.521 33.5313 li
121.584 32.9688 li
121.584 32.9688 li
121.646 32.9688 li
121.646 32.9688 li
121.709 32.4063 li
121.709 32.4063 li
121.771 32.4063 li
121.771 32.4063 li
121.771 31.9063 li
121.834 31.9063 li
121.834 31.9063 li
121.896 31.9063 li
121.896 31.9063 li
121.959 31.3438 li
121.959 31.3438 li
122.021 31.3438 li
122.021 31.3438 li
122.084 31.3438 li
122.084 31.3438 li
122.146 31.3438 li
122.146 31.3438 li
122.209 31.3438 li
122.209 31.3438 li
122.209 31.3438 li
122.271 31.3438 li
122.271 31.3438 li
122.334 31.3438 li
122.334 31.3438 li
122.396 31.3438 li
122.396 31.3438 li
122.459 31.9063 li
122.459 31.9063 li
122.521 31.9063 li
122.521 31.9063 li
122.584 31.9063 li
122.584 32.4063 li
122.646 32.4063 li
122.646 32.4063 li
122.709 32.4063 li
122.709 32.9688 li
122.709 32.9688 li
122.771 32.9688 li
122.771 32.9688 li
122.834 33.5313 li
122.834 33.5313 li
122.896 33.5313 li
122.896 34.0313 li
122.959 34.0313 li
122.959 34.0313 li
123.021 34.5938 li
123.021 34.5938 li
123.084 34.5938 li
123.084 35.0938 li
123.146 35.0938 li
123.146 35.0938 li
123.146 35.6563 li
123.209 35.6563 li
123.209 35.6563 li
123.271 36.2188 li
123.271 36.2188 li
123.334 36.2188 li
123.334 36.7188 li
123.396 36.7188 li
123.396 37.2813 li
123.459 37.2813 li
123.459 37.2813 li
123.521 37.7813 li
123.521 37.7813 li
123.584 37.7813 li
123.584 38.3438 li
123.646 38.3438 li
123.646 38.9063 li
123.646 38.9063 li
123.709 38.9063 li
123.709 38.9063 li
123.771 39.4063 li
123.771 39.4063 li
123.834 39.4063 li
123.834 39.9688 li
123.896 39.9688 li
123.896 39.9688 li
123.959 39.9688 li
123.959 40.4688 li
124.021 40.4688 li
124.021 40.4688 li
124.084 40.4688 li
124.084 40.4688 li
124.084 41.0313 li
124.146 41.0313 li
124.146 41.0313 li
124.209 41.0313 li
124.209 41.0313 li
124.271 41.0313 li
124.271 41.0313 li
124.334 41.5938 li
124.334 41.5938 li
124.396 41.5938 li
124.396 41.5938 li
124.459 41.5938 li
124.459 41.5938 li
124.521 41.5938 li
124.521 41.5938 li
124.584 41.5938 li
124.584 41.5938 li
124.584 41.5938 li
124.646 41.0313 li
124.646 41.0313 li
124.709 41.0313 li
124.709 41.0313 li
124.771 41.0313 li
124.771 41.0313 li
124.834 41.0313 li
124.834 41.0313 li
124.896 40.4688 li
124.896 40.4688 li
124.959 40.4688 li
124.959 40.4688 li
125.021 39.9688 li
125.021 39.9688 li
125.021 39.9688 li
125.084 39.9688 li
125.084 39.4063 li
125.146 39.4063 li
125.146 39.4063 li
125.209 38.9063 li
125.209 38.9063 li
125.271 38.9063 li
125.271 38.3438 li
125.334 38.3438 li
125.334 38.3438 li
125.396 37.7813 li
125.396 37.7813 li
125.459 37.7813 li
125.459 37.2813 li
125.459 37.2813 li
125.521 37.2813 li
125.521 36.7188 li
125.584 36.7188 li
125.584 36.7188 li
125.646 36.2188 li
125.646 36.2188 li
125.709 35.6563 li
125.709 35.6563 li
125.771 35.6563 li
125.771 35.0938 li
125.834 35.0938 li
125.834 35.0938 li
125.896 34.5938 li
125.896 34.5938 li
125.959 34.5938 li
125.959 34.0313 li
125.959 34.0313 li
126.021 34.0313 li
126.021 33.5313 li
126.084 33.5313 li
126.084 33.5313 li
126.146 32.9688 li
126.146 32.9688 li
126.209 32.9688 li
126.209 32.9688 li
126.271 32.4063 li
126.271 32.4063 li
126.334 32.4063 li
126.334 32.4063 li
126.396 32.4063 li
126.396 31.9063 li
126.396 31.9063 li
126.459 31.9063 li
126.459 31.9063 li
126.521 31.9063 li
126.521 31.9063 li
126.584 31.9063 li
126.584 31.9063 li
126.646 31.9063 li
126.646 31.9063 li
126.709 31.9063 li
126.709 31.9063 li
126.771 31.9063 li
126.771 31.9063 li
126.834 31.9063 li
126.834 31.9063 li
126.896 31.9063 li
126.896 31.9063 li
126.896 31.9063 li
126.959 31.9063 li
126.959 31.9063 li
127.021 31.9063 li
127.021 31.9063 li
127.084 32.4063 li
127.084 32.4063 li
127.146 32.4063 li
127.146 32.4063 li
127.209 32.4063 li
127.209 32.4063 li
127.271 32.9688 li
127.271 32.9688 li
127.334 32.9688 li
127.334 32.9688 li
127.334 33.5313 li
127.396 33.5313 li
127.396 33.5313 li
127.459 34.0313 li
127.459 34.0313 li
127.521 34.0313 li
127.521 34.0313 li
127.584 34.5938 li
127.584 34.5938 li
127.646 34.5938 li
127.646 35.0938 li
127.709 35.0938 li
127.709 35.0938 li
127.771 35.6563 li
127.771 35.6563 li
127.771 35.6563 li
127.834 36.2188 li
127.834 36.2188 li
127.896 36.2188 li
127.896 36.7188 li
127.959 36.7188 li
127.959 36.7188 li
128.021 37.2813 li
128.021 37.2813 li
128.084 37.2813 li
128.084 37.7813 li
128.146 37.7813 li
128.146 37.7813 li
128.209 37.7813 li
128.209 38.3438 li
128.271 38.3438 li
128.271 38.3438 li
128.271 38.9063 li
128.334 38.9063 li
128.334 38.9063 li
128.396 38.9063 li
128.396 39.4063 li
128.459 39.4063 li
128.459 39.4063 li
128.521 39.4063 li
128.521 39.9688 li
128.584 39.9688 li
128.584 39.9688 li
128.646 39.9688 li
128.646 39.9688 li
128.709 39.9688 li
128.709 40.4688 li
128.709 40.4688 li
128.771 40.4688 li
128.771 40.4688 li
128.834 40.4688 li
128.834 40.4688 li
128.896 40.4688 li
128.896 40.4688 li
128.959 40.4688 li
128.959 40.4688 li
129.021 40.4688 li
129.021 40.4688 li
129.084 40.4688 li
129.084 40.4688 li
129.146 40.4688 li
129.146 40.4688 li
129.209 40.4688 li
129.209 40.4688 li
129.209 40.4688 li
129.271 40.4688 li
129.271 40.4688 li
129.334 40.4688 li
129.334 40.4688 li
129.396 39.9688 li
129.396 39.9688 li
129.459 39.9688 li
129.459 39.9688 li
129.521 39.9688 li
129.521 39.9688 li
129.584 39.4063 li
129.584 39.4063 li
129.646 39.4063 li
129.646 39.4063 li
129.646 38.9063 li
129.709 38.9063 li
129.709 38.9063 li
129.771 38.9063 li
129.771 38.3438 li
129.834 38.3438 li
129.834 38.3438 li
129.896 37.7813 li
129.896 37.7813 li
129.959 37.7813 li
129.959 37.2813 li
130.021 37.2813 li
130.021 37.2813 li
130.084 36.7188 li
130.084 36.7188 li
130.146 36.7188 li
130.146 36.2188 li
130.146 36.2188 li
130.209 36.2188 li
130.209 35.6563 li
130.271 35.6563 li
130.271 35.6563 li
130.334 35.0938 li
130.334 35.0938 li
130.396 35.0938 li
130.396 34.5938 li
130.459 34.5938 li
130.459 34.5938 li
130.521 34.5938 li
130.521 34.0313 li
130.584 34.0313 li
130.584 34.0313 li
130.584 33.5313 li
130.646 33.5313 li
130.646 33.5313 li
130.709 33.5313 li
130.709 32.9688 li
130.771 32.9688 li
130.771 32.9688 li
130.834 32.9688 li
130.834 32.9688 li
130.896 32.9688 li
130.896 32.4063 li
130.959 32.4063 li
130.959 32.4063 li
131.021 32.4063 li
131.021 32.4063 li
131.021 32.4063 li
131.084 32.4063 li
131.084 32.4063 li
131.146 31.9063 li
131.146 31.9063 li
131.209 31.9063 li
131.209 31.9063 li
131.271 31.9063 li
131.271 31.9063 li
131.334 31.9063 li
131.334 31.9063 li
131.396 31.9063 li
131.396 31.9063 li
131.459 31.9063 li
131.459 31.9063 li
131.521 31.9063 li
131.521 32.4063 li
131.521 32.4063 li
131.584 32.4063 li
131.584 32.4063 li
131.646 32.4063 li
131.646 32.4063 li
131.709 32.4063 li
131.709 32.9688 li
131.771 32.9688 li
131.771 32.9688 li
131.834 32.9688 li
131.834 32.9688 li
131.896 33.5313 li
131.896 33.5313 li
131.959 33.5313 li
131.959 33.5313 li
131.959 33.5313 li
132.021 34.0313 li
132.021 34.0313 li
132.084 34.0313 li
132.084 34.0313 li
132.146 34.5938 li
132.146 34.5938 li
132.209 34.5938 li
132.209 35.0938 li
132.271 35.0938 li
132.271 35.0938 li
132.334 35.6563 li
132.334 35.6563 li
132.396 35.6563 li
132.396 35.6563 li
132.459 36.2188 li
132.459 36.2188 li
132.459 36.2188 li
132.521 36.2188 li
132.521 36.7188 li
132.584 36.7188 li
132.584 36.7188 li
132.646 37.2813 li
132.646 37.2813 li
132.709 37.2813 li
132.709 37.2813 li
132.771 37.7813 li
132.771 37.7813 li
132.834 37.7813 li
132.834 38.3438 li
132.896 38.3438 li
132.896 38.3438 li
132.896 38.3438 li
132.959 38.3438 li
132.959 38.9063 li
133.021 38.9063 li
133.021 38.9063 li
133.084 38.9063 li
133.084 38.9063 li
133.146 39.4063 li
133.146 39.4063 li
133.209 39.4063 li
133.209 39.4063 li
133.271 39.4063 li
133.271 39.4063 li
133.334 39.4063 li
133.334 39.9688 li
133.396 39.9688 li
133.396 39.9688 li
133.396 39.9688 li
133.459 39.9688 li
133.459 39.9688 li
133.521 39.9688 li
133.521 39.9688 li
133.584 39.9688 li
133.584 39.9688 li
133.646 39.9688 li
133.646 39.9688 li
133.709 39.9688 li
133.709 39.9688 li
133.771 39.9688 li
133.771 39.9688 li
133.834 39.9688 li
133.834 39.9688 li
133.834 39.9688 li
133.896 39.9688 li
133.896 39.4063 li
133.959 39.4063 li
133.959 39.4063 li
134.021 39.4063 li
134.021 39.4063 li
134.084 39.4063 li
134.084 38.9063 li
134.146 38.9063 li
134.146 38.9063 li
134.209 38.9063 li
134.209 38.9063 li
134.271 38.3438 li
134.271 38.3438 li
134.271 38.3438 li
134.334 38.3438 li
134.334 37.7813 li
134.396 37.7813 li
134.396 37.7813 li
134.459 37.7813 li
134.459 37.2813 li
134.521 37.2813 li
134.521 37.2813 li
134.584 37.2813 li
134.584 36.7188 li
134.646 36.7188 li
134.646 36.7188 li
134.709 36.2188 li
134.709 36.2188 li
134.771 36.2188 li
134.771 36.2188 li
134.771 35.6563 li
134.834 35.6563 li
134.834 35.6563 li
134.896 35.0938 li
134.896 35.0938 li
134.959 35.0938 li
134.959 35.0938 li
135.021 34.5938 li
135.021 34.5938 li
135.084 34.5938 li
135.084 34.0313 li
135.146 34.0313 li
135.146 34.0313 li
135.209 34.0313 li
135.209 33.5313 li
135.209 33.5313 li
135.271 33.5313 li
135.271 33.5313 li
135.334 33.5313 li
135.334 32.9688 li
135.396 32.9688 li
135.396 32.9688 li
135.459 32.9688 li
135.459 32.9688 li
135.521 32.9688 li
135.521 32.4063 li
135.584 32.4063 li
135.584 32.4063 li
135.646 32.4063 li
135.646 32.4063 li
135.709 32.4063 li
135.709 32.4063 li
135.709 32.4063 li
135.771 32.4063 li
135.771 32.4063 li
135.834 32.4063 li
135.834 32.4063 li
135.896 32.4063 li
135.896 32.4063 li
135.959 32.4063 li
135.959 32.4063 li
136.021 32.4063 li
136.021 32.4063 li
136.084 32.4063 li
136.084 32.4063 li
136.146 32.4063 li
136.146 32.4063 li
136.146 32.4063 li
136.209 32.9688 li
136.209 32.9688 li
136.271 32.9688 li
136.271 32.9688 li
136.334 32.9688 li
136.334 32.9688 li
136.396 32.9688 li
136.396 33.5313 li
136.459 33.5313 li
136.459 33.5313 li
136.521 33.5313 li
136.521 33.5313 li
136.584 34.0313 li
136.584 34.0313 li
136.584 34.0313 li
136.646 34.0313 li
136.646 34.5938 li
136.709 34.5938 li
136.709 34.5938 li
136.771 34.5938 li
136.771 35.0938 li
136.834 35.0938 li
136.834 35.0938 li
136.896 35.0938 li
136.896 35.6563 li
136.959 35.6563 li
136.959 35.6563 li
137.021 35.6563 li
137.021 35.6563 li
137.084 36.2188 li
137.084 36.2188 li
137.084 36.2188 li
137.146 36.7188 li
137.146 36.7188 li
137.209 36.7188 li
137.209 36.7188 li
137.271 37.2813 li
137.271 37.2813 li
137.334 37.2813 li
137.334 37.2813 li
137.396 37.2813 li
137.396 37.7813 li
137.459 37.7813 li
137.459 37.7813 li
137.521 37.7813 li
137.521 38.3438 li
137.521 38.3438 li
137.584 38.3438 li
137.584 38.3438 li
137.646 38.3438 li
137.646 38.3438 li
137.709 38.9063 li
137.709 38.9063 li
137.771 38.9063 li
137.771 38.9063 li
137.834 38.9063 li
137.834 38.9063 li
137.896 38.9063 li
137.896 38.9063 li
137.959 39.4063 li
137.959 39.4063 li
138.021 39.4063 li
138.021 39.4063 li
138.021 39.4063 li
138.084 39.4063 li
138.084 39.4063 li
138.146 39.4063 li
138.146 39.4063 li
138.209 39.4063 li
138.209 39.4063 li
138.271 39.4063 li
138.271 39.4063 li
138.334 39.4063 li
138.334 39.4063 li
138.396 39.4063 li
138.396 39.4063 li
138.459 39.4063 li
138.459 39.4063 li
138.459 38.9063 li
138.521 38.9063 li
138.521 38.9063 li
138.584 38.9063 li
138.584 38.9063 li
138.646 38.9063 li
138.646 38.9063 li
138.709 38.3438 li
138.709 38.3438 li
138.771 38.3438 li
138.771 38.3438 li
138.834 38.3438 li
138.834 37.7813 li
138.896 37.7813 li
138.896 37.7813 li
138.959 37.7813 li
138.959 37.7813 li
138.959 37.2813 li
139.021 37.2813 li
139.021 37.2813 li
139.084 37.2813 li
139.084 36.7188 li
139.146 36.7188 li
139.146 36.7188 li
139.209 36.7188 li
139.209 36.2188 li
139.271 36.2188 li
139.271 36.2188 li
139.334 36.2188 li
139.334 35.6563 li
139.396 35.6563 li
139.396 35.6563 li
139.396 35.6563 li
139.459 35.0938 li
139.459 35.0938 li
139.521 35.0938 li
139.521 35.0938 li
139.584 34.5938 li
139.584 34.5938 li
139.646 34.5938 li
139.646 34.5938 li
139.709 34.5938 li
139.709 34.0313 li
139.771 34.0313 li
139.771 34.0313 li
139.834 34.0313 li
139.834 33.5313 li
139.834 33.5313 li
139.896 33.5313 li
139.896 33.5313 li
139.959 33.5313 li
139.959 33.5313 li
140.021 32.9688 li
140.021 32.9688 li
140.084 32.9688 li
140.084 32.9688 li
140.146 32.9688 li
140.146 32.9688 li
140.209 32.9688 li
140.209 32.9688 li
140.271 32.9688 li
140.271 32.9688 li
140.334 32.4063 li
140.334 32.4063 li
140.334 32.4063 li
140.396 32.4063 li
140.396 32.4063 li
140.459 32.4063 li
140.459 32.4063 li
140.521 32.4063 li
140.521 32.4063 li
140.584 32.4063 li
140.584 32.4063 li
140.646 32.4063 li
140.646 32.9688 li
140.709 32.9688 li
140.709 32.9688 li
140.771 32.9688 li
140.771 32.9688 li
140.771 32.9688 li
140.834 32.9688 li
140.834 32.9688 li
140.896 32.9688 li
140.896 32.9688 li
140.959 32.9688 li
140.959 33.5313 li
141.021 33.5313 li
141.021 33.5313 li
141.084 33.5313 li
141.084 33.5313 li
141.146 34.0313 li
141.146 34.0313 li
141.209 34.0313 li
141.209 34.0313 li
141.271 34.0313 li
141.271 34.5938 li
141.271 34.5938 li
141.334 34.5938 li
141.334 34.5938 li
141.396 34.5938 li
141.396 35.0938 li
141.459 35.0938 li
141.459 35.0938 li
141.521 35.0938 li
141.521 35.6563 li
141.584 35.6563 li
141.584 35.6563 li
141.646 35.6563 li
141.646 35.6563 li
141.709 36.2188 li
141.709 36.2188 li
141.709 36.2188 li
141.771 36.2188 li
141.771 36.7188 li
141.834 36.7188 li
141.834 36.7188 li
141.896 36.7188 li
141.896 36.7188 li
141.959 37.2813 li
141.959 37.2813 li
142.021 37.2813 li
142.021 37.2813 li
142.084 37.2813 li
142.084 37.7813 li
142.146 37.7813 li
142.146 37.7813 li
142.146 37.7813 li
142.209 37.7813 li
142.209 37.7813 li
142.271 38.3438 li
142.271 38.3438 li
142.334 38.3438 li
142.334 38.3438 li
142.396 38.3438 li
142.396 38.3438 li
142.459 38.3438 li
142.459 38.3438 li
142.521 38.3438 li
142.521 38.9063 li
142.584 38.9063 li
142.584 38.9063 li
142.646 38.9063 li
142.646 38.9063 li
142.646 38.9063 li
142.709 38.9063 li
142.709 38.9063 li
142.771 38.9063 li
142.771 38.9063 li
142.834 38.9063 li
142.834 38.9063 li
142.896 38.9063 li
142.896 38.9063 li
142.959 38.9063 li
142.959 38.9063 li
143.021 38.9063 li
143.021 38.9063 li
143.084 38.9063 li
143.084 38.3438 li
143.084 38.3438 li
143.146 38.3438 li
143.146 38.3438 li
143.209 38.3438 li
143.209 38.3438 li
143.271 38.3438 li
143.271 38.3438 li
143.334 37.7813 li
143.334 37.7813 li
143.396 37.7813 li
143.396 37.7813 li
143.459 37.7813 li
143.459 37.7813 li
143.521 37.2813 li
143.521 37.2813 li
143.584 37.2813 li
143.584 37.2813 li
143.584 37.2813 li
143.646 36.7188 li
143.646 36.7188 li
143.709 36.7188 li
143.709 36.7188 li
143.771 36.7188 li
143.771 36.2188 li
143.834 36.2188 li
143.834 36.2188 li
143.896 36.2188 li
143.896 35.6563 li
143.959 35.6563 li
143.959 35.6563 li
144.021 35.6563 li
144.021 35.0938 li
144.021 35.0938 li
144.084 35.0938 li
144.084 35.0938 li
144.146 34.5938 li
144.146 34.5938 li
144.209 34.5938 li
144.209 34.5938 li
144.271 34.5938 li
144.271 34.5938 li
144.334 34.0313 li
144.334 34.0313 li
144.396 34.0313 li
144.396 34.0313 li
144.459 34.0313 li
144.459 33.5313 li
144.521 33.5313 li
144.521 33.5313 li
144.521 33.5313 li
144.584 33.5313 li
144.584 33.5313 li
144.646 33.5313 li
144.646 32.9688 li
144.709 32.9688 li
144.709 32.9688 li
144.771 32.9688 li
144.771 32.9688 li
144.834 32.9688 li
144.834 32.9688 li
144.896 32.9688 li
144.896 32.9688 li
144.959 32.9688 li
144.959 32.9688 li
144.959 32.9688 li
145.021 32.9688 li
145.021 32.9688 li
145.084 32.9688 li
145.084 32.9688 li
145.146 32.9688 li
145.146 32.9688 li
145.209 32.9688 li
145.209 32.9688 li
145.271 32.9688 li
145.271 32.9688 li
145.334 32.9688 li
145.334 32.9688 li
145.396 32.9688 li
145.396 32.9688 li
145.396 32.9688 li
145.459 32.9688 li
145.459 33.5313 li
145.521 33.5313 li
145.521 33.5313 li
145.584 33.5313 li
145.584 33.5313 li
145.646 33.5313 li
145.646 33.5313 li
145.709 33.5313 li
145.709 34.0313 li
145.771 34.0313 li
145.771 34.0313 li
145.834 34.0313 li
145.834 34.0313 li
145.896 34.0313 li
145.896 34.5938 li
145.896 34.5938 li
145.959 34.5938 li
145.959 34.5938 li
146.021 34.5938 li
146.021 35.0938 li
146.084 35.0938 li
146.084 35.0938 li
146.146 35.0938 li
146.146 35.0938 li
146.209 35.6563 li
146.209 35.6563 li
146.271 35.6563 li
146.271 35.6563 li
146.334 35.6563 li
146.334 36.2188 li
146.334 36.2188 li
146.396 36.2188 li
146.396 36.2188 li
146.459 36.2188 li
146.459 36.7188 li
146.521 36.7188 li
146.521 36.7188 li
146.584 36.7188 li
146.584 36.7188 li
146.646 36.7188 li
146.646 37.2813 li
146.709 37.2813 li
146.709 37.2813 li
146.771 37.2813 li
146.771 37.2813 li
146.834 37.2813 li
146.834 37.7813 li
146.834 37.7813 li
146.896 37.7813 li
146.896 37.7813 li
146.959 37.7813 li
146.959 37.7813 li
147.021 37.7813 li
147.021 37.7813 li
147.084 38.3438 li
147.084 38.3438 li
147.146 38.3438 li
147.146 38.3438 li
147.209 38.3438 li
147.209 38.3438 li
147.271 38.3438 li
147.271 38.3438 li
147.271 38.3438 li
147.334 38.3438 li
147.334 38.3438 li
147.396 38.3438 li
147.396 38.3438 li
147.459 38.3438 li
147.459 38.3438 li
147.521 38.3438 li
147.521 38.3438 li
147.584 38.3438 li
147.584 38.3438 li
147.646 38.3438 li
147.646 38.3438 li
147.709 38.3438 li
147.709 38.3438 li
147.771 38.3438 li
147.771 37.7813 li
147.771 37.7813 li
147.834 37.7813 li
147.834 37.7813 li
147.896 37.7813 li
147.896 37.7813 li
147.959 37.7813 li
147.959 37.7813 li
148.021 37.2813 li
148.021 37.2813 li
148.084 37.2813 li
148.084 37.2813 li
148.146 37.2813 li
148.146 37.2813 li
148.209 36.7188 li
148.209 36.7188 li
148.209 36.7188 li
148.271 36.7188 li
148.271 36.7188 li
148.334 36.2188 li
148.334 36.2188 li
148.396 36.2188 li
148.396 36.2188 li
148.459 36.2188 li
148.459 35.6563 li
148.521 35.6563 li
148.521 35.6563 li
148.584 35.6563 li
148.584 35.6563 li
148.646 35.0938 li
148.646 35.0938 li
148.646 35.0938 li
148.709 35.0938 li
148.709 35.0938 li
148.771 34.5938 li
148.771 34.5938 li
148.834 34.5938 li
148.834 34.5938 li
148.896 34.5938 li
148.896 34.0313 li
148.959 34.0313 li
148.959 34.0313 li
149.021 34.0313 li
149.021 34.0313 li
149.084 34.0313 li
149.084 33.5313 li
149.146 33.5313 li
149.146 33.5313 li
149.146 33.5313 li
149.209 33.5313 li
149.209 33.5313 li
149.271 33.5313 li
149.271 33.5313 li
149.334 32.9688 li
149.334 32.9688 li
149.396 32.9688 li
149.396 32.9688 li
149.459 32.9688 li
149.459 32.9688 li
149.521 32.9688 li
149.521 32.9688 li
149.584 32.9688 li
149.584 32.9688 li
149.584 32.9688 li
149.646 32.9688 li
149.646 32.9688 li
149.709 32.9688 li
149.709 32.9688 li
149.771 32.9688 li
149.771 32.9688 li
149.834 32.9688 li
149.834 32.9688 li
149.896 32.9688 li
149.896 32.9688 li
149.959 32.9688 li
149.959 32.9688 li
150.021 32.9688 li
150.021 32.9688 li
150.084 32.9688 li
150.084 32.9688 li
150.084 33.5313 li
150.146 33.5313 li
150.146 33.5313 li
150.209 33.5313 li
150.209 33.5313 li
150.271 33.5313 li
150.271 33.5313 li
150.334 33.5313 li
150.334 34.0313 li
150.396 34.0313 li
150.396 34.0313 li
150.459 34.0313 li
150.459 34.0313 li
150.521 34.0313 li
150.521 34.5938 li
150.521 34.5938 li
150.584 34.5938 li
150.584 34.5938 li
150.646 34.5938 li
150.646 34.5938 li
150.709 35.0938 li
150.709 35.0938 li
150.771 35.0938 li
150.771 35.0938 li
150.834 35.0938 li
150.834 35.6563 li
150.896 35.6563 li
150.896 35.6563 li
150.959 35.6563 li
150.959 35.6563 li
150.959 35.6563 li
151.021 36.2188 li
151.021 36.2188 li
151.084 36.2188 li
151.084 36.2188 li
151.146 36.2188 li
151.146 36.7188 li
151.209 36.7188 li
151.209 36.7188 li
151.271 36.7188 li
151.271 36.7188 li
151.334 36.7188 li
151.334 36.7188 li
151.396 37.2813 li
151.396 37.2813 li
151.459 37.2813 li
151.459 37.2813 li
151.459 37.2813 li
151.521 37.2813 li
151.521 37.2813 li
151.584 37.2813 li
151.584 37.7813 li
151.646 37.7813 li
151.646 37.7813 li
151.709 37.7813 li
151.709 37.7813 li
151.771 37.7813 li
151.771 37.7813 li
151.834 37.7813 li
151.834 37.7813 li
151.896 37.7813 li
151.896 37.7813 li
151.896 37.7813 li
151.959 37.7813 li
151.959 37.7813 li
152.021 37.7813 li
152.021 37.7813 li
152.084 37.7813 li
152.084 37.7813 li
152.146 37.7813 li
152.146 37.7813 li
152.209 37.7813 li
152.209 37.7813 li
152.271 37.7813 li
152.271 37.7813 li
152.334 37.7813 li
152.334 37.7813 li
152.396 37.7813 li
152.396 37.7813 li
152.396 37.7813 li
152.459 37.7813 li
152.459 37.7813 li
152.521 37.2813 li
152.521 37.2813 li
152.584 37.2813 li
152.584 37.2813 li
152.646 37.2813 li
152.646 37.2813 li
152.709 36.7188 li
152.709 36.7188 li
152.771 36.7188 li
152.771 36.7188 li
152.834 36.7188 li
152.834 36.7188 li
152.834 36.7188 li
152.896 36.2188 li
152.896 36.2188 li
152.959 36.2188 li
152.959 36.2188 li
153.021 36.2188 li
153.021 35.6563 li
153.084 35.6563 li
153.084 35.6563 li
153.146 35.6563 li
153.146 35.6563 li
153.209 35.0938 li
153.209 35.0938 li
153.271 35.0938 li
153.271 35.0938 li
153.334 35.0938 li
153.334 35.0938 li
153.334 34.5938 li
153.396 34.5938 li
153.396 34.5938 li
153.459 34.5938 li
153.459 34.5938 li
153.521 34.5938 li
153.521 34.0313 li
153.584 34.0313 li
153.584 34.0313 li
153.646 34.0313 li
153.646 34.0313 li
153.709 34.0313 li
153.709 33.5313 li
153.771 33.5313 li
153.771 33.5313 li
153.771 33.5313 li
153.834 33.5313 li
153.834 33.5313 li
153.896 33.5313 li
153.896 33.5313 li
153.959 33.5313 li
153.959 32.9688 li
154.021 32.9688 li
154.021 32.9688 li
154.084 32.9688 li
154.084 32.9688 li
154.146 32.9688 li
154.146 32.9688 li
154.209 32.9688 li
154.209 32.9688 li
154.209 32.9688 li
154.271 32.9688 li
154.271 32.9688 li
154.334 32.9688 li
154.334 32.9688 li
154.396 32.9688 li
154.396 32.9688 li
154.459 32.9688 li
154.459 32.9688 li
154.521 32.9688 li
154.521 32.9688 li
154.584 32.9688 li
154.584 32.9688 li
154.646 32.9688 li
154.646 32.9688 li
154.709 33.5313 li
154.709 33.5313 li
154.709 33.5313 li
154.771 33.5313 li
154.771 33.5313 li
154.834 33.5313 li
154.834 33.5313 li
154.896 33.5313 li
154.896 33.5313 li
154.959 33.5313 li
154.959 34.0313 li
155.021 34.0313 li
155.021 34.0313 li
155.084 34.0313 li
155.084 34.0313 li
155.146 34.0313 li
155.146 34.0313 li
155.146 34.5938 li
155.209 34.5938 li
155.209 34.5938 li
155.271 34.5938 li
155.271 34.5938 li
155.334 34.5938 li
155.334 35.0938 li
155.396 35.0938 li
155.396 35.0938 li
155.459 35.0938 li
155.459 35.0938 li
155.521 35.0938 li
155.521 35.6563 li
155.584 35.6563 li
155.584 35.6563 li
155.646 35.6563 li
155.646 35.6563 li
155.646 35.6563 li
155.709 36.2188 li
155.709 36.2188 li
155.771 36.2188 li
155.771 36.2188 li
155.834 36.2188 li
155.834 36.2188 li
155.896 36.7188 li
155.896 36.7188 li
155.959 36.7188 li
155.959 36.7188 li
156.021 36.7188 li
156.021 36.7188 li
156.084 36.7188 li
156.084 37.2813 li
156.084 37.2813 li
156.146 37.2813 li
156.146 37.2813 li
156.209 37.2813 li
156.209 37.2813 li
156.271 37.2813 li
156.271 37.2813 li
156.334 37.2813 li
156.334 37.2813 li
156.396 37.2813 li
156.396 37.7813 li
156.459 37.7813 li
156.459 37.7813 li
156.521 37.7813 li
156.521 37.7813 li
156.521 37.7813 li
156.584 37.7813 li
156.584 37.7813 li
156.646 37.7813 li
156.646 37.7813 li
156.709 37.7813 li
156.709 37.7813 li
156.771 37.7813 li
156.771 37.7813 li
156.834 37.7813 li
156.834 37.7813 li
156.896 37.7813 li
156.896 37.7813 li
156.959 37.7813 li
156.959 37.7813 li
157.021 37.2813 li
157.021 37.2813 li
157.021 37.2813 li
157.084 37.2813 li
157.084 37.2813 li
157.146 37.2813 li
157.146 37.2813 li
157.209 37.2813 li
157.209 37.2813 li
157.271 36.7188 li
157.271 36.7188 li
157.334 36.7188 li
157.334 36.7188 li
157.396 36.7188 li
157.396 36.7188 li
157.459 36.7188 li
157.459 36.2188 li
157.459 36.2188 li
157.521 36.2188 li
157.521 36.2188 li
157.584 36.2188 li
157.584 36.2188 li
157.646 35.6563 li
157.646 35.6563 li
157.709 35.6563 li
157.709 35.6563 li
157.771 35.6563 li
157.771 35.6563 li
157.834 35.0938 li
157.834 35.0938 li
157.896 35.0938 li
157.896 35.0938 li
157.959 35.0938 li
157.959 35.0938 li
157.959 34.5938 li
158.021 34.5938 li
158.021 34.5938 li
158.084 34.5938 li
158.084 34.5938 li
158.146 34.5938 li
158.146 34.0313 li
158.209 34.0313 li
158.209 34.0313 li
158.271 34.0313 li
158.271 34.0313 li
158.334 34.0313 li
158.334 34.0313 li
158.396 33.5313 li
158.396 33.5313 li
158.396 33.5313 li
158.459 33.5313 li
158.459 33.5313 li
158.521 33.5313 li
158.521 33.5313 li
158.584 33.5313 li
158.584 32.9688 li
158.646 32.9688 li
158.646 32.9688 li
158.709 32.9688 li
158.709 32.9688 li
158.771 32.9688 li
158.771 32.9688 li
158.834 32.9688 li
158.834 32.9688 li
158.896 32.9688 li
158.896 32.9688 li
158.896 32.9688 li
158.959 32.9688 li
158.959 32.9688 li
159.021 32.9688 li
159.021 32.9688 li
159.084 32.9688 li
159.084 32.9688 li
159.146 32.9688 li
159.146 32.9688 li
159.209 32.9688 li
159.209 32.9688 li
159.271 32.9688 li
159.271 32.9688 li
159.334 32.9688 li
159.334 33.5313 li
159.334 33.5313 li
159.396 33.5313 li
159.396 33.5313 li
159.459 33.5313 li
159.459 33.5313 li
159.521 33.5313 li
159.521 33.5313 li
159.584 33.5313 li
159.584 33.5313 li
159.646 34.0313 li
159.646 34.0313 li
159.709 34.0313 li
159.709 34.0313 li
159.771 34.0313 li
159.771 34.0313 li
159.771 34.0313 li
159.834 34.5938 li
159.834 34.5938 li
159.896 34.5938 li
159.896 34.5938 li
159.959 34.5938 li
159.959 34.5938 li
160.021 35.0938 li
160.021 35.0938 li
160.084 35.0938 li
160.084 35.0938 li
160.146 35.0938 li
160.146 35.0938 li
160.209 35.0938 li
160.209 35.6563 li
160.271 35.6563 li
160.271 35.6563 li
160.271 35.6563 li
160.334 35.6563 li
160.334 35.6563 li
160.396 36.2188 li
160.396 36.2188 li
160.459 36.2188 li
160.459 36.2188 li
160.521 36.2188 li
160.521 36.2188 li
160.584 36.7188 li
160.584 36.7188 li
160.646 36.7188 li
160.646 36.7188 li
160.709 36.7188 li
160.709 36.7188 li
160.709 36.7188 li
160.771 37.2813 li
160.771 37.2813 li
160.834 37.2813 li
160.834 37.2813 li
160.896 37.2813 li
160.896 37.2813 li
160.959 37.2813 li
160.959 37.2813 li
161.021 37.2813 li
161.021 37.2813 li
161.084 37.2813 li
161.084 37.2813 li
161.146 37.2813 li
161.146 37.2813 li
161.209 37.2813 li
161.209 37.2813 li
161.209 37.2813 li
161.271 37.2813 li
161.271 37.2813 li
161.334 37.2813 li
161.334 37.2813 li
161.396 37.2813 li
161.396 37.2813 li
161.459 37.2813 li
161.459 37.2813 li
161.521 37.2813 li
161.521 37.2813 li
161.584 37.2813 li
161.584 37.2813 li
161.646 37.2813 li
161.646 37.2813 li
161.646 37.2813 li
161.709 37.2813 li
161.709 37.2813 li
161.771 37.2813 li
161.771 36.7188 li
161.834 36.7188 li
161.834 36.7188 li
161.896 36.7188 li
161.896 36.7188 li
161.959 36.7188 li
161.959 36.7188 li
162.021 36.7188 li
162.021 36.2188 li
162.084 36.2188 li
162.084 36.2188 li
162.084 36.2188 li
162.146 36.2188 li
162.146 36.2188 li
162.209 35.6563 li
162.209 35.6563 li
162.271 35.6563 li
162.271 35.6563 li
162.334 35.6563 li
162.334 35.0938 li
162.396 35.0938 li
162.396 35.0938 li
162.459 35.0938 li
162.459 35.0938 li
162.521 35.0938 li
162.521 35.0938 li
162.584 34.5938 li
162.584 34.5938 li
162.584 34.5938 li
162.646 34.5938 li
162.646 34.5938 li
162.709 34.0313 li
162.709 34.0313 li
162.771 34.0313 li
162.771 34.0313 li
162.834 34.0313 li
162.834 34.0313 li
162.896 34.0313 li
162.896 34.0313 li
162.959 33.5313 li
162.959 33.5313 li
163.021 33.5313 li
163.021 33.5313 li
163.021 33.5313 li
163.084 33.5313 li
163.084 33.5313 li
163.146 32.9688 li
163.146 32.9688 li
163.209 32.9688 li
163.209 32.9688 li
163.271 32.9688 li
163.271 32.9688 li
163.334 32.9688 li
163.334 32.9688 li
163.396 32.9688 li
163.396 32.9688 li
163.459 32.9688 li
163.459 32.9688 li
163.521 32.9688 li
163.521 32.9688 li
163.521 32.9688 li
163.584 32.9688 li
163.584 32.9688 li
163.646 32.9688 li
163.646 32.9688 li
163.709 32.9688 li
163.709 32.9688 li
163.771 32.9688 li
163.771 32.9688 li
163.834 32.9688 li
163.834 32.9688 li
163.896 32.9688 li
163.896 32.9688 li
163.959 32.9688 li
163.959 32.9688 li
163.959 32.9688 li
164.021 32.9688 li
164.021 33.5313 li
164.084 33.5313 li
164.084 33.5313 li
164.146 33.5313 li
164.146 33.5313 li
164.209 33.5313 li
164.209 33.5313 li
164.271 33.5313 li
164.271 33.5313 li
164.334 34.0313 li
164.334 34.0313 li
164.396 34.0313 li
164.396 34.0313 li
164.459 34.0313 li
164.459 34.0313 li
164.459 34.5938 li
164.521 34.5938 li
164.521 34.5938 li
164.584 34.5938 li
164.584 34.5938 li
164.646 34.5938 li
164.646 34.5938 li
164.709 35.0938 li
164.709 35.0938 li
164.771 35.0938 li
164.771 35.0938 li
164.834 35.0938 li
164.834 35.0938 li
164.896 35.6563 li
164.896 35.6563 li
164.896 35.6563 li
164.959 35.6563 li
164.959 35.6563 li
165.021 35.6563 li
165.021 36.2188 li
165.084 36.2188 li
165.084 36.2188 li
165.146 36.2188 li
165.146 36.2188 li
165.209 36.2188 li
165.209 36.2188 li
165.271 36.7188 li
165.271 36.7188 li
165.334 36.7188 li
165.334 36.7188 li
165.334 36.7188 li
165.396 36.7188 li
165.396 36.7188 li
165.459 36.7188 li
165.459 36.7188 li
165.521 37.2813 li
165.521 37.2813 li
165.584 37.2813 li
165.584 37.2813 li
165.646 37.2813 li
165.646 37.2813 li
165.709 37.2813 li
165.709 37.2813 li
165.771 37.2813 li
165.771 37.2813 li
165.834 37.2813 li
165.834 37.2813 li
165.834 37.2813 li
165.896 37.2813 li
165.896 37.2813 li
165.959 37.2813 li
165.959 37.2813 li
166.021 37.2813 li
166.021 37.2813 li
166.084 37.2813 li
166.084 37.2813 li
166.146 37.2813 li
166.146 37.2813 li
166.209 37.2813 li
166.209 37.2813 li
166.271 37.2813 li
166.271 36.7188 li
166.271 36.7188 li
166.334 36.7188 li
166.334 36.7188 li
166.396 36.7188 li
166.396 36.7188 li
166.459 36.7188 li
166.459 36.7188 li
166.521 36.7188 li
166.521 36.7188 li
166.584 36.2188 li
166.584 36.2188 li
166.646 36.2188 li
166.646 36.2188 li
166.709 36.2188 li
166.709 36.2188 li
166.771 36.2188 li
166.771 35.6563 li
166.771 35.6563 li
166.834 35.6563 li
166.834 35.6563 li
166.896 35.6563 li
166.896 35.0938 li
166.959 35.0938 li
166.959 35.0938 li
167.021 35.0938 li
167.021 35.0938 li
167.084 35.0938 li
167.084 34.5938 li
167.146 34.5938 li
167.146 34.5938 li
167.209 34.5938 li
167.209 34.5938 li
167.209 34.5938 li
167.271 34.0313 li
167.271 34.0313 li
167.334 34.0313 li
167.334 34.0313 li
167.396 34.0313 li
167.396 34.0313 li
167.459 34.0313 li
167.459 33.5313 li
167.521 33.5313 li
167.521 33.5313 li
167.584 33.5313 li
167.584 33.5313 li
167.646 33.5313 li
167.646 33.5313 li
167.709 33.5313 li
167.709 32.9688 li
167.709 32.9688 li
167.771 32.9688 li
167.771 32.9688 li
167.834 32.9688 li
167.834 32.9688 li
167.896 32.9688 li
167.896 32.9688 li
167.959 32.9688 li
167.959 32.9688 li
168.021 32.9688 li
168.021 32.9688 li
168.084 32.9688 li
168.084 32.9688 li
168.146 32.9688 li
168.146 32.9688 li
168.146 32.9688 li
168.209 32.9688 li
168.209 32.9688 li
168.271 32.9688 li
168.271 32.9688 li
168.334 32.9688 li
168.334 32.9688 li
168.396 32.9688 li
168.396 32.9688 li
168.459 32.9688 li
168.459 32.9688 li
168.521 32.9688 li
168.521 32.9688 li
168.584 32.9688 li
168.584 32.9688 li
168.584 32.9688 li
168.646 32.9688 li
168.646 32.9688 li
168.709 33.5313 li
168.709 33.5313 li
168.771 33.5313 li
168.771 33.5313 li
168.834 33.5313 li
168.834 33.5313 li
168.896 33.5313 li
168.896 33.5313 li
168.959 33.5313 li
168.959 34.0313 li
169.021 34.0313 li
169.021 34.0313 li
169.084 34.0313 li
169.084 34.0313 li
169.084 34.0313 li
169.146 34.5938 li
169.146 34.5938 li
169.209 34.5938 li
169.209 34.5938 li
169.271 34.5938 li
169.271 34.5938 li
169.334 34.5938 li
169.334 35.0938 li
169.396 35.0938 li
169.396 35.0938 li
169.459 35.0938 li
169.459 35.0938 li
169.521 35.6563 li
169.521 35.6563 li
169.521 35.6563 li
169.584 35.6563 li
169.584 35.6563 li
169.646 35.6563 li
169.646 35.6563 li
169.709 36.2188 li
169.709 36.2188 li
169.771 36.2188 li
169.771 36.2188 li
169.834 36.2188 li
169.834 36.2188 li
169.896 36.2188 li
169.896 36.7188 li
169.959 36.7188 li
169.959 36.7188 li
170.021 36.7188 li
170.021 36.7188 li
170.021 36.7188 li
170.084 36.7188 li
170.084 36.7188 li
170.146 36.7188 li
170.146 36.7188 li
170.209 36.7188 li
170.209 37.2813 li
170.271 37.2813 li
170.271 37.2813 li
170.334 37.2813 li
170.334 37.2813 li
170.396 37.2813 li
170.396 37.2813 li
170.459 37.2813 li
170.459 37.2813 li
170.459 37.2813 li
170.521 37.2813 li
170.521 37.2813 li
170.584 37.2813 li
170.584 37.2813 li
170.646 37.2813 li
170.646 37.2813 li
170.709 37.2813 li
170.709 37.2813 li
170.771 37.2813 li
170.771 36.7188 li
170.834 36.7188 li
170.834 36.7188 li
170.896 36.7188 li
170.896 36.7188 li
170.896 36.7188 li
170.959 36.7188 li
170.959 36.7188 li
171.021 36.7188 li
171.021 36.7188 li
171.084 36.2188 li
171.084 36.2188 li
171.146 36.2188 li
171.146 36.2188 li
171.209 36.2188 li
171.209 36.2188 li
171.271 36.2188 li
171.271 36.2188 li
171.334 35.6563 li
171.334 35.6563 li
171.396 35.6563 li
171.396 35.6563 li
171.396 35.6563 li
171.459 35.6563 li
171.459 35.0938 li
171.521 35.0938 li
171.521 35.0938 li
171.584 35.0938 li
171.584 35.0938 li
171.646 35.0938 li
171.646 34.5938 li
171.709 34.5938 li
171.709 34.5938 li
171.771 34.5938 li
171.771 34.5938 li
171.834 34.5938 li
171.834 34.0313 li
171.834 34.0313 li
171.896 34.0313 li
171.896 34.0313 li
171.959 34.0313 li
171.959 34.0313 li
172.021 34.0313 li
172.021 33.5313 li
172.084 33.5313 li
172.084 33.5313 li
172.146 33.5313 li
172.146 33.5313 li
172.209 33.5313 li
172.209 33.5313 li
172.271 33.5313 li
172.271 32.9688 li
172.334 32.9688 li
172.334 32.9688 li
172.334 32.9688 li
172.396 32.9688 li
172.396 32.9688 li
172.459 32.9688 li
172.459 32.9688 li
172.521 32.9688 li
172.521 32.9688 li
172.584 32.9688 li
172.584 32.9688 li
172.646 32.9688 li
172.646 32.9688 li
172.709 32.4063 li
172.709 32.4063 li
172.771 32.4063 li
172.771 32.4063 li
172.771 32.4063 li
172.834 32.4063 li
172.834 32.4063 li
172.896 32.4063 li
172.896 32.4063 li
172.959 32.4063 li
172.959 32.9688 li
173.021 32.9688 li
173.021 32.9688 li
173.084 32.9688 li
173.084 32.9688 li
173.146 32.9688 li
173.146 32.9688 li
173.209 32.9688 li
173.209 32.9688 li
173.271 32.9688 li
173.271 32.9688 li
173.271 32.9688 li
173.334 32.9688 li
173.334 33.5313 li
173.396 33.5313 li
173.396 33.5313 li
173.459 33.5313 li
173.459 33.5313 li
173.521 33.5313 li
173.521 33.5313 li
173.584 33.5313 li
173.584 34.0313 li
173.646 34.0313 li
173.646 34.0313 li
173.709 34.0313 li
173.709 34.0313 li
173.709 34.0313 li
173.771 34.0313 li
173.771 34.5938 li
173.834 34.5938 li
173.834 34.5938 li
173.896 34.5938 li
173.896 34.5938 li
173.959 34.5938 li
173.959 35.0938 li
174.021 35.0938 li
174.021 35.0938 li
174.084 35.0938 li
174.084 35.0938 li
174.146 35.0938 li
174.146 35.6563 li
174.146 35.6563 li
174.209 35.6563 li
174.209 35.6563 li
174.271 35.6563 li
174.271 35.6563 li
174.334 35.6563 li
174.334 36.2188 li
174.396 36.2188 li
174.396 36.2188 li
174.459 36.2188 li
174.459 36.2188 li
174.521 36.2188 li
174.521 36.2188 li
174.584 36.2188 li
174.584 36.2188 li
174.646 36.7188 li
174.646 36.7188 li
174.646 36.7188 li
174.709 36.7188 li
174.709 36.7188 li
174.771 36.7188 li
174.771 36.7188 li
174.834 36.7188 li
174.834 36.7188 li
174.896 36.7188 li
174.896 36.7188 li
174.959 36.7188 li
174.959 36.7188 li
175.021 36.7188 li
175.021 36.7188 li
175.084 36.7188 li
175.084 36.7188 li
175.084 36.7188 li
175.146 36.7188 li
175.146 36.7188 li
175.209 36.7188 li
175.209 36.7188 li
175.271 36.7188 li
175.271 36.7188 li
175.334 36.7188 li
175.334 36.7188 li
175.396 36.7188 li
175.396 36.7188 li
175.459 36.7188 li
175.459 36.7188 li
175.521 36.7188 li
175.521 36.7188 li
175.584 36.7188 li
175.584 36.7188 li
175.584 36.2188 li
175.646 36.2188 li
175.646 36.2188 li
175.709 36.2188 li
175.709 36.2188 li
175.771 36.2188 li
175.771 36.2188 li
175.834 35.6563 li
175.834 35.6563 li
175.896 35.6563 li
175.896 35.6563 li
175.959 35.6563 li
175.959 35.6563 li
176.021 35.6563 li
176.021 35.6563 li
176.021 35.0938 li
176.084 35.0938 li
176.084 35.0938 li
176.146 35.0938 li
176.146 35.0938 li
176.209 35.0938 li
176.209 34.5938 li
176.271 34.5938 li
176.271 34.5938 li
176.334 34.5938 li
176.334 34.5938 li
176.396 34.5938 li
176.396 34.0313 li
176.459 34.0313 li
176.459 34.0313 li
176.459 34.0313 li
176.521 34.0313 li
176.521 34.0313 li
176.584 34.0313 li
176.584 33.5313 li
176.646 33.5313 li
176.646 33.5313 li
176.709 33.5313 li
176.709 33.5313 li
176.771 33.5313 li
176.771 33.5313 li
176.834 32.9688 li
176.834 32.9688 li
176.896 32.9688 li
176.896 32.9688 li
176.959 32.9688 li
176.959 32.9688 li
176.959 32.9688 li
177.021 32.9688 li
177.021 32.9688 li
177.084 32.9688 li
177.084 32.9688 li
177.146 32.9688 li
177.146 32.4063 li
177.209 32.4063 li
177.209 32.4063 li
177.271 32.4063 li
177.271 32.4063 li
177.334 32.4063 li
177.334 32.4063 li
177.396 32.4063 li
177.396 32.4063 li
177.396 32.4063 li
177.459 32.4063 li
177.459 32.4063 li
177.521 32.4063 li
177.521 32.4063 li
177.584 32.4063 li
177.584 32.4063 li
177.646 32.4063 li
177.646 32.9688 li
177.709 32.9688 li
177.709 32.9688 li
177.771 32.9688 li
177.771 32.9688 li
177.834 32.9688 li
177.834 32.9688 li
177.896 32.9688 li
177.896 32.9688 li
177.896 32.9688 li
177.959 33.5313 li
177.959 33.5313 li
178.021 33.5313 li
178.021 33.5313 li
178.084 33.5313 li
178.084 33.5313 li
178.146 33.5313 li
178.146 33.5313 li
178.209 33.5313 li
178.209 34.0313 li
178.271 34.0313 li
178.271 34.0313 li
178.334 34.0313 li
178.334 34.0313 li
178.334 34.0313 li
178.396 34.0313 li
178.396 34.5938 li
178.459 34.5938 li
178.459 34.5938 li
178.521 34.5938 li
178.521 34.5938 li
178.584 34.5938 li
178.584 34.5938 li
178.646 35.0938 li
178.646 35.0938 li
178.709 35.0938 li
178.709 35.0938 li
178.771 35.0938 li
178.771 35.6563 li
178.834 35.6563 li
178.834 35.6563 li
178.834 35.6563 li
178.896 35.6563 li
178.896 35.6563 li
178.959 35.6563 li
178.959 36.2188 li
179.021 36.2188 li
179.021 36.2188 li
179.084 36.2188 li
179.084 36.2188 li
179.146 36.2188 li
179.146 36.2188 li
179.209 36.2188 li
179.209 36.2188 li
179.271 36.2188 li
179.271 36.2188 li
179.271 36.7188 li
179.334 36.7188 li
179.334 36.7188 li
179.396 36.7188 li
179.396 36.7188 li
179.459 36.7188 li
179.459 36.7188 li
179.521 36.7188 li
179.521 36.7188 li
179.584 36.7188 li
179.584 36.7188 li
179.646 36.7188 li
179.646 36.7188 li
179.709 36.7188 li
179.709 36.7188 li
179.709 36.7188 li
179.771 36.7188 li
179.771 36.7188 li
179.834 36.7188 li
179.834 36.7188 li
179.896 36.7188 li
179.896 36.7188 li
179.959 36.7188 li
179.959 36.7188 li
180.021 36.7188 li
180.021 36.7188 li
180.084 36.7188 li
180.084 36.7188 li
180.146 36.7188 li
180.146 36.2188 li
180.209 36.2188 li
180.209 36.2188 li
180.209 36.2188 li
180.271 36.2188 li
180.271 36.2188 li
180.334 36.2188 li
180.334 36.2188 li
180.396 35.6563 li
180.396 35.6563 li
180.459 35.6563 li
180.459 35.6563 li
180.521 35.6563 li
180.521 35.6563 li
180.584 35.6563 li
180.584 35.0938 li
180.646 35.0938 li
180.646 35.0938 li
180.646 35.0938 li
180.709 35.0938 li
180.709 35.0938 li
180.771 35.0938 li
180.771 34.5938 li
180.834 34.5938 li
180.834 34.5938 li
180.896 34.5938 li
180.896 34.5938 li
180.959 34.5938 li
180.959 34.0313 li
181.021 34.0313 li
181.021 34.0313 li
181.084 34.0313 li
181.084 34.0313 li
181.146 34.0313 li
181.146 33.5313 li
181.146 33.5313 li
181.209 33.5313 li
181.209 33.5313 li
181.271 33.5313 li
181.271 33.5313 li
181.334 33.5313 li
181.334 33.5313 li
181.396 32.9688 li
181.396 32.9688 li
181.459 32.9688 li
181.459 32.9688 li
181.521 32.9688 li
181.521 32.9688 li
181.584 32.9688 li
181.584 32.9688 li
181.584 32.9688 li
181.646 32.9688 li
181.646 32.9688 li
181.709 32.4063 li
181.709 32.4063 li
181.771 32.4063 li
181.771 32.4063 li
181.834 32.4063 li
181.834 32.4063 li
181.896 32.4063 li
181.896 32.4063 li
181.959 32.4063 li
181.959 32.4063 li
182.021 32.4063 li
182.021 32.4063 li
182.084 32.4063 li
182.084 32.4063 li
182.084 32.4063 li
182.146 32.4063 li
182.146 32.4063 li
182.209 32.4063 li
182.209 32.4063 li
182.271 32.9688 li
182.271 32.9688 li
182.334 32.9688 li
182.334 32.9688 li
182.396 32.9688 li
182.396 32.9688 li
182.459 32.9688 li
182.459 32.9688 li
182.521 32.9688 li
182.521 32.9688 li
182.521 32.9688 li
182.584 32.9688 li
182.584 33.5313 li
182.646 33.5313 li
182.646 33.5313 li
182.709 33.5313 li
182.709 33.5313 li
182.771 33.5313 li
182.771 33.5313 li
182.834 33.5313 li
182.834 34.0313 li
182.896 34.0313 li
182.896 34.0313 li
182.959 34.0313 li
182.959 34.0313 li
182.959 34.0313 li
183.021 34.0313 li
183.021 34.5938 li
183.084 34.5938 li
183.084 34.5938 li
183.146 34.5938 li
183.146 34.5938 li
183.209 34.5938 li
183.209 35.0938 li
183.271 35.0938 li
183.271 35.0938 li
183.334 35.0938 li
183.334 35.0938 li
183.396 35.0938 li
183.396 35.0938 li
183.459 35.6563 li
183.459 35.6563 li
183.459 35.6563 li
183.521 35.6563 li
183.521 35.6563 li
183.584 35.6563 li
183.584 35.6563 li
183.646 35.6563 li
183.646 36.2188 li
183.709 36.2188 li
183.709 36.2188 li
183.771 36.2188 li
183.771 36.2188 li
183.834 36.2188 li
183.834 36.2188 li
183.896 36.2188 li
183.896 36.2188 li
183.896 36.2188 li
183.959 36.7188 li
183.959 36.7188 li
184.021 36.7188 li
184.021 36.7188 li
184.084 36.7188 li
184.084 36.7188 li
184.146 36.7188 li
184.146 36.7188 li
184.209 36.7188 li
184.209 36.7188 li
184.271 36.7188 li
184.271 36.7188 li
184.334 36.7188 li
184.334 36.7188 li
184.396 36.7188 li
184.396 36.7188 li
184.396 36.7188 li
184.459 36.7188 li
184.459 36.7188 li
184.521 36.7188 li
184.521 36.7188 li
184.584 36.2188 li
184.584 36.7188 li
184.646 36.2188 li
184.646 36.2188 li
184.709 36.2188 li
184.709 36.2188 li
184.771 36.2188 li
184.771 36.2188 li
184.834 36.2188 li
184.834 36.2188 li
184.834 36.2188 li
184.896 36.2188 li
184.896 36.2188 li
184.959 35.6563 li
184.959 35.6563 li
185.021 35.6563 li
185.021 35.6563 li
185.084 35.6563 li
185.084 35.6563 li
185.146 35.6563 li
185.146 35.0938 li
185.209 35.0938 li
185.209 35.0938 li
185.271 35.0938 li
185.271 35.0938 li
185.271 35.0938 li
185.334 34.5938 li
185.334 34.5938 li
185.396 34.5938 li
185.396 34.5938 li
185.459 34.5938 li
185.459 34.5938 li
185.521 34.0313 li
185.521 34.0313 li
185.584 34.0313 li
185.584 34.0313 li
185.646 34.0313 li
185.646 34.0313 li
185.709 34.0313 li
185.709 33.5313 li
185.771 33.5313 li
185.771 33.5313 li
185.771 33.5313 li
185.834 33.5313 li
185.834 33.5313 li
185.896 33.5313 li
185.896 33.5313 li
185.959 33.5313 li
185.959 32.9688 li
186.021 32.9688 li
186.021 32.9688 li
186.084 32.9688 li
186.084 32.9688 li
186.146 32.9688 li
186.146 32.9688 li
186.209 32.9688 li
186.209 32.9688 li
186.209 32.9688 li
186.271 32.9688 li
186.271 32.4063 li
186.334 32.4063 li
186.334 32.4063 li
186.396 32.4063 li
186.396 32.4063 li
186.459 32.4063 li
186.459 32.4063 li
186.521 32.4063 li
186.521 32.4063 li
186.584 32.4063 li
186.584 32.4063 li
186.646 32.4063 li
186.646 32.4063 li
186.709 32.4063 li
186.709 32.4063 li
186.709 32.4063 li
186.771 32.4063 li
186.771 32.4063 li
186.834 32.4063 li
186.834 32.4063 li
186.896 32.9688 li
186.896 32.9688 li
186.959 32.9688 li
186.959 32.9688 li
187.021 32.9688 li
187.021 32.9688 li
187.084 32.9688 li
187.084 32.9688 li
187.146 32.9688 li
187.146 32.9688 li
187.146 32.9688 li
187.209 32.9688 li
187.209 33.5313 li
187.271 33.5313 li
187.271 33.5313 li
187.334 33.5313 li
187.334 33.5313 li
187.396 33.5313 li
187.396 33.5313 li
187.459 33.5313 li
187.459 34.0313 li
187.521 34.0313 li
187.521 34.0313 li
187.584 34.0313 li
187.584 34.0313 li
187.646 34.0313 li
187.646 34.5938 li
187.646 34.5938 li
187.709 34.5938 li
187.709 34.5938 li
187.771 34.5938 li
187.771 34.5938 li
187.834 34.5938 li
187.834 34.5938 li
187.896 35.0938 li
187.896 35.0938 li
187.959 35.0938 li
187.959 35.0938 li
188.021 35.0938 li
188.021 35.0938 li
188.084 35.6563 li
188.084 35.6563 li
188.084 35.6563 li
188.146 35.6563 li
188.146 35.6563 li
188.209 35.6563 li
188.209 35.6563 li
188.271 35.6563 li
188.271 36.2188 li
188.334 36.2188 li
188.334 36.2188 li
188.396 36.2188 li
188.396 36.2188 li
188.459 36.2188 li
188.459 36.2188 li
188.521 36.2188 li
188.521 36.2188 li
188.521 36.2188 li
188.584 36.2188 li
188.584 36.2188 li
188.646 36.2188 li
188.646 36.2188 li
188.709 36.7188 li
188.709 36.7188 li
188.771 36.7188 li
188.771 36.7188 li
188.834 36.7188 li
188.834 36.7188 li
188.896 36.7188 li
188.896 36.7188 li
188.959 36.7188 li
188.959 36.7188 li
189.021 36.7188 li
189.021 36.7188 li
189.021 36.2188 li
189.084 36.2188 li
189.084 36.2188 li
189.146 36.2188 li
189.146 36.2188 li
189.209 36.2188 li
189.209 36.2188 li
189.271 36.2188 li
189.271 36.2188 li
189.334 36.2188 li
189.334 36.2188 li
189.396 36.2188 li
189.396 36.2188 li
189.459 35.6563 li
189.459 35.6563 li
189.459 35.6563 li
189.521 35.6563 li
189.521 35.6563 li
189.584 35.6563 li
189.584 35.6563 li
189.646 35.6563 li
189.646 35.6563 li
189.709 35.6563 li
189.709 35.0938 li
189.771 35.0938 li
189.771 35.0938 li
189.834 35.0938 li
189.834 35.0938 li
189.896 35.0938 li
189.896 34.5938 li
189.959 34.5938 li
189.959 34.5938 li
189.959 34.5938 li
190.021 34.5938 li
190.021 34.5938 li
190.084 34.0313 li
190.084 34.0313 li
190.146 34.0313 li
190.146 34.0313 li
190.209 34.0313 li
190.209 34.0313 li
190.271 34.0313 li
190.271 34.0313 li
190.334 33.5313 li
190.334 33.5313 li
190.396 33.5313 li
190.396 33.5313 li
190.396 33.5313 li
190.459 33.5313 li
190.459 33.5313 li
190.521 32.9688 li
190.521 32.9688 li
190.584 32.9688 li
190.584 32.9688 li
190.646 32.9688 li
190.646 32.9688 li
190.709 32.9688 li
190.709 32.9688 li
190.771 32.9688 li
190.771 32.9688 li
190.834 32.9688 li
190.834 32.4063 li
190.834 32.4063 li
190.896 32.4063 li
190.896 32.4063 li
190.959 32.4063 li
190.959 32.4063 li
191.021 32.4063 li
191.021 32.4063 li
191.084 32.4063 li
191.084 32.4063 li
191.146 32.4063 li
191.146 32.4063 li
191.209 32.4063 li
191.209 32.4063 li
191.271 32.4063 li
191.271 32.4063 li
191.334 32.4063 li
191.334 32.4063 li
191.334 32.4063 li
191.396 32.4063 li
191.396 32.9688 li
191.459 32.9688 li
191.459 32.9688 li
191.521 32.9688 li
191.521 32.9688 li
191.584 32.9688 li
191.584 32.9688 li
191.646 32.9688 li
191.646 32.9688 li
191.709 32.9688 li
191.709 32.9688 li
191.771 32.9688 li
191.771 32.9688 li
191.771 33.5313 li
191.834 33.5313 li
191.834 33.5313 li
191.896 33.5313 li
191.896 33.5313 li
191.959 33.5313 li
191.959 33.5313 li
192.021 33.5313 li
192.021 33.5313 li
192.084 34.0313 li
192.084 34.0313 li
192.146 34.0313 li
192.146 34.0313 li
192.209 34.0313 li
192.209 34.0313 li
192.271 34.5938 li
192.271 34.5938 li
192.271 34.5938 li
192.334 34.5938 li
192.334 34.5938 li
192.396 34.5938 li
192.396 34.5938 li
192.459 34.5938 li
192.459 35.0938 li
192.521 35.0938 li
192.521 35.0938 li
192.584 35.0938 li
192.584 35.0938 li
192.646 35.0938 li
192.646 35.0938 li
192.709 35.6563 li
192.709 35.6563 li
192.709 35.6563 li
192.771 35.6563 li
192.771 35.6563 li
192.834 35.6563 li
192.834 35.6563 li
192.896 35.6563 li
192.896 35.6563 li
192.959 36.2188 li
192.959 36.2188 li
193.021 36.2188 li
193.021 36.2188 li
193.084 36.2188 li
193.084 36.2188 li
193.146 36.2188 li
193.146 36.2188 li
193.209 36.2188 li
193.209 36.2188 li
193.209 36.2188 li
193.271 36.2188 li
193.271 36.2188 li
193.334 36.2188 li
193.334 36.2188 li
193.396 36.2188 li
193.396 36.2188 li
193.459 36.2188 li
193.459 36.2188 li
193.521 36.2188 li
193.521 36.2188 li
193.584 36.2188 li
193.584 36.2188 li
193.646 36.2188 li
193.646 36.2188 li
193.646 36.2188 li
193.709 36.2188 li
193.709 36.2188 li
193.771 36.2188 li
193.771 36.2188 li
193.834 36.2188 li
193.834 36.2188 li
193.896 36.2188 li
193.896 36.2188 li
193.959 35.6563 li
193.959 35.6563 li
194.021 35.6563 li
194.021 35.6563 li
194.084 35.6563 li
194.084 35.6563 li
194.084 35.6563 li
194.146 35.6563 li
194.146 35.6563 li
194.209 35.6563 li
194.209 35.0938 li
194.271 35.0938 li
194.271 35.0938 li
194.334 35.0938 li
194.334 35.0938 li
194.396 35.0938 li
194.396 35.0938 li
194.459 34.5938 li
194.459 34.5938 li
194.521 34.5938 li
194.521 34.5938 li
194.584 34.5938 li
194.584 34.5938 li
194.584 34.5938 li
194.646 34.0313 li
194.646 34.0313 li
194.709 34.0313 li
194.709 34.0313 li
194.771 34.0313 li
194.771 34.0313 li
194.834 34.0313 li
194.834 33.5313 li
194.896 33.5313 li
194.896 33.5313 li
194.959 33.5313 li
194.959 33.5313 li
195.021 33.5313 li
195.021 33.5313 li
195.021 33.5313 li
195.084 33.5313 li
195.084 32.9688 li
195.146 32.9688 li
195.146 32.9688 li
195.209 32.9688 li
195.209 32.9688 li
195.271 32.9688 li
195.271 32.9688 li
195.334 32.9688 li
195.334 32.9688 li
195.396 32.9688 li
195.396 32.9688 li
195.459 32.4063 li
195.459 32.4063 li
195.521 32.4063 li
195.521 32.4063 li
195.521 32.4063 li
195.584 32.4063 li
195.584 32.4063 li
195.646 32.4063 li
195.646 32.4063 li
195.709 32.4063 li
195.709 32.4063 li
195.771 32.4063 li
195.771 32.4063 li
195.834 32.4063 li
195.834 32.4063 li
195.896 32.4063 li
195.896 32.4063 li
195.959 32.4063 li
195.959 32.4063 li
195.959 32.4063 li
196.021 32.4063 li
196.021 32.4063 li
196.084 32.9688 li
196.084 32.9688 li
196.146 32.9688 li
196.146 32.9688 li
196.209 32.9688 li
196.209 32.9688 li
196.271 32.9688 li
196.271 32.9688 li
196.334 32.9688 li
196.334 32.9688 li
196.396 32.9688 li
196.396 32.9688 li
196.459 33.5313 li
196.459 33.5313 li
196.459 33.5313 li
196.521 33.5313 li
196.521 33.5313 li
196.584 33.5313 li
196.584 33.5313 li
196.646 33.5313 li
196.646 34.0313 li
196.709 34.0313 li
196.709 34.0313 li
196.771 34.0313 li
196.771 34.0313 li
196.834 34.0313 li
196.834 34.0313 li
196.896 34.0313 li
196.896 34.5938 li
196.896 34.5938 li
196.959 34.5938 li
196.959 34.5938 li
197.021 34.5938 li
197.021 34.5938 li
197.084 34.5938 li
197.084 35.0938 li
197.146 35.0938 li
197.146 35.0938 li
197.209 35.0938 li
197.209 35.0938 li
197.271 35.0938 li
197.271 35.0938 li
197.334 35.6563 li
197.334 35.6563 li
197.334 35.6563 li
197.396 35.6563 li
197.396 35.6563 li
197.459 35.6563 li
197.459 35.6563 li
197.521 35.6563 li
197.521 35.6563 li
197.584 35.6563 li
197.584 36.2188 li
197.646 36.2188 li
197.646 36.2188 li
197.709 36.2188 li
197.709 36.2188 li
197.771 36.2188 li
197.771 36.2188 li
197.834 36.2188 li
197.834 36.2188 li
197.834 36.2188 li
197.896 36.2188 li
197.896 36.2188 li
197.959 36.2188 li
197.959 36.2188 li
198.021 36.2188 li
198.021 36.2188 li
198.084 36.2188 li
198.084 36.2188 li
198.146 36.2188 li
198.146 36.2188 li
198.209 36.2188 li
198.209 36.2188 li
198.271 36.2188 li
198.271 36.2188 li
198.271 36.2188 li
198.334 36.2188 li
198.334 36.2188 li
198.396 36.2188 li
198.396 36.2188 li
198.459 36.2188 li
198.459 36.2188 li
198.521 36.2188 li
198.521 35.6563 li
198.584 35.6563 li
198.584 35.6563 li
198.646 35.6563 li
198.646 35.6563 li
198.709 35.6563 li
198.709 35.6563 li
198.771 35.6563 li
198.771 35.6563 li
198.771 35.0938 li
198.834 35.0938 li
198.834 35.0938 li
198.896 35.0938 li
198.896 35.0938 li
198.959 35.0938 li
198.959 35.0938 li
199.021 34.5938 li
199.021 34.5938 li
199.084 34.5938 li
199.084 34.5938 li
199.146 34.5938 li
199.146 34.5938 li
199.209 34.5938 li
199.209 34.0313 li
199.209 34.0313 li
199.271 34.0313 li
199.271 34.0313 li
199.334 34.0313 li
199.334 34.0313 li
199.396 34.0313 li
199.396 33.5313 li
199.459 33.5313 li
199.459 33.5313 li
199.521 33.5313 li
199.521 33.5313 li
199.584 33.5313 li
199.584 33.5313 li
199.646 33.5313 li
199.646 33.5313 li
199.646 32.9688 li
199.709 32.9688 li
199.709 32.9688 li
199.771 32.9688 li
199.771 32.9688 li
199.834 32.9688 li
199.834 32.9688 li
199.896 32.9688 li
199.896 32.9688 li
199.959 32.9688 li
199.959 32.4063 li
200.021 32.4063 li
200.021 32.4063 li
200.084 32.4063 li
200.084 32.4063 li
200.146 32.4063 li
200.146 32.4063 li
200.146 32.4063 li
200.209 32.4063 li
200.209 32.4063 li
200.271 32.4063 li
200.271 32.4063 li
200.334 32.4063 li
200.334 32.4063 li
200.396 32.4063 li
200.396 32.4063 li
200.459 32.4063 li
200.459 32.4063 li
200.521 32.4063 li
200.521 32.4063 li
200.584 32.4063 li
200.584 32.4063 li
200.584 32.4063 li
200.646 32.4063 li
200.646 32.4063 li
200.709 32.4063 li
200.709 32.9688 li
200.771 32.9688 li
200.771 32.9688 li
200.834 32.9688 li
200.834 32.9688 li
200.896 32.9688 li
200.896 32.9688 li
200.959 32.9688 li
200.959 32.9688 li
201.021 32.9688 li
201.021 32.9688 li
201.084 33.5313 li
201.084 33.5313 li
201.084 33.5313 li
201.146 33.5313 li
201.146 33.5313 li
201.209 33.5313 li
201.209 33.5313 li
201.271 33.5313 li
201.271 34.0313 li
201.334 34.0313 li
201.334 34.0313 li
201.396 34.0313 li
201.396 34.0313 li
201.459 34.0313 li
201.459 34.0313 li
201.521 34.0313 li
201.521 34.5938 li
201.521 34.5938 li
201.584 34.5938 li
201.584 34.5938 li
201.646 34.5938 li
201.646 34.5938 li
201.709 34.5938 li
201.709 35.0938 li
201.771 35.0938 li
201.771 35.0938 li
201.834 35.0938 li
201.834 35.0938 li
201.896 35.0938 li
201.896 35.0938 li
201.959 35.0938 li
201.959 35.6563 li
202.021 35.6563 li
202.021 35.6563 li
202.021 35.6563 li
202.084 35.6563 li
202.084 35.6563 li
202.146 35.6563 li
202.146 35.6563 li
202.209 35.6563 li
202.209 35.6563 li
202.271 35.6563 li
202.271 35.6563 li
202.334 36.2188 li
202.334 36.2188 li
202.396 36.2188 li
202.396 36.2188 li
202.459 36.2188 li
202.459 36.2188 li
202.459 36.2188 li
202.521 36.2188 li
202.521 36.2188 li
202.584 36.2188 li
202.584 36.2188 li
202.646 36.2188 li
202.646 36.2188 li
202.709 36.2188 li
202.709 36.2188 li
202.771 36.2188 li
202.771 36.2188 li
202.834 36.2188 li
202.834 36.2188 li
202.896 36.2188 li
202.896 36.2188 li
202.896 36.2188 li
202.959 36.2188 li
202.959 35.6563 li
203.021 35.6563 li
203.021 35.6563 li
203.084 35.6563 li
203.084 35.6563 li
203.146 35.6563 li
203.146 35.6563 li
203.209 35.6563 li
203.209 35.6563 li
203.271 35.6563 li
203.271 35.6563 li
203.334 35.0938 li
203.334 35.0938 li
203.396 35.0938 li
203.396 35.0938 li
203.396 35.0938 li
203.459 35.0938 li
203.459 35.0938 li
203.521 35.0938 li
203.521 34.5938 li
203.584 34.5938 li
203.584 34.5938 li
203.646 34.5938 li
203.646 34.5938 li
203.709 34.5938 li
203.709 34.5938 li
203.771 34.0313 li
203.771 34.0313 li
203.834 34.0313 li
203.834 34.0313 li
203.834 34.0313 li
203.896 34.0313 li
203.896 34.0313 li
203.959 33.5313 li
203.959 33.5313 li
204.021 33.5313 li
204.021 33.5313 li
204.084 33.5313 li
204.084 33.5313 li
204.146 33.5313 li
204.146 33.5313 li
204.209 33.5313 li
204.209 32.9688 li
204.271 32.9688 li
204.271 32.9688 li
204.334 32.9688 li
204.334 32.9688 li
204.334 32.9688 li
204.396 32.9688 li
204.396 32.9688 li
204.459 32.9688 li
204.459 32.9688 li
204.521 32.4063 li
204.521 32.4063 li
204.584 32.4063 li
204.584 32.4063 li
204.646 32.4063 li
204.646 32.4063 li
204.709 32.4063 li
204.709 32.4063 li
204.771 32.4063 li
204.771 32.4063 li
204.771 32.4063 li
204.834 32.4063 li
204.834 32.4063 li
204.896 32.4063 li
204.896 32.4063 li
204.959 32.4063 li
204.959 32.4063 li
205.021 32.4063 li
205.021 32.4063 li
205.084 32.4063 li
205.084 32.4063 li
205.146 32.4063 li
205.146 32.4063 li
205.209 32.4063 li
205.209 32.4063 li
205.209 32.4063 li
205.271 32.4063 li
205.271 32.4063 li
205.334 32.4063 li
205.334 32.9688 li
205.396 32.9688 li
205.396 32.9688 li
205.459 32.9688 li
205.459 32.9688 li
205.521 32.9688 li
205.521 32.9688 li
205.584 32.9688 li
205.584 32.9688 li
205.646 32.9688 li
205.646 33.5313 li
205.709 33.5313 li
205.709 33.5313 li
205.709 33.5313 li
205.771 33.5313 li
205.771 33.5313 li
205.834 33.5313 li
205.834 33.5313 li
205.896 33.5313 li
205.896 34.0313 li
205.959 34.0313 li
205.959 34.0313 li
206.021 34.0313 li
206.021 34.0313 li
206.084 34.0313 li
206.084 34.0313 li
206.146 34.5938 li
206.146 34.5938 li
206.146 34.5938 li
206.209 34.5938 li
206.209 34.5938 li
206.271 34.5938 li
206.271 34.5938 li
206.334 34.5938 li
206.334 35.0938 li
206.396 35.0938 li
206.396 35.0938 li
206.459 35.0938 li
206.459 35.0938 li
206.521 35.0938 li
206.521 35.0938 li
206.584 35.0938 li
206.584 35.6563 li
206.646 35.6563 li
206.646 35.6563 li
206.646 35.6563 li
206.709 35.6563 li
206.709 35.6563 li
206.771 35.6563 li
206.771 35.6563 li
206.834 35.6563 li
206.834 35.6563 li
206.896 35.6563 li
206.896 35.6563 li
206.959 36.2188 li
206.959 36.2188 li
207.021 35.6563 li
207.021 36.2188 li
207.084 36.2188 li
207.084 36.2188 li
207.084 36.2188 li
207.146 36.2188 li
207.146 36.2188 li
207.209 36.2188 li
207.209 36.2188 li
207.271 36.2188 li
207.271 36.2188 li
207.334 36.2188 li
207.334 36.2188 li
207.396 36.2188 li
207.396 36.2188 li
207.459 36.2188 li
207.459 35.6563 li
207.521 35.6563 li
207.521 35.6563 li
207.584 35.6563 li
207.584 35.6563 li
207.584 35.6563 li
207.646 35.6563 li
207.646 35.6563 li
207.709 35.6563 li
207.709 35.6563 li
207.771 35.6563 li
207.771 35.6563 li
207.834 35.0938 li
207.834 35.0938 li
207.896 35.0938 li
207.896 35.0938 li
207.959 35.0938 li
207.959 35.0938 li
208.021 35.0938 li
208.021 35.0938 li
208.021 35.0938 li
208.084 34.5938 li
208.084 34.5938 li
208.146 34.5938 li
208.146 34.5938 li
208.209 34.5938 li
208.209 34.5938 li
208.271 34.5938 li
208.271 34.0313 li
208.334 34.0313 li
208.334 34.0313 li
208.396 34.0313 li
208.396 34.0313 li
208.459 34.0313 li
208.459 34.0313 li
208.459 33.5313 li
208.521 33.5313 li
208.521 33.5313 li
208.584 33.5313 li
208.584 33.5313 li
208.646 33.5313 li
208.646 33.5313 li
208.709 33.5313 li
208.709 33.5313 li
208.771 32.9688 li
208.771 32.9688 li
208.834 32.9688 li
208.834 32.9688 li
208.896 32.9688 li
208.896 32.9688 li
208.959 32.9688 li
208.959 32.9688 li
208.959 32.9688 li
209.021 32.4063 li
209.021 32.4063 li
209.084 32.4063 li
209.084 32.4063 li
209.146 32.4063 li
209.146 32.4063 li
209.209 32.4063 li
209.209 32.4063 li
209.271 32.4063 li
209.271 32.4063 li
209.334 32.4063 li
209.334 32.4063 li
209.396 32.4063 li
209.396 32.4063 li
209.396 32.4063 li
209.459 32.4063 li
209.459 32.4063 li
209.521 32.4063 li
209.521 32.4063 li
209.584 32.4063 li
209.584 32.4063 li
209.646 32.4063 li
209.646 32.4063 li
209.709 32.4063 li
209.709 32.4063 li
209.771 32.4063 li
209.771 32.4063 li
209.834 32.4063 li
209.834 32.4063 li
209.896 32.4063 li
209.896 32.4063 li
209.896 32.4063 li
209.959 32.4063 li
209.959 32.4063 li
210.021 32.9688 li
210.021 32.9688 li
210.084 32.9688 li
210.084 32.9688 li
210.146 32.9688 li
210.146 32.9688 li
210.209 32.9688 li
210.209 32.9688 li
210.271 32.9688 li
210.271 32.9688 li
210.334 33.5313 li
210.334 33.5313 li
210.334 33.5313 li
210.396 33.5313 li
210.396 33.5313 li
210.459 33.5313 li
210.459 33.5313 li
210.521 34.0313 li
210.521 34.0313 li
210.584 34.0313 li
210.584 34.0313 li
210.646 34.0313 li
210.646 34.0313 li
210.709 34.0313 li
210.709 34.0313 li
210.771 34.0313 li
210.771 34.5938 li
210.834 34.5938 li
210.834 34.5938 li
210.834 34.5938 li
210.896 34.5938 li
210.896 34.5938 li
210.959 35.0938 li
210.959 35.0938 li
211.021 35.0938 li
211.021 35.0938 li
211.084 35.0938 li
211.084 35.0938 li
211.146 35.0938 li
211.146 35.0938 li
211.209 35.0938 li
211.209 35.6563 li
211.271 35.6563 li
211.271 35.6563 li
211.271 35.6563 li
211.334 35.6563 li
211.334 35.6563 li
211.396 35.6563 li
211.396 35.6563 li
211.459 35.6563 li
211.459 35.6563 li
211.521 35.6563 li
211.521 35.6563 li
211.584 35.6563 li
211.584 35.6563 li
211.646 35.6563 li
211.646 35.6563 li
211.709 35.6563 li
211.709 35.6563 li
211.709 35.6563 li
211.771 35.6563 li
211.771 35.6563 li
211.834 35.6563 li
211.834 35.6563 li
211.896 35.6563 li
211.896 35.6563 li
211.959 35.6563 li
211.959 35.6563 li
212.021 35.6563 li
212.021 35.6563 li
212.084 35.6563 li
212.084 35.6563 li
212.146 35.6563 li
212.146 35.6563 li
212.209 35.6563 li
212.209 35.6563 li
212.209 35.6563 li
212.271 35.6563 li
212.271 35.6563 li
212.334 35.6563 li
212.334 35.0938 li
212.396 35.0938 li
212.396 35.0938 li
212.459 35.0938 li
212.459 35.0938 li
212.521 35.0938 li
212.521 35.0938 li
212.584 35.0938 li
212.584 34.5938 li
212.646 34.5938 li
212.646 34.5938 li
212.646 34.5938 li
212.709 34.5938 li
212.709 34.5938 li
212.771 34.5938 li
212.771 34.5938 li
212.834 34.0313 li
212.834 34.0313 li
212.896 34.0313 li
212.896 34.0313 li
212.959 34.0313 li
212.959 34.0313 li
213.021 34.0313 li
213.021 33.5313 li
213.084 33.5313 li
213.084 33.5313 li
213.146 33.5313 li
213.146 33.5313 li
213.146 33.5313 li
213.209 33.5313 li
213.209 33.5313 li
213.271 33.5313 li
213.271 32.9688 li
213.334 32.9688 li
213.334 32.9688 li
213.396 32.9688 li
213.396 32.9688 li
213.459 32.9688 li
213.459 32.9688 li
213.521 32.9688 li
213.521 32.4063 li
213.584 32.4063 li
213.584 32.4063 li
213.584 32.4063 li
213.646 32.4063 li
213.646 32.4063 li
213.709 32.4063 li
213.709 32.4063 li
213.771 32.4063 li
213.771 32.4063 li
213.834 32.4063 li
213.834 32.4063 li
213.896 32.4063 li
213.896 32.4063 li
213.959 32.4063 li
213.959 32.4063 li
214.021 32.4063 li
214.021 32.4063 li
214.021 32.4063 li
214.084 32.4063 li
214.084 32.4063 li
214.146 32.4063 li
214.146 32.4063 li
214.209 32.4063 li
214.209 32.4063 li
214.271 32.4063 li
214.271 32.4063 li
214.334 32.4063 li
214.334 32.4063 li
214.396 32.4063 li
214.396 32.4063 li
214.459 32.4063 li
214.459 32.4063 li
214.521 32.4063 li
214.521 32.4063 li
214.521 32.4063 li
214.584 32.4063 li
214.584 32.9688 li
214.646 32.9688 li
214.646 32.9688 li
214.709 32.9688 li
214.709 32.9688 li
214.771 32.9688 li
214.771 32.9688 li
214.834 32.9688 li
214.834 32.9688 li
214.896 32.9688 li
214.896 33.5313 li
214.959 33.5313 li
214.959 33.5313 li
214.959 33.5313 li
215.021 33.5313 li
215.021 33.5313 li
215.084 33.5313 li
215.084 33.5313 li
215.146 34.0313 li
215.146 34.0313 li
215.209 34.0313 li
215.209 34.0313 li
215.271 34.0313 li
215.271 34.0313 li
215.334 34.0313 li
215.334 34.5938 li
215.396 34.5938 li
215.396 34.5938 li
215.459 34.5938 li
215.459 34.5938 li
215.459 34.5938 li
215.521 34.5938 li
215.521 34.5938 li
215.584 34.5938 li
215.584 35.0938 li
215.646 35.0938 li
215.646 35.0938 li
215.709 35.0938 li
215.709 35.0938 li
215.771 35.0938 li
215.771 35.0938 li
215.834 35.0938 li
215.834 35.0938 li
215.896 35.0938 li
215.896 35.6563 li
215.896 35.6563 li
215.959 35.6563 li
215.959 35.6563 li
216.021 35.6563 li
216.021 35.6563 li
216.084 35.6563 li
216.084 35.6563 li
216.146 35.6563 li
216.146 35.6563 li
216.209 35.6563 li
216.209 35.6563 li
216.271 35.6563 li
216.271 35.6563 li
216.334 35.6563 li
216.334 35.6563 li
216.396 35.6563 li
216.396 35.6563 li
216.396 35.6563 li
216.459 35.6563 li
216.459 35.6563 li
216.521 35.6563 li
216.521 35.6563 li
216.584 35.6563 li
216.584 35.6563 li
216.646 35.6563 li
216.646 35.6563 li
216.709 35.6563 li
216.709 35.6563 li
216.771 35.6563 li
216.771 35.6563 li
216.834 35.6563 li
216.834 35.6563 li
216.834 35.0938 li
216.896 35.0938 li
216.896 35.0938 li
216.959 35.0938 li
216.959 35.0938 li
217.021 35.0938 li
217.021 35.0938 li
217.084 35.0938 li
217.084 35.0938 li
217.146 34.5938 li
217.146 34.5938 li
217.209 34.5938 li
217.209 34.5938 li
217.271 34.5938 li
217.271 34.5938 li
217.271 34.5938 li
217.334 34.5938 li
217.334 34.5938 li
217.396 34.0313 li
217.396 34.0313 li
217.459 34.0313 li
217.459 34.0313 li
217.521 34.0313 li
217.521 34.0313 li
217.584 34.0313 li
217.584 33.5313 li
217.646 33.5313 li
217.646 33.5313 li
217.709 33.5313 li
217.709 33.5313 li
217.771 33.5313 li
217.771 33.5313 li
217.771 33.5313 li
217.834 33.5313 li
217.834 32.9688 li
217.896 32.9688 li
217.896 32.9688 li
217.959 32.9688 li
217.959 32.9688 li
218.021 32.9688 li
218.021 32.9688 li
218.084 32.4063 li
218.084 32.4063 li
218.146 32.4063 li
218.146 32.4063 li
218.209 32.4063 li
218.209 32.4063 li
218.209 32.4063 li
218.271 32.4063 li
218.271 32.4063 li
218.334 32.4063 li
218.334 32.4063 li
218.396 32.4063 li
218.396 32.4063 li
218.459 32.4063 li
218.459 32.4063 li
218.521 32.4063 li
218.521 32.4063 li
218.584 32.4063 li
218.584 32.4063 li
218.646 32.4063 li
218.646 32.4063 li
218.709 32.4063 li
218.709 32.4063 li
218.709 32.4063 li
218.771 32.4063 li
218.771 32.4063 li
218.834 32.4063 li
218.834 32.4063 li
218.896 32.4063 li
218.896 32.4063 li
218.959 32.4063 li
218.959 32.4063 li
219.021 32.4063 li
219.021 32.4063 li
219.084 32.4063 li
219.084 32.4063 li
219.146 32.4063 li
219.146 32.4063 li
219.146 32.4063 li
219.209 32.4063 li
219.209 32.9688 li
219.271 32.9688 li
219.271 32.9688 li
219.334 32.9688 li
219.334 32.9688 li
219.396 32.9688 li
219.396 32.9688 li
219.459 32.9688 li
219.459 32.9688 li
219.521 33.5313 li
219.521 33.5313 li
219.584 33.5313 li
219.584 33.5313 li
219.584 33.5313 li
219.646 33.5313 li
219.646 33.5313 li
219.709 33.5313 li
219.709 34.0313 li
219.771 34.0313 li
219.771 34.0313 li
219.834 34.0313 li
219.834 34.0313 li
219.896 34.0313 li
219.896 34.0313 li
219.959 34.0313 li
219.959 34.5938 li
220.021 34.5938 li
220.021 34.5938 li
220.084 34.5938 li
220.084 34.5938 li
220.084 34.5938 li
220.146 34.5938 li
220.146 34.5938 li
220.209 35.0938 li
220.209 35.0938 li
220.271 35.0938 li
220.271 35.0938 li
220.334 35.0938 li
220.334 35.0938 li
220.396 35.0938 li
220.396 35.0938 li
220.459 35.0938 li
220.459 35.0938 li
220.521 35.6563 li
220.521 35.6563 li
220.521 35.6563 li
220.584 35.6563 li
220.584 35.6563 li
220.646 35.6563 li
220.646 35.6563 li
220.709 35.6563 li
220.709 35.6563 li
220.771 35.6563 li
220.771 35.6563 li
220.834 35.6563 li
220.834 35.6563 li
220.896 35.6563 li
220.896 35.6563 li
220.959 35.6563 li
220.959 35.6563 li
221.021 35.6563 li
221.021 35.6563 li
221.021 35.6563 li
221.084 35.6563 li
221.084 35.6563 li
221.146 35.6563 li
221.146 35.6563 li
221.209 35.6563 li
221.209 35.6563 li
221.271 35.6563 li
221.271 35.6563 li
221.334 35.6563 li
221.334 35.6563 li
221.396 35.0938 li
221.396 35.0938 li
221.459 35.0938 li
221.459 35.0938 li
221.459 35.0938 li
221.521 35.0938 li
221.521 35.0938 li
221.584 35.0938 li
221.584 35.0938 li
221.646 35.0938 li
221.646 35.0938 li
221.709 34.5938 li
221.709 34.5938 li
221.771 34.5938 li
221.771 34.5938 li
221.834 34.5938 li
221.834 34.5938 li
221.896 34.5938 li
221.896 34.0313 li
221.959 34.0313 li
221.959 34.0313 li
221.959 34.0313 li
222.021 34.0313 li
222.021 34.0313 li
222.084 34.0313 li
222.084 34.0313 li
222.146 34.0313 li
222.146 33.5313 li
222.209 33.5313 li
222.209 33.5313 li
222.271 33.5313 li
222.271 33.5313 li
222.334 33.5313 li
222.334 33.5313 li
222.396 32.9688 li
222.396 32.9688 li
222.396 32.9688 li
222.459 32.9688 li
222.459 32.9688 li
222.521 32.9688 li
222.521 32.9688 li
222.584 32.9688 li
222.584 32.9688 li
222.646 32.9688 li
222.646 32.4063 li
222.709 32.4063 li
222.709 32.4063 li
222.771 32.4063 li
222.771 32.4063 li
222.834 32.4063 li
222.834 32.4063 li
222.834 32.4063 li
222.896 32.4063 li
222.896 32.4063 li
222.959 32.4063 li
222.959 32.4063 li
223.021 32.4063 li
223.021 32.4063 li
223.084 32.4063 li
223.084 32.4063 li
223.146 32.4063 li
223.146 32.4063 li
223.209 32.4063 li
223.209 32.4063 li
223.271 32.4063 li
223.271 32.4063 li
223.334 32.4063 li
223.334 32.4063 li
223.334 32.4063 li
223.396 32.4063 li
223.396 32.4063 li
223.459 32.4063 li
223.459 32.4063 li
223.521 32.4063 li
223.521 32.4063 li
223.584 32.4063 li
223.584 32.4063 li
223.646 32.4063 li
223.646 32.4063 li
223.709 32.4063 li
223.709 32.4063 li
223.771 32.4063 li
223.771 32.4063 li
223.771 32.9688 li
223.834 32.9688 li
223.834 32.9688 li
223.896 32.9688 li
223.896 32.9688 li
223.959 32.9688 li
223.959 32.9688 li
224.021 32.9688 li
224.021 32.9688 li
224.084 33.5313 li
224.084 33.5313 li
224.146 33.5313 li
224.146 33.5313 li
224.209 33.5313 li
224.209 33.5313 li
224.271 33.5313 li
224.271 33.5313 li
224.271 33.5313 li
224.334 34.0313 li
224.334 34.0313 li
224.396 34.0313 li
224.396 34.0313 li
224.459 34.0313 li
224.459 34.0313 li
224.521 34.0313 li
224.521 34.5938 li
224.584 34.5938 li
224.584 34.5938 li
224.646 34.5938 li
224.646 34.5938 li
224.709 34.5938 li
224.709 34.5938 li
224.709 34.5938 li
224.771 34.5938 li
224.771 35.0938 li
224.834 35.0938 li
224.834 35.0938 li
224.896 35.0938 li
224.896 35.0938 li
224.959 35.0938 li
224.959 35.0938 li
225.021 35.0938 li
225.021 35.0938 li
225.084 35.0938 li
225.084 35.0938 li
225.146 35.0938 li
225.146 35.0938 li
225.146 35.6563 li
225.209 35.6563 li
225.209 35.6563 li
225.271 35.6563 li
225.271 35.6563 li
225.334 35.6563 li
225.334 35.6563 li
225.396 35.6563 li
225.396 35.6563 li
225.459 35.6563 li
225.459 35.6563 li
225.521 35.6563 li
225.521 35.6563 li
225.584 35.6563 li
225.584 35.6563 li
225.646 35.6563 li
225.646 35.6563 li
225.646 35.6563 li
225.709 35.6563 li
225.709 35.6563 li
225.771 35.6563 li
225.771 35.6563 li
225.834 35.0938 li
225.834 35.0938 li
225.896 35.0938 li
225.896 35.0938 li
225.959 35.0938 li
225.959 35.0938 li
226.021 35.0938 li
226.021 35.0938 li
226.084 35.0938 li
226.084 35.0938 li
226.084 35.0938 li
226.146 35.0938 li
226.146 35.0938 li
226.209 34.5938 li
226.209 34.5938 li
226.271 34.5938 li
226.271 34.5938 li
226.334 34.5938 li
226.334 34.5938 li
226.396 34.5938 li
226.396 34.5938 li
226.459 34.0313 li
226.459 34.0313 li
226.521 34.0313 li
226.521 34.0313 li
226.584 34.0313 li
226.584 34.0313 li
226.584 34.0313 li
226.646 34.0313 li
226.646 33.5313 li
226.709 33.5313 li
226.709 33.5313 li
226.771 33.5313 li
226.771 33.5313 li
226.834 33.5313 li
226.834 33.5313 li
226.896 33.5313 li
226.896 32.9688 li
226.959 32.9688 li
226.959 32.9688 li
227.021 32.9688 li
227.021 32.9688 li
227.021 32.9688 li
227.084 32.9688 li
227.084 32.9688 li
227.146 32.9688 li
227.146 32.4063 li
227.209 32.4063 li
227.209 32.4063 li
227.271 32.4063 li
227.271 32.4063 li
227.334 32.4063 li
227.334 32.4063 li
227.396 32.4063 li
227.396 32.4063 li
227.459 32.4063 li
227.459 32.4063 li
227.521 32.4063 li
227.521 32.4063 li
227.521 32.4063 li
227.584 31.9063 li
227.584 32.4063 li
227.646 31.9063 li
227.646 31.9063 li
227.709 31.9063 li
227.709 31.9063 li
227.771 31.9063 li
227.771 31.9063 li
227.834 31.9063 li
227.834 31.9063 li
227.896 31.9063 li
227.896 31.9063 li
227.959 31.9063 li
227.959 31.9063 li
227.959 32.4063 li
228.021 32.4063 li
228.021 32.4063 li
228.084 32.4063 li
228.084 32.4063 li
228.146 32.4063 li
228.146 32.4063 li
228.209 32.4063 li
228.209 32.4063 li
228.271 32.4063 li
228.271 32.4063 li
228.334 32.4063 li
228.334 32.4063 li
228.396 32.4063 li
228.396 32.9688 li
228.396 32.9688 li
228.459 32.9688 li
228.459 32.9688 li
228.521 32.9688 li
228.521 32.9688 li
228.584 32.9688 li
228.584 32.9688 li
228.646 32.9688 li
228.646 33.5313 li
228.709 33.5313 li
228.709 33.5313 li
228.771 33.5313 li
228.771 33.5313 li
228.834 33.5313 li
228.834 33.5313 li
228.896 33.5313 li
228.896 33.5313 li
228.896 34.0313 li
228.959 34.0313 li
228.959 34.0313 li
229.021 34.0313 li
229.021 34.0313 li
229.084 34.0313 li
229.084 34.0313 li
229.146 34.0313 li
229.146 34.5938 li
229.209 34.5938 li
229.209 34.5938 li
229.271 34.5938 li
229.271 34.5938 li
229.334 34.5938 li
229.334 34.5938 li
229.334 34.5938 li
229.396 35.0938 li
229.396 35.0938 li
229.459 35.0938 li
229.459 35.0938 li
229.521 35.0938 li
229.521 35.0938 li
229.584 35.0938 li
229.584 35.0938 li
229.646 35.0938 li
229.646 35.0938 li
229.709 35.0938 li
229.709 35.0938 li
229.771 35.0938 li
229.771 35.0938 li
229.834 35.0938 li
229.834 35.6563 li
229.834 35.6563 li
229.896 35.6563 li
229.896 35.6563 li
229.959 35.6563 li
229.959 35.6563 li
230.021 35.6563 li
230.021 35.6563 li
230.084 35.6563 li
230.084 35.6563 li
230.146 35.6563 li
230.146 35.6563 li
230.209 35.0938 li
230.209 35.0938 li
230.271 35.0938 li
230.271 35.0938 li
230.271 35.0938 li
230.334 35.0938 li
230.334 35.0938 li
230.396 35.0938 li
230.396 35.0938 li
230.459 35.0938 li
230.459 35.0938 li
230.521 35.0938 li
230.521 35.0938 li
230.584 35.0938 li
230.584 35.0938 li
230.646 35.0938 li
230.646 35.0938 li
230.709 34.5938 li
230.709 34.5938 li
230.771 34.5938 li
230.771 34.5938 li
230.771 34.5938 li
230.834 34.5938 li
230.834 34.5938 li
230.896 34.5938 li
230.896 34.0313 li
230.959 34.0313 li
230.959 34.0313 li
231.021 34.0313 li
231.021 34.0313 li
231.084 34.0313 li
231.084 34.0313 li
231.146 34.0313 li
231.146 34.0313 li
231.209 33.5313 li
231.209 33.5313 li
231.209 33.5313 li
231.271 33.5313 li
231.271 33.5313 li
231.334 33.5313 li
231.334 33.5313 li
231.396 33.5313 li
231.396 32.9688 li
231.459 32.9688 li
231.459 32.9688 li
231.521 32.9688 li
231.521 32.9688 li
231.584 32.9688 li
231.584 32.9688 li
231.646 32.9688 li
231.646 32.9688 li
231.646 32.4063 li
231.709 32.4063 li
231.709 32.4063 li
231.771 32.4063 li
231.771 32.4063 li
231.834 32.4063 li
231.834 32.4063 li
231.896 32.4063 li
231.896 32.4063 li
231.959 32.4063 li
231.959 32.4063 li
232.021 32.4063 li
232.021 32.4063 li
232.084 32.4063 li
232.084 31.9063 li
232.146 31.9063 li
232.146 31.9063 li
232.146 31.9063 li
232.209 31.9063 li
232.209 31.9063 li
232.271 31.9063 li
232.271 31.9063 li
232.334 31.9063 li
232.334 31.9063 li
232.396 31.9063 li
232.396 31.9063 li
232.459 31.9063 li
232.459 31.9063 li
232.521 31.9063 li
232.521 31.9063 li
232.584 32.4063 li
232.584 32.4063 li
232.584 32.4063 li
232.646 32.4063 li
232.646 32.4063 li
232.709 32.4063 li
232.709 32.4063 li
232.771 32.4063 li
232.771 32.4063 li
232.834 32.4063 li
232.834 32.4063 li
232.896 32.4063 li
232.896 32.4063 li
232.959 32.4063 li
232.959 32.4063 li
233.021 32.9688 li
233.021 32.9688 li
233.084 32.9688 li
233.084 32.9688 li
233.084 32.9688 li
233.146 32.9688 li
233.146 32.9688 li
233.209 32.9688 li
233.209 32.9688 li
233.271 33.5313 li
233.271 33.5313 li
233.334 33.5313 li
233.334 33.5313 li
233.396 33.5313 li
233.396 33.5313 li
233.459 33.5313 li
233.459 33.5313 li
233.521 33.5313 li
233.521 34.0313 li
233.521 34.0313 li
233.584 34.0313 li
233.584 34.0313 li
233.646 34.0313 li
233.646 34.0313 li
233.709 34.0313 li
233.709 34.0313 li
233.771 34.5938 li
233.771 34.5938 li
233.834 34.5938 li
233.834 34.5938 li
233.896 34.5938 li
233.896 34.5938 li
233.959 34.5938 li
233.959 34.5938 li
233.959 34.5938 li
234.021 34.5938 li
234.021 35.0938 li
234.084 35.0938 li
234.084 35.0938 li
234.146 35.0938 li
234.146 35.0938 li
234.209 35.0938 li
234.209 35.0938 li
234.271 35.0938 li
234.271 35.0938 li
234.334 35.0938 li
234.334 35.0938 li
234.396 35.0938 li
234.396 35.0938 li
234.459 35.0938 li
234.459 35.0938 li
234.459 35.0938 li
234.521 35.0938 li
234.521 35.0938 li
234.584 35.0938 li
234.584 35.0938 li
234.646 35.0938 li
234.646 35.0938 li
234.709 35.0938 li
234.709 35.0938 li
234.771 35.0938 li
234.771 35.0938 li
234.834 35.0938 li
234.834 35.0938 li
234.896 35.0938 li
234.896 35.0938 li
234.896 35.0938 li
234.959 35.0938 li
234.959 35.0938 li
235.021 35.0938 li
235.021 35.0938 li
235.084 35.0938 li
235.084 35.0938 li
235.146 35.0938 li
235.146 34.5938 li
235.209 34.5938 li
235.209 34.5938 li
235.271 34.5938 li
235.271 34.5938 li
235.334 34.5938 li
235.334 34.5938 li
235.396 34.5938 li
235.396 34.5938 li
235.396 34.5938 li
235.459 34.0313 li
235.459 34.0313 li
235.521 34.0313 li
235.521 34.0313 li
235.584 34.0313 li
235.584 34.0313 li
235.646 34.0313 li
235.646 34.0313 li
235.709 34.0313 li
235.709 33.5313 li
235.771 33.5313 li
235.771 33.5313 li
235.834 33.5313 li
235.834 33.5313 li
235.834 33.5313 li
235.896 33.5313 li
235.896 33.5313 li
235.959 32.9688 li
235.959 32.9688 li
236.021 32.9688 li
236.021 32.9688 li
236.084 32.9688 li
236.084 32.9688 li
236.146 32.9688 li
236.146 32.9688 li
236.209 32.9688 li
236.209 32.9688 li
236.271 32.4063 li
236.271 32.4063 li
236.334 32.4063 li
236.334 32.4063 li
236.334 32.4063 li
236.396 32.4063 li
236.396 32.4063 li
236.459 32.4063 li
236.459 32.4063 li
236.521 32.4063 li
236.521 32.4063 li
236.584 32.4063 li
236.584 31.9063 li
236.646 31.9063 li
236.646 31.9063 li
236.709 31.9063 li
236.709 31.9063 li
236.771 31.9063 li
236.771 31.9063 li
236.771 31.9063 li
236.834 31.9063 li
236.834 31.9063 li
236.896 31.9063 li
236.896 31.9063 li
236.959 31.9063 li
236.959 31.9063 li
237.021 31.9063 li
237.021 32.4063 li
237.084 31.9063 li
237.084 32.4063 li
237.146 32.4063 li
237.146 32.4063 li
237.209 32.4063 li
237.209 32.4063 li
237.209 32.4063 li
237.271 32.4063 li
237.271 32.4063 li
237.334 32.4063 li
237.334 32.4063 li
237.396 32.4063 li
237.396 32.4063 li
237.459 32.4063 li
237.459 32.4063 li
237.521 32.4063 li
237.521 32.4063 li
237.584 32.9688 li
237.584 32.9688 li
237.646 32.9688 li
237.646 32.9688 li
237.709 32.9688 li
237.709 32.9688 li
237.709 32.9688 li
237.771 32.9688 li
237.771 32.9688 li
237.834 33.5313 li
237.834 33.5313 li
237.896 33.5313 li
237.896 33.5313 li
237.959 33.5313 li
237.959 33.5313 li
238.021 33.5313 li
238.021 33.5313 li
238.084 34.0313 li
238.084 34.0313 li
238.146 34.0313 li
238.146 34.0313 li
238.146 34.0313 li
238.209 34.0313 li
238.209 34.0313 li
238.271 34.0313 li
238.271 34.0313 li
238.334 34.0313 li
238.334 34.5938 li
238.396 34.5938 li
238.396 34.5938 li
238.459 34.5938 li
238.459 34.5938 li
238.521 34.5938 li
238.521 34.5938 li
238.584 34.5938 li
238.584 34.5938 li
238.646 35.0938 li
238.646 35.0938 li
238.646 35.0938 li
238.709 35.0938 li
238.709 35.0938 li
238.771 35.0938 li
238.771 35.0938 li
238.834 35.0938 li
238.834 35.0938 li
238.896 35.0938 li
238.896 35.0938 li
238.959 35.0938 li
238.959 35.0938 li
239.021 35.0938 li
239.021 35.0938 li
239.084 35.0938 li
239.084 35.0938 li
239.084 35.0938 li
239.146 35.0938 li
239.146 35.0938 li
239.209 35.0938 li
239.209 35.0938 li
239.271 35.0938 li
239.271 35.0938 li
239.334 35.0938 li
239.334 35.0938 li
239.396 35.0938 li
239.396 35.0938 li
239.459 35.0938 li
239.459 35.0938 li
239.521 35.0938 li
239.521 35.0938 li
239.521 35.0938 li
239.584 35.0938 li
239.584 35.0938 li
239.646 35.0938 li
239.646 34.5938 li
239.709 34.5938 li
239.709 34.5938 li
239.771 34.5938 li
239.771 34.5938 li
239.834 34.5938 li
239.834 34.5938 li
239.896 34.5938 li
239.896 34.5938 li
239.959 34.5938 li
239.959 34.5938 li
240.021 34.0313 li
240.021 34.0313 li
240.021 34.0313 li
240.084 34.0313 li
240.084 34.0313 li
240.146 34.0313 li
240.146 34.0313 li
240.209 34.0313 li
240.209 33.5313 li
240.271 33.5313 li
240.271 33.5313 li
240.334 33.5313 li
240.334 33.5313 li
240.396 33.5313 li
240.396 33.5313 li
240.459 33.5313 li
240.459 33.5313 li
240.459 32.9688 li
240.521 32.9688 li
240.521 32.9688 li
240.584 32.9688 li
240.584 32.9688 li
240.646 32.9688 li
240.646 32.9688 li
240.709 32.9688 li
240.709 32.9688 li
240.771 32.4063 li
240.771 32.4063 li
240.834 32.4063 li
240.834 32.4063 li
240.896 32.4063 li
240.896 32.4063 li
240.959 32.4063 li
240.959 32.4063 li
240.959 32.4063 li
241.021 32.4063 li
241.021 32.4063 li
241.084 32.4063 li
241.084 32.4063 li
241.146 32.4063 li
241.146 32.4063 li
241.209 32.4063 li
241.209 31.9063 li
241.271 31.9063 li
241.271 31.9063 li
241.334 31.9063 li
241.334 31.9063 li
241.396 31.9063 li
241.396 31.9063 li
241.396 31.9063 li
241.459 31.9063 li
241.459 31.9063 li
241.521 31.9063 li
241.521 31.9063 li
241.584 32.4063 li
241.584 31.9063 li
241.646 32.4063 li
241.646 32.4063 li
241.709 32.4063 li
241.709 32.4063 li
241.771 32.4063 li
241.771 32.4063 li
241.834 32.4063 li
241.834 32.4063 li
241.896 32.4063 li
241.896 32.4063 li
241.896 32.4063 li
241.959 32.4063 li
241.959 32.4063 li
242.021 32.4063 li
242.021 32.4063 li
242.084 32.9688 li
242.084 32.9688 li
242.146 32.9688 li
242.146 32.9688 li
242.209 32.9688 li
242.209 32.9688 li
242.271 32.9688 li
242.271 32.9688 li
242.334 32.9688 li
242.334 32.9688 li
242.334 32.9688 li
242.396 33.5313 li
242.396 33.5313 li
242.459 33.5313 li
242.459 33.5313 li
242.521 33.5313 li
242.521 33.5313 li
242.584 33.5313 li
242.584 33.5313 li
242.646 33.5313 li
242.646 34.0313 li
242.709 34.0313 li
242.709 34.0313 li
242.771 34.0313 li
242.771 34.0313 li
242.771 34.0313 li
242.834 34.0313 li
242.834 34.0313 li
242.896 34.0313 li
242.896 34.0313 li
242.959 34.5938 li
242.959 34.5938 li
243.021 34.5938 li
243.021 34.5938 li
243.084 34.5938 li
243.084 34.5938 li
243.146 34.5938 li
243.146 34.5938 li
243.209 34.5938 li
243.209 34.5938 li
243.271 34.5938 li
243.271 34.5938 li
243.271 34.5938 li
243.334 35.0938 li
243.334 35.0938 li
243.396 35.0938 li
243.396 35.0938 li
243.459 35.0938 li
243.459 35.0938 li
243.521 35.0938 li
243.521 35.0938 li
243.584 35.0938 li
243.584 35.0938 li
243.646 35.0938 li
243.646 35.0938 li
243.709 35.0938 li
243.709 35.0938 li
243.709 35.0938 li
243.771 35.0938 li
243.771 35.0938 li
243.834 35.0938 li
243.834 35.0938 li
243.896 35.0938 li
243.896 35.0938 li
243.959 35.0938 li
243.959 35.0938 li
244.021 35.0938 li
244.021 35.0938 li
244.084 34.5938 li
244.084 34.5938 li
244.146 35.0938 li
244.146 34.5938 li
244.209 34.5938 li
244.209 34.5938 li
244.209 34.5938 li
244.271 34.5938 li
244.271 34.5938 li
244.334 34.5938 li
244.334 34.5938 li
244.396 34.5938 li
244.396 34.5938 li
244.459 34.0313 li
244.459 34.0313 li
244.521 34.0313 li
244.521 34.0313 li
244.584 34.0313 li
244.584 34.0313 li
244.646 34.0313 li
244.646 34.0313 li
244.646 34.0313 li
244.709 34.0313 li
244.709 33.5313 li
244.771 33.5313 li
244.771 33.5313 li
244.834 33.5313 li
244.834 33.5313 li
244.896 33.5313 li
244.896 33.5313 li
244.959 33.5313 li
244.959 33.5313 li
245.021 33.5313 li
245.021 32.9688 li
245.084 32.9688 li
245.084 32.9688 li
245.146 32.9688 li
245.146 32.9688 li
245.146 32.9688 li
245.209 32.9688 li
245.209 32.9688 li
245.271 32.9688 li
245.271 32.4063 li
245.334 32.4063 li
245.334 32.4063 li
245.396 32.4063 li
245.396 32.4063 li
245.459 32.4063 li
245.459 32.4063 li
245.521 32.4063 li
245.521 32.4063 li
245.584 32.4063 li
245.584 32.4063 li
245.584 32.4063 li
245.646 32.4063 li
245.646 32.4063 li
245.709 32.4063 li
245.709 32.4063 li
245.771 32.4063 li
245.771 32.4063 li
245.834 31.9063 li
245.834 31.9063 li
245.896 31.9063 li
245.896 31.9063 li
245.959 31.9063 li
245.959 31.9063 li
246.021 31.9063 li
246.021 31.9063 li
246.021 31.9063 li
246.084 31.9063 li
246.084 31.9063 li
246.146 31.9063 li
246.146 31.9063 li
246.209 32.4063 li
246.209 32.4063 li
246.271 32.4063 li
246.271 32.4063 li
246.334 32.4063 li
246.334 32.4063 li
246.396 32.4063 li
246.396 32.4063 li
246.459 32.4063 li
246.459 32.4063 li
246.521 32.4063 li
246.521 32.4063 li
246.521 32.4063 li
246.584 32.4063 li
246.584 32.4063 li
246.646 32.4063 li
246.646 32.9688 li
246.709 32.9688 li
246.709 32.9688 li
246.771 32.9688 li
246.771 32.9688 li
246.834 32.9688 li
246.834 32.9688 li
246.896 32.9688 li
246.896 32.9688 li
246.959 32.9688 li
246.959 33.5313 li
246.959 33.5313 li
247.021 33.5313 li
247.021 33.5313 li
247.084 33.5313 li
247.084 33.5313 li
247.146 33.5313 li
247.146 33.5313 li
247.209 33.5313 li
247.209 34.0313 li
247.271 34.0313 li
247.271 34.0313 li
247.334 34.0313 li
247.334 34.0313 li
247.396 34.0313 li
247.396 34.0313 li
247.459 34.0313 li
247.459 34.0313 li
247.459 34.0313 li
247.521 34.0313 li
247.521 34.5938 li
247.584 34.5938 li
247.584 34.5938 li
247.646 34.5938 li
247.646 34.5938 li
247.709 34.5938 li
247.709 34.5938 li
247.771 34.5938 li
247.771 34.5938 li
247.834 34.5938 li
247.834 34.5938 li
247.896 34.5938 li
247.896 34.5938 li
247.896 34.5938 li
247.959 34.5938 li
247.959 34.5938 li
248.021 35.0938 li
248.021 35.0938 li
248.084 35.0938 li
248.084 35.0938 li
248.146 35.0938 li
248.146 35.0938 li
248.209 35.0938 li
248.209 35.0938 li
248.271 35.0938 li
248.271 35.0938 li
248.334 35.0938 li
248.334 35.0938 li
248.334 35.0938 li
248.396 35.0938 li
248.396 35.0938 li
248.459 35.0938 li
248.459 35.0938 li
248.521 34.5938 li
248.521 34.5938 li
248.584 34.5938 li
248.584 34.5938 li
248.646 34.5938 li
248.646 34.5938 li
248.709 34.5938 li
248.709 34.5938 li
248.771 34.5938 li
248.771 34.5938 li
248.834 34.5938 li
248.834 34.5938 li
248.834 34.5938 li
248.896 34.5938 li
248.896 34.5938 li
248.959 34.5938 li
248.959 34.0313 li
249.021 34.0313 li
249.021 34.0313 li
249.084 34.0313 li
249.084 34.0313 li
249.146 34.0313 li
249.146 34.0313 li
249.209 34.0313 li
249.209 34.0313 li
249.271 34.0313 li
249.271 33.5313 li
249.271 33.5313 li
249.334 33.5313 li
249.334 33.5313 li
249.396 33.5313 li
249.396 33.5313 li
249.459 33.5313 li
249.459 33.5313 li
249.521 33.5313 li
249.521 33.5313 li
249.584 32.9688 li
249.584 32.9688 li
249.646 32.9688 li
249.646 32.9688 li
249.709 32.9688 li
249.709 32.9688 li
249.771 32.9688 li
249.771 32.9688 li
249.771 32.9688 li
249.834 32.9688 li
249.834 32.4063 li
249.896 32.4063 li
249.896 32.4063 li
249.959 32.4063 li
249.959 32.4063 li
250.021 32.4063 li
250.021 32.4063 li
250.084 32.4063 li
250.084 32.4063 li
250.146 32.4063 li
250.146 32.4063 li
250.209 32.4063 li
250.209 32.4063 li
250.209 32.4063 li
250.271 32.4063 li
250.271 32.4063 li
250.334 32.4063 li
250.334 32.4063 li
250.396 32.4063 li
250.396 32.4063 li
250.459 32.4063 li
250.459 32.4063 li
250.521 32.4063 li
250.521 32.4063 li
250.584 32.4063 li
250.584 32.4063 li
250.646 32.4063 li
250.646 32.4063 li
250.709 32.4063 li
250.709 32.4063 li
250.709 32.4063 li
250.771 32.4063 li
250.771 32.4063 li
250.834 32.4063 li
250.834 32.4063 li
250.896 32.4063 li
250.896 32.4063 li
250.959 32.4063 li
250.959 32.4063 li
251.021 32.4063 li
251.021 32.4063 li
251.084 32.4063 li
251.084 32.4063 li
251.146 32.4063 li
251.146 32.4063 li
251.146 32.4063 li
251.209 32.4063 li
251.209 32.9688 li
251.271 32.9688 li
251.271 32.9688 li
251.334 32.9688 li
251.334 32.9688 li
251.396 32.9688 li
251.396 32.9688 li
251.459 32.9688 li
251.459 32.9688 li
251.521 32.9688 li
251.521 33.5313 li
251.584 33.5313 li
251.584 33.5313 li
251.584 33.5313 li
251.646 33.5313 li
251.646 33.5313 li
251.709 33.5313 li
251.709 33.5313 li
251.771 33.5313 li
251.771 33.5313 li
251.834 34.0313 li
251.834 34.0313 li
251.896 34.0313 li
251.896 34.0313 li
251.959 34.0313 li
251.959 34.0313 li
252.021 34.0313 li
252.021 34.0313 li
252.084 34.0313 li
252.084 34.0313 li
252.084 34.0313 li
252.146 34.0313 li
252.146 34.5938 li
252.209 34.5938 li
252.209 34.5938 li
252.271 34.5938 li
252.271 34.5938 li
252.334 34.5938 li
252.334 34.5938 li
252.396 34.5938 li
252.396 34.5938 li
252.459 34.5938 li
252.459 34.5938 li
252.521 34.5938 li
252.521 34.5938 li
252.521 34.5938 li
252.584 34.5938 li
252.584 34.5938 li
252.646 34.5938 li
252.646 34.5938 li
252.709 34.5938 li
252.709 34.5938 li
252.771 34.5938 li
252.771 34.5938 li
252.834 34.5938 li
252.834 34.5938 li
252.896 34.5938 li
252.896 34.5938 li
252.959 34.5938 li
252.959 34.5938 li
253.021 34.5938 li
253.021 34.5938 li
253.021 34.5938 li
253.084 34.5938 li
253.084 34.5938 li
253.146 34.5938 li
253.146 34.5938 li
253.209 34.5938 li
253.209 34.5938 li
253.271 34.5938 li
253.271 34.5938 li
253.334 34.5938 li
253.334 34.5938 li
253.396 34.5938 li
253.396 34.5938 li
253.459 34.5938 li
253.459 34.0313 li
253.459 34.0313 li
253.521 34.0313 li
253.521 34.0313 li
253.584 34.0313 li
253.584 34.0313 li
253.646 34.0313 li
253.646 34.0313 li
253.709 34.0313 li
253.709 34.0313 li
253.771 34.0313 li
253.771 33.5313 li
253.834 33.5313 li
253.834 33.5313 li
253.896 33.5313 li
253.896 33.5313 li
253.896 33.5313 li
253.959 33.5313 li
253.959 33.5313 li
254.021 33.5313 li
254.021 33.5313 li
254.084 32.9688 li
254.084 32.9688 li
254.146 32.9688 li
254.146 32.9688 li
254.209 32.9688 li
254.209 32.9688 li
254.271 32.9688 li
254.271 32.9688 li
254.334 32.9688 li
254.334 32.9688 li
254.396 32.9688 li
254.396 32.4063 li
254.396 32.4063 li
254.459 32.4063 li
254.459 32.4063 li
254.521 32.4063 li
254.521 32.4063 li
254.584 32.4063 li
254.584 32.4063 li
254.646 32.4063 li
254.646 32.4063 li
254.709 32.4063 li
254.709 32.4063 li
254.771 32.4063 li
254.771 32.4063 li
254.834 32.4063 li
254.834 32.4063 li
254.834 32.4063 li
254.896 32.4063 li
254.896 32.4063 li
254.959 31.9063 li
254.959 32.4063 li
255.021 31.9063 li
255.021 32.4063 li
255.084 32.4063 li
255.084 32.4063 li
255.146 32.4063 li
255.146 32.4063 li
255.209 32.4063 li
255.209 32.4063 li
255.271 32.4063 li
255.271 32.4063 li
255.334 32.4063 li
255.334 32.4063 li
255.334 32.4063 li
255.396 32.4063 li
255.396 32.4063 li
255.459 32.4063 li
255.459 32.4063 li
255.521 32.4063 li
255.521 32.4063 li
255.584 32.4063 li
255.584 32.4063 li
255.646 32.4063 li
255.646 32.4063 li
255.709 32.4063 li
255.709 32.4063 li
255.771 32.9688 li
255.771 32.4063 li
255.771 32.9688 li
255.834 32.9688 li
255.834 32.9688 li
255.896 32.9688 li
255.896 32.9688 li
255.959 32.9688 li
255.959 32.9688 li
256.021 32.9688 li
256.021 32.9688 li
256.084 32.9688 li
256.084 32.9688 li
256.146 33.5313 li
256.146 33.5313 li
256.209 33.5313 li
256.209 33.5313 li
256.271 33.5313 li
256.271 33.5313 li
256.271 33.5313 li
256.334 33.5313 li
256.334 33.5313 li
256.396 33.5313 li
256.396 33.5313 li
256.459 33.5313 li
256.459 34.0313 li
256.521 34.0313 li
256.521 34.0313 li
256.584 34.0313 li
256.584 34.0313 li
256.646 34.0313 li
256.646 34.0313 li
256.709 34.0313 li
256.709 34.0313 li
256.709 34.0313 li
256.771 34.0313 li
256.771 34.0313 li
256.834 34.0313 li
256.834 34.5938 li
256.896 34.5938 li
256.896 34.5938 li
256.959 34.5938 li
256.959 34.5938 li
257.021 34.5938 li
257.021 34.5938 li
257.084 34.5938 li
257.084 34.5938 li
257.146 34.5938 li
257.146 34.5938 li
257.146 34.5938 li
257.209 34.5938 li
257.209 34.5938 li
257.271 34.5938 li
257.271 34.5938 li
257.334 34.5938 li
257.334 34.5938 li
257.396 34.5938 li
257.396 34.5938 li
257.459 34.5938 li
257.459 34.5938 li
257.521 34.5938 li
257.521 34.5938 li
257.584 34.5938 li
257.584 34.5938 li
257.646 34.5938 li
257.646 34.5938 li
257.646 34.5938 li
257.709 34.5938 li
257.709 34.5938 li
257.771 34.5938 li
257.771 34.5938 li
257.834 34.5938 li
257.834 34.5938 li
257.896 34.0313 li
257.896 34.0313 li
257.959 34.0313 li
257.959 34.0313 li
258.021 34.0313 li
258.021 34.0313 li
258.084 34.0313 li
258.084 34.0313 li
258.084 34.0313 li
258.146 34.0313 li
258.146 34.0313 li
258.209 34.0313 li
258.209 34.0313 li
258.271 34.0313 li
258.271 33.5313 li
258.334 33.5313 li
258.334 33.5313 li
258.396 33.5313 li
258.396 33.5313 li
258.459 33.5313 li
258.459 33.5313 li
258.521 33.5313 li
258.521 33.5313 li
258.584 33.5313 li
258.584 33.5313 li
258.584 33.5313 li
258.646 32.9688 li
258.646 32.9688 li
258.709 32.9688 li
258.709 32.9688 li
258.771 32.9688 li
258.771 32.9688 li
258.834 32.9688 li
258.834 32.9688 li
258.896 32.9688 li
258.896 32.9688 li
258.959 32.9688 li
258.959 32.4063 li
259.021 32.4063 li
259.021 32.4063 li
259.021 32.4063 li
259.084 32.4063 li
259.084 32.4063 li
259.146 32.4063 li
259.146 32.4063 li
259.209 32.4063 li
259.209 32.4063 li
259.271 32.4063 li
259.271 32.4063 li
259.334 32.4063 li
259.334 32.4063 li
259.396 32.4063 li
259.396 32.4063 li
259.459 32.4063 li
259.459 32.4063 li
259.521 32.4063 li
259.521 32.4063 li
259.521 32.4063 li
259.584 32.4063 li
259.584 32.4063 li
259.646 32.4063 li
259.646 32.4063 li
259.709 32.4063 li
259.709 32.4063 li
259.771 32.4063 li
259.771 32.4063 li
259.834 32.4063 li
259.834 32.4063 li
259.896 32.4063 li
259.896 32.4063 li
259.959 32.4063 li
259.959 32.4063 li
259.959 32.4063 li
260.021 32.4063 li
260.021 32.4063 li
260.084 32.4063 li
260.084 32.4063 li
260.146 32.4063 li
260.146 32.4063 li
260.209 32.4063 li
260.209 32.4063 li
260.271 32.4063 li
260.271 32.4063 li
260.334 32.4063 li
260.334 32.4063 li
260.396 32.9688 li
260.396 32.9688 li
260.396 32.9688 li
260.459 32.9688 li
260.459 32.9688 li
260.521 32.9688 li
260.521 32.9688 li
260.584 32.9688 li
260.584 32.9688 li
260.646 32.9688 li
260.646 32.9688 li
260.709 33.5313 li
260.709 33.5313 li
260.771 33.5313 li
260.771 33.5313 li
260.834 33.5313 li
260.834 33.5313 li
260.896 33.5313 li
260.896 33.5313 li
260.896 33.5313 li
260.959 33.5313 li
260.959 33.5313 li
261.021 33.5313 li
261.021 34.0313 li
261.084 34.0313 li
261.084 34.0313 li
261.146 34.0313 li
261.146 34.0313 li
261.209 34.0313 li
261.209 34.0313 li
261.271 34.0313 li
261.271 34.0313 li
261.334 34.0313 li
261.334 34.0313 li
261.334 34.0313 li
261.396 34.0313 li
261.396 34.0313 li
261.459 34.0313 li
261.459 34.0313 li
261.521 34.0313 li
261.521 34.5938 li
261.584 34.5938 li
261.584 34.5938 li
261.646 34.5938 li
261.646 34.5938 li
261.709 34.5938 li
261.709 34.5938 li
261.771 34.5938 li
261.771 34.5938 li
261.834 34.5938 li
261.834 34.5938 li
261.834 34.5938 li
261.896 34.5938 li
261.896 34.5938 li
261.959 34.5938 li
261.959 34.5938 li
262.021 34.5938 li
262.021 34.5938 li
262.084 34.5938 li
262.084 34.5938 li
262.146 34.5938 li
262.146 34.5938 li
262.209 34.5938 li
262.209 34.5938 li
262.271 34.5938 li
262.271 34.5938 li
262.271 34.5938 li
262.334 34.0313 li
262.334 34.0313 li
262.396 34.0313 li
262.396 34.0313 li
262.459 34.0313 li
262.459 34.0313 li
262.521 34.0313 li
262.521 34.0313 li
262.584 34.0313 li
262.584 34.0313 li
262.646 34.0313 li
262.646 34.0313 li
262.709 34.0313 li
262.709 34.0313 li
262.709 34.0313 li
262.771 34.0313 li
262.771 33.5313 li
262.834 33.5313 li
262.834 33.5313 li
262.896 33.5313 li
262.896 33.5313 li
262.959 33.5313 li
262.959 33.5313 li
263.021 33.5313 li
263.021 33.5313 li
263.084 33.5313 li
263.084 33.5313 li
263.146 33.5313 li
263.146 32.9688 li
263.209 32.9688 li
263.209 32.9688 li
263.209 32.9688 li
263.271 32.9688 li
263.271 32.9688 li
263.334 32.9688 li
263.334 32.9688 li
263.396 32.9688 li
263.396 32.9688 li
263.459 32.9688 li
263.459 32.9688 li
263.521 32.4063 li
263.521 32.9688 li
263.584 32.4063 li
263.584 32.4063 li
263.646 32.4063 li
263.646 32.4063 li
263.646 32.4063 li
263.709 32.4063 li
263.709 32.4063 li
263.771 32.4063 li
263.771 32.4063 li
263.834 32.4063 li
263.834 32.4063 li
263.896 32.4063 li
263.896 32.4063 li
263.959 32.4063 li
263.959 32.4063 li
264.021 32.4063 li
264.021 32.4063 li
264.084 32.4063 li
264.084 32.4063 li
264.146 32.4063 li
264.146 32.4063 li
264.146 32.4063 li
264.209 32.4063 li
264.209 32.4063 li
264.271 32.4063 li
264.271 32.4063 li
264.334 32.4063 li
264.334 32.4063 li
264.396 32.4063 li
264.396 32.4063 li
264.459 32.4063 li
264.459 32.4063 li
264.521 32.4063 li
264.521 32.4063 li
264.584 32.4063 li
264.584 32.4063 li
264.584 32.4063 li
264.646 32.4063 li
264.646 32.4063 li
264.709 32.4063 li
264.709 32.4063 li
264.771 32.4063 li
264.771 32.4063 li
264.834 32.4063 li
264.834 32.4063 li
264.896 32.9688 li
264.896 32.9688 li
264.959 32.9688 li
264.959 32.9688 li
265.021 32.9688 li
265.021 32.9688 li
265.084 32.9688 li
265.084 32.9688 li
265.084 32.9688 li
265.146 32.9688 li
265.146 32.9688 li
265.209 32.9688 li
265.209 32.9688 li
265.271 33.5313 li
265.271 33.5313 li
265.334 33.5313 li
265.334 33.5313 li
265.396 33.5313 li
265.396 33.5313 li
265.459 33.5313 li
265.459 33.5313 li
265.521 33.5313 li
265.521 33.5313 li
265.521 33.5313 li
265.584 33.5313 li
265.584 33.5313 li
265.646 33.5313 li
265.646 34.0313 li
265.709 34.0313 li
265.709 34.0313 li
265.771 34.0313 li
265.771 34.0313 li
265.834 34.0313 li
265.834 34.0313 li
265.896 34.0313 li
265.896 34.0313 li
265.959 34.0313 li
265.959 34.0313 li
265.959 34.0313 li
266.021 34.0313 li
266.021 34.0313 li
266.084 34.0313 li
266.084 34.0313 li
266.146 34.0313 li
266.146 34.0313 li
266.209 34.0313 li
266.209 34.5938 li
266.271 34.5938 li
266.271 34.5938 li
266.334 34.5938 li
266.334 34.5938 li
266.396 34.5938 li
266.396 34.5938 li
266.459 34.5938 li
266.459 34.5938 li
266.459 34.5938 li
266.521 34.5938 li
266.521 34.5938 li
266.584 34.5938 li
266.584 34.5938 li
266.646 34.5938 li
266.646 34.5938 li
266.709 34.5938 li
266.709 34.5938 li
266.771 34.0313 li
266.771 34.0313 li
266.834 34.5938 li
266.834 34.0313 li
266.896 34.0313 li
266.896 34.0313 li
266.896 34.0313 li
266.959 34.0313 li
266.959 34.0313 li
267.021 34.0313 li
267.021 34.0313 li
267.084 34.0313 li
267.084 34.0313 li
267.146 34.0313 li
267.146 34.0313 li
267.209 34.0313 li
267.209 34.0313 li
267.271 34.0313 li
267.271 34.0313 li
267.334 34.0313 li
267.334 33.5313 li
267.396 33.5313 li
267.396 33.5313 li
267.396 33.5313 li
267.459 33.5313 li
267.459 33.5313 li
267.521 33.5313 li
267.521 33.5313 li
267.584 33.5313 li
267.584 33.5313 li
267.646 33.5313 li
267.646 33.5313 li
267.709 33.5313 li
267.709 32.9688 li
267.771 32.9688 li
267.771 32.9688 li
267.834 32.9688 li
267.834 32.9688 li
267.834 32.9688 li
267.896 32.9688 li
267.896 32.9688 li
267.959 32.9688 li
267.959 32.9688 li
268.021 32.9688 li
268.021 32.9688 li
268.084 32.9688 li
268.084 32.4063 li
268.146 32.4063 li
268.146 32.4063 li
268.209 32.4063 li
268.209 32.4063 li
268.271 32.4063 li
268.271 32.4063 li
268.271 32.4063 li
268.334 32.4063 li
268.334 32.4063 li
268.396 32.4063 li
268.396 32.4063 li
268.459 32.4063 li
268.459 32.4063 li
268.521 32.4063 li
268.521 32.4063 li
268.584 32.4063 li
268.584 32.4063 li
268.646 32.4063 li
268.646 32.4063 li
268.709 32.4063 li
268.709 32.4063 li
268.771 32.4063 li
268.771 32.4063 li
268.771 32.4063 li
268.834 32.4063 li
268.834 32.4063 li
268.896 32.4063 li
268.896 32.4063 li
268.959 32.4063 li
268.959 32.4063 li
269.021 32.4063 li
269.021 32.4063 li
269.084 32.4063 li
269.084 32.4063 li
269.146 32.4063 li
269.146 32.4063 li
269.209 32.4063 li
269.209 32.4063 li
269.209 32.4063 li
269.271 32.4063 li
269.271 32.4063 li
269.334 32.4063 li
269.334 32.4063 li
269.396 32.9688 li
269.396 32.9688 li
269.459 32.9688 li
269.459 32.9688 li
269.521 32.9688 li
269.521 32.9688 li
269.584 32.9688 li
269.584 32.9688 li
269.646 32.9688 li
269.646 32.9688 li
269.709 32.9688 li
269.709 32.9688 li
269.709 32.9688 li
269.771 32.9688 li
269.771 32.9688 li
269.834 32.9688 li
269.834 32.9688 li
269.896 33.5313 li
269.896 33.5313 li
269.959 33.5313 li
269.959 33.5313 li
270.021 33.5313 li
270.021 33.5313 li
270.084 33.5313 li
270.084 33.5313 li
270.146 33.5313 li
270.146 33.5313 li
270.146 33.5313 li
270.209 33.5313 li
270.209 33.5313 li
270.271 34.0313 li
270.271 34.0313 li
270.334 34.0313 li
270.334 34.0313 li
270.396 34.0313 li
270.396 34.0313 li
270.459 34.0313 li
270.459 34.0313 li
270.521 34.0313 li
270.521 34.0313 li
270.584 34.0313 li
270.584 34.0313 li
270.646 34.0313 li
270.646 34.0313 li
270.646 34.0313 li
270.709 34.0313 li
270.709 34.0313 li
270.771 34.0313 li
270.771 34.0313 li
270.834 34.0313 li
270.834 34.0313 li
270.896 34.0313 li
270.896 34.0313 li
270.959 34.0313 li
270.959 34.5938 li
271.021 34.0313 li
271.021 34.0313 li
271.084 34.0313 li
271.084 34.5938 li
271.084 34.0313 li
271.146 34.0313 li
271.146 34.0313 li
271.209 34.0313 li
271.209 34.0313 li
271.271 34.0313 li
271.271 34.0313 li
271.334 34.0313 li
271.334 34.0313 li
271.396 34.0313 li
271.396 34.0313 li
271.459 34.0313 li
271.459 34.0313 li
271.521 34.0313 li
271.521 34.0313 li
271.521 34.0313 li
271.584 34.0313 li
271.584 34.0313 li
271.646 34.0313 li
271.646 34.0313 li
271.709 34.0313 li
271.709 34.0313 li
271.771 34.0313 li
271.771 34.0313 li
271.834 34.0313 li
271.834 33.5313 li
271.896 33.5313 li
271.896 33.5313 li
271.959 33.5313 li
271.959 33.5313 li
272.021 33.5313 li
272.021 33.5313 li
272.021 33.5313 li
272.084 33.5313 li
272.084 33.5313 li
272.146 33.5313 li
272.146 33.5313 li
272.209 33.5313 li
272.209 33.5313 li
272.271 32.9688 li
272.271 32.9688 li
272.334 32.9688 li
272.334 32.9688 li
272.396 32.9688 li
272.396 32.9688 li
272.459 32.9688 li
272.459 32.9688 li
272.459 32.9688 li
272.521 32.9688 li
272.521 32.9688 li
272.584 32.9688 li
272.584 32.9688 li
272.646 32.9688 li
272.646 32.9688 li
272.709 32.9688 li
272.709 32.4063 li
272.771 32.4063 li
272.771 32.4063 li
272.834 32.4063 li
272.834 32.4063 li
272.896 32.4063 li
272.896 32.4063 li
272.959 32.4063 li
272.959 32.4063 li
272.959 32.4063 li
273.021 32.4063 li
273.021 32.4063 li
273.084 32.4063 li
273.084 32.4063 li
273.146 32.4063 li
273.146 32.4063 li
273.209 32.4063 li
273.209 32.4063 li
273.271 32.4063 li
273.271 32.4063 li
273.334 32.4063 li
273.334 32.4063 li
273.396 32.4063 li
273.396 32.4063 li
273.396 32.4063 li
273.459 32.4063 li
273.459 32.4063 li
273.521 32.4063 li
273.521 32.4063 li
273.584 32.4063 li
273.584 32.4063 li
273.646 32.4063 li
273.646 32.4063 li
273.709 32.4063 li
273.709 32.4063 li
273.771 32.4063 li
273.771 32.4063 li
273.834 32.4063 li
273.834 32.4063 li
273.896 32.4063 li
273.896 32.4063 li
273.896 32.4063 li
273.959 32.4063 li
273.959 32.9688 li
274.021 32.9688 li
274.021 32.9688 li
274.084 32.9688 li
274.084 32.9688 li
274.146 32.9688 li
274.146 32.9688 li
274.209 32.9688 li
274.209 32.9688 li
274.271 32.9688 li
274.271 32.9688 li
274.334 32.9688 li
274.334 32.9688 li
274.334 32.9688 li
274.396 32.9688 li
274.396 33.5313 li
274.459 33.5313 li
274.459 33.5313 li
274.521 33.5313 li
274.521 33.5313 li
274.584 33.5313 li
274.584 33.5313 li
274.646 33.5313 li
274.646 33.5313 li
274.709 33.5313 li
274.709 33.5313 li
274.771 33.5313 li
274.771 33.5313 li
274.771 33.5313 li
274.834 33.5313 li
274.834 33.5313 li
274.896 34.0313 li
274.896 34.0313 li
274.959 34.0313 li
274.959 34.0313 li
275.021 34.0313 li
275.021 34.0313 li
275.084 34.0313 li
275.084 34.0313 li
275.146 34.0313 li
275.146 34.0313 li
275.209 34.0313 li
275.209 34.0313 li
275.271 34.0313 li
275.271 34.0313 li
275.271 34.0313 li
275.334 34.0313 li
275.334 34.0313 li
275.396 34.0313 li
275.396 34.0313 li
275.459 34.0313 li
275.459 34.0313 li
275.521 34.0313 li
275.521 34.0313 li
275.584 34.0313 li
275.584 34.0313 li
275.646 34.0313 li
275.646 34.0313 li
275.709 34.0313 li
275.709 34.0313 li
275.709 34.0313 li
275.771 34.0313 li
275.771 34.0313 li
275.834 34.0313 li
275.834 34.0313 li
275.896 34.0313 li
275.896 34.0313 li
275.959 34.0313 li
275.959 34.0313 li
276.021 34.0313 li
276.021 34.0313 li
276.084 34.0313 li
276.084 34.0313 li
276.146 34.0313 li
276.146 34.0313 li
276.209 34.0313 li
276.209 34.0313 li
276.209 34.0313 li
276.271 34.0313 li
276.271 34.0313 li
276.334 33.5313 li
276.334 33.5313 li
276.396 33.5313 li
276.396 33.5313 li
276.459 33.5313 li
276.459 33.5313 li
276.521 33.5313 li
276.521 33.5313 li
276.584 33.5313 li
276.584 33.5313 li
276.646 33.5313 li
276.646 33.5313 li
276.646 33.5313 li
276.709 33.5313 li
276.709 33.5313 li
276.771 33.5313 li
276.771 33.5313 li
276.834 33.5313 li
276.834 32.9688 li
276.896 32.9688 li
276.896 32.9688 li
276.959 32.9688 li
276.959 32.9688 li
277.021 32.9688 li
277.021 32.9688 li
277.084 32.9688 li
277.084 32.9688 li
277.084 32.9688 li
277.146 32.9688 li
277.146 32.9688 li
277.209 32.9688 li
277.209 32.9688 li
277.271 32.9688 li
277.271 32.9688 li
277.334 32.4063 li
277.334 32.4063 li
277.396 32.4063 li
277.396 32.4063 li
277.459 32.4063 li
277.459 32.4063 li
277.521 32.4063 li
277.521 32.4063 li
277.584 32.4063 li
277.584 32.4063 li
277.584 32.4063 li
277.646 32.4063 li
277.646 32.4063 li
277.709 32.4063 li
277.709 32.4063 li
277.771 32.4063 li
277.771 32.4063 li
277.834 32.4063 li
277.834 32.4063 li
277.896 32.4063 li
277.896 32.4063 li
277.959 32.4063 li
277.959 32.4063 li
278.021 32.4063 li
278.021 32.4063 li
278.021 32.4063 li
278.084 32.4063 li
278.084 32.4063 li
278.146 32.4063 li
278.146 32.4063 li
278.209 32.4063 li
278.209 32.4063 li
278.271 32.4063 li
278.271 32.4063 li
278.334 32.4063 li
278.334 32.4063 li
278.396 32.4063 li
278.396 32.4063 li
278.459 32.4063 li
278.459 32.4063 li
278.521 32.4063 li
278.521 32.4063 li
278.521 32.9688 li
278.584 32.9688 li
278.584 32.9688 li
278.646 32.9688 li
278.646 32.9688 li
278.709 32.9688 li
278.709 32.9688 li
278.771 32.9688 li
278.771 32.9688 li
278.834 32.9688 li
278.834 32.9688 li
278.896 32.9688 li
278.896 32.9688 li
278.959 32.9688 li
278.959 32.9688 li
278.959 32.9688 li
279.021 32.9688 li
279.021 33.5313 li
279.084 33.5313 li
279.084 33.5313 li
279.146 33.5313 li
279.146 33.5313 li
279.209 33.5313 li
279.209 33.5313 li
279.271 33.5313 li
279.271 33.5313 li
279.334 33.5313 li
279.334 33.5313 li
279.396 33.5313 li
279.396 33.5313 li
279.459 33.5313 li
279.459 33.5313 li
279.459 34.0313 li
279.521 34.0313 li
279.521 34.0313 li
279.584 34.0313 li
279.584 34.0313 li
279.646 34.0313 li
279.646 34.0313 li
279.709 34.0313 li
279.709 34.0313 li
279.771 34.0313 li
279.771 34.0313 li
279.834 34.0313 li
279.834 34.0313 li
279.896 34.0313 li
279.896 34.0313 li
279.896 34.0313 li
279.959 34.0313 li
279.959 34.0313 li
280.021 34.0313 li
280.021 34.0313 li
280.084 34.0313 li
280.084 34.0313 li
280.146 34.0313 li
280.146 34.0313 li
280.209 34.0313 li
280.209 34.0313 li
280.271 34.0313 li
280.271 34.0313 li
280.334 34.0313 li
280.334 34.0313 li
280.334 34.0313 li
280.396 34.0313 li
280.396 34.0313 li
280.459 34.0313 li
280.459 34.0313 li
280.521 34.0313 li
280.521 34.0313 li
280.584 34.0313 li
280.584 34.0313 li
280.646 34.0313 li
280.646 34.0313 li
280.709 34.0313 li
280.709 34.0313 li
280.771 34.0313 li
280.771 34.0313 li
280.834 33.5313 li
280.834 33.5313 li
280.834 33.5313 li
280.896 33.5313 li
280.896 33.5313 li
280.959 33.5313 li
280.959 33.5313 li
281.021 33.5313 li
281.021 33.5313 li
281.084 33.5313 li
281.084 33.5313 li
281.146 33.5313 li
281.146 33.5313 li
281.209 33.5313 li
281.209 33.5313 li
281.271 33.5313 li
281.271 33.5313 li
281.271 33.5313 li
281.334 33.5313 li
281.334 33.5313 li
281.396 32.9688 li
281.396 32.9688 li
281.459 32.9688 li
281.459 32.9688 li
281.521 32.9688 li
281.521 32.9688 li
281.584 32.9688 li
281.584 32.9688 li
281.646 32.9688 li
281.646 32.9688 li
281.709 32.9688 li
281.709 32.9688 li
281.771 32.9688 li
281.771 32.9688 li
281.771 32.9688 li
281.834 32.9688 li
281.834 32.9688 li
281.896 32.4063 li
281.896 32.4063 li
281.959 32.4063 li
281.959 32.4063 li
282.021 32.4063 li
282.021 32.4063 li
282.084 32.4063 li
282.084 32.4063 li
282.146 32.4063 li
282.146 32.4063 li
282.209 32.4063 li
282.209 32.4063 li
282.209 32.4063 li
282.271 32.4063 li
282.271 32.4063 li
282.334 32.4063 li
282.334 32.4063 li
282.396 32.4063 li
282.396 32.4063 li
282.459 32.4063 li
282.459 32.4063 li
282.521 32.4063 li
282.521 32.4063 li
282.584 32.4063 li
282.584 32.4063 li
282.646 32.4063 li
282.646 32.4063 li
282.646 32.4063 li
282.709 32.4063 li
282.709 32.4063 li
282.771 32.4063 li
282.771 32.4063 li
282.834 32.4063 li
282.834 32.4063 li
282.896 32.4063 li
282.896 32.4063 li
282.959 32.4063 li
282.959 32.4063 li
283.021 32.4063 li
283.021 32.4063 li
283.084 32.4063 li
283.084 32.4063 li
283.146 32.4063 li
283.146 32.9688 li
283.146 32.9688 li
283.209 32.9688 li
283.209 32.9688 li
283.271 32.9688 li
283.271 32.9688 li
283.334 32.9688 li
283.334 32.9688 li
283.396 32.9688 li
283.396 32.9688 li
283.459 32.9688 li
283.459 32.9688 li
283.521 32.9688 li
283.521 32.9688 li
283.584 32.9688 li
283.584 32.9688 li
283.584 33.5313 li
283.646 33.5313 li
283.646 33.5313 li
283.709 33.5313 li
283.709 33.5313 li
283.771 33.5313 li
283.771 33.5313 li
283.834 33.5313 li
283.834 33.5313 li
283.896 33.5313 li
283.896 33.5313 li
283.959 33.5313 li
283.959 33.5313 li
284.021 33.5313 li
284.021 33.5313 li
284.084 33.5313 li
284.084 33.5313 li
284.084 33.5313 li
284.146 33.5313 li
284.146 33.5313 li
284.209 33.5313 li
284.209 33.5313 li
284.271 34.0313 li
284.271 34.0313 li
284.334 34.0313 li
284.334 34.0313 li
284.396 34.0313 li
284.396 34.0313 li
284.459 34.0313 li
284.459 34.0313 li
284.521 34.0313 li
284.521 34.0313 li
284.521 34.0313 li
284.584 34.0313 li
284.584 34.0313 li
284.646 34.0313 li
284.646 34.0313 li
284.709 34.0313 li
284.709 34.0313 li
284.771 34.0313 li
284.771 34.0313 li
284.834 34.0313 li
284.834 34.0313 li
284.896 34.0313 li
284.896 34.0313 li
284.959 34.0313 li
284.959 34.0313 li
285.021 34.0313 li
285.021 34.0313 li
285.021 34.0313 li
285.084 34.0313 li
285.084 34.0313 li
285.146 34.0313 li
285.146 34.0313 li
285.209 34.0313 li
285.209 34.0313 li
285.271 34.0313 li
285.271 34.0313 li
285.334 34.0313 li
285.334 33.5313 li
285.396 33.5313 li
285.396 33.5313 li
285.459 33.5313 li
285.459 33.5313 li
285.459 33.5313 li
285.521 33.5313 li
285.521 33.5313 li
285.584 33.5313 li
285.584 33.5313 li
285.646 33.5313 li
285.646 33.5313 li
285.709 33.5313 li
285.709 33.5313 li
285.771 33.5313 li
285.771 33.5313 li
285.834 33.5313 li
285.834 33.5313 li
285.896 32.9688 li
285.896 32.9688 li
285.896 32.9688 li
285.959 32.9688 li
285.959 32.9688 li
286.021 32.9688 li
286.021 32.9688 li
286.084 32.9688 li
286.084 32.9688 li
286.146 32.9688 li
286.146 32.9688 li
286.209 32.9688 li
286.209 32.9688 li
286.271 32.9688 li
286.271 32.9688 li
286.334 32.9688 li
286.334 32.9688 li
286.396 32.9688 li
286.396 32.9688 li
286.396 32.9688 li
286.459 32.9688 li
286.459 32.4063 li
286.521 32.4063 li
286.521 32.4063 li
286.584 32.4063 li
286.584 32.4063 li
286.646 32.4063 li
286.646 32.4063 li
286.709 32.4063 li
286.709 32.4063 li
286.771 32.4063 li
286.771 32.4063 li
286.834 32.4063 li
286.834 32.4063 li
286.834 32.4063 li
286.896 32.4063 li
286.896 32.4063 li
286.959 32.4063 li
286.959 32.4063 li
287.021 32.4063 li
287.021 32.4063 li
287.084 32.4063 li
287.084 32.4063 li
287.146 32.4063 li
287.146 32.4063 li
287.209 32.4063 li
287.209 32.4063 li
287.271 32.4063 li
287.271 32.4063 li
287.334 32.4063 li
287.334 32.4063 li
287.334 32.4063 li
287.396 32.4063 li
287.396 32.4063 li
287.459 32.4063 li
287.459 32.4063 li
287.521 32.4063 li
287.521 32.4063 li
287.584 32.4063 li
287.584 32.4063 li
287.646 32.4063 li
287.646 32.4063 li
287.709 32.9688 li
287.709 32.9688 li
287.771 32.9688 li
287.771 32.9688 li
287.771 32.9688 li
287.834 32.9688 li
287.834 32.9688 li
287.896 32.9688 li
287.896 32.9688 li
287.959 32.9688 li
287.959 32.9688 li
288.021 32.9688 li
288.021 32.9688 li
288.084 32.9688 li
288.084 32.9688 li
288.146 32.9688 li
288.146 32.9688 li
288.209 32.9688 li
288.209 32.9688 li
288.209 32.9688 li
288.271 32.9688 li
288.271 33.5313 li
288.334 33.5313 li
288.334 33.5313 li
288.396 33.5313 li
288.396 33.5313 li
288.459 33.5313 li
288.459 33.5313 li
288.521 33.5313 li
288.521 33.5313 li
288.584 33.5313 li
288.584 33.5313 li
288.646 33.5313 li
288.646 33.5313 li
288.709 33.5313 li
288.709 33.5313 li
288.709 33.5313 li
288.771 33.5313 li
288.771 33.5313 li
288.834 33.5313 li
288.834 33.5313 li
288.896 33.5313 li
288.896 33.5313 li
288.959 33.5313 li
288.959 33.5313 li
289.021 34.0313 li
289.021 33.5313 li
289.084 34.0313 li
289.084 34.0313 li
289.146 34.0313 li
289.146 34.0313 li
289.146 34.0313 li
289.209 34.0313 li
289.209 34.0313 li
289.271 34.0313 li
289.271 34.0313 li
289.334 34.0313 li
289.334 34.0313 li
289.396 34.0313 li
289.396 34.0313 li
289.459 34.0313 li
289.459 34.0313 li
289.521 34.0313 li
289.521 34.0313 li
289.584 34.0313 li
289.584 34.0313 li
289.646 33.5313 li
289.646 34.0313 li
289.646 34.0313 li
289.709 34.0313 li
289.709 33.5313 li
289.771 33.5313 li
289.771 33.5313 li
289.834 33.5313 li
289.834 33.5313 li
289.896 33.5313 li
289.896 33.5313 li
289.959 33.5313 li
289.959 33.5313 li
290.021 33.5313 li
290.021 33.5313 li
290.084 33.5313 li
290.084 33.5313 li
290.084 33.5313 li
290.146 33.5313 li
290.146 33.5313 li
290.209 33.5313 li
290.209 33.5313 li
290.271 33.5313 li
290.271 33.5313 li
290.334 33.5313 li
290.334 33.5313 li
290.396 33.5313 li
290.396 33.5313 li
290.459 32.9688 li
290.459 32.9688 li
290.521 32.9688 li
290.521 32.9688 li
290.584 32.9688 li
290.584 32.9688 li
290.584 32.9688 li
290.646 32.9688 li
290.646 32.9688 li
290.709 32.9688 li
290.709 32.9688 li
290.771 32.9688 li
290.771 32.9688 li
290.834 32.9688 li
290.834 32.9688 li
290.896 32.9688 li
290.896 32.9688 li
290.959 32.9688 li
290.959 32.9688 li
291.021 32.9688 li
291.021 32.9688 li
291.021 32.9688 li
291.084 32.4063 li
291.084 32.4063 li
291.146 32.4063 li
291.146 32.4063 li
291.209 32.4063 li
291.209 32.4063 li
291.271 32.4063 li
291.271 32.4063 li
291.334 32.4063 li
291.334 32.4063 li
291.396 32.4063 li
291.396 32.4063 li
291.459 32.4063 li
291.459 32.4063 li
291.459 32.4063 li
291.521 32.4063 li
291.521 32.4063 li
291.584 32.4063 li
291.584 32.4063 li
291.646 32.4063 li
291.646 32.4063 li
291.709 32.4063 li
291.709 32.4063 li
291.771 32.4063 li
291.771 32.4063 li
291.834 32.4063 li
291.834 32.4063 li
291.896 32.4063 li
291.896 32.4063 li
291.959 32.4063 li
291.959 32.4063 li
291.959 32.4063 li
292.021 32.4063 li
292.021 32.4063 li
292.084 32.4063 li
292.084 32.4063 li
292.146 32.4063 li
292.146 32.9688 li
292.209 32.9688 li
292.209 32.9688 li
292.271 32.9688 li
292.271 32.9688 li
292.334 32.9688 li
292.334 32.9688 li
292.396 32.9688 li
292.396 32.9688 li
292.396 32.9688 li
292.459 32.9688 li
292.459 32.9688 li
292.521 32.9688 li
292.521 32.9688 li
292.584 32.9688 li
292.584 32.9688 li
292.646 32.9688 li
292.646 32.9688 li
292.709 32.9688 li
292.709 32.9688 li
292.771 32.9688 li
292.771 32.9688 li
292.834 32.9688 li
292.834 32.9688 li
292.896 33.5313 li
292.896 33.5313 li
292.896 33.5313 li
292.959 33.5313 li
292.959 33.5313 li
293.021 33.5313 li
293.021 33.5313 li
293.084 33.5313 li
293.084 33.5313 li
293.146 33.5313 li
293.146 33.5313 li
293.209 33.5313 li
293.209 33.5313 li
293.271 33.5313 li
293.271 33.5313 li
293.334 33.5313 li
293.334 33.5313 li
293.334 33.5313 li
293.396 33.5313 li
293.396 33.5313 li
293.459 33.5313 li
293.459 33.5313 li
293.521 33.5313 li
293.521 33.5313 li
293.584 33.5313 li
293.584 33.5313 li
293.646 33.5313 li
293.646 33.5313 li
293.709 33.5313 li
293.709 33.5313 li
293.771 33.5313 li
293.771 33.5313 li
293.834 33.5313 li
293.834 33.5313 li
293.834 33.5313 li
293.896 33.5313 li
293.896 34.0313 li
293.959 33.5313 li
293.959 33.5313 li
294.021 33.5313 li
294.021 33.5313 li
294.084 33.5313 li
294.084 33.5313 li
294.146 33.5313 li
294.146 33.5313 li
294.209 33.5313 li
294.209 33.5313 li
294.271 33.5313 li
294.271 33.5313 li
294.271 33.5313 li
294.334 33.5313 li
294.334 33.5313 li
294.396 33.5313 li
294.396 33.5313 li
294.459 33.5313 li
294.459 33.5313 li
294.521 33.5313 li
294.521 33.5313 li
294.584 33.5313 li
294.584 33.5313 li
294.646 33.5313 li
294.646 33.5313 li
294.709 33.5313 li
294.709 33.5313 li
294.709 33.5313 li
294.771 33.5313 li
294.771 33.5313 li
294.834 33.5313 li
294.834 33.5313 li
294.896 32.9688 li
294.896 32.9688 li
294.959 32.9688 li
294.959 32.9688 li
295.021 32.9688 li
295.021 32.9688 li
295.084 32.9688 li
295.084 32.9688 li
295.146 32.9688 li
295.146 32.9688 li
295.209 32.9688 li
295.209 32.9688 li
295.209 32.9688 li
295.271 32.9688 li
295.271 32.9688 li
295.334 32.9688 li
295.334 32.9688 li
295.396 32.9688 li
295.396 32.9688 li
295.459 32.9688 li
295.459 32.9688 li
295.521 32.9688 li
295.521 32.9688 li
295.584 32.9688 li
295.584 32.4063 li
295.646 32.4063 li
295.646 32.4063 li
295.646 32.4063 li
295.709 32.4063 li
295.709 32.4063 li
295.771 32.4063 li
295.771 32.4063 li
295.834 32.4063 li
295.834 32.4063 li
295.896 32.4063 li
295.896 32.4063 li
295.959 32.4063 li
295.959 32.4063 li
296.021 32.4063 li
296.021 32.4063 li
296.084 32.4063 li
296.084 32.4063 li
296.146 32.4063 li
296.146 32.4063 li
296.146 32.4063 li
296.209 32.4063 li
296.209 32.4063 li
296.271 32.4063 li
296.271 32.4063 li
296.334 32.4063 li
296.334 32.4063 li
296.396 32.4063 li
296.396 32.4063 li
296.459 32.4063 li
296.459 32.4063 li
296.521 32.4063 li
296.521 32.4063 li
296.584 32.4063 li
296.584 32.4063 li
296.584 32.4063 li
296.646 32.4063 li
296.646 32.4063 li
296.709 32.4063 li
296.709 32.4063 li
296.771 32.4063 li
296.771 32.4063 li
296.834 32.9688 li
296.834 32.9688 li
296.896 32.9688 li
296.896 32.9688 li
296.959 32.9688 li
296.959 32.9688 li
297.021 32.9688 li
297.021 32.9688 li
297.021 32.9688 li
297.084 32.9688 li
297.084 32.9688 li
297.146 32.9688 li
297.146 32.9688 li
297.209 32.9688 li
297.209 32.9688 li
297.271 32.9688 li
297.271 32.9688 li
297.334 32.9688 li
297.334 32.9688 li
297.396 32.9688 li
297.396 32.9688 li
297.459 32.9688 li
297.459 32.9688 li
297.521 32.9688 li
297.521 32.9688 li
297.521 33.5313 li
297.584 32.9688 li
297.584 33.5313 li
297.646 33.5313 li
297.646 33.5313 li
297.709 33.5313 li
297.709 33.5313 li
297.771 33.5313 li
297.771 33.5313 li
297.834 33.5313 li
297.834 33.5313 li
297.896 33.5313 li
297.896 33.5313 li
297.959 33.5313 li
297.959 33.5313 li
297.959 33.5313 li
298.021 33.5313 li
298.021 33.5313 li
298.084 33.5313 li
298.084 33.5313 li
298.146 33.5313 li
298.146 33.5313 li
298.209 33.5313 li
298.209 33.5313 li
298.271 33.5313 li
298.271 33.5313 li
298.334 33.5313 li
298.334 33.5313 li
298.396 33.5313 li
298.396 33.5313 li
298.459 33.5313 li
298.459 33.5313 li
298.459 33.5313 li
298.521 33.5313 li
298.521 33.5313 li
298.584 33.5313 li
298.584 33.5313 li
298.646 33.5313 li
298.646 33.5313 li
298.709 33.5313 li
298.709 33.5313 li
298.771 33.5313 li
298.771 33.5313 li
298.834 33.5313 li
298.834 33.5313 li
298.896 33.5313 li
298.896 33.5313 li
298.896 33.5313 li
298.959 33.5313 li
298.959 33.5313 li
299.021 33.5313 li
299.021 33.5313 li
299.084 33.5313 li
299.084 33.5313 li
299.146 33.5313 li
299.146 33.5313 li
299.209 33.5313 li
299.209 33.5313 li
299.271 33.5313 li
299.271 33.5313 li
299.334 33.5313 li
299.334 33.5313 li
299.396 32.9688 li
299.396 32.9688 li
299.396 32.9688 li
299.459 32.9688 li
299.459 32.9688 li
299.521 32.9688 li
299.521 32.9688 li
299.584 32.9688 li
299.584 32.9688 li
299.646 32.9688 li
299.646 32.9688 li
299.709 32.9688 li
299.709 32.9688 li
299.771 32.9688 li
299.771 32.9688 li
299.834 32.9688 li
299.834 32.9688 li
299.834 32.9688 li
299.896 32.9688 li
299.896 32.9688 li
299.959 32.9688 li
299.959 32.9688 li
300.021 32.9688 li
300.021 32.9688 li
300.084 32.9688 li
300.084 32.4063 li
300.146 32.4063 li
300.146 32.4063 li
300.209 32.4063 li
300.209 32.4063 li
300.271 32.4063 li
300.271 32.4063 li
300.271 32.4063 li
300.334 32.4063 li
300.334 32.4063 li
300.396 32.4063 li
300.396 32.4063 li
300.459 32.4063 li
300.459 32.4063 li
300.521 32.4063 li
300.521 32.4063 li
300.584 32.4063 li
300.584 32.4063 li
300.646 32.4063 li
300.646 32.4063 li
300.709 32.4063 li
300.709 32.4063 li
300.771 32.4063 li
300.771 32.4063 li
300.771 32.4063 li
300.834 32.4063 li
300.834 32.4063 li
300.896 32.4063 li
300.896 32.4063 li
300.959 32.4063 li
300.959 32.4063 li
301.021 32.4063 li
301.021 32.4063 li
301.084 32.4063 li
301.084 32.4063 li
301.146 32.4063 li
301.146 32.4063 li
301.209 32.4063 li
301.209 32.4063 li
301.209 32.4063 li
301.271 32.4063 li
301.271 32.4063 li
301.334 32.4063 li
301.334 32.4063 li
301.396 32.9688 li
301.396 32.4063 li
301.459 32.4063 li
301.459 32.9688 li
301.521 32.9688 li
301.521 32.9688 li
301.584 32.9688 li
301.584 32.9688 li
301.646 32.9688 li
301.646 32.9688 li
301.709 32.9688 li
301.709 32.9688 li
301.709 32.9688 li
301.771 32.9688 li
301.771 32.9688 li
301.834 32.9688 li
301.834 32.9688 li
301.896 32.9688 li
301.896 32.9688 li
301.959 32.9688 li
301.959 32.9688 li
302.021 32.9688 li
302.021 32.9688 li
302.084 32.9688 li
302.084 32.9688 li
302.146 32.9688 li
302.146 32.9688 li
302.146 32.9688 li
302.209 32.9688 li
302.209 33.5313 li
302.271 33.5313 li
302.271 33.5313 li
302.334 33.5313 li
302.334 33.5313 li
302.396 33.5313 li
302.396 33.5313 li
302.459 33.5313 li
302.459 33.5313 li
302.521 33.5313 li
302.521 33.5313 li
302.584 33.5313 li
302.584 33.5313 li
302.584 33.5313 li
302.646 33.5313 li
302.646 33.5313 li
302.709 33.5313 li
302.709 33.5313 li
302.771 33.5313 li
302.771 33.5313 li
302.834 33.5313 li
302.834 33.5313 li
302.896 33.5313 li
302.896 33.5313 li
302.959 33.5313 li
302.959 33.5313 li
303.021 33.5313 li
303.021 33.5313 li
303.084 33.5313 li
303.084 33.5313 li
303.084 33.5313 li
303.146 33.5313 li
303.146 33.5313 li
303.209 33.5313 li
303.209 33.5313 li
303.271 33.5313 li
303.271 33.5313 li
303.334 33.5313 li
303.334 33.5313 li
303.396 33.5313 li
303.396 33.5313 li
303.459 33.5313 li
303.459 33.5313 li
303.521 33.5313 li
303.521 33.5313 li
303.521 33.5313 li
303.584 33.5313 li
303.584 33.5313 li
303.646 33.5313 li
303.646 33.5313 li
303.709 33.5313 li
303.709 33.5313 li
303.771 33.5313 li
303.771 33.5313 li
303.834 33.5313 li
303.834 33.5313 li
303.896 33.5313 li
303.896 32.9688 li
303.959 32.9688 li
303.959 32.9688 li
304.021 32.9688 li
304.021 32.9688 li
304.021 32.9688 li
304.084 32.9688 li
304.084 32.9688 li
304.146 32.9688 li
304.146 32.9688 li
304.209 32.9688 li
304.209 32.9688 li
304.271 32.9688 li
304.271 32.9688 li
304.334 32.9688 li
304.334 32.9688 li
304.396 32.9688 li
304.396 32.9688 li
304.459 32.9688 li
304.459 32.9688 li
304.459 32.9688 li
304.521 32.9688 li
304.521 32.9688 li
304.584 32.9688 li
304.584 32.9688 li
304.646 32.9688 li
304.646 32.9688 li
304.709 32.4063 li
304.709 32.4063 li
304.771 32.4063 li
304.771 32.4063 li
304.834 32.4063 li
304.834 32.4063 li
304.896 32.4063 li
304.896 32.4063 li
304.959 32.4063 li
304.959 32.4063 li
304.959 32.4063 li
305.021 32.4063 li
305.021 32.4063 li
305.084 32.4063 li
305.084 32.4063 li
305.146 32.4063 li
305.146 32.4063 li
305.209 32.4063 li
305.209 32.4063 li
305.271 32.4063 li
305.271 32.4063 li
305.334 32.4063 li
305.334 32.4063 li
305.396 32.4063 li
305.396 32.4063 li
305.396 32.4063 li
305.459 32.4063 li
305.459 32.4063 li
305.521 32.4063 li
305.521 32.4063 li
305.584 32.4063 li
305.584 32.4063 li
305.646 32.4063 li
305.646 32.4063 li
305.709 32.4063 li
305.709 32.4063 li
305.771 32.4063 li
305.771 32.4063 li
305.834 32.4063 li
305.834 32.4063 li
305.834 32.4063 li
305.896 32.4063 li
305.896 32.4063 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.882353 0.768627 0 0 cmyk
@
0.1875 lw
311.521 0.09375 mo
311.521 93.8438 li
30.3965 0.09375 mo
311.521 0.09375 li
30.3965 93.8438 mo
30.3965 0.09375 li
311.521 93.8438 mo
30.3965 93.8438 li
0 0 0 1 cmyk
@
0 lc
35.459 93.8438 mo
35.459 91.3438 li
@
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBSR+Times-Roman /Times-Roman findfont ct_VMDictPut/ZWYBSR+Times-Roman*1 [48{/.notdef}rp /zero 207{/.notdef}rp]ZWYBSR+Times-Roman nfZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf34.0605 103.813 mo(0)sh72.0215 93.8438 mo
72.0215 91.3438 li
64.709 93.8438 mo
64.709 92.3438 li
57.3965 93.8438 mo
57.3965 92.3438 li
50.084 93.8438 mo
50.084 92.3438 li
42.7715 93.8438 mo
42.7715 92.3438 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSR+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7A73D986C0D7DE9D329253DCB6E971CF9F86B9AEBF9128F879E3BA076A7524F8AC6EF0948A0BD36A1BBAD3176809EA5D8C10BC04F27D1FCF8D9BA3577509C082FF1EE49DF22B08F8B21F3A6C3932A3BC82C6C594431B4032E2BEF80E15787B3E427A047FD8FD191291F42BAC74588B21DCB1EB3232C29BA67B72B9A00CCBC571F0227C6EF50964CF91F1B0EC573A04AE3E4DF9447B77BD2A0A959F534BEC79AECEF51C27F8D677FD06B99742B747A695088E88EBCC4A6BCCC7402ABFDFE9926161D96> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSR+Times-Roman /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/ZWYBSR+Times-Roman*1 [48{/.notdef}rp /zero 4{/.notdef}rp /five 202{/.notdef}rp]ZWYBSR+Times-Roman nfZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf70.6543 103.813 mo(5)sh108.646 93.8438 mo
108.646 91.3438 li
101.334 93.8438 mo
101.334 92.3438 li
93.959 93.8438 mo
93.959 92.3438 li
86.6465 93.8438 mo
86.6465 92.3438 li
79.334 93.8438 mo
79.334 92.3438 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSR+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSR+Times-Roman /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/ZWYBSR+Times-Roman*1 [48{/.notdef}rp /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]ZWYBSR+Times-Roman nfZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf106.248 103.813 mo(10)[3 0 ]xsh145.209 93.8438 mo
145.209 91.3438 li
137.896 93.8438 mo
137.896 92.3438 li
130.584 93.8438 mo
130.584 92.3438 li
123.271 93.8438 mo
123.271 92.3438 li
115.959 93.8438 mo
115.959 92.3438 li
@
ZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf142.85 103.813 mo(15)[3 0 ]xsh181.834 93.8438 mo
181.834 91.3438 li
174.521 93.8438 mo
174.521 92.3438 li
167.209 93.8438 mo
167.209 92.3438 li
159.834 93.8438 mo
159.834 92.3438 li
152.521 93.8438 mo
152.521 92.3438 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSR+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSR+Times-Roman /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/ZWYBSR+Times-Roman*1 [48{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]ZWYBSR+Times-Roman nfZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf179.443 103.813 mo(20)[3 0 ]xsh218.396 93.8438 mo
218.396 91.3438 li
211.084 93.8438 mo
211.084 92.3438 li
203.771 93.8438 mo
203.771 92.3438 li
196.459 93.8438 mo
196.459 92.3438 li
189.146 93.8438 mo
189.146 92.3438 li
@
ZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf216.045 103.813 mo(25)[3 0 ]xsh255.021 93.8438 mo
255.021 91.3438 li
247.709 93.8438 mo
247.709 92.3438 li
240.396 93.8438 mo
240.396 92.3438 li
233.084 93.8438 mo
233.084 92.3438 li
225.709 93.8438 mo
225.709 92.3438 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSR+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7A73D960D5C905E34DC81A096980F2B4111B9B099A6DB83E1916FF3E1A9E04B02D3E9232818F77B09A9AACB5832FED542FDDA70002EB05443C3A08AC9203ACF784CB865C5B9F7D872416879897E73175190413158DECCEEC3F81053539EF7A5BA54848FD5EF8191B77C87FC4B2FB70A247D6480306D63973D6D1E40988764838CF4D7C7CFD56B10F551336B687A8CAD70446C673C2BFDC7C6AD86547DB031DFD479DCB051DAF5177334E8CD4B35F8B65FC86BD3BDBBB8D1E2B3149970112D8374721C0AB537409EB4ADF5E62264D22634EE> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSR+Times-Roman /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/ZWYBSR+Times-Roman*1 [48{/.notdef}rp /zero /one /two /three /.notdef /five 202{/.notdef}rp]ZWYBSR+Times-Roman nfZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf252.631 103.813 mo(30)[3 0 ]xsh291.584 93.8438 mo
291.584 91.3438 li
284.271 93.8438 mo
284.271 92.3438 li
276.959 93.8438 mo
276.959 92.3438 li
269.646 93.8438 mo
269.646 92.3438 li
262.334 93.8438 mo
262.334 92.3438 li
@
ZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf289.232 103.813 mo(35)[3 0 ]xsh30.3965 85.7188 mo
32.834 85.7188 li
30.3965 88.4063 mo
31.834 88.4063 li
30.3965 91.0938 mo
31.834 91.0938 li
30.3965 93.7813 mo
31.834 93.7813 li
306.271 93.8438 mo
306.271 92.3438 li
298.896 93.8438 mo
298.896 92.3438 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSR+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSR+Times-Roman /Encoding getdup 46 /period putpop%ADOEndSubsetFont
/ZWYBSR+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /.notdef /five 202{/.notdef}rp]ZWYBSR+Times-Roman nfZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf16.6465 87.7188 mo(0.31)[3 1.5 3 0 ]xsh30.3965 72.2813 mo
32.834 72.2813 li
30.3965 74.9688 mo
31.834 74.9688 li
30.3965 77.6563 mo
31.834 77.6563 li
30.3965 80.3438 mo
31.834 80.3438 li
30.3965 83.0313 mo
31.834 83.0313 li
@
ZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf16.6465 74.2656 mo(0.32)[3 1.5 3 0 ]xsh30.3965 58.7813 mo
32.834 58.7813 li
30.3965 61.4688 mo
31.834 61.4688 li
30.3965 64.1563 mo
31.834 64.1563 li
30.3965 66.9063 mo
31.834 66.9063 li
30.3965 69.5938 mo
31.834 69.5938 li
@
ZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf16.6465 60.7969 mo(0.33)[3 1.5 3 0 ]xsh30.3965 45.3438 mo
32.834 45.3438 li
30.3965 48.0313 mo
31.834 48.0313 li
30.3965 50.7188 mo
31.834 50.7188 li
30.3965 53.4063 mo
31.834 53.4063 li
30.3965 56.0938 mo
31.834 56.0938 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSR+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSR+Times-Roman /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/ZWYBSR+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five 202{/.notdef}rp]ZWYBSR+Times-Roman nfZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf16.6465 47.3438 mo(0.34)[3 1.5 3 0 ]xsh30.3965 31.9063 mo
32.834 31.9063 li
30.3965 34.5938 mo
31.834 34.5938 li
30.3965 37.2813 mo
31.834 37.2813 li
30.3965 39.9688 mo
31.834 39.9688 li
30.3965 42.6563 mo
31.834 42.6563 li
@
ZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf16.6465 33.8828 mo(0.35)[3 1.5 3 0 ]xsh30.3965 18.4063 mo
32.834 18.4063 li
30.3965 21.0938 mo
31.834 21.0938 li
30.3965 23.7813 mo
31.834 23.7813 li
30.3965 26.5313 mo
31.834 26.5313 li
30.3965 29.2188 mo
31.834 29.2188 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSR+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7A73DB6D2877672A15D933475028E1A563F35D9B429BC044364BBEA6C8D8E288B5629F6BF21219495DF799C22E6D194E7EF19D2BF50638A5DFD525E61CAA756DFB58BC6CF02B70355716B1567E587BDF24EE1CD60FDA306A5E8E3EC9A065FDF865555F45DE4B3A9666958B7C5B64C412BD6705A27F81BA359AA5385B74802E199214ED2C08D85C8D9515B8A71A37E696B11B788D46272326187B79B809C5ABF82FEBD4C4DE257125A17BA43> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSR+Times-Roman /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/ZWYBSR+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six 201{/.notdef}rp]ZWYBSR+Times-Roman nfZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf16.6465 20.4297 mo(0.36)[3 1.5 3 0 ]xsh30.3965 4.96875 mo
32.834 4.96875 li
30.3965 7.65625 mo
31.834 7.65625 li
30.3965 10.3438 mo
31.834 10.3438 li
30.3965 13.0313 mo
31.834 13.0313 li
30.3965 15.7188 mo
31.834 15.7188 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSR+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B7A73D94A9F40BC631635D93782351ED8A5F0B041154B50ADFD67B52AFA0970AEE10CFF4587FA64B7C1AB4D8B074E00A1BB2BDDE2ECD9CC66A> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSR+Times-Roman /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/ZWYBSR+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven 200{/.notdef}rp]ZWYBSR+Times-Roman nfZWYBSR+Times-Roman*1 [6 0 0 -6 0 0 ]msf16.6465 6.95313 mo(0.37)[3 1.5 3 0 ]xsh311.521 2.28125 mo
310.084 2.28125 li
311.521 4.96875 mo
309.084 4.96875 li
311.521 7.65625 mo
310.084 7.65625 li
311.521 10.3438 mo
310.084 10.3438 li
311.521 13.0313 mo
310.084 13.0313 li
311.521 15.7188 mo
310.084 15.7188 li
311.521 18.4063 mo
309.084 18.4063 li
311.521 21.0938 mo
310.084 21.0938 li
311.521 23.7813 mo
310.084 23.7813 li
311.521 26.5313 mo
310.084 26.5313 li
311.521 29.2188 mo
310.084 29.2188 li
311.521 31.9063 mo
309.084 31.9063 li
311.521 34.5938 mo
310.084 34.5938 li
311.521 37.2813 mo
310.084 37.2813 li
311.521 39.9688 mo
310.084 39.9688 li
311.521 42.6563 mo
310.084 42.6563 li
311.521 45.3438 mo
309.084 45.3438 li
311.521 48.0313 mo
310.084 48.0313 li
311.521 50.7188 mo
310.084 50.7188 li
311.521 53.4063 mo
310.084 53.4063 li
311.521 56.0938 mo
310.084 56.0938 li
311.521 58.7813 mo
309.084 58.7813 li
311.521 61.4688 mo
310.084 61.4688 li
311.521 64.1563 mo
310.084 64.1563 li
311.521 66.9063 mo
310.084 66.9063 li
311.521 69.5938 mo
310.084 69.5938 li
311.521 72.2813 mo
309.084 72.2813 li
311.521 74.9688 mo
310.084 74.9688 li
311.521 77.6563 mo
310.084 77.6563 li
311.521 80.3438 mo
310.084 80.3438 li
311.521 83.0313 mo
310.084 83.0313 li
311.521 85.7188 mo
309.084 85.7188 li
311.521 88.4063 mo
310.084 88.4063 li
311.521 91.0938 mo
310.084 91.0938 li
311.521 93.7813 mo
310.084 93.7813 li
306.271 0.09375 mo
306.271 1.59375 li
298.896 0.09375 mo
298.896 1.59375 li
291.584 0.09375 mo
291.584 2.53125 li
284.271 0.09375 mo
284.271 1.59375 li
276.959 0.09375 mo
276.959 1.59375 li
269.646 0.09375 mo
269.646 1.59375 li
262.334 0.09375 mo
262.334 1.59375 li
255.021 0.09375 mo
255.021 2.53125 li
247.709 0.09375 mo
247.709 1.59375 li
240.396 0.09375 mo
240.396 1.59375 li
233.084 0.09375 mo
233.084 1.59375 li
225.709 0.09375 mo
225.709 1.59375 li
218.396 0.09375 mo
218.396 2.53125 li
211.084 0.09375 mo
211.084 1.59375 li
203.771 0.09375 mo
203.771 1.59375 li
196.459 0.09375 mo
196.459 1.59375 li
189.146 0.09375 mo
189.146 1.59375 li
181.834 0.09375 mo
181.834 2.53125 li
174.521 0.09375 mo
174.521 1.59375 li
167.209 0.09375 mo
167.209 1.59375 li
159.834 0.09375 mo
159.834 1.59375 li
152.521 0.09375 mo
152.521 1.59375 li
145.209 0.09375 mo
145.209 2.53125 li
137.896 0.09375 mo
137.896 1.59375 li
130.584 0.09375 mo
130.584 1.59375 li
123.271 0.09375 mo
123.271 1.59375 li
115.959 0.09375 mo
115.959 1.59375 li
108.646 0.09375 mo
108.646 2.53125 li
101.334 0.09375 mo
101.334 1.59375 li
93.959 0.09375 mo
93.959 1.59375 li
86.6465 0.09375 mo
86.6465 1.59375 li
79.334 0.09375 mo
79.334 1.59375 li
72.0215 0.09375 mo
72.0215 2.53125 li
64.709 0.09375 mo
64.709 1.59375 li
57.3965 0.09375 mo
57.3965 1.59375 li
50.084 0.09375 mo
50.084 1.59375 li
42.7715 0.09375 mo
42.7715 1.59375 li
35.459 0.09375 mo
35.459 2.53125 li
30.3965 2.28125 mo
31.834 2.28125 li
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TimesNewRomanPSMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 70 /F putdup 84 /T putdup 97 /a putdup 98 /b putdup 99 /c putdup 101 /e putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 117 /u putdef/FontBBox {-568 -307 2000 1007} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings18 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB222483BD74F8B> |-/space <1C60D8A8C9B8707C25> |-/parenleft <1C60D8A8C9B81F2C3AC09B674C4ECE2BEF4D70AD3508D915EA9AE12419376F6EEF231ECE8179CA4531F29291ACACE060AEF98AD6F2FFF2BEA533946FFA1C8BC3953D72A31BB8ABD9782D71B2146F964D99646263E2D414F84FA049D36B9B13B7F6C8AA7A4A5EB0> |-/parenright <1C60D8A8C9B81F2C3CA029BC286E27661FD7F18B990CFF4A0AF58404A2F35E11D14FBA406192D392AD203A879E34B8FA3132863211808E5BD63BDAA607B8E04E23E92C61AAA8B57E5E7609689020D20EB927A1EC6CC0BC06B540A016D558248DC4A3E8183F5F> |-/F <1C60D8A8C9B7EF322BE6235043C5A7A6ECCDDDC390BE41D3E01CEDAA91CB335118BB7C10CD87A1A789356A0826D033ECDD0352DC64AE55B383C11F3EB18A6F42CD78A260CB051779A3B4D92350DD65D27B671C1609DC36FBFF44C40F44FB014C0462CFF40EA9650CDFB895B99B69FA8BD3EB8152DF452581818551FCC7745E9E79F62FD5E1668E4EFD8B2F33AB5D5ED30AB06AFD78EF98B1A68AA26FC8B4D7DDC1356637FA048F199EDF19A428> |-/T <1C60D8A8C9B7D8BE514ED6977CE9F9E5860FEBB6D8EBF5879FDED6C1E48F6AFEEE7B65DB6C9D492058CAA103CB13A7A80B0015E85F272BB9775991CD97556EC3CFB46A4E1606F006216EABEB711074247C72C159202F32CC7F5F403FAE58110685510DDB32C57700D5067C975D7063A496FE85C1E5> |-/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272EF1EF1464C3F0D45D7CBB8749AF571E09> |-/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9AF110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D399924398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D6603C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83F23AED1F56FC130F21> |-/c <1C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438ECC54400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F42A6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F9C2999730E7919239B324086FEA852156F456647AA0692084759C352D6998971799F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |-/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984A59E1CFFFD06EA629758085868D3F5F7204292> |-/i <1C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE365B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A640085090E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCBCB8CA3E9F85837FAC6> |-/l <1C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C4304B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B6828D244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE5527D6441CE02F5A28D63A618F> |-/m <1C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE11167932D24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA1816E9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747A2556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68FD574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F249107C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D18CE6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE955617323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D987ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FAFEC679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE82B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B517996> |-/n <1C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7BC81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD9D4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494DF60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B280026130687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F2E277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6A0027198438FE663C2EACF82CEB86F7C727594> |-/o <1C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD4416250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF996A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA436702294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68D9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |-/r <1C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2CE6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E983E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B53A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA455AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D8C360275B503E4954E912CD342> |-/s <1C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC22ACE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A039A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF40BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359FAAB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C593B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF509B93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |-/u <1C60D8A8C9B7A73DB9860E0681DA8AEA1E5FBC1C72A452614FEB33CC58A199CCF544A550BDEE35652D618DE4A02AA9CF0753ADA232102DC8DC25CB958152D1B74BC447B68C074C25C2126470565A20B42A419CDD0C7A1DA63C6A764D555B867A9BE961ADBD0AF5B2007F47FCC9435F8B51D3F3A5D83941DD57A0C4D32E169A6BACC26F8AD3C9372F1114911D1D3F3FB2725FADBF9F529AA2CFB178B79F97520325221F3417C7781EB09765> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBSS+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut/ZWYBSS+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 28{/.notdef}rp /F 13{/.notdef}rp /T 12{/.notdef}rp /a /b /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /.notdef /u 138{/.notdef}rp]ZWYBSS+TimesNewRomanPSMT nfZWYBSS+TimesNewRomanPSMT*1 [4.04069e-10 -9 -9 -4.04069e-10 0 0 ]msf7.47949 79.3438 mo(Fluorescence \(arb\))[-5.00537 -2.50049 -4.5 -4.5 -2.99707 -3.99463 -3.50244 -3.99463 -3.99463 -4.5 -3.99463 -3.99463 -2.25 -2.99707 -3.99463 -2.99707 -4.5 0 ]yshZWYBSS+TimesNewRomanPSMT*1 [9 0 0 -9 0 0 ]msf153.313 120.01 mo(Time \(ms\))[5.18115 2.50049 7.00049 3.99463 2.25 2.99707 7.00049 3.50244 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/ZWYBSS+TimesNewRomanPSMT*1 uf/ZWYBSS+TimesNewRomanPSMT uf/TimesNewRomanPSMT uf/ZWYBSR+Times-Roman*1 uf/ZWYBSR+Times-Roman uf/Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (steven schowalter) ()%%Title: (rabi.eps)%%CreationDate: 5/12/09 11:25 AM%AI9_DataStream%Gb"-6kB\>adP,ubJ9q:NfO.S^68sp8S9']-Yg"!e-EOoCrUF1jVpGdQNeBF!ht*@@ca)BWC8k14.[<V+;E.qJ:O9-<n"\P82]l!u%%K%ja1DqX?B$u6L\DB5aO2NeF25=bk_5*;g/&=n_:[2(W".uM`/ZidG]5kYHq/5rHVo*ti4W9U^h>VAX&!hZ'HGQAr#C+]'hR0uO%rdTO=DPR$HI8]J,`h;O,kIWlLSG0c;4n(4]T9%b,6'0QRUJ($=MofARmBg*s5:u55?E0Q6]@n?U2o\-H.7'?&]G)`aDX2Q<rRN%P%K4ubB_<MEFs(VZJ#CV,PA+3g.fq#M(Vk=:^f%r?14b>>-0Bhk_p37"E"qZpu)Ps4@".gG,TTmZsF\)VKZT19/)>t^i!$S270$/E?%%RqMbgE3!6Gh<jWqRrdTDYCC74m4fDD)<;J8P4TNcuniAqqEM*\qiu#Z4]iAZ9^HDTJcY5%9!(q:A[8$0J^mJDqlF_iXVT(R[@!,%iV9/=5G7J6,R(N;KV@RmDL6WYlTgUX3pHFGUOK9"7@c?NX`bYF$5322Aj:9dbJs%H4U,`RmnR7D;(MDV(l-#Kn+L^2e>C!N%,/D<%r\_Pn<jT$V3VZMZb#0Q&bfP0-aeBPki$i0C-):/BKO>P!!`F(L%*g:=Y*3;WUXRC*Gi`7H_bQ+!@87,Dp]j,KWH%t(jF<+5kjE]N%mMRtdSgkbcHGBe,?/Po>5678H)BD@!713]mjT(Pi)":kB0lH'))*+`#lg91S`SY1H=VCM-WpjXZ$\.G&r)kK]W2d_lWX@X`.X\:s%phdDG^W'VlZ`mCe$_O_-==TeoV6\chQ.2f!Y`,a&1-518^XdO09%RK#p_Wi799i,R<2g#8/=#._;@/Yg<oMeJ24K;,=0(h=[>M`8%(h7qJ5.F&Z(4Jj3X(iacJ&5*f:[f__"oC]6MVl5k_4Rq?lk0.%qb8Ji^P.)f5N*:B&c;rN_K<XP_]HXdYi"q/KYfph2DI(/qlge$%(]4T_<3$R"`Wot5BoK$IW<@_106,;mp)&"4)f?[*:<&*S_#IdkfK]-Eeq?O)pDUfa,6iY8;QtX]KJ?Kr\$1AO-[^NZ_rD8W@a#tu%re.+Us56[8MO7$j?#fbG7D]-<F2C.PbV4L5lECu")kdZ-3Q<+LNq(!RigRu6i=b2n/-C5h3"tuqIZ8]6hnoB/T<K$lDqI9J'DsH[%$-U-@"i>r!M<nWmi>++k'-8L56F[J6N]@:7!g*jGVO6cg4%seP/uBT+S;[a<)o`na,-BnZnb;fAreE5KP)6^eO#a'HY+^aP@K'id%NkYmRM6o%[,'7;,O1CbL4l\d%2<,i(l"lRjQ.\,^N!L`gf8LUN=+W)>(Y=S[P[t1"K>4ZlP`:0MK&<fipg6(AT@n/\0+\>b%f44p%j+"TZIV-@b5>B&ARRZ#^N.6N_I`$WpJ&NU\B#!lN5e((=&G@(CX&SREqi1VIoH2ZIE9uLY4KeII4Q51jInI;:c;_t"Uh<h&(URr-%qEOo($4#%El&F0Lp,0[i^"`<\D<K'7[orKj/&VBB$@5q%.B%pi/u.>`nF'8_TGR683Eq1WM96)UjJqu<CCcZWN@,bG="77o5^/Oa%>?Ei$KDRh;bJRLU"q9DoIoi[[^N#f)pj\Qnc]sb8`YUhT^GCb11\qPQ#/Y*D4-MttPd:O/)t5LZRjuDb[K>16$S(qs^c/#f2%q!P%>W;K9^^^#cD,@>ap)<XoZiN0@B=*M!;@00BVm8$%mH(@P*MZDFcM/I1K`B?5)D`\"f)Q6R&_1K-htRRHe/[`aOqQ3<.]0WWECKh(%9'CI6N%B:@MoOY15*5KBhaZAbN+0esN.fSogbPb$$?SrVdMtPMH.H2r8BS^h&W2GF_so@XkT([4IXGfZ3qkjT8&tYII`(&6h[t+`%l$nF4)KQ@K\!_RLB-I<rCTd-)pGmnP#)s[#XB!=J\1I&"O"Z9>c@/-\g#J!;b]#K(a3b@f3Te+T&[Y\0rDE)E$i^>,8C*CQ!Nmbs%Np8s$aS3tne%cs@fJCC7@L#DlaD3,$.Z3$%o:8c%1rii+8ehqtF[BS-5Kj`#Do)rte8Hm.KR^#`FH/mDWjPGgNgE&]6cc7H?\FX,%BW>#mn`XELkM(R]$.+[rU8X3I(5!OCd*K5p%#7%b0jL2cQ3T<C);1glW'nLG%..Gc!f/#&MoZmgS;'MVE,u='H_sYRmi\2?dkBXk%$DT#>%G2)?\Xh-0[TCaH]LK_IMku)l1?8`>6lK.3p6a'HF=ts8S8%I<VB4.!GVk3bZdHR7X\'n*oU"k2N.>u<T.Q1iE;C&;3;=sn%^9Z,8d)N<!:cfNc8rferUF#>f_9]>lS]s?C]U;M=fWc3N\omr%kWoqV3?E**6hHX9a/Olo$tgA_>1aLV98jXD\5$Pbk'B\]K?W[a%P9S5ukgL<j"t,biQO$nPi&O>$nhhpbm1_=NEjHFV"BU@R7Z;)$Sbp,ha0dIb*I_Y#bu?T*@fC1/D"ZGGnl$4Pa>;J:$YZ"K)nXPb%J*VG&F-j(m<F^g[XR5l^>&:Z!&Y>qga4i`M%Y'`lm@[LUE#ImL6\go1]Wf/MjA8E7?Q8I$[Nt=3hr&[NV$Z[IRY"q&oH3oKag"\J%K,U%i#ucg:NQYDNg8^sTroM:)04K?gk>SH\3W$FYPAiUf,lFjGnP?Ahpan*%T<O<6FUs.uq$Yeb89.SI3[e7t[@e$Bs&J?66T=Ii%GSa/2rGMW;^S?:R2](lOA.WtkW-[`AdN>qgS_clG*RqEpO(%(@2Y9qF$E['M#i:M<Kct]3.Q,t_::JtK<>s-(\=GZ%GIjo"l@]iZ%Uornt%:#][C.gFQSRHU1rSDDkRqf/_q"k8q]LaSkUFu_K2ZC).IG1QjG&[*p>c,E(l-M1K<.,n>a(>.XCnE64Ve,`BPmK'(_*o`Q%BHT1+AQt.TO7k9X!XQ6hW@"9^C,Bf=]<E*HFq]21;f@k;[lmIq)FI&H_.O+&n_NE:hR\506fdJ:[C&oWro!OToC4h9NJEKoqn"T\%8mr]QF3.a<ghOU%$C0,_W7r/;"t403SW(9E]a62WIfF<[;Vr-"*3bYP^\bq"HQ,r7l*]L-hi1KSdY/4-5Qef]epf%6&aX&/s.<Vt%rGT$spdT`7mclVJ?17mnlFkpWK53p9@fhCrrS8Q>g[AYGKIP=:FuofYo?j5YCo7Vb0FA#j)8@Z#53.i4$_W`!J"pA,OTC;9V;q[/%M4PP("'_=G3flWUd4!9.k[3er"s217ACsD>,"\JQUF0#H+SFRl*B)OP[%&%bG5<f3+D@jES@pdLD2KH^!(Fr#rQ,>L80Cpj=L>sD%?,2t-Tu^4fC%a6.O(['->%eE_3l-MF\GAb2:N2.@>iLXEjpJk<_3#Xq3[sK44:pD0jq.+\Y`4PuRReR*87RJdUcp0>O2c/0h/,j*%5S!\)p/e9I!8dr4.qkt1Zi>&+RXDU9_.2sImo^ek<TuC<E'lB&I,Xeq9`'8L.K3>)08B4p0(3e65R3J;JsXAHqssKS4^ICOcD&Qi%,Jf$<VQ:m9_!452b(bKSauM<_#-.VXBlq0Y2V%'*"$mt-k/8>O%OqIcGImn/%6ao*9nlgOBVBFDd;=$_hc$2?he7p&2&Q$kP:"XR%*Dkc5C0ONJVPd2'gE2D_5h7_?TTYs9#A$&bC(.l_ru,#'>,pBGNZ18Q:)dXF`;b>@]oR>58P?:,(C8U8`UE9)IeP.BJ"(bU_'FI1%,X2If!]S@*`rl*+HTCIg^oQ1n58ih\hYVjpU"+X.#>Z<!cX=!cKROUE)DM(+`*WN.@HX7@L*[e06.E<Vb9>XEr<T"-r;p^QHu&f8%?PepO\F!SL72,(k%YMaZAFpbPm.\++5P$C_V?'._=T6(1NDoI8n"b^fD/IBC+LY5dNrSEK!Mu>k!&+AACG.Q\'Su+1:=H?HS+j99%r,.D3Wnk\!c+Z]/jL5Z.7$?@DI5>d%+K&'-1qW.5hn\+Ep9(OQId[f^3O0fAV>!ctgE1B*;@&XCK/\eK^o_?29L**rJ:o%jAn:7X%%q*1GnD^c/BHqW>T2ek]_?V$()nj6FLu>X4W."aH!e"Z]8JjoIbs8\_X1h!=>pnq4%1LQ"rs%1@O?2S+RgV@^o)PUn+#K6DDLApG%nNcB6o*lBfGq0%o_#GJW&s=CADh!CpIIP91!;]JF*BXZm4A!@)JDQlmEjrgo_>W!l"G*k.#JY-0%'&%=Bib6ac).>Pe#`IkRT9>^%Zg-F^2Z7igc2=,EZ[\n+gtui>mqA]mhpG>i^S@V\s0$4;#68U7]&P0!L.OKOr9q&p!2'MaOA#c(Jo@`%#HZ>N%46H\H[D1]Vi>R5%(r6LPdl7<ZMIE<ZgUI1rY_8@72?TjGM?dj5)B7`K<6#N#V44F!/B3]$iE+ZpK[oub"rL;b!$*OJE$]M-fL,Lu,0tcqi)9lkFrJ9U%kZJCmMSN[*VAs8!pl8iGJ^HFo[R]^.Yi5HY["eb9$s7tu>s;qF4+gqI&,G_P+E[>MHc?kb_\`9n(jaqg@"A)\D52(8p?;"UheLmi%]+L#"qq^Xjf*P9qYk'aje*dX]@0;kmdo@rlI]cZAZdWb#gHAe2$)[F38C=p9a7qU#e)B'&C2`b8:LcB<!4%)/LAiN@d=3(j#q68@%,DU;&TJpgE"-\l3l$k.)J3IlJ+AB9%r+`_=:kk3>&7a#>YI>"a:QU"s%5>gkH[Lc5iS?`4oR_gI:.iU1Pjm6':?/J2p;?ZsU\__s%d.@;4(3NaO068u:??7k?pV6a2-Mqk3Qle3D<!_Yp+C]fQnW1is^u`<:Q2`L.l0/(1s2D>7?P\8k\'t94Y)?:_:1iSr.!4<`FIi=*%T2'2"l">[/Jq$i*bDMJ,AbD!`Y<L][S(CHF8BJX$0:KZ?dBA%Jal;4HNKJnZd@9$BHLq#PpP(:@S\"@B*s7_bYl-c*fnt6)Ac:c+%@/<B>n"N#a2VTXlpoi$D@$^ZD."&MEN>=4'k/B]['9D7@i=GIr?!Q?uNOYoi,+4'QX!P8;^)Nh#Jal6_r`CT!k]RBSbRs)R%6@&h%8fNk(^H85N(&!65ag`ETDnpUtcMt7'DAGApBFNV4i2H61kp#;WGmIi8`c1k,D[]jd-;8/4hFeJ5@<0m,;,`=$g<FVe(jp+@)ni,V%=^1@?\G`V`APc87'#Fi7UHZoq%_faZ"r)lD:ru7]Zk1uep?7]`)"f;u;Q=$'s6>/(4?t7gJbL_CPV/@R5FIH8TR_C^faO<L*9\3'%!WIbk'X$)5f]\;!%D][%hZ/@*$Od@[1!_=X.#cQ$7S,,!F'434hQuE&eIIH9_\60V;Do!&.<-V>!_*Gr>+KZnXjcZrJ(%7>$mu:Z%V\0/J"qMZdO%JB,*B`^"aO!?sNnUV\jI7)1kQnrgFdbR=M*0PC<i)mS:`9S,hnro>R\kn!G.6<FKA$h4bsiLu2+$d!VA!-V&&uBO%Q2-U@lV"_hJut2;J/t-X@B84i+r!]kpW'/_Alc+*?9f8qdWS3Y:$)b?MRYWdPormQUlGhH5LpJ]e4PVCZDh40[j5>g.+Ftd(5iX;%kQ1e\BU`uWMiGG3K/]HE^7qci_Jm0HW"$#l[3]9K\2ghOItP!75t6(?M$CD1`$LqqW!@Ztjt@6gHH72b+*@i4*13)Q>1A35Vcj;,%"PrJl_sMou]A7NG!HY@";V,$-(O7<Ed^HZ-%E?4Ml%.5/=T&RFdCV?)nQ`Y8;T-*$6V)YC9Ea*=3^[^b[W&u;&ZfP\\X]Q40'8X*%\@=K*b[&1pH2#iVr(NT2Je$k<",\<5dPe@n7>aRpDR+t36p+0(.,nPrr6-S8X=$6i$sMQHFgpNQWBn^Ojk.==^Q:<>I_O`J0MHZJ%Bf8O"h!D6*\8TS[)*R@nEl_;"3T`T208nF:<%V722IY;=o\\OrmBK`t:SF/X\nncESW@*pA3nla6ppi`XCF@#p>7sf[Z>Hgd9C8]%h&*X<`FXd)>L-3Yfc>ZYV[(`?(n0,1W5=]s9u"O9R9[lE>KQjUMREb`@)7&[LHbUQs"W0DTbNq-ppt8G&[i$#lo#'i:S6bJEQ2kb%nbn^U$QEJpplcfl!>Ze9RXVsO6T4@kl1cWkN%NZ!U-PNJ,3HOHNi5<$T`\nEO((Io\)3r/10WQR_iY=H;*dIQFpghSV]U:#VCKGQ%=\_Q`.*\fLXCH7;;DU(<m@uASg.,9UCEKAVj^oBopYIm_l4/R;rLTM:%Rs$';%6r7L?fD3P!Jo\[:g'bjlToCaaXQ;Tr;5Cr,,U,%_iG];jU<^t[b-]8j`(-MF,e)gE+G8@foG'j(g2?L7a<SE^QTqSU\XlC:%toErUD8?"`+JTjrCHTS=>4DN+q)*)qf4'jHMu+G:^^[%S0Pf\!nsFbI/=p8%m0eVCgFF`pn!lo/ebBZ4ZQ6GD3GB4#mgt_:Ok)m$KjPcDRM><[%+e+L>dp^oE!,4_mt9`99$a0[nZ/Y/E\c'%iBi07o=#*[U,(!MaGm!gbdc,urZXj,5Cua8*bCFVopRUi6p'+rN"q^o88QJ.-?#\]MS8$7JjjM-<OKM_i,ZW@8?_smB#/uPq@-FR%0\1R<A\'Wr\;db)%3qn-cUJ;>hRVjJ!S1">2s'B7,bPoImR8MR#qRZ0*S__n?-EIO@-#aY<1l+:`oeUpmOl:W=\j?<?O?h!DY/7n%H#2qG6)D6$0[T'C9-[N[Me)=Sr<=%`NA48$O-,?iPLIQcn/oVZ5maFncI013Al&[a#s1<8jPl^b"]@$fEeB3!>S]kF%Vp_TiG_;s%DC4fR.1#)[E7J4'..-D9R;s8?#1a^IcFi:K44eC".2=pJO6q=T<VVoDhE8u^oYh^H$bb1hG:pqTo"/6*W\9u_29PC9h)9\^`4!st%T:tIfQk%*=TD&EG:dRfgTia*r&W4<:CCjYU`Euf::pfiE%7S=VNg/8/Mk]>iTi1M64]4a>!4hZ%HKX@3>:jTiQG(UnhesiJX8Uh5%.^do5WW(<u"iA19:2!OQ4dm?*lIk;kWa<2".,S+006U9(W=OmTInQoo]/"6b"CmA$-:Lum8XAe!V>&\RW,V<TGu`\%UjnMe+-)(C%Ab6H/dQ;d``Kb0]'YBFE6Aa4GD(+2*%q,E0Tu=Zo)iAK^m3gFO*W30"#cC2Xar+sD_"Mo##LZn9D.hIebO&_X;McD7hNSQE65Si;%)OL"r1,[5(1YoO_&*QK[?DqN-iUTb1o:br*XBafrG'Ds(Z'iC5X1t6lB\*I.88d7[E@6\Cd4s6YfHEejF;[pSp+%L+Jg37&CcnLZ%2mc.m],"R]6NZc*C<GW*oaO%7\cu"LSMisH_l%2D84o^3,+pSof>0_'De&P+,pg;95*UEL5bLT=Y-MWZ7Pe]Bf?gZtfU%TFlgX.O%I"e#s2HkFMSi7:>D5/?C7WrORT%:f50@XYXD!C9JdctL_V*D2"F?"P?Y!h,Ic6)ElQ)`9XVHosJ0PEAV]V98Ulh1HVh`XT^bMnq,%:RA)6I/'LYFDfiHD7P.P)ML:#p,0Ip[XXZ.EZ3K/iF>g>LQ+d*jB]>o_jU$5pak66NIk4#W9.0iNP;!eXU1bk^<G-=W)7iRn5_8&%qD<T2IQMae2#i`LC42o)\F@c&7\:?\a,Z/A;XYE;p5Nqkh)3?q7RElC(#8.imQ#^mGo4#+FL8K)-Ta/Rq2DHkgGSjtds$"6<L8_3%.s?>HWda#0cG,VX]1/X^do4ejdHkoKX*7MU)MP:1br2A$r:SdXd@+$:CI`Dh[cAG^a*3J3mh-3uBQfEb>E;=9JS$En?WC$3ml.)\%>XF1)Y$2gH\,/QkEs&\FLCa+gTi%[=Zcfn_<qY.FdB[l$rhS:-](_EGrA?]$[r(bH@nd,)C#@P/nj3.>PoL]j84XOMd3\ZZ&*iQB%L\kb<2&ZaAc!IUH4rbNTpcLA)Y>(cLl2"elC#A-J)@hG(Wk4a)[XGh1ln:@WHMp`G)ETg&,2MT*PZacS03khRgQe,gZ_o2*7\<Gi%p)G%MFdHfB*?'@U!%1!j\dA8J*rd.+TBM_YgZZgeU?C1m0ROH?Yt!\'`lmY4<9\f!gGZ&P-^I*2:PfEl2#ed-c/^2F@PmqY7KoIl%KVS9sNHNaPZF1dQS,7L[]rpN+YgKslVKr"1ZRYFY>_5GSL6h)+^Udu53o5^EEA@2F"=EsnDR=X9n!R0aHoS^k%`(Vu<h6Ua+?_<9%Kgl*^2X3q<h!C&KO:YB"I#pO@7?+;tq9ji)d?W[pn^`>P8n(SOKm')-msZYr(A2V.=2&?)RQjFP"CCB&?SCsAeo&-2bp_,G<hK87%]=2HCcID=.jR6l^Y<RR=(7mM""ff&ElL5RJ^hTqb2RK=1rmf:#n$AJ\6LZ%EC#[n(kL-KmgYD%"rfOn%N4u0jT>*F9XaN+!f,WZ`%Ph#Z.h-7dO3K3WS'Z[BfhbN#e*8d>=2;d[/DmfFVIIh2A./(CKUC1F9`B"sQN48@U?@;XYJ'i=bHX2XD.hfY);!]P,Q3oX$IIgRd%D`PO[%6s#Vm+rWpq_^PXe/c='\lO]$Nc2\IWnYipDZQi_2DUM+f(]&6HMc:`D6rt[ETm%<270sh\F*%qeOnfaXmPoV^9Y'j42!5!%Pa,q=O^a`i<7tG&^!9,+"IY9USrIoP\#&/_nFlF\[U*p!qmjGHP<P]TZ['<,^O*i49ukS>eLOnpPnNC/WO;Fr,0R]>QX?1]?SZHJ%7HT#I[5hQE$V@_$]F2\CIpKo58I2AOioTbEr,Dh*R4EB%N\udC?K8[ho]C*a=kbu3&8QY=L\Wr>HWaWACIl+n!D>4DRSlXZD[e6C%D^T5'"58+ZV!Tb33a6N"T\Gb^E3YT<k'a"-e7`Ysq)EG/1qUDJ2<[6V2k%Im[qdf37a6NVka-+S,PXa)lML+*A#""[CcXH-6B0E=%5CKfRq?lB[iW[qICNXcf2*+q?CnK0G<Iqg;5:bWuVmS-l'O'P,g#sI6=&YlE^fu\+UM0&QcmW!hJsF50P=hTQg=I^m7KId)C$.tE%b!B\Tac"Ot>W[>e2nBl!\i"fDk1D)f8%<hOlmoG6/kr+pek,Js04Q-!V>JiQHT@m15fr32GL*V8m./JDjn?X!>isMn4%!3d&LTdY%@[oZ@M=,0?)cGjhF2_ut-UU83XBt6#&teG?kMtpLp)qep6jrqnkD.b46oP@X`X&SR>Hb7.69&fI[>-M6>`B),=Z%WTf_fn=D#B)2%oo00;!=c%fH[>`VTPIa6>fbtm6u&omqJ;M9oZ&t1jI:R>TPtdWJeua4_dH7Y6M]m\4KcOIqIH-n#M]023p(a-\nWQ7:NpM;'+UcZ%JM:WV)_\#$oK@X3"I*4>COgPgil]u8[)`)%bfOS#?4kSMVb-EoMs0YcJNR8&g[oD9,kR-qbg]#P6Pr,Tpg#FrO5D_X+80!AgUV;Y%;ZYAAb(Wss`Xbu6FLCRq6TJU91IGMU0E.sY<?Vm0(V<n.[?9sp=cBP7loT8hmIA4Mjk]/2q>s?cqme/:LntgSomJp5#JrZ\AQCrk%X6Ou5Qj6Y,"ubCh1b+Q56_8fBAJ5)GZ0H=lb3'*XYUr$=O\-Vn0PH64Y#a94,sm4;p6J>3c*Qfkh3-Zu)*6Hn(s`q>kPFbjV/,9b%m9g[gII;VV3JMj6I'Aq$M!J(<1q@@[^4k5jTU"iWNt)?1G,*%H%Tj(pE]?lMjSA^2\dFP2/NXA>HiTtJZ*IE&QS=To/H+7_D$;?V%:ejJ4+oBDmpW=JV1.L.PGO&;?CK0-Oc<]^[:6lhl[hIAu>aFDOEZG('LiIbN(:F3h0iC#>h.8\q$n2#S#*_-QXh4]2-g3h0Wfo5r%;B1WZ`=2BM>dMCc]Cn.'lK#+t*ab`p<g[TC"(Ce_`2l>SWd2j/SuRRk@UIj1EFNsq)=;Y\=>LIt@9OkUf4i:7#&.!0CHZ+l6F<@%%Z-7OJL0-ro2Xri&"Jp.OZgWFoaglt`Rn:YojCHU@pqcPXH$k0C^8k]$Ab2B\YSVI?/>a9!g?EfhEKsi%*36rFJ""O('8f#e\@L$m%fq&!aAfA<'IhkS[Qf.upB%CWo;f#hKEl\\A$eOpWZP'RMNgXa#o()s2l>/3=D:%!3cq<j%1ZY7M3!7oA.`XVD$^8`mmE`ps$Y?u?%CDk5Tgho,/r0B-;kAG"aa5S<TG,*@VLec-bD?P=(Y`=s"LV.jBe+Uk#M'jDYn4(Aa$i!"UZn5pcM2U"26it6Z0]k&XIFOtVqI,8H%+l:X0,ISn1+B#!*1jVf8@79%W4im5[.2oEM22D\DCdHINiLrFT"D#j(lsM>-?V"%YQD[U\2!W(MjIXA"++3KD!UN+C$rk#)7&Tuf%F6m6V4=/C+XY>`!,Ka_L1Y;W[K3NpdMs+Mn/6AF9e`YiAl*)K>]`4tB1IGOg@X3g?*O/Egq;!u'X=6Tn6nGZpX"4$Jb-YX^rn\G[%giehBm9KcU]B%:*ioWnd(L=<j2HH0GUPIoWhe^+j/;h,HZCkuKJ["/IhKRRpnn1J\KFW5e3-OB]M0W9r_7^Ed"&AVgk3nBkVj_u:%!N,C']l\(Xi7@DRN.)j0^Au,qq>(4oi8Cei[)r1(A53l,4:Pn$H?UR%dXVirB-N=4oJEGi@rNQZdb_@+(+bN-#C$(<0;ps6\MZ-D%](lDU9S<Z11cU]3jNjRlo(`<TpW_1E']*MTo&)d'pWOWbK\\YZnID#[AlJa7O+DihBBCP"AYLD[!>KUBlC;Zn5TO:-o9tI*5Ld9K%:3CN^C5n;3J@u"<5Kk6@SZPte"Ro"ZnTh`d`9d_tm>-MeT'r1"1](Asji*"i'isHGI%EA:$I.@q'PQ"_VEC>250nQ!$V<S8=SB[Q%4`a.:<sr;,@XDqBHMl'8A0pY#oARhc4+u'WU.A.cB\Oc!:_8\TQ]rd1j?!#F"4f.P'YN]_L-DIR=I#&>HB6C7PeYr<^.=*/(H1T#%MaeY674fEpoG-tudEM.Yf)>cgm/G50dB6k-dou7$PrWS9^r]OC+Ml3teS%uV$2UJ7T[CQR0o\)Hm"9W^C,G5CEN3Z#N<X-#^tpTA%a(71X?Aq.aV6Q)FZBZF$J@VeTq5m$#7\SCe&aDfZ&AagUiZ!ZWff!6?o?7$bO/Rf1[`h?/b"k"1B_%6Y]2J_\]+4X5Z2m1)G,ja2%4(1UaIs^Qm2=2,0!(T`hC3%`VhY"CHp5ZP"F/;a[r#lWM(=RlhETc/iSga`%:b.Q8#V2D#=3]ko_p]!?(_^OL!)$"(hqKk7e72/7%NZeIQB>Y\_\IdjJqOS.7I+\1:F.o-8(03?*I8@lTnV>ACZd3*"eGQnbgh&9Cch-qE>qIb5Dr0.Y@H0Bb#(5%_4r_)ZKn>&)r0_O_%FI3GCn34,($@pD6Nl:ZU+5u4`be'TYn.Z8JE)].W6^Jr>UnlRqLWAEJFrj:XnFM:TAs7+:]VoX.GnjS,XdNW^bh[g@MU4JO8RHN+%Y^:,dp]*ad;iY&<4e0e--%R;bSEq\2iZ\g;=2H^EQ'*?.T)N8uM+K/Q[N*3V`5jg^ofg18Go+9"E%u:WgLsI3[]h7QhMlecV@'7,%Q)Q8Q#D\6,O8t1"VDBrC@Lrhn(N3[Y=SfN_#@YAg%)0]_R!?IW.>j9aN\H+ob.cC2`6DrLRA6A@b/+ttHoB.Q4IP:7T.Q6TW6[/9%Y/2sX!o_,Zd(*f9)&Ye_kKqm>ati2%hWqg7FRC#g7^h713HULbCbt;-r%_UhSU1R3OY&P:%\7qNSO9jDe2_V*f*j^//N@AQSR\EC%K9!Dnk/j<<c_(C+rIs=Z\S'8tho5LRFRC#gE4nJ9%\5$kfd.0mFKK:]M;'Y0H+V?^'?Ig9ECS'fdp)MUgg9_`S0P#7c4G)4MiqKH%;O"'QoKJMaZb<!)ZeaXlM_:m[kQLM"3"LjEUtO='`()R"gfM"/GG9n?Hu>4[a'lOOc]g6FSN5lFIhpA\lpOYF7EI@WdDL%eL(_rm%fM8"]C!NWZWM!'!di*M/"KJ_f:lmrp7kfa+\$;^WR#=kC/APV8QWU]^RO.7=1YHW2:_7'K&&ruTO0Nu3#(iVmBpIbEm,ksR[Ng^4%[]DFmK1rreWLu,<3Gs5eb02#2Z?=4M:&4>%I.X>C)H@l;?BR&(Z0Zm;`=PYFm:T?WX,tAGj>6,KgMmFR`V-TS4MACs`1Q)Z9,e.S%'(G;=d(EjG:Mu06luL;O1GU*.o>!K5Xsrr:-IZUt3+RTRH0)dlS"*O)WG0XL0Qs>#>7CG`f&s?&3Om6pb<Eql3sOR9^.GA;p0cV9%]_g"7dtV0h1"N?u;//F/o4EfaWh;6;Sg6*\AW@`p$cTb6Au;;iB:A$@'QZAF_,"W/mS*0E/n#63Wh[@Uf1[fH[]II2CXn>fcQY5H%^7:CqE2qi3aXcs[Gu^GIpuBn)]'GB74Wt<da("M4mX)3OY(1'lJL[0(KR4H8!lq'5kj"FmZs0QcN$Dk8Yg@YGq-EUEMZq>4o9Of#%EX;45c>;sVbMsg?DV8+d&*T+GPac/Qc-%UR4#0%+K^qXU@n2]')+,"J>TY-<a00h[==T0\[C-B^/m?:U,AOm(+F@qN?/h9b#J;A^%fA:W;*Lf#6b[Yuu\p%C7a)!mJr4:<0$V]fI!@Tth,6Oa+Bfn.'-p_:5AeoH];q`b>c9G3*H";S.P1fl)[!H8spZM7k?ln'p5!?q5%q/"#i*ChuGch*`mHua@UO,WIPIt)p.%&b<.'&>92)Oc/:N(^V;r#Q`CKI1<,c4E)@1XOQ6*!$(Y_DlmQHme)")[7YR9q.a7BIq%/%80kOHN,u(*o2,B'bNdAQCtZ)>IWH,,#P1>=R(RBGP$+9pWFP3s52m1'l_eMs"gHb-0/.guft0(0qUdZb,+(C5&n[1"$^rrS$[^9T%H$/_uY!]L*I:Wb44$aB^&#nPKfg1)+:q]fn=elVkH![,Hc%ik#iRh=mc\S&SVTq=HDP$I?r9(u.n^ujliA`oE^'ljMGZfM.Wq5Aj%&Ne[9&N<Lhlu]`&M4b7"LNA9+,2Xq"+-,2gA0ZhebD/He=>JmKk,rFiiG?Mf$gCkp5+M4Jb\:;Ep1b2-ol,Le=A1!=$H>J[gQm:t%,-Un30p+Y2J+TS_@g3d4O=We/Y+-k99AF=TIFdF+O$op8oY[>J(6HXLNasj+b#os\;0&56gY3\Mmk<[Gm:Y5fn\"R*3tQuTEk?7M%@X('1$6$#tmKO%46Vs&mYqk`nbY\f;#/3Efh5tZfDa3PVc]l77S-Fr;nKU4=X&i9Hr8N@SkajQD_$M(D,Cpk1drGf%[N5bAGo@U&%b42jYB\_mjK#qX]/Z<MA;WX_Y&C>g/n=1AqNMRF58YeO+;B&8Ic7T4V)6#QQa@LaW=\M:7XCi+_WA%[qresfYb9A]>@6OUMJ`btg%*:pXW>RsR%*G!+VZ\TrE`:.q)IP#pTJB+AEF/Qn&=j0B(cg7WMmUng=.MWFdjfP_?qs:;$1T`1*:5-#=K4rZ3E3?)t/1_O]b<P-1%I<Odc(nR8VF5Y#f,IbUh:WHR;k7cgFm'0I:@p.l:`s,S0nTX]"[f[LK-D#$4ZOLD)AD#f%Jo*FBS^/l-\'oVR.VD\O?/DW+EjLSM%UZ6>RQm2Z@+4C<JLu>CTEP(q'0gHOcDP)=-]%;q.noAMDWTl"Gc[g'.Er35LRi8JqWg>fX]CLCCm]q4I)=A:*fus=l1"e+CMQ$]&%$,OT29Le!D).g_GABr/'=_GacdX96iK6,n;G*YASfuooP[a@2tignDm%(jaHH?_6qGKN"ZF\?mnV&UFCQYN#L`m'?;n6546;kpNK%NRe_'f-nn_UA+3>@jB]/1"d"B2,/!H'J<6eMRZq.-RVX>KfK;f[^kqqP[Tna?N/&A*hAJM*aCJe!.ho@1@4k(Q]@'.*k":;:5u^<%n)HLAF`+R,r(qG[mn-C3G]CBWn*\CTW^'gKk0[N?TBCWggL0.4]^JZPrHRP,`cUheQSYMa_lR7%@fI8Wh<Ldd:8i'E@ill'U'2M%%=n[YH=8RnImI?35'tks>pK7Af(N\]$;WedbC;9QjqYK?h8WKL_]M$,TU/QE*X>e8Gk_4@3q[Sa1O,#02T-J66lZ9VZbV".oh$Z1'%-$#%EF2.Iol`q,;rU[a=^i'R[O*a@o,39[tm9<n3D=Jeo+5sBj(XSijha4[6k4QXebGMUM#?^HSS2Zptl^GT[@:mZZZh"LOLc[[J%c[W1)O\7W_k+e;<B;]tV$dY]V,7A6tU"OO/SIjdBS'El\EFIOBG5F*SH`qL&drAkiF6W%87cqgiZh(MBk?BPeS'F31AC9(P50g]B%5W50=/tHQTFREs+]?,m)@2>,&B87,Ak#bkHSR!k=q8SpnACK4k+-MtEB%&d-n1HVgcMLAq7:all6F#d]l!,XF^hc%R=Z-Z/VR'2f%2E=fZB%,F9SpYGK@^>7b.cB_h=AUoHh/8'Z%/e?&FBf!dM4fdNVR&o;ZeZLe/"=g:Qd0;oR6@%bNYlrRnbKKTluM@W1V)YiVR,S"%3J5Dh.'5.5!LPQE1$uLMg7.No-KeUGa9%J!a(A"mqQUcY8*aV]pXQfW(Q5o/cB!,,O&"`fg(^]RFPe6;*9LdX)AYM>TQ]/cb^)/l%jbT)3.^2Cr]-(\AR$n(&F(PbEC8u'9h,**4Qp*?c$_89@?++Jb`td!^]K[$07-]Xnn@7-+c3\*(>F+rV]301*9`ALjGSo<b\c6I5%]JYXqi%%mN[;0_djpd"7^?3^BI.H(EgsIZJ[u9\:^?0;?O5_/2gfZasFr/t/PH/5@c(17!Ap_q][$sR<K*@cdV=%U1N^l]9R:gND%Yg^/g#OjXk.7/P*]!`>rkKe[n$gJ^@&#Y5k7Yu6Y*lAL%l'rueq+)7H$q'2#%c:E'0Z26tlu7h)1.WA#p#j98DDuCZ0@iD3bA1QN%&NhmMkd10>:epmN[F=TD'"]-XT`A#:`.RrIL&tA#`fKqUL'!Y9Ms,<pCdu!S+dnD_DhXif/B<="U[PO\.Ao;_aKCGH,g]MKZ%Vek%'_]7S&ln(W=NbDOT8Brlet<<L>MQ3.Yd-8A1);(F!OdHA)*`=*P4FcuEf0a#?&XU'\og.H1\$:echWl#5H[5\9t6;/'_0u=R1^B>%mb=EGp#.E`@D-V0D@t2;qcD8$n+N01F.3h4/T+FV;q/.(;Z^o$Zeng.C;KH<:7#`j(TVlDR)guA%W=19,DOg1M%!=/i+K^]cC/*S%^>j+6Hm0J61&nr;IVu[e@>uquL-$XOE=l[DEl6_?2s&;M:LnNFhY^hr\`(iuI""<U+oZDio69*XCcC/F4k1Na5L"O3'f><fkeVNX%CEJ$Gc(%&OLS5ql2Z9Z02Y1qV>LHr/i=VCd4mP+0W#jiBdlHOte[(?bc6LHg>0O;ok?M+'=qdQ6jIO9nYKQO_Dn"Kg+uYB.LA=Bq%,)5oLa$;W\[B0,:\Y_)UQc-8>ofR5c`LPDES2.rDI&DNEd[9S;?Q&,ebB=i(bX_S%V4T$1[B3b[60lZt*t.joG8erRcn0=jQXRs\%'lJGq0hl-pEebr]XkYKT`tcmlii-C7gr6W\Y&>PWq2G53n89+PEun%eU=d>cHb:"M@%D>=rR`fB,@BV4q7J.02-#[;SUA:1]#@$r%kK%WH./D/7G0=k_4@!j.%Wh@2&^q9Q]@FACb?o94>UlWEDp$8jrJU5Am,E&dru0(4^M9Z+\*s$qg/?M1QcaR46*=M=GAR1g9#<[H%3Th?0)(qW8;0ic-p"_(cW\WJLQ7kDV3TS(HSWiPtPLmH`f#^5sT!WC)qhOWKbFM.qS<E@_KgtTXYVc)mTK5#8>J@jmCijO_/c"@e%KGTLM_CcY\SS"D`iC7Un<HaFr3AiD[)3*uFFBPC&Xu)0S:MuN623NuZ9%AR=;hmiKJ7@L0EV\-6%I_94dFq4D\^B-ani^b&l7ir&%R8PQS7aKoY&NmRHC_TEOV/fQnO6R("+/aT+(ZJ0?[o0r_W?k+aLZLrU.D;nI$U/<ajnn'FRjLFnn'[rXaY_51NE;t;Z@&A[S^4N3%Pf9&IReMHWNe*Bmc-;pDXb#/'ndZOX:.[4q]J_1+mhBq7W\hsLnWo.eWqfFl7rsGd&X3dEn5<I4X:J*)g%uBrDWi4^SEY.S-Nq[q%<n_Yh<A%Eg/eOQ-l)+IT8_E\+f0:4X2,"1Dl54sdPRP1Y=^M#=h0DM)"ao)H?$8C#AkI@5]>SD$,dPA.Rai-<F*l`EX=Dd_;eB6+%J@bJ;NkY5GK70oHmG+EM]1[C%_YDDGZ>hNn^WZ4RRJnI8]:?gFm<P1"-+aK346*m&c]tIlb>*6i_(<BI&#!QI`VIRko3/P(c\f&.%jlIR?#E@APYr8UGEb>8`R-Fb)aGoII]A@pDQuH](A+OTTFGF-&@_!J4cT>fZL7OmacKnP&s&]=.^9jS@H\AQ?S[7'gSPM9;Rn/9X%&o6?iS*ra#]1f(>F0'IJk8Z1?*:mN@2)jEtV_r?YBj'qbc]SW+`p[]^.t?H+.\PCa2n%aZ(YdE=GphnPAd3@\Z,\FP;cMn&MbYBW%?"LmS1*=ItF*XXu.j)</(r]a(/uPT!@J\BF1/#3_Bnpnm/3pu$+hK7AQ7P9r.U@)q`D\Xkb6%=*"3=Vn1LpMIN1VC$cmD)%MC_#R%23cS(fT]Nh2QG%\#LGI@ek['SqpaU>X"\B+TH-2_oS-;)Q+nk8^H$g&CZHqM!*sg+\/[cg2=`B>a4dRs0BJ\b7^hP7jg33&?217D%/ma58?HO)RWANbLP`M$N5BnV!^Q\HU0'.^`l%7E:0'.`5K7:.Y^$+O).GpBa=3c%>T>di2Oik8fc3PAme6qfI5B;\8,0kp`^=@/%%9J2ZYrMD[rC;tW!CqI-+Z_>V;qRLs,SE#j2]@YA[.udd3juaT?hWs@mN:8kIb4!#mT)"WZ\^tcSoi=:5-dR7FT6k*>+M=(grVU;K%/LXfMk#O^ir%d<GIdUK_oNb.9YFebES_H/+e)0KShB?o$K2[Qf^Nol,gps"km[l0SRBck.0kVR%qRK6P[)No%YFk\[a4XsDh<RSN%b5PGV),Hp2h!=,E3e_bkk.fNo/IM@H3tP`B]m^@1H1u<^h\>hTc#Kp/=,U;,eJ.[MTD7iEOZM=3IdU@K86[_)?9cL&'FEX](N</V%pRRm"\_cUab'T]>?9boIRf&4\pItq'DGP8UT6nA]D+<e!p\NS)D_YS:g2d1>rOcu?5C!cGp\O]MrAj?>,O($X\,+?g+.pSrEk_#&%S)I[<Rp%fAR6@%WI'90Pau+)LHUcburS?f&*n\X4@->)Pci#s:HnWhDp\MGXl::$[3UcW^hf![q,+/(15Gp?[o_d9ba`!8qTDSEG%(E\#HhZBt"F?O9is61!DHi8=t`TNn&B"Q[@_6Ik4l3HE^&bl-)fZSB;h`P%U[iX^I0f-j``AnI\kIl?4Ae)qaTD)[,D:`"jVS8+0%VCZ!<I=*[#6.=VaB3JKbE?F'P=h'LGdX&+Sm)eb<f=-Q_rMURehWfl"=bmp+h<G5.,`B1acTTXsdAJh_]md--G"AlljZGQ\lK?K3%Br79TS0uX*jja&$g$(bFX5<uQ#8'Sr*5S1(5M*SthRTA=\C]%i+kACncZlXc;u2mHAWQX_Lb0o9E``FX*Q[[CqFt\Ab]p=`rCE(\%*+.C,%e@a!lfT"$\X7aBga<?umb;M6AMZL)]1ib_=8!4J-H@a-?Toi<f.MS6]6<!4mtJ,;^eMH___bdcXR3+j^E1<?S'b3R7"SsA%c'hPqUn+@S4;K,s%S+F11AVE1Bk9LCHT5>o;R^!n>TDm)KiX5BpQAFM(J6P,#&/5T\R41\53Z]]l]K,0FKP=:Pj0@2L#npu0cPFT%ZrHPHlY\\WD:A[HeYA>#o?>P4h*WfY9K0ASl>?)73=KI/C['I1q:F.llf'=>o6K"QcMUp;g@$ONKkS'qC[(Efi%*^@]^<1P,/'V8%geW1)gWLXnDN8ql<n'Yl)h*:hgP\fjQ[o=0mQ\/OBP:7\kP!Hf`H<RHHeo2\+$\A^9m(;SWYQ,&;Y@`60@dA/kJQ8Z*Z:!FS%[5?%F7sI8H$_NIM1CqtX]4:,W?1=t`eAW%?`?;83-sr/lfRhNHQ?S<0AX-&I*i>HZN2ndknT<L50:pI**t;b*psES6DOsA&NN+3a/d+O%\e5YPC@:>!Up8K7?,"%fgg94S;q4kor@qIC[R)R58\.]\6UR(4+FO[YeW+rF:1C.u]t=bH/+"+&T(^DUq`k]7d'_=8o<!'4<j$4'%XU0*b2bV`2Zf0?.Hs^aJU'ieN:UTfKluB#4[$qtPmdI#BXc9?pr,l2Rfi=XFfm;D\me,sWTq2_,JU4JK8@A4>]SIR)b/%&s]BA"0%_pAss?]KGdn,D:EE,]mi'!#9pf&9u/_l)<99\PKdAc6f7DMV=g;JI2&d0MC8XGKlDj;RheNZcY&TL]R"QcZA)XC&JI[BqjmJ?:d4%J6D5I#TcW1nmOCUXXH[XW4"=tb44ts)QE2mamldb(PF2]E=h5=ki2kq&OS2Q@H5mHX@ZbFphuaFD>GHq^DN2!kR3f*;(MX]m"48?%"p9:Q>t*U@n`)T9r$1$l09YOJ6b0q:/&<ZC7BS#<.XWBA:"93+lT=;!nVjMQIf"peb+>;joO+BT8hP$q0;&XqHPPXS@S;H0;D;nN%>Ailq6*d%!eMbaV:pi!@G&nO!3sKbadBp9T6ka9JrEgmrMCHrDh$r#Z#2J]306WO$l\3gMqdK;.06G$4P&:VkbR7K\f<_DDld\^1%?Qd"3)UAo&BT:!TpiN?<Hb.fm$5\nk:?B34.NqR$PSsKN:Qstt;Q#Y?V:=>-9%`Gbc029oGB/pJDA%bU9)5OkB>BuN@J^uMQr$TJ%DRLLPHJpV<BKkXt^Jt,tH0-nYFK6anVc%4DHR/7!k-ks"r6n5%;Rn4tm2)PR+j@4;er(7lH"e"?n^cJQb^o'`%@s^AV&jlS]aP4[%rJG#!.Gd7LUt"!o1=]Mg>uatun$+-,P+tY@lUOI^NoHFg]+@*%UF8W6Xuu-ha*\;7r3'rca)NpOJM8('8+=d2"JJCtQGCS(,[*a^%[HAf?.+_B-/s3_5).]"RDZE@g^sL=J3A0u2"(<[olW=YVV=;8cH$^?A*Oo'2rrJ22,h7*7b1#SAX4U_C<M:1ib57ZV#o#C^Bp!$j%37t[(;RNWLd_k)^)IM@FF#5re;[#WKD:K'4M9HOd^AM_:.cVq/K_-lUG*MP=cl.-hB;B"7D<(lJA0(YO!\/M36[:gYcIjhkG^o:E%ZDo+.Y-+qna/RDZ>Z!)cr+a/X*]ub]?8&b0=Qu<gB1h7FHp)UonYOpNHVJ_;I,>%FG*N="7<;l9WU?^=c(-D]e!5L1f%l$'D.Zl?%p/c;UkqOQ4RQhO+?eYN@b_*@5-$AmX=@*B$^mpGhe0/MFT(-T:jMcDhXCLqe'X#[W0$s))KCb8.bK\gGg"90q5<,o^`^NnNWQs6c%6!`lZ[/Sjj`)WY(BT_B&"ns;P`k8Z-^HI(fTL53V<%#"R,<5a1*Ko,`q4'MSE7#^'EimjF<MJCDF6G1"aDZ]d*MoLeSG?ZLBZ./k%f%YZSfecNGY7=TK/TpomWJ1#i;tMX\0H34bk;`BgP\Yp&Y$+MA:1<`386N_IY>6+OUoAOGMO6QbLY[MZW18En=pL/bG(<`GfTM`9%S#8H\A<fOoH#k4sg&m^e^NZLP\*EZd>mlIZo@Gi+N)d!eWC64$o00`$&3DgFfC%2>iFQ"MOC>_h>M!Oq`,WCooA?s;^5l:D60+eK%difs&B?:]<_O%6sVl_PI&uqSAi38`A#d<U+CL+#_gKtIFYMgu@XP`1B'/O0)3!u)YCuRXGDMjmo+ij2$5Y+6Wbq:LJc'jsS-`4r&%UjKc>Xup?Ih/bc7X)mm/l$11=!&/8A$a2Ir"&=1d=D/Zld0`Xn-gI?Sdd+;O\mG/t>2`e538Ef&o:lgtWl**"&R/6c&cGI9",7SS%Tl>"J9Ia_Y$>0pd.Z,[X$FtIePF3]tBTi:J6Q8<a\5[,<We(Yj<%"9p7ReMO?2kJgh%7a.8M?sDCi6sf?_S&bb4>>CA1k`*Vk`bN%,!CTTL"Y8V"pSr;,t*bk!ipS<@\\9mbQmU1)r3f8^j:M$\u!@/ks=XI2sUo,<j=,Z_C#qiemjEV?hhDQ1^7^_jNI$B-ki"/'Oi$+%P9]:W=TY]*I.#4V/4CGqDF=A%"g?sA`OcA\KEj%-\!?PT0LMXO(`Qe#d;?+T"ODl,?sGAtP`IUmKR99r!$@d<kk7n6Wfu%?Pp8S>%1\=:1OA7MC5]"10=9Y3CkY?f%r)XC@!V2tQ5E?H$a+50e>T$b'Z/54#_Ub)ns!5PX+I!p1XSUiWFDJn\fO4)UoRIRJrfg[aF[_+J%9K;SDgg+/0<6WO/N.cH"[>J>YLjKkC'o]l$co4-Y'fbI]=5Y85``gU#$?U1R4?/uI5D`@b<X%2%na$I[!.1lM<?.m"o6'(CT40?_%bV.F"ebes@1_j'r_P2L:YC/m;QYsM=W>?:!0IZ(u$@TQNT8%p?j-XZu5">^$g#@/i"N(/ME@!!F7\d56bUQF2]!B=g5X:[m>YHHa%5IOIM'd2hZ]8AmGng('TPQtA`XR+'-MU>>(?B!:ln(&S8l4;KGXnWPeb#Nr5XISO:4BV#jBq8'9c$P,aN%*.EYA2BTg[Uhda(c^\%`*@pn)rtj+(\!gL.dAOrW>W[?n5qhNSPEm$E6'*CN]8^6EtahJkO8lmDrS%2JNUi#E]>mWEZW-_2'YK?F`Ks.2_)n7;R=Wha<d=<%,>.K$`W71t#95M0[pI@Q1nDIr=)rD^V'PN3rJ<7YCMPf8MHl.Z9755FgoDgiFmNF?gU]Y>,#ONpN].iT>7j(XIc@6T:YN0#g%`sJ%*D(6b#)tBOSuj,J-p2YG/lmf`Qi$Kd'13-0]E"0?aV7&Pg.]kD^.dN)V<Ed`af4CLB'a8BR/cBP>u`g6krq!1f*5<WU%mfSbKrjA%2[P.)X-nF%_ZI9++tM;$e%EUTes.fSbm;QRbV0q;$aga/h"nM.18Pi&btX!*WPjdYL5l>d"6FXh%_9)HT?2&dC9d0-'$!3'VpS^X%$I9I,iV"d1XmoSI,BUg^s4XZM;i?;FJ<Q8kK*&FLU@R&ICL8MT,ZM-F#5t>d[;^2K_]&oLT9_".C,+8P"q-+)(a)\'9o2'`O,\B$%U!_/]%S]0YGcl"mKlWQY'LTJ]<C7UBpsUp[lF_NeW.eYNLE*Q'erV7mBBoTg3F'lpP),FE&TVe<d;3S7AT47XTn=Sl][R1/kZ(3R%X!)TrO=e4!*CRa^!;j/SmCtduYtl>.h7]*#q>pBNU]`PU7bSrn$HNqc0*>+'*c#B&\)hpRm/RBI!/CG!>8-77lDPfX;-/gN/c^4j%FjT<X\5M!B46#s@9X+[%],-bq$UI(SRL]o8ALB'F1"SQnp=UkdZrSL\V:Hs_0Q?]F[q7+NKa:WclU5f!$k1BXb=>u(7juFZ8?XAX%02t&sG]SGW&831aV_XJqjWt3?Jp1dj4%qP'%jED.01!%"?I00SMBGu]i4UnWE<u0T\;e&.?cB1VXMJY<Ta.D+MSHMN_2m`,B_CFP%L#/.N[lJ&>+S?ET&Xl*"U,]!O+g26(kjf,UXh-2p"r\8?i>oAD*^').R7-!ZHe)NV2YLIBik8McF[IgIQ90!NC`.m\HbejJK<cQH%99As_LtSJ^p1T/[2N$\La*>p^[=*eL*4e@tjqi!*XN+#?J!U/hj=Y>kr_b=;\'C;D)HdTAD&>CT'FF-qS[iXF^D<`#M:)-Q=![?^%@M<NslmH<V<]aMSLk,;T;a\$$n7JM7#d3r5d%P;Jckgd_-j-[W[+dfjP^o9rDa6Nr7OcqRMG!M'Z&]#-\Ym[K@enT8e:,U,=EE!Q%LOp.U<HOl[TSfnC=.iRnK\;T+#<r8X;X7;kA`1Ef6$:p/dg*njih7il!`u2?k4?/he9A4>Li>0opj7;K2Bj,8#VHUqBT\g!N<i#f%_T9&cN"HY*h4E-_9F0((WtAc@JBgW;UBuK^hq5-'hM?\LZ>/):@N2CO0FcU5-0Tr*VDcYgp4I$A+L.iq"45-tYoed';d[#?*fLL5%)uCc``[\Z>ej$WW9*O`;J=`>r%c@C0+!ID^CfL-(%9E9e&'Q1VCMnQsTnZ-$mm<k5<l<0J<@NE1e$-h^5m[W<ia`9FJ0.BaooM=1%IJ1.m^g>,IfVo,>)u!;Co;Dn>FX3s]9RCF.YSbVM1lSX""[3`J#0fErb!3JM!%WtmZ5/mEH%A]nE7G@N;T2?hT]f_qi<OS8312qC%_^6<0QSSpR,YNR137^@MXcA`O4*#bYEal@Zm9r5h>7\4Y)uH=YL,R9Rg(3W&"-S)XIY^a559MSP(-9qHb1b-e%D#*j!3^I.oC?9W%GDO2;-O(m(.RSQ_J-Bs^FgY,n6.gYOo0'B0*L(Tk%!WZEm%'U].I(Lcb5U3g6)e[Njb9p4JUR\>Ser290gO(=3[*Upk.\LdcF\$&%S%ou-kFpF.nJTZe<X[L+Le"/Z.Z73Zs#(QZod,J3)NCTl.#J?W7?4-"MQ$k%LIn>4G_k=_3uFj:RF4(XLMT6H?3ME#%*Jj]_9mW>%RtCQi(E-[f=@+1/CW>N!h+?$SKa'8\p1c*b.U9)noQE0hlP3ANd]8f(>ALWo?bMMfE59;.kM2rGH*<f^NSZNXG?<OY(ZXY9m5Ljp%YEp<uiHFHK;^p:/?Sjgias%bcOnXgM^a%pu<Ib:+<G<H+BbS1/2h@r^KfGV#%^G%1bkihMq'GC'Qh$MHIYC7`^0gTe7#.&3`Sei`%*,Lk2N+OfNQ%G;<Vg!Q&8Yp^]5p04m=$^_qBD7MF!8%OQ>qiI+Y*$/C@8^=Ff\"T5#smRkhI"d$np8ct;HNFpDUpKsckjI*Tja(j%C)C:c%2_+<0M=`Y]j4S'lj1LE]kBp4?q4$$G%$\iSK.b.Z?Sn$34(^q+.8i.(Ml[qfb*"c?U;_9b\g!WpI,n:H`7/qXiTH:g.f(M%0@5ldZQm9.@_n@`SK._o=*%RYCS*=n8I37$U]M7jjZJt8bDXc.K:HFE63pRI=VC$^.'O-02dG6OFp's(Bjm<\SK/ll-t5j/C`Z6d%cAo\hQpk0kG'4!OI;WJZKUj+aj2PpfM7^ruSsIF^mTCgPjXZuclq@G@kG!tZ@_^1m%,8njo"0$4;9T8'0lC7a&=>S%^Wm,7MTHli%JksTfQ?)ogTd]<#<_J`T7$<^D,Pu+sX^#WO%ZI]F&ciF:]K&'hd`pk%_-rF:)\.+qI'D1MV]uG%3E*+0>#`8flJ$KN#]U1"7/.H7%jHCuZ"&(U7.Ks:LjW"J:Eri([gDWomfGSpH,l^LP2`BM;[p.:0X]dsob1t_ioX&lsIGqQ8dC],2Q8#Cu5Nf?5Ed6d)pN1UPJ8n_R%b;.qR34^C;iPk/1]"'+.NUt2&1FF5n7!%?qA$$)@ZO4cS;j];UDDYIo3?]4QF>mW*k![/5/HNl1fpoRaM:e:2LG?p3XkZ#BaGi./%e`_j%??4,%iE1f>:W'o#7>EIoGuJ6R"+@lb99,Y;XS\._h37&<G@R3j#J@eamqsDH5NfjNV`4BP'f58p(br^Q<Q0oS+qV2]$Id.-%Wca*Wh?M-*or0F\40][t2UK^fGB)JmjO0:NmRFimra4s"S9<`<Fk8F(I7cEpSoI<0*&,!BSi1#-6j;^q-uqHM;,@Y(B*Yq9&f\Z#%$nRG6?<sNu)k5:Tpi]:^Ci1;gE>ds#pu&b:2j9s#*smk`r0AC4&b>55><4ZH=9LW-jNiQLQqj=N@porh-i4@2aA!`l_(;GY_]iQM%cHAHi\M)d/QYD?i6$D="WBK)iaDnbqn#d]5iPjF[mcqXHYs03DJS$VI"VGrV&$kc3[pE.1kLhDi*ou'-\bVoMn8TmR4UATm;B8j>%cW->`Y;6?5e,rg(SF<D1MI)l\4cgTlk$).'oh`k\AaInK*tdHQ2`6YB5k2t1ihkj8%u,kX8)2TNl6.[V#Ia6l'fS"2HJl0l\talH%<"H2JLSuXumca`*r&^\%+'r9@V/fGV$W0(&Fl`\kLP/UUPRa#`-.&!9o!(XDVR"YL>n35&q1jh=2anA1f1L()2g]!?Mbp5_=BU<"%G`p/>?X?lGec1,11#pF9?J5@J.gt@`SRl@5Ker!*2cVtP?IjB'VMJ3_L.oi40SOn&?6N6Br_J"E;l+HU\;A`K13EbE,u.*;E6?MR%J142%\(9iO7PS9Xd!0+@:uk4WR"FL,X;=Z,!T::P<4ZiLrk9YeLe9fnO(LZ.`M2.ONgbNWm?uipl)5K`r8Q<kGo#;,?8EGL`S;&j%7bWEGAdF(GFT\/e,7^/NB+Jrc[0dQTmbQEGFXM1;Le;ma?k]Rp;adIoH4V=4XU7De;,['`)O8+46E27(,ZP@8-1Z&`Trs\#YB5Qk%*p/@uk!iBsWK4'"mHQ\<=!KSQcW*P^h.UX,;e8pmg2H.1/1MFABCU6r<AmSeGBX/F8c/\V$+?9.KUkF4k$LogeHFH5Mc`d12Io=%%"+Nt@_g90>k:qn,+[mXCB37sr:5&:n*<-lBJ0LOOGl(VBJ,PsmD()7HSqUY[KKbFFbN9j^M.I$9!j+`f__F=)a>TD`H"dbgC>jF/%cl,S\LX+hq4dbW)Et"n`51kRE5R;B6:C'fe(P(=KRgTXU&-<tV]]DII+DagV?$HX.&-*:JRmJ7GPJr2?`685n`p!pr66OdCI-JF+%<iFY#ZQA13pH*T=Oa_mpDJs@o`c"K3=?%!l\XD9/VrH4a6$JfI,:_O0.A6uq&J:;rnWY`iC(V&C%e5d<iF#tp#fP`32q,Q53o%Qn%DGH[jiaHY&bojc48la$Ud#isL=hmAA&o6mKd)[6oAu!o"SZR[i:%@Y]144C1.b(ekqn);uCHF76F#u(9H*7*VP1&&GaaWfqcXH=C%`Z*p<q^DiD&Bm^sU'Qolo"t24*m-u2VHT0NH""NVnC/<H3G-G"H32fZWu7RGIS"uUL19:q+XE<_+[a;<r0Ho"o5kip+[\gTIpQHK%D;nZtPC`>KrBo9E)*5Ie='j(bhI8B_8j^Tq<;,@tk7F&WT_&,^!6"%PTtICl(WO-\5]U6_Ds\WC1:2[cL&lEP/':NZ:]n[dd]o?V%GQOWBEhMM'Qj=QOJ?^S7EOj63G7Mu;pP0,P4HMdNiPI^2dRiPFj;a^'TL@7:iKMjSAp>U2">+s/:N`k&?5n&L*MKiD=:adcmpH2D%51NT&];m+inI/MQ%E`_hHL9AKL35sLNloV[apGZY(=1(3fAlf.JnF(`.'?O16Et.^/@>E(5:nOtYA^kQSo.DuiZ&nZ394G`*dH3t%*C[3*bnk0e2I_e,lm<slYr6MFn+6-=>F!NbR)rOnLD0QUnSjNFP0?s\<aU7T<;l.K(9pmN958IS]BsI;Y$oJ!bsTNKR(n\Y\VfL"%&8uEdWuF<[H20mA%"K4+-`X8HiQ5CA#mad@_RXGDK*%^*;ch#%4"(t%@!2iM,,+ZjoOR,][U;,u_sRlI7P,[t87*'9;o%+?F-*RQ%p<il.["!;6%=W+ZLJ^cHaubSgYiu$<6YTG+n38/;V::BmhZ^m\r&f3rfG[7AGj7;aST!CFb=pkj.RcO'F<o^dm3[F5=R<Qeb&`$\%38s_0h(tAR5f3Y>>&e-\_Y`L0nCo4WF#_(a30J8!htSYpd)$e(fQkd+d?qO$]*\E11hu'7gt=]>0HYq<U<]M?%qoRQbocE[T#XK4%HBe7,J!>9W8u>+X+!gXu+'\4+"b0L!@V,"l[/pbVF::"1_<EuMa"dRpp?*\aqYQXE-,):Y_h4tMkp$",_?[3pZ\QoVE3'mhWk^uI%B\d;U>j-#I6Pn5i4%j)f]?gO/BcPcs/\ubYUtAG<4Hu?.'D/4?kI9>5aMot3G?(lQJ7jhXds<Y,`_o$jVh?dA'e%mrE$_YWT8>l&%PQtd6UCYk;,1a`'ogj6F(YS2VoPl&Ke;>*J$;0si,%U3.h1J&?fm[M6UdQT407#6tS3O6k^',%q\k*fQ[GUGpR)R7nP76.+.<hs0%"$1^P`ccGMg3B=62((@Hr4@N18B('IRW($BYcA=K;#_FpPT6^(Qnb.`0o%)kbYZ?(rM1T7]:gT>E_8oJ?.!@+bfH8]nU*Dn)COac%F$!l&jWKcBmODG:a10#ln`=qVeeMjE2j@4p\L9Q-gpi_[HRhPs5+m*/!0Kq.86^tAM1-jERC<8X@>]7S_#$tm:1EF]"Ob%5<affU%f`+1jJQts:K,QFQJuS?5[llhkG!7t#?p(Y*8/:i/q5W'3=,62:Ac(A)\_ip)[sR.C5+!g)PkOgX9Y'!G\(\YX[dA+*8W5$5@qJ`3%bQmJU/&1DXYPRhc<hoRFh/*Pfq+t%mDhSh'26_O[pASYPH@2oOih%7\lLd:XMG<XXU%m#P3L#Vc'RTm2T1m?'.Ig=555TcCR<Yk-%F#U,K&s`aK*noIs/&V\5qn!+0BNqNUhB]0#qt,#BpinHcKm7a@Ygl-Oa/uY8WShGATan1h<T2V)n]tROU%n;%"X&;9)i>mZ9?)9i%qeIF@.&a&:f;m5kBW&H_9(^CMJT[:.c/tB:0(&23L(#2J8A=<mNlK69,8OftD.Lkq&.*BZ_W/`(b$<ttRd_;"0X%VuY%+t>HC'uX%aQaoD>!QgF^XeV@_\?<2!i["NNOa$j*FTQ\VX@!H]Z@9tU;>*OgUj*nmZN+.S\o=8b'\O9]41o`#CF9G?ctt0c4\`LD)[1Vj4b0;%q6k(h"=#E>i"_@4g0om6ThcqI&&dtN%&qsGJeSr%IZAQG!api#,&p!$:\PLG"$Rm&EdF*@Ka`1Gl+$ra5oKT6_8fbb/Wc<*d^V;J%,oJ$#dN0;ucq6md+?+,(1NbY1cdDL8B=<+q\=hOK'07>i[/Ion1pTFQ24g`4l@ZR&bZa%lAE*Z:/Ucak#)15emfl@I;LDSr2JbH$%g:Zh"fiD[NMt#d(Fr7+ZehDJgDs-o\*-d$L'`Z]c\jj\<SF/8S%F5WlYEA)d&&>Wc8]\r\!Yp&-oMG7\fE5\#J_Fr_lEO89qt3cJ%\oVR1p+'(dOoa<_Em_3=MW(e`PDc"YOj.a2-Pnp=ik6>T4A"-)r1/MVo^[>S3k\IISnR^CN^O[55UUP)r^_.)!nbX;3"fLV&09kI%0)eC`iT+P.%+@WcM(Td(N_b./plXdWJ`ukKp4XTF/f][B3-i>1U'i530i*]l&m[I.IAYJo]oPSU3k]ho8"pA+OOL6HHmH:"!IqEE%!foaAq./H`N^O[50_V=YI3cD>;SGo0T)M9&lflrLi^e0b!d(a;if?JD%RaqW$SV-CF9)XGXT&GFM&nGpLd(E5s6`CO$Ph<dofr25%ke_o79Ns.A89EfUFO/F:B0-`33"UMPq]m/B6l.=l\PH\+,LL#`"4<5o[eM)p"WRpl>P+'A_L^q+N4d4Vd66r^=NHWgZd$SNOm'f=%A^o*X?5=J9?PNqsp*VJN's<E_q2L<I/6981(@OpJr3BG`W`[WjT=?FQ\1/9fjUYT3.pNgI:OHLDA[+RMHrel$08kgXYDNKGp*VJN%'s<E_4N:_D$^V;?;_3an;`*Ki?dQe6>TQMW`njFd6$FUo0??3n_6+M\[j1>jF/GgnGVL=S<14GUF-*K>HeiW):/BBlE!;tkU+g86%-j^OjYP'6)MMCRt>W#i(V^$0ZQ4uHbW2F[t\b1IaL9d2^6AYRk5lS8t>lfLtfCdSX=.uInk[.VCALlU.M`HLJ+]k]V\Vjqu7fR*_%!4Wh_2nW+9/Uj`D&.Sf`7=.-7^]Kpj@f)qL4)Fh4%g-h`s!NBti6Ro7PSGdKA2<'d"/1KgJI!_EPbZ(4?6K0/.LaAZ:354TpDUs,%_)qkV*Z\SSQ%SlT0)G^mD?M0a)sINj#-Xb?J)^]?p_&[?"n;QZIf^;QlT?:92,-q(C/@ObZ<C;N+_38n\$2ZE4Pp&I.)C?$a"L7g%PEei25=%0+W-[q]q!]O4>Hl]MJ<EPQeQaH"VR<3,97:#1>m*c0=:SEp%)W(o@lBaMO'0F.,&7mI5oK<aLDZisOG4ZLRig0+H&j!]%N$ARiPH5dX[[NM,r$b<iW&ft_C/!0@gij#*/8p9:Nl[u-n/iuZRZS@LW_)VE@1?deFfHprSeIKc-OBbrW8s-.1CVCRC2oN=P2Y^b%?n,MBqG(W>)\@kD(I;R`8P>^XWgl_f+pKI?=+klPX%<mIZ^NR8aV%Yg#"^hh-4%[>c-L*)$YChZj_?M81*mfc<cjlW)2;g`A;Hup%4j-i8JC:eCoVc`:+FqZc6-g0>Fi7%4VX[VE?s14-W$s<^'Hq0k3@_.E$HC6lP8PTWK1\mO28_qD@[tF!PT5rk$K4Acdss+f%nUj0%i:9K82*Z+:87?P%JP\KBCE>ZPod"sHGY-"lXHsociIgutbqZLZ&;O^5_m2j(!.(sJ)c7oNiHo&>o*Ia*Y_?ZU+)N&IcBs+*4f'im%+Ljn4C';E$(3<;QkD(.sfI5k."'(gN1o-plNc5Ogne=P-FH/*f`@j`l/Bb&V%:3QFbX($[6X`%5*g.p#BmQ$>`\7p;.dJI9V>886%6P-e+#a1s*@ij(j,l7k"Gfb`[Tk`M#L&dLZ)=s&`@H0me=e7#G/B=\UoU0HGW05(%5A/3&P/:/6J>INZ&L>8(C?T%8<BMd(3fbbF%!VO]gO@!$3!^PkGM5Na%P8""551.`)6P5!43l=];';E_?UG*uC!7IrLA!Z3<7#as3>j]Nfaei,HdMQuO]E.208e(qI-Q)p1MYmTQ%@FPA*OqnFVJ22NPn@Y]3P6)lI@ph2maKt]Uc=;Li8X4$t!b(eaQ6ZHj6l73@-l_lIbYcUb.==)P5R`iMiMgZ%bP;0ImW*j*<cu_Y%eh]Yt9E_"BN_W\@fRXmUNR9Eh$\bjZdkPpKYr)NO[ath$&Jh&?NfS;)D41H%GpEjU;Ab](7-60Y5SB+ZDl;SBNGfdmQ]gCnB#(A4%W[EY]Ad+"5[tL0-2dIk+i];iOMpCV5A^%_S-V>r5=)Pf/ZmVR`dmZ^''.kR&F^pf7o6'AnJZDA`][aNiN)?]hkSIpfAjm80lP_[S%H0oO#30RE"jsF^31.[ELXWbN9;\E0B_AU1YYr(BO1'V7;*J>;/@a5,'F?6a*O@GKP!#`+YQL@IMR$>udcd1>M5\5r63Kl7bGo6E.%X-h.E$Bf(PZ_FkD?lFf^@&>U`IFcW^%1hF]YDH;BL)HF9a!i:Y&!LG/H,*sS'lS@CG+0jQ>RrfE#bH2nL/V!TLThg=]%-mM8O[&-%8b(emUH8M'TeS))e*p5%7Z8m3:7D!/!-A]Y@42W*FjIpq"Jde(ZXa6\+dLR\8O1I5PIMG@NCP.)10?D$:3hJW_.6"NX<&(9!Z7[&%X^N:2XB5\%MePoElrWhPZ!Jj`K5o%++^3/n_Ab7GdWu&7Cg#":[5\Uf+^(sc7F8gS7-El:9VsBA(d8EU.70tk6W4C08"-V"K<gFs%$LrK(Oqs-K8X.Gdb[(]cF.9%gR8ZZa!1!#-0UYg0L,EL8Rp!J-XC)/e&=_$(A09/)hg"2j!WXsFBen]N!`JejdnKH>"fOOU(0;Cb%,?:]iHNu\Pp(.cd_n!c\Ad=\SfN&\Sm4SsdPnC)UH]V^Fp1tnPk^mo.jnsYWc7g:oqe+JgA$',@1/Z2KSf#Dc_=EPa`/bjgE?gqe%LYmW$9VO<)b#oilmr@/=f3(gY>slLam\Tum$ImKN&P8IG-r$##<7K?4;484-EC--Q<i&3gaYR/iC2't!AWBq$UZO1P*V/>FJ^C7%%Q6o4_dna]?cK,rYgpn,nYh#a72_0E'c&23#,V@,&jnOQ=hee+GU]F+9`DS2;(,:^n&]C*VC#[TQ;[inEI#C#AiBj-(;hdug-;0cD%d^44/]&`]8cDbM5=iu-h\mRZ/Q?1(,;V$NshO'0p<WNFu1Doh80l)A,\2%Yd1kSV'-'M<PXu-:>m$eE'[P@+&*g@=S,mNB*B.O=E%O_t9jGiGh`@gILubY&&-B.`9IY]e">?XnGu%`VES=)B-9)&I01N"#i+X:,@nSeOL/0Pf[!XGKHQ2V^`0L6kjq2@OgW,p6fSP5PF<%%&GXmL>jcd?9AXP_P'@6V&W)WO\gn.+PNXpP2e8nF/F(8fem1:<W[la--]i1_2=j!^AA\:Q*i$KCso'V#Ummhf'q[68HGLUbmDPF%!6D5jNEEPm>8jb\=^u\W8b81cTI`l@%*ERCeVQl@;:^9F.4Su%_fFmR/gn/O)1\2/F2mjn-<1+USmF!=-Hp:(&Kj*:H+a$rVK;pU%:&.7mAeu!Yk6klUB(tGNJd79%'HTo`o>Vn&_cng@0HeX7_Q_5M@B;0lamer2!tjimGDA1DZBS+QaZo##+BDof`3S]H$e*>5&g,4N%J5O?&,`?1Z+Ds0[D?1\2$DF50lkOIa0CBl8!3;IW=XIp<8K:D\;]1DW1$1!Xq^F)>pVpa[P"-#N$o)J,:PasM8=AS,4NfiVe:#MK%PSHkq$IO)<"P$u^Z94i)/mSZPo,&#tY6\!-o+j8<K@)@W9fMI(Th!D_5kYOEND;d0hUe`R,A.4bq1J#JnC%dNP:SDEa$MN8_$30b%0ed393YPBs2dP^73L)ib4BBH98k`_%:jJ;LZT<BohIf8UJANR$-3E+%bUS2Fbs8?W_cYB4ZmgqYAr\flFGp/n\&NX]YVZU.3Iik)%%<U"lc%1iBFNNp,Qt@B^GrCJ/YWYO^"gF$QA-[[\R1kOW^2Damd-5EK)b1+-_l_r."3(oi^i>>dM6+Z=`&?^#)QPl62GYbijZ@8g%/n0>>h\EJ.0`[!:7O1lbBFIJ<k%1Y.ID@#%'8oo#^mHb%ANnTN4Ycu;/i,Yf=<NhnZ:+fZZD$$?R\V'sCR_gn,_c:"aZL=GYI2J.%ea'fj>dp.-9(NmU^0:reE<oCm/Vel7cIHLBSVmNmSSL?oq,!C]s"4DP4?C@Gb<`WnG[eoOA>m\<Q4YHm!m,EfiYdrd,'Xqp1gIM]%1d,n,MCoPENL;O1-?EId+Ath:4>@dI-[Q'IcE`-8K2$=iLsBW<R,S37_`bY?f'7*;l"OQ?@e7[g,\*M\KlGP\+HHAC&5=!0$KB'o%DA5WR#iurCL9D:1r\O6S3%ebRQ!p>BbY9u*Qq20-g1/YY7]L1QWN0h].Tp.1.R@,fc<CWbL9=9p$@!"G@8r)^`-]ZG<6WKU[CUDs%bclM<Q0qOi-jf<I$;l&$d_tq*#nVq\.:_p9:]Q93iUk4]<6C"QJkFi?WW8`6$eZiaB-7O[3L"Pr)jruOUl5:4M+<H?dK5B"9@]j%%53>*ETSm\7#30=eZtZsERqub$9t!VR$\?0N)3I[ON\Cs-k!6ioX][rkP\Ae'6"oJ;#bbjo/L2]G>IGYI==&[kQ<RNLjm3!,$GZ])%';ScNY_-)`GD+=UbsEr*6=I3UPQPmb@W3,JS.n@p(YD&^S;bNo)&j&BFprUb,p:4LABTMdFUI/>K#4JIAAhIsJM7*Mkm+kkE\OXX%(1WY]391Op/lNl,Pia\XW?UoS@;4,&)&pP]0m&kM1dC:g6<V_"V')0r-u4!,kaA6F_$u4CTk&.q0Na(h7,5Hq:4g)ZcWK#:4Nr=d%bu7lu4:>c'OhEkNB.uH!'$HY)F42oG0uGtDr4Qo=V]]m*cXMqg2%5FVC+3ePs#8!YD$q"N'*?SVcD<sB*J<U`GCm)1#JcXm`"Tor%7LV3.#DDu3(j2u(DZC4NE<fX]ZTp&L!uk(^e1]d;/.?>[*5UuMU<AgPk_RWg"Ufi"B=bL4(*JQGE]/;6@@T>nlm+83,ll*,A/g*_%F:)LZJ[Q1NRDI3!hg*'!-2S%^G]GL@D\sa>SO3rp*KY[QlL&3pNV+Q0[XflXeNuWL3A^o17M6B_4Gq)Ub>?\WZ^??CQIU54=>SXI%RRq4W*<k:8VD+bE2<kF?GS(LV8B?MeB,ab\SWWCG!qdV@B:2bp&r/6[d/\/"U1TrS#tUpq>BW@?N:Sap+BD+%h$JTp@Z)JOqEZ90%:U5jc?.adc&]._H:,f>j3PiY=K:!lHC]QQ4S?`=_U)0>TV;5Ojq]diG4COPpJNZQ1Zu6>YI]3VOUO*8i0L@t/KciR#@pf[:X5\(r%(`RV1Y@)dUS>+d-Qu:kNZI(q*PlW^B22sP(I2,,2FI\]59+Q_q,ViDqE`)lcHtUR\=11B4124I@L7^EB\j@Q0?N;jO'#IFD90l5t%_78T7<9$7]n`j]h&655+,1s@O(kj@bqj'R)\qU2>Pg'?[/MK:O+@+4_o.glFC$9e]2QmEV+l&=%*]^#Pk.-TVaZS:o7*@h&7G@7s%W][sDN9a&qTBA4b:a3gObAb4-Os20p\gD[U(l2?LPc('[Ud:D-Ni\:P=eIKifY_s_bk@G`eSG7uF3cL-gmNA>jnsYWN\Cr?f-_Nc%fYLfX*:_!ME"9mI+9U#BVV;G%K]<s'_H=*tq8b/ja.WXS\<q(TfRl_9MHMnQZi#n:"=dpr^r`H?4h@'c69@dt&U<!l?m:9h&&mo.%jT)@tlLe`EY]ta3/B98$7<AZ":n!caRMEb5$&TN$A;2jO/REp*R)F,8E-C^n8H``ACW"'5bqpE!lUm2HOXVEjUMW\uRA:*[Zb?^o%,m1,O:NYSQP!tJLHDg=G1k([K?BMo'2W^E9B`Z5T#L]J4KRH<1CUEi9i,"#W`U5aQUp\S=%l[&)A3)`$W)].+L\UoUQG*[F3bnh<%L2^/?7=tih%tsB$b8r>f]a0Dqk`16#Tu33TO13@Y@urP-.iXR>6*eRn%&@qe/0KVV.=boWS;P*TLB1g-P\(<QX9dh(dE"^`,"ho8%WbELU-i4UDjZ8ndRCGS(!WcuA<uHq%ia?$+LuOU%Ls1'p\o^As_RbjCoPWCLd"MJITkf7"6_p-I!qMlC]:t2f0*eeIibW#OoOXKI%aC.R9*(UT"io\CBAO7[SDUtX3)K@)YKotWR37*JNd4$?Y+KF+!C]\UQrblRrfBZ%LSTjuFSF:E7#*=ghMu>tc1VT"`4&B<0JSZLD%'*d#U(1>B(UJYiWqoh6np!V1d=^?s0(_AgqGIj6VS(4oI<Kldo936e2>6V-,3K[N-/Q)X1pc(iLJ!-=m:ch4tC6h!KrB$\Hj?k^t%;cLMRF_\D'JP&o<Q_f"sarQ*X@?0Ab5.ndl(TD(0RJ(]cDV1buqP/ggS_T]>)]qnZSQhS<edLhVVPZ:Th!Lq"F*2JH2caKON#jkE%rr0rO[WNsjd\M!Ns&tA$2]2hc(DPI"0<S@UipAG`DMR5]gb`^)G*P+s5OKB\$"1Y#8@`N_-&t<?HJ-H-QS0O/:MoZNkP,!]A=:!7%QN&#8&\8C]e]bV66`R[sASlq"Uhg8p8bF+3f=G\Di!Iq'[Af`3(LHrZZq7)mIfsJ%gTbR8ngN)Wh73^VB+YN[8mR^k5GeKL_Xud9%qA7+J!#D,cG`m./7.2p"(;RV9O+("gJ:Z.RC+%`gfCmeIBW^<<e@+)l)K;FWd2b$oa*/6o9<upH41Y*+.ITmb(i]8E_FI]4OnoN@%DOftXg8k]m'1B=o7_eL'Kf2>"WPdq*=*H1%]l:NkZ[6>?@DBairbl#G!aKU.rjZGfqM=nF%sojSlu+BJp4lZ$gQ%C^mmse[aeOln%rY013`?-ke^].0;/c?![VBnX([6#[:@_6+nDRps*29o0=*!CF/a+ZkgV,j@UP<W>F[<=$G,<dsPhN33\.^E.6`e19l,lqT%Fc.Q%%]=5$tjjL^MTo6IPZp3QQ's4n.d##MjO,e_fDg^!s?u%QdRs%]4eZ%Cp0\0Ole)RJ8ALJsH)(_Z][=gH61onO>UgHc.EpM"<)q$>f%]@JcZ*'YrqkN"@L/_s!te@$i\EVK2LCZT9YFc]q@;m79?8qXS48#!Zj-_OZ;a-M;q[(dXAXZlhWT$;#1S`W*BCP4@\*3@<DTi;.n%rIL_E2Zu#\$4mI5H'!iXi&R].UGZa$*d--m9;1KU(a%lA%aMu0SbOJo0)0)FGHJM0`tPR`ks=\GZR"k:?I4J?*W+kAXrXrurLiWB%Vq*J_j\7D,,2Hg3^4R!L]ifhZbI8+uJC_$V\m]0LCUlBdWBV[KYni:693KN1-14OMFrWcj2\N]1[aNn0q&_8tp4*$LTjoReB%2n=%S^gZC*g4Zl835kAM]?m(l>_HLjg5(Hl)c9ene[>C:"*pDp0sJnb8l4!XU!G/`$VYQB:&>T@SL]Ch^l.?V;*9ae68]Ee6h%bcJ#O$%@k>+E]qCM)nV^FC:').):8Tkt5G$1kLeQ+(!PM8_nSZ4nDB5ZtrT%]Se(&QOl^NUV:[;9e5hF]44b<#^3MCVA?/($RBn)!r]q2:S%GaDjTasMa4qr0p=lh*/9UM_3d*QL2MbICQl`sUW>g=b1R#@o?s%-3\bdJe=aeoHac^*koBXA&$#55t2?TUN5hHDJS6f6NQ*Grt*6%qWgRSIu[:+4)_V(R+e[`3gQ[<.L@K.C?B(h'J]m\AR2o0h6`/M/#sq1[Fm!CERnZ8,)_JQcjYG^hp\Gm6s3kC4eW'DcB5Rc!S$kV%hA&!bm7j'tY\:$q!A(V\/6u>R].UNMZ+R!9>`ARM9%B"R[FMj>@Fq@0.btA/^1n3]Q/cOYj1W.Y;F\f?"1:9FS!S",DKKeBM\s'/%l1f:'T[+5\8rYopg/b.u4dCDlEc7jI';q$7lV3qXQ]ni9.T:iZ$?^"L;5$!#7E&R3].6Co?%Keoc))KF\t>fZJ@6O6C2)D7FG427%1GH6?PR;VB+n\?Odq)KOA#KdBe$HF?%5l'mgWiDERP,'kI;l@`!W]>=cfK%pV6qP]9UaLiBth[<ZU),M+4=H+F8_\][jHlM_?%Ar%d&`7#oB#?nFLh0VP\MFLDs^65*NETcl\\&J.r=Iq=p1tT@pUk`kH%jNc,.uUfje&:p#h8loa1+"Q.MRg1FmUIFiI2n7<DXF5(T$q%kG`it@m(M(/4Vs0,]-?R.EP&],auL'&/`6gpp0Gt*3403UKHriHU/m13YP>h7m"bBY5DMO7FOB@XN?[u%g2#_Q+Gg2A!+3pH_^71%_)dYc`W<6UmX#/e)&9]=F<eWGFkkiR*!`&RGNYSC=LFuP"*AL(Je+XL<mU3^NR!=Z/d#37\p&=O[:Jg;7:;rLX5@6_B?]+XaCi]d%2X%dr-S?`e54/XI.G*!OXM)7i8bjOb4$\X"D6>8Aa%Lp]n[6'GUe%dh5IEd]]6@""BIip>N[1`TmANl2b6Be76jhV=lESFK^k",i%#)#-TbrV?K!@,359>Ie_)*i]DK_j8h>TsA+&WLUj9D=Z#*.L/lM2Wt*dHK9g0gem98Ol!@+,AGWSCPdGqKQ&HK\`lf4XkXsQjioh%4Cp1,)*jO$3ic`,Ra'"2Jj/@CdfaFIj8</nPHDT!s0u"fV*!6&kXMoW/V_Nh>Q9^kENQ_HNnhpt;QR:KaHDib<jXQe1d;LsIm"pe%'ErOZ9>gOZ(H3%$4(\)^^aXOg]Si!pj_\Z)cEn8@V!lhq"b<aKD_A,X`Fc!9)eYu6Rfnu,%#_V?X"q;sN[Nq+5sGVY-H"Gi6*K&`%E7Bl5Rs[Ee!G**#G6S?/=C-H:aAR5j+!]LjS_Gr8%6$jY:?2UmPC#C'OsDt5deXnO`qm'T]<E8KI=SVsY"0s::ptI1ViQ_1'JBZ&%'6XOV\Qb0"9e%hi/C_=8BS@TNM%J$lU(si-0jmVXS!cXS4"qj0hc`+u-U>c-#3T#J7_*6+ES&n/*J:&"B6LSF!d?jT^"b0@\5L!\%Y5.W7K.RFKZOAGBZoDsO?5S<!V/BC_4BL3-pV,0rjO(.']u)n:,qadKX/TR=QtZ"eqoW5*kIjl`4Hs*\i&?N/o1MQrj0h3I`XWbU%i;mdr])#e`G6J&[S6K'u0`%_:!3HH/*qou\Ut&C^CU8tm@#N5c-"/!Z[con*V;0F:kalb[hXoSbW@PQenn+4-"f&Tn9U"^KhP@VA%OHS4Z9LleSlL]84WYs"IW,pYH0p_LgG,?]*fHuW.bO!+B#*t_befKJ41;E&R*KZ<]c"`\LoLFcSr>DB,r^)a@QDStDZ<8R^Eg^,A%V<mT**-D"%WK1$PedaEtWI%.F`7A/e[\RK;DqodiJLkWX3m&-(\Q_-X$@s?blOfN8RfR6>)&QRiA219$NA"rNdtPR=\9+BtDd\?(%fYrV;eHp?RCI*`VZ8UBYk1?\?#j&M3\R9;iD*;4-)OB?`?Lpp&-tuMuS,-\!B5OTQ,X\/S72M77gLSqg<!M[bZt2K]`34([X<!PD%5\h78r*WAp9<l_>HW#@1aB95s:[Lm1V9\M)H]O8s$XL?Qke=u7%e2C8)Vc"'CY/ZQ-$!0<Yc`bRpg>NCRY/l(?-u`GH8)]/T]j^+%P4\YPcGNr6%tSYV+fsr%<dV]#'QuXBIdLN.ZGc&4f8-orji4e_kKYHL=2(NB^q4EUG!%DF7P"eCGJ,"ii"C59n#`^93,<H$Y(7;?%](]miMV"'S+%pW)oLs!$g_eQ8@Vb3@eu.KtZi`t_nELYt%!<<&VTWaLmS31^]uU\KbrB#3kR+Cc.l.DYbIjMMp4UlF>=Pik)jtE/%+tW:ggQ,u66S@p6VCVP/aucQr&0/n@m!@&sHIfm_cEr5mFjYE:U7XU6WErK7c:&c3HM&UbY_+^FCpE10j91+g3OM6(jb"c5E*Am?%I-WiomG<icL]98J+PrtudRg-uK'KNQ%;7pP[g9R0G]0S2=d.)s:"&\uJs3/S@00'';9uHk/P)t-H<dGQId[&POJLe:,*?SjAr1Z#%Z1W,Y[Q2.=oIqdYb0Tat8\l([]i,\f%+aL`HbrL4^^f2:`R9ThC4"&qle(NW$ba5R)9&o.lU;.f:N`@Tfg;/(!CihBR]QtbhJA)5%0j)"hX5LeUj03B3OTZ6BG"<TQ>/j_@nE#:&0k&1QldTr%AY2^lMrT>`'_^TrlJG2b\b4OeQb&pSl1gN-_ArM5MmFd)Mn":ZEOrVp%ZT012cAddp2h^;J^p;>cJXA7sQDFKSDA(5^G-&KdB/Nj3eaJaN>+]/V;8'!p*JL1]HJ*W@(s;+\i+,"[,E-X6.P_moSCI#u9aU(h%f.XTG**bP7c&n:]IX1O)QSRhZ)L5PV"k"#"J(LWsekGLk<gii/da7qp//q_LW!U2p75u#fNXeV2UHQjhd#Wb][(RZbd_$m!'Y4B>%P"l\mb=J0>]OEj1'YU:"a@52jlF.H3KJ)BnASu-\k!:OScuZ2<hA'h?/&&Ks?JCY3.31na';PEsL8!r`UL!iX!h^JgYPJj?-J('$%eW55+,<2[g^"jW#]Ceb\)!DE,.nGtt9"'EGg">&,X9&f<XXu:[1)esfX\%jE+[dE;`X2FM/(&6O?2"NG86tO%R;#:1#=5G.kFn:W%Gf*sekud'dQqtV2o$DN=NP3K_MZ2ha6L4[EG/Ac+r5R5nW81sMSQ-QHo'HT63]^ETCHZKI57EnlQ!pa5GR&D+2FUTN62e295aPDm%rUO<Z[0aSD(R\7H:671^\[]i.oaZS_'+(=t&3JIoS7nn]"<[W!bVYT"HZ+Vk$/P1bm`^%+C>Fa_QBol+J>n)IlksH0FJn<D`SLDh%D^Z%]KGmCZEj?_^.Uuc$m::-J#ZFGj=Mm;"a'X#'+DN.<[=12GBY)\4cs]1\+G6C'I$-(ea&kMOUpXAnC<>L^Gmg:!\(ODGA_5+0%!]4Hm-Io76Ht0n"p34T@EL!MQ]+&35Xgd!hVXq%AB[.Zqd^;1Bi?UUO@Lcu`[driI[?]KJCs*AR"VOo=[&sih8U@N>:PDooN=7th%Om,]>j3?aq>JK"?81tE9D#$,5U3SU,@(sqJLM&A?j(/Rn%P%;q"U?$[]H%5?'7UEcD=Fp.`G\"QRD[_>g^XVmiJsuQfG7B:;=FaV%Ah@XJB2M6d2$\Js!biPO>&P/:Xi`b^AW<f`WF`6ok.qq:YtXP<,XBPV^g8B?f`TD'Ad"6aVPLga@C5\ie/JWnVADMoQ'9nA[<JcY%]o>]Ip8TXSf+g*fT%`uW`[GL*G&J-o)3\*(j`R5kS<Nf_k3Kgkj-]2//oqjZHXbL$$Oo`6X*MaBUb`7reY$5`2n1&Q?HYt/dUYYH%%W"3RGpiG[b!oZ:EIE0;;!iR%d]lV)E#p(8c"B=H8::>K7fmT!hd%OSe%4GP1l@>!BOF"5(Yp5MBs1e<pOnh3Ofck@T]N5NPb=]B%VO+-CqQhs&RVY!_,72)9cq>CC[e$_^:Mkoo1eEC:"kB\5*NQ5GRacJ=OW?2J'R+8jqaI928_S69gfU\TeT)%*+M/n<9-1[uT\]fr%c&Pe_!VmjnOZa1NI6!_8E*Q_VU2<B)QMFSR70$Nd3uN^lAUQ'8OS@"Vp7.Z:Vh>-*`e*HMTf]":;X;%j0JH1I4WTI.%-VZkKF>):%kr<t/.P2`ugf%uIN(ZTCZ[at`>TH@)]'Fc</".TO0P/hu*H^PT4PaC5qU%f#\'%q(emh@f$>b$GmN(OA?XR\A3L4Fr[e"_a_J++]%T7p^dDZ_s0Z.'[0caY,L^Y[2Gs(se-:&gWcrp"4?LgC=;buVD+ml%QgfT@1,FU)\-AIQ*i^HN3_;u8p:F9O![Xd?=_@&X$l*no7p%S%'XSflkRVT('/"ArgbMS)qChDF;M6W!$/,jEaS4@,.h1n(V*]MK]-F'N<boXE7UmjfhZu"jUt690ar8#*u&p@:j'bbM@4mBVZc)%HqK^bT;,iZ<(#-F83jc++..-f"6`dWU^uWVf3K><=30ru!*kZC67Tmh+q(L_FF8(+a"M)WJa!_KW"#MEL&[AI%n5'J/[j5MhqJiD%K4An:ANh@q`cCCNQeGjMgH>/.\j"eTBZK,J`*-YQ6G;BX'MJT:jaJO-g&a')8M&qm%75MG,;:+7-QK$C[`f"XDBn0L)T!t@?jT(o%nts+K8h"h&<3MLdITjf"VP]L?'l<+e"Yo,95okGmD/;9GN-/j_@bB*K^f4a1;PY2I'#&tLgSJ$SDOShMQ*_sS<trY[m]F6(1pg*1%-M8#k,;W&j$E:K=:2)eJg'9ME/SClePndFHoRpfV'QTeLB*tLEQA.+i7ugKa1Ls&6A:f7R1a'5Zi1iWip-`#dN870&^$2ij9tj8>%e*do/csa`sDFO5Am7^##9=h4jaiCkMf&_nI/;s#6aT4utlbpe#F6tPNSd?<Lb1p3Q9Ne"#n)kk/d,%te)0[X?=j_i=&t3ONF)T%N%aL2nAopWAUZ1rBjRb(c,;"K"V#\OEoRAN([L:I(qCqH3m>S1jS43;ZnhW@6fRj[Ig<q(+&B2#I#:M\DTTtuDkfh33G[`_kVb-3ek%Vj<JA7H</#,]/[NPG'KONi#1@6-/NY"fBs*+C2Nqp;jDkj5rZd>UBt5_f+WX_hddgO2-d0MM4rQ$nOtR]/Qd%eMb+S!*[/A`-)]_%-9.I?,0V#hl-WY]_oi\dV!l:XHIp71/[L+1hqmeG&tl(=@#*EL-9bb+k'I<eXR!Z&YVP"g[BhGPokkSJ%;j9kKMSgtdXa?CDHJh.%=:X\b=r>Gl=M/I*S7Z/gAT&qA!@<02qNUD"8\3j2><?\3cu84R`-,=F/Z)!Y[[r8ODTeN8nc@_%]s/jeZ\QW3HUF/M"SN19l"_^o%g)2G1;#@;=gi?r&.1*?3[+VYdqQhqX-4b7c\[F6[7'qr6QIe$lND'RR9DWY;1``oXM+`.S-.Kr+OOUpsEbWD?)OP5baR5"JT-,<4%UAsB0>@=D\4d?Y)?u/DC\JCR`Am&SCk:H_%%<tMYjq6H*Jm/X.leVX5^)<q$_Pai5LS`1ZIVE1.`Q)b'1NQZG42D7>KL^4Q9ZI0,%\F\7PNDSBa0\/OlUUK3IkUOP`(/")OjeV7+NN?q@OB\\Rp,G=_m%bub^#m]CkrO!q^*<'DeV+Yh^',i@Nfu=h_cWrn9.</tS%"@+%L#A)]VBjG.SD>'k5FFGN4R&@`.9cLM68QEo?*hTA1!H6?Urc'd!8"0Y'0:\b)4u_El_&@?5\:1ZFGR"_@<?DajZLJe8=HDPVC!TX%S._7kO>S9;15&?TgSNRR:hBe344G]351CkgcGP(!8"_H0pt@APaK/*3Kq'ImVPRih3,EML8\r)oaLHRa=Qs['::c#*kh&H8$tCl,%"3Uu4TTSKHAdM,EBq#W#Kg]e53[GfVAdiS5,F;14c"7iRbqk\2dudmbe&]@oO?Pgqn<igK,XBQ/^bUMf<`\NYK=sAOi<@*]7'%sm%/FUi8o$#RI&Lk^^Tc$,]ZTR3c-orO@1lQ^7%&JViaNt<f2\p^SSUoV>P3Gudf(4uq;VG3t9_T:Nd"$(<H=P.Y7F,)Mr8;.m:ku(d%".59<Ggk'j>EZ?-Dq5,A94Q>0K(RR<]2m9RoR<ba7U9?&[g\"G3ntCSIV5!ge#L7k(>C%nmL;`rB&GL,(1%3:Nq[AjkFn.?%^^r.%G<Gs.\*1S<;:`Qoj6dBHKV%1_/Lg$8JS?L?`!N<M"DG'/V3L0TASDPi[;KhMUCNH7W3ReR?oZp;&cO'&YJXJ)Uu^IDaC@ZnBYN8*%p)BDH?VC0Y8%$&d-kA7]%T$PX99Rk7QH"GIbS/_smTQUPBKqDWm9A!@[\?9.$-`Gum6+n('U8=S<8W(OMR!D-)/i)5e\.H/kDj8R%'2CXl1JNq*K)rLpA`Om;(rVq<@jp@jV2hp,/7CNs!lbm#$,qaMTYltSV\X%X[$23*\1MF7GCklI5%A2K,d*PX<be-$jZI@Es1l!T%$:sKi^t:CeW8&TW$Q?maJ\Vn+cBkj_RIfP,28NI6ACA"NTat=rc9j/=HC?T5(MfK%_\hF,I^T!A2D8oX]UPfN#F9mMG-I-[A%jpd%P,n$"gF/@@!I@$Vagq/Fjj-kpcU0=\h7JFd/Br8G0MblG"NH`Agi)Y`]_f#NFB5c?o/)DEGjucMAB43W)M?<R!b+6I:(\HtB9DF^%H,H-?$%9u9>>j,2l?=#T$YI4seIuQ!JRtO/jVg=F"N[7B@'j.p7^7?H_[@CI#et<^`7k&eL_"WQdbJD&QAn!u(,eu&jZ.0fd8*4i%l7*-Z#q4?V^lj@sa]g0[-EPPq1JLfdM1`-#BI45GE9*U0SDMn]_J)>EqJKi#4jI75d$MCZKks1.>t\\S]2_#M:2(Zj?&N;^\)SU/%@9Y&rR''?j,\+<IGnA/Crm%=:U79psFg*42L,H0k>1sruP#/N4e(Q&p\18YhBhH6Jq;+^KfZk\Brd*#0du%1tQI'FVQn*Eu92RBE%YV_;aILN'+k6FYtJRsKT.koG:`6RL]5@,]UR[L38eE^h3K%S1-LijuLEZ@CTX9fbtZFF=l)sPWi6HTsVG]/bY$m8Vt@QTBprkm.^%/E1,CQ:_0XWtJ2VHG-R0"eQ9cN4V$e!mOpN:nZo%8`kslb6VuH6tVmN\DU"a0:/S'Hm1#F.AG6d^W<\B%1(2Y$[:tDHTkK:n$9Z"%_cTC1aH@fYgVKnKioA``+D@Qi]T8MF.1VG,,F`^!"`Ipf8^ZY0d'a`^n*!9mQWc:2(2*`FjB1";1^7+PNJQs7,4bq1o3%m\KRi]>%Xm"_H68QEo>pfq3LAiuu534?s2spV$P(X4l>=S7K,=?7PNBi7Taq=sMd1J%\(h=b4U5:*BqOs%u1^>U'W!cP#V.!VDgf$6L_LZBK%OejeR@U)<)J6??Pk%m0k9k!/n`L8.oBAU-WMU!#)j6dB@Hm,cuQo!kUV"XLddCs4,%-VJufFDrR$e3O;V"_7uRKD`.'MkZV]s6[=%&FFo`ktJMtXHD!us8"VZ97?]%TIBMe"R7Q`9VC!<a"<ir/R_6&gq;Ig6en\+=F'3aC%Z"*X#E[b#!f0M$%&PN.=+&;kqSD8SfU7/%_#1t]gHdM4aO,/HR;V0s=,//.*o>P4_C6qKp[H/oqR32l&:)8*itXp!d$u@HWq-Z-+kta"en#@BRU<@rT,[=/T8-+4Q8G@?.1-$=%cqGpGH6ZidgFKS,BGbNi[@=aEBAM\V<NW`hkaLp<Ap-](>f#+l4>_*_D`Gu<S+_M^lXZoHAn+*0o7WI)?tO.f)!c<Y.4#g+]Y,Zg%V87dAfg]pf"u9I@.&6HWBhQ&c16(7["aVWn.'P]TaI\N6pKGj;(Tt+KQ2n$G!^!*(X!36rR`;"C><m!0d3?i_F;C,[Xo9/BACJ`o%ER[?c9?L`;YLA5?dRf$*SKi@t`nG>^]dW`#:\_TD]4D+dd`>*\''>u'^Zhsto6JE(=AKdRRTYE])+1&1D56WQ]ukZB,X6lk@82Oe%9-UZ\Ro>Uuc(`Ht!hSP`1!#,;,%<Wi0!RG%T=Ze5oQ)/V9c9'KbnHNHZmlFhH`$";+AKb@B?3nAG_QWd6.^&X@QVZ%VrN_.T3KVc%9L:o,'k%94Uc5uSS`"ZkADI+i<RB^KaWN-EP"Ha@bH6@pO9+30&D'TRmh39FAp5LIbLIlg6-.Ta^l[_BBshA`*WjKh1uZD%W6d*+%\18Hm@->UoKOWNeCU0_r%EpXTkq>>L].n-bPID#akrW]MH^H*9)["Z=,L_Rr&ndur&qK;3he78D,[kN2>:;@p:P*gW,6dlgLlne]%plBuT'#_p,5ttLO8Xt(dhC)'p>H?jX:>b^8+BET<c-nAtU;PD81,[H_b0h,'[s;FE#jO<8qcUk:5aM%mXlp@$68JUR#G//4$Dmlj%I!f_7p6I8+7&P^(oQ#)+L#'gD;\JLup%FJo1;IScAF`R;c[+L,<4%Y)]%#,!bn50&kZYj:cbLOm\^:EjW4+$\Fj$8=,R1K%l\Y!O%=MISXHo[+pU)TI8Q2t]2)&QRUYbW3UGAh0ns0)Wn1ZhAg@5#7,JW@aC]dt;79*dTsVlB90*cajkQr`ANl.%e`mk;o[[Xo5&E6fA.%nlXJ/*\iaBG[06qollVV,lo<MS]E3K^3mr/$mDfXRi0dt@%OXSk%Vtoe/Fq*C^aLP"gj7X.lL2@pkBSDP`d%?DWh8N=[>;h#LV)W%)38rIkN/q!7-m[7Zp.^@mZ]$a$%V8RA9rN(dbfG1/:\MYaQ2Cs37bZA7^9%2GgR\l'%V6.XlgjGHHpp+_RgsYV?qOt)d?4EYh!%C%%BD,E>1(l*:W$;XXXloh<HftFFp#nn<cTE@9hAI/[5J<8]HD,PFAFl>Dt7c_5WA;AN<S.^daPJpW%2M]oCX\,\3@T;"J>[\c*nSQ%.n;Ql*8m@C>\F6<baXl3%$Cjc*4#r]q7qcPD$3P!GtUEEM$"-beIHg.6U5/.O*q/LFpUGPB4sAbY`e<DMbGX)AQhDV!%%`<Yif-B%?`Q*s4:Pff/='2.DlKQfE45Rql'5k;1Jh`]H&/);4'7b^$o2aFU2>pCUAj(J>.,#NJN'e9T_S2G,\0GaY6jf6?rBTV_/c$=qcSU,%n=I!PZD*+u2\hdj3?_Yd%?.nX`78+2#s_5N/P5*kA1`oB%Db*/-anZ3Rt6mK=bL\TBmN+g`Nrf/0b''n.@@2+`n_TN!#J`=FQa(u%=9dsH=S,c7`NgK3Uh#qU;U]7eEhCk&'F2jV:RDmt!GM]K(gBo1iu\;=A'n3!dkJMp`H.9,*QMZ'$p$`]M!Z<G+)j(",:rD3dUT\Z%#AXXj!*IU-9`)">bWMN%"Q5H5Fn'Zi?VEE[),cu`@NEUmCa5$;Z)(tk%d"[MeMf0fV[5m1C)0!YiS??b3FRXNN4[CJ5#/ZHM9bQH%N4%fPP`d%?DJ0G\c&HOdOg)W:D*8E?Ql?m&g_5^s)d?2o/U5;1P(q?0/.H+V6^CWErQN\,0FrTOoQ%<l:P2bZfFLSU1W4RV)!;4C%Si=)?-3;,l.cP"Y_&>m>;:i9C-u%(#!`7M2/L+A=Mp+"(@EiZ*dhgTsFr%>fZ_[8_'eS%CKKT>i7IYsn;_UYE1lQ^7%)"&O6&*C0%)1j6Edk8U04aYr/6Sec9L9'9t)G&!97,)Cf@'<%["-im-bFAu-=fp?#U5-3'@H@1FV,(<C_Eqq5.>`>ufq&IB=2>QB"4B%c.p?mo%68O/KNGm=3?otDE93BXPlkMdflRb],FhM@>PD-eG;\E^I=hC;]B"#LE%h!84GgW*p$-`J6I%IQT$E'eI90bL3",j*"\F*sRo9Ku9%,U>.ooU#mmkjf!i]u5JN+J_TN@-^6ZVhJXC[%_Co?EdK^_lX`V\YTT_DLj*!CQQ>p,ScTB0kd\T-gh>9Es,"^=bJee-TsL@H?bb&%C^`?lB[j_(Gf4Yglrr6YJ55,V8TJ)tGrCt8=C0A<3(?UZ[4$)9?lX6^,Aob-$9qtS)[-V`O_kt&WXLEZRMT$fj8#6D,%X64`h9g'%"-Tt5'<3j(bB_0d/MJb7o7TL*`g.=_)C"50%:Rg!=9?\Qb?C(Q)++qa3tDhJh)qq_6pD[NBJiZ#5g?bUShQ*`SoiC$(gH:P=+;c8%Cc\k*>*F-N!lIj?L6Da2G$C)?f=+VY3ReBS.EEl(HDso\F!9/n!^lA9Buf17@nR.Y3)A>?f!=sd_XfUC[Hb/a'!6I3N<+)%F,+2c%m0$4^G9uX"*h"_D%>X@CXqW8T+P%F2(#A*kAF\9o+HuoK8I0J"1r"8L=@TOOEGBnK_5!P'_QpAQm6!4nd[R+]/"6&]Tc$+^g[_-t%O!U*.h@b@Ub?L-+Z?^dkYkf<,BhIBt_:a8YRX'NE*2Y)'V`2'.#cA,_8V_MqVJ$h49[ls40YHHu,95bGdrEkM^*@=YINJ'd,(X1H%et5iDn\[pidCj4pg""5'Ji+^(n><D3osd("hpR1`b$.>;a9?1EP$#(/]3`cM(2Zj7*dU(tm")Df"\ZXnEVG3l"<:MFbh:*AP0=f-%C$\h@s(l/4[!G"_"e!A:naP`-PRMY>fZH#T*JX`d'7qNlaLHRKDm*)4S-+*AZjmT4KM#>*K,He25o8D[@_;#0Wa$neCh]Bb6PaZm%C&J_WNnkXY;GaYf`nfe`1Prm[?r!)q,af>./0gN@6tVmbaRhHn'jm<6#bN=2UfWQk]pL@ER19Sd]+<5TNbF_<n9L4KeUa%'JL(W%%!l)3dQ/>XuZ$bRY/(fi5k10_3GDu_'!/ZtT$rR0ed5G1G3+;1ifTm]3DVc"V$Hu_;:qM""9e_3UbVUVc#2sA0Rb<9O*2Y)'kJ4+A%K35"P??E)q2'I`JR%Y5-:0mr=9Ut=nk6+GqOdW'lXG1!)1SM"]o8q/2JK\6oBu_AOZg)TM*9^:>5hIlHQ(#/bTE`SDP#+,`b6Y/X%^e@Z>b;X(gH"\N5H,H>&_QeGt9+!$YJT:F=f]To\!p4Uh]('p\%+^;BXHpkV$*5Kp/M(n3bM%CdR^$eoMXbi0MK(lu\%T$mKrZTr%25[GRpl^:&,oMA6$p.%2'HU"=YqEstfqdcP&h>qSp[ca2E8FF.H,=QI@nR0l%"WEm3T;m4>6<"TF-\(m_OMWn)e88N8\o9YFK,\Y%?/e-$Juq^V37b`C[#L#H[gP^2B5Gc<RPY9*\:6:FL^kt-R`>Ik-I*<=*Y!qm+M.R7BL:4kN15)\FC891"f.F;'?7^_:q]<;h&A]R%(0CX^)0;)hF*=jT&^2FC1JLH.79H&*6dt52i@n'+Fo-K+@R+T2cq/%=fJ<\h^k!d3j-R7,8W2NB14gg:a@t&m!lOI^)-Pr!Bf.9%%LRQ#F<mR=m[aB?9?B+/D!Gb"W@B$5D$`g_OP,))^?l?fODe,^o#nmJXlVeti%>!K:4\;ht1(Rj]<E=4>!:<cH)2*%l3D"a[),<XU%8#O.E`3P&Mi3Y6*7qqS=keM;n2]rgHhUk`3+eRg,d.W?u.<9E00USb-#F6X"8_u5>_CRCi1e"fQ],Rg*h2[t<fP7gF9f^r#R(T[M%AMO'H[C%f\#"P1>GY8#tPIDgrh=_UT]3l%T`p/EJ+IKDPg.YI9*:rQR^bEuX_C4T,/\Ue/G5Z]`Z0CarM+]/O!be9<:+$@0gmXF:%?,0R.i4P_FJhFl:p,LFFO'%gi+@jsRXm<W6p#cHn^QEO1L9T#D=9<H=.'EVG-=mm,8$[_9$Kt$BHQ6FNl"#)@j>q@VD0-IIc]4#Z%LE&r,RCjgGUO1j\KG!*G.!pAtOVg6d*<_4]Zs<l59D"^!G'%+q)[3%V7:9q'5rf\uGAdcK=E!qGYCKZaJL*mggqY[CV[4S(9hC]c%Uhr.'9o&=pGMa&pS2[mPYepVkf:WeJQDS@5bGRTfkn"YmNc9P\"CEO8bVYTTi!E%%f&lRcT,.h#QshQd'<DpcU[`rLVF4eR=FY/C%iuUs+&0<>U.gal$<@O\FC:('M2[Xc!&X=XPF@'AH)M9#p'5]O_(VGV;I1_#'(FLQ2ST<+,V3M2)2<EoP(sBIPl/6$-A!"%i4>^Q0%q%9H_^R,]H7bPFoD\QL(%;6[g18(IPX;T@tM@<:Z*qGU//E]K7RZ^d&F]Rh=6--Ig^ede'#plH-[\R:k2_seB-`c)g3,HV1KAK##%JBjCg,bY<bb6Y^b@&>@Zo27rbZO#Ft9TtJu<\VgEduhqtK(1`QmbSKj6iq]=OA`_;$*!BJ<.'$3`APo3#oY86k<=i@I;*^7TPAO'%NBsR&-e_%"XjX<7:'"Opj^\q^N)1.;1I;tu>3B*UUEO=0:Y@V(4`/dS>V"8?UmF0j2B(m\d>D8M=lQC@/HH\pFtVTg4'*sq@3#$-%&M@/oXJ?[q(to<pU7qHe`;F6SC"sBm\2UjlE1-&!j%C;":$+#.W3#E!$2;a<>#2)+]tGat^^\LE-#p6;=kR[WhDRX?`S/-"XU[mK%>[VB9&bNQRpk"6BB'O(Ib6@2\,s,Eq7l'X<_71;LBhH7OrN&^!].C3_>U9\M(N]/C<Gl2\8WhfoAK/ISO?n-?=/EP2a"kf[.$j/C%$Q:HbZ"@O,"0M<]16"S[dttN\Gem^GkY;04@@Tk%rE":=F-;&ZO+T3FZ#UeO?H&57EbfN;.PsNB_St>Z_+JT1(gan\,m=YmO`C,a%q"Wo_:J]$"pFJb]j_s`aL;5Qr[BdkI;\CRd[&rMbWQ`$6col)C);(GjXP$(_h<,&:]7D9DS1nSI63m"G&U(_#9[a]D*bW]Mm97/3%Np:?$L_d=_cjZSVX*Udu>[TT.>$@,U!+^s;QVdB+(2X.?ddrb:VV*?@m-^7p]:Vq-jVA*4$>3ogK,g-iD)7&l*an)3`>Mbk1'j_X%Fcq8\?Ss('==4/NoSijD^Hf4e5_!c/NBrRS-b:+R[E"['($ti2JL<#/#*o7J38PkE7la?nFM27=Wu6JVVBfHhFgRc09So&lE@"&;%jDJ#OnCRmp>X&UT]/PC#gqXPQ;CcZW12"g67TcGiAt"lbOZC%GLLskS2]TCV*4n/<Up//K`n_SCTC_a`R+$a<llB#,.s`(;)M?n^%$Ae(kgq0%Ugn`aZk960_!n/;S+K[U*RhLBQ)]<j<#c[M($_W3oK#L=`Noc+_;(Ng]n:F+sOF#3n'F.gf=dd8P8**.nBY7`V7WbP<%=;*FqEC)&[^^6]n@dPh>e-dBQ]l5N2S_)SC*ceME0HB6!;/>=2DI@:K&M.ig`YUJ-MnP^:Z"-!n.G=7NL-2hRD$?2.A>Ud^Q(#,B%4ChG-(_5".N\bV/)[.b*GOoA/qgrtH4.cq02c"u7/-4ml3D5Mq4'B`4qcmO+.EV3BA*\DRqOBLD2t+E<i&B(WfFjVRF9OWHm$WGk%cB8U&%T(o+H_$6X]O_3R-$SrB8U(.^Osd,0B7nR,ft?:j4lP%sW:d;kgG.:%cAM$(TS8o"kJE]0"=4(.*L'F&Q(A^I;UC7#jd$</%.r[8'5n;;!p,OLjC'LQ+eIndFGtS.?2/a*",L"Dk<o,UK&M,WbPf2[CX;ucX80b29Hd]iD7C/d91]njnRcc6Wq+uc%Z#90!!)suq%P(\_7>=M_i"_O4#Lh3'^rB)oJRl;=t-QK$C[\U.J4^i_06gSjM&n'"PZQtqpk"MrE%-S=C5\p\Q4("$9B9??\onEM%'1QeVCmbkf%R0:MG6r#VSOVCn!OArn>$+4^.1;_^3@&E1nMRoS0;n63eE?MZ[QY?m*p4DL71g]Z47WbPY2'IS`B8#g_aL`Bo7^Vc?At"m)3pLQC%%l*a)`c1.*%Wu,LL:,+TP+mS2B\^:p2/*)=jG#>XYlN'J8rhRUTJ9""N9HY=)tb.aiT>!+.RY9nfp!`Z+l:k7U,?.ggq=l5fckbH%bis/6,]gPeAOP\oTp_c'e(9bkS;3uZH,H>&_QeHOX3eYV=/r08/F0>nN-4?i,SbAga:I,_U.Zo.RAMF]'bkR:_EN&3#F?W%de/9F%_&HTVF=$B)j%C<=fgK?W0P=)F^f@Et#>tdg)9'WBij<)P$9E7$S-53>35HQu8WJaR,MnFI1;^a>(gkW$qi\DkTRV5[OuZkhk,oQN%El(*p0[l9)&^B"r4N*-!_+L$??VCepld@=m:B71k:Y7H,H'HWeGddgK#k@ULTe>l$&QX(+RAM61ER)#acr>#AE0t@VTmL9B$>10+%EVG4?j1H\RS?T(@adb(uE`j9qjOP"!6"HhEdXDsOLs(r&YSB<1902K%iDN9U3p^)1;Mqqb!,9@jEipdc@;d%BH<t!V.>dA9cL+J^%Aldk"8*pV<m>W\HXRJ8d_OVWTIFm0:<XCHmb?:"PflEAjG.#+ZdhJ5,8"2-o+hLrdHK5+kEE;BpKB]*4SeVZXO`C+U_?^u\!d)3c%9X9Nl8Jn&=TG]X`g_E5@Y+t546AD'+W/#TG8h2#99*/Tr$AuH.N%\lN"^bXD0PAU4P0=ebp6oC?&Xd?*_Q:Z/Hle^tk7*42$-2:i%/Mk9CL*o`GTku>A(%sJCoa8-l&fkAc'L<a[k;L,8bVUVSRDmm#*cgKk0H=\nE9Q.8JNH.D(n"ub9;qC_9)sh`Dm'gh)/gBYi>7nr%8n+(KCcr;'Q'XEL\gJK02n#Ndb6>oA)e,0*Q2kuLZBcb@\DB!XOY8E;Pf/^1flNi)#ef2q4lNX8X&/7A%frZ\'D>*cWm/sGf$%kX%-)b"[AV;pI@&>B02."jOkFnmP]]%4#iRkiK-&%Uk@,-0j3;N'0!-?#I--;Z2B,P-E$d:GeW*M0'<4/Ri/E2W@P)_P'o^FE*)#sbD%Rdae-$MD-Rck:m$i%7Mk);[-cgj3R\hCm3L(_Q'tBDZsfC-6Do9M[WCDetgR<dfPh"V%a%o9KAt^76LkS?K#*KKUqAe!+BhS?_s:%BR61-*2Y)gZ[("Me-Xa$"68eYETH_W!/tXK?70g2S4O>IJCS:.C^38/--_d_#eAO8oU>,m.$!G"R:-8A?Y!Aq:uheG!%m*"YU!p#%(0F%&pdJe`OtbLl2E_dql4Fkng(OtN)d?4mh#cX)%C*NjZd>ir'C3VQ.4';>=rN#'D#pm^"@Lp(PqdQUcU4kA"K#<S+O(4DYpBR1%2)=UV&/+:BQ2l!GS7uOJOHs+%AHW0CA>X'u;"Igoc9p01J`4[5iAeNU,mEn!aLM*e@HnG,!mCslQ6^Og;"Ms,dYAQ2J=eR&3tb%I%BBshV7Qt`M9M[WCDitYeTIV\sD.CsnB2?EIF/Yq"B^W5!![.%(fbe'i$P?#_p7)RY;r)`:@=#e1k)F__Yi6%L]/RZccW^Ip)0;)h%F*=jT&b`cN9N.,=F2i+\+_SKSo_M.:?G)TN%"R<]'D>,9n7HAOo*"/'QC8H]1KKWLKLn$Te!.eHl>/Nm9iB4T%c%eYh&BQr3:-uf%PDY3@6"W;S,I1ANFe#odT`XkP&^EB<1JLH2?oZo%B7@n9*^V[?fM2D#g"AK]YBaVN$N""7gq=k+EV#IrF2j^radb(u)*n;eBc@F\%??1-PMjSK9klG#9,IW8;!9@3WfQ0Mal?Q#&ME#NG6BU@],:r/P0XEhR90He.jZMUg,;;:)JFkf'@nR0+(XEq*dLc7[?l!L4?LZJ4%J5RTCWi$Xu8%X<(%\c=[UZj>Hd,mo\cAE[7,tT[[6'@4Db7G;$?jY1Z)-E%YTfum&_.4cGe!,O-L:-h>A768k%au)O1N2'<PbF#G%mh$F]Dhrhe>6<"dF7qY_'BUhjluIZFVBjXPN%O4dl#M'eTmOY]H]rI"JC]/MD.CuT(/MhMo0nsCU++%/(m&,gYoNrRQB1(90'cH0%WUd]q]^g_*cPp(d=O@;lh&BflkNs!<Vor5+bis/6&PO]!1JLH<Y9e#sRL\KiL[Ia;*)#l70XQ,BShku7cI+Dt;9Mj0G_-?`!@+']%[L8oYW%5nQo+P6Lm6!4Ne/K%"-QK!B[\U-tHc#Q@L03G\97T$4cB;_`R'VaUSpS>umRX5$);EG(e*"C&0KnAS]s2-<f]*%n$Q<K8%o9KAt^76LkS1eM1#\=!GTI71#?jnm!T1*!qZ(sm&71V%EfFn7Aee@aN6!EA[45MOi-qM"a:8k_9AV=&i@&>B0'qM].H"\ZgD`Grt%iR#9C-&".7^pn_YluCkp?qshTP%;k*1V'T+qdV@i24F1IFb"F_6&r<Yc6<[;Bppf_l`iE91OosU!Fa:g*VVZZ*V8nGiN<u-f75]g%#*ojcF-2lf,a<@aS'FBeG_+i#4lP&,YpBPW?"Da(+V]#o=9?\aF-\(m`ggUnI4d5&1e":b)4Sr>e)e7$a?AKA]s4Dm-N&"eJ@8M^%j.E/VX@&YWP\>fU1^6[RH/btLaKgPdZ\UJF?s5)aUnpUiCe6oYpPeVg%ACiN/-4ml3D5MqA'SBoe:!IIVBjABXKCZZl#GR!R%A8e%H/mbAndhAlr95m7r9<eJ^OLQ/OoPF@<Zad#I(Oe*j/;_HA^:#k]PlY\p"u)$QT(f=kD/u?m]5)1k`:MNHf*a7J+Mn`TC/>$p(sA$%l$r_XAH1]=]KP-"a/cZ<IDgMOo(-5dC7>.lS,`9Bo7-_D`R"SXqes4Ec*tIbmdkr(Lq`lK2o#4_GMi>=8,Nl^I/!ShQM@XJI@<A"%qrdYDhuEIIQd>^(]2,oV.t9Q2^HS0VcTbag5L).drmSN0PXpi;WmUGuSp>h0r6#:%XBU'7HM[1#,q/f)P\1SVr-K72/KR,:qq.Q2%jc'+^'([J^qajQ*;LZZ^*)d=46+=VmprAU0(d.f&Kl)bF@G`Z<>HD')a"RJcdYYL41ah:o*r_ZFeq:Ya'Sh_YC=N7]Z05%CW+"Lk%qm*='q"GENJ))1Kp>b%7psNler\UP7Id+k;(=e$icf?Yse?EboQ:J0,CsdrZMoX.Y4uT?:rV--9^IB$RFCNgnjM\-,5$VHTki9GD%!LMQ>O+2%Uh;V9Z5;oH;qtGG%(3O'Aid,BM;%6hm+j3Z&6>gR'r,lF2jD?sU;(ZTgFG["%oj@IJi>#Nu\%"*I!8F67:<W:YS<s(?%dZ9%G_K+/pc_Dog\G'<Y:@Re7/Z`/=^)d4*TLS>+n,8?tKs.&0TB=RIgd?B-;[M_DYA=.seYjhR>0MB,qsUp])]q91Yhf4SZ#j3p%;YePGa5-F+<nCAjea5QgEkH<KQ-DMVl#XE81c<P<^p_9m<rWC=li2M&IH#4uBT^cT4ml)f2L="a]8mm3LX#NOh.hEj]C]a;f[Hbb%rf`qZrC^;L+9.*9%f^P/p9<)b%bj,rS&9C[laOKUX?-!C4m9-#[Irm,dY^2;c2L,MF#g['YGMipk7Qh?d+qaQ%biRRdUrq.[^r2K%=$(6-^E$)&#<[LMVP!F,/`iB&rQuGIO8e[=cA0X[]ptDZ_jQ;)DXDJEgYLb/X1S#kp\A@egYM>te@tn:=dsohZhF1JJ,]a9kjTBN%5%JWbCb)QAD7bLiU=s$;bnL[KCsusQEn6O/;`o9TIaXFgm'rRO*LG6t9Mt2]SRdTg3,HE);=1Snb7s&sXY!I6Fi*^_m*DY0G+Ek@%?+]`.="W^K7jh6ediODRD6jRj^$a$h6FTgW[aiEu6JJBUFc3i6:q,\bD,m0F;`C`'*I"(BGFMTHq`;BW]MAEo6/A2*\(+bkVb,WX%h7='0"T>Tk)0su48__9q>2D0;ctu]FS^99pd^K">T=8Z0gpSUeoX7JXrl?1fk-eEH[]_H+mP_(C\#PYT\lC+pX7DX8\l"0ic$YZ*%l_HW9O/[!*d7;j_;a3!A2eg^K.^t,s7MWLOmW*_td^K">l*bG$g`LU*HFBrEZos]=BA9FX\(,J8[)Qs@1(A*T1hg/Wk+Z^f$Jgir%a^JCdD,U-$jnXUIKDk:XodAth##3fPj]BFd7MWLOmW+S7dNA)@'7k;,'":"ek&B/9nVUC`lcCGU?e;_-gQH^6E%X5QS(2?22QH#Q%gT4'"D8VN!YNo5tCWWo#f&g+PJ,ML1D>95W]<.AXh5'2ZDQ>C>[LGk2mC$d:Zu4IW>4$7lk?;`?a3:IKY0D@J7Wn"FD:VF0g4jb<%dr!a^IHlQ0o$b&5-9l@RC[1u^cff"+D8T(05b!Y\q\<s#;E$\]7G<L>S%Q$)A>F'c70bfr7bWUogYm'aduh45RiA__olGboiM%?c%T,b5_DQO#jm;D7jFaDDOG1R5Nbn&Ocd*E6VL8A!j]Bb@I[TT``]C!1E]l(?!"?;Y3D*o<E\pD&,e;XIicWJBsd)tNhG8pXpqRLIP%RLu2,d+q_`!d#0!\!7g3=pa$aL6WuK=3e8Q?&u$<m3^Y-5(3+YTE!pJ+9(":rqV=6I/!$[huDl#jnDikS_*U3oDea?hgGC+T7?Qm%?emsHlAtu=h=j-]roJ?Rrq:PcqXOUanABI"r/2Y4n#q3;5+\B_qN'P4gW+J%qshr.npc/Z?G:phLMq\Bq.IJ?jY-W/TE"i0?[qgf%fC,pBZ/PA%M0J^[5Q(LfIe_Q5525Mo^A1!Sc2RR[s4'@.M-67WF(.qqc[J!agL\"S7Xs$V!sp;(:E5_3d3UmO]3g$`l5.4Hrq:9E%rS?@ZrL_tps&X^Cl)V#ef@Re;jr_A<q@EW&c1diZs/3(#ml-lRrq>+@j87urIf,PY^]4;&5Q/+DDa+3c?bZF3GPSL8g&.nSroS_0%mAKshq9Adp~>%AI9_PrivateDataEnd