%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: rabi.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: steven schowalter
%%CreationDate: 5/13/09
%%BoundingBox: 0 0 308 119
%%HiResBoundingBox: 0 0 307.9532 118.1563
%%CropBox: 0 0 307.9532 118.1563
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 52 8%%BeginData: 5356 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0BFF7DFFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8A8%A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FF%A8FFA8A8A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FF%A8FF7DFD05FF7D7DA8527DFFA8FD73FFA8FD05FF52FD047DFFA8FFA3FD71%FFA8FD06FFA8A8A8FFA8A8FF7FA9FD70FFA8FD0BFFA8FF7FFFA9FD6FFFA8%FD0AFFA8A8FFA3A379FD6FFFA8FD07FFA8FFFFFFA8FFA3A955FF7FFD6DFF%FD04A8FFFF7D7D7D277DFFA8CFA97F797F7FA9A9FD6BFFA8A8527DFFFF7D%7D7D527DFFA8FFA3A955A97FA97FFFA9FD69FFA87D527DFD08FFA8FFA97F%79FD057FA9A9A9FD67FFA87D27A8FD08FFA8FF7FA979A9FD067FA9A3A9FD%65FFA8A8277DFD07FFA8A8FFA97F797F7F79A37F7F55A94FA955FF7FFFA9%FD60FFA8FF27A8FFFFA8FFA8A8A8FFA8FFA3A9797F7FA37FA37F7FA37FA9%79A955A97FA9A9A9CBFD06FFCBFD55FFA87D7D7DFFFF52527D277DFFA8FF%A97F7F797F797F7F7F79A955A94FFF4FA955A9557F55A3FD057F79A97FA9%7FA97FA9A3FD05A9FFA9FD05FFA9FFFFFFA9FFFFFFA9FFA9FFA9FFA9FFA9%FFFD04A9FFA9FFA9FFA9A9CBFD06A9A3FFA3FFA3FF7FFFA3FFA9CBA9CBFD%0EA9FFA8FF52A8FFFFFD047DA8FFA8FFA3A97FA3FD087FA979A979A3FD04%7FA3797F7F7F79A355A955A94FA94FA9557F797F79FD077FA955A979A955%A3797F557F797F79557F5579557F557F557F557F4F7F55794F7955555579%55555579557F557F557F557F5579557F797F557F797955FD057FA9FFA8A8%277DFD07FFA8A8FFA97F7F79A37F7F797F7F7F79A955A955A979FD057F79%7F797F55FD097F797F557F557955795579FD06557F557955795555795579%557F797F55A955A955A979A955A97FA97FA97FFD0FA9FFFFA9FFA9FFA9FF%A9FFA9FD06FFA8FF27A8FD08FFA8FFA3A97FA37F7F7FA37FA37F7FA3FD06%7FA97F7F7FA37F7F7FA3FD047FA3FD057F557F7F7F79A37FA97FFF7FFF7F%FFA9FFA9FFA9FFA9FD37FFA8A87D7DFD07FFA8A8FFA97F7F797F7F7F79FD%0B7F79A37F7F797F7F7F79A355A92BA94FA94FA955A97FFFA9FFA9FD46FF%A8A8277DFFFF7DA87DA87DFFA8FFA3A97FA379FD047FA37FA37FA97FA979%A9FD097F797F79A97FA9A9FFA9FD4EFFA8A8F852FFFF52527D2752A8A8FF%A9797F7F7F797F7F7F79FD047F79A379FD047F79FD047FA97FCBA9FFA9FD%52FFA8FF27A8FFFFFD05A8FFA8FFA97F7FA37FA37F7F7FA37FA955CB55A9%55A955A955FFA9FFA9FD59FFA87D277DFD07FFA8A8FFA979A37F7F79FD06%7F79A955A955A97FFFA9FD5DFFA8FFF87DFD08FFA8FFA97F7FA97F7F7FA3%7F7F79A955FF4FFF7FFFCBFD5FFFA8A8527DFD07FFA8A8FFA979FD057F79%7F7F79A355A97FA9FD62FFA8FF27A8FFFFA8FFA8A8A8FFA8FFA97F7FA37F%A97FA37FA955A97FFD65FFA8A8F87DFFFF52527D277DFFA8FFA955A379FD%077FA9FD66FFA8FF277DFFFF7DA87D7DA8FFA8FFA9FD047FA97FA37FA9FD%68FFA8A8277DFD07FFA8A8FFA955A3FD057FA9A3FD68FFA8A827A8FD08FF%A8FFA9FD047FA37FA3FD6AFFA852277DFD07FFA8A8FFA9557F797F55CBA9%FD6AFFA8A8A8FFFFFF7DA87D7D7DFFA8FFA97F7F7FA37FFD6CFFA8FD05FF%52527D277DFFA8CFFF55A355A97FFD6CFFA8FD05FFFD05A8FFA8FFA979A3%7FFD6EFFA8FD0AFFA8A8FFFF55A955FD6EFFA8FD0BFFA8FFA955A9A9FD6E%FFA8FD06FFA8FFA8FFA8A8FFCB2BFD70FFA8FD05FF7DA87D7D7DFFA8FFA9%79FD70FFA8FD05FF7D527D527DFFA8FFFF55FD70FFA8FD07FFA8FFFFFFA8%FFFFCBFD70FFA8FD0AFFA8A8FD04FFA8FD0BFFA8FD0BFFA8FFFFFFA8FD07%FFA8FD05FFA8FD05FFA8FD09FFA8FD05FFA8FD07FFA8FFFFFFA8FD0BFFA8%FD0BFFA8FFFFFFA8FD06FFA8FD0BFFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8%FFA8FFFFFFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8%FFFFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8%A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8%FFA8FFA8FFA8A8A8FFA8FFA8FD0CFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFFFFFA8FFA8FFA8FFA8FFA8FFA8FD05FFA8FFA8FFA8FFA8FFA8FFA8FFFF%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FD05%FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FD05FFA8%FFA8FFA8FD0EFFA8FD0EFFA8FD0EFFA8FD0FFFA8FD0DFFA8FD0FFFA8FD0D%FFA8FFA8FD0DFFA8A8FD13FF7D52A8FD0CFFA827FD0DFFA85227A8FD0CFF%5252A8FD0CFF52277DFD0CFF7D2752FD0CFFA82752A8FD0BFFA85227FD13%FFA87DFD0DFFA87DFD0EFF527DA8FD0CFF7D52FD0DFF7D7DA8FD0CFF7D52%A8FD0CFFA87D7DFD0DFF7D7DA8FD40FFA8FD3BFFA8FDC8FFA8A8FD05FFA8%FFFFFFA8FD74FF527D527D7DA8A87D527D527DA8FD73FF7D5227275227A8%5252272752A8FD75FFA8FFA8FFFFA8A8FFA8A8FDB4FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-05-12T11:25:06-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-05-13T03:26:47-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-05-13T03:26:47-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>100</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAZAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwXzTffmXFrt/DpFq&#xA;X0d9OcWNxCtu7pemhjYiVgSa8wwKlacT1riqtp9t5rbRb7/FDC6kmvbNrW1IjVY4y1u7IGtlZmVJ&#xA;mdQWqSFqeuKpzY2+jyapqNl+joUlt/RlkfgjK/rR0FPhFKemR+OXTw8MIzv6r+xUaNC0URLF9Qt/&#xA;TTjxX0024EFe3amUquOjaQXDmxg5qCoPpp0ahPb/ACRirl0bSFLFbGAFzyY+mm5oB4eAxVYmg6Ks&#xA;EcIsYDHGFCAxqfsUK709sVXnRtILhzYwc1BUH006NQnt/kjFXDRtIDlxYwc2AUn006LUjt/lHFVj&#xA;6DorQSQmxgEcgYOBGo+3UtvT3xVe2jaQxUtYwEoeSn002NCPDwOKuGjaQHLixg5sApPpp0WpHb/K&#xA;OKrToWimJovqFv6b8uS+mm/Mkt271xVt9E0d2jZrKCsbck/dp1KlfDwY4q2NG0gOXFjBzYBSfTTo&#xA;tSO3+UcVWnQtFMTRfULf035cl9NN+ZJbt3riq59G0hxRrGAgENT006qajt4jFWjomjmVZTZQc0Vl&#xA;H7tKUYgnan+SMVbXRtIUsVsYAXPJj6abmgHh4DFVo0LRREsX1C39NOPFfTTbgQV7dqYquOjaQXDm&#xA;xg5qCoPpp0ahPb/JGKtJomjo0jLZQVkbk/7tOoUL4eCjFWhoWiiJYvqFv6aceK+mm3Agr27UxVcd&#xA;G0guHNjBzUFQfTTo1Ce3+SMVcujaQpYrYwAueTH003NAPDwGKrF0HRVtxb/UYDCE9PiY1Pw0pQmn&#xA;hiq9tG0hipaxgJQ8lPppsaEeHgcVcNG0gOXFjBzYBSfTTotSO3+UcVWPoOitBJCbGARyBg4Eaj7d&#xA;S29PfFV7aNpDFS1jASh5KfTTY0I8PA4ql/mDR9LTRtQljsIGkNu4NE4miqxFDGrNtU9BiqLt/Mnl&#xA;251abR7bVLOfV7YcrjTo54nuYwO7wqxdRv3GKpVrH5haBpWp3umTLPLe2Nk9/LHDGDyjj4lkRmZR&#xA;zCyK29BQ9djRVCWPnny15s0O4vNJnM1ja3lrE87ekoY/WIzyUSH7FagMwANDxr1xVKvPuozafPq9&#xA;xa3DQsT5bmEkZING1aRJQCvVTDEeQ7ivbOi7LxDIIAi/78f9KhX2nb4MSyew84WM11qcF3S1Fjqq&#xA;aPAxJb1ppLeCdOg+Hkbjj9GazL2fIRgY+rix+IfICUh/vU2n+YCXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlvmVoV0DUPWICGCQGvDupoP3nwffirzLyLNeJ+&#xA;cuvaLqF39b+qQzXVpBFwWziBNsEeO29ef0JQLh0JREL/ABly1RxVel6j5V8t6ldG7v8ATLa5umj9&#xA;FriSJWkMYJPDnTlx36Yqh7nQ9I0vTpV0yzhsFuLu2lnFtFw5ubiMFisPAk7Yqwn81jR9XJ2Ah0Lf&#xA;/o+vM6jsPlD35v8AcY2MklupJY9VuI0aiS+f7J5Ae5MYU/hEv3ZmQAOME9NHP7/2lH6010PzTqtp&#xA;qEFmkhWO686apY3lQHU23pzyxxjkGK1dojUEb7dDmLqdFjnAyI+nS45D+tcQT8uL4JBZR5b/ADDt&#xA;NWi0YTQmG61u41KC1RTVQNNmkQs9dxzSMN9OazWdkyxGdG4444yf88A/YSkFP9N8w6LqUFnNZXkc&#xA;i6hG81kpPCSWOIhZGWN+LkIXUNttUV65gZtJlxmQlEjgNHuBPLflv0TaOiljljSWJ1kikUMjqQVZ&#xA;SKggjYgjKJRINHmq7ArsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQHmAE&#xA;6HqABK/6PJuodj9k9kKt9xxV5r5Wl0xvzx1/TYY7gXlhbG4uLiQwcm9VbfgHkS0juJI2WSiCa7cf&#xA;u9l+H4VU/wDNP5d6prGu3+pQasI7a/059OlsZo3dAr0JYFZEFFKclHHqW7GmKu0DyVdeWPL9/aT3&#xA;51F77VILsSmP4xylgQ8iwnZ2Jj57ii14qAqjFUm/NIfvtZBPKmmWu5pvSHVt9s6jsTlj/wCGS+/C&#xA;xkkl+oW95LsU82C6HvLHc6lQn6IVHyzNxG4/9a1fAxxfrKHaWANTt32PpeZXfh3+NtNg5fQZ+v8A&#xA;XDm+gjvwf9VT+hUP5ZuBayeSLsFWa0XVLlmY/CzXVnbSFj4UNyfu+6eshxDUR/neGP8ASzkP96oQ&#xA;2jmTTNH0CQNT9GabrltGi1U8ZDfSbCtBT9HqKf0y3UVlyZB/PyYT8vDH/Tw/goRUQu9OpaRyssmn&#xA;+VLzRLYivETLcXMaVqeQYHT1G523yqXDk9RG09RHIfdwwP8A08P2JRI1XWZQtnFfzxrceV7bSVId&#xA;wFv3mghMyMP920u+q77DKvAxj1GINaiU/wDMqRr+r6fduq258y+Zr2z1GW0v7i3uNU0zSYLFgx5R&#xA;TKLOWeRAQKOU1arHatN+mxho8EJREoxIhkyGXmP3giD5Xi29/mtq+s+ePM7r5in069dfri2VxoCK&#xA;AwRbSAz3yJU/7t9Lie4qfohp+zcA8ITj9PGJ/wCdLhgT7r+xbRmo/mD5jtbvU5ILtGtF1BbmAtGh&#xA;Eem2q3q3UY6V5tpD/F1X1PllOHsrDKMAY+rgo785y8PhPw8UeR4VtUP5k+Z47mRHERjXU2vizIAF&#xA;8uLIYC+1PjDDnyPy98j/ACRgMQRf93w/8lqv5dKTbrT819cX0pLyG3Fqs36RvpSkgMWhXBt/q8wC&#xA;ts6fWzyLDdYn2xydh4jYiZcVcEeW+UcXEPceHaus47o4lWH80vNEKxS6lpcccNiBc+YPRimZo7S8&#xA;EJsvRBbdx67CX7W8T0A7Rl2LgNiEzctoWRvKPFx35en08vqjzTxKo/MH8wbaIPqHl6r6YhbXYbaC&#xA;4kMjXSFrJLE1IfixVZz8VN/s5D+StJI1DL9f0WYiuH6+Pu/ocr81sum86fmbAXWTRFuZ9PV7TUEt&#xA;LecpNdziY2ktszMx9FfTh9U/EFEpqfgOMeztFLlkoTqUeKQ2iOHiEv6W8uHlfDy9S2XDzV+acdYj&#xA;o/rNCW0h5hbyKJNQZpBFqIB/48gqRlyNqud/gOP5HQnfjq/XXENobXj/AOGfVX9XlutlUi1/815n&#xA;9IaYI1JGkNO0PHjeKy+pqgVnHK04F+K9yo8cjLS6Ab8f9Or/AId6x8vrurPcfJbLaax+b12UVdOi&#xA;sTe8bNHeNZFtJoBE093J+8BeGX9+IlpX4Ur9s0Tp+z4fxGXD6uf1A8VRG20h6eL3y7l3Xx6l+cV9&#xA;Bzi06305tQFIhOY2/R7W6/H6q86zrcuDw4fZWhNMicPZ0DRlKfB3X6+Lu29PAOd8yu6o97+cc6tJ&#xA;Dp9pZm6rcQwzPFIbQQCT/RZmjciRroiKjpUR1evRaxGPs6OxlKXDsSLHFdeoWNhD1bH6vT3mndsS&#xA;/nFLLyEFrbxyE6gqOYmMaKXC6U/EmruvAtOtVB5UP2ceHs4DnIkenrvy/e+4b+jny813XqPzjV1d&#xA;vqEiI4vWiBCmRXZA2m8ip4+mpkIuO54bfawH+Tjt6x/D7uf7z47ej3+S7roY/wA44k+OXTLmS2Cy&#xA;jkDGt003pl4SVVjCtufVCsAS44VoeWCR7OJ2GQA7d/DV7/0uL02P4fV5Luu+rfnBCrKl3pd01sAk&#xA;UkqPH9a9VX5SyBF/dfV2KEKtfUAIJWoIHH2cecckb7t+Gq2F8+Lfc/TY50u6qbP82g8ipqGlNHGx&#xA;ghkkilDSxuHP1plXZJIqoBEPhfi3xLyHGHidn0Ljk335jY7enzB39XMWNjRs7qv1H80+QH6T0vh/&#xA;vOW9CUt6df8AevrT1qbej9jvy7ZHxND/ADMnfzHP+b/V/pfV5Lu0NO/NRuIfWNLjDEQyMlrKxVF4&#xA;/wCkJVwDLJRqxt8K1FGPH4nxdB/Myd/1D/SnbkNvVzPcL2d1X9GfmVIjB9d06FpaAmKwdvS4AUaP&#xA;nPv6hrzDg0/Z8THxtEP8nM13zG/v9PTpXxXdE3lrri+WtU/S93FdXMkUjBLWAxwooUgIqv8AWXav&#xA;Via79KZhaiWIkeHExHmbJ+wD7EvOvJOualP/AM5E+adFuYYTFY6cZFuohMgZ5DZ1pE8skSMw+20a&#xA;gvReX2VzHVlvmnzx5m0vXb/TrPSGktYtOe4sr4w3E0b3QoURjEOPFviXjyBqtSaHZVrRvNmu67p2&#xA;qNqui3GifUb6xitY7hWjeVGaB3bkzRp/eFgOL9KV3qMVSf8ANUt9bvo1FHu9MGx/ZNta6nL2P8rN&#xA;nUdh/TE/zcn+6lhDGSSagCmqXgrVY7y5v0Br/eR6hqqgdfCKn0nM7FvCPnGMfhwYf1/YhbpsiW95&#xA;a824p6ttcswHQG90JGFN6/3Vfpw5gZRNd0h/sNR+tUtkZrPQr2R1KrpVlYFxXdTc2NiCAf8AKfkD&#xA;/reGZAHHliB/HOf+xnk/RXyQjPMERtH8wWzlQ1vJb2rSfsFr+PVLcdR/y+ADxbbKdLLjGIjqJS/0&#xA;hwy/3nySVe9hmuL26WOIyPH5sTTbggE0iuZbub4mUVCAX6Fh/WuQxyEYizz03GPfEQHz9BVMLDyn&#xA;5ie7jf6lKqR+bZCzuClNNt2inimANOSNJaKBTu1dxmPl12ERPqH+LD/TmwR76l9i0mPl/wDLnXra&#xA;60O5u3hT9H6hem7QEtzseEcVnw+18X+g2xIrsK+FMx9V2vilHJGN+uEK/r7mf+7mkBHeXfyoi0+z&#xA;8vR316Z5NDW/jkRASlyt8HjTmWNf3UTlR88o1fbhySymMa8Xg/zeGjt7yFEUy0v8sPLllHYrKZrx&#xA;rPT7nTHaZgPXiu39SV5eAWr1L0IIpzbx2x83bOaZlVR4pxnt0MRQry5f6UJpNYPJnlaBESPTIeMe&#xA;n/ocF15k2H/LOzOWLIe/Kte+Yku0M8jZmfr4/wDP/ne9aTCLTNNiNY7WFD6KW3IIoPox14R1p9ha&#xA;mi9MolmmeZPO+fU9felEgACg6ZUrsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS3zK5TQNQYV&#xA;/uJNwQtPhO9S8X/EsVeX+SrW5h/5yA80K2pST20diywafJfpcCJWFiwb6u1xJNHVuXxGID36VVes&#xA;XWq6ZaGUXV5BbmCL6xMJZEThCDT1W5EcUqKcjtiqD1LULW605nsbhLj0ru3ikaBhJxdbiPkh4iSj&#xA;AHcU+7FWCfmqCdXIHX9G3X/dN1TOo7E/u/8AkpH/AKaYWMkhvm9TVNUlG8S6bqOooP5lXUdTkXf3&#xA;jkOZ2IVCA68cI/8ASvCPvCEDeS/V9Me4QFhaeVrPUZe1JOdi/Oo3/wCPUsT7Vy7HHinX87USj8Ky&#xA;D/fUhM7nyrq2rR+ddEsk53E1l5fazclYw4CIJt29rTx+WY0NdjxHT5ZchLNfXqa/3Saeg/8AKvtJ&#xA;l1HXbu8Yzx61fWGoGELw9KTTkhEQDAktyeDk3TYke+aD+VcghjjHbw4TjfeJ8V/ZKvhbKmR29laW&#xA;zzvbwpE91J61yyKFMkvBU5vTq3BFFfbNdPJKQAJvhFDyHOvtSrZBXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgPMDOuh6gUJDi3koV3P2T4LJ/xE4q8m8kixk/5yM83XFqsP&#xA;I2ckc8qy27yvIo0+o4qi3Cou32iV5E+2Ks31/wDLPTNY1y61k3tzbXN5aNYzxxiJozHIFDGjozVI&#xA;jTvtSo33xVrT/Jmm+VtDvLe3mku477ULW4l+uFHAo9vbotP3a7RwruTUnf2xVJ/zHUJ5o0kJ8Iay&#xA;vwwHQiPT7vh93Ns6Tsj+4n/Wh/u4fqYliVvVlu4/s/8AOnajMhI+16V1cxkD5fWAT/bm2n/Cf+gq&#xA;A+cYH/eoZb5d8iDU4IpNShP6J1Lyjp2jyqjhX5j1WmFBuCEkSjZqdX2n4ZIgf3kNTOf+5r7QUgPS&#xA;QqgkgAE0BI9umc5bJvArsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VS3zKI/0BqBkVHUQSGkgVlqFNKhig/HFUt8teQPL/l28lvrE3Ml3ObkvJPcyyLS7n+sOqw8hAtGA&#xA;CkJyoOpqaqpT5pvvzLi12/h0i1L6O+nOLG4hW3d0vTQxsRKwJNeYYFStOJ61xVvQLzznPo2oHzNb&#xA;PHcx6jbLZoypFWPnByCPbNKzIJefFioJWle9FUL58jEvnfy5bSL/AL0WeqO3E7BIrR45N9u9ylM6&#xA;Dss1pcsh0lj+2QI/3JYnmhPy18uS3un+Vdduo1ltJfKx0+5R6UZrmWGYgp3Dqh/zOXdsasQnmxRN&#xA;SGo4h/miQ+xQHpkUUUMSRRII4o1CRoooqqooAAOwGc1KRJs82S7ArsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdiqX+Yi40K/KrzPoSVAZ1NOJ6GMM33DFUwxVjOsfmF&#xA;oGlane6ZMs8t7Y2T38scMYPKOPiWRGZlHMLIrb0FD12NFVq+aNH1/RLi6tGb6rbXtrDI8gjUEl7e&#xA;dWUuShUpMpqf14qg/MMTy/mh5MlRS8KWWs83G6gMtoBU++bnSSA0OcdeLF/v0HmyjRdKtdH0ew0m&#xA;0LG1063itLcyGr+nAgjTkQBU8V32zWajPLNklkl9U5GR95NpRmUq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUt8ytCugah6xAQwSA14d1NB+8+D78VTLFUr1Hy&#xA;r5b1K6N3f6ZbXN00fotcSRK0hjBJ4c6cuO/TFVC70XT9N02ddJsVt/Xure5uI7WOhdlliDPxjKEk&#xA;RxgbHoPoxVVM2nz6gl7NazfWbP1IrSb0LivpzLGZNglN2QDfwyyOWQiYg+mVX8OX3qiBq8PpI/oX&#xA;PJuNY/q81V5EA1+Gnw13ytVx1WD1FX0rgqQSX+rzUBBFB9iu9cVcuqwFnBiuFCmgJt5viFAaj4Pe&#xA;mKrE1dDbxu9vcCVgnqRCCY8S1OW/D9muKrzqsHqKvpXBUgkv9XmoCCKD7Fd64q4arB6jL6VwFABD&#xA;/V5qEkmo+xXamKrH1dBbyOlvcGVQ/pxGCYciteO/D9qmKr21WAMgEVwwY0JFvN8IoTU/B7UxVw1W&#xA;D1GX0rgKACH+rzUJJNR9iu1MVWnV4fSd/QueS8qR/V5qtxJAp8NPiptirpNViV4gkM7KzUkPoTji&#xA;vEmv2P5gB9OKrhqsHqMvpXAUAEP9XmoSSaj7FdqYqtOrw+k7+hc8l5Uj+rzVbiSBT4afFTbFVz6r&#xA;AqgiK4c1AoLeboSATunbriq06rEJkQQzmMqxaT0J9mBXiKcO9T92Krl1WAs4MVwoU0BNvN8QoDUf&#xA;B70xVaNXh9JH9C55NxrH9XmqvIgGvw0+Gu+KrjqsHqKvpXBUgkv9XmoCCKD7Fd64qtj1WJnlDwzq&#xA;qtSM+hOeS8Qa/Y/mJH0Yq4avD6SP6FzybjWP6vNVeRANfhp8Nd8VXHVYPUVfSuCpBJf6vNQEEUH2&#xA;K71xVy6rAWcGK4UKaAm3m+IUBqPg96YqsTV0+qrK9vcCbgGaEQTE8qVKglKddsVXtqsAZAIrhgxo&#xA;SLeb4RQmp+D2pirhqsHqMvpXAUAEP9XmoSSaj7FdqYqsfV0FvI6W9wZVD+nEYJhyK1478P2qYqvb&#xA;VYAyARXDBjQkW83wihNT8HtTFUFrV99Y0y+toILlpZIGWIiCYcmcMOIP7un/AAQ64qnOKuxV2Ksc&#xA;8qT+c5NQ1xfMMMcVml240dk4fFb+pIEI4kkqYREx5/F6hcfZC4qyPFXYqp3DSpbytEvKVUYxrStW&#xA;A2FCV7+4xVJ/JD+ZX8r2J8zA/pukgu2IjUtSVxG/CIBE5x8W4b8a8SSQTiqeYq7FUi86XHmaDRUk&#xA;8tRCbVfrlkojcKUNu11Gt0X5EUUW5c1X4vDFXeSJfNEvly3fzPGItXLy+og4BvTErCIuIi0YYx0r&#xA;xNP1YqnuKuxVhn5kXfn6CC2XyhG7zyx3AmdI4JQkgCejX12QCp5Cu4HUg0oVWXWhnNrCbheE5jUz&#xA;JyDUeg5DkoUHfuAPliqrirsVYBrd7+aS+fooNHg9Tyv6ln9YknjgVQrOPrXpyep6hVYObbry9X01&#xA;Hw8uSrP8VdirsVYB5NvfzMn813C65DKvl9YrkQtNFawN6guAIW/cvM0nOKvEfDxUfFzYg4qz/FXY&#xA;qg9ZkvI9JvXsldrxYJDbrGFZ/UCnjxD/AAk16V2xVi/5b3P5lTx3f+NraK3dYbX6uI/S3nKv9ZC+&#xA;kzDhQRNv+2XA+ELirNMVdiqQ+dZvM0WihvLaGTVDPCESkZUpzBkDmXZUKihYbjt4hVryLJ5ok8s2&#xA;z+Z1K6yWm9ckRoWX1W9JuEXwx8o+J4VYr0LE1OKp/irsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVSjzfrd1oPljU9atbWO9l06B7k20s31ZGjiHKT97wm4kIGI+E1O3virz63/5yH8vQ6n+itX06&#xA;4gvhPBbyPZyQXVshuVBUmRnglYD4iaRdO1dsVRt7+fPlm30HT9fSxvJdLvrd7o7QpOqi4+rKojeV&#xA;UYmQMTR9gO9dlVTyz+eXlvzJr0Wk6ZZ3Yb6wlndSziJRHNLBPMgURvLzA+qOrkHY06ipCr0fFXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqtm9H0X9bj6P&#xA;E+pzpx4035V2pTFUF/uA9Rv95fUqvL+75Vp8Nf4YqpXf+Gvrdn9a+q/WfTl+o8+HL0fg9Xh/kV4c&#xA;u1ePemKtj/Dv1+14/VvrlZPqnHhy58T6nCn7fHl705duWKpnirsVdirsVdirsVdirsVdirsVdirs&#xA;Vdir/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:B8757E203240DE11AC91D52DFC338480</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:47F95B75F540DE11AC91D52DFC338480</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.0d6e5</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPSMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.3x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times New Roman.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -118.156 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 118.156 li
307.953 118.156 li
307.953 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.8125 lw
2 lc
0 lj
3.239 ml
[] 0 dsh
true sadj
32.3594 5.53125 mo
32.3594 5.53125 li
32.4219 6.03125 li
32.4219 6.03125 li
32.4844 6.59375 li
32.4844 7.09375 li
32.5469 7.09375 li
32.5469 7.65625 li
32.6094 8.21875 li
32.6094 9.28125 li
32.6719 9.84375 li
32.6719 10.3438 li
32.7344 11.4063 li
32.7344 11.9688 li
32.7969 13.0313 li
32.7969 13.5938 li
32.7969 14.6563 li
32.8594 15.7188 li
32.8594 16.7813 li
32.9219 17.9063 li
32.9219 19.5313 li
32.9844 20.5938 li
32.9844 21.6563 li
33.0469 23.2813 li
33.0469 24.3438 li
33.1094 25.9688 li
33.1094 27.5938 li
33.1719 28.6563 li
33.1719 30.2813 li
33.2344 31.9063 li
33.2344 33.5313 li
33.2344 35.0938 li
33.2969 36.7188 li
33.2969 38.9063 li
33.3594 40.4688 li
33.3594 42.0938 li
33.4219 43.7188 li
33.4219 45.9063 li
33.4844 47.4688 li
33.4844 49.0938 li
33.5469 50.7188 li
33.5469 52.3438 li
33.6094 53.9688 li
33.6094 55.5938 li
33.6719 57.7188 li
33.6719 59.3438 li
33.7344 60.9688 li
33.7344 62.5938 li
33.7344 63.6563 li
33.7969 65.2813 li
33.7969 66.9063 li
33.8594 68.4688 li
33.8594 69.5938 li
33.9219 71.1563 li
33.9219 72.7813 li
33.9844 73.9063 li
33.9844 74.9688 li
34.0469 76.5938 li
34.0469 77.6563 li
34.1094 78.7188 li
34.1094 79.7813 li
34.1719 80.8438 li
34.1719 81.4063 li
34.1719 82.4688 li
34.2344 83.5938 li
34.2344 84.0938 li
34.2969 85.1563 li
34.2969 85.7188 li
34.3594 86.2813 li
34.3594 86.7813 li
34.4219 87.3438 li
34.4219 87.3438 li
34.4844 87.8438 li
34.4844 87.8438 li
34.5469 88.4063 li
34.5469 88.4063 li
34.6094 88.4063 li
34.6094 88.4063 li
34.6719 88.4063 li
34.6719 87.8438 li
34.6719 87.8438 li
34.7344 87.8438 li
34.7344 87.3438 li
34.7969 86.7813 li
34.7969 86.2813 li
34.8594 85.7188 li
34.8594 85.1563 li
34.9219 84.6563 li
34.9219 83.5938 li
34.9844 83.0313 li
34.9844 81.9688 li
35.0469 81.4063 li
35.0469 80.3438 li
35.1094 79.2813 li
35.1094 78.1563 li
35.1094 77.0938 li
35.1719 76.0313 li
35.1719 74.4063 li
35.2344 73.3438 li
35.2344 72.2813 li
35.2969 70.6563 li
35.2969 69.0313 li
35.3594 67.9688 li
35.3594 66.3438 li
35.4219 64.7188 li
35.4219 63.6563 li
35.4844 62.0313 li
35.4844 60.4063 li
35.5469 58.7813 li
35.5469 57.1563 li
35.5469 56.0938 li
35.6094 54.4688 li
35.6094 52.9063 li
35.6719 51.2813 li
35.6719 49.6563 li
35.7344 48.0313 li
35.7344 46.4063 li
35.7969 44.7813 li
35.7969 43.2188 li
35.8594 41.5938 li
35.8594 39.9688 li
35.9219 38.3438 li
35.9219 36.7188 li
35.9844 35.6563 li
35.9844 34.0313 li
36.0469 32.4063 li
36.0469 31.3438 li
36.0469 29.7188 li
36.1094 28.6563 li
36.1094 27.0313 li
36.1719 25.9688 li
36.1719 24.9063 li
36.2344 23.7813 li
36.2344 22.2188 li
36.2969 21.6563 li
36.2969 20.5938 li
36.3594 19.5313 li
36.3594 18.4063 li
36.4219 17.3438 li
36.4219 16.7813 li
36.4844 15.7188 li
36.4844 15.2188 li
36.4844 14.6563 li
36.5469 14.0938 li
36.5469 13.5938 li
36.6094 13.0313 li
36.6094 12.5313 li
36.6719 11.9688 li
36.6719 11.4063 li
36.7344 11.4063 li
36.7344 11.4063 li
36.7969 10.9063 li
36.7969 10.9063 li
36.8594 10.9063 li
36.8594 10.9063 li
36.9219 10.9063 li
36.9219 11.4063 li
36.9844 11.4063 li
36.9844 11.4063 li
36.9844 11.9688 li
37.0469 12.5313 li
37.0469 13.0313 li
37.1094 13.0313 li
37.1094 14.0938 li
37.1719 14.6563 li
37.1719 15.2188 li
37.2344 15.7188 li
37.2344 16.2813 li
37.2969 17.3438 li
37.2969 18.4063 li
37.3594 18.9688 li
37.3594 20.0313 li
37.4219 21.0938 li
37.4219 22.2188 li
37.4219 23.2813 li
37.4844 24.3438 li
37.4844 25.4063 li
37.5469 26.5313 li
37.5469 27.5938 li
37.6094 29.2188 li
37.6094 30.2813 li
37.6719 31.9063 li
37.6719 32.9688 li
37.7344 34.5938 li
37.7344 35.6563 li
37.7969 37.2813 li
37.7969 38.3438 li
37.8594 39.9688 li
37.8594 41.5938 li
37.9219 42.6563 li
37.9219 44.2813 li
37.9219 45.9063 li
37.9844 46.9688 li
37.9844 48.5938 li
38.0469 50.2188 li
38.0469 51.2813 li
38.1094 52.9063 li
38.1094 53.9688 li
38.1719 55.5938 li
38.1719 56.6563 li
38.2344 58.2813 li
38.2344 59.3438 li
38.2969 60.4063 li
38.2969 62.0313 li
38.3594 63.0938 li
38.3594 64.1563 li
38.3594 65.7813 li
38.4219 66.9063 li
38.4219 67.9688 li
38.4844 69.0313 li
38.4844 70.0938 li
38.5469 71.1563 li
38.5469 71.7188 li
38.6094 72.7813 li
38.6094 73.3438 li
38.6719 74.4063 li
38.6719 74.9688 li
38.7344 76.0313 li
38.7344 76.5938 li
38.7969 77.0938 li
38.7969 77.6563 li
38.7969 78.1563 li
38.8594 78.7188 li
38.8594 79.2813 li
38.9219 79.2813 li
38.9219 79.2813 li
38.9844 79.7813 li
38.9844 79.7813 li
39.0469 79.7813 li
39.0469 79.7813 li
39.1094 79.7813 li
39.1094 79.7813 li
39.1719 79.7813 li
39.1719 79.2813 li
39.2344 79.2813 li
39.2344 78.7188 li
39.2969 78.7188 li
39.2969 78.1563 li
39.2969 77.6563 li
39.3594 77.0938 li
39.3594 76.5938 li
39.4219 76.0313 li
39.4219 75.4688 li
39.4844 74.4063 li
39.4844 73.9063 li
39.5469 72.7813 li
39.5469 72.2813 li
39.6094 71.1563 li
39.6094 70.0938 li
39.6719 69.0313 li
39.6719 67.9688 li
39.7344 66.9063 li
39.7344 65.7813 li
39.7344 64.7188 li
39.7969 63.6563 li
39.7969 62.5938 li
39.8594 61.4688 li
39.8594 59.9063 li
39.9219 58.7813 li
39.9219 57.7188 li
39.9844 56.0938 li
39.9844 55.0313 li
40.0469 53.9688 li
40.0469 52.3438 li
40.1094 51.2813 li
40.1094 49.6563 li
40.1719 48.5938 li
40.1719 46.9688 li
40.2344 45.9063 li
40.2344 44.2813 li
40.2344 43.2188 li
40.2969 41.5938 li
40.2969 40.4688 li
40.3594 38.9063 li
40.3594 37.7813 li
40.4219 36.2188 li
40.4219 35.0938 li
40.4844 34.0313 li
40.4844 32.9688 li
40.5469 31.3438 li
40.5469 30.2813 li
40.6094 29.2188 li
40.6094 28.0938 li
40.6719 27.0313 li
40.6719 25.9688 li
40.6719 25.4063 li
40.7344 24.3438 li
40.7344 23.2813 li
40.7969 22.7188 li
40.7969 21.6563 li
40.8594 21.0938 li
40.8594 20.0313 li
40.9219 19.5313 li
40.9219 18.9688 li
40.9844 18.4063 li
40.9844 17.3438 li
41.0469 16.7813 li
41.0469 16.7813 li
41.1094 16.2813 li
41.1094 15.7188 li
41.1094 15.2188 li
41.1719 15.2188 li
41.1719 15.2188 li
41.2344 14.6563 li
41.2344 14.6563 li
41.2969 14.6563 li
41.2969 14.6563 li
41.3594 14.6563 li
41.3594 14.6563 li
41.4219 14.6563 li
41.4219 15.2188 li
41.4844 15.2188 li
41.4844 15.7188 li
41.5469 15.7188 li
41.5469 16.2813 li
41.6094 16.7813 li
41.6094 17.3438 li
41.6094 17.3438 li
41.6719 18.4063 li
41.6719 18.9688 li
41.7344 19.5313 li
41.7344 20.0313 li
41.7969 21.0938 li
41.7969 21.6563 li
41.8594 22.2188 li
41.8594 23.2813 li
41.9219 24.3438 li
41.9219 24.9063 li
41.9844 25.9688 li
41.9844 27.0313 li
42.0469 28.0938 li
42.0469 29.2188 li
42.0469 30.2813 li
42.1094 31.3438 li
42.1094 32.4063 li
42.1719 33.5313 li
42.1719 34.5938 li
42.2344 35.6563 li
42.2344 36.7188 li
42.2969 37.7813 li
42.2969 39.4063 li
42.3594 40.4688 li
42.3594 41.5938 li
42.4219 43.2188 li
42.4219 44.2813 li
42.4844 45.3438 li
42.4844 46.4063 li
42.5469 48.0313 li
42.5469 49.0938 li
42.5469 50.2188 li
42.6094 51.7813 li
42.6094 52.9063 li
42.6719 53.9688 li
42.6719 55.0313 li
42.7344 56.0938 li
42.7344 57.1563 li
42.7969 58.2813 li
42.7969 59.3438 li
42.8594 60.4063 li
42.8594 61.4688 li
42.9219 62.0313 li
42.9219 63.0938 li
42.9844 64.1563 li
42.9844 65.2813 li
42.9844 65.7813 li
43.0469 66.9063 li
43.0469 67.4063 li
43.1094 67.9688 li
43.1094 68.4688 li
43.1719 69.5938 li
43.1719 70.0938 li
43.2344 70.6563 li
43.2344 71.1563 li
43.2969 71.7188 li
43.2969 71.7188 li
43.3594 72.2813 li
43.3594 72.7813 li
43.4219 73.3438 li
43.4219 73.3438 li
43.4844 73.3438 li
43.4844 73.3438 li
43.4844 73.9063 li
43.5469 73.9063 li
43.5469 73.9063 li
43.6094 73.3438 li
43.6094 73.3438 li
43.6719 73.3438 li
43.6719 73.3438 li
43.7344 72.7813 li
43.7344 72.2813 li
43.7969 72.2813 li
43.7969 71.7188 li
43.8594 71.1563 li
43.8594 70.6563 li
43.9219 70.0938 li
43.9219 69.5938 li
43.9219 69.0313 li
43.9844 68.4688 li
43.9844 67.9688 li
44.0469 66.9063 li
44.0469 66.3438 li
44.1094 65.2813 li
44.1094 64.7188 li
44.1719 63.6563 li
44.1719 62.5938 li
44.2344 62.0313 li
44.2344 60.9688 li
44.2969 59.9063 li
44.2969 58.7813 li
44.3594 57.7188 li
44.3594 56.6563 li
44.3594 55.5938 li
44.4219 54.4688 li
44.4219 53.4063 li
44.4844 52.3438 li
44.4844 51.2813 li
44.5469 50.2188 li
44.5469 49.0938 li
44.6094 48.0313 li
44.6094 46.9688 li
44.6719 45.3438 li
44.6719 44.2813 li
44.7344 43.2188 li
44.7344 42.0938 li
44.7969 41.0313 li
44.7969 39.9688 li
44.8594 38.9063 li
44.8594 37.7813 li
44.8594 36.7188 li
44.9219 35.6563 li
44.9219 34.5938 li
44.9844 33.5313 li
44.9844 32.4063 li
45.0469 31.3438 li
45.0469 30.2813 li
45.1094 29.2188 li
45.1094 28.6563 li
45.1719 27.5938 li
45.1719 26.5313 li
45.2344 25.9688 li
45.2344 24.9063 li
45.2969 24.3438 li
45.2969 23.7813 li
45.2969 22.7188 li
45.3594 22.2188 li
45.3594 21.6563 li
45.4219 21.0938 li
45.4219 20.5938 li
45.4844 20.0313 li
45.4844 19.5313 li
45.5469 19.5313 li
45.5469 18.9688 li
45.6094 18.4063 li
45.6094 18.4063 li
45.6719 17.9063 li
45.6719 17.9063 li
45.7344 17.9063 li
45.7344 17.3438 li
45.7969 17.3438 li
45.7969 17.3438 li
45.7969 17.3438 li
45.8594 17.3438 li
45.8594 17.9063 li
45.9219 17.9063 li
45.9219 17.9063 li
45.9844 18.4063 li
45.9844 18.4063 li
46.0469 18.9688 li
46.0469 18.9688 li
46.1094 19.5313 li
46.1094 20.0313 li
46.1719 20.5938 li
46.1719 21.0938 li
46.2344 21.6563 li
46.2344 22.2188 li
46.2344 22.7188 li
46.2969 23.2813 li
46.2969 23.7813 li
46.3594 24.9063 li
46.3594 25.4063 li
46.4219 26.5313 li
46.4219 27.0313 li
46.4844 28.0938 li
46.4844 28.6563 li
46.5469 29.7188 li
46.5469 30.7813 li
46.6094 31.3438 li
46.6094 32.4063 li
46.6719 33.5313 li
46.6719 34.5938 li
46.6719 35.6563 li
46.7344 36.7188 li
46.7344 37.2813 li
46.7969 38.3438 li
46.7969 39.4063 li
46.8594 40.4688 li
46.8594 41.5938 li
46.9219 42.6563 li
46.9219 43.7188 li
46.9844 44.7813 li
46.9844 45.9063 li
47.0469 46.9688 li
47.0469 48.0313 li
47.1094 49.0938 li
47.1094 50.2188 li
47.1719 51.2813 li
47.1719 51.7813 li
47.1719 52.9063 li
47.2344 53.9688 li
47.2344 55.0313 li
47.2969 55.5938 li
47.2969 56.6563 li
47.3594 57.7188 li
47.3594 58.2813 li
47.4219 59.3438 li
47.4219 59.9063 li
47.4844 60.9688 li
47.4844 61.4688 li
47.5469 62.0313 li
47.5469 63.0938 li
47.6094 63.6563 li
47.6094 64.1563 li
47.6094 64.7188 li
47.6719 65.2813 li
47.6719 65.7813 li
47.7344 66.3438 li
47.7344 66.9063 li
47.7969 66.9063 li
47.7969 67.4063 li
47.8594 67.4063 li
47.8594 67.9688 li
47.9219 67.9688 li
47.9219 68.4688 li
47.9844 68.4688 li
47.9844 68.4688 li
48.0469 68.4688 li
48.0469 68.4688 li
48.1094 68.4688 li
48.1094 68.4688 li
48.1094 68.4688 li
48.1719 67.9688 li
48.1719 67.9688 li
48.2344 67.9688 li
48.2344 67.4063 li
48.2969 66.9063 li
48.2969 66.9063 li
48.3594 66.3438 li
48.3594 65.7813 li
48.4219 65.2813 li
48.4219 64.7188 li
48.4844 64.1563 li
48.4844 63.6563 li
48.5469 63.0938 li
48.5469 62.5938 li
48.5469 62.0313 li
48.6094 60.9688 li
48.6094 60.4063 li
48.6719 59.3438 li
48.6719 58.7813 li
48.7344 57.7188 li
48.7344 57.1563 li
48.7969 56.0938 li
48.7969 55.5938 li
48.8594 54.4688 li
48.8594 53.4063 li
48.9219 52.9063 li
48.9219 51.7813 li
48.9844 50.7188 li
48.9844 49.6563 li
49.0469 48.5938 li
49.0469 48.0313 li
49.0469 46.9688 li
49.1094 45.9063 li
49.1094 44.7813 li
49.1719 43.7188 li
49.1719 42.6563 li
49.2344 41.5938 li
49.2344 40.4688 li
49.2969 39.9688 li
49.2969 38.9063 li
49.3594 37.7813 li
49.3594 36.7188 li
49.4219 35.6563 li
49.4219 35.0938 li
49.4844 34.0313 li
49.4844 32.9688 li
49.4844 32.4063 li
49.5469 31.3438 li
49.5469 30.7813 li
49.6094 29.7188 li
49.6094 29.2188 li
49.6719 28.0938 li
49.6719 27.5938 li
49.7344 27.0313 li
49.7344 25.9688 li
49.7969 25.4063 li
49.7969 24.9063 li
49.8594 24.3438 li
49.8594 23.7813 li
49.9219 23.2813 li
49.9219 22.7188 li
49.9219 22.2188 li
49.9844 22.2188 li
49.9844 21.6563 li
50.0469 21.0938 li
50.0469 21.0938 li
50.1094 20.5938 li
50.1094 20.5938 li
50.1719 20.0313 li
50.1719 20.0313 li
50.2344 20.0313 li
50.2344 20.0313 li
50.2969 20.0313 li
50.2969 20.0313 li
50.3594 20.0313 li
50.3594 20.0313 li
50.4219 20.0313 li
50.4219 20.0313 li
50.4219 20.5938 li
50.4844 20.5938 li
50.4844 21.0938 li
50.5469 21.0938 li
50.5469 21.6563 li
50.6094 22.2188 li
50.6094 22.2188 li
50.6719 22.7188 li
50.6719 23.2813 li
50.7344 23.7813 li
50.7344 24.3438 li
50.7969 24.9063 li
50.7969 25.4063 li
50.8594 25.9688 li
50.8594 26.5313 li
50.8594 27.0313 li
50.9219 28.0938 li
50.9219 28.6563 li
50.9844 29.2188 li
50.9844 30.2813 li
51.0469 30.7813 li
51.0469 31.9063 li
51.1094 32.4063 li
51.1094 33.5313 li
51.1719 34.0313 li
51.1719 35.0938 li
51.2344 36.2188 li
51.2344 36.7188 li
51.2969 37.7813 li
51.2969 38.3438 li
51.3594 39.4063 li
51.3594 40.4688 li
51.3594 41.0313 li
51.4219 42.0938 li
51.4219 43.2188 li
51.4844 44.2813 li
51.4844 44.7813 li
51.5469 45.9063 li
51.5469 46.9688 li
51.6094 47.4688 li
51.6094 48.5938 li
51.6719 49.6563 li
51.6719 50.2188 li
51.7344 51.2813 li
51.7344 51.7813 li
51.7969 52.9063 li
51.7969 53.4063 li
51.7969 54.4688 li
51.8594 55.0313 li
51.8594 55.5938 li
51.9219 56.6563 li
51.9219 57.1563 li
51.9844 57.7188 li
51.9844 58.2813 li
52.0469 58.7813 li
52.0469 59.3438 li
52.1094 59.9063 li
52.1094 60.4063 li
52.1719 60.9688 li
52.1719 61.4688 li
52.2344 62.0313 li
52.2344 62.0313 li
52.2969 62.5938 li
52.2969 63.0938 li
52.2969 63.0938 li
52.3594 63.6563 li
52.3594 63.6563 li
52.4219 63.6563 li
52.4219 64.1563 li
52.4844 64.1563 li
52.4844 64.1563 li
52.5469 64.1563 li
52.5469 64.1563 li
52.6094 64.1563 li
52.6094 64.1563 li
52.6719 64.1563 li
52.6719 64.1563 li
52.7344 63.6563 li
52.7344 63.6563 li
52.7344 63.0938 li
52.7969 63.0938 li
52.7969 62.5938 li
52.8594 62.5938 li
52.8594 62.0313 li
52.9219 61.4688 li
52.9219 60.9688 li
52.9844 60.4063 li
52.9844 59.9063 li
53.0469 59.3438 li
53.0469 58.7813 li
53.1094 58.2813 li
53.1094 57.7188 li
53.1719 57.1563 li
53.1719 56.6563 li
53.1719 55.5938 li
53.2344 55.0313 li
53.2344 54.4688 li
53.2969 53.4063 li
53.2969 52.9063 li
53.3594 51.7813 li
53.3594 51.2813 li
53.4219 50.2188 li
53.4219 49.6563 li
53.4844 48.5938 li
53.4844 48.0313 li
53.5469 46.9688 li
53.5469 45.9063 li
53.6094 45.3438 li
53.6094 44.2813 li
53.6719 43.7188 li
53.6719 42.6563 li
53.6719 41.5938 li
53.7344 41.0313 li
53.7344 39.9688 li
53.7969 39.4063 li
53.7969 38.3438 li
53.8594 37.2813 li
53.8594 36.7188 li
53.9219 35.6563 li
53.9219 35.0938 li
53.9844 34.0313 li
53.9844 33.5313 li
54.0469 32.4063 li
54.0469 31.9063 li
54.1094 31.3438 li
54.1094 30.2813 li
54.1094 29.7188 li
54.1719 29.2188 li
54.1719 28.6563 li
54.2344 28.0938 li
54.2344 27.5938 li
54.2969 26.5313 li
54.2969 26.5313 li
54.3594 25.9688 li
54.3594 25.4063 li
54.4219 24.9063 li
54.4219 24.3438 li
54.4844 23.7813 li
54.4844 23.7813 li
54.5469 23.2813 li
54.5469 23.2813 li
54.6094 22.7188 li
54.6094 22.7188 li
54.6094 22.2188 li
54.6719 22.2188 li
54.6719 22.2188 li
54.7344 22.2188 li
54.7344 22.2188 li
54.7969 22.2188 li
54.7969 22.2188 li
54.8594 22.2188 li
54.8594 22.2188 li
54.9219 22.2188 li
54.9219 22.2188 li
54.9844 22.7188 li
54.9844 22.7188 li
55.0469 22.7188 li
55.0469 23.2813 li
55.0469 23.2813 li
55.1094 23.7813 li
55.1094 24.3438 li
55.1719 24.3438 li
55.1719 24.9063 li
55.2344 25.4063 li
55.2344 25.9688 li
55.2969 26.5313 li
55.2969 27.0313 li
55.3594 27.5938 li
55.3594 28.0938 li
55.4219 28.6563 li
55.4219 29.2188 li
55.4844 29.7188 li
55.4844 30.2813 li
55.4844 30.7813 li
55.5469 31.9063 li
55.5469 32.4063 li
55.6094 32.9688 li
55.6094 34.0313 li
55.6719 34.5938 li
55.6719 35.0938 li
55.7344 36.2188 li
55.7344 36.7188 li
55.7969 37.7813 li
55.7969 38.3438 li
55.8594 39.4063 li
55.8594 39.9688 li
55.9219 40.4688 li
55.9219 41.5938 li
55.9844 42.0938 li
55.9844 43.2188 li
55.9844 43.7188 li
56.0469 44.7813 li
56.0469 45.3438 li
56.1094 46.4063 li
56.1094 46.9688 li
56.1719 47.4688 li
56.1719 48.5938 li
56.2344 49.0938 li
56.2344 49.6563 li
56.2969 50.7188 li
56.2969 51.2813 li
56.3594 51.7813 li
56.3594 52.3438 li
56.4219 53.4063 li
56.4219 53.9688 li
56.4219 54.4688 li
56.4844 55.0313 li
56.4844 55.5938 li
56.5469 56.0938 li
56.5469 56.6563 li
56.6094 57.1563 li
56.6094 57.1563 li
56.6719 57.7188 li
56.6719 58.2813 li
56.7344 58.7813 li
56.7344 58.7813 li
56.7969 59.3438 li
56.7969 59.3438 li
56.8594 59.9063 li
56.8594 59.9063 li
56.9219 59.9063 li
56.9219 60.4063 li
56.9219 60.4063 li
56.9844 60.4063 li
56.9844 60.4063 li
57.0469 60.4063 li
57.0469 60.4063 li
57.1094 60.4063 li
57.1094 60.4063 li
57.1719 60.4063 li
57.1719 60.4063 li
57.2344 60.4063 li
57.2344 59.9063 li
57.2969 59.9063 li
57.2969 59.3438 li
57.3594 59.3438 li
57.3594 58.7813 li
57.3594 58.7813 li
57.4219 58.2813 li
57.4219 57.7188 li
57.4844 57.7188 li
57.4844 57.1563 li
57.5469 56.6563 li
57.5469 56.0938 li
57.6094 55.5938 li
57.6094 55.0313 li
57.6719 54.4688 li
57.6719 53.9688 li
57.7344 53.4063 li
57.7344 52.9063 li
57.7969 52.3438 li
57.7969 51.2813 li
57.8594 50.7188 li
57.8594 50.2188 li
57.8594 49.6563 li
57.9219 48.5938 li
57.9219 48.0313 li
57.9844 46.9688 li
57.9844 46.4063 li
58.0469 45.9063 li
58.0469 44.7813 li
58.1094 44.2813 li
58.1094 43.2188 li
58.1719 42.6563 li
58.1719 42.0938 li
58.2344 41.0313 li
58.2344 40.4688 li
58.2969 39.4063 li
58.2969 38.9063 li
58.2969 38.3438 li
58.3594 37.2813 li
58.3594 36.7188 li
58.4219 35.6563 li
58.4219 35.0938 li
58.4844 34.5938 li
58.4844 34.0313 li
58.5469 32.9688 li
58.5469 32.4063 li
58.6094 31.9063 li
58.6094 31.3438 li
58.6719 30.7813 li
58.6719 30.2813 li
58.7344 29.7188 li
58.7344 29.2188 li
58.7344 28.6563 li
58.7969 28.0938 li
58.7969 27.5938 li
58.8594 27.0313 li
58.8594 26.5313 li
58.9219 26.5313 li
58.9219 25.9688 li
58.9844 25.4063 li
58.9844 25.4063 li
59.0469 24.9063 li
59.0469 24.9063 li
59.1094 24.3438 li
59.1094 24.3438 li
59.1719 24.3438 li
59.1719 24.3438 li
59.2344 23.7813 li
59.2344 23.7813 li
59.2344 23.7813 li
59.2969 23.7813 li
59.2969 23.7813 li
59.3594 23.7813 li
59.3594 23.7813 li
59.4219 23.7813 li
59.4219 24.3438 li
59.4844 24.3438 li
59.4844 24.3438 li
59.5469 24.9063 li
59.5469 24.9063 li
59.6094 24.9063 li
59.6094 25.4063 li
59.6719 25.4063 li
59.6719 25.9688 li
59.6719 26.5313 li
59.7344 26.5313 li
59.7344 27.0313 li
59.7969 27.5938 li
59.7969 28.0938 li
59.8594 28.6563 li
59.8594 29.2188 li
59.9219 29.2188 li
59.9219 29.7188 li
59.9844 30.2813 li
59.9844 30.7813 li
60.0469 31.3438 li
60.0469 32.4063 li
60.1094 32.9688 li
60.1094 33.5313 li
60.1719 34.0313 li
60.1719 34.5938 li
60.1719 35.0938 li
60.2344 36.2188 li
60.2344 36.7188 li
60.2969 37.2813 li
60.2969 37.7813 li
60.3594 38.3438 li
60.3594 39.4063 li
60.4219 39.9688 li
60.4219 40.4688 li
60.4844 41.0313 li
60.4844 42.0938 li
60.5469 42.6563 li
60.5469 43.2188 li
60.6094 44.2813 li
60.6094 44.7813 li
60.6094 45.3438 li
60.6719 45.9063 li
60.6719 46.4063 li
60.7344 47.4688 li
60.7344 48.0313 li
60.7969 48.5938 li
60.7969 49.0938 li
60.8594 49.6563 li
60.8594 50.2188 li
60.9219 50.7188 li
60.9219 51.2813 li
60.9844 51.7813 li
60.9844 52.3438 li
61.0469 52.9063 li
61.0469 53.4063 li
61.0469 53.9688 li
61.1094 53.9688 li
61.1094 54.4688 li
61.1719 55.0313 li
61.1719 55.5938 li
61.2344 55.5938 li
61.2344 56.0938 li
61.2969 56.0938 li
61.2969 56.0938 li
61.3594 56.6563 li
61.3594 56.6563 li
61.4219 57.1563 li
61.4219 57.1563 li
61.4844 57.1563 li
61.4844 57.1563 li
61.5469 57.1563 li
61.5469 57.7188 li
61.5469 57.7188 li
61.6094 57.7188 li
61.6094 57.1563 li
61.6719 57.1563 li
61.6719 57.1563 li
61.7344 57.1563 li
61.7344 57.1563 li
61.7969 56.6563 li
61.7969 56.6563 li
61.8594 56.6563 li
61.8594 56.0938 li
61.9219 56.0938 li
61.9219 55.5938 li
61.9844 55.0313 li
61.9844 55.0313 li
61.9844 54.4688 li
62.0469 54.4688 li
62.0469 53.9688 li
62.1094 53.4063 li
62.1094 52.9063 li
62.1719 52.3438 li
62.1719 51.7813 li
62.2344 51.2813 li
62.2344 50.7188 li
62.2969 50.2188 li
62.2969 49.6563 li
62.3594 49.0938 li
62.3594 48.5938 li
62.4219 48.0313 li
62.4219 47.4688 li
62.4844 46.9688 li
62.4844 46.4063 li
62.4844 45.3438 li
62.5469 44.7813 li
62.5469 44.2813 li
62.6094 43.7188 li
62.6094 42.6563 li
62.6719 42.0938 li
62.6719 41.5938 li
62.7344 41.0313 li
62.7344 39.9688 li
62.7969 39.4063 li
62.7969 38.9063 li
62.8594 38.3438 li
62.8594 37.7813 li
62.9219 36.7188 li
62.9219 36.2188 li
62.9219 35.6563 li
62.9844 35.0938 li
62.9844 34.5938 li
63.0469 34.0313 li
63.0469 33.5313 li
63.1094 32.9688 li
63.1094 32.4063 li
63.1719 31.9063 li
63.1719 31.3438 li
63.2344 30.7813 li
63.2344 30.2813 li
63.2969 29.7188 li
63.2969 29.2188 li
63.3594 29.2188 li
63.3594 28.6563 li
63.4219 28.0938 li
63.4219 28.0938 li
63.4219 27.5938 li
63.4844 27.0313 li
63.4844 27.0313 li
63.5469 26.5313 li
63.5469 26.5313 li
63.6094 26.5313 li
63.6094 25.9688 li
63.6719 25.9688 li
63.6719 25.9688 li
63.7344 25.9688 li
63.7344 25.4063 li
63.7969 25.4063 li
63.7969 25.4063 li
63.8594 25.4063 li
63.8594 25.4063 li
63.8594 25.4063 li
63.9219 25.4063 li
63.9219 25.4063 li
63.9844 25.9688 li
63.9844 25.9688 li
64.0469 25.9688 li
64.0469 26.5313 li
64.1094 26.5313 li
64.1094 26.5313 li
64.1719 27.0313 li
64.1719 27.0313 li
64.2344 27.5938 li
64.2344 27.5938 li
64.2969 28.0938 li
64.2969 28.6563 li
64.2969 28.6563 li
64.3594 29.2188 li
64.3594 29.7188 li
64.4219 30.2813 li
64.4219 30.2813 li
64.4844 30.7813 li
64.4844 31.3438 li
64.5469 31.9063 li
64.5469 32.4063 li
64.6094 32.9688 li
64.6094 33.5313 li
64.6719 34.0313 li
64.6719 34.5938 li
64.7344 35.0938 li
64.7344 35.6563 li
64.7969 36.2188 li
64.7969 36.7188 li
64.7969 37.2813 li
64.8594 37.7813 li
64.8594 38.3438 li
64.9219 38.9063 li
64.9219 39.4063 li
64.9844 39.9688 li
64.9844 40.4688 li
65.0469 41.5938 li
65.0469 42.0938 li
65.1094 42.6563 li
65.1094 43.2188 li
65.1719 43.7188 li
65.1719 44.2813 li
65.2344 44.7813 li
65.2344 45.3438 li
65.2344 45.9063 li
65.2969 46.4063 li
65.2969 46.9688 li
65.3594 47.4688 li
65.3594 48.0313 li
65.4219 48.5938 li
65.4219 49.0938 li
65.4844 49.6563 li
65.4844 49.6563 li
65.5469 50.2188 li
65.5469 50.7188 li
65.6094 51.2813 li
65.6094 51.2813 li
65.6719 51.7813 li
65.6719 52.3438 li
65.7344 52.3438 li
65.7344 52.9063 li
65.7344 53.4063 li
65.7969 53.4063 li
65.7969 53.4063 li
65.8594 53.9688 li
65.8594 53.9688 li
65.9219 54.4688 li
65.9219 54.4688 li
65.9844 54.4688 li
65.9844 54.4688 li
66.0469 54.4688 li
66.0469 55.0313 li
66.1094 55.0313 li
66.1094 55.0313 li
66.1719 55.0313 li
66.1719 55.0313 li
66.1719 54.4688 li
66.2344 54.4688 li
66.2344 54.4688 li
66.2969 54.4688 li
66.2969 54.4688 li
66.3594 53.9688 li
66.3594 53.9688 li
66.4219 53.4063 li
66.4219 53.4063 li
66.4844 53.4063 li
66.4844 52.9063 li
66.5469 52.3438 li
66.5469 52.3438 li
66.6094 51.7813 li
66.6094 51.2813 li
66.6719 51.2813 li
66.6719 50.7188 li
66.6719 50.2188 li
66.7344 49.6563 li
66.7344 49.6563 li
66.7969 49.0938 li
66.7969 48.5938 li
66.8594 48.0313 li
66.8594 47.4688 li
66.9219 46.9688 li
66.9219 46.4063 li
66.9844 45.9063 li
66.9844 45.3438 li
67.0469 44.7813 li
67.0469 44.2813 li
67.1094 43.7188 li
67.1094 43.2188 li
67.1094 42.6563 li
67.1719 42.0938 li
67.1719 41.5938 li
67.2344 40.4688 li
67.2344 39.9688 li
67.2969 39.4063 li
67.2969 38.9063 li
67.3594 38.3438 li
67.3594 37.7813 li
67.4219 37.2813 li
67.4219 36.7188 li
67.4844 36.2188 li
67.4844 35.6563 li
67.5469 35.0938 li
67.5469 34.5938 li
67.5469 34.0313 li
67.6094 33.5313 li
67.6094 32.9688 li
67.6719 32.9688 li
67.6719 32.4063 li
67.7344 31.9063 li
67.7344 31.3438 li
67.7969 30.7813 li
67.7969 30.7813 li
67.8594 30.2813 li
67.8594 29.7188 li
67.9219 29.7188 li
67.9219 29.2188 li
67.9844 29.2188 li
67.9844 28.6563 li
68.0469 28.6563 li
68.0469 28.0938 li
68.0469 28.0938 li
68.1094 27.5938 li
68.1094 27.5938 li
68.1719 27.5938 li
68.1719 27.0313 li
68.2344 27.0313 li
68.2344 27.0313 li
68.2969 27.0313 li
68.2969 27.0313 li
68.3594 27.0313 li
68.3594 27.0313 li
68.4219 27.0313 li
68.4219 27.0313 li
68.4844 27.0313 li
68.4844 27.0313 li
68.4844 27.0313 li
68.5469 27.0313 li
68.5469 27.5938 li
68.6094 27.5938 li
68.6094 27.5938 li
68.6719 28.0938 li
68.6719 28.0938 li
68.7344 28.0938 li
68.7344 28.6563 li
68.7969 28.6563 li
68.7969 29.2188 li
68.8594 29.2188 li
68.8594 29.7188 li
68.9219 30.2813 li
68.9219 30.2813 li
68.9844 30.7813 li
68.9844 31.3438 li
68.9844 31.3438 li
69.0469 31.9063 li
69.0469 32.4063 li
69.1094 32.9688 li
69.1094 33.5313 li
69.1719 33.5313 li
69.1719 34.0313 li
69.2344 34.5938 li
69.2344 35.0938 li
69.2969 35.6563 li
69.2969 36.2188 li
69.3594 36.7188 li
69.3594 37.2813 li
69.4219 37.7813 li
69.4219 37.7813 li
69.4219 38.3438 li
69.4844 38.9063 li
69.4844 39.4063 li
69.5469 39.9688 li
69.5469 40.4688 li
69.6094 41.0313 li
69.6094 41.5938 li
69.6719 42.0938 li
69.6719 42.6563 li
69.7344 43.2188 li
69.7344 43.7188 li
69.7969 44.2813 li
69.7969 44.7813 li
69.8594 44.7813 li
69.8594 45.3438 li
69.8594 45.9063 li
69.9219 46.4063 li
69.9219 46.9688 li
69.9844 47.4688 li
69.9844 47.4688 li
70.0469 48.0313 li
70.0469 48.5938 li
70.1094 48.5938 li
70.1094 49.0938 li
70.1719 49.6563 li
70.1719 49.6563 li
70.2344 50.2188 li
70.2344 50.2188 li
70.2969 50.7188 li
70.2969 50.7188 li
70.3594 51.2813 li
70.3594 51.2813 li
70.3594 51.7813 li
70.4219 51.7813 li
70.4219 51.7813 li
70.4844 51.7813 li
70.4844 52.3438 li
70.5469 52.3438 li
70.5469 52.3438 li
70.6094 52.3438 li
70.6094 52.3438 li
70.6719 52.3438 li
70.6719 52.3438 li
70.7344 52.3438 li
70.7344 52.3438 li
70.7969 52.3438 li
70.7969 52.3438 li
70.7969 52.3438 li
70.8594 52.3438 li
70.8594 51.7813 li
70.9219 51.7813 li
70.9219 51.7813 li
70.9844 51.2813 li
70.9844 51.2813 li
71.0469 50.7188 li
71.0469 50.7188 li
71.1094 50.2188 li
71.1094 50.2188 li
71.1719 49.6563 li
71.1719 49.6563 li
71.2344 49.0938 li
71.2344 48.5938 li
71.2969 48.0313 li
71.2969 48.0313 li
71.2969 47.4688 li
71.3594 46.9688 li
71.3594 46.4063 li
71.4219 46.4063 li
71.4219 45.9063 li
71.4844 45.3438 li
71.4844 44.7813 li
71.5469 44.2813 li
71.5469 43.7188 li
71.6094 43.2188 li
71.6094 42.6563 li
71.6719 42.6563 li
71.6719 42.0938 li
71.7344 41.5938 li
71.7344 41.0313 li
71.7344 40.4688 li
71.7969 39.9688 li
71.7969 39.4063 li
71.8594 38.9063 li
71.8594 38.3438 li
71.9219 37.7813 li
71.9219 37.2813 li
71.9844 36.7188 li
71.9844 36.2188 li
72.0469 36.2188 li
72.0469 35.6563 li
72.1094 35.0938 li
72.1094 34.5938 li
72.1719 34.0313 li
72.1719 33.5313 li
72.2344 33.5313 li
72.2344 32.9688 li
72.2344 32.4063 li
72.2969 31.9063 li
72.2969 31.9063 li
72.3594 31.3438 li
72.3594 31.3438 li
72.4219 30.7813 li
72.4219 30.2813 li
72.4844 30.2813 li
72.4844 29.7188 li
72.5469 29.7188 li
72.5469 29.2188 li
72.6094 29.2188 li
72.6094 29.2188 li
72.6719 28.6563 li
72.6719 28.6563 li
72.6719 28.6563 li
72.7344 28.0938 li
72.7344 28.0938 li
72.7969 28.0938 li
72.7969 28.0938 li
72.8594 28.0938 li
72.8594 28.0938 li
72.9219 28.0938 li
72.9219 28.0938 li
72.9844 28.0938 li
72.9844 28.0938 li
73.0469 28.0938 li
73.0469 28.0938 li
73.1094 28.0938 li
73.1094 28.0938 li
73.1094 28.6563 li
73.1719 28.6563 li
73.1719 28.6563 li
73.2344 29.2188 li
73.2344 29.2188 li
73.2969 29.2188 li
73.2969 29.7188 li
73.3594 29.7188 li
73.3594 30.2813 li
73.4219 30.2813 li
73.4219 30.7813 li
73.4844 30.7813 li
73.4844 31.3438 li
73.5469 31.3438 li
73.5469 31.9063 li
73.6094 32.4063 li
73.6094 32.4063 li
73.6094 32.9688 li
73.6719 33.5313 li
73.6719 33.5313 li
73.7344 34.0313 li
73.7344 34.5938 li
73.7969 35.0938 li
73.7969 35.0938 li
73.8594 35.6563 li
73.8594 36.2188 li
73.9219 36.7188 li
73.9219 37.2813 li
73.9844 37.7813 li
73.9844 37.7813 li
74.0469 38.3438 li
74.0469 38.9063 li
74.0469 39.4063 li
74.1094 39.9688 li
74.1094 39.9688 li
74.1719 40.4688 li
74.1719 41.0313 li
74.2344 41.5938 li
74.2344 42.0938 li
74.2969 42.0938 li
74.2969 42.6563 li
74.3594 43.2188 li
74.3594 43.7188 li
74.4219 44.2813 li
74.4219 44.2813 li
74.4844 44.7813 li
74.4844 45.3438 li
74.5469 45.9063 li
74.5469 45.9063 li
74.5469 46.4063 li
74.6094 46.9688 li
74.6094 46.9688 li
74.6719 47.4688 li
74.6719 47.4688 li
74.7344 48.0313 li
74.7344 48.0313 li
74.7969 48.5938 li
74.7969 48.5938 li
74.8594 49.0938 li
74.8594 49.0938 li
74.9219 49.6563 li
74.9219 49.6563 li
74.9844 49.6563 li
74.9844 50.2188 li
74.9844 50.2188 li
75.0469 50.2188 li
75.0469 50.2188 li
75.1094 50.2188 li
75.1094 50.7188 li
75.1719 50.7188 li
75.1719 50.7188 li
75.2344 50.7188 li
75.2344 50.7188 li
75.2969 50.7188 li
75.2969 50.7188 li
75.3594 50.2188 li
75.3594 50.2188 li
75.4219 50.2188 li
75.4219 50.2188 li
75.4219 50.2188 li
75.4844 49.6563 li
75.4844 49.6563 li
75.5469 49.6563 li
75.5469 49.0938 li
75.6094 49.0938 li
75.6094 48.5938 li
75.6719 48.5938 li
75.6719 48.5938 li
75.7344 48.0313 li
75.7344 47.4688 li
75.7969 47.4688 li
75.7969 46.9688 li
75.8594 46.9688 li
75.8594 46.4063 li
75.9219 45.9063 li
75.9219 45.9063 li
75.9219 45.3438 li
75.9844 44.7813 li
75.9844 44.7813 li
76.0469 44.2813 li
76.0469 43.7188 li
76.1094 43.2188 li
76.1094 42.6563 li
76.1719 42.6563 li
76.1719 42.0938 li
76.2344 41.5938 li
76.2344 41.0313 li
76.2969 40.4688 li
76.2969 39.9688 li
76.3594 39.9688 li
76.3594 39.4063 li
76.3594 38.9063 li
76.4219 38.3438 li
76.4219 37.7813 li
76.4844 37.2813 li
76.4844 37.2813 li
76.5469 36.7188 li
76.5469 36.2188 li
76.6094 35.6563 li
76.6094 35.6563 li
76.6719 35.0938 li
76.6719 34.5938 li
76.7344 34.0313 li
76.7344 34.0313 li
76.7969 33.5313 li
76.7969 32.9688 li
76.8594 32.9688 li
76.8594 32.4063 li
76.8594 31.9063 li
76.9219 31.9063 li
76.9219 31.3438 li
76.9844 31.3438 li
76.9844 30.7813 li
77.0469 30.7813 li
77.0469 30.2813 li
77.1094 30.2813 li
77.1094 30.2813 li
77.1719 29.7188 li
77.1719 29.7188 li
77.2344 29.7188 li
77.2344 29.2188 li
77.2969 29.2188 li
77.2969 29.2188 li
77.2969 29.2188 li
77.3594 29.2188 li
77.3594 28.6563 li
77.4219 28.6563 li
77.4219 28.6563 li
77.4844 28.6563 li
77.4844 28.6563 li
77.5469 28.6563 li
77.5469 28.6563 li
77.6094 28.6563 li
77.6094 29.2188 li
77.6719 29.2188 li
77.6719 29.2188 li
77.7344 29.2188 li
77.7344 29.2188 li
77.7969 29.7188 li
77.7969 29.7188 li
77.7969 29.7188 li
77.8594 30.2813 li
77.8594 30.2813 li
77.9219 30.2813 li
77.9219 30.7813 li
77.9844 30.7813 li
77.9844 31.3438 li
78.0469 31.3438 li
78.0469 31.9063 li
78.1094 31.9063 li
78.1094 32.4063 li
78.1719 32.4063 li
78.1719 32.9688 li
78.2344 32.9688 li
78.2344 33.5313 li
78.2344 34.0313 li
78.2969 34.0313 li
78.2969 34.5938 li
78.3594 35.0938 li
78.3594 35.0938 li
78.4219 35.6563 li
78.4219 36.2188 li
78.4844 36.7188 li
78.4844 36.7188 li
78.5469 37.2813 li
78.5469 37.7813 li
78.6094 38.3438 li
78.6094 38.3438 li
78.6719 38.9063 li
78.6719 39.4063 li
78.6719 39.9688 li
78.7344 39.9688 li
78.7344 40.4688 li
78.7969 41.0313 li
78.7969 41.5938 li
78.8594 41.5938 li
78.8594 42.0938 li
78.9219 42.6563 li
78.9219 42.6563 li
78.9844 43.2188 li
78.9844 43.7188 li
79.0469 43.7188 li
79.0469 44.2813 li
79.1094 44.7813 li
79.1094 44.7813 li
79.1719 45.3438 li
79.1719 45.3438 li
79.1719 45.9063 li
79.2344 46.4063 li
79.2344 46.4063 li
79.2969 46.9688 li
79.2969 46.9688 li
79.3594 46.9688 li
79.3594 47.4688 li
79.4219 47.4688 li
79.4219 48.0313 li
79.4844 48.0313 li
79.4844 48.0313 li
79.5469 48.5938 li
79.5469 48.5938 li
79.6094 48.5938 li
79.6094 48.5938 li
79.6094 48.5938 li
79.6719 49.0938 li
79.6719 49.0938 li
79.7344 49.0938 li
79.7344 49.0938 li
79.7969 49.0938 li
79.7969 49.0938 li
79.8594 49.0938 li
79.8594 49.0938 li
79.9219 49.0938 li
79.9219 48.5938 li
79.9844 48.5938 li
79.9844 48.5938 li
80.0469 48.5938 li
80.0469 48.5938 li
80.1094 48.0313 li
80.1094 48.0313 li
80.1094 48.0313 li
80.1719 47.4688 li
80.1719 47.4688 li
80.2344 46.9688 li
80.2344 46.9688 li
80.2969 46.9688 li
80.2969 46.4063 li
80.3594 46.4063 li
80.3594 45.9063 li
80.4219 45.3438 li
80.4219 45.3438 li
80.4844 44.7813 li
80.4844 44.7813 li
80.5469 44.2813 li
80.5469 43.7188 li
80.5469 43.7188 li
80.6094 43.2188 li
80.6094 42.6563 li
80.6719 42.6563 li
80.6719 42.0938 li
80.7344 41.5938 li
80.7344 41.0313 li
80.7969 41.0313 li
80.7969 40.4688 li
80.8594 39.9688 li
80.8594 39.9688 li
80.9219 39.4063 li
80.9219 38.9063 li
80.9844 38.3438 li
80.9844 38.3438 li
81.0469 37.7813 li
81.0469 37.2813 li
81.0469 36.7188 li
81.1094 36.7188 li
81.1094 36.2188 li
81.1719 35.6563 li
81.1719 35.6563 li
81.2344 35.0938 li
81.2344 34.5938 li
81.2969 34.5938 li
81.2969 34.0313 li
81.3594 33.5313 li
81.3594 33.5313 li
81.4219 32.9688 li
81.4219 32.9688 li
81.4844 32.4063 li
81.4844 32.4063 li
81.4844 31.9063 li
81.5469 31.9063 li
81.5469 31.3438 li
81.6094 31.3438 li
81.6094 30.7813 li
81.6719 30.7813 li
81.6719 30.7813 li
81.7344 30.2813 li
81.7344 30.2813 li
81.7969 30.2813 li
81.7969 29.7188 li
81.8594 29.7188 li
81.8594 29.7188 li
81.9219 29.7188 li
81.9219 29.7188 li
81.9219 29.7188 li
81.9844 29.2188 li
81.9844 29.2188 li
82.0469 29.2188 li
82.0469 29.2188 li
82.1094 29.2188 li
82.1094 29.2188 li
82.1719 29.2188 li
82.1719 29.7188 li
82.2344 29.7188 li
82.2344 29.7188 li
82.2969 29.7188 li
82.2969 29.7188 li
82.3594 29.7188 li
82.3594 30.2813 li
82.4219 30.2813 li
82.4219 30.2813 li
82.4219 30.7813 li
82.4844 30.7813 li
82.4844 30.7813 li
82.5469 31.3438 li
82.5469 31.3438 li
82.6094 31.9063 li
82.6094 31.9063 li
82.6719 32.4063 li
82.6719 32.4063 li
82.7344 32.9688 li
82.7344 32.9688 li
82.7969 33.5313 li
82.7969 33.5313 li
82.8594 34.0313 li
82.8594 34.0313 li
82.8594 34.5938 li
82.9219 35.0938 li
82.9219 35.0938 li
82.9844 35.6563 li
82.9844 36.2188 li
83.0469 36.2188 li
83.0469 36.7188 li
83.1094 37.2813 li
83.1094 37.2813 li
83.1719 37.7813 li
83.1719 38.3438 li
83.2344 38.3438 li
83.2344 38.9063 li
83.2969 39.4063 li
83.2969 39.4063 li
83.3594 39.9688 li
83.3594 40.4688 li
83.3594 40.4688 li
83.4219 41.0313 li
83.4219 41.5938 li
83.4844 41.5938 li
83.4844 42.0938 li
83.5469 42.6563 li
83.5469 42.6563 li
83.6094 43.2188 li
83.6094 43.2188 li
83.6719 43.7188 li
83.6719 44.2813 li
83.7344 44.2813 li
83.7344 44.7813 li
83.7969 44.7813 li
83.7969 45.3438 li
83.7969 45.3438 li
83.8594 45.3438 li
83.8594 45.9063 li
83.9219 45.9063 li
83.9219 46.4063 li
83.9844 46.4063 li
83.9844 46.4063 li
84.0469 46.9688 li
84.0469 46.9688 li
84.1094 46.9688 li
84.1094 46.9688 li
84.1719 47.4688 li
84.1719 47.4688 li
84.2344 47.4688 li
84.2344 47.4688 li
84.2344 47.4688 li
84.2969 47.4688 li
84.2969 47.4688 li
84.3594 47.4688 li
84.3594 47.4688 li
84.4219 47.4688 li
84.4219 47.4688 li
84.4844 47.4688 li
84.4844 47.4688 li
84.5469 47.4688 li
84.5469 47.4688 li
84.6094 47.4688 li
84.6094 46.9688 li
84.6719 46.9688 li
84.6719 46.9688 li
84.7344 46.9688 li
84.7344 46.4063 li
84.7344 46.4063 li
84.7969 46.4063 li
84.7969 45.9063 li
84.8594 45.9063 li
84.8594 45.3438 li
84.9219 45.3438 li
84.9219 44.7813 li
84.9844 44.7813 li
84.9844 44.2813 li
85.0469 44.2813 li
85.0469 43.7188 li
85.1094 43.7188 li
85.1094 43.2188 li
85.1719 42.6563 li
85.1719 42.6563 li
85.1719 42.0938 li
85.2344 42.0938 li
85.2344 41.5938 li
85.2969 41.0313 li
85.2969 41.0313 li
85.3594 40.4688 li
85.3594 39.9688 li
85.4219 39.9688 li
85.4219 39.4063 li
85.4844 38.9063 li
85.4844 38.3438 li
85.5469 38.3438 li
85.5469 37.7813 li
85.6094 37.7813 li
85.6094 37.2813 li
85.6719 36.7188 li
85.6719 36.7188 li
85.6719 36.2188 li
85.7344 35.6563 li
85.7344 35.6563 li
85.7969 35.0938 li
85.7969 34.5938 li
85.8594 34.5938 li
85.8594 34.0313 li
85.9219 34.0313 li
85.9219 33.5313 li
85.9844 33.5313 li
85.9844 32.9688 li
86.0469 32.9688 li
86.0469 32.4063 li
86.1094 32.4063 li
86.1094 31.9063 li
86.1094 31.9063 li
86.1719 31.3438 li
86.1719 31.3438 li
86.2344 31.3438 li
86.2344 30.7813 li
86.2969 30.7813 li
86.2969 30.7813 li
86.3594 30.2813 li
86.3594 30.2813 li
86.4219 30.2813 li
86.4219 30.2813 li
86.4844 30.2813 li
86.4844 29.7188 li
86.5469 29.7188 li
86.5469 29.7188 li
86.6094 29.7188 li
86.6094 29.7188 li
86.6094 29.7188 li
86.6719 29.7188 li
86.6719 29.7188 li
86.7344 29.7188 li
86.7344 29.7188 li
86.7969 29.7188 li
86.7969 30.2813 li
86.8594 30.2813 li
86.8594 30.2813 li
86.9219 30.2813 li
86.9219 30.2813 li
86.9844 30.7813 li
86.9844 30.7813 li
87.0469 30.7813 li
87.0469 30.7813 li
87.0469 31.3438 li
87.1094 31.3438 li
87.1094 31.9063 li
87.1719 31.9063 li
87.1719 31.9063 li
87.2344 32.4063 li
87.2344 32.4063 li
87.2969 32.9688 li
87.2969 32.9688 li
87.3594 33.5313 li
87.3594 33.5313 li
87.4219 34.0313 li
87.4219 34.0313 li
87.4844 34.5938 li
87.4844 35.0938 li
87.4844 35.0938 li
87.5469 35.6563 li
87.5469 35.6563 li
87.6094 36.2188 li
87.6094 36.7188 li
87.6719 36.7188 li
87.6719 37.2813 li
87.7344 37.2813 li
87.7344 37.7813 li
87.7969 37.7813 li
87.7969 38.3438 li
87.8594 38.9063 li
87.8594 38.9063 li
87.9219 39.4063 li
87.9219 39.9688 li
87.9844 39.9688 li
87.9844 40.4688 li
87.9844 40.4688 li
88.0469 41.0313 li
88.0469 41.5938 li
88.1094 41.5938 li
88.1094 42.0938 li
88.1719 42.0938 li
88.1719 42.6563 li
88.2344 43.2188 li
88.2344 43.2188 li
88.2969 43.7188 li
88.2969 43.7188 li
88.3594 43.7188 li
88.3594 44.2813 li
88.4219 44.2813 li
88.4219 44.7813 li
88.4219 44.7813 li
88.4844 45.3438 li
88.4844 45.3438 li
88.5469 45.3438 li
88.5469 45.9063 li
88.6094 45.9063 li
88.6094 45.9063 li
88.6719 45.9063 li
88.6719 46.4063 li
88.7344 46.4063 li
88.7344 46.4063 li
88.7969 46.4063 li
88.7969 46.4063 li
88.8594 46.4063 li
88.8594 46.4063 li
88.9219 46.4063 li
88.9219 46.4063 li
88.9219 46.4063 li
88.9844 46.4063 li
88.9844 46.4063 li
89.0469 46.4063 li
89.0469 46.4063 li
89.1094 46.4063 li
89.1094 46.4063 li
89.1719 46.4063 li
89.1719 46.4063 li
89.2344 45.9063 li
89.2344 45.9063 li
89.2969 45.9063 li
89.2969 45.3438 li
89.3594 45.3438 li
89.3594 45.3438 li
89.3594 44.7813 li
89.4219 44.7813 li
89.4219 44.7813 li
89.4844 44.2813 li
89.4844 44.2813 li
89.5469 43.7188 li
89.5469 43.7188 li
89.6094 43.2188 li
89.6094 43.2188 li
89.6719 42.6563 li
89.6719 42.6563 li
89.7344 42.0938 li
89.7344 42.0938 li
89.7969 41.5938 li
89.7969 41.5938 li
89.7969 41.0313 li
89.8594 40.4688 li
89.8594 40.4688 li
89.9219 39.9688 li
89.9219 39.4063 li
89.9844 39.4063 li
89.9844 38.9063 li
90.0469 38.9063 li
90.0469 38.3438 li
90.1094 37.7813 li
90.1094 37.7813 li
90.1719 37.2813 li
90.1719 36.7188 li
90.2344 36.7188 li
90.2344 36.2188 li
90.2969 36.2188 li
90.2969 35.6563 li
90.2969 35.0938 li
90.3594 35.0938 li
90.3594 34.5938 li
90.4219 34.5938 li
90.4219 34.0313 li
90.4844 34.0313 li
90.4844 33.5313 li
90.5469 33.5313 li
90.5469 32.9688 li
90.6094 32.9688 li
90.6094 32.4063 li
90.6719 32.4063 li
90.6719 31.9063 li
90.7344 31.9063 li
90.7344 31.9063 li
90.7344 31.3438 li
90.7969 31.3438 li
90.7969 31.3438 li
90.8594 30.7813 li
90.8594 30.7813 li
90.9219 30.7813 li
90.9219 30.7813 li
90.9844 30.2813 li
90.9844 30.2813 li
91.0469 30.2813 li
91.0469 30.2813 li
91.1094 30.2813 li
91.1094 30.2813 li
91.1719 30.2813 li
91.1719 30.2813 li
91.2344 30.2813 li
91.2344 30.2813 li
91.2344 30.2813 li
91.2969 30.2813 li
91.2969 30.2813 li
91.3594 30.2813 li
91.3594 30.2813 li
91.4219 30.2813 li
91.4219 30.2813 li
91.4844 30.2813 li
91.4844 30.7813 li
91.5469 30.7813 li
91.5469 30.7813 li
91.6094 31.3438 li
91.6094 31.3438 li
91.6719 31.3438 li
91.6719 31.3438 li
91.6719 31.9063 li
91.7344 31.9063 li
91.7344 32.4063 li
91.7969 32.4063 li
91.7969 32.9688 li
91.8594 32.9688 li
91.8594 32.9688 li
91.9219 33.5313 li
91.9219 33.5313 li
91.9844 34.0313 li
91.9844 34.0313 li
92.0469 34.5938 li
92.0469 34.5938 li
92.1094 35.0938 li
92.1094 35.6563 li
92.1719 35.6563 li
92.1719 36.2188 li
92.1719 36.2188 li
92.2344 36.7188 li
92.2344 36.7188 li
92.2969 37.2813 li
92.2969 37.2813 li
92.3594 37.7813 li
92.3594 38.3438 li
92.4219 38.3438 li
92.4219 38.9063 li
92.4844 38.9063 li
92.4844 39.4063 li
92.5469 39.4063 li
92.5469 39.9688 li
92.6094 40.4688 li
92.6094 40.4688 li
92.6094 41.0313 li
92.6719 41.0313 li
92.6719 41.5938 li
92.7344 41.5938 li
92.7344 42.0938 li
92.7969 42.0938 li
92.7969 42.6563 li
92.8594 42.6563 li
92.8594 43.2188 li
92.9219 43.2188 li
92.9219 43.7188 li
92.9844 43.7188 li
92.9844 43.7188 li
93.0469 44.2813 li
93.0469 44.2813 li
93.0469 44.2813 li
93.1094 44.7813 li
93.1094 44.7813 li
93.1719 44.7813 li
93.1719 45.3438 li
93.2344 45.3438 li
93.2344 45.3438 li
93.2969 45.3438 li
93.2969 45.3438 li
93.3594 45.3438 li
93.3594 45.9063 li
93.4219 45.9063 li
93.4219 45.9063 li
93.4844 45.9063 li
93.4844 45.9063 li
93.5469 45.9063 li
93.5469 45.9063 li
93.5469 45.9063 li
93.6094 45.9063 li
93.6094 45.9063 li
93.6719 45.3438 li
93.6719 45.3438 li
93.7344 45.3438 li
93.7344 45.3438 li
93.7969 45.3438 li
93.7969 45.3438 li
93.8594 44.7813 li
93.8594 44.7813 li
93.9219 44.7813 li
93.9219 44.2813 li
93.9844 44.2813 li
93.9844 44.2813 li
93.9844 43.7188 li
94.0469 43.7188 li
94.0469 43.7188 li
94.1094 43.2188 li
94.1094 43.2188 li
94.1719 42.6563 li
94.1719 42.6563 li
94.2344 42.0938 li
94.2344 42.0938 li
94.2969 41.5938 li
94.2969 41.5938 li
94.3594 41.0313 li
94.3594 41.0313 li
94.4219 40.4688 li
94.4219 39.9688 li
94.4844 39.9688 li
94.4844 39.4063 li
94.4844 39.4063 li
94.5469 38.9063 li
94.5469 38.9063 li
94.6094 38.3438 li
94.6094 37.7813 li
94.6719 37.7813 li
94.6719 37.2813 li
94.7344 37.2813 li
94.7344 36.7188 li
94.7969 36.2188 li
94.7969 36.2188 li
94.8594 35.6563 li
94.8594 35.6563 li
94.9219 35.0938 li
94.9219 35.0938 li
94.9219 34.5938 li
94.9844 34.5938 li
94.9844 34.0313 li
95.0469 34.0313 li
95.0469 33.5313 li
95.1094 33.5313 li
95.1094 32.9688 li
95.1719 32.9688 li
95.1719 32.4063 li
95.2344 32.4063 li
95.2344 31.9063 li
95.2969 31.9063 li
95.2969 31.9063 li
95.3594 31.3438 li
95.3594 31.3438 li
95.3594 31.3438 li
95.4219 31.3438 li
95.4219 30.7813 li
95.4844 30.7813 li
95.4844 30.7813 li
95.5469 30.7813 li
95.5469 30.7813 li
95.6094 30.2813 li
95.6094 30.2813 li
95.6719 30.2813 li
95.6719 30.2813 li
95.7344 30.2813 li
95.7344 30.2813 li
95.7969 30.2813 li
95.7969 30.2813 li
95.8594 30.2813 li
95.8594 30.2813 li
95.8594 30.2813 li
95.9219 30.2813 li
95.9219 30.2813 li
95.9844 30.7813 li
95.9844 30.7813 li
96.0469 30.7813 li
96.0469 30.7813 li
96.1094 30.7813 li
96.1094 31.3438 li
96.1719 31.3438 li
96.1719 31.3438 li
96.2344 31.3438 li
96.2344 31.9063 li
96.2969 31.9063 li
96.2969 31.9063 li
96.2969 32.4063 li
96.3594 32.4063 li
96.3594 32.9688 li
96.4219 32.9688 li
96.4219 33.5313 li
96.4844 33.5313 li
96.4844 33.5313 li
96.5469 34.0313 li
96.5469 34.0313 li
96.6094 34.5938 li
96.6094 34.5938 li
96.6719 35.0938 li
96.6719 35.0938 li
96.7344 35.6563 li
96.7344 35.6563 li
96.7969 36.2188 li
96.7969 36.2188 li
96.7969 36.7188 li
96.8594 36.7188 li
96.8594 37.2813 li
96.9219 37.7813 li
96.9219 37.7813 li
96.9844 38.3438 li
96.9844 38.3438 li
97.0469 38.9063 li
97.0469 38.9063 li
97.1094 39.4063 li
97.1094 39.9688 li
97.1719 39.9688 li
97.1719 39.9688 li
97.2344 40.4688 li
97.2344 40.4688 li
97.2344 41.0313 li
97.2969 41.0313 li
97.2969 41.5938 li
97.3594 41.5938 li
97.3594 42.0938 li
97.4219 42.0938 li
97.4219 42.6563 li
97.4844 42.6563 li
97.4844 42.6563 li
97.5469 43.2188 li
97.5469 43.2188 li
97.6094 43.7188 li
97.6094 43.7188 li
97.6719 43.7188 li
97.6719 44.2813 li
97.7344 44.2813 li
97.7344 44.2813 li
97.7344 44.2813 li
97.7969 44.7813 li
97.7969 44.7813 li
97.8594 44.7813 li
97.8594 44.7813 li
97.9219 44.7813 li
97.9219 44.7813 li
97.9844 44.7813 li
97.9844 44.7813 li
98.0469 44.7813 li
98.0469 44.7813 li
98.1094 44.7813 li
98.1094 45.3438 li
98.1719 44.7813 li
98.1719 44.7813 li
98.1719 44.7813 li
98.2344 44.7813 li
98.2344 44.7813 li
98.2969 44.7813 li
98.2969 44.7813 li
98.3594 44.2813 li
98.3594 44.2813 li
98.4219 44.2813 li
98.4219 44.2813 li
98.4844 43.7188 li
98.4844 43.7188 li
98.5469 43.7188 li
98.5469 43.2188 li
98.6094 43.2188 li
98.6094 43.2188 li
98.6094 42.6563 li
98.6719 42.6563 li
98.6719 42.0938 li
98.7344 42.0938 li
98.7344 42.0938 li
98.7969 41.5938 li
98.7969 41.5938 li
98.8594 41.0313 li
98.8594 41.0313 li
98.9219 40.4688 li
98.9219 40.4688 li
98.9844 39.9688 li
98.9844 39.9688 li
99.0469 39.4063 li
99.0469 38.9063 li
99.1094 38.9063 li
99.1094 38.3438 li
99.1094 38.3438 li
99.1719 37.7813 li
99.1719 37.7813 li
99.2344 37.2813 li
99.2344 37.2813 li
99.2969 36.7188 li
99.2969 36.7188 li
99.3594 36.2188 li
99.3594 35.6563 li
99.4219 35.6563 li
99.4219 35.0938 li
99.4844 35.0938 li
99.4844 34.5938 li
99.5469 34.5938 li
99.5469 34.0313 li
99.5469 34.0313 li
99.6094 33.5313 li
99.6094 33.5313 li
99.6719 32.9688 li
99.6719 32.9688 li
99.7344 32.9688 li
99.7344 32.4063 li
99.7969 32.4063 li
99.7969 31.9063 li
99.8594 31.9063 li
99.8594 31.9063 li
99.9219 31.3438 li
99.9219 31.3438 li
99.9844 31.3438 li
99.9844 31.3438 li
100.047 30.7813 li
100.047 30.7813 li
100.047 30.7813 li
100.109 30.7813 li
100.109 30.7813 li
100.172 30.7813 li
100.172 30.2813 li
100.234 30.2813 li
100.234 30.2813 li
100.297 30.2813 li
100.297 30.2813 li
100.359 30.2813 li
100.359 30.2813 li
100.422 30.2813 li
100.422 30.2813 li
100.484 30.2813 li
100.484 30.2813 li
100.484 30.7813 li
100.547 30.7813 li
100.547 30.7813 li
100.609 30.7813 li
100.609 30.7813 li
100.672 31.3438 li
100.672 31.3438 li
100.734 31.3438 li
100.734 31.3438 li
100.797 31.9063 li
100.797 31.9063 li
100.859 31.9063 li
100.859 32.4063 li
100.922 32.4063 li
100.922 32.9688 li
100.984 32.9688 li
100.984 32.9688 li
100.984 33.5313 li
101.047 33.5313 li
101.047 33.5313 li
101.109 34.0313 li
101.109 34.0313 li
101.172 34.5938 li
101.172 34.5938 li
101.234 35.0938 li
101.234 35.0938 li
101.297 35.6563 li
101.297 35.6563 li
101.359 36.2188 li
101.359 36.2188 li
101.422 36.7188 li
101.422 36.7188 li
101.422 37.2813 li
101.484 37.2813 li
101.484 37.7813 li
101.547 37.7813 li
101.547 38.3438 li
101.609 38.3438 li
101.609 38.9063 li
101.672 38.9063 li
101.672 39.4063 li
101.734 39.4063 li
101.734 39.9688 li
101.797 39.9688 li
101.797 40.4688 li
101.859 40.4688 li
101.859 41.0313 li
101.859 41.0313 li
101.922 41.5938 li
101.922 41.5938 li
101.984 41.5938 li
101.984 42.0938 li
102.047 42.0938 li
102.047 42.0938 li
102.109 42.6563 li
102.109 42.6563 li
102.172 43.2188 li
102.172 43.2188 li
102.234 43.2188 li
102.234 43.2188 li
102.297 43.7188 li
102.297 43.7188 li
102.359 43.7188 li
102.359 43.7188 li
102.359 43.7188 li
102.422 44.2813 li
102.422 44.2813 li
102.484 44.2813 li
102.484 44.2813 li
102.547 44.2813 li
102.547 44.2813 li
102.609 44.2813 li
102.609 44.2813 li
102.672 44.2813 li
102.672 44.2813 li
102.734 44.2813 li
102.734 44.2813 li
102.797 44.2813 li
102.797 44.2813 li
102.797 44.2813 li
102.859 43.7188 li
102.859 43.7188 li
102.922 43.7188 li
102.922 43.7188 li
102.984 43.7188 li
102.984 43.2188 li
103.047 43.2188 li
103.047 43.2188 li
103.109 42.6563 li
103.109 42.6563 li
103.172 42.6563 li
103.172 42.0938 li
103.234 42.0938 li
103.234 42.0938 li
103.297 41.5938 li
103.297 41.5938 li
103.297 41.0313 li
103.359 41.0313 li
103.359 40.4688 li
103.422 40.4688 li
103.422 40.4688 li
103.484 39.9688 li
103.484 39.9688 li
103.547 39.4063 li
103.547 39.4063 li
103.609 38.9063 li
103.609 38.3438 li
103.672 38.3438 li
103.672 37.7813 li
103.734 37.7813 li
103.734 37.2813 li
103.734 37.2813 li
103.797 36.7188 li
103.797 36.7188 li
103.859 36.2188 li
103.859 36.2188 li
103.922 35.6563 li
103.922 35.6563 li
103.984 35.0938 li
103.984 35.0938 li
104.047 34.5938 li
104.047 34.5938 li
104.109 34.0313 li
104.109 34.0313 li
104.172 34.0313 li
104.172 33.5313 li
104.172 33.5313 li
104.234 32.9688 li
104.234 32.9688 li
104.297 32.4063 li
104.297 32.4063 li
104.359 32.4063 li
104.359 31.9063 li
104.422 31.9063 li
104.422 31.9063 li
104.484 31.3438 li
104.484 31.3438 li
104.547 31.3438 li
104.547 31.3438 li
104.609 31.3438 li
104.609 30.7813 li
104.672 30.7813 li
104.672 30.7813 li
104.672 30.7813 li
104.734 30.7813 li
104.734 30.7813 li
104.797 30.7813 li
104.797 30.7813 li
104.859 30.7813 li
104.859 30.7813 li
104.922 30.7813 li
104.922 30.7813 li
104.984 30.7813 li
104.984 30.7813 li
105.047 30.7813 li
105.047 30.7813 li
105.109 30.7813 li
105.109 30.7813 li
105.109 30.7813 li
105.172 31.3438 li
105.172 31.3438 li
105.234 31.3438 li
105.234 31.3438 li
105.297 31.3438 li
105.297 31.9063 li
105.359 31.9063 li
105.359 31.9063 li
105.422 32.4063 li
105.422 32.4063 li
105.484 32.4063 li
105.484 32.9688 li
105.547 32.9688 li
105.547 32.9688 li
105.609 33.5313 li
105.609 33.5313 li
105.609 34.0313 li
105.672 34.0313 li
105.672 34.5938 li
105.734 34.5938 li
105.734 34.5938 li
105.797 35.0938 li
105.797 35.0938 li
105.859 35.6563 li
105.859 35.6563 li
105.922 36.2188 li
105.922 36.2188 li
105.984 36.7188 li
105.984 36.7188 li
106.047 37.2813 li
106.047 37.2813 li
106.047 37.7813 li
106.109 37.7813 li
106.109 38.3438 li
106.172 38.3438 li
106.172 38.9063 li
106.234 38.9063 li
106.234 39.4063 li
106.297 39.4063 li
106.297 39.4063 li
106.359 39.9688 li
106.359 39.9688 li
106.422 40.4688 li
106.422 40.4688 li
106.484 40.4688 li
106.484 41.0313 li
106.547 41.0313 li
106.547 41.5938 li
106.547 41.5938 li
106.609 41.5938 li
106.609 42.0938 li
106.672 42.0938 li
106.672 42.0938 li
106.734 42.6563 li
106.734 42.6563 li
106.797 42.6563 li
106.797 42.6563 li
106.859 42.6563 li
106.859 43.2188 li
106.922 43.2188 li
106.922 43.2188 li
106.984 43.2188 li
106.984 43.2188 li
106.984 43.2188 li
107.047 43.7188 li
107.047 43.7188 li
107.109 43.7188 li
107.109 43.7188 li
107.172 43.7188 li
107.172 43.7188 li
107.234 43.7188 li
107.234 43.7188 li
107.297 43.7188 li
107.297 43.7188 li
107.359 43.7188 li
107.359 43.2188 li
107.422 43.2188 li
107.422 43.2188 li
107.422 43.2188 li
107.484 43.2188 li
107.484 42.6563 li
107.547 42.6563 li
107.547 42.6563 li
107.609 42.6563 li
107.609 42.0938 li
107.672 42.0938 li
107.672 42.0938 li
107.734 41.5938 li
107.734 41.5938 li
107.797 41.5938 li
107.797 41.0313 li
107.859 41.0313 li
107.859 41.0313 li
107.922 40.4688 li
107.922 40.4688 li
107.922 39.9688 li
107.984 39.9688 li
107.984 39.4063 li
108.047 39.4063 li
108.047 39.4063 li
108.109 38.9063 li
108.109 38.9063 li
108.172 38.3438 li
108.172 38.3438 li
108.234 37.7813 li
108.234 37.7813 li
108.297 37.2813 li
108.297 37.2813 li
108.359 36.7188 li
108.359 36.7188 li
108.359 36.2188 li
108.422 36.2188 li
108.422 35.6563 li
108.484 35.6563 li
108.484 35.0938 li
108.547 35.0938 li
108.547 34.5938 li
108.609 34.5938 li
108.609 34.5938 li
108.672 34.0313 li
108.672 34.0313 li
108.734 33.5313 li
108.734 33.5313 li
108.797 33.5313 li
108.797 32.9688 li
108.859 32.9688 li
108.859 32.4063 li
108.859 32.4063 li
108.922 32.4063 li
108.922 31.9063 li
108.984 31.9063 li
108.984 31.9063 li
109.047 31.9063 li
109.047 31.3438 li
109.109 31.3438 li
109.109 31.3438 li
109.172 31.3438 li
109.172 31.3438 li
109.234 31.3438 li
109.234 30.7813 li
109.297 30.7813 li
109.297 30.7813 li
109.297 30.7813 li
109.359 30.7813 li
109.359 30.7813 li
109.422 30.7813 li
109.422 30.7813 li
109.484 30.7813 li
109.484 30.7813 li
109.547 30.7813 li
109.547 30.7813 li
109.609 30.7813 li
109.609 30.7813 li
109.672 31.3438 li
109.672 31.3438 li
109.734 31.3438 li
109.734 31.3438 li
109.734 31.3438 li
109.797 31.9063 li
109.797 31.9063 li
109.859 31.9063 li
109.859 31.9063 li
109.922 31.9063 li
109.922 32.4063 li
109.984 32.4063 li
109.984 32.4063 li
110.047 32.9688 li
110.047 32.9688 li
110.109 32.9688 li
110.109 33.5313 li
110.172 33.5313 li
110.172 34.0313 li
110.234 34.0313 li
110.234 34.0313 li
110.234 34.5938 li
110.297 34.5938 li
110.297 35.0938 li
110.359 35.0938 li
110.359 35.0938 li
110.422 35.6563 li
110.422 35.6563 li
110.484 36.2188 li
110.484 36.2188 li
110.547 36.7188 li
110.547 36.7188 li
110.609 37.2813 li
110.609 37.2813 li
110.672 37.2813 li
110.672 37.7813 li
110.672 37.7813 li
110.734 38.3438 li
110.734 38.3438 li
110.797 38.9063 li
110.797 38.9063 li
110.859 38.9063 li
110.859 39.4063 li
110.922 39.4063 li
110.922 39.9688 li
110.984 39.9688 li
110.984 39.9688 li
111.047 40.4688 li
111.047 40.4688 li
111.109 40.4688 li
111.109 41.0313 li
111.172 41.0313 li
111.172 41.0313 li
111.172 41.5938 li
111.234 41.5938 li
111.234 41.5938 li
111.297 41.5938 li
111.297 42.0938 li
111.359 42.0938 li
111.359 42.0938 li
111.422 42.0938 li
111.422 42.6563 li
111.484 42.6563 li
111.484 42.6563 li
111.547 42.6563 li
111.547 42.6563 li
111.609 42.6563 li
111.609 42.6563 li
111.609 42.6563 li
111.672 42.6563 li
111.672 42.6563 li
111.734 42.6563 li
111.734 42.6563 li
111.797 42.6563 li
111.797 42.6563 li
111.859 42.6563 li
111.859 42.6563 li
111.922 42.6563 li
111.922 42.6563 li
111.984 42.6563 li
111.984 42.6563 li
112.047 42.0938 li
112.047 42.0938 li
112.109 42.0938 li
112.109 42.0938 li
112.109 42.0938 li
112.172 41.5938 li
112.172 41.5938 li
112.234 41.5938 li
112.234 41.0313 li
112.297 41.0313 li
112.297 41.0313 li
112.359 41.0313 li
112.359 40.4688 li
112.422 40.4688 li
112.422 39.9688 li
112.484 39.9688 li
112.484 39.9688 li
112.547 39.4063 li
112.547 39.4063 li
112.547 38.9063 li
112.609 38.9063 li
112.609 38.3438 li
112.672 38.3438 li
112.672 38.3438 li
112.734 37.7813 li
112.734 37.7813 li
112.797 37.2813 li
112.797 37.2813 li
112.859 36.7188 li
112.859 36.7188 li
112.922 36.7188 li
112.922 36.2188 li
112.984 36.2188 li
112.984 35.6563 li
112.984 35.6563 li
113.047 35.0938 li
113.047 35.0938 li
113.109 34.5938 li
113.109 34.5938 li
113.172 34.5938 li
113.172 34.0313 li
113.234 34.0313 li
113.234 33.5313 li
113.297 33.5313 li
113.297 33.5313 li
113.359 32.9688 li
113.359 32.9688 li
113.422 32.9688 li
113.422 32.4063 li
113.484 32.4063 li
113.484 32.4063 li
113.484 32.4063 li
113.547 31.9063 li
113.547 31.9063 li
113.609 31.9063 li
113.609 31.9063 li
113.672 31.3438 li
113.672 31.3438 li
113.734 31.3438 li
113.734 31.3438 li
113.797 31.3438 li
113.797 31.3438 li
113.859 31.3438 li
113.859 31.3438 li
113.922 31.3438 li
113.922 31.3438 li
113.922 31.3438 li
113.984 31.3438 li
113.984 30.7813 li
114.047 31.3438 li
114.047 31.3438 li
114.109 31.3438 li
114.109 31.3438 li
114.172 31.3438 li
114.172 31.3438 li
114.234 31.3438 li
114.234 31.3438 li
114.297 31.3438 li
114.297 31.9063 li
114.359 31.9063 li
114.359 31.9063 li
114.422 31.9063 li
114.422 31.9063 li
114.422 32.4063 li
114.484 32.4063 li
114.484 32.4063 li
114.547 32.9688 li
114.547 32.9688 li
114.609 32.9688 li
114.609 32.9688 li
114.672 33.5313 li
114.672 33.5313 li
114.734 34.0313 li
114.734 34.0313 li
114.797 34.0313 li
114.797 34.5938 li
114.859 34.5938 li
114.859 34.5938 li
114.859 35.0938 li
114.922 35.0938 li
114.922 35.6563 li
114.984 35.6563 li
114.984 35.6563 li
115.047 36.2188 li
115.047 36.2188 li
115.109 36.7188 li
115.109 36.7188 li
115.172 37.2813 li
115.172 37.2813 li
115.234 37.2813 li
115.234 37.7813 li
115.297 37.7813 li
115.297 37.7813 li
115.359 38.3438 li
115.359 38.3438 li
115.359 38.9063 li
115.422 38.9063 li
115.422 38.9063 li
115.484 39.4063 li
115.484 39.4063 li
115.547 39.4063 li
115.547 39.9688 li
115.609 39.9688 li
115.609 39.9688 li
115.672 40.4688 li
115.672 40.4688 li
115.734 40.4688 li
115.734 41.0313 li
115.797 41.0313 li
115.797 41.0313 li
115.797 41.0313 li
115.859 41.5938 li
115.859 41.5938 li
115.922 41.5938 li
115.922 41.5938 li
115.984 41.5938 li
115.984 41.5938 li
116.047 42.0938 li
116.047 42.0938 li
116.109 42.0938 li
116.109 42.0938 li
116.172 42.0938 li
116.172 42.0938 li
116.234 42.0938 li
116.234 42.0938 li
116.234 42.0938 li
116.297 42.0938 li
116.297 42.0938 li
116.359 42.0938 li
116.359 42.0938 li
116.422 42.0938 li
116.422 42.0938 li
116.484 42.0938 li
116.484 42.0938 li
116.547 41.5938 li
116.547 41.5938 li
116.609 41.5938 li
116.609 41.5938 li
116.672 41.5938 li
116.672 41.5938 li
116.734 41.0313 li
116.734 41.0313 li
116.734 41.0313 li
116.797 40.4688 li
116.797 40.4688 li
116.859 40.4688 li
116.859 40.4688 li
116.922 39.9688 li
116.922 39.9688 li
116.984 39.9688 li
116.984 39.4063 li
117.047 39.4063 li
117.047 39.4063 li
117.109 38.9063 li
117.109 38.9063 li
117.172 38.3438 li
117.172 38.3438 li
117.172 38.3438 li
117.234 37.7813 li
117.234 37.7813 li
117.297 37.2813 li
117.297 37.2813 li
117.359 37.2813 li
117.359 36.7188 li
117.422 36.7188 li
117.422 36.2188 li
117.484 36.2188 li
117.484 36.2188 li
117.547 35.6563 li
117.547 35.6563 li
117.609 35.0938 li
117.609 35.0938 li
117.672 35.0938 li
117.672 34.5938 li
117.672 34.5938 li
117.734 34.0313 li
117.734 34.0313 li
117.797 34.0313 li
117.797 33.5313 li
117.859 33.5313 li
117.859 33.5313 li
117.922 32.9688 li
117.922 32.9688 li
117.984 32.9688 li
117.984 32.9688 li
118.047 32.4063 li
118.047 32.4063 li
118.109 32.4063 li
118.109 32.4063 li
118.109 31.9063 li
118.172 31.9063 li
118.172 31.9063 li
118.234 31.9063 li
118.234 31.9063 li
118.297 31.3438 li
118.297 31.3438 li
118.359 31.3438 li
118.359 31.3438 li
118.422 31.3438 li
118.422 31.3438 li
118.484 31.3438 li
118.484 31.3438 li
118.547 31.3438 li
118.547 31.3438 li
118.547 31.3438 li
118.609 31.3438 li
118.609 31.3438 li
118.672 31.3438 li
118.672 31.3438 li
118.734 31.3438 li
118.734 31.3438 li
118.797 31.9063 li
118.797 31.9063 li
118.859 31.9063 li
118.859 31.9063 li
118.922 31.9063 li
118.922 32.4063 li
118.984 32.4063 li
118.984 32.4063 li
119.047 32.4063 li
119.047 32.9688 li
119.047 32.9688 li
119.109 32.9688 li
119.109 32.9688 li
119.172 33.5313 li
119.172 33.5313 li
119.234 33.5313 li
119.234 34.0313 li
119.297 34.0313 li
119.297 34.0313 li
119.359 34.5938 li
119.359 34.5938 li
119.422 34.5938 li
119.422 35.0938 li
119.484 35.0938 li
119.484 35.0938 li
119.484 35.6563 li
119.547 35.6563 li
119.547 35.6563 li
119.609 36.2188 li
119.609 36.2188 li
119.672 36.2188 li
119.672 36.7188 li
119.734 36.7188 li
119.734 37.2813 li
119.797 37.2813 li
119.797 37.2813 li
119.859 37.7813 li
119.859 37.7813 li
119.922 37.7813 li
119.922 38.3438 li
119.984 38.3438 li
119.984 38.9063 li
119.984 38.9063 li
120.047 38.9063 li
120.047 38.9063 li
120.109 39.4063 li
120.109 39.4063 li
120.172 39.4063 li
120.172 39.9688 li
120.234 39.9688 li
120.234 39.9688 li
120.297 39.9688 li
120.297 40.4688 li
120.359 40.4688 li
120.359 40.4688 li
120.422 40.4688 li
120.422 40.4688 li
120.422 41.0313 li
120.484 41.0313 li
120.484 41.0313 li
120.547 41.0313 li
120.547 41.0313 li
120.609 41.0313 li
120.609 41.0313 li
120.672 41.5938 li
120.672 41.5938 li
120.734 41.5938 li
120.734 41.5938 li
120.797 41.5938 li
120.797 41.5938 li
120.859 41.5938 li
120.859 41.5938 li
120.922 41.5938 li
120.922 41.5938 li
120.922 41.5938 li
120.984 41.0313 li
120.984 41.0313 li
121.047 41.0313 li
121.047 41.0313 li
121.109 41.0313 li
121.109 41.0313 li
121.172 41.0313 li
121.172 41.0313 li
121.234 40.4688 li
121.234 40.4688 li
121.297 40.4688 li
121.297 40.4688 li
121.359 39.9688 li
121.359 39.9688 li
121.359 39.9688 li
121.422 39.9688 li
121.422 39.4063 li
121.484 39.4063 li
121.484 39.4063 li
121.547 38.9063 li
121.547 38.9063 li
121.609 38.9063 li
121.609 38.3438 li
121.672 38.3438 li
121.672 38.3438 li
121.734 37.7813 li
121.734 37.7813 li
121.797 37.7813 li
121.797 37.2813 li
121.797 37.2813 li
121.859 37.2813 li
121.859 36.7188 li
121.922 36.7188 li
121.922 36.7188 li
121.984 36.2188 li
121.984 36.2188 li
122.047 35.6563 li
122.047 35.6563 li
122.109 35.6563 li
122.109 35.0938 li
122.172 35.0938 li
122.172 35.0938 li
122.234 34.5938 li
122.234 34.5938 li
122.297 34.5938 li
122.297 34.0313 li
122.297 34.0313 li
122.359 34.0313 li
122.359 33.5313 li
122.422 33.5313 li
122.422 33.5313 li
122.484 32.9688 li
122.484 32.9688 li
122.547 32.9688 li
122.547 32.9688 li
122.609 32.4063 li
122.609 32.4063 li
122.672 32.4063 li
122.672 32.4063 li
122.734 32.4063 li
122.734 31.9063 li
122.734 31.9063 li
122.797 31.9063 li
122.797 31.9063 li
122.859 31.9063 li
122.859 31.9063 li
122.922 31.9063 li
122.922 31.9063 li
122.984 31.9063 li
122.984 31.9063 li
123.047 31.9063 li
123.047 31.9063 li
123.109 31.9063 li
123.109 31.9063 li
123.172 31.9063 li
123.172 31.9063 li
123.234 31.9063 li
123.234 31.9063 li
123.234 31.9063 li
123.297 31.9063 li
123.297 31.9063 li
123.359 31.9063 li
123.359 31.9063 li
123.422 32.4063 li
123.422 32.4063 li
123.484 32.4063 li
123.484 32.4063 li
123.547 32.4063 li
123.547 32.4063 li
123.609 32.9688 li
123.609 32.9688 li
123.672 32.9688 li
123.672 32.9688 li
123.672 33.5313 li
123.734 33.5313 li
123.734 33.5313 li
123.797 34.0313 li
123.797 34.0313 li
123.859 34.0313 li
123.859 34.0313 li
123.922 34.5938 li
123.922 34.5938 li
123.984 34.5938 li
123.984 35.0938 li
124.047 35.0938 li
124.047 35.0938 li
124.109 35.6563 li
124.109 35.6563 li
124.109 35.6563 li
124.172 36.2188 li
124.172 36.2188 li
124.234 36.2188 li
124.234 36.7188 li
124.297 36.7188 li
124.297 36.7188 li
124.359 37.2813 li
124.359 37.2813 li
124.422 37.2813 li
124.422 37.7813 li
124.484 37.7813 li
124.484 37.7813 li
124.547 37.7813 li
124.547 38.3438 li
124.609 38.3438 li
124.609 38.3438 li
124.609 38.9063 li
124.672 38.9063 li
124.672 38.9063 li
124.734 38.9063 li
124.734 39.4063 li
124.797 39.4063 li
124.797 39.4063 li
124.859 39.4063 li
124.859 39.9688 li
124.922 39.9688 li
124.922 39.9688 li
124.984 39.9688 li
124.984 39.9688 li
125.047 39.9688 li
125.047 40.4688 li
125.047 40.4688 li
125.109 40.4688 li
125.109 40.4688 li
125.172 40.4688 li
125.172 40.4688 li
125.234 40.4688 li
125.234 40.4688 li
125.297 40.4688 li
125.297 40.4688 li
125.359 40.4688 li
125.359 40.4688 li
125.422 40.4688 li
125.422 40.4688 li
125.484 40.4688 li
125.484 40.4688 li
125.547 40.4688 li
125.547 40.4688 li
125.547 40.4688 li
125.609 40.4688 li
125.609 40.4688 li
125.672 40.4688 li
125.672 40.4688 li
125.734 39.9688 li
125.734 39.9688 li
125.797 39.9688 li
125.797 39.9688 li
125.859 39.9688 li
125.859 39.9688 li
125.922 39.4063 li
125.922 39.4063 li
125.984 39.4063 li
125.984 39.4063 li
125.984 38.9063 li
126.047 38.9063 li
126.047 38.9063 li
126.109 38.9063 li
126.109 38.3438 li
126.172 38.3438 li
126.172 38.3438 li
126.234 37.7813 li
126.234 37.7813 li
126.297 37.7813 li
126.297 37.2813 li
126.359 37.2813 li
126.359 37.2813 li
126.422 36.7188 li
126.422 36.7188 li
126.484 36.7188 li
126.484 36.2188 li
126.484 36.2188 li
126.547 36.2188 li
126.547 35.6563 li
126.609 35.6563 li
126.609 35.6563 li
126.672 35.0938 li
126.672 35.0938 li
126.734 35.0938 li
126.734 34.5938 li
126.797 34.5938 li
126.797 34.5938 li
126.859 34.5938 li
126.859 34.0313 li
126.922 34.0313 li
126.922 34.0313 li
126.922 33.5313 li
126.984 33.5313 li
126.984 33.5313 li
127.047 33.5313 li
127.047 32.9688 li
127.109 32.9688 li
127.109 32.9688 li
127.172 32.9688 li
127.172 32.9688 li
127.234 32.9688 li
127.234 32.4063 li
127.297 32.4063 li
127.297 32.4063 li
127.359 32.4063 li
127.359 32.4063 li
127.359 32.4063 li
127.422 32.4063 li
127.422 32.4063 li
127.484 31.9063 li
127.484 31.9063 li
127.547 31.9063 li
127.547 31.9063 li
127.609 31.9063 li
127.609 31.9063 li
127.672 31.9063 li
127.672 31.9063 li
127.734 31.9063 li
127.734 31.9063 li
127.797 31.9063 li
127.797 31.9063 li
127.859 31.9063 li
127.859 32.4063 li
127.859 32.4063 li
127.922 32.4063 li
127.922 32.4063 li
127.984 32.4063 li
127.984 32.4063 li
128.047 32.4063 li
128.047 32.9688 li
128.109 32.9688 li
128.109 32.9688 li
128.172 32.9688 li
128.172 32.9688 li
128.234 33.5313 li
128.234 33.5313 li
128.297 33.5313 li
128.297 33.5313 li
128.297 33.5313 li
128.359 34.0313 li
128.359 34.0313 li
128.422 34.0313 li
128.422 34.0313 li
128.484 34.5938 li
128.484 34.5938 li
128.547 34.5938 li
128.547 35.0938 li
128.609 35.0938 li
128.609 35.0938 li
128.672 35.6563 li
128.672 35.6563 li
128.734 35.6563 li
128.734 35.6563 li
128.797 36.2188 li
128.797 36.2188 li
128.797 36.2188 li
128.859 36.2188 li
128.859 36.7188 li
128.922 36.7188 li
128.922 36.7188 li
128.984 37.2813 li
128.984 37.2813 li
129.047 37.2813 li
129.047 37.2813 li
129.109 37.7813 li
129.109 37.7813 li
129.172 37.7813 li
129.172 38.3438 li
129.234 38.3438 li
129.234 38.3438 li
129.234 38.3438 li
129.297 38.3438 li
129.297 38.9063 li
129.359 38.9063 li
129.359 38.9063 li
129.422 38.9063 li
129.422 38.9063 li
129.484 39.4063 li
129.484 39.4063 li
129.547 39.4063 li
129.547 39.4063 li
129.609 39.4063 li
129.609 39.4063 li
129.672 39.4063 li
129.672 39.9688 li
129.734 39.9688 li
129.734 39.9688 li
129.734 39.9688 li
129.797 39.9688 li
129.797 39.9688 li
129.859 39.9688 li
129.859 39.9688 li
129.922 39.9688 li
129.922 39.9688 li
129.984 39.9688 li
129.984 39.9688 li
130.047 39.9688 li
130.047 39.9688 li
130.109 39.9688 li
130.109 39.9688 li
130.172 39.9688 li
130.172 39.9688 li
130.172 39.9688 li
130.234 39.9688 li
130.234 39.4063 li
130.297 39.4063 li
130.297 39.4063 li
130.359 39.4063 li
130.359 39.4063 li
130.422 39.4063 li
130.422 38.9063 li
130.484 38.9063 li
130.484 38.9063 li
130.547 38.9063 li
130.547 38.9063 li
130.609 38.3438 li
130.609 38.3438 li
130.609 38.3438 li
130.672 38.3438 li
130.672 37.7813 li
130.734 37.7813 li
130.734 37.7813 li
130.797 37.7813 li
130.797 37.2813 li
130.859 37.2813 li
130.859 37.2813 li
130.922 37.2813 li
130.922 36.7188 li
130.984 36.7188 li
130.984 36.7188 li
131.047 36.2188 li
131.047 36.2188 li
131.109 36.2188 li
131.109 36.2188 li
131.109 35.6563 li
131.172 35.6563 li
131.172 35.6563 li
131.234 35.0938 li
131.234 35.0938 li
131.297 35.0938 li
131.297 35.0938 li
131.359 34.5938 li
131.359 34.5938 li
131.422 34.5938 li
131.422 34.0313 li
131.484 34.0313 li
131.484 34.0313 li
131.547 34.0313 li
131.547 33.5313 li
131.547 33.5313 li
131.609 33.5313 li
131.609 33.5313 li
131.672 33.5313 li
131.672 32.9688 li
131.734 32.9688 li
131.734 32.9688 li
131.797 32.9688 li
131.797 32.9688 li
131.859 32.9688 li
131.859 32.4063 li
131.922 32.4063 li
131.922 32.4063 li
131.984 32.4063 li
131.984 32.4063 li
132.047 32.4063 li
132.047 32.4063 li
132.047 32.4063 li
132.109 32.4063 li
132.109 32.4063 li
132.172 32.4063 li
132.172 32.4063 li
132.234 32.4063 li
132.234 32.4063 li
132.297 32.4063 li
132.297 32.4063 li
132.359 32.4063 li
132.359 32.4063 li
132.422 32.4063 li
132.422 32.4063 li
132.484 32.4063 li
132.484 32.4063 li
132.484 32.4063 li
132.547 32.9688 li
132.547 32.9688 li
132.609 32.9688 li
132.609 32.9688 li
132.672 32.9688 li
132.672 32.9688 li
132.734 32.9688 li
132.734 33.5313 li
132.797 33.5313 li
132.797 33.5313 li
132.859 33.5313 li
132.859 33.5313 li
132.922 34.0313 li
132.922 34.0313 li
132.922 34.0313 li
132.984 34.0313 li
132.984 34.5938 li
133.047 34.5938 li
133.047 34.5938 li
133.109 34.5938 li
133.109 35.0938 li
133.172 35.0938 li
133.172 35.0938 li
133.234 35.0938 li
133.234 35.6563 li
133.297 35.6563 li
133.297 35.6563 li
133.359 35.6563 li
133.359 35.6563 li
133.422 36.2188 li
133.422 36.2188 li
133.422 36.2188 li
133.484 36.7188 li
133.484 36.7188 li
133.547 36.7188 li
133.547 36.7188 li
133.609 37.2813 li
133.609 37.2813 li
133.672 37.2813 li
133.672 37.2813 li
133.734 37.2813 li
133.734 37.7813 li
133.797 37.7813 li
133.797 37.7813 li
133.859 37.7813 li
133.859 38.3438 li
133.859 38.3438 li
133.922 38.3438 li
133.922 38.3438 li
133.984 38.3438 li
133.984 38.3438 li
134.047 38.9063 li
134.047 38.9063 li
134.109 38.9063 li
134.109 38.9063 li
134.172 38.9063 li
134.172 38.9063 li
134.234 38.9063 li
134.234 38.9063 li
134.297 39.4063 li
134.297 39.4063 li
134.359 39.4063 li
134.359 39.4063 li
134.359 39.4063 li
134.422 39.4063 li
134.422 39.4063 li
134.484 39.4063 li
134.484 39.4063 li
134.547 39.4063 li
134.547 39.4063 li
134.609 39.4063 li
134.609 39.4063 li
134.672 39.4063 li
134.672 39.4063 li
134.734 39.4063 li
134.734 39.4063 li
134.797 39.4063 li
134.797 39.4063 li
134.797 38.9063 li
134.859 38.9063 li
134.859 38.9063 li
134.922 38.9063 li
134.922 38.9063 li
134.984 38.9063 li
134.984 38.9063 li
135.047 38.3438 li
135.047 38.3438 li
135.109 38.3438 li
135.109 38.3438 li
135.172 38.3438 li
135.172 37.7813 li
135.234 37.7813 li
135.234 37.7813 li
135.297 37.7813 li
135.297 37.7813 li
135.297 37.2813 li
135.359 37.2813 li
135.359 37.2813 li
135.422 37.2813 li
135.422 36.7188 li
135.484 36.7188 li
135.484 36.7188 li
135.547 36.7188 li
135.547 36.2188 li
135.609 36.2188 li
135.609 36.2188 li
135.672 36.2188 li
135.672 35.6563 li
135.734 35.6563 li
135.734 35.6563 li
135.734 35.6563 li
135.797 35.0938 li
135.797 35.0938 li
135.859 35.0938 li
135.859 35.0938 li
135.922 34.5938 li
135.922 34.5938 li
135.984 34.5938 li
135.984 34.5938 li
136.047 34.5938 li
136.047 34.0313 li
136.109 34.0313 li
136.109 34.0313 li
136.172 34.0313 li
136.172 33.5313 li
136.172 33.5313 li
136.234 33.5313 li
136.234 33.5313 li
136.297 33.5313 li
136.297 33.5313 li
136.359 32.9688 li
136.359 32.9688 li
136.422 32.9688 li
136.422 32.9688 li
136.484 32.9688 li
136.484 32.9688 li
136.547 32.9688 li
136.547 32.9688 li
136.609 32.9688 li
136.609 32.9688 li
136.672 32.4063 li
136.672 32.4063 li
136.672 32.4063 li
136.734 32.4063 li
136.734 32.4063 li
136.797 32.4063 li
136.797 32.4063 li
136.859 32.4063 li
136.859 32.4063 li
136.922 32.4063 li
136.922 32.4063 li
136.984 32.4063 li
136.984 32.9688 li
137.047 32.9688 li
137.047 32.9688 li
137.109 32.9688 li
137.109 32.9688 li
137.109 32.9688 li
137.172 32.9688 li
137.172 32.9688 li
137.234 32.9688 li
137.234 32.9688 li
137.297 32.9688 li
137.297 33.5313 li
137.359 33.5313 li
137.359 33.5313 li
137.422 33.5313 li
137.422 33.5313 li
137.484 34.0313 li
137.484 34.0313 li
137.547 34.0313 li
137.547 34.0313 li
137.609 34.0313 li
137.609 34.5938 li
137.609 34.5938 li
137.672 34.5938 li
137.672 34.5938 li
137.734 34.5938 li
137.734 35.0938 li
137.797 35.0938 li
137.797 35.0938 li
137.859 35.0938 li
137.859 35.6563 li
137.922 35.6563 li
137.922 35.6563 li
137.984 35.6563 li
137.984 35.6563 li
138.047 36.2188 li
138.047 36.2188 li
138.047 36.2188 li
138.109 36.2188 li
138.109 36.7188 li
138.172 36.7188 li
138.172 36.7188 li
138.234 36.7188 li
138.234 36.7188 li
138.297 37.2813 li
138.297 37.2813 li
138.359 37.2813 li
138.359 37.2813 li
138.422 37.2813 li
138.422 37.7813 li
138.484 37.7813 li
138.484 37.7813 li
138.484 37.7813 li
138.547 37.7813 li
138.547 37.7813 li
138.609 38.3438 li
138.609 38.3438 li
138.672 38.3438 li
138.672 38.3438 li
138.734 38.3438 li
138.734 38.3438 li
138.797 38.3438 li
138.797 38.3438 li
138.859 38.3438 li
138.859 38.9063 li
138.922 38.9063 li
138.922 38.9063 li
138.984 38.9063 li
138.984 38.9063 li
138.984 38.9063 li
139.047 38.9063 li
139.047 38.9063 li
139.109 38.9063 li
139.109 38.9063 li
139.172 38.9063 li
139.172 38.9063 li
139.234 38.9063 li
139.234 38.9063 li
139.297 38.9063 li
139.297 38.9063 li
139.359 38.9063 li
139.359 38.9063 li
139.422 38.9063 li
139.422 38.3438 li
139.422 38.3438 li
139.484 38.3438 li
139.484 38.3438 li
139.547 38.3438 li
139.547 38.3438 li
139.609 38.3438 li
139.609 38.3438 li
139.672 37.7813 li
139.672 37.7813 li
139.734 37.7813 li
139.734 37.7813 li
139.797 37.7813 li
139.797 37.7813 li
139.859 37.2813 li
139.859 37.2813 li
139.922 37.2813 li
139.922 37.2813 li
139.922 37.2813 li
139.984 36.7188 li
139.984 36.7188 li
140.047 36.7188 li
140.047 36.7188 li
140.109 36.7188 li
140.109 36.2188 li
140.172 36.2188 li
140.172 36.2188 li
140.234 36.2188 li
140.234 35.6563 li
140.297 35.6563 li
140.297 35.6563 li
140.359 35.6563 li
140.359 35.0938 li
140.359 35.0938 li
140.422 35.0938 li
140.422 35.0938 li
140.484 34.5938 li
140.484 34.5938 li
140.547 34.5938 li
140.547 34.5938 li
140.609 34.5938 li
140.609 34.5938 li
140.672 34.0313 li
140.672 34.0313 li
140.734 34.0313 li
140.734 34.0313 li
140.797 34.0313 li
140.797 33.5313 li
140.859 33.5313 li
140.859 33.5313 li
140.859 33.5313 li
140.922 33.5313 li
140.922 33.5313 li
140.984 33.5313 li
140.984 32.9688 li
141.047 32.9688 li
141.047 32.9688 li
141.109 32.9688 li
141.109 32.9688 li
141.172 32.9688 li
141.172 32.9688 li
141.234 32.9688 li
141.234 32.9688 li
141.297 32.9688 li
141.297 32.9688 li
141.297 32.9688 li
141.359 32.9688 li
141.359 32.9688 li
141.422 32.9688 li
141.422 32.9688 li
141.484 32.9688 li
141.484 32.9688 li
141.547 32.9688 li
141.547 32.9688 li
141.609 32.9688 li
141.609 32.9688 li
141.672 32.9688 li
141.672 32.9688 li
141.734 32.9688 li
141.734 32.9688 li
141.734 32.9688 li
141.797 32.9688 li
141.797 33.5313 li
141.859 33.5313 li
141.859 33.5313 li
141.922 33.5313 li
141.922 33.5313 li
141.984 33.5313 li
141.984 33.5313 li
142.047 33.5313 li
142.047 34.0313 li
142.109 34.0313 li
142.109 34.0313 li
142.172 34.0313 li
142.172 34.0313 li
142.234 34.0313 li
142.234 34.5938 li
142.234 34.5938 li
142.297 34.5938 li
142.297 34.5938 li
142.359 34.5938 li
142.359 35.0938 li
142.422 35.0938 li
142.422 35.0938 li
142.484 35.0938 li
142.484 35.0938 li
142.547 35.6563 li
142.547 35.6563 li
142.609 35.6563 li
142.609 35.6563 li
142.672 35.6563 li
142.672 36.2188 li
142.672 36.2188 li
142.734 36.2188 li
142.734 36.2188 li
142.797 36.2188 li
142.797 36.7188 li
142.859 36.7188 li
142.859 36.7188 li
142.922 36.7188 li
142.922 36.7188 li
142.984 36.7188 li
142.984 37.2813 li
143.047 37.2813 li
143.047 37.2813 li
143.109 37.2813 li
143.109 37.2813 li
143.172 37.2813 li
143.172 37.7813 li
143.172 37.7813 li
143.234 37.7813 li
143.234 37.7813 li
143.297 37.7813 li
143.297 37.7813 li
143.359 37.7813 li
143.359 37.7813 li
143.422 38.3438 li
143.422 38.3438 li
143.484 38.3438 li
143.484 38.3438 li
143.547 38.3438 li
143.547 38.3438 li
143.609 38.3438 li
143.609 38.3438 li
143.609 38.3438 li
143.672 38.3438 li
143.672 38.3438 li
143.734 38.3438 li
143.734 38.3438 li
143.797 38.3438 li
143.797 38.3438 li
143.859 38.3438 li
143.859 38.3438 li
143.922 38.3438 li
143.922 38.3438 li
143.984 38.3438 li
143.984 38.3438 li
144.047 38.3438 li
144.047 38.3438 li
144.109 38.3438 li
144.109 37.7813 li
144.109 37.7813 li
144.172 37.7813 li
144.172 37.7813 li
144.234 37.7813 li
144.234 37.7813 li
144.297 37.7813 li
144.297 37.7813 li
144.359 37.2813 li
144.359 37.2813 li
144.422 37.2813 li
144.422 37.2813 li
144.484 37.2813 li
144.484 37.2813 li
144.547 36.7188 li
144.547 36.7188 li
144.547 36.7188 li
144.609 36.7188 li
144.609 36.7188 li
144.672 36.2188 li
144.672 36.2188 li
144.734 36.2188 li
144.734 36.2188 li
144.797 36.2188 li
144.797 35.6563 li
144.859 35.6563 li
144.859 35.6563 li
144.922 35.6563 li
144.922 35.6563 li
144.984 35.0938 li
144.984 35.0938 li
144.984 35.0938 li
145.047 35.0938 li
145.047 35.0938 li
145.109 34.5938 li
145.109 34.5938 li
145.172 34.5938 li
145.172 34.5938 li
145.234 34.5938 li
145.234 34.0313 li
145.297 34.0313 li
145.297 34.0313 li
145.359 34.0313 li
145.359 34.0313 li
145.422 34.0313 li
145.422 33.5313 li
145.484 33.5313 li
145.484 33.5313 li
145.484 33.5313 li
145.547 33.5313 li
145.547 33.5313 li
145.609 33.5313 li
145.609 33.5313 li
145.672 32.9688 li
145.672 32.9688 li
145.734 32.9688 li
145.734 32.9688 li
145.797 32.9688 li
145.797 32.9688 li
145.859 32.9688 li
145.859 32.9688 li
145.922 32.9688 li
145.922 32.9688 li
145.922 32.9688 li
145.984 32.9688 li
145.984 32.9688 li
146.047 32.9688 li
146.047 32.9688 li
146.109 32.9688 li
146.109 32.9688 li
146.172 32.9688 li
146.172 32.9688 li
146.234 32.9688 li
146.234 32.9688 li
146.297 32.9688 li
146.297 32.9688 li
146.359 32.9688 li
146.359 32.9688 li
146.422 32.9688 li
146.422 32.9688 li
146.422 33.5313 li
146.484 33.5313 li
146.484 33.5313 li
146.547 33.5313 li
146.547 33.5313 li
146.609 33.5313 li
146.609 33.5313 li
146.672 33.5313 li
146.672 34.0313 li
146.734 34.0313 li
146.734 34.0313 li
146.797 34.0313 li
146.797 34.0313 li
146.859 34.0313 li
146.859 34.5938 li
146.859 34.5938 li
146.922 34.5938 li
146.922 34.5938 li
146.984 34.5938 li
146.984 34.5938 li
147.047 35.0938 li
147.047 35.0938 li
147.109 35.0938 li
147.109 35.0938 li
147.172 35.0938 li
147.172 35.6563 li
147.234 35.6563 li
147.234 35.6563 li
147.297 35.6563 li
147.297 35.6563 li
147.297 35.6563 li
147.359 36.2188 li
147.359 36.2188 li
147.422 36.2188 li
147.422 36.2188 li
147.484 36.2188 li
147.484 36.7188 li
147.547 36.7188 li
147.547 36.7188 li
147.609 36.7188 li
147.609 36.7188 li
147.672 36.7188 li
147.672 36.7188 li
147.734 37.2813 li
147.734 37.2813 li
147.797 37.2813 li
147.797 37.2813 li
147.797 37.2813 li
147.859 37.2813 li
147.859 37.2813 li
147.922 37.2813 li
147.922 37.7813 li
147.984 37.7813 li
147.984 37.7813 li
148.047 37.7813 li
148.047 37.7813 li
148.109 37.7813 li
148.109 37.7813 li
148.172 37.7813 li
148.172 37.7813 li
148.234 37.7813 li
148.234 37.7813 li
148.234 37.7813 li
148.297 37.7813 li
148.297 37.7813 li
148.359 37.7813 li
148.359 37.7813 li
148.422 37.7813 li
148.422 37.7813 li
148.484 37.7813 li
148.484 37.7813 li
148.547 37.7813 li
148.547 37.7813 li
148.609 37.7813 li
148.609 37.7813 li
148.672 37.7813 li
148.672 37.7813 li
148.734 37.7813 li
148.734 37.7813 li
148.734 37.7813 li
148.797 37.7813 li
148.797 37.7813 li
148.859 37.2813 li
148.859 37.2813 li
148.922 37.2813 li
148.922 37.2813 li
148.984 37.2813 li
148.984 37.2813 li
149.047 36.7188 li
149.047 36.7188 li
149.109 36.7188 li
149.109 36.7188 li
149.172 36.7188 li
149.172 36.7188 li
149.172 36.7188 li
149.234 36.2188 li
149.234 36.2188 li
149.297 36.2188 li
149.297 36.2188 li
149.359 36.2188 li
149.359 35.6563 li
149.422 35.6563 li
149.422 35.6563 li
149.484 35.6563 li
149.484 35.6563 li
149.547 35.0938 li
149.547 35.0938 li
149.609 35.0938 li
149.609 35.0938 li
149.672 35.0938 li
149.672 35.0938 li
149.672 34.5938 li
149.734 34.5938 li
149.734 34.5938 li
149.797 34.5938 li
149.797 34.5938 li
149.859 34.5938 li
149.859 34.0313 li
149.922 34.0313 li
149.922 34.0313 li
149.984 34.0313 li
149.984 34.0313 li
150.047 34.0313 li
150.047 33.5313 li
150.109 33.5313 li
150.109 33.5313 li
150.109 33.5313 li
150.172 33.5313 li
150.172 33.5313 li
150.234 33.5313 li
150.234 33.5313 li
150.297 33.5313 li
150.297 32.9688 li
150.359 32.9688 li
150.359 32.9688 li
150.422 32.9688 li
150.422 32.9688 li
150.484 32.9688 li
150.484 32.9688 li
150.547 32.9688 li
150.547 32.9688 li
150.547 32.9688 li
150.609 32.9688 li
150.609 32.9688 li
150.672 32.9688 li
150.672 32.9688 li
150.734 32.9688 li
150.734 32.9688 li
150.797 32.9688 li
150.797 32.9688 li
150.859 32.9688 li
150.859 32.9688 li
150.922 32.9688 li
150.922 32.9688 li
150.984 32.9688 li
150.984 32.9688 li
151.047 33.5313 li
151.047 33.5313 li
151.047 33.5313 li
151.109 33.5313 li
151.109 33.5313 li
151.172 33.5313 li
151.172 33.5313 li
151.234 33.5313 li
151.234 33.5313 li
151.297 33.5313 li
151.297 34.0313 li
151.359 34.0313 li
151.359 34.0313 li
151.422 34.0313 li
151.422 34.0313 li
151.484 34.0313 li
151.484 34.0313 li
151.484 34.5938 li
151.547 34.5938 li
151.547 34.5938 li
151.609 34.5938 li
151.609 34.5938 li
151.672 34.5938 li
151.672 35.0938 li
151.734 35.0938 li
151.734 35.0938 li
151.797 35.0938 li
151.797 35.0938 li
151.859 35.0938 li
151.859 35.6563 li
151.922 35.6563 li
151.922 35.6563 li
151.984 35.6563 li
151.984 35.6563 li
151.984 35.6563 li
152.047 36.2188 li
152.047 36.2188 li
152.109 36.2188 li
152.109 36.2188 li
152.172 36.2188 li
152.172 36.2188 li
152.234 36.7188 li
152.234 36.7188 li
152.297 36.7188 li
152.297 36.7188 li
152.359 36.7188 li
152.359 36.7188 li
152.422 36.7188 li
152.422 37.2813 li
152.422 37.2813 li
152.484 37.2813 li
152.484 37.2813 li
152.547 37.2813 li
152.547 37.2813 li
152.609 37.2813 li
152.609 37.2813 li
152.672 37.2813 li
152.672 37.2813 li
152.734 37.2813 li
152.734 37.7813 li
152.797 37.7813 li
152.797 37.7813 li
152.859 37.7813 li
152.859 37.7813 li
152.859 37.7813 li
152.922 37.7813 li
152.922 37.7813 li
152.984 37.7813 li
152.984 37.7813 li
153.047 37.7813 li
153.047 37.7813 li
153.109 37.7813 li
153.109 37.7813 li
153.172 37.7813 li
153.172 37.7813 li
153.234 37.7813 li
153.234 37.7813 li
153.297 37.7813 li
153.297 37.7813 li
153.359 37.2813 li
153.359 37.2813 li
153.359 37.2813 li
153.422 37.2813 li
153.422 37.2813 li
153.484 37.2813 li
153.484 37.2813 li
153.547 37.2813 li
153.547 37.2813 li
153.609 36.7188 li
153.609 36.7188 li
153.672 36.7188 li
153.672 36.7188 li
153.734 36.7188 li
153.734 36.7188 li
153.797 36.7188 li
153.797 36.2188 li
153.797 36.2188 li
153.859 36.2188 li
153.859 36.2188 li
153.922 36.2188 li
153.922 36.2188 li
153.984 35.6563 li
153.984 35.6563 li
154.047 35.6563 li
154.047 35.6563 li
154.109 35.6563 li
154.109 35.6563 li
154.172 35.0938 li
154.172 35.0938 li
154.234 35.0938 li
154.234 35.0938 li
154.297 35.0938 li
154.297 35.0938 li
154.297 34.5938 li
154.359 34.5938 li
154.359 34.5938 li
154.422 34.5938 li
154.422 34.5938 li
154.484 34.5938 li
154.484 34.0313 li
154.547 34.0313 li
154.547 34.0313 li
154.609 34.0313 li
154.609 34.0313 li
154.672 34.0313 li
154.672 34.0313 li
154.734 33.5313 li
154.734 33.5313 li
154.734 33.5313 li
154.797 33.5313 li
154.797 33.5313 li
154.859 33.5313 li
154.859 33.5313 li
154.922 33.5313 li
154.922 32.9688 li
154.984 32.9688 li
154.984 32.9688 li
155.047 32.9688 li
155.047 32.9688 li
155.109 32.9688 li
155.109 32.9688 li
155.172 32.9688 li
155.172 32.9688 li
155.234 32.9688 li
155.234 32.9688 li
155.234 32.9688 li
155.297 32.9688 li
155.297 32.9688 li
155.359 32.9688 li
155.359 32.9688 li
155.422 32.9688 li
155.422 32.9688 li
155.484 32.9688 li
155.484 32.9688 li
155.547 32.9688 li
155.547 32.9688 li
155.609 32.9688 li
155.609 32.9688 li
155.672 32.9688 li
155.672 33.5313 li
155.672 33.5313 li
155.734 33.5313 li
155.734 33.5313 li
155.797 33.5313 li
155.797 33.5313 li
155.859 33.5313 li
155.859 33.5313 li
155.922 33.5313 li
155.922 33.5313 li
155.984 34.0313 li
155.984 34.0313 li
156.047 34.0313 li
156.047 34.0313 li
156.109 34.0313 li
156.109 34.0313 li
156.109 34.0313 li
156.172 34.5938 li
156.172 34.5938 li
156.234 34.5938 li
156.234 34.5938 li
156.297 34.5938 li
156.297 34.5938 li
156.359 35.0938 li
156.359 35.0938 li
156.422 35.0938 li
156.422 35.0938 li
156.484 35.0938 li
156.484 35.0938 li
156.547 35.0938 li
156.547 35.6563 li
156.609 35.6563 li
156.609 35.6563 li
156.609 35.6563 li
156.672 35.6563 li
156.672 35.6563 li
156.734 36.2188 li
156.734 36.2188 li
156.797 36.2188 li
156.797 36.2188 li
156.859 36.2188 li
156.859 36.2188 li
156.922 36.7188 li
156.922 36.7188 li
156.984 36.7188 li
156.984 36.7188 li
157.047 36.7188 li
157.047 36.7188 li
157.047 36.7188 li
157.109 37.2813 li
157.109 37.2813 li
157.172 37.2813 li
157.172 37.2813 li
157.234 37.2813 li
157.234 37.2813 li
157.297 37.2813 li
157.297 37.2813 li
157.359 37.2813 li
157.359 37.2813 li
157.422 37.2813 li
157.422 37.2813 li
157.484 37.2813 li
157.484 37.2813 li
157.547 37.2813 li
157.547 37.2813 li
157.547 37.2813 li
157.609 37.2813 li
157.609 37.2813 li
157.672 37.2813 li
157.672 37.2813 li
157.734 37.2813 li
157.734 37.2813 li
157.797 37.2813 li
157.797 37.2813 li
157.859 37.2813 li
157.859 37.2813 li
157.922 37.2813 li
157.922 37.2813 li
157.984 37.2813 li
157.984 37.2813 li
157.984 37.2813 li
158.047 37.2813 li
158.047 37.2813 li
158.109 37.2813 li
158.109 36.7188 li
158.172 36.7188 li
158.172 36.7188 li
158.234 36.7188 li
158.234 36.7188 li
158.297 36.7188 li
158.297 36.7188 li
158.359 36.7188 li
158.359 36.2188 li
158.422 36.2188 li
158.422 36.2188 li
158.422 36.2188 li
158.484 36.2188 li
158.484 36.2188 li
158.547 35.6563 li
158.547 35.6563 li
158.609 35.6563 li
158.609 35.6563 li
158.672 35.6563 li
158.672 35.0938 li
158.734 35.0938 li
158.734 35.0938 li
158.797 35.0938 li
158.797 35.0938 li
158.859 35.0938 li
158.859 35.0938 li
158.922 34.5938 li
158.922 34.5938 li
158.922 34.5938 li
158.984 34.5938 li
158.984 34.5938 li
159.047 34.0313 li
159.047 34.0313 li
159.109 34.0313 li
159.109 34.0313 li
159.172 34.0313 li
159.172 34.0313 li
159.234 34.0313 li
159.234 34.0313 li
159.297 33.5313 li
159.297 33.5313 li
159.359 33.5313 li
159.359 33.5313 li
159.359 33.5313 li
159.422 33.5313 li
159.422 33.5313 li
159.484 32.9688 li
159.484 32.9688 li
159.547 32.9688 li
159.547 32.9688 li
159.609 32.9688 li
159.609 32.9688 li
159.672 32.9688 li
159.672 32.9688 li
159.734 32.9688 li
159.734 32.9688 li
159.797 32.9688 li
159.797 32.9688 li
159.859 32.9688 li
159.859 32.9688 li
159.859 32.9688 li
159.922 32.9688 li
159.922 32.9688 li
159.984 32.9688 li
159.984 32.9688 li
160.047 32.9688 li
160.047 32.9688 li
160.109 32.9688 li
160.109 32.9688 li
160.172 32.9688 li
160.172 32.9688 li
160.234 32.9688 li
160.234 32.9688 li
160.297 32.9688 li
160.297 32.9688 li
160.297 32.9688 li
160.359 32.9688 li
160.359 33.5313 li
160.422 33.5313 li
160.422 33.5313 li
160.484 33.5313 li
160.484 33.5313 li
160.547 33.5313 li
160.547 33.5313 li
160.609 33.5313 li
160.609 33.5313 li
160.672 34.0313 li
160.672 34.0313 li
160.734 34.0313 li
160.734 34.0313 li
160.797 34.0313 li
160.797 34.0313 li
160.797 34.5938 li
160.859 34.5938 li
160.859 34.5938 li
160.922 34.5938 li
160.922 34.5938 li
160.984 34.5938 li
160.984 34.5938 li
161.047 35.0938 li
161.047 35.0938 li
161.109 35.0938 li
161.109 35.0938 li
161.172 35.0938 li
161.172 35.0938 li
161.234 35.6563 li
161.234 35.6563 li
161.234 35.6563 li
161.297 35.6563 li
161.297 35.6563 li
161.359 35.6563 li
161.359 36.2188 li
161.422 36.2188 li
161.422 36.2188 li
161.484 36.2188 li
161.484 36.2188 li
161.547 36.2188 li
161.547 36.2188 li
161.609 36.7188 li
161.609 36.7188 li
161.672 36.7188 li
161.672 36.7188 li
161.672 36.7188 li
161.734 36.7188 li
161.734 36.7188 li
161.797 36.7188 li
161.797 36.7188 li
161.859 37.2813 li
161.859 37.2813 li
161.922 37.2813 li
161.922 37.2813 li
161.984 37.2813 li
161.984 37.2813 li
162.047 37.2813 li
162.047 37.2813 li
162.109 37.2813 li
162.109 37.2813 li
162.172 37.2813 li
162.172 37.2813 li
162.172 37.2813 li
162.234 37.2813 li
162.234 37.2813 li
162.297 37.2813 li
162.297 37.2813 li
162.359 37.2813 li
162.359 37.2813 li
162.422 37.2813 li
162.422 37.2813 li
162.484 37.2813 li
162.484 37.2813 li
162.547 37.2813 li
162.547 37.2813 li
162.609 37.2813 li
162.609 36.7188 li
162.609 36.7188 li
162.672 36.7188 li
162.672 36.7188 li
162.734 36.7188 li
162.734 36.7188 li
162.797 36.7188 li
162.797 36.7188 li
162.859 36.7188 li
162.859 36.7188 li
162.922 36.2188 li
162.922 36.2188 li
162.984 36.2188 li
162.984 36.2188 li
163.047 36.2188 li
163.047 36.2188 li
163.109 36.2188 li
163.109 35.6563 li
163.109 35.6563 li
163.172 35.6563 li
163.172 35.6563 li
163.234 35.6563 li
163.234 35.0938 li
163.297 35.0938 li
163.297 35.0938 li
163.359 35.0938 li
163.359 35.0938 li
163.422 35.0938 li
163.422 34.5938 li
163.484 34.5938 li
163.484 34.5938 li
163.547 34.5938 li
163.547 34.5938 li
163.547 34.5938 li
163.609 34.0313 li
163.609 34.0313 li
163.672 34.0313 li
163.672 34.0313 li
163.734 34.0313 li
163.734 34.0313 li
163.797 34.0313 li
163.797 33.5313 li
163.859 33.5313 li
163.859 33.5313 li
163.922 33.5313 li
163.922 33.5313 li
163.984 33.5313 li
163.984 33.5313 li
164.047 33.5313 li
164.047 32.9688 li
164.047 32.9688 li
164.109 32.9688 li
164.109 32.9688 li
164.172 32.9688 li
164.172 32.9688 li
164.234 32.9688 li
164.234 32.9688 li
164.297 32.9688 li
164.297 32.9688 li
164.359 32.9688 li
164.359 32.9688 li
164.422 32.9688 li
164.422 32.9688 li
164.484 32.9688 li
164.484 32.9688 li
164.484 32.9688 li
164.547 32.9688 li
164.547 32.9688 li
164.609 32.9688 li
164.609 32.9688 li
164.672 32.9688 li
164.672 32.9688 li
164.734 32.9688 li
164.734 32.9688 li
164.797 32.9688 li
164.797 32.9688 li
164.859 32.9688 li
164.859 32.9688 li
164.922 32.9688 li
164.922 32.9688 li
164.922 32.9688 li
164.984 32.9688 li
164.984 32.9688 li
165.047 33.5313 li
165.047 33.5313 li
165.109 33.5313 li
165.109 33.5313 li
165.172 33.5313 li
165.172 33.5313 li
165.234 33.5313 li
165.234 33.5313 li
165.297 33.5313 li
165.297 34.0313 li
165.359 34.0313 li
165.359 34.0313 li
165.422 34.0313 li
165.422 34.0313 li
165.422 34.0313 li
165.484 34.5938 li
165.484 34.5938 li
165.547 34.5938 li
165.547 34.5938 li
165.609 34.5938 li
165.609 34.5938 li
165.672 34.5938 li
165.672 35.0938 li
165.734 35.0938 li
165.734 35.0938 li
165.797 35.0938 li
165.797 35.0938 li
165.859 35.6563 li
165.859 35.6563 li
165.859 35.6563 li
165.922 35.6563 li
165.922 35.6563 li
165.984 35.6563 li
165.984 35.6563 li
166.047 36.2188 li
166.047 36.2188 li
166.109 36.2188 li
166.109 36.2188 li
166.172 36.2188 li
166.172 36.2188 li
166.234 36.2188 li
166.234 36.7188 li
166.297 36.7188 li
166.297 36.7188 li
166.359 36.7188 li
166.359 36.7188 li
166.359 36.7188 li
166.422 36.7188 li
166.422 36.7188 li
166.484 36.7188 li
166.484 36.7188 li
166.547 36.7188 li
166.547 37.2813 li
166.609 37.2813 li
166.609 37.2813 li
166.672 37.2813 li
166.672 37.2813 li
166.734 37.2813 li
166.734 37.2813 li
166.797 37.2813 li
166.797 37.2813 li
166.797 37.2813 li
166.859 37.2813 li
166.859 37.2813 li
166.922 37.2813 li
166.922 37.2813 li
166.984 37.2813 li
166.984 37.2813 li
167.047 37.2813 li
167.047 37.2813 li
167.109 37.2813 li
167.109 36.7188 li
167.172 36.7188 li
167.172 36.7188 li
167.234 36.7188 li
167.234 36.7188 li
167.234 36.7188 li
167.297 36.7188 li
167.297 36.7188 li
167.359 36.7188 li
167.359 36.7188 li
167.422 36.2188 li
167.422 36.2188 li
167.484 36.2188 li
167.484 36.2188 li
167.547 36.2188 li
167.547 36.2188 li
167.609 36.2188 li
167.609 36.2188 li
167.672 35.6563 li
167.672 35.6563 li
167.734 35.6563 li
167.734 35.6563 li
167.734 35.6563 li
167.797 35.6563 li
167.797 35.0938 li
167.859 35.0938 li
167.859 35.0938 li
167.922 35.0938 li
167.922 35.0938 li
167.984 35.0938 li
167.984 34.5938 li
168.047 34.5938 li
168.047 34.5938 li
168.109 34.5938 li
168.109 34.5938 li
168.172 34.5938 li
168.172 34.0313 li
168.172 34.0313 li
168.234 34.0313 li
168.234 34.0313 li
168.297 34.0313 li
168.297 34.0313 li
168.359 34.0313 li
168.359 33.5313 li
168.422 33.5313 li
168.422 33.5313 li
168.484 33.5313 li
168.484 33.5313 li
168.547 33.5313 li
168.547 33.5313 li
168.609 33.5313 li
168.609 32.9688 li
168.672 32.9688 li
168.672 32.9688 li
168.672 32.9688 li
168.734 32.9688 li
168.734 32.9688 li
168.797 32.9688 li
168.797 32.9688 li
168.859 32.9688 li
168.859 32.9688 li
168.922 32.9688 li
168.922 32.9688 li
168.984 32.9688 li
168.984 32.9688 li
169.047 32.4063 li
169.047 32.4063 li
169.109 32.4063 li
169.109 32.4063 li
169.109 32.4063 li
169.172 32.4063 li
169.172 32.4063 li
169.234 32.4063 li
169.234 32.4063 li
169.297 32.4063 li
169.297 32.9688 li
169.359 32.9688 li
169.359 32.9688 li
169.422 32.9688 li
169.422 32.9688 li
169.484 32.9688 li
169.484 32.9688 li
169.547 32.9688 li
169.547 32.9688 li
169.609 32.9688 li
169.609 32.9688 li
169.609 32.9688 li
169.672 32.9688 li
169.672 33.5313 li
169.734 33.5313 li
169.734 33.5313 li
169.797 33.5313 li
169.797 33.5313 li
169.859 33.5313 li
169.859 33.5313 li
169.922 33.5313 li
169.922 34.0313 li
169.984 34.0313 li
169.984 34.0313 li
170.047 34.0313 li
170.047 34.0313 li
170.047 34.0313 li
170.109 34.0313 li
170.109 34.5938 li
170.172 34.5938 li
170.172 34.5938 li
170.234 34.5938 li
170.234 34.5938 li
170.297 34.5938 li
170.297 35.0938 li
170.359 35.0938 li
170.359 35.0938 li
170.422 35.0938 li
170.422 35.0938 li
170.484 35.0938 li
170.484 35.6563 li
170.484 35.6563 li
170.547 35.6563 li
170.547 35.6563 li
170.609 35.6563 li
170.609 35.6563 li
170.672 35.6563 li
170.672 36.2188 li
170.734 36.2188 li
170.734 36.2188 li
170.797 36.2188 li
170.797 36.2188 li
170.859 36.2188 li
170.859 36.2188 li
170.922 36.2188 li
170.922 36.2188 li
170.984 36.7188 li
170.984 36.7188 li
170.984 36.7188 li
171.047 36.7188 li
171.047 36.7188 li
171.109 36.7188 li
171.109 36.7188 li
171.172 36.7188 li
171.172 36.7188 li
171.234 36.7188 li
171.234 36.7188 li
171.297 36.7188 li
171.297 36.7188 li
171.359 36.7188 li
171.359 36.7188 li
171.422 36.7188 li
171.422 36.7188 li
171.422 36.7188 li
171.484 36.7188 li
171.484 36.7188 li
171.547 36.7188 li
171.547 36.7188 li
171.609 36.7188 li
171.609 36.7188 li
171.672 36.7188 li
171.672 36.7188 li
171.734 36.7188 li
171.734 36.7188 li
171.797 36.7188 li
171.797 36.7188 li
171.859 36.7188 li
171.859 36.7188 li
171.922 36.7188 li
171.922 36.7188 li
171.922 36.2188 li
171.984 36.2188 li
171.984 36.2188 li
172.047 36.2188 li
172.047 36.2188 li
172.109 36.2188 li
172.109 36.2188 li
172.172 35.6563 li
172.172 35.6563 li
172.234 35.6563 li
172.234 35.6563 li
172.297 35.6563 li
172.297 35.6563 li
172.359 35.6563 li
172.359 35.6563 li
172.359 35.0938 li
172.422 35.0938 li
172.422 35.0938 li
172.484 35.0938 li
172.484 35.0938 li
172.547 35.0938 li
172.547 34.5938 li
172.609 34.5938 li
172.609 34.5938 li
172.672 34.5938 li
172.672 34.5938 li
172.734 34.5938 li
172.734 34.0313 li
172.797 34.0313 li
172.797 34.0313 li
172.797 34.0313 li
172.859 34.0313 li
172.859 34.0313 li
172.922 34.0313 li
172.922 33.5313 li
172.984 33.5313 li
172.984 33.5313 li
173.047 33.5313 li
173.047 33.5313 li
173.109 33.5313 li
173.109 33.5313 li
173.172 32.9688 li
173.172 32.9688 li
173.234 32.9688 li
173.234 32.9688 li
173.297 32.9688 li
173.297 32.9688 li
173.297 32.9688 li
173.359 32.9688 li
173.359 32.9688 li
173.422 32.9688 li
173.422 32.9688 li
173.484 32.9688 li
173.484 32.4063 li
173.547 32.4063 li
173.547 32.4063 li
173.609 32.4063 li
173.609 32.4063 li
173.672 32.4063 li
173.672 32.4063 li
173.734 32.4063 li
173.734 32.4063 li
173.734 32.4063 li
173.797 32.4063 li
173.797 32.4063 li
173.859 32.4063 li
173.859 32.4063 li
173.922 32.4063 li
173.922 32.4063 li
173.984 32.4063 li
173.984 32.9688 li
174.047 32.9688 li
174.047 32.9688 li
174.109 32.9688 li
174.109 32.9688 li
174.172 32.9688 li
174.172 32.9688 li
174.234 32.9688 li
174.234 32.9688 li
174.234 32.9688 li
174.297 33.5313 li
174.297 33.5313 li
174.359 33.5313 li
174.359 33.5313 li
174.422 33.5313 li
174.422 33.5313 li
174.484 33.5313 li
174.484 33.5313 li
174.547 33.5313 li
174.547 34.0313 li
174.609 34.0313 li
174.609 34.0313 li
174.672 34.0313 li
174.672 34.0313 li
174.672 34.0313 li
174.734 34.0313 li
174.734 34.5938 li
174.797 34.5938 li
174.797 34.5938 li
174.859 34.5938 li
174.859 34.5938 li
174.922 34.5938 li
174.922 34.5938 li
174.984 35.0938 li
174.984 35.0938 li
175.047 35.0938 li
175.047 35.0938 li
175.109 35.0938 li
175.109 35.6563 li
175.172 35.6563 li
175.172 35.6563 li
175.172 35.6563 li
175.234 35.6563 li
175.234 35.6563 li
175.297 35.6563 li
175.297 36.2188 li
175.359 36.2188 li
175.359 36.2188 li
175.422 36.2188 li
175.422 36.2188 li
175.484 36.2188 li
175.484 36.2188 li
175.547 36.2188 li
175.547 36.2188 li
175.609 36.2188 li
175.609 36.2188 li
175.609 36.7188 li
175.672 36.7188 li
175.672 36.7188 li
175.734 36.7188 li
175.734 36.7188 li
175.797 36.7188 li
175.797 36.7188 li
175.859 36.7188 li
175.859 36.7188 li
175.922 36.7188 li
175.922 36.7188 li
175.984 36.7188 li
175.984 36.7188 li
176.047 36.7188 li
176.047 36.7188 li
176.047 36.7188 li
176.109 36.7188 li
176.109 36.7188 li
176.172 36.7188 li
176.172 36.7188 li
176.234 36.7188 li
176.234 36.7188 li
176.297 36.7188 li
176.297 36.7188 li
176.359 36.7188 li
176.359 36.7188 li
176.422 36.7188 li
176.422 36.7188 li
176.484 36.7188 li
176.484 36.2188 li
176.547 36.2188 li
176.547 36.2188 li
176.547 36.2188 li
176.609 36.2188 li
176.609 36.2188 li
176.672 36.2188 li
176.672 36.2188 li
176.734 35.6563 li
176.734 35.6563 li
176.797 35.6563 li
176.797 35.6563 li
176.859 35.6563 li
176.859 35.6563 li
176.922 35.6563 li
176.922 35.0938 li
176.984 35.0938 li
176.984 35.0938 li
176.984 35.0938 li
177.047 35.0938 li
177.047 35.0938 li
177.109 35.0938 li
177.109 34.5938 li
177.172 34.5938 li
177.172 34.5938 li
177.234 34.5938 li
177.234 34.5938 li
177.297 34.5938 li
177.297 34.0313 li
177.359 34.0313 li
177.359 34.0313 li
177.422 34.0313 li
177.422 34.0313 li
177.484 34.0313 li
177.484 33.5313 li
177.484 33.5313 li
177.547 33.5313 li
177.547 33.5313 li
177.609 33.5313 li
177.609 33.5313 li
177.672 33.5313 li
177.672 33.5313 li
177.734 32.9688 li
177.734 32.9688 li
177.797 32.9688 li
177.797 32.9688 li
177.859 32.9688 li
177.859 32.9688 li
177.922 32.9688 li
177.922 32.9688 li
177.922 32.9688 li
177.984 32.9688 li
177.984 32.9688 li
178.047 32.4063 li
178.047 32.4063 li
178.109 32.4063 li
178.109 32.4063 li
178.172 32.4063 li
178.172 32.4063 li
178.234 32.4063 li
178.234 32.4063 li
178.297 32.4063 li
178.297 32.4063 li
178.359 32.4063 li
178.359 32.4063 li
178.422 32.4063 li
178.422 32.4063 li
178.422 32.4063 li
178.484 32.4063 li
178.484 32.4063 li
178.547 32.4063 li
178.547 32.4063 li
178.609 32.9688 li
178.609 32.9688 li
178.672 32.9688 li
178.672 32.9688 li
178.734 32.9688 li
178.734 32.9688 li
178.797 32.9688 li
178.797 32.9688 li
178.859 32.9688 li
178.859 32.9688 li
178.859 32.9688 li
178.922 32.9688 li
178.922 33.5313 li
178.984 33.5313 li
178.984 33.5313 li
179.047 33.5313 li
179.047 33.5313 li
179.109 33.5313 li
179.109 33.5313 li
179.172 33.5313 li
179.172 34.0313 li
179.234 34.0313 li
179.234 34.0313 li
179.297 34.0313 li
179.297 34.0313 li
179.297 34.0313 li
179.359 34.0313 li
179.359 34.5938 li
179.422 34.5938 li
179.422 34.5938 li
179.484 34.5938 li
179.484 34.5938 li
179.547 34.5938 li
179.547 35.0938 li
179.609 35.0938 li
179.609 35.0938 li
179.672 35.0938 li
179.672 35.0938 li
179.734 35.0938 li
179.734 35.0938 li
179.797 35.6563 li
179.797 35.6563 li
179.797 35.6563 li
179.859 35.6563 li
179.859 35.6563 li
179.922 35.6563 li
179.922 35.6563 li
179.984 35.6563 li
179.984 36.2188 li
180.047 36.2188 li
180.047 36.2188 li
180.109 36.2188 li
180.109 36.2188 li
180.172 36.2188 li
180.172 36.2188 li
180.234 36.2188 li
180.234 36.2188 li
180.234 36.2188 li
180.297 36.7188 li
180.297 36.7188 li
180.359 36.7188 li
180.359 36.7188 li
180.422 36.7188 li
180.422 36.7188 li
180.484 36.7188 li
180.484 36.7188 li
180.547 36.7188 li
180.547 36.7188 li
180.609 36.7188 li
180.609 36.7188 li
180.672 36.7188 li
180.672 36.7188 li
180.734 36.7188 li
180.734 36.7188 li
180.734 36.7188 li
180.797 36.7188 li
180.797 36.7188 li
180.859 36.7188 li
180.859 36.7188 li
180.922 36.2188 li
180.922 36.7188 li
180.984 36.2188 li
180.984 36.2188 li
181.047 36.2188 li
181.047 36.2188 li
181.109 36.2188 li
181.109 36.2188 li
181.172 36.2188 li
181.172 36.2188 li
181.172 36.2188 li
181.234 36.2188 li
181.234 36.2188 li
181.297 35.6563 li
181.297 35.6563 li
181.359 35.6563 li
181.359 35.6563 li
181.422 35.6563 li
181.422 35.6563 li
181.484 35.6563 li
181.484 35.0938 li
181.547 35.0938 li
181.547 35.0938 li
181.609 35.0938 li
181.609 35.0938 li
181.609 35.0938 li
181.672 34.5938 li
181.672 34.5938 li
181.734 34.5938 li
181.734 34.5938 li
181.797 34.5938 li
181.797 34.5938 li
181.859 34.0313 li
181.859 34.0313 li
181.922 34.0313 li
181.922 34.0313 li
181.984 34.0313 li
181.984 34.0313 li
182.047 34.0313 li
182.047 33.5313 li
182.109 33.5313 li
182.109 33.5313 li
182.109 33.5313 li
182.172 33.5313 li
182.172 33.5313 li
182.234 33.5313 li
182.234 33.5313 li
182.297 33.5313 li
182.297 32.9688 li
182.359 32.9688 li
182.359 32.9688 li
182.422 32.9688 li
182.422 32.9688 li
182.484 32.9688 li
182.484 32.9688 li
182.547 32.9688 li
182.547 32.9688 li
182.547 32.9688 li
182.609 32.9688 li
182.609 32.4063 li
182.672 32.4063 li
182.672 32.4063 li
182.734 32.4063 li
182.734 32.4063 li
182.797 32.4063 li
182.797 32.4063 li
182.859 32.4063 li
182.859 32.4063 li
182.922 32.4063 li
182.922 32.4063 li
182.984 32.4063 li
182.984 32.4063 li
183.047 32.4063 li
183.047 32.4063 li
183.047 32.4063 li
183.109 32.4063 li
183.109 32.4063 li
183.172 32.4063 li
183.172 32.4063 li
183.234 32.9688 li
183.234 32.9688 li
183.297 32.9688 li
183.297 32.9688 li
183.359 32.9688 li
183.359 32.9688 li
183.422 32.9688 li
183.422 32.9688 li
183.484 32.9688 li
183.484 32.9688 li
183.484 32.9688 li
183.547 32.9688 li
183.547 33.5313 li
183.609 33.5313 li
183.609 33.5313 li
183.672 33.5313 li
183.672 33.5313 li
183.734 33.5313 li
183.734 33.5313 li
183.797 33.5313 li
183.797 34.0313 li
183.859 34.0313 li
183.859 34.0313 li
183.922 34.0313 li
183.922 34.0313 li
183.984 34.0313 li
183.984 34.5938 li
183.984 34.5938 li
184.047 34.5938 li
184.047 34.5938 li
184.109 34.5938 li
184.109 34.5938 li
184.172 34.5938 li
184.172 34.5938 li
184.234 35.0938 li
184.234 35.0938 li
184.297 35.0938 li
184.297 35.0938 li
184.359 35.0938 li
184.359 35.0938 li
184.422 35.6563 li
184.422 35.6563 li
184.422 35.6563 li
184.484 35.6563 li
184.484 35.6563 li
184.547 35.6563 li
184.547 35.6563 li
184.609 35.6563 li
184.609 36.2188 li
184.672 36.2188 li
184.672 36.2188 li
184.734 36.2188 li
184.734 36.2188 li
184.797 36.2188 li
184.797 36.2188 li
184.859 36.2188 li
184.859 36.2188 li
184.859 36.2188 li
184.922 36.2188 li
184.922 36.2188 li
184.984 36.2188 li
184.984 36.2188 li
185.047 36.7188 li
185.047 36.7188 li
185.109 36.7188 li
185.109 36.7188 li
185.172 36.7188 li
185.172 36.7188 li
185.234 36.7188 li
185.234 36.7188 li
185.297 36.7188 li
185.297 36.7188 li
185.359 36.7188 li
185.359 36.7188 li
185.359 36.2188 li
185.422 36.2188 li
185.422 36.2188 li
185.484 36.2188 li
185.484 36.2188 li
185.547 36.2188 li
185.547 36.2188 li
185.609 36.2188 li
185.609 36.2188 li
185.672 36.2188 li
185.672 36.2188 li
185.734 36.2188 li
185.734 36.2188 li
185.797 35.6563 li
185.797 35.6563 li
185.797 35.6563 li
185.859 35.6563 li
185.859 35.6563 li
185.922 35.6563 li
185.922 35.6563 li
185.984 35.6563 li
185.984 35.6563 li
186.047 35.6563 li
186.047 35.0938 li
186.109 35.0938 li
186.109 35.0938 li
186.172 35.0938 li
186.172 35.0938 li
186.234 35.0938 li
186.234 34.5938 li
186.297 34.5938 li
186.297 34.5938 li
186.297 34.5938 li
186.359 34.5938 li
186.359 34.5938 li
186.422 34.0313 li
186.422 34.0313 li
186.484 34.0313 li
186.484 34.0313 li
186.547 34.0313 li
186.547 34.0313 li
186.609 34.0313 li
186.609 34.0313 li
186.672 33.5313 li
186.672 33.5313 li
186.734 33.5313 li
186.734 33.5313 li
186.734 33.5313 li
186.797 33.5313 li
186.797 33.5313 li
186.859 32.9688 li
186.859 32.9688 li
186.922 32.9688 li
186.922 32.9688 li
186.984 32.9688 li
186.984 32.9688 li
187.047 32.9688 li
187.047 32.9688 li
187.109 32.9688 li
187.109 32.9688 li
187.172 32.9688 li
187.172 32.4063 li
187.172 32.4063 li
187.234 32.4063 li
187.234 32.4063 li
187.297 32.4063 li
187.297 32.4063 li
187.359 32.4063 li
187.359 32.4063 li
187.422 32.4063 li
187.422 32.4063 li
187.484 32.4063 li
187.484 32.4063 li
187.547 32.4063 li
187.547 32.4063 li
187.609 32.4063 li
187.609 32.4063 li
187.672 32.4063 li
187.672 32.4063 li
187.672 32.4063 li
187.734 32.4063 li
187.734 32.9688 li
187.797 32.9688 li
187.797 32.9688 li
187.859 32.9688 li
187.859 32.9688 li
187.922 32.9688 li
187.922 32.9688 li
187.984 32.9688 li
187.984 32.9688 li
188.047 32.9688 li
188.047 32.9688 li
188.109 32.9688 li
188.109 32.9688 li
188.109 33.5313 li
188.172 33.5313 li
188.172 33.5313 li
188.234 33.5313 li
188.234 33.5313 li
188.297 33.5313 li
188.297 33.5313 li
188.359 33.5313 li
188.359 33.5313 li
188.422 34.0313 li
188.422 34.0313 li
188.484 34.0313 li
188.484 34.0313 li
188.547 34.0313 li
188.547 34.0313 li
188.609 34.5938 li
188.609 34.5938 li
188.609 34.5938 li
188.672 34.5938 li
188.672 34.5938 li
188.734 34.5938 li
188.734 34.5938 li
188.797 34.5938 li
188.797 35.0938 li
188.859 35.0938 li
188.859 35.0938 li
188.922 35.0938 li
188.922 35.0938 li
188.984 35.0938 li
188.984 35.0938 li
189.047 35.6563 li
189.047 35.6563 li
189.047 35.6563 li
189.109 35.6563 li
189.109 35.6563 li
189.172 35.6563 li
189.172 35.6563 li
189.234 35.6563 li
189.234 35.6563 li
189.297 36.2188 li
189.297 36.2188 li
189.359 36.2188 li
189.359 36.2188 li
189.422 36.2188 li
189.422 36.2188 li
189.484 36.2188 li
189.484 36.2188 li
189.547 36.2188 li
189.547 36.2188 li
189.547 36.2188 li
189.609 36.2188 li
189.609 36.2188 li
189.672 36.2188 li
189.672 36.2188 li
189.734 36.2188 li
189.734 36.2188 li
189.797 36.2188 li
189.797 36.2188 li
189.859 36.2188 li
189.859 36.2188 li
189.922 36.2188 li
189.922 36.2188 li
189.984 36.2188 li
189.984 36.2188 li
189.984 36.2188 li
190.047 36.2188 li
190.047 36.2188 li
190.109 36.2188 li
190.109 36.2188 li
190.172 36.2188 li
190.172 36.2188 li
190.234 36.2188 li
190.234 36.2188 li
190.297 35.6563 li
190.297 35.6563 li
190.359 35.6563 li
190.359 35.6563 li
190.422 35.6563 li
190.422 35.6563 li
190.422 35.6563 li
190.484 35.6563 li
190.484 35.6563 li
190.547 35.6563 li
190.547 35.0938 li
190.609 35.0938 li
190.609 35.0938 li
190.672 35.0938 li
190.672 35.0938 li
190.734 35.0938 li
190.734 35.0938 li
190.797 34.5938 li
190.797 34.5938 li
190.859 34.5938 li
190.859 34.5938 li
190.922 34.5938 li
190.922 34.5938 li
190.922 34.5938 li
190.984 34.0313 li
190.984 34.0313 li
191.047 34.0313 li
191.047 34.0313 li
191.109 34.0313 li
191.109 34.0313 li
191.172 34.0313 li
191.172 33.5313 li
191.234 33.5313 li
191.234 33.5313 li
191.297 33.5313 li
191.297 33.5313 li
191.359 33.5313 li
191.359 33.5313 li
191.359 33.5313 li
191.422 33.5313 li
191.422 32.9688 li
191.484 32.9688 li
191.484 32.9688 li
191.547 32.9688 li
191.547 32.9688 li
191.609 32.9688 li
191.609 32.9688 li
191.672 32.9688 li
191.672 32.9688 li
191.734 32.9688 li
191.734 32.9688 li
191.797 32.4063 li
191.797 32.4063 li
191.859 32.4063 li
191.859 32.4063 li
191.859 32.4063 li
191.922 32.4063 li
191.922 32.4063 li
191.984 32.4063 li
191.984 32.4063 li
192.047 32.4063 li
192.047 32.4063 li
192.109 32.4063 li
192.109 32.4063 li
192.172 32.4063 li
192.172 32.4063 li
192.234 32.4063 li
192.234 32.4063 li
192.297 32.4063 li
192.297 32.4063 li
192.297 32.4063 li
192.359 32.4063 li
192.359 32.4063 li
192.422 32.9688 li
192.422 32.9688 li
192.484 32.9688 li
192.484 32.9688 li
192.547 32.9688 li
192.547 32.9688 li
192.609 32.9688 li
192.609 32.9688 li
192.672 32.9688 li
192.672 32.9688 li
192.734 32.9688 li
192.734 32.9688 li
192.797 33.5313 li
192.797 33.5313 li
192.797 33.5313 li
192.859 33.5313 li
192.859 33.5313 li
192.922 33.5313 li
192.922 33.5313 li
192.984 33.5313 li
192.984 34.0313 li
193.047 34.0313 li
193.047 34.0313 li
193.109 34.0313 li
193.109 34.0313 li
193.172 34.0313 li
193.172 34.0313 li
193.234 34.0313 li
193.234 34.5938 li
193.234 34.5938 li
193.297 34.5938 li
193.297 34.5938 li
193.359 34.5938 li
193.359 34.5938 li
193.422 34.5938 li
193.422 35.0938 li
193.484 35.0938 li
193.484 35.0938 li
193.547 35.0938 li
193.547 35.0938 li
193.609 35.0938 li
193.609 35.0938 li
193.672 35.6563 li
193.672 35.6563 li
193.672 35.6563 li
193.734 35.6563 li
193.734 35.6563 li
193.797 35.6563 li
193.797 35.6563 li
193.859 35.6563 li
193.859 35.6563 li
193.922 35.6563 li
193.922 36.2188 li
193.984 36.2188 li
193.984 36.2188 li
194.047 36.2188 li
194.047 36.2188 li
194.109 36.2188 li
194.109 36.2188 li
194.172 36.2188 li
194.172 36.2188 li
194.172 36.2188 li
194.234 36.2188 li
194.234 36.2188 li
194.297 36.2188 li
194.297 36.2188 li
194.359 36.2188 li
194.359 36.2188 li
194.422 36.2188 li
194.422 36.2188 li
194.484 36.2188 li
194.484 36.2188 li
194.547 36.2188 li
194.547 36.2188 li
194.609 36.2188 li
194.609 36.2188 li
194.609 36.2188 li
194.672 36.2188 li
194.672 36.2188 li
194.734 36.2188 li
194.734 36.2188 li
194.797 36.2188 li
194.797 36.2188 li
194.859 36.2188 li
194.859 35.6563 li
194.922 35.6563 li
194.922 35.6563 li
194.984 35.6563 li
194.984 35.6563 li
195.047 35.6563 li
195.047 35.6563 li
195.109 35.6563 li
195.109 35.6563 li
195.109 35.0938 li
195.172 35.0938 li
195.172 35.0938 li
195.234 35.0938 li
195.234 35.0938 li
195.297 35.0938 li
195.297 35.0938 li
195.359 34.5938 li
195.359 34.5938 li
195.422 34.5938 li
195.422 34.5938 li
195.484 34.5938 li
195.484 34.5938 li
195.547 34.5938 li
195.547 34.0313 li
195.547 34.0313 li
195.609 34.0313 li
195.609 34.0313 li
195.672 34.0313 li
195.672 34.0313 li
195.734 34.0313 li
195.734 33.5313 li
195.797 33.5313 li
195.797 33.5313 li
195.859 33.5313 li
195.859 33.5313 li
195.922 33.5313 li
195.922 33.5313 li
195.984 33.5313 li
195.984 33.5313 li
195.984 32.9688 li
196.047 32.9688 li
196.047 32.9688 li
196.109 32.9688 li
196.109 32.9688 li
196.172 32.9688 li
196.172 32.9688 li
196.234 32.9688 li
196.234 32.9688 li
196.297 32.9688 li
196.297 32.4063 li
196.359 32.4063 li
196.359 32.4063 li
196.422 32.4063 li
196.422 32.4063 li
196.484 32.4063 li
196.484 32.4063 li
196.484 32.4063 li
196.547 32.4063 li
196.547 32.4063 li
196.609 32.4063 li
196.609 32.4063 li
196.672 32.4063 li
196.672 32.4063 li
196.734 32.4063 li
196.734 32.4063 li
196.797 32.4063 li
196.797 32.4063 li
196.859 32.4063 li
196.859 32.4063 li
196.922 32.4063 li
196.922 32.4063 li
196.922 32.4063 li
196.984 32.4063 li
196.984 32.4063 li
197.047 32.4063 li
197.047 32.9688 li
197.109 32.9688 li
197.109 32.9688 li
197.172 32.9688 li
197.172 32.9688 li
197.234 32.9688 li
197.234 32.9688 li
197.297 32.9688 li
197.297 32.9688 li
197.359 32.9688 li
197.359 32.9688 li
197.422 33.5313 li
197.422 33.5313 li
197.422 33.5313 li
197.484 33.5313 li
197.484 33.5313 li
197.547 33.5313 li
197.547 33.5313 li
197.609 33.5313 li
197.609 34.0313 li
197.672 34.0313 li
197.672 34.0313 li
197.734 34.0313 li
197.734 34.0313 li
197.797 34.0313 li
197.797 34.0313 li
197.859 34.0313 li
197.859 34.5938 li
197.859 34.5938 li
197.922 34.5938 li
197.922 34.5938 li
197.984 34.5938 li
197.984 34.5938 li
198.047 34.5938 li
198.047 35.0938 li
198.109 35.0938 li
198.109 35.0938 li
198.172 35.0938 li
198.172 35.0938 li
198.234 35.0938 li
198.234 35.0938 li
198.297 35.0938 li
198.297 35.6563 li
198.359 35.6563 li
198.359 35.6563 li
198.359 35.6563 li
198.422 35.6563 li
198.422 35.6563 li
198.484 35.6563 li
198.484 35.6563 li
198.547 35.6563 li
198.547 35.6563 li
198.609 35.6563 li
198.609 35.6563 li
198.672 36.2188 li
198.672 36.2188 li
198.734 36.2188 li
198.734 36.2188 li
198.797 36.2188 li
198.797 36.2188 li
198.797 36.2188 li
198.859 36.2188 li
198.859 36.2188 li
198.922 36.2188 li
198.922 36.2188 li
198.984 36.2188 li
198.984 36.2188 li
199.047 36.2188 li
199.047 36.2188 li
199.109 36.2188 li
199.109 36.2188 li
199.172 36.2188 li
199.172 36.2188 li
199.234 36.2188 li
199.234 36.2188 li
199.234 36.2188 li
199.297 36.2188 li
199.297 35.6563 li
199.359 35.6563 li
199.359 35.6563 li
199.422 35.6563 li
199.422 35.6563 li
199.484 35.6563 li
199.484 35.6563 li
199.547 35.6563 li
199.547 35.6563 li
199.609 35.6563 li
199.609 35.6563 li
199.672 35.0938 li
199.672 35.0938 li
199.734 35.0938 li
199.734 35.0938 li
199.734 35.0938 li
199.797 35.0938 li
199.797 35.0938 li
199.859 35.0938 li
199.859 34.5938 li
199.922 34.5938 li
199.922 34.5938 li
199.984 34.5938 li
199.984 34.5938 li
200.047 34.5938 li
200.047 34.5938 li
200.109 34.0313 li
200.109 34.0313 li
200.172 34.0313 li
200.172 34.0313 li
200.172 34.0313 li
200.234 34.0313 li
200.234 34.0313 li
200.297 33.5313 li
200.297 33.5313 li
200.359 33.5313 li
200.359 33.5313 li
200.422 33.5313 li
200.422 33.5313 li
200.484 33.5313 li
200.484 33.5313 li
200.547 33.5313 li
200.547 32.9688 li
200.609 32.9688 li
200.609 32.9688 li
200.672 32.9688 li
200.672 32.9688 li
200.672 32.9688 li
200.734 32.9688 li
200.734 32.9688 li
200.797 32.9688 li
200.797 32.9688 li
200.859 32.4063 li
200.859 32.4063 li
200.922 32.4063 li
200.922 32.4063 li
200.984 32.4063 li
200.984 32.4063 li
201.047 32.4063 li
201.047 32.4063 li
201.109 32.4063 li
201.109 32.4063 li
201.109 32.4063 li
201.172 32.4063 li
201.172 32.4063 li
201.234 32.4063 li
201.234 32.4063 li
201.297 32.4063 li
201.297 32.4063 li
201.359 32.4063 li
201.359 32.4063 li
201.422 32.4063 li
201.422 32.4063 li
201.484 32.4063 li
201.484 32.4063 li
201.547 32.4063 li
201.547 32.4063 li
201.547 32.4063 li
201.609 32.4063 li
201.609 32.4063 li
201.672 32.4063 li
201.672 32.9688 li
201.734 32.9688 li
201.734 32.9688 li
201.797 32.9688 li
201.797 32.9688 li
201.859 32.9688 li
201.859 32.9688 li
201.922 32.9688 li
201.922 32.9688 li
201.984 32.9688 li
201.984 33.5313 li
202.047 33.5313 li
202.047 33.5313 li
202.047 33.5313 li
202.109 33.5313 li
202.109 33.5313 li
202.172 33.5313 li
202.172 33.5313 li
202.234 33.5313 li
202.234 34.0313 li
202.297 34.0313 li
202.297 34.0313 li
202.359 34.0313 li
202.359 34.0313 li
202.422 34.0313 li
202.422 34.0313 li
202.484 34.5938 li
202.484 34.5938 li
202.484 34.5938 li
202.547 34.5938 li
202.547 34.5938 li
202.609 34.5938 li
202.609 34.5938 li
202.672 34.5938 li
202.672 35.0938 li
202.734 35.0938 li
202.734 35.0938 li
202.797 35.0938 li
202.797 35.0938 li
202.859 35.0938 li
202.859 35.0938 li
202.922 35.0938 li
202.922 35.6563 li
202.984 35.6563 li
202.984 35.6563 li
202.984 35.6563 li
203.047 35.6563 li
203.047 35.6563 li
203.109 35.6563 li
203.109 35.6563 li
203.172 35.6563 li
203.172 35.6563 li
203.234 35.6563 li
203.234 35.6563 li
203.297 36.2188 li
203.297 36.2188 li
203.359 35.6563 li
203.359 36.2188 li
203.422 36.2188 li
203.422 36.2188 li
203.422 36.2188 li
203.484 36.2188 li
203.484 36.2188 li
203.547 36.2188 li
203.547 36.2188 li
203.609 36.2188 li
203.609 36.2188 li
203.672 36.2188 li
203.672 36.2188 li
203.734 36.2188 li
203.734 36.2188 li
203.797 36.2188 li
203.797 35.6563 li
203.859 35.6563 li
203.859 35.6563 li
203.922 35.6563 li
203.922 35.6563 li
203.922 35.6563 li
203.984 35.6563 li
203.984 35.6563 li
204.047 35.6563 li
204.047 35.6563 li
204.109 35.6563 li
204.109 35.6563 li
204.172 35.0938 li
204.172 35.0938 li
204.234 35.0938 li
204.234 35.0938 li
204.297 35.0938 li
204.297 35.0938 li
204.359 35.0938 li
204.359 35.0938 li
204.359 35.0938 li
204.422 34.5938 li
204.422 34.5938 li
204.484 34.5938 li
204.484 34.5938 li
204.547 34.5938 li
204.547 34.5938 li
204.609 34.5938 li
204.609 34.0313 li
204.672 34.0313 li
204.672 34.0313 li
204.734 34.0313 li
204.734 34.0313 li
204.797 34.0313 li
204.797 34.0313 li
204.797 33.5313 li
204.859 33.5313 li
204.859 33.5313 li
204.922 33.5313 li
204.922 33.5313 li
204.984 33.5313 li
204.984 33.5313 li
205.047 33.5313 li
205.047 33.5313 li
205.109 32.9688 li
205.109 32.9688 li
205.172 32.9688 li
205.172 32.9688 li
205.234 32.9688 li
205.234 32.9688 li
205.297 32.9688 li
205.297 32.9688 li
205.297 32.9688 li
205.359 32.4063 li
205.359 32.4063 li
205.422 32.4063 li
205.422 32.4063 li
205.484 32.4063 li
205.484 32.4063 li
205.547 32.4063 li
205.547 32.4063 li
205.609 32.4063 li
205.609 32.4063 li
205.672 32.4063 li
205.672 32.4063 li
205.734 32.4063 li
205.734 32.4063 li
205.734 32.4063 li
205.797 32.4063 li
205.797 32.4063 li
205.859 32.4063 li
205.859 32.4063 li
205.922 32.4063 li
205.922 32.4063 li
205.984 32.4063 li
205.984 32.4063 li
206.047 32.4063 li
206.047 32.4063 li
206.109 32.4063 li
206.109 32.4063 li
206.172 32.4063 li
206.172 32.4063 li
206.234 32.4063 li
206.234 32.4063 li
206.234 32.4063 li
206.297 32.4063 li
206.297 32.4063 li
206.359 32.9688 li
206.359 32.9688 li
206.422 32.9688 li
206.422 32.9688 li
206.484 32.9688 li
206.484 32.9688 li
206.547 32.9688 li
206.547 32.9688 li
206.609 32.9688 li
206.609 32.9688 li
206.672 33.5313 li
206.672 33.5313 li
206.672 33.5313 li
206.734 33.5313 li
206.734 33.5313 li
206.797 33.5313 li
206.797 33.5313 li
206.859 34.0313 li
206.859 34.0313 li
206.922 34.0313 li
206.922 34.0313 li
206.984 34.0313 li
206.984 34.0313 li
207.047 34.0313 li
207.047 34.0313 li
207.109 34.0313 li
207.109 34.5938 li
207.172 34.5938 li
207.172 34.5938 li
207.172 34.5938 li
207.234 34.5938 li
207.234 34.5938 li
207.297 35.0938 li
207.297 35.0938 li
207.359 35.0938 li
207.359 35.0938 li
207.422 35.0938 li
207.422 35.0938 li
207.484 35.0938 li
207.484 35.0938 li
207.547 35.0938 li
207.547 35.6563 li
207.609 35.6563 li
207.609 35.6563 li
207.609 35.6563 li
207.672 35.6563 li
207.672 35.6563 li
207.734 35.6563 li
207.734 35.6563 li
207.797 35.6563 li
207.797 35.6563 li
207.859 35.6563 li
207.859 35.6563 li
207.922 35.6563 li
207.922 35.6563 li
207.984 35.6563 li
207.984 35.6563 li
208.047 35.6563 li
208.047 35.6563 li
208.047 35.6563 li
208.109 35.6563 li
208.109 35.6563 li
208.172 35.6563 li
208.172 35.6563 li
208.234 35.6563 li
208.234 35.6563 li
208.297 35.6563 li
208.297 35.6563 li
208.359 35.6563 li
208.359 35.6563 li
208.422 35.6563 li
208.422 35.6563 li
208.484 35.6563 li
208.484 35.6563 li
208.547 35.6563 li
208.547 35.6563 li
208.547 35.6563 li
208.609 35.6563 li
208.609 35.6563 li
208.672 35.6563 li
208.672 35.0938 li
208.734 35.0938 li
208.734 35.0938 li
208.797 35.0938 li
208.797 35.0938 li
208.859 35.0938 li
208.859 35.0938 li
208.922 35.0938 li
208.922 34.5938 li
208.984 34.5938 li
208.984 34.5938 li
208.984 34.5938 li
209.047 34.5938 li
209.047 34.5938 li
209.109 34.5938 li
209.109 34.5938 li
209.172 34.0313 li
209.172 34.0313 li
209.234 34.0313 li
209.234 34.0313 li
209.297 34.0313 li
209.297 34.0313 li
209.359 34.0313 li
209.359 33.5313 li
209.422 33.5313 li
209.422 33.5313 li
209.484 33.5313 li
209.484 33.5313 li
209.484 33.5313 li
209.547 33.5313 li
209.547 33.5313 li
209.609 33.5313 li
209.609 32.9688 li
209.672 32.9688 li
209.672 32.9688 li
209.734 32.9688 li
209.734 32.9688 li
209.797 32.9688 li
209.797 32.9688 li
209.859 32.9688 li
209.859 32.4063 li
209.922 32.4063 li
209.922 32.4063 li
209.922 32.4063 li
209.984 32.4063 li
209.984 32.4063 li
210.047 32.4063 li
210.047 32.4063 li
210.109 32.4063 li
210.109 32.4063 li
210.172 32.4063 li
210.172 32.4063 li
210.234 32.4063 li
210.234 32.4063 li
210.297 32.4063 li
210.297 32.4063 li
210.359 32.4063 li
210.359 32.4063 li
210.359 32.4063 li
210.422 32.4063 li
210.422 32.4063 li
210.484 32.4063 li
210.484 32.4063 li
210.547 32.4063 li
210.547 32.4063 li
210.609 32.4063 li
210.609 32.4063 li
210.672 32.4063 li
210.672 32.4063 li
210.734 32.4063 li
210.734 32.4063 li
210.797 32.4063 li
210.797 32.4063 li
210.859 32.4063 li
210.859 32.4063 li
210.859 32.4063 li
210.922 32.4063 li
210.922 32.9688 li
210.984 32.9688 li
210.984 32.9688 li
211.047 32.9688 li
211.047 32.9688 li
211.109 32.9688 li
211.109 32.9688 li
211.172 32.9688 li
211.172 32.9688 li
211.234 32.9688 li
211.234 33.5313 li
211.297 33.5313 li
211.297 33.5313 li
211.297 33.5313 li
211.359 33.5313 li
211.359 33.5313 li
211.422 33.5313 li
211.422 33.5313 li
211.484 34.0313 li
211.484 34.0313 li
211.547 34.0313 li
211.547 34.0313 li
211.609 34.0313 li
211.609 34.0313 li
211.672 34.0313 li
211.672 34.5938 li
211.734 34.5938 li
211.734 34.5938 li
211.797 34.5938 li
211.797 34.5938 li
211.797 34.5938 li
211.859 34.5938 li
211.859 34.5938 li
211.922 34.5938 li
211.922 35.0938 li
211.984 35.0938 li
211.984 35.0938 li
212.047 35.0938 li
212.047 35.0938 li
212.109 35.0938 li
212.109 35.0938 li
212.172 35.0938 li
212.172 35.0938 li
212.234 35.0938 li
212.234 35.6563 li
212.234 35.6563 li
212.297 35.6563 li
212.297 35.6563 li
212.359 35.6563 li
212.359 35.6563 li
212.422 35.6563 li
212.422 35.6563 li
212.484 35.6563 li
212.484 35.6563 li
212.547 35.6563 li
212.547 35.6563 li
212.609 35.6563 li
212.609 35.6563 li
212.672 35.6563 li
212.672 35.6563 li
212.734 35.6563 li
212.734 35.6563 li
212.734 35.6563 li
212.797 35.6563 li
212.797 35.6563 li
212.859 35.6563 li
212.859 35.6563 li
212.922 35.6563 li
212.922 35.6563 li
212.984 35.6563 li
212.984 35.6563 li
213.047 35.6563 li
213.047 35.6563 li
213.109 35.6563 li
213.109 35.6563 li
213.172 35.6563 li
213.172 35.6563 li
213.172 35.0938 li
213.234 35.0938 li
213.234 35.0938 li
213.297 35.0938 li
213.297 35.0938 li
213.359 35.0938 li
213.359 35.0938 li
213.422 35.0938 li
213.422 35.0938 li
213.484 34.5938 li
213.484 34.5938 li
213.547 34.5938 li
213.547 34.5938 li
213.609 34.5938 li
213.609 34.5938 li
213.609 34.5938 li
213.672 34.5938 li
213.672 34.5938 li
213.734 34.0313 li
213.734 34.0313 li
213.797 34.0313 li
213.797 34.0313 li
213.859 34.0313 li
213.859 34.0313 li
213.922 34.0313 li
213.922 33.5313 li
213.984 33.5313 li
213.984 33.5313 li
214.047 33.5313 li
214.047 33.5313 li
214.109 33.5313 li
214.109 33.5313 li
214.109 33.5313 li
214.172 33.5313 li
214.172 32.9688 li
214.234 32.9688 li
214.234 32.9688 li
214.297 32.9688 li
214.297 32.9688 li
214.359 32.9688 li
214.359 32.9688 li
214.422 32.4063 li
214.422 32.4063 li
214.484 32.4063 li
214.484 32.4063 li
214.547 32.4063 li
214.547 32.4063 li
214.547 32.4063 li
214.609 32.4063 li
214.609 32.4063 li
214.672 32.4063 li
214.672 32.4063 li
214.734 32.4063 li
214.734 32.4063 li
214.797 32.4063 li
214.797 32.4063 li
214.859 32.4063 li
214.859 32.4063 li
214.922 32.4063 li
214.922 32.4063 li
214.984 32.4063 li
214.984 32.4063 li
215.047 32.4063 li
215.047 32.4063 li
215.047 32.4063 li
215.109 32.4063 li
215.109 32.4063 li
215.172 32.4063 li
215.172 32.4063 li
215.234 32.4063 li
215.234 32.4063 li
215.297 32.4063 li
215.297 32.4063 li
215.359 32.4063 li
215.359 32.4063 li
215.422 32.4063 li
215.422 32.4063 li
215.484 32.4063 li
215.484 32.4063 li
215.484 32.4063 li
215.547 32.4063 li
215.547 32.9688 li
215.609 32.9688 li
215.609 32.9688 li
215.672 32.9688 li
215.672 32.9688 li
215.734 32.9688 li
215.734 32.9688 li
215.797 32.9688 li
215.797 32.9688 li
215.859 33.5313 li
215.859 33.5313 li
215.922 33.5313 li
215.922 33.5313 li
215.922 33.5313 li
215.984 33.5313 li
215.984 33.5313 li
216.047 33.5313 li
216.047 34.0313 li
216.109 34.0313 li
216.109 34.0313 li
216.172 34.0313 li
216.172 34.0313 li
216.234 34.0313 li
216.234 34.0313 li
216.297 34.0313 li
216.297 34.5938 li
216.359 34.5938 li
216.359 34.5938 li
216.422 34.5938 li
216.422 34.5938 li
216.422 34.5938 li
216.484 34.5938 li
216.484 34.5938 li
216.547 35.0938 li
216.547 35.0938 li
216.609 35.0938 li
216.609 35.0938 li
216.672 35.0938 li
216.672 35.0938 li
216.734 35.0938 li
216.734 35.0938 li
216.797 35.0938 li
216.797 35.0938 li
216.859 35.6563 li
216.859 35.6563 li
216.859 35.6563 li
216.922 35.6563 li
216.922 35.6563 li
216.984 35.6563 li
216.984 35.6563 li
217.047 35.6563 li
217.047 35.6563 li
217.109 35.6563 li
217.109 35.6563 li
217.172 35.6563 li
217.172 35.6563 li
217.234 35.6563 li
217.234 35.6563 li
217.297 35.6563 li
217.297 35.6563 li
217.359 35.6563 li
217.359 35.6563 li
217.359 35.6563 li
217.422 35.6563 li
217.422 35.6563 li
217.484 35.6563 li
217.484 35.6563 li
217.547 35.6563 li
217.547 35.6563 li
217.609 35.6563 li
217.609 35.6563 li
217.672 35.6563 li
217.672 35.6563 li
217.734 35.0938 li
217.734 35.0938 li
217.797 35.0938 li
217.797 35.0938 li
217.797 35.0938 li
217.859 35.0938 li
217.859 35.0938 li
217.922 35.0938 li
217.922 35.0938 li
217.984 35.0938 li
217.984 35.0938 li
218.047 34.5938 li
218.047 34.5938 li
218.109 34.5938 li
218.109 34.5938 li
218.172 34.5938 li
218.172 34.5938 li
218.234 34.5938 li
218.234 34.0313 li
218.297 34.0313 li
218.297 34.0313 li
218.297 34.0313 li
218.359 34.0313 li
218.359 34.0313 li
218.422 34.0313 li
218.422 34.0313 li
218.484 34.0313 li
218.484 33.5313 li
218.547 33.5313 li
218.547 33.5313 li
218.609 33.5313 li
218.609 33.5313 li
218.672 33.5313 li
218.672 33.5313 li
218.734 32.9688 li
218.734 32.9688 li
218.734 32.9688 li
218.797 32.9688 li
218.797 32.9688 li
218.859 32.9688 li
218.859 32.9688 li
218.922 32.9688 li
218.922 32.9688 li
218.984 32.9688 li
218.984 32.4063 li
219.047 32.4063 li
219.047 32.4063 li
219.109 32.4063 li
219.109 32.4063 li
219.172 32.4063 li
219.172 32.4063 li
219.172 32.4063 li
219.234 32.4063 li
219.234 32.4063 li
219.297 32.4063 li
219.297 32.4063 li
219.359 32.4063 li
219.359 32.4063 li
219.422 32.4063 li
219.422 32.4063 li
219.484 32.4063 li
219.484 32.4063 li
219.547 32.4063 li
219.547 32.4063 li
219.609 32.4063 li
219.609 32.4063 li
219.672 32.4063 li
219.672 32.4063 li
219.672 32.4063 li
219.734 32.4063 li
219.734 32.4063 li
219.797 32.4063 li
219.797 32.4063 li
219.859 32.4063 li
219.859 32.4063 li
219.922 32.4063 li
219.922 32.4063 li
219.984 32.4063 li
219.984 32.4063 li
220.047 32.4063 li
220.047 32.4063 li
220.109 32.4063 li
220.109 32.4063 li
220.109 32.9688 li
220.172 32.9688 li
220.172 32.9688 li
220.234 32.9688 li
220.234 32.9688 li
220.297 32.9688 li
220.297 32.9688 li
220.359 32.9688 li
220.359 32.9688 li
220.422 33.5313 li
220.422 33.5313 li
220.484 33.5313 li
220.484 33.5313 li
220.547 33.5313 li
220.547 33.5313 li
220.609 33.5313 li
220.609 33.5313 li
220.609 33.5313 li
220.672 34.0313 li
220.672 34.0313 li
220.734 34.0313 li
220.734 34.0313 li
220.797 34.0313 li
220.797 34.0313 li
220.859 34.0313 li
220.859 34.5938 li
220.922 34.5938 li
220.922 34.5938 li
220.984 34.5938 li
220.984 34.5938 li
221.047 34.5938 li
221.047 34.5938 li
221.047 34.5938 li
221.109 34.5938 li
221.109 35.0938 li
221.172 35.0938 li
221.172 35.0938 li
221.234 35.0938 li
221.234 35.0938 li
221.297 35.0938 li
221.297 35.0938 li
221.359 35.0938 li
221.359 35.0938 li
221.422 35.0938 li
221.422 35.0938 li
221.484 35.0938 li
221.484 35.0938 li
221.484 35.6563 li
221.547 35.6563 li
221.547 35.6563 li
221.609 35.6563 li
221.609 35.6563 li
221.672 35.6563 li
221.672 35.6563 li
221.734 35.6563 li
221.734 35.6563 li
221.797 35.6563 li
221.797 35.6563 li
221.859 35.6563 li
221.859 35.6563 li
221.922 35.6563 li
221.922 35.6563 li
221.984 35.6563 li
221.984 35.6563 li
221.984 35.6563 li
222.047 35.6563 li
222.047 35.6563 li
222.109 35.6563 li
222.109 35.6563 li
222.172 35.0938 li
222.172 35.0938 li
222.234 35.0938 li
222.234 35.0938 li
222.297 35.0938 li
222.297 35.0938 li
222.359 35.0938 li
222.359 35.0938 li
222.422 35.0938 li
222.422 35.0938 li
222.422 35.0938 li
222.484 35.0938 li
222.484 35.0938 li
222.547 34.5938 li
222.547 34.5938 li
222.609 34.5938 li
222.609 34.5938 li
222.672 34.5938 li
222.672 34.5938 li
222.734 34.5938 li
222.734 34.5938 li
222.797 34.0313 li
222.797 34.0313 li
222.859 34.0313 li
222.859 34.0313 li
222.922 34.0313 li
222.922 34.0313 li
222.922 34.0313 li
222.984 34.0313 li
222.984 33.5313 li
223.047 33.5313 li
223.047 33.5313 li
223.109 33.5313 li
223.109 33.5313 li
223.172 33.5313 li
223.172 33.5313 li
223.234 33.5313 li
223.234 32.9688 li
223.297 32.9688 li
223.297 32.9688 li
223.359 32.9688 li
223.359 32.9688 li
223.359 32.9688 li
223.422 32.9688 li
223.422 32.9688 li
223.484 32.9688 li
223.484 32.4063 li
223.547 32.4063 li
223.547 32.4063 li
223.609 32.4063 li
223.609 32.4063 li
223.672 32.4063 li
223.672 32.4063 li
223.734 32.4063 li
223.734 32.4063 li
223.797 32.4063 li
223.797 32.4063 li
223.859 32.4063 li
223.859 32.4063 li
223.859 32.4063 li
223.922 31.9063 li
223.922 32.4063 li
223.984 31.9063 li
223.984 31.9063 li
224.047 31.9063 li
224.047 31.9063 li
224.109 31.9063 li
224.109 31.9063 li
224.172 31.9063 li
224.172 31.9063 li
224.234 31.9063 li
224.234 31.9063 li
224.297 31.9063 li
224.297 31.9063 li
224.297 32.4063 li
224.359 32.4063 li
224.359 32.4063 li
224.422 32.4063 li
224.422 32.4063 li
224.484 32.4063 li
224.484 32.4063 li
224.547 32.4063 li
224.547 32.4063 li
224.609 32.4063 li
224.609 32.4063 li
224.672 32.4063 li
224.672 32.4063 li
224.734 32.4063 li
224.734 32.9688 li
224.734 32.9688 li
224.797 32.9688 li
224.797 32.9688 li
224.859 32.9688 li
224.859 32.9688 li
224.922 32.9688 li
224.922 32.9688 li
224.984 32.9688 li
224.984 33.5313 li
225.047 33.5313 li
225.047 33.5313 li
225.109 33.5313 li
225.109 33.5313 li
225.172 33.5313 li
225.172 33.5313 li
225.234 33.5313 li
225.234 33.5313 li
225.234 34.0313 li
225.297 34.0313 li
225.297 34.0313 li
225.359 34.0313 li
225.359 34.0313 li
225.422 34.0313 li
225.422 34.0313 li
225.484 34.0313 li
225.484 34.5938 li
225.547 34.5938 li
225.547 34.5938 li
225.609 34.5938 li
225.609 34.5938 li
225.672 34.5938 li
225.672 34.5938 li
225.672 34.5938 li
225.734 35.0938 li
225.734 35.0938 li
225.797 35.0938 li
225.797 35.0938 li
225.859 35.0938 li
225.859 35.0938 li
225.922 35.0938 li
225.922 35.0938 li
225.984 35.0938 li
225.984 35.0938 li
226.047 35.0938 li
226.047 35.0938 li
226.109 35.0938 li
226.109 35.0938 li
226.172 35.0938 li
226.172 35.6563 li
226.172 35.6563 li
226.234 35.6563 li
226.234 35.6563 li
226.297 35.6563 li
226.297 35.6563 li
226.359 35.6563 li
226.359 35.6563 li
226.422 35.6563 li
226.422 35.6563 li
226.484 35.6563 li
226.484 35.6563 li
226.547 35.0938 li
226.547 35.0938 li
226.609 35.0938 li
226.609 35.0938 li
226.609 35.0938 li
226.672 35.0938 li
226.672 35.0938 li
226.734 35.0938 li
226.734 35.0938 li
226.797 35.0938 li
226.797 35.0938 li
226.859 35.0938 li
226.859 35.0938 li
226.922 35.0938 li
226.922 35.0938 li
226.984 35.0938 li
226.984 35.0938 li
227.047 34.5938 li
227.047 34.5938 li
227.109 34.5938 li
227.109 34.5938 li
227.109 34.5938 li
227.172 34.5938 li
227.172 34.5938 li
227.234 34.5938 li
227.234 34.0313 li
227.297 34.0313 li
227.297 34.0313 li
227.359 34.0313 li
227.359 34.0313 li
227.422 34.0313 li
227.422 34.0313 li
227.484 34.0313 li
227.484 34.0313 li
227.547 33.5313 li
227.547 33.5313 li
227.547 33.5313 li
227.609 33.5313 li
227.609 33.5313 li
227.672 33.5313 li
227.672 33.5313 li
227.734 33.5313 li
227.734 32.9688 li
227.797 32.9688 li
227.797 32.9688 li
227.859 32.9688 li
227.859 32.9688 li
227.922 32.9688 li
227.922 32.9688 li
227.984 32.9688 li
227.984 32.9688 li
227.984 32.4063 li
228.047 32.4063 li
228.047 32.4063 li
228.109 32.4063 li
228.109 32.4063 li
228.172 32.4063 li
228.172 32.4063 li
228.234 32.4063 li
228.234 32.4063 li
228.297 32.4063 li
228.297 32.4063 li
228.359 32.4063 li
228.359 32.4063 li
228.422 32.4063 li
228.422 31.9063 li
228.484 31.9063 li
228.484 31.9063 li
228.484 31.9063 li
228.547 31.9063 li
228.547 31.9063 li
228.609 31.9063 li
228.609 31.9063 li
228.672 31.9063 li
228.672 31.9063 li
228.734 31.9063 li
228.734 31.9063 li
228.797 31.9063 li
228.797 31.9063 li
228.859 31.9063 li
228.859 31.9063 li
228.922 32.4063 li
228.922 32.4063 li
228.922 32.4063 li
228.984 32.4063 li
228.984 32.4063 li
229.047 32.4063 li
229.047 32.4063 li
229.109 32.4063 li
229.109 32.4063 li
229.172 32.4063 li
229.172 32.4063 li
229.234 32.4063 li
229.234 32.4063 li
229.297 32.4063 li
229.297 32.4063 li
229.359 32.9688 li
229.359 32.9688 li
229.422 32.9688 li
229.422 32.9688 li
229.422 32.9688 li
229.484 32.9688 li
229.484 32.9688 li
229.547 32.9688 li
229.547 32.9688 li
229.609 33.5313 li
229.609 33.5313 li
229.672 33.5313 li
229.672 33.5313 li
229.734 33.5313 li
229.734 33.5313 li
229.797 33.5313 li
229.797 33.5313 li
229.859 33.5313 li
229.859 34.0313 li
229.859 34.0313 li
229.922 34.0313 li
229.922 34.0313 li
229.984 34.0313 li
229.984 34.0313 li
230.047 34.0313 li
230.047 34.0313 li
230.109 34.5938 li
230.109 34.5938 li
230.172 34.5938 li
230.172 34.5938 li
230.234 34.5938 li
230.234 34.5938 li
230.297 34.5938 li
230.297 34.5938 li
230.297 34.5938 li
230.359 34.5938 li
230.359 35.0938 li
230.422 35.0938 li
230.422 35.0938 li
230.484 35.0938 li
230.484 35.0938 li
230.547 35.0938 li
230.547 35.0938 li
230.609 35.0938 li
230.609 35.0938 li
230.672 35.0938 li
230.672 35.0938 li
230.734 35.0938 li
230.734 35.0938 li
230.797 35.0938 li
230.797 35.0938 li
230.797 35.0938 li
230.859 35.0938 li
230.859 35.0938 li
230.922 35.0938 li
230.922 35.0938 li
230.984 35.0938 li
230.984 35.0938 li
231.047 35.0938 li
231.047 35.0938 li
231.109 35.0938 li
231.109 35.0938 li
231.172 35.0938 li
231.172 35.0938 li
231.234 35.0938 li
231.234 35.0938 li
231.234 35.0938 li
231.297 35.0938 li
231.297 35.0938 li
231.359 35.0938 li
231.359 35.0938 li
231.422 35.0938 li
231.422 35.0938 li
231.484 35.0938 li
231.484 34.5938 li
231.547 34.5938 li
231.547 34.5938 li
231.609 34.5938 li
231.609 34.5938 li
231.672 34.5938 li
231.672 34.5938 li
231.734 34.5938 li
231.734 34.5938 li
231.734 34.5938 li
231.797 34.0313 li
231.797 34.0313 li
231.859 34.0313 li
231.859 34.0313 li
231.922 34.0313 li
231.922 34.0313 li
231.984 34.0313 li
231.984 34.0313 li
232.047 34.0313 li
232.047 33.5313 li
232.109 33.5313 li
232.109 33.5313 li
232.172 33.5313 li
232.172 33.5313 li
232.172 33.5313 li
232.234 33.5313 li
232.234 33.5313 li
232.297 32.9688 li
232.297 32.9688 li
232.359 32.9688 li
232.359 32.9688 li
232.422 32.9688 li
232.422 32.9688 li
232.484 32.9688 li
232.484 32.9688 li
232.547 32.9688 li
232.547 32.9688 li
232.609 32.4063 li
232.609 32.4063 li
232.672 32.4063 li
232.672 32.4063 li
232.672 32.4063 li
232.734 32.4063 li
232.734 32.4063 li
232.797 32.4063 li
232.797 32.4063 li
232.859 32.4063 li
232.859 32.4063 li
232.922 32.4063 li
232.922 31.9063 li
232.984 31.9063 li
232.984 31.9063 li
233.047 31.9063 li
233.047 31.9063 li
233.109 31.9063 li
233.109 31.9063 li
233.109 31.9063 li
233.172 31.9063 li
233.172 31.9063 li
233.234 31.9063 li
233.234 31.9063 li
233.297 31.9063 li
233.297 31.9063 li
233.359 31.9063 li
233.359 32.4063 li
233.422 31.9063 li
233.422 32.4063 li
233.484 32.4063 li
233.484 32.4063 li
233.547 32.4063 li
233.547 32.4063 li
233.547 32.4063 li
233.609 32.4063 li
233.609 32.4063 li
233.672 32.4063 li
233.672 32.4063 li
233.734 32.4063 li
233.734 32.4063 li
233.797 32.4063 li
233.797 32.4063 li
233.859 32.4063 li
233.859 32.4063 li
233.922 32.9688 li
233.922 32.9688 li
233.984 32.9688 li
233.984 32.9688 li
234.047 32.9688 li
234.047 32.9688 li
234.047 32.9688 li
234.109 32.9688 li
234.109 32.9688 li
234.172 33.5313 li
234.172 33.5313 li
234.234 33.5313 li
234.234 33.5313 li
234.297 33.5313 li
234.297 33.5313 li
234.359 33.5313 li
234.359 33.5313 li
234.422 34.0313 li
234.422 34.0313 li
234.484 34.0313 li
234.484 34.0313 li
234.484 34.0313 li
234.547 34.0313 li
234.547 34.0313 li
234.609 34.0313 li
234.609 34.0313 li
234.672 34.0313 li
234.672 34.5938 li
234.734 34.5938 li
234.734 34.5938 li
234.797 34.5938 li
234.797 34.5938 li
234.859 34.5938 li
234.859 34.5938 li
234.922 34.5938 li
234.922 34.5938 li
234.984 35.0938 li
234.984 35.0938 li
234.984 35.0938 li
235.047 35.0938 li
235.047 35.0938 li
235.109 35.0938 li
235.109 35.0938 li
235.172 35.0938 li
235.172 35.0938 li
235.234 35.0938 li
235.234 35.0938 li
235.297 35.0938 li
235.297 35.0938 li
235.359 35.0938 li
235.359 35.0938 li
235.422 35.0938 li
235.422 35.0938 li
235.422 35.0938 li
235.484 35.0938 li
235.484 35.0938 li
235.547 35.0938 li
235.547 35.0938 li
235.609 35.0938 li
235.609 35.0938 li
235.672 35.0938 li
235.672 35.0938 li
235.734 35.0938 li
235.734 35.0938 li
235.797 35.0938 li
235.797 35.0938 li
235.859 35.0938 li
235.859 35.0938 li
235.859 35.0938 li
235.922 35.0938 li
235.922 35.0938 li
235.984 35.0938 li
235.984 34.5938 li
236.047 34.5938 li
236.047 34.5938 li
236.109 34.5938 li
236.109 34.5938 li
236.172 34.5938 li
236.172 34.5938 li
236.234 34.5938 li
236.234 34.5938 li
236.297 34.5938 li
236.297 34.5938 li
236.359 34.0313 li
236.359 34.0313 li
236.359 34.0313 li
236.422 34.0313 li
236.422 34.0313 li
236.484 34.0313 li
236.484 34.0313 li
236.547 34.0313 li
236.547 33.5313 li
236.609 33.5313 li
236.609 33.5313 li
236.672 33.5313 li
236.672 33.5313 li
236.734 33.5313 li
236.734 33.5313 li
236.797 33.5313 li
236.797 33.5313 li
236.797 32.9688 li
236.859 32.9688 li
236.859 32.9688 li
236.922 32.9688 li
236.922 32.9688 li
236.984 32.9688 li
236.984 32.9688 li
237.047 32.9688 li
237.047 32.9688 li
237.109 32.4063 li
237.109 32.4063 li
237.172 32.4063 li
237.172 32.4063 li
237.234 32.4063 li
237.234 32.4063 li
237.297 32.4063 li
237.297 32.4063 li
237.297 32.4063 li
237.359 32.4063 li
237.359 32.4063 li
237.422 32.4063 li
237.422 32.4063 li
237.484 32.4063 li
237.484 32.4063 li
237.547 32.4063 li
237.547 31.9063 li
237.609 31.9063 li
237.609 31.9063 li
237.672 31.9063 li
237.672 31.9063 li
237.734 31.9063 li
237.734 31.9063 li
237.734 31.9063 li
237.797 31.9063 li
237.797 31.9063 li
237.859 31.9063 li
237.859 31.9063 li
237.922 32.4063 li
237.922 31.9063 li
237.984 32.4063 li
237.984 32.4063 li
238.047 32.4063 li
238.047 32.4063 li
238.109 32.4063 li
238.109 32.4063 li
238.172 32.4063 li
238.172 32.4063 li
238.234 32.4063 li
238.234 32.4063 li
238.234 32.4063 li
238.297 32.4063 li
238.297 32.4063 li
238.359 32.4063 li
238.359 32.4063 li
238.422 32.9688 li
238.422 32.9688 li
238.484 32.9688 li
238.484 32.9688 li
238.547 32.9688 li
238.547 32.9688 li
238.609 32.9688 li
238.609 32.9688 li
238.672 32.9688 li
238.672 32.9688 li
238.672 32.9688 li
238.734 33.5313 li
238.734 33.5313 li
238.797 33.5313 li
238.797 33.5313 li
238.859 33.5313 li
238.859 33.5313 li
238.922 33.5313 li
238.922 33.5313 li
238.984 33.5313 li
238.984 34.0313 li
239.047 34.0313 li
239.047 34.0313 li
239.109 34.0313 li
239.109 34.0313 li
239.109 34.0313 li
239.172 34.0313 li
239.172 34.0313 li
239.234 34.0313 li
239.234 34.0313 li
239.297 34.5938 li
239.297 34.5938 li
239.359 34.5938 li
239.359 34.5938 li
239.422 34.5938 li
239.422 34.5938 li
239.484 34.5938 li
239.484 34.5938 li
239.547 34.5938 li
239.547 34.5938 li
239.609 34.5938 li
239.609 34.5938 li
239.609 34.5938 li
239.672 35.0938 li
239.672 35.0938 li
239.734 35.0938 li
239.734 35.0938 li
239.797 35.0938 li
239.797 35.0938 li
239.859 35.0938 li
239.859 35.0938 li
239.922 35.0938 li
239.922 35.0938 li
239.984 35.0938 li
239.984 35.0938 li
240.047 35.0938 li
240.047 35.0938 li
240.047 35.0938 li
240.109 35.0938 li
240.109 35.0938 li
240.172 35.0938 li
240.172 35.0938 li
240.234 35.0938 li
240.234 35.0938 li
240.297 35.0938 li
240.297 35.0938 li
240.359 35.0938 li
240.359 35.0938 li
240.422 34.5938 li
240.422 34.5938 li
240.484 35.0938 li
240.484 34.5938 li
240.547 34.5938 li
240.547 34.5938 li
240.547 34.5938 li
240.609 34.5938 li
240.609 34.5938 li
240.672 34.5938 li
240.672 34.5938 li
240.734 34.5938 li
240.734 34.5938 li
240.797 34.0313 li
240.797 34.0313 li
240.859 34.0313 li
240.859 34.0313 li
240.922 34.0313 li
240.922 34.0313 li
240.984 34.0313 li
240.984 34.0313 li
240.984 34.0313 li
241.047 34.0313 li
241.047 33.5313 li
241.109 33.5313 li
241.109 33.5313 li
241.172 33.5313 li
241.172 33.5313 li
241.234 33.5313 li
241.234 33.5313 li
241.297 33.5313 li
241.297 33.5313 li
241.359 33.5313 li
241.359 32.9688 li
241.422 32.9688 li
241.422 32.9688 li
241.484 32.9688 li
241.484 32.9688 li
241.484 32.9688 li
241.547 32.9688 li
241.547 32.9688 li
241.609 32.9688 li
241.609 32.4063 li
241.672 32.4063 li
241.672 32.4063 li
241.734 32.4063 li
241.734 32.4063 li
241.797 32.4063 li
241.797 32.4063 li
241.859 32.4063 li
241.859 32.4063 li
241.922 32.4063 li
241.922 32.4063 li
241.922 32.4063 li
241.984 32.4063 li
241.984 32.4063 li
242.047 32.4063 li
242.047 32.4063 li
242.109 32.4063 li
242.109 32.4063 li
242.172 31.9063 li
242.172 31.9063 li
242.234 31.9063 li
242.234 31.9063 li
242.297 31.9063 li
242.297 31.9063 li
242.359 31.9063 li
242.359 31.9063 li
242.359 31.9063 li
242.422 31.9063 li
242.422 31.9063 li
242.484 31.9063 li
242.484 31.9063 li
242.547 32.4063 li
242.547 32.4063 li
242.609 32.4063 li
242.609 32.4063 li
242.672 32.4063 li
242.672 32.4063 li
242.734 32.4063 li
242.734 32.4063 li
242.797 32.4063 li
242.797 32.4063 li
242.859 32.4063 li
242.859 32.4063 li
242.859 32.4063 li
242.922 32.4063 li
242.922 32.4063 li
242.984 32.4063 li
242.984 32.9688 li
243.047 32.9688 li
243.047 32.9688 li
243.109 32.9688 li
243.109 32.9688 li
243.172 32.9688 li
243.172 32.9688 li
243.234 32.9688 li
243.234 32.9688 li
243.297 32.9688 li
243.297 33.5313 li
243.297 33.5313 li
243.359 33.5313 li
243.359 33.5313 li
243.422 33.5313 li
243.422 33.5313 li
243.484 33.5313 li
243.484 33.5313 li
243.547 33.5313 li
243.547 34.0313 li
243.609 34.0313 li
243.609 34.0313 li
243.672 34.0313 li
243.672 34.0313 li
243.734 34.0313 li
243.734 34.0313 li
243.797 34.0313 li
243.797 34.0313 li
243.797 34.0313 li
243.859 34.0313 li
243.859 34.5938 li
243.922 34.5938 li
243.922 34.5938 li
243.984 34.5938 li
243.984 34.5938 li
244.047 34.5938 li
244.047 34.5938 li
244.109 34.5938 li
244.109 34.5938 li
244.172 34.5938 li
244.172 34.5938 li
244.234 34.5938 li
244.234 34.5938 li
244.234 34.5938 li
244.297 34.5938 li
244.297 34.5938 li
244.359 35.0938 li
244.359 35.0938 li
244.422 35.0938 li
244.422 35.0938 li
244.484 35.0938 li
244.484 35.0938 li
244.547 35.0938 li
244.547 35.0938 li
244.609 35.0938 li
244.609 35.0938 li
244.672 35.0938 li
244.672 35.0938 li
244.672 35.0938 li
244.734 35.0938 li
244.734 35.0938 li
244.797 35.0938 li
244.797 35.0938 li
244.859 34.5938 li
244.859 34.5938 li
244.922 34.5938 li
244.922 34.5938 li
244.984 34.5938 li
244.984 34.5938 li
245.047 34.5938 li
245.047 34.5938 li
245.109 34.5938 li
245.109 34.5938 li
245.172 34.5938 li
245.172 34.5938 li
245.172 34.5938 li
245.234 34.5938 li
245.234 34.5938 li
245.297 34.5938 li
245.297 34.0313 li
245.359 34.0313 li
245.359 34.0313 li
245.422 34.0313 li
245.422 34.0313 li
245.484 34.0313 li
245.484 34.0313 li
245.547 34.0313 li
245.547 34.0313 li
245.609 34.0313 li
245.609 33.5313 li
245.609 33.5313 li
245.672 33.5313 li
245.672 33.5313 li
245.734 33.5313 li
245.734 33.5313 li
245.797 33.5313 li
245.797 33.5313 li
245.859 33.5313 li
245.859 33.5313 li
245.922 32.9688 li
245.922 32.9688 li
245.984 32.9688 li
245.984 32.9688 li
246.047 32.9688 li
246.047 32.9688 li
246.109 32.9688 li
246.109 32.9688 li
246.109 32.9688 li
246.172 32.9688 li
246.172 32.4063 li
246.234 32.4063 li
246.234 32.4063 li
246.297 32.4063 li
246.297 32.4063 li
246.359 32.4063 li
246.359 32.4063 li
246.422 32.4063 li
246.422 32.4063 li
246.484 32.4063 li
246.484 32.4063 li
246.547 32.4063 li
246.547 32.4063 li
246.547 32.4063 li
246.609 32.4063 li
246.609 32.4063 li
246.672 32.4063 li
246.672 32.4063 li
246.734 32.4063 li
246.734 32.4063 li
246.797 32.4063 li
246.797 32.4063 li
246.859 32.4063 li
246.859 32.4063 li
246.922 32.4063 li
246.922 32.4063 li
246.984 32.4063 li
246.984 32.4063 li
247.047 32.4063 li
247.047 32.4063 li
247.047 32.4063 li
247.109 32.4063 li
247.109 32.4063 li
247.172 32.4063 li
247.172 32.4063 li
247.234 32.4063 li
247.234 32.4063 li
247.297 32.4063 li
247.297 32.4063 li
247.359 32.4063 li
247.359 32.4063 li
247.422 32.4063 li
247.422 32.4063 li
247.484 32.4063 li
247.484 32.4063 li
247.484 32.4063 li
247.547 32.4063 li
247.547 32.9688 li
247.609 32.9688 li
247.609 32.9688 li
247.672 32.9688 li
247.672 32.9688 li
247.734 32.9688 li
247.734 32.9688 li
247.797 32.9688 li
247.797 32.9688 li
247.859 32.9688 li
247.859 33.5313 li
247.922 33.5313 li
247.922 33.5313 li
247.922 33.5313 li
247.984 33.5313 li
247.984 33.5313 li
248.047 33.5313 li
248.047 33.5313 li
248.109 33.5313 li
248.109 33.5313 li
248.172 34.0313 li
248.172 34.0313 li
248.234 34.0313 li
248.234 34.0313 li
248.297 34.0313 li
248.297 34.0313 li
248.359 34.0313 li
248.359 34.0313 li
248.422 34.0313 li
248.422 34.0313 li
248.422 34.0313 li
248.484 34.0313 li
248.484 34.5938 li
248.547 34.5938 li
248.547 34.5938 li
248.609 34.5938 li
248.609 34.5938 li
248.672 34.5938 li
248.672 34.5938 li
248.734 34.5938 li
248.734 34.5938 li
248.797 34.5938 li
248.797 34.5938 li
248.859 34.5938 li
248.859 34.5938 li
248.859 34.5938 li
248.922 34.5938 li
248.922 34.5938 li
248.984 34.5938 li
248.984 34.5938 li
249.047 34.5938 li
249.047 34.5938 li
249.109 34.5938 li
249.109 34.5938 li
249.172 34.5938 li
249.172 34.5938 li
249.234 34.5938 li
249.234 34.5938 li
249.297 34.5938 li
249.297 34.5938 li
249.359 34.5938 li
249.359 34.5938 li
249.359 34.5938 li
249.422 34.5938 li
249.422 34.5938 li
249.484 34.5938 li
249.484 34.5938 li
249.547 34.5938 li
249.547 34.5938 li
249.609 34.5938 li
249.609 34.5938 li
249.672 34.5938 li
249.672 34.5938 li
249.734 34.5938 li
249.734 34.5938 li
249.797 34.5938 li
249.797 34.0313 li
249.797 34.0313 li
249.859 34.0313 li
249.859 34.0313 li
249.922 34.0313 li
249.922 34.0313 li
249.984 34.0313 li
249.984 34.0313 li
250.047 34.0313 li
250.047 34.0313 li
250.109 34.0313 li
250.109 33.5313 li
250.172 33.5313 li
250.172 33.5313 li
250.234 33.5313 li
250.234 33.5313 li
250.234 33.5313 li
250.297 33.5313 li
250.297 33.5313 li
250.359 33.5313 li
250.359 33.5313 li
250.422 32.9688 li
250.422 32.9688 li
250.484 32.9688 li
250.484 32.9688 li
250.547 32.9688 li
250.547 32.9688 li
250.609 32.9688 li
250.609 32.9688 li
250.672 32.9688 li
250.672 32.9688 li
250.734 32.9688 li
250.734 32.4063 li
250.734 32.4063 li
250.797 32.4063 li
250.797 32.4063 li
250.859 32.4063 li
250.859 32.4063 li
250.922 32.4063 li
250.922 32.4063 li
250.984 32.4063 li
250.984 32.4063 li
251.047 32.4063 li
251.047 32.4063 li
251.109 32.4063 li
251.109 32.4063 li
251.172 32.4063 li
251.172 32.4063 li
251.172 32.4063 li
251.234 32.4063 li
251.234 32.4063 li
251.297 31.9063 li
251.297 32.4063 li
251.359 31.9063 li
251.359 32.4063 li
251.422 32.4063 li
251.422 32.4063 li
251.484 32.4063 li
251.484 32.4063 li
251.547 32.4063 li
251.547 32.4063 li
251.609 32.4063 li
251.609 32.4063 li
251.672 32.4063 li
251.672 32.4063 li
251.672 32.4063 li
251.734 32.4063 li
251.734 32.4063 li
251.797 32.4063 li
251.797 32.4063 li
251.859 32.4063 li
251.859 32.4063 li
251.922 32.4063 li
251.922 32.4063 li
251.984 32.4063 li
251.984 32.4063 li
252.047 32.4063 li
252.047 32.4063 li
252.109 32.9688 li
252.109 32.4063 li
252.109 32.9688 li
252.172 32.9688 li
252.172 32.9688 li
252.234 32.9688 li
252.234 32.9688 li
252.297 32.9688 li
252.297 32.9688 li
252.359 32.9688 li
252.359 32.9688 li
252.422 32.9688 li
252.422 32.9688 li
252.484 33.5313 li
252.484 33.5313 li
252.547 33.5313 li
252.547 33.5313 li
252.609 33.5313 li
252.609 33.5313 li
252.609 33.5313 li
252.672 33.5313 li
252.672 33.5313 li
252.734 33.5313 li
252.734 33.5313 li
252.797 33.5313 li
252.797 34.0313 li
252.859 34.0313 li
252.859 34.0313 li
252.922 34.0313 li
252.922 34.0313 li
252.984 34.0313 li
252.984 34.0313 li
253.047 34.0313 li
253.047 34.0313 li
253.047 34.0313 li
253.109 34.0313 li
253.109 34.0313 li
253.172 34.0313 li
253.172 34.5938 li
253.234 34.5938 li
253.234 34.5938 li
253.297 34.5938 li
253.297 34.5938 li
253.359 34.5938 li
253.359 34.5938 li
253.422 34.5938 li
253.422 34.5938 li
253.484 34.5938 li
253.484 34.5938 li
253.484 34.5938 li
253.547 34.5938 li
253.547 34.5938 li
253.609 34.5938 li
253.609 34.5938 li
253.672 34.5938 li
253.672 34.5938 li
253.734 34.5938 li
253.734 34.5938 li
253.797 34.5938 li
253.797 34.5938 li
253.859 34.5938 li
253.859 34.5938 li
253.922 34.5938 li
253.922 34.5938 li
253.984 34.5938 li
253.984 34.5938 li
253.984 34.5938 li
254.047 34.5938 li
254.047 34.5938 li
254.109 34.5938 li
254.109 34.5938 li
254.172 34.5938 li
254.172 34.5938 li
254.234 34.0313 li
254.234 34.0313 li
254.297 34.0313 li
254.297 34.0313 li
254.359 34.0313 li
254.359 34.0313 li
254.422 34.0313 li
254.422 34.0313 li
254.422 34.0313 li
254.484 34.0313 li
254.484 34.0313 li
254.547 34.0313 li
254.547 34.0313 li
254.609 34.0313 li
254.609 33.5313 li
254.672 33.5313 li
254.672 33.5313 li
254.734 33.5313 li
254.734 33.5313 li
254.797 33.5313 li
254.797 33.5313 li
254.859 33.5313 li
254.859 33.5313 li
254.922 33.5313 li
254.922 33.5313 li
254.922 33.5313 li
254.984 32.9688 li
254.984 32.9688 li
255.047 32.9688 li
255.047 32.9688 li
255.109 32.9688 li
255.109 32.9688 li
255.172 32.9688 li
255.172 32.9688 li
255.234 32.9688 li
255.234 32.9688 li
255.297 32.9688 li
255.297 32.4063 li
255.359 32.4063 li
255.359 32.4063 li
255.359 32.4063 li
255.422 32.4063 li
255.422 32.4063 li
255.484 32.4063 li
255.484 32.4063 li
255.547 32.4063 li
255.547 32.4063 li
255.609 32.4063 li
255.609 32.4063 li
255.672 32.4063 li
255.672 32.4063 li
255.734 32.4063 li
255.734 32.4063 li
255.797 32.4063 li
255.797 32.4063 li
255.859 32.4063 li
255.859 32.4063 li
255.859 32.4063 li
255.922 32.4063 li
255.922 32.4063 li
255.984 32.4063 li
255.984 32.4063 li
256.047 32.4063 li
256.047 32.4063 li
256.109 32.4063 li
256.109 32.4063 li
256.172 32.4063 li
256.172 32.4063 li
256.234 32.4063 li
256.234 32.4063 li
256.297 32.4063 li
256.297 32.4063 li
256.297 32.4063 li
256.359 32.4063 li
256.359 32.4063 li
256.422 32.4063 li
256.422 32.4063 li
256.484 32.4063 li
256.484 32.4063 li
256.547 32.4063 li
256.547 32.4063 li
256.609 32.4063 li
256.609 32.4063 li
256.672 32.4063 li
256.672 32.4063 li
256.734 32.9688 li
256.734 32.9688 li
256.734 32.9688 li
256.797 32.9688 li
256.797 32.9688 li
256.859 32.9688 li
256.859 32.9688 li
256.922 32.9688 li
256.922 32.9688 li
256.984 32.9688 li
256.984 32.9688 li
257.047 33.5313 li
257.047 33.5313 li
257.109 33.5313 li
257.109 33.5313 li
257.172 33.5313 li
257.172 33.5313 li
257.234 33.5313 li
257.234 33.5313 li
257.234 33.5313 li
257.297 33.5313 li
257.297 33.5313 li
257.359 33.5313 li
257.359 34.0313 li
257.422 34.0313 li
257.422 34.0313 li
257.484 34.0313 li
257.484 34.0313 li
257.547 34.0313 li
257.547 34.0313 li
257.609 34.0313 li
257.609 34.0313 li
257.672 34.0313 li
257.672 34.0313 li
257.672 34.0313 li
257.734 34.0313 li
257.734 34.0313 li
257.797 34.0313 li
257.797 34.0313 li
257.859 34.0313 li
257.859 34.5938 li
257.922 34.5938 li
257.922 34.5938 li
257.984 34.5938 li
257.984 34.5938 li
258.047 34.5938 li
258.047 34.5938 li
258.109 34.5938 li
258.109 34.5938 li
258.172 34.5938 li
258.172 34.5938 li
258.172 34.5938 li
258.234 34.5938 li
258.234 34.5938 li
258.297 34.5938 li
258.297 34.5938 li
258.359 34.5938 li
258.359 34.5938 li
258.422 34.5938 li
258.422 34.5938 li
258.484 34.5938 li
258.484 34.5938 li
258.547 34.5938 li
258.547 34.5938 li
258.609 34.5938 li
258.609 34.5938 li
258.609 34.5938 li
258.672 34.0313 li
258.672 34.0313 li
258.734 34.0313 li
258.734 34.0313 li
258.797 34.0313 li
258.797 34.0313 li
258.859 34.0313 li
258.859 34.0313 li
258.922 34.0313 li
258.922 34.0313 li
258.984 34.0313 li
258.984 34.0313 li
259.047 34.0313 li
259.047 34.0313 li
259.047 34.0313 li
259.109 34.0313 li
259.109 33.5313 li
259.172 33.5313 li
259.172 33.5313 li
259.234 33.5313 li
259.234 33.5313 li
259.297 33.5313 li
259.297 33.5313 li
259.359 33.5313 li
259.359 33.5313 li
259.422 33.5313 li
259.422 33.5313 li
259.484 33.5313 li
259.484 32.9688 li
259.547 32.9688 li
259.547 32.9688 li
259.547 32.9688 li
259.609 32.9688 li
259.609 32.9688 li
259.672 32.9688 li
259.672 32.9688 li
259.734 32.9688 li
259.734 32.9688 li
259.797 32.9688 li
259.797 32.9688 li
259.859 32.4063 li
259.859 32.9688 li
259.922 32.4063 li
259.922 32.4063 li
259.984 32.4063 li
259.984 32.4063 li
259.984 32.4063 li
260.047 32.4063 li
260.047 32.4063 li
260.109 32.4063 li
260.109 32.4063 li
260.172 32.4063 li
260.172 32.4063 li
260.234 32.4063 li
260.234 32.4063 li
260.297 32.4063 li
260.297 32.4063 li
260.359 32.4063 li
260.359 32.4063 li
260.422 32.4063 li
260.422 32.4063 li
260.484 32.4063 li
260.484 32.4063 li
260.484 32.4063 li
260.547 32.4063 li
260.547 32.4063 li
260.609 32.4063 li
260.609 32.4063 li
260.672 32.4063 li
260.672 32.4063 li
260.734 32.4063 li
260.734 32.4063 li
260.797 32.4063 li
260.797 32.4063 li
260.859 32.4063 li
260.859 32.4063 li
260.922 32.4063 li
260.922 32.4063 li
260.922 32.4063 li
260.984 32.4063 li
260.984 32.4063 li
261.047 32.4063 li
261.047 32.4063 li
261.109 32.4063 li
261.109 32.4063 li
261.172 32.4063 li
261.172 32.4063 li
261.234 32.9688 li
261.234 32.9688 li
261.297 32.9688 li
261.297 32.9688 li
261.359 32.9688 li
261.359 32.9688 li
261.422 32.9688 li
261.422 32.9688 li
261.422 32.9688 li
261.484 32.9688 li
261.484 32.9688 li
261.547 32.9688 li
261.547 32.9688 li
261.609 33.5313 li
261.609 33.5313 li
261.672 33.5313 li
261.672 33.5313 li
261.734 33.5313 li
261.734 33.5313 li
261.797 33.5313 li
261.797 33.5313 li
261.859 33.5313 li
261.859 33.5313 li
261.859 33.5313 li
261.922 33.5313 li
261.922 33.5313 li
261.984 33.5313 li
261.984 34.0313 li
262.047 34.0313 li
262.047 34.0313 li
262.109 34.0313 li
262.109 34.0313 li
262.172 34.0313 li
262.172 34.0313 li
262.234 34.0313 li
262.234 34.0313 li
262.297 34.0313 li
262.297 34.0313 li
262.297 34.0313 li
262.359 34.0313 li
262.359 34.0313 li
262.422 34.0313 li
262.422 34.0313 li
262.484 34.0313 li
262.484 34.0313 li
262.547 34.0313 li
262.547 34.5938 li
262.609 34.5938 li
262.609 34.5938 li
262.672 34.5938 li
262.672 34.5938 li
262.734 34.5938 li
262.734 34.5938 li
262.797 34.5938 li
262.797 34.5938 li
262.797 34.5938 li
262.859 34.5938 li
262.859 34.5938 li
262.922 34.5938 li
262.922 34.5938 li
262.984 34.5938 li
262.984 34.5938 li
263.047 34.5938 li
263.047 34.5938 li
263.109 34.0313 li
263.109 34.0313 li
263.172 34.5938 li
263.172 34.0313 li
263.234 34.0313 li
263.234 34.0313 li
263.234 34.0313 li
263.297 34.0313 li
263.297 34.0313 li
263.359 34.0313 li
263.359 34.0313 li
263.422 34.0313 li
263.422 34.0313 li
263.484 34.0313 li
263.484 34.0313 li
263.547 34.0313 li
263.547 34.0313 li
263.609 34.0313 li
263.609 34.0313 li
263.672 34.0313 li
263.672 33.5313 li
263.734 33.5313 li
263.734 33.5313 li
263.734 33.5313 li
263.797 33.5313 li
263.797 33.5313 li
263.859 33.5313 li
263.859 33.5313 li
263.922 33.5313 li
263.922 33.5313 li
263.984 33.5313 li
263.984 33.5313 li
264.047 33.5313 li
264.047 32.9688 li
264.109 32.9688 li
264.109 32.9688 li
264.172 32.9688 li
264.172 32.9688 li
264.172 32.9688 li
264.234 32.9688 li
264.234 32.9688 li
264.297 32.9688 li
264.297 32.9688 li
264.359 32.9688 li
264.359 32.9688 li
264.422 32.9688 li
264.422 32.4063 li
264.484 32.4063 li
264.484 32.4063 li
264.547 32.4063 li
264.547 32.4063 li
264.609 32.4063 li
264.609 32.4063 li
264.609 32.4063 li
264.672 32.4063 li
264.672 32.4063 li
264.734 32.4063 li
264.734 32.4063 li
264.797 32.4063 li
264.797 32.4063 li
264.859 32.4063 li
264.859 32.4063 li
264.922 32.4063 li
264.922 32.4063 li
264.984 32.4063 li
264.984 32.4063 li
265.047 32.4063 li
265.047 32.4063 li
265.109 32.4063 li
265.109 32.4063 li
265.109 32.4063 li
265.172 32.4063 li
265.172 32.4063 li
265.234 32.4063 li
265.234 32.4063 li
265.297 32.4063 li
265.297 32.4063 li
265.359 32.4063 li
265.359 32.4063 li
265.422 32.4063 li
265.422 32.4063 li
265.484 32.4063 li
265.484 32.4063 li
265.547 32.4063 li
265.547 32.4063 li
265.547 32.4063 li
265.609 32.4063 li
265.609 32.4063 li
265.672 32.4063 li
265.672 32.4063 li
265.734 32.9688 li
265.734 32.9688 li
265.797 32.9688 li
265.797 32.9688 li
265.859 32.9688 li
265.859 32.9688 li
265.922 32.9688 li
265.922 32.9688 li
265.984 32.9688 li
265.984 32.9688 li
266.047 32.9688 li
266.047 32.9688 li
266.047 32.9688 li
266.109 32.9688 li
266.109 32.9688 li
266.172 32.9688 li
266.172 32.9688 li
266.234 33.5313 li
266.234 33.5313 li
266.297 33.5313 li
266.297 33.5313 li
266.359 33.5313 li
266.359 33.5313 li
266.422 33.5313 li
266.422 33.5313 li
266.484 33.5313 li
266.484 33.5313 li
266.484 33.5313 li
266.547 33.5313 li
266.547 33.5313 li
266.609 34.0313 li
266.609 34.0313 li
266.672 34.0313 li
266.672 34.0313 li
266.734 34.0313 li
266.734 34.0313 li
266.797 34.0313 li
266.797 34.0313 li
266.859 34.0313 li
266.859 34.0313 li
266.922 34.0313 li
266.922 34.0313 li
266.984 34.0313 li
266.984 34.0313 li
266.984 34.0313 li
267.047 34.0313 li
267.047 34.0313 li
267.109 34.0313 li
267.109 34.0313 li
267.172 34.0313 li
267.172 34.0313 li
267.234 34.0313 li
267.234 34.0313 li
267.297 34.0313 li
267.297 34.5938 li
267.359 34.0313 li
267.359 34.0313 li
267.422 34.0313 li
267.422 34.5938 li
267.422 34.0313 li
267.484 34.0313 li
267.484 34.0313 li
267.547 34.0313 li
267.547 34.0313 li
267.609 34.0313 li
267.609 34.0313 li
267.672 34.0313 li
267.672 34.0313 li
267.734 34.0313 li
267.734 34.0313 li
267.797 34.0313 li
267.797 34.0313 li
267.859 34.0313 li
267.859 34.0313 li
267.859 34.0313 li
267.922 34.0313 li
267.922 34.0313 li
267.984 34.0313 li
267.984 34.0313 li
268.047 34.0313 li
268.047 34.0313 li
268.109 34.0313 li
268.109 34.0313 li
268.172 34.0313 li
268.172 33.5313 li
268.234 33.5313 li
268.234 33.5313 li
268.297 33.5313 li
268.297 33.5313 li
268.359 33.5313 li
268.359 33.5313 li
268.359 33.5313 li
268.422 33.5313 li
268.422 33.5313 li
268.484 33.5313 li
268.484 33.5313 li
268.547 33.5313 li
268.547 33.5313 li
268.609 32.9688 li
268.609 32.9688 li
268.672 32.9688 li
268.672 32.9688 li
268.734 32.9688 li
268.734 32.9688 li
268.797 32.9688 li
268.797 32.9688 li
268.797 32.9688 li
268.859 32.9688 li
268.859 32.9688 li
268.922 32.9688 li
268.922 32.9688 li
268.984 32.9688 li
268.984 32.9688 li
269.047 32.9688 li
269.047 32.4063 li
269.109 32.4063 li
269.109 32.4063 li
269.172 32.4063 li
269.172 32.4063 li
269.234 32.4063 li
269.234 32.4063 li
269.297 32.4063 li
269.297 32.4063 li
269.297 32.4063 li
269.359 32.4063 li
269.359 32.4063 li
269.422 32.4063 li
269.422 32.4063 li
269.484 32.4063 li
269.484 32.4063 li
269.547 32.4063 li
269.547 32.4063 li
269.609 32.4063 li
269.609 32.4063 li
269.672 32.4063 li
269.672 32.4063 li
269.734 32.4063 li
269.734 32.4063 li
269.734 32.4063 li
269.797 32.4063 li
269.797 32.4063 li
269.859 32.4063 li
269.859 32.4063 li
269.922 32.4063 li
269.922 32.4063 li
269.984 32.4063 li
269.984 32.4063 li
270.047 32.4063 li
270.047 32.4063 li
270.109 32.4063 li
270.109 32.4063 li
270.172 32.4063 li
270.172 32.4063 li
270.234 32.4063 li
270.234 32.4063 li
270.234 32.4063 li
270.297 32.4063 li
270.297 32.9688 li
270.359 32.9688 li
270.359 32.9688 li
270.422 32.9688 li
270.422 32.9688 li
270.484 32.9688 li
270.484 32.9688 li
270.547 32.9688 li
270.547 32.9688 li
270.609 32.9688 li
270.609 32.9688 li
270.672 32.9688 li
270.672 32.9688 li
270.672 32.9688 li
270.734 32.9688 li
270.734 33.5313 li
270.797 33.5313 li
270.797 33.5313 li
270.859 33.5313 li
270.859 33.5313 li
270.922 33.5313 li
270.922 33.5313 li
270.984 33.5313 li
270.984 33.5313 li
271.047 33.5313 li
271.047 33.5313 li
271.109 33.5313 li
271.109 33.5313 li
271.109 33.5313 li
271.172 33.5313 li
271.172 33.5313 li
271.234 34.0313 li
271.234 34.0313 li
271.297 34.0313 li
271.297 34.0313 li
271.359 34.0313 li
271.359 34.0313 li
271.422 34.0313 li
271.422 34.0313 li
271.484 34.0313 li
271.484 34.0313 li
271.547 34.0313 li
271.547 34.0313 li
271.609 34.0313 li
271.609 34.0313 li
271.609 34.0313 li
271.672 34.0313 li
271.672 34.0313 li
271.734 34.0313 li
271.734 34.0313 li
271.797 34.0313 li
271.797 34.0313 li
271.859 34.0313 li
271.859 34.0313 li
271.922 34.0313 li
271.922 34.0313 li
271.984 34.0313 li
271.984 34.0313 li
272.047 34.0313 li
272.047 34.0313 li
272.047 34.0313 li
272.109 34.0313 li
272.109 34.0313 li
272.172 34.0313 li
272.172 34.0313 li
272.234 34.0313 li
272.234 34.0313 li
272.297 34.0313 li
272.297 34.0313 li
272.359 34.0313 li
272.359 34.0313 li
272.422 34.0313 li
272.422 34.0313 li
272.484 34.0313 li
272.484 34.0313 li
272.547 34.0313 li
272.547 34.0313 li
272.547 34.0313 li
272.609 34.0313 li
272.609 34.0313 li
272.672 33.5313 li
272.672 33.5313 li
272.734 33.5313 li
272.734 33.5313 li
272.797 33.5313 li
272.797 33.5313 li
272.859 33.5313 li
272.859 33.5313 li
272.922 33.5313 li
272.922 33.5313 li
272.984 33.5313 li
272.984 33.5313 li
272.984 33.5313 li
273.047 33.5313 li
273.047 33.5313 li
273.109 33.5313 li
273.109 33.5313 li
273.172 33.5313 li
273.172 32.9688 li
273.234 32.9688 li
273.234 32.9688 li
273.297 32.9688 li
273.297 32.9688 li
273.359 32.9688 li
273.359 32.9688 li
273.422 32.9688 li
273.422 32.9688 li
273.422 32.9688 li
273.484 32.9688 li
273.484 32.9688 li
273.547 32.9688 li
273.547 32.9688 li
273.609 32.9688 li
273.609 32.9688 li
273.672 32.4063 li
273.672 32.4063 li
273.734 32.4063 li
273.734 32.4063 li
273.797 32.4063 li
273.797 32.4063 li
273.859 32.4063 li
273.859 32.4063 li
273.922 32.4063 li
273.922 32.4063 li
273.922 32.4063 li
273.984 32.4063 li
273.984 32.4063 li
274.047 32.4063 li
274.047 32.4063 li
274.109 32.4063 li
274.109 32.4063 li
274.172 32.4063 li
274.172 32.4063 li
274.234 32.4063 li
274.234 32.4063 li
274.297 32.4063 li
274.297 32.4063 li
274.359 32.4063 li
274.359 32.4063 li
274.359 32.4063 li
274.422 32.4063 li
274.422 32.4063 li
274.484 32.4063 li
274.484 32.4063 li
274.547 32.4063 li
274.547 32.4063 li
274.609 32.4063 li
274.609 32.4063 li
274.672 32.4063 li
274.672 32.4063 li
274.734 32.4063 li
274.734 32.4063 li
274.797 32.4063 li
274.797 32.4063 li
274.859 32.4063 li
274.859 32.4063 li
274.859 32.9688 li
274.922 32.9688 li
274.922 32.9688 li
274.984 32.9688 li
274.984 32.9688 li
275.047 32.9688 li
275.047 32.9688 li
275.109 32.9688 li
275.109 32.9688 li
275.172 32.9688 li
275.172 32.9688 li
275.234 32.9688 li
275.234 32.9688 li
275.297 32.9688 li
275.297 32.9688 li
275.297 32.9688 li
275.359 32.9688 li
275.359 33.5313 li
275.422 33.5313 li
275.422 33.5313 li
275.484 33.5313 li
275.484 33.5313 li
275.547 33.5313 li
275.547 33.5313 li
275.609 33.5313 li
275.609 33.5313 li
275.672 33.5313 li
275.672 33.5313 li
275.734 33.5313 li
275.734 33.5313 li
275.797 33.5313 li
275.797 33.5313 li
275.797 34.0313 li
275.859 34.0313 li
275.859 34.0313 li
275.922 34.0313 li
275.922 34.0313 li
275.984 34.0313 li
275.984 34.0313 li
276.047 34.0313 li
276.047 34.0313 li
276.109 34.0313 li
276.109 34.0313 li
276.172 34.0313 li
276.172 34.0313 li
276.234 34.0313 li
276.234 34.0313 li
276.234 34.0313 li
276.297 34.0313 li
276.297 34.0313 li
276.359 34.0313 li
276.359 34.0313 li
276.422 34.0313 li
276.422 34.0313 li
276.484 34.0313 li
276.484 34.0313 li
276.547 34.0313 li
276.547 34.0313 li
276.609 34.0313 li
276.609 34.0313 li
276.672 34.0313 li
276.672 34.0313 li
276.672 34.0313 li
276.734 34.0313 li
276.734 34.0313 li
276.797 34.0313 li
276.797 34.0313 li
276.859 34.0313 li
276.859 34.0313 li
276.922 34.0313 li
276.922 34.0313 li
276.984 34.0313 li
276.984 34.0313 li
277.047 34.0313 li
277.047 34.0313 li
277.109 34.0313 li
277.109 34.0313 li
277.172 33.5313 li
277.172 33.5313 li
277.172 33.5313 li
277.234 33.5313 li
277.234 33.5313 li
277.297 33.5313 li
277.297 33.5313 li
277.359 33.5313 li
277.359 33.5313 li
277.422 33.5313 li
277.422 33.5313 li
277.484 33.5313 li
277.484 33.5313 li
277.547 33.5313 li
277.547 33.5313 li
277.609 33.5313 li
277.609 33.5313 li
277.609 33.5313 li
277.672 33.5313 li
277.672 33.5313 li
277.734 32.9688 li
277.734 32.9688 li
277.797 32.9688 li
277.797 32.9688 li
277.859 32.9688 li
277.859 32.9688 li
277.922 32.9688 li
277.922 32.9688 li
277.984 32.9688 li
277.984 32.9688 li
278.047 32.9688 li
278.047 32.9688 li
278.109 32.9688 li
278.109 32.9688 li
278.109 32.9688 li
278.172 32.9688 li
278.172 32.9688 li
278.234 32.4063 li
278.234 32.4063 li
278.297 32.4063 li
278.297 32.4063 li
278.359 32.4063 li
278.359 32.4063 li
278.422 32.4063 li
278.422 32.4063 li
278.484 32.4063 li
278.484 32.4063 li
278.547 32.4063 li
278.547 32.4063 li
278.547 32.4063 li
278.609 32.4063 li
278.609 32.4063 li
278.672 32.4063 li
278.672 32.4063 li
278.734 32.4063 li
278.734 32.4063 li
278.797 32.4063 li
278.797 32.4063 li
278.859 32.4063 li
278.859 32.4063 li
278.922 32.4063 li
278.922 32.4063 li
278.984 32.4063 li
278.984 32.4063 li
278.984 32.4063 li
279.047 32.4063 li
279.047 32.4063 li
279.109 32.4063 li
279.109 32.4063 li
279.172 32.4063 li
279.172 32.4063 li
279.234 32.4063 li
279.234 32.4063 li
279.297 32.4063 li
279.297 32.4063 li
279.359 32.4063 li
279.359 32.4063 li
279.422 32.4063 li
279.422 32.4063 li
279.484 32.4063 li
279.484 32.9688 li
279.484 32.9688 li
279.547 32.9688 li
279.547 32.9688 li
279.609 32.9688 li
279.609 32.9688 li
279.672 32.9688 li
279.672 32.9688 li
279.734 32.9688 li
279.734 32.9688 li
279.797 32.9688 li
279.797 32.9688 li
279.859 32.9688 li
279.859 32.9688 li
279.922 32.9688 li
279.922 32.9688 li
279.922 33.5313 li
279.984 33.5313 li
279.984 33.5313 li
280.047 33.5313 li
280.047 33.5313 li
280.109 33.5313 li
280.109 33.5313 li
280.172 33.5313 li
280.172 33.5313 li
280.234 33.5313 li
280.234 33.5313 li
280.297 33.5313 li
280.297 33.5313 li
280.359 33.5313 li
280.359 33.5313 li
280.422 33.5313 li
280.422 33.5313 li
280.422 33.5313 li
280.484 33.5313 li
280.484 33.5313 li
280.547 33.5313 li
280.547 33.5313 li
280.609 34.0313 li
280.609 34.0313 li
280.672 34.0313 li
280.672 34.0313 li
280.734 34.0313 li
280.734 34.0313 li
280.797 34.0313 li
280.797 34.0313 li
280.859 34.0313 li
280.859 34.0313 li
280.859 34.0313 li
280.922 34.0313 li
280.922 34.0313 li
280.984 34.0313 li
280.984 34.0313 li
281.047 34.0313 li
281.047 34.0313 li
281.109 34.0313 li
281.109 34.0313 li
281.172 34.0313 li
281.172 34.0313 li
281.234 34.0313 li
281.234 34.0313 li
281.297 34.0313 li
281.297 34.0313 li
281.359 34.0313 li
281.359 34.0313 li
281.359 34.0313 li
281.422 34.0313 li
281.422 34.0313 li
281.484 34.0313 li
281.484 34.0313 li
281.547 34.0313 li
281.547 34.0313 li
281.609 34.0313 li
281.609 34.0313 li
281.672 34.0313 li
281.672 33.5313 li
281.734 33.5313 li
281.734 33.5313 li
281.797 33.5313 li
281.797 33.5313 li
281.797 33.5313 li
281.859 33.5313 li
281.859 33.5313 li
281.922 33.5313 li
281.922 33.5313 li
281.984 33.5313 li
281.984 33.5313 li
282.047 33.5313 li
282.047 33.5313 li
282.109 33.5313 li
282.109 33.5313 li
282.172 33.5313 li
282.172 33.5313 li
282.234 32.9688 li
282.234 32.9688 li
282.234 32.9688 li
282.297 32.9688 li
282.297 32.9688 li
282.359 32.9688 li
282.359 32.9688 li
282.422 32.9688 li
282.422 32.9688 li
282.484 32.9688 li
282.484 32.9688 li
282.547 32.9688 li
282.547 32.9688 li
282.609 32.9688 li
282.609 32.9688 li
282.672 32.9688 li
282.672 32.9688 li
282.734 32.9688 li
282.734 32.9688 li
282.734 32.9688 li
282.797 32.9688 li
282.797 32.4063 li
282.859 32.4063 li
282.859 32.4063 li
282.922 32.4063 li
282.922 32.4063 li
282.984 32.4063 li
282.984 32.4063 li
283.047 32.4063 li
283.047 32.4063 li
283.109 32.4063 li
283.109 32.4063 li
283.172 32.4063 li
283.172 32.4063 li
283.172 32.4063 li
283.234 32.4063 li
283.234 32.4063 li
283.297 32.4063 li
283.297 32.4063 li
283.359 32.4063 li
283.359 32.4063 li
283.422 32.4063 li
283.422 32.4063 li
283.484 32.4063 li
283.484 32.4063 li
283.547 32.4063 li
283.547 32.4063 li
283.609 32.4063 li
283.609 32.4063 li
283.672 32.4063 li
283.672 32.4063 li
283.672 32.4063 li
283.734 32.4063 li
283.734 32.4063 li
283.797 32.4063 li
283.797 32.4063 li
283.859 32.4063 li
283.859 32.4063 li
283.922 32.4063 li
283.922 32.4063 li
283.984 32.4063 li
283.984 32.4063 li
284.047 32.9688 li
284.047 32.9688 li
284.109 32.9688 li
284.109 32.9688 li
284.109 32.9688 li
284.172 32.9688 li
284.172 32.9688 li
284.234 32.9688 li
284.234 32.9688 li
284.297 32.9688 li
284.297 32.9688 li
284.359 32.9688 li
284.359 32.9688 li
284.422 32.9688 li
284.422 32.9688 li
284.484 32.9688 li
284.484 32.9688 li
284.547 32.9688 li
284.547 32.9688 li
284.547 32.9688 li
284.609 32.9688 li
284.609 33.5313 li
284.672 33.5313 li
284.672 33.5313 li
284.734 33.5313 li
284.734 33.5313 li
284.797 33.5313 li
284.797 33.5313 li
284.859 33.5313 li
284.859 33.5313 li
284.922 33.5313 li
284.922 33.5313 li
284.984 33.5313 li
284.984 33.5313 li
285.047 33.5313 li
285.047 33.5313 li
285.047 33.5313 li
285.109 33.5313 li
285.109 33.5313 li
285.172 33.5313 li
285.172 33.5313 li
285.234 33.5313 li
285.234 33.5313 li
285.297 33.5313 li
285.297 33.5313 li
285.359 34.0313 li
285.359 33.5313 li
285.422 34.0313 li
285.422 34.0313 li
285.484 34.0313 li
285.484 34.0313 li
285.484 34.0313 li
285.547 34.0313 li
285.547 34.0313 li
285.609 34.0313 li
285.609 34.0313 li
285.672 34.0313 li
285.672 34.0313 li
285.734 34.0313 li
285.734 34.0313 li
285.797 34.0313 li
285.797 34.0313 li
285.859 34.0313 li
285.859 34.0313 li
285.922 34.0313 li
285.922 34.0313 li
285.984 33.5313 li
285.984 34.0313 li
285.984 34.0313 li
286.047 34.0313 li
286.047 33.5313 li
286.109 33.5313 li
286.109 33.5313 li
286.172 33.5313 li
286.172 33.5313 li
286.234 33.5313 li
286.234 33.5313 li
286.297 33.5313 li
286.297 33.5313 li
286.359 33.5313 li
286.359 33.5313 li
286.422 33.5313 li
286.422 33.5313 li
286.422 33.5313 li
286.484 33.5313 li
286.484 33.5313 li
286.547 33.5313 li
286.547 33.5313 li
286.609 33.5313 li
286.609 33.5313 li
286.672 33.5313 li
286.672 33.5313 li
286.734 33.5313 li
286.734 33.5313 li
286.797 32.9688 li
286.797 32.9688 li
286.859 32.9688 li
286.859 32.9688 li
286.922 32.9688 li
286.922 32.9688 li
286.922 32.9688 li
286.984 32.9688 li
286.984 32.9688 li
287.047 32.9688 li
287.047 32.9688 li
287.109 32.9688 li
287.109 32.9688 li
287.172 32.9688 li
287.172 32.9688 li
287.234 32.9688 li
287.234 32.9688 li
287.297 32.9688 li
287.297 32.9688 li
287.359 32.9688 li
287.359 32.9688 li
287.359 32.9688 li
287.422 32.4063 li
287.422 32.4063 li
287.484 32.4063 li
287.484 32.4063 li
287.547 32.4063 li
287.547 32.4063 li
287.609 32.4063 li
287.609 32.4063 li
287.672 32.4063 li
287.672 32.4063 li
287.734 32.4063 li
287.734 32.4063 li
287.797 32.4063 li
287.797 32.4063 li
287.797 32.4063 li
287.859 32.4063 li
287.859 32.4063 li
287.922 32.4063 li
287.922 32.4063 li
287.984 32.4063 li
287.984 32.4063 li
288.047 32.4063 li
288.047 32.4063 li
288.109 32.4063 li
288.109 32.4063 li
288.172 32.4063 li
288.172 32.4063 li
288.234 32.4063 li
288.234 32.4063 li
288.297 32.4063 li
288.297 32.4063 li
288.297 32.4063 li
288.359 32.4063 li
288.359 32.4063 li
288.422 32.4063 li
288.422 32.4063 li
288.484 32.4063 li
288.484 32.9688 li
288.547 32.9688 li
288.547 32.9688 li
288.609 32.9688 li
288.609 32.9688 li
288.672 32.9688 li
288.672 32.9688 li
288.734 32.9688 li
288.734 32.9688 li
288.734 32.9688 li
288.797 32.9688 li
288.797 32.9688 li
288.859 32.9688 li
288.859 32.9688 li
288.922 32.9688 li
288.922 32.9688 li
288.984 32.9688 li
288.984 32.9688 li
289.047 32.9688 li
289.047 32.9688 li
289.109 32.9688 li
289.109 32.9688 li
289.172 32.9688 li
289.172 32.9688 li
289.234 33.5313 li
289.234 33.5313 li
289.234 33.5313 li
289.297 33.5313 li
289.297 33.5313 li
289.359 33.5313 li
289.359 33.5313 li
289.422 33.5313 li
289.422 33.5313 li
289.484 33.5313 li
289.484 33.5313 li
289.547 33.5313 li
289.547 33.5313 li
289.609 33.5313 li
289.609 33.5313 li
289.672 33.5313 li
289.672 33.5313 li
289.672 33.5313 li
289.734 33.5313 li
289.734 33.5313 li
289.797 33.5313 li
289.797 33.5313 li
289.859 33.5313 li
289.859 33.5313 li
289.922 33.5313 li
289.922 33.5313 li
289.984 33.5313 li
289.984 33.5313 li
290.047 33.5313 li
290.047 33.5313 li
290.109 33.5313 li
290.109 33.5313 li
290.172 33.5313 li
290.172 33.5313 li
290.172 33.5313 li
290.234 33.5313 li
290.234 34.0313 li
290.297 33.5313 li
290.297 33.5313 li
290.359 33.5313 li
290.359 33.5313 li
290.422 33.5313 li
290.422 33.5313 li
290.484 33.5313 li
290.484 33.5313 li
290.547 33.5313 li
290.547 33.5313 li
290.609 33.5313 li
290.609 33.5313 li
290.609 33.5313 li
290.672 33.5313 li
290.672 33.5313 li
290.734 33.5313 li
290.734 33.5313 li
290.797 33.5313 li
290.797 33.5313 li
290.859 33.5313 li
290.859 33.5313 li
290.922 33.5313 li
290.922 33.5313 li
290.984 33.5313 li
290.984 33.5313 li
291.047 33.5313 li
291.047 33.5313 li
291.047 33.5313 li
291.109 33.5313 li
291.109 33.5313 li
291.172 33.5313 li
291.172 33.5313 li
291.234 32.9688 li
291.234 32.9688 li
291.297 32.9688 li
291.297 32.9688 li
291.359 32.9688 li
291.359 32.9688 li
291.422 32.9688 li
291.422 32.9688 li
291.484 32.9688 li
291.484 32.9688 li
291.547 32.9688 li
291.547 32.9688 li
291.547 32.9688 li
291.609 32.9688 li
291.609 32.9688 li
291.672 32.9688 li
291.672 32.9688 li
291.734 32.9688 li
291.734 32.9688 li
291.797 32.9688 li
291.797 32.9688 li
291.859 32.9688 li
291.859 32.9688 li
291.922 32.9688 li
291.922 32.4063 li
291.984 32.4063 li
291.984 32.4063 li
291.984 32.4063 li
292.047 32.4063 li
292.047 32.4063 li
292.109 32.4063 li
292.109 32.4063 li
292.172 32.4063 li
292.172 32.4063 li
292.234 32.4063 li
292.234 32.4063 li
292.297 32.4063 li
292.297 32.4063 li
292.359 32.4063 li
292.359 32.4063 li
292.422 32.4063 li
292.422 32.4063 li
292.484 32.4063 li
292.484 32.4063 li
292.484 32.4063 li
292.547 32.4063 li
292.547 32.4063 li
292.609 32.4063 li
292.609 32.4063 li
292.672 32.4063 li
292.672 32.4063 li
292.734 32.4063 li
292.734 32.4063 li
292.797 32.4063 li
292.797 32.4063 li
292.859 32.4063 li
292.859 32.4063 li
292.922 32.4063 li
292.922 32.4063 li
292.922 32.4063 li
292.984 32.4063 li
292.984 32.4063 li
293.047 32.4063 li
293.047 32.4063 li
293.109 32.4063 li
293.109 32.4063 li
293.172 32.9688 li
293.172 32.9688 li
293.234 32.9688 li
293.234 32.9688 li
293.297 32.9688 li
293.297 32.9688 li
293.359 32.9688 li
293.359 32.9688 li
293.359 32.9688 li
293.422 32.9688 li
293.422 32.9688 li
293.484 32.9688 li
293.484 32.9688 li
293.547 32.9688 li
293.547 32.9688 li
293.609 32.9688 li
293.609 32.9688 li
293.672 32.9688 li
293.672 32.9688 li
293.734 32.9688 li
293.734 32.9688 li
293.797 32.9688 li
293.797 32.9688 li
293.859 32.9688 li
293.859 32.9688 li
293.859 33.5313 li
293.922 32.9688 li
293.922 33.5313 li
293.984 33.5313 li
293.984 33.5313 li
294.047 33.5313 li
294.047 33.5313 li
294.109 33.5313 li
294.109 33.5313 li
294.172 33.5313 li
294.172 33.5313 li
294.234 33.5313 li
294.234 33.5313 li
294.297 33.5313 li
294.297 33.5313 li
294.297 33.5313 li
294.359 33.5313 li
294.359 33.5313 li
294.422 33.5313 li
294.422 33.5313 li
294.484 33.5313 li
294.484 33.5313 li
294.547 33.5313 li
294.547 33.5313 li
294.609 33.5313 li
294.609 33.5313 li
294.672 33.5313 li
294.672 33.5313 li
294.734 33.5313 li
294.734 33.5313 li
294.797 33.5313 li
294.797 33.5313 li
294.797 33.5313 li
294.859 33.5313 li
294.859 33.5313 li
294.922 33.5313 li
294.922 33.5313 li
294.984 33.5313 li
294.984 33.5313 li
295.047 33.5313 li
295.047 33.5313 li
295.109 33.5313 li
295.109 33.5313 li
295.172 33.5313 li
295.172 33.5313 li
295.234 33.5313 li
295.234 33.5313 li
295.234 33.5313 li
295.297 33.5313 li
295.297 33.5313 li
295.359 33.5313 li
295.359 33.5313 li
295.422 33.5313 li
295.422 33.5313 li
295.484 33.5313 li
295.484 33.5313 li
295.547 33.5313 li
295.547 33.5313 li
295.609 33.5313 li
295.609 33.5313 li
295.672 33.5313 li
295.672 33.5313 li
295.734 32.9688 li
295.734 32.9688 li
295.734 32.9688 li
295.797 32.9688 li
295.797 32.9688 li
295.859 32.9688 li
295.859 32.9688 li
295.922 32.9688 li
295.922 32.9688 li
295.984 32.9688 li
295.984 32.9688 li
296.047 32.9688 li
296.047 32.9688 li
296.109 32.9688 li
296.109 32.9688 li
296.172 32.9688 li
296.172 32.9688 li
296.172 32.9688 li
296.234 32.9688 li
296.234 32.9688 li
296.297 32.9688 li
296.297 32.9688 li
296.359 32.9688 li
296.359 32.9688 li
296.422 32.9688 li
296.422 32.4063 li
296.484 32.4063 li
296.484 32.4063 li
296.547 32.4063 li
296.547 32.4063 li
296.609 32.4063 li
296.609 32.4063 li
296.609 32.4063 li
296.672 32.4063 li
296.672 32.4063 li
296.734 32.4063 li
296.734 32.4063 li
296.797 32.4063 li
296.797 32.4063 li
296.859 32.4063 li
296.859 32.4063 li
296.922 32.4063 li
296.922 32.4063 li
296.984 32.4063 li
296.984 32.4063 li
297.047 32.4063 li
297.047 32.4063 li
297.109 32.4063 li
297.109 32.4063 li
297.109 32.4063 li
297.172 32.4063 li
297.172 32.4063 li
297.234 32.4063 li
297.234 32.4063 li
297.297 32.4063 li
297.297 32.4063 li
297.359 32.4063 li
297.359 32.4063 li
297.422 32.4063 li
297.422 32.4063 li
297.484 32.4063 li
297.484 32.4063 li
297.547 32.4063 li
297.547 32.4063 li
297.547 32.4063 li
297.609 32.4063 li
297.609 32.4063 li
297.672 32.4063 li
297.672 32.4063 li
297.734 32.9688 li
297.734 32.4063 li
297.797 32.4063 li
297.797 32.9688 li
297.859 32.9688 li
297.859 32.9688 li
297.922 32.9688 li
297.922 32.9688 li
297.984 32.9688 li
297.984 32.9688 li
298.047 32.9688 li
298.047 32.9688 li
298.047 32.9688 li
298.109 32.9688 li
298.109 32.9688 li
298.172 32.9688 li
298.172 32.9688 li
298.234 32.9688 li
298.234 32.9688 li
298.297 32.9688 li
298.297 32.9688 li
298.359 32.9688 li
298.359 32.9688 li
298.422 32.9688 li
298.422 32.9688 li
298.484 32.9688 li
298.484 32.9688 li
298.484 32.9688 li
298.547 32.9688 li
298.547 33.5313 li
298.609 33.5313 li
298.609 33.5313 li
298.672 33.5313 li
298.672 33.5313 li
298.734 33.5313 li
298.734 33.5313 li
298.797 33.5313 li
298.797 33.5313 li
298.859 33.5313 li
298.859 33.5313 li
298.922 33.5313 li
298.922 33.5313 li
298.922 33.5313 li
298.984 33.5313 li
298.984 33.5313 li
299.047 33.5313 li
299.047 33.5313 li
299.109 33.5313 li
299.109 33.5313 li
299.172 33.5313 li
299.172 33.5313 li
299.234 33.5313 li
299.234 33.5313 li
299.297 33.5313 li
299.297 33.5313 li
299.359 33.5313 li
299.359 33.5313 li
299.422 33.5313 li
299.422 33.5313 li
299.422 33.5313 li
299.484 33.5313 li
299.484 33.5313 li
299.547 33.5313 li
299.547 33.5313 li
299.609 33.5313 li
299.609 33.5313 li
299.672 33.5313 li
299.672 33.5313 li
299.734 33.5313 li
299.734 33.5313 li
299.797 33.5313 li
299.797 33.5313 li
299.859 33.5313 li
299.859 33.5313 li
299.859 33.5313 li
299.922 33.5313 li
299.922 33.5313 li
299.984 33.5313 li
299.984 33.5313 li
300.047 33.5313 li
300.047 33.5313 li
300.109 33.5313 li
300.109 33.5313 li
300.172 33.5313 li
300.172 33.5313 li
300.234 33.5313 li
300.234 32.9688 li
300.297 32.9688 li
300.297 32.9688 li
300.359 32.9688 li
300.359 32.9688 li
300.359 32.9688 li
300.422 32.9688 li
300.422 32.9688 li
300.484 32.9688 li
300.484 32.9688 li
300.547 32.9688 li
300.547 32.9688 li
300.609 32.9688 li
300.609 32.9688 li
300.672 32.9688 li
300.672 32.9688 li
300.734 32.9688 li
300.734 32.9688 li
300.797 32.9688 li
300.797 32.9688 li
300.797 32.9688 li
300.859 32.9688 li
300.859 32.9688 li
300.922 32.9688 li
300.922 32.9688 li
300.984 32.9688 li
300.984 32.9688 li
301.047 32.4063 li
301.047 32.4063 li
301.109 32.4063 li
301.109 32.4063 li
301.172 32.4063 li
301.172 32.4063 li
301.234 32.4063 li
301.234 32.4063 li
301.297 32.4063 li
301.297 32.4063 li
301.297 32.4063 li
301.359 32.4063 li
301.359 32.4063 li
301.422 32.4063 li
301.422 32.4063 li
301.484 32.4063 li
301.484 32.4063 li
301.547 32.4063 li
301.547 32.4063 li
301.609 32.4063 li
301.609 32.4063 li
301.672 32.4063 li
301.672 32.4063 li
301.734 32.4063 li
301.734 32.4063 li
301.734 32.4063 li
301.797 32.4063 li
301.797 32.4063 li
301.859 32.4063 li
301.859 32.4063 li
301.922 32.4063 li
301.922 32.4063 li
301.984 32.4063 li
301.984 32.4063 li
302.047 32.4063 li
302.047 32.4063 li
302.109 32.4063 li
302.109 32.4063 li
302.172 32.4063 li
302.172 32.4063 li
302.172 32.4063 li
302.234 32.4063 li
302.234 32.4063 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.882353 0.768627 0 0 cmyk
@
0.1875 lw
307.859 0.09375 mo
307.859 93.8438 li
26.7344 0.09375 mo
307.859 0.09375 li
26.7344 93.8438 mo
26.7344 0.09375 li
307.859 93.8438 mo
26.7344 93.8438 li
0 0 0 1 cmyk
@
0 lc
31.7969 93.8438 mo
31.7969 91.3438 li
@
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBTO+Times-Roman /Times-Roman findfont ct_VMDictPut/ZWYBTO+Times-Roman*1 [48{/.notdef}rp /zero 207{/.notdef}rp]ZWYBTO+Times-Roman nfZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf30.3984 103.813 mo(0)sh68.3594 93.8438 mo
68.3594 91.3438 li
61.0469 93.8438 mo
61.0469 92.3438 li
53.7344 93.8438 mo
53.7344 92.3438 li
46.4219 93.8438 mo
46.4219 92.3438 li
39.1094 93.8438 mo
39.1094 92.3438 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBTO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7A73D986C0D7DE9D329253DCB6E971CF9F86B9AEBF9128F879E3BA076A7524F8AC6EF0948A0BD36A1BBAD3176809EA5D8C10BC04F27D1FCF8D9BA3577509C082FF1EE49DF22B08F8B21F3A6C3932A3BC82C6C594431B4032E2BEF80E15787B3E427A047FD8FD191291F42BAC74588B21DCB1EB3232C29BA67B72B9A00CCBC571F0227C6EF50964CF91F1B0EC573A04AE3E4DF9447B77BD2A0A959F534BEC79AECEF51C27F8D677FD06B99742B747A695088E88EBCC4A6BCCC7402ABFDFE9926161D96> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBTO+Times-Roman /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/ZWYBTO+Times-Roman*1 [48{/.notdef}rp /zero 4{/.notdef}rp /five 202{/.notdef}rp]ZWYBTO+Times-Roman nfZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf66.9922 103.813 mo(5)sh104.984 93.8438 mo
104.984 91.3438 li
97.6719 93.8438 mo
97.6719 92.3438 li
90.2969 93.8438 mo
90.2969 92.3438 li
82.9844 93.8438 mo
82.9844 92.3438 li
75.6719 93.8438 mo
75.6719 92.3438 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBTO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBTO+Times-Roman /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/ZWYBTO+Times-Roman*1 [48{/.notdef}rp /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]ZWYBTO+Times-Roman nfZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf102.586 103.813 mo(10)[3 0 ]xsh141.547 93.8438 mo
141.547 91.3438 li
134.234 93.8438 mo
134.234 92.3438 li
126.922 93.8438 mo
126.922 92.3438 li
119.609 93.8438 mo
119.609 92.3438 li
112.297 93.8438 mo
112.297 92.3438 li
@
ZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf139.188 103.813 mo(15)[3 0 ]xsh178.172 93.8438 mo
178.172 91.3438 li
170.859 93.8438 mo
170.859 92.3438 li
163.547 93.8438 mo
163.547 92.3438 li
156.172 93.8438 mo
156.172 92.3438 li
148.859 93.8438 mo
148.859 92.3438 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBTO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBTO+Times-Roman /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/ZWYBTO+Times-Roman*1 [48{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]ZWYBTO+Times-Roman nfZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf175.781 103.813 mo(20)[3 0 ]xsh214.734 93.8438 mo
214.734 91.3438 li
207.422 93.8438 mo
207.422 92.3438 li
200.109 93.8438 mo
200.109 92.3438 li
192.797 93.8438 mo
192.797 92.3438 li
185.484 93.8438 mo
185.484 92.3438 li
@
ZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf212.383 103.813 mo(25)[3 0 ]xsh251.359 93.8438 mo
251.359 91.3438 li
244.047 93.8438 mo
244.047 92.3438 li
236.734 93.8438 mo
236.734 92.3438 li
229.422 93.8438 mo
229.422 92.3438 li
222.047 93.8438 mo
222.047 92.3438 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBTO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7A73D960D5C905E34DC81A096980F2B4111B9B099A6DB83E1916FF3E1A9E04B02D3E9232818F77B09A9AACB5832FED542FDDA70002EB05443C3A08AC9203ACF784CB865C5B9F7D872416879897E73175190413158DECCEEC3F81053539EF7A5BA54848FD5EF8191B77C87FC4B2FB70A247D6480306D63973D6D1E40988764838CF4D7C7CFD56B10F551336B687A8CAD70446C673C2BFDC7C6AD86547DB031DFD479DCB051DAF5177334E8CD4B35F8B65FC86BD3BDBBB8D1E2B3149970112D8374721C0AB537409EB4ADF5E62264D22634EE> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBTO+Times-Roman /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/ZWYBTO+Times-Roman*1 [48{/.notdef}rp /zero /one /two /three /.notdef /five 202{/.notdef}rp]ZWYBTO+Times-Roman nfZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf248.969 103.813 mo(30)[3 0 ]xsh287.922 93.8438 mo
287.922 91.3438 li
280.609 93.8438 mo
280.609 92.3438 li
273.297 93.8438 mo
273.297 92.3438 li
265.984 93.8438 mo
265.984 92.3438 li
258.672 93.8438 mo
258.672 92.3438 li
@
ZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf285.57 103.813 mo(35)[3 0 ]xsh26.7344 85.7188 mo
29.1719 85.7188 li
26.7344 88.4063 mo
28.1719 88.4063 li
26.7344 91.0938 mo
28.1719 91.0938 li
26.7344 93.7813 mo
28.1719 93.7813 li
302.609 93.8438 mo
302.609 92.3438 li
295.234 93.8438 mo
295.234 92.3438 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBTO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8707CDCE5666C9B3EABE1C8F3B5685DC89284E5BE559D084487449BF37D1D86EF1322476306E241C4EF3BA9B7322496F4AC15DB69BEC6340D464440EA95046229> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBTO+Times-Roman /Encoding getdup 46 /period putpop%ADOEndSubsetFont
/ZWYBTO+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /.notdef /five 202{/.notdef}rp]ZWYBTO+Times-Roman nfZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf12.9844 87.7188 mo(0.31)[3 1.5 3 0 ]xsh26.7344 72.2813 mo
29.1719 72.2813 li
26.7344 74.9688 mo
28.1719 74.9688 li
26.7344 77.6563 mo
28.1719 77.6563 li
26.7344 80.3438 mo
28.1719 80.3438 li
26.7344 83.0313 mo
28.1719 83.0313 li
@
ZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf12.9844 74.2656 mo(0.32)[3 1.5 3 0 ]xsh26.7344 58.7813 mo
29.1719 58.7813 li
26.7344 61.4688 mo
28.1719 61.4688 li
26.7344 64.1563 mo
28.1719 64.1563 li
26.7344 66.9063 mo
28.1719 66.9063 li
26.7344 69.5938 mo
28.1719 69.5938 li
@
ZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf12.9844 60.7969 mo(0.33)[3 1.5 3 0 ]xsh26.7344 45.3438 mo
29.1719 45.3438 li
26.7344 48.0313 mo
28.1719 48.0313 li
26.7344 50.7188 mo
28.1719 50.7188 li
26.7344 53.4063 mo
28.1719 53.4063 li
26.7344 56.0938 mo
28.1719 56.0938 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBTO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBTO+Times-Roman /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/ZWYBTO+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five 202{/.notdef}rp]ZWYBTO+Times-Roman nfZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf12.9844 47.3438 mo(0.34)[3 1.5 3 0 ]xsh26.7344 31.9063 mo
29.1719 31.9063 li
26.7344 34.5938 mo
28.1719 34.5938 li
26.7344 37.2813 mo
28.1719 37.2813 li
26.7344 39.9688 mo
28.1719 39.9688 li
26.7344 42.6563 mo
28.1719 42.6563 li
@
ZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf12.9844 33.8828 mo(0.35)[3 1.5 3 0 ]xsh26.7344 18.4063 mo
29.1719 18.4063 li
26.7344 21.0938 mo
28.1719 21.0938 li
26.7344 23.7813 mo
28.1719 23.7813 li
26.7344 26.5313 mo
28.1719 26.5313 li
26.7344 29.2188 mo
28.1719 29.2188 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBTO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7A73DB6D2877672A15D933475028E1A563F35D9B429BC044364BBEA6C8D8E288B5629F6BF21219495DF799C22E6D194E7EF19D2BF50638A5DFD525E61CAA756DFB58BC6CF02B70355716B1567E587BDF24EE1CD60FDA306A5E8E3EC9A065FDF865555F45DE4B3A9666958B7C5B64C412BD6705A27F81BA359AA5385B74802E199214ED2C08D85C8D9515B8A71A37E696B11B788D46272326187B79B809C5ABF82FEBD4C4DE257125A17BA43> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBTO+Times-Roman /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/ZWYBTO+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six 201{/.notdef}rp]ZWYBTO+Times-Roman nfZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf12.9844 20.4297 mo(0.36)[3 1.5 3 0 ]xsh26.7344 4.96875 mo
29.1719 4.96875 li
26.7344 7.65625 mo
28.1719 7.65625 li
26.7344 10.3438 mo
28.1719 10.3438 li
26.7344 13.0313 mo
28.1719 13.0313 li
26.7344 15.7188 mo
28.1719 15.7188 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBTO+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B7A73D94A9F40BC631635D93782351ED8A5F0B041154B50ADFD67B52AFA0970AEE10CFF4587FA64B7C1AB4D8B074E00A1BB2BDDE2ECD9CC66A> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBTO+Times-Roman /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/ZWYBTO+Times-Roman*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven 200{/.notdef}rp]ZWYBTO+Times-Roman nfZWYBTO+Times-Roman*1 [6 0 0 -6 0 0 ]msf12.9844 6.95313 mo(0.37)[3 1.5 3 0 ]xsh307.859 2.28125 mo
306.422 2.28125 li
307.859 4.96875 mo
305.422 4.96875 li
307.859 7.65625 mo
306.422 7.65625 li
307.859 10.3438 mo
306.422 10.3438 li
307.859 13.0313 mo
306.422 13.0313 li
307.859 15.7188 mo
306.422 15.7188 li
307.859 18.4063 mo
305.422 18.4063 li
307.859 21.0938 mo
306.422 21.0938 li
307.859 23.7813 mo
306.422 23.7813 li
307.859 26.5313 mo
306.422 26.5313 li
307.859 29.2188 mo
306.422 29.2188 li
307.859 31.9063 mo
305.422 31.9063 li
307.859 34.5938 mo
306.422 34.5938 li
307.859 37.2813 mo
306.422 37.2813 li
307.859 39.9688 mo
306.422 39.9688 li
307.859 42.6563 mo
306.422 42.6563 li
307.859 45.3438 mo
305.422 45.3438 li
307.859 48.0313 mo
306.422 48.0313 li
307.859 50.7188 mo
306.422 50.7188 li
307.859 53.4063 mo
306.422 53.4063 li
307.859 56.0938 mo
306.422 56.0938 li
307.859 58.7813 mo
305.422 58.7813 li
307.859 61.4688 mo
306.422 61.4688 li
307.859 64.1563 mo
306.422 64.1563 li
307.859 66.9063 mo
306.422 66.9063 li
307.859 69.5938 mo
306.422 69.5938 li
307.859 72.2813 mo
305.422 72.2813 li
307.859 74.9688 mo
306.422 74.9688 li
307.859 77.6563 mo
306.422 77.6563 li
307.859 80.3438 mo
306.422 80.3438 li
307.859 83.0313 mo
306.422 83.0313 li
307.859 85.7188 mo
305.422 85.7188 li
307.859 88.4063 mo
306.422 88.4063 li
307.859 91.0938 mo
306.422 91.0938 li
307.859 93.7813 mo
306.422 93.7813 li
302.609 0.09375 mo
302.609 1.59375 li
295.234 0.09375 mo
295.234 1.59375 li
287.922 0.09375 mo
287.922 2.53125 li
280.609 0.09375 mo
280.609 1.59375 li
273.297 0.09375 mo
273.297 1.59375 li
265.984 0.09375 mo
265.984 1.59375 li
258.672 0.09375 mo
258.672 1.59375 li
251.359 0.09375 mo
251.359 2.53125 li
244.047 0.09375 mo
244.047 1.59375 li
236.734 0.09375 mo
236.734 1.59375 li
229.422 0.09375 mo
229.422 1.59375 li
222.047 0.09375 mo
222.047 1.59375 li
214.734 0.09375 mo
214.734 2.53125 li
207.422 0.09375 mo
207.422 1.59375 li
200.109 0.09375 mo
200.109 1.59375 li
192.797 0.09375 mo
192.797 1.59375 li
185.484 0.09375 mo
185.484 1.59375 li
178.172 0.09375 mo
178.172 2.53125 li
170.859 0.09375 mo
170.859 1.59375 li
163.547 0.09375 mo
163.547 1.59375 li
156.172 0.09375 mo
156.172 1.59375 li
148.859 0.09375 mo
148.859 1.59375 li
141.547 0.09375 mo
141.547 2.53125 li
134.234 0.09375 mo
134.234 1.59375 li
126.922 0.09375 mo
126.922 1.59375 li
119.609 0.09375 mo
119.609 1.59375 li
112.297 0.09375 mo
112.297 1.59375 li
104.984 0.09375 mo
104.984 2.53125 li
97.6719 0.09375 mo
97.6719 1.59375 li
90.2969 0.09375 mo
90.2969 1.59375 li
82.9844 0.09375 mo
82.9844 1.59375 li
75.6719 0.09375 mo
75.6719 1.59375 li
68.3594 0.09375 mo
68.3594 2.53125 li
61.0469 0.09375 mo
61.0469 1.59375 li
53.7344 0.09375 mo
53.7344 1.59375 li
46.4219 0.09375 mo
46.4219 1.59375 li
39.1094 0.09375 mo
39.1094 1.59375 li
31.7969 0.09375 mo
31.7969 2.53125 li
26.7344 2.28125 mo
28.1719 2.28125 li
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TimesNewRomanPSMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 84 /T putdup 97 /a putdup 98 /b putdup 105 /i putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdef/FontBBox {-568 -307 2000 1007} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings13 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB222483BD74F8B> |-/space <1C60D8A8C9B8707C25> |-/parenleft <1C60D8A8C9B81F2C3AC09B674C4ECE2BEF4D70AD3508D915EA9AE12419376F6EEF231ECE8179CA4531F29291ACACE060AEF98AD6F2FFF2BEA533946FFA1C8BC3953D72A31BB8ABD9782D71B2146F964D99646263E2D414F84FA049D36B9B13B7F6C8AA7A4A5EB0> |-/parenright <1C60D8A8C9B81F2C3CA029BC286E27661FD7F18B990CFF4A0AF58404A2F35E11D14FBA406192D392AD203A879E34B8FA3132863211808E5BD63BDAA607B8E04E23E92C61AAA8B57E5E7609689020D20EB927A1EC6CC0BC06B540A016D558248DC4A3E8183F5F> |-/T <1C60D8A8C9B7D8BE514ED6977CE9F9E5860FEBB6D8EBF5879FDED6C1E48F6AFEEE7B65DB6C9D492058CAA103CB13A7A80B0015E85F272BB9775991CD97556EC3CFB46A4E1606F006216EABEB711074247C72C159202F32CC7F5F403FAE58110685510DDB32C57700D5067C975D7063A496FE85C1E5> |-/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272EF1EF1464C3F0D45D7CBB8749AF571E09> |-/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9AF110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D399924398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D6603C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83F23AED1F56FC130F21> |-/i <1C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE365B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A640085090E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCBCB8CA3E9F85837FAC6> |-/m <1C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE11167932D24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA1816E9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747A2556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68FD574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F249107C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D18CE6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE955617323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D987ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FAFEC679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE82B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B517996> |-/n <1C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7BC81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD9D4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494DF60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B280026130687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F2E277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6A0027198438FE663C2EACF82CEB86F7C727594> |-/o <1C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD4416250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF996A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA436702294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68D9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |-/r <1C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2CE6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E983E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B53A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA455AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D8C360275B503E4954E912CD342> |-/s <1C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC22ACE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A039A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF40BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359FAAB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C593B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF509B93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBTP+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut/ZWYBTP+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 42{/.notdef}rp /T 12{/.notdef}rp /a /b 6{/.notdef}rp /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r /s 140{/.notdef}rp]ZWYBTP+TimesNewRomanPSMT nfZWYBTP+TimesNewRomanPSMT*1 [0 -7 -7 0 0 0 ]msf5.81738 71.3438 mo(Transmission \(arb\))[-4.02979 -2.33105 -3.10693 -3.5 -2.72412 -5.44482 -1.94482 -2.72412 -2.72412 -1.94482 -3.5 -3.5 -1.75 -2.33105 -3.10693 -2.33105 -3.5 0 ]ysh%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBTP+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984A59E1CFFFD06EA629758085868D3F5F7204292> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBTP+TimesNewRomanPSMT /Encoding getdup 101 /e putpop%ADOEndSubsetFont
/ZWYBTP+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 42{/.notdef}rp /T 12{/.notdef}rp /a /b 2{/.notdef}rp /e 3{/.notdef}rp /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r /s 140{/.notdef}rp]ZWYBTP+TimesNewRomanPSMT nfZWYBTP+TimesNewRomanPSMT*1 [7 0 0 -7 0 0 ]msf151.651 116.01 mo(Time \(ms\))[4.02979 1.94482 5.44482 3.10693 1.75 2.33105 5.44482 2.72412 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/ZWYBTP+TimesNewRomanPSMT*1 uf/ZWYBTP+TimesNewRomanPSMT uf/TimesNewRomanPSMT uf/ZWYBTO+Times-Roman*1 uf/ZWYBTO+Times-Roman uf/Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (steven schowalter) ()%%Title: (rabi.eps)%%CreationDate: 5/13/09 3:26 AM%AI9_DataStream%Gb"-6kB\mDdkJ9Z^c?p^Ch#/@+>o0iS9']9gYBf!$1g:Nrn(^fQ.-/3RkQqm\(BJXNU<lL9;PNdWDom\_Vmh2dVEuOT8!8oF$V+O%";Nd/9VnPXRS!e$iEGEM4Yi@\96)Kk"lni`#*hquE@ma+U/09`2Q:<9GGTb0o$d#dc\MI2HSd5G]D^\:(G,PkmfcMPTBK!4psAGP%qu6s<](P3pn4BJ6)l'.ZSY,Uho<SBpn"H(FnpK0j%u-T]SQlPp>YPETDPu=]s(VHToiC=!gQhd-V`kT*E=$$YnlD-"\ujH':SU(s%"d;h&_!2lYs(6oq7t#p&$2C1FlqUaOF4>hclei#]*l3cY)uf`74WYiJ+bXBZ7e,Qu8>J^-.)du69iB@,F9[k%`d^N.6qAc08[=YJ%KBl="mEa'k4KOT*rSC2#1je'X)0G3)2BIpT,fN\J7FTUZiGZCTl67i,b=Z^e%2oWgC5omfK@Kn$e,E,QND-\-)tuj0Ur2Ad-D=Cf%354\U&*eLBP(IC>,1+M)[lqCgFb&P?:)`rpUu,p2EMrJJ/)<6_6,NZDr$Nq4>p"O(a,&":h$N]d[mFDpEB(-$h&_UKg9e>q6+_?s%^W"jJC-%a+A:dEMQ;X,Y7b3/`)V:""LbD=]12]`T#!Rg'Brr700^!,JcA%n9:+rO*P^0;>4"WXD)'tXr5;:g]XRNtos!RT8Y)^Qi%SrPJ`VrA#d#E@$N'kuV&$aEg;h>oYdfjG.eN_h0t_=!TRj*E>F;UK1.gA_TtrZ2/C8a)eH_U!<BIVKf!//B[6<T1Ee_HU#o\#N'W%<\!Srq'qqi;X$##V:/6jSVC&,FJV=ie2/SKBi%8ds57ZeK2S-BV;O$%$)NMJ-rhh8Qc1/].2JUNV#kQcQ#mqYY#O>-V*_m>(__9'%5,:X<(;?U5<Ab>BT25mk"@&RooSN:+]Rq9A:FH<.JtLD.8dY&?oEfu`'D)QZ6;<,.Uh8g&r.KO:Dh(0HTM7aIdQWnII_ef.;lKbU%NXoMmBM>?qW!#?,Q_`dIH\+>qNO01_dkRRCa?M'VrI^_=',a*aC\!LE)#T+dcp'S.KIZ%ekTB_U-g2QgJ+uSh#716\;U@Z'8Oeh]%$)&k`+'PI&!16^aTjpR],?0FrKPm#,Uuql-^ms=Og*JW*nKK:C5:?WIURVY(K<IkMa]msNr.It$^S-.1-KJD+$"]cRJM?2%.Q`<(%U]nWkP_U]k:i6BZ$)\>@TQ3?=PgGt/8#T2:-$075l%m^#&_s&oD4T0O^*iBk5CtnX9Z#%bbR&,W%2Jf%n1U,OnkC6#V3O[hV%`$?%_VLIF3WHqIS;4&=o22Aak2QFY;+e^WS/N)CMD&h5e4[N?AI8BhhaB!;qEIClDtn8A0:=*3r&=Ef#U;,1s5Ul9^J'AEoAAV92G9XJ%=k\%"s-M&q2uGW1="'/CrgWfnKM*TmiP3LLEg]&]hrLEJrXjPg@g>6?\<:M$7"1p1.EQ$S<@LLn8gRE9<:X2`s6uZZhe8IaPW"kK%L>..Dmn<1dBC+Dg,%%,EQD>5mcBRnQPbRoePYoP@GaD=Tmj+ZeMVcLkOna?.C^J]qa_Ri.Uq\REY;1p^!!ahSWhD@sqF+`8Wu:U@%]uc@S.M^ZH?;%,6*Mmia0F)tr$,AW$;DJBe,&/?$ah[r?0AKlbZpK'CjTArdK(W*H*PR1+FY#CpVjAl)P]GtNqH=!$OSWtM$n85f%0^`)t?W7rYQdWCF$@eg2,=V+<)!a>]FVDF8="=+PS<=W<F7^:@4&+pB_6$T2La0#g]=@kjq-X.p"3c$diP/iQN$%smV+<8t5H$N;%5i4"r0t6B!0g$tn^*G1(0STN]jsm&:PgJ0fkj@@gH&^/g\1=cI,;&gOrXZYr8)+*@pu=CcoRBO`p`$mm-'/ljj"I^b/"Njt59"9j%q-(qhEQ\neP8J@@kcma+8]HMWRSj=/1S`EMcj!>VJ'6"HqQSlDs($i!PIM%PXr:t[ns?mDKaDl(TBLYo23TVQ1&`qh,/K_.)t]WL%NZ]6Y8T,LH&(EPTk[/j#rC3koPVaq.,tT2&EGU3XFT+f=gs5"X+"r5\aQN$rjYcmp]h.M(FW,:(&@j1gA%cL8^lk]r&Bfe;4_\2h%f*\r#`a#8Q7'9tP#.K^g'90)/#-=es7JPciCQ8%A8iGX29Jn_/<:X/iAK>Q^#t=XoM.#o!nDufbQ>h?+hg4Ue$qM57*Tg1n?G]Sm%kY6&e.,Lq&YlJkGDP:=P.?`,X?F<V#d?fm&JVS@gT$lk(adR@^a<11mrHln#KFb:VX9^V;WI9D`Yjj"q?eRmSMhYin+?Ge9K#e%b%+#)8(H5MuJF^E8T/M\ae3ChG7_O-J:n4]'hRYeQR-Mj0tUf+-q*X5A-jm\5#;XA.og&Q@%cXV5q'bP*8:X1DfFHKcP^hY,g^^(.'%)$P`"-8*fhGb[$*]aV55._;JihA$0NPF9.$[!MN"!ll\m_<OVFon_61`\PmSDMqJu^1AT!FqC5K0k[fd'RMYD#+QS!'kU;tbYtCr%RcuhBqQ`qkp6rP;[#%P<(9?:M\*'WmEG<1Y^@8.bkgX=\&E+=ERkIB3d1%1X\RPq<F5-^F'k?!A-/<6Yqq;u:iTlY+G5+f-TO`L0%HsNI/.]\6[3UN%>I1JAk_MNZh-`0Uqn28Ekr+iuFJ^sg<OLFZq-2(CXlG<<nY6WZWU8o=F`Hk7^?_?_>;Ft0^<*dY(<;Hcu;<c.I%8Xo36HqdZU'T\2J%4),TJDQK=P@n,E-'"@s_C?:`KKm?8?44E=jKE%m#Fs9gl5r/2p:L9!nrE[.hd!S0P<n+UTPB>@8UoM:FaB\9%G#1gZ5)8gGg>H[>jBJ2K&A8r-njE%1;/E[FSSkp..+arPEBA/$mW;\#`#1-B8DLF&lD-rkf9W?o42^4AkG-f2DkbP#ORMMFng:KO%NP>lIg>p_kn7eA?g*,!j8=>K7VSgRKE:ncMT9S`,Z@/E_T9\dW<$nF)KG:!HU4L79Q#5&95MO(D$R+/?-^okJM:&grlp<?pm3_Vi%'9,SmgE%^Hoc[.>n<H7Gr7$(q7Mep9M"`>pD66445PTTXq>;-Y`l!,'rDOee-O:3`\Tk;BDRD\Aq/YJ2e?+eG!XppL:.@I=hLl]>%^]/3G&jI$c3++1*J+n`#O#F#<dqckY5P7lpdY.p0TT7rVlbAYW#WgZ(s/22ss0p[`s56*RGBKAI0)C*Hp!N0%_6p$-3C-$grooKU%m>iuO,*Zbb]:AupHo.c\gPJ$1N4dGPqQFq6%m89U+d<W,+8cL&1*SHUPWk0inIpZk@&rm##8i++NR@ZTrUhnHP7]BBL4,"0Q5#'4%I_sV=&g&.D@@]PXbD?77Vr%O[_.1aOXAL(I)1qVa'ches-R6PRJOEgPdB`7cSo@/e+]g"d3?[enO^/K"T`\3VN"e;dlD+;A,:.4u%M&W^g)tL!4,;gB^'#N72+F`V#+n5B59o@Jj=<NDj'8[2E^*^P>qJc#SX\Zr-%f<s5GG851hZ^1+GdAiApi\fhr3UO];tQ7>\7%6p%mPXmGSXKr##s4E,?-B.!paRF&,J.X@O/,+<")2nolf"XfrV)sJ?0gLaW6J'd`C'hUX<7;Sl:Fao\q172))ZsLWr5#YGL8c=dHQ'%%5ootWLd):X/qC<Q]+403%fn[@K,-^UB\]S2>Fgh9"R>.\hB5N$LAf]!M0)]%eMmbMMlP*<M6iiJB0@)n[8[4,,`q5_XCW%;!W(`h%3YkmW;/1<qoq3KVFYQ5Bs$,o-B03%;,q.P;K(X<[pJ7RAI7o[ZL7Y:KM;JldcOmY%[U7s7!,o/]kM6Gj<?:c\K7i#N5Hp_toc*;V%H%#T*/9I$$O!6k17NR3C$NrW\r7*-uGeGnh\CPjeKK\,:i*#(N;VUDF*Ph]dRWQPdmu"9:Y`h'U(5A%#=7EfYmkXg"Y8E]h(dk"p%s,K"_nHZb6*hfsK-,"i>V>P<1^TJ;Ng:7CZnpb`J`B'FhZ/*c@g,3:0T!^uC:!m(>>9C<Lp\9mMp;*%sZ9+g'cA_nd*&LHtgV3M'%ffMFT[?]GfrS`f&2@M23rb?ZS!s(st61\[WY!*i8<=Qj!1hI+e#aT*u`r=9a_KCH3?hH](UHAITi0%/*fXP/SeV?F!B2sQ[62ZZ5%R8G7B(ooIsC0sqgS"&h,EU"&knckgc`dacJ+cn\K+X7F\"EULP]fs:bEE`BV#@i>'<TaU$D#.0>StZ0K"#L'J$JtfB*Y-R>Ih:g.%_.<$\q",a6>6oP)M9F^"_hE2[.hG+T_[$$Tdq2G$r]AA>s%9Uhl/-2Urcaf2rgdZOJ#Cu\^XI#ahe>"ImkgO0GFJJSZrHVRd8Hrn%7n]]X?e81O#[3jBa"JJCe*p$*n%Oe^W!2Vq<#sB!DldLTXRZ4J-@A"(H^Xrtokk^Obo$3HL4=$a;7!dep\to27+7_d"6TiB#An>s%)rqi9-Ot^(S%-6b`f;U4=2a`aCAok,N%-R`*@fZ\V.%*VV>?LNc\OC8WIoUbp#4g'=UlbcaM^QV+)3;#6,HcePrT\i8*qHTqYG]L%LBD2oX]K!b+#LU#6*T#I55]=1]S$0Sre9G&7=R&spKS7=;#e/0(J`bX*1uq/D-LP[K'WI8l1WKi9iT6=e!Q*IGPU4%:.kK6<@jel%TiCWadqoQK4]4`U-4\BnZ+'44r&5Jdn905f2gYA%4reD_ftSGXK?@<gYBkCZb6!(P:p,TG"t?EZ1,:uj+%dQLO4ui(e*T*/gFYXS%Td:MnR'ZLedD>&aZB)^Ck.#/e:N7bpq^7\9d.#@Q$/(RV^A?`d2nEijN:/d,s!J,!mP!Il%RpD/NeZsZ-_k\]kMOg#ru<-C7Wk(*%@1GaNk*I+gEOe?Er%CCursM^cqY8D:in=*6(5#Jne,2F9(TUF\Y,0M9,B;D>GFeX-T2'2"j_'8>K)_t\QK;pf:8Lso?@B4i?eA/`%BZYb5?S#L5UL4&o-&_eLDeRFu7rSD#e!n,PmG>(DUJj)ir@p&6NnYXcP+_';=4V<h(JOj2mp5T6_e'i8;uc1T5FSGJD%qHQj*D*$%6hB<2c&'J]9D=5:i@^gCbXPi:VIp,+<m0Rlpo0=g9oM:ToZ*h,okm94bRBc.et<[(TVN'3p:E\H;uRo,T8`Z`b;oc6FoJ:UEO0>p%6%.*$#"P5V8JaJ'N'djslGIV:?QZ_.9uu;Ehb+S4@;sa*EDr?V[@?4U0\E=Jlb01'=^1@?\G]cUQVg=78-p7%N;AXk*c+*["--X%%W2(\2>/9j-4o/V.`]X\"%!'tb^O'W+O,sZsP"e\,V&LmKRu@TNJ:$tR<(]kFdP!!nr$dOQ6F$'bhAZphLjPV@,8<0j1amIa4KF.f%)85h[Rb4pkAJLnac_Alf4/Did:LmU"fe=!#e<,!8(a3"!FiO)DVqW*hbsm[JS/c(28fZM%4KeEB-hYf/n@UuY6b!&:dVa1S5Jm2G%,Q+FjBd26,nn_B3Ks;soBcQ2_%u[],Qm/]eh-,5cC-1iBlWs:#K\tNY-`lY8"O%mN`00-GCKLU'X7R-9a(BhRC:C8M"V[g4Z/N*Q%e][,W^qs4-Y*lZ=,%5I'(ItV@6qW0aEFnX[H=DJ18aok@nYb9#,GkI72X=mpYlPbK,Tr^r,L5F\U[QL$JTT1]`3iHuh]%U0J=WVj%0b_Fd`*pC]_%/h,GKG[G[WEc@SB7]5H[Y<8%sE9O+5S)^-m9Rt=5[9;KF=\]#-A/KpS.)!^D,MlR?S#!U>HTm7#;^J-#V)<Ui[=Q%k<O>94GB_@P=G34%:MAcmMHWmC%iIc&(*no0%Lp&G%D'U3toG6es=KJ>*3:.M+*;K;p3fnns+E+4iG[N)/.HLU3(oFP,N7#.p8Z]%2"&@fUdiSG<0#PcX,#$no%\Q^o?Es$K3ibK^6'>@Hrj)@MsLg39?Ah&*"7Sl%NO==LM1@N--(F^/kThLpQ@nX,0ltupTe<M_pjjW%BG8PfVuQ9AC6-&cI@5uGWlnFieG8I]%2P1F5s2L`I3%?NYlE,8[XFC@NuFSZ:OV/-Pa!%hD*:PVAp9'.SK:\D@kb5p:kb'+9fLui%.[RHY<kLX"dIn[s'`:4Bkc6rG+.YP79&UXRXNP2eTiHbS[m#Utq(29,1N%ikTC4aCfH?[$TD[UXL]Htmo^`M1Z>jO$`]pW%Cq1UE%,*<'u/9o&P;$SnNK4]"^@RFS5hkMSX=r[.naG%.6+<jt#Kqq;e%mC=V(#bphTHnoL(=bh,YrLh&N/Um9.*Sph;-(Kd7qn0-Z]*!r%D]E\<#K)UOcV8?`UGu@T6V-6V*TBp9Bg5^Xp/"UprjA!gmiXeN.i1=_gQh^/UP;T*>mlWD2Pba]'*$lpj01B\)5UECUGskqfAE?c%F3Dh#30!?>rqu/\qfosVpl!i-[KK*A%T+%fbsE:r)V=dSG+90KV3'(E98O_QF^tb$D:/bLrXP6KS\G//=)EZ*k@TLmKPOC[:=F(7%+N%5H66Y\%n>/]bhD=)%4+i+Gj>Ae'5J<s*<9>jMrF92LKN>g(>*ik^Q`5cT)K_Hu].bWce*N(L8;bQK4'gu%En'_+Ls#9:K=.c3%N%q-^d10`^^^NS>>@o^+csA0pMQ;XNZ!CG]f''ni^pQ_:rJ>.&^YJYpWY?=d4ng^;)&-t:Cg"ZCea6GO"hAq3qIr4%'A#qr3s,eg%7>#s78Tc4Mb>efA#>H"U!>cT`F<)029r@G@R6Gg2@%s_M]r!H:J4nL@4mG/<GGsFt?<S31FO$`K2t<qnn?1S4Ms'pR.F72MX1P_0%k=G(q`FD1?;hJKBgG(K6"&$L+O#aa=B2"m4$l[o/jqTKZ,W1<66;8`\&_>5!>p'/e&H]#qr)N:F+IajgTf5e`F>rlaM=01X&lKp"%Z4Ypi)QW@oP2*dmWU.S-q[:0k;YR?7L!k`WrN7_ZmaOlOd_d\aX$h.adpJfiE0q'QDI3nUiQu1[1E230j&_qqqaVEpj\Y<GPmTr@%hq_+>>j+_8SVIJg4r#P:/s7GjFFoT)I4+d7hKRL:<m@K`dm&oJS*uVkk"_1Fr2iqFCDR*3iG^G,.D29H:@bf7o.3b^59?(2/%8UW%M6YQ#`=IHof'5VZ[;na@`EeZO.p5H0*eqXpl>nA'p3M-cfe+ZPd#K3/L-oPE"+BE>1dWpnOq0u'f;#%a`7fVfgm4"oJ&TdsTlqN8%mX?7teRK'eYqlY58*\5#DH+[MrGW;2SrN082jR,(@:<&oSfHXQNXeBWpamPRdW[f.9%?hq7emjC,?;q=;Rpa\0Db?@GX#321.V4g%1%a,R,[IIaT,1Y^#5UmY4=!KG$iSJPcs>iH:b5a9Pe[7DQj^_9%\N&_8^rad,e@1hXn!W$G\*qujPde'*iiS;W16UeU\j"CUi[e,%P#ptJ01+:<5bW+kO3&[o[t-`-Hbr&+7UL&]--&JR([CbAY#4E+f'%PWniOS%buu&<2U[rb9uXQg;>*b.C:';V_YJ-*BHV-Ulh8cl%BPjS1Y\S>?H&o/12c_Q'm2D6>db_E<UOb+62SHbdh>5Lb$(QBfQ7CL?$eq7*<<g#'=m+ko[aFA\rtm[%4D+"sH?noI3-jL?W].iY%VK)s%7]bZV\l6MGnJ_6Tg#n?h<lh6%<d+/MT!,8a7Q#I^WHN9Vnj^>j2E(CeI(=*!3]*:P9AQs='6md#AkAc$S(FQuNFieF=)7Mh%DBmspb!egt7St\3g%3F'o)@r7B%Q6[D>->>BJfAs=Y$k[p5LC@*i+Z?SYB0OqRTZ%bcG(K-td^_8sPa0MF40'jm[K_UhFKW>1&hA%9@_\lXaQsE.DOG?cTKjCGJ"pMdi3_f>W2u6hJ%#n)='$,D#*n=@d*.<[WJ%mPbHJ69;An<T1Wj1@.*:Ldpq4`.+adLjihqLo'4_<%8NPOLdHhf8ps&4+)4k0g2L;d=VBW"Hmq[7FW-tL7%ZNYh8loqn-2U/mC@0KJa2g;[1_:Fk]j9rP3];<WFeS,.RmsI,mEo=r^<pFJ%*!kG$p:#6^qg(=`>]OZQp8tn_G&$YC]%]:rnO?A_KP"#'bAXR#0/'bn^79Tn3&^Wr+k<SP2#<_2SGY/-DVFjXoZuIY9ZsHENP6EL%p)G"lL9I<phC-TWU9*3Bjj)2GD55e5c)&edb@VVLRenrMc/^JJVDm4*,:9)jKHlPuoaT]XZF7AO1\UKDHJcg*U!]6=VKr(1].+o:%?)'l5L6h)+^Ug1!3o5dhEA@/EKI6O$Bsd@P*uJ!dCcK#Z%7-b/X%k_.Ucg;i9oU?SD:Os#UtIp,B[`aa@tWk,4)S#'aVBkqNNN\F%ogTH1Q-;B3k1b=,]n`:HfW9R$IrY_+dG.1G7,Xnjqu)sWDsdC*g5&YoB(`R(Z[7UCjAbO*6N4N<qYCR;@,Zt&>GQR<Wt''q#cpLR%@9m)0m6Busl$YTC^JVX6hc]R*hUg2hj4hfR611/U[>]Q8fslERr&X^TIpI,CRo`W4Rs&^m)s0-6gJ]*,5&Qm=CcT3m>A?'2%WA\]%e_9`ALf3SLm8l)lI1u!arR'NF90)Uu`o0qDna10B9!(d3CSBBd\<.%WIXUrqb3_1&I1O))<p\].'`0[M+4M:Frk;A>(QNE`^+6h!%:2^`D0"+Z:@b1:/8oj[_nSPVa\2neZ],Fj9Gi!D:fP3ErdV(^kIAlKaa\HdG+_;s_F/2p<-C&d5BWlLC>:,bu?=/ZboXDg7[d!2P%HZ^S%o_*'1AM8>G-t`("mrAA$I%-(#lDmugnJ*uAMGe6WWCWA(iNB[IX1Y;(Wf,1"ibEPI!XhT4UjNHe^A_BTO#Xp)TigQb#X@`b%RCU18k=!5OmF<it<,W85PdR(R9koZKjKLU6ln5>SGR[614(r=T85nLngKR#QanlBNm%F&9[TRt#M9\j@JooaF)&><'VKlNe(,m/f%<^&/V)GMk<h[I(lp5LC@*pjjTKQ4>3')Egljp84hWUb%Tjk(tTQqaJJ>I[NgmjG;>G[Ji<?ap^eD69rno0u6n?gUM;W+mOFmdJ:/%lY3bb)[1#I1`L]OqeBdY&U6fcC_X&n*#_7]8[NM_j\i':bPM(pfI.s4.-]M8X;jon@X6@jKsegbIA>Pj\6G`KCQ=B`HUO7qc$]bR%jOu;fD2gH7s3_,r;LE<Z\<k)O#*jS,r:E*e9J?F[QLE-^bGDpp^=0JY!H[gQ4t??6\ELZ1rr@0o"]sJsAMVc#bNdWl8`CDSj]mcE%fH%'&Y44hC+S_XR#EeBSX)T.]Z)cDUra6^h[H^Zs.B[t7>#l)i$(Ba'L\2aoPJ5lR2P<q?7W/gS#Balr5RJB6Lfj$Z&mt$(R/ON/%NI7L^%M^T^.qJ1o1^roM@?b]UdGl]-d3flt3lL14eZmJRo2R"97Cl-IWGi^S#_[aTn%=bYedfVQ0VS+s=[T9;&l[BTU]^%giD*-r%onnU/]M&Z&?:9Pj3q?fUDUZA.OK!_g@YPr`+/TXWNo/BMp\6?#rXn&,L7K9M0GQ?kDd8+[Du>,pkGs#<*%DNCR2Pkl7c@.^<#,+g%Gd4lG=Bh7Y3/dACP'pugW]pIZV7\nG;.#E!oJeek0sQt[UNU<@pH[@9Z&G\1@T>RpA`LS+VL]3O+-#j__,)C"6eO`?<MFf0V"1q;%#],D06DPSG5BPTkVlQ)+&"=`+g@gh)m*2m(g;B*2Y3A"#ar%<nFmo&#`2.8E8+gO1n@j!0U_Le]_EM)FF<pLYI3)bG8)M2MA^nk>%ha`G'@Cso"GR#f(mfa\u(lE_?*a(qQh3T+9.5jFh=^P=4btAnqH'\Hp7s>#nG8M];Q]QW,Z?p/C<U$8sPe.C*gsmqCEp#&t+t(S,%V>H,8=>%e%)`\*eSta).K7tn=?<f-*na:E=1CYc15Qf0"fN-iorA3\'Z)Y,<L/JG>5/Rg%AR)X^Cq&+83H]@LC6*9G(+[T_\q.)*%8>=ZYBiVk/3)A)BB!LgkaDk[0Zl/7U&QpncA(.eQ=0L)5D\Zq`o4pK$lb[I&EFKgYZjj98qL%:F6j]Z0]Q`RieCg[YO./]gT]BY1%"iS7K1O4AC<PGMBiFVU"7^*\P2(YUA^ZtVj?u_H;oc1"VRX^dKN"_(5]S*iD=P8?(,%_b+SpqPIZ+&Zn.;%(C;c@L?#]dup/IU2#%Y-SbHZ];S5D".$@Htn$`k\\]#:=)Vlr[[''`rlM!?7O!B9+-s+_YrrGF:2ZcRqin`)Jll&l[I$FWUm@$l=9>r#eNrHGJp@i:H*m=%@9CE>_*_PALM:sC\&:'G'(AB06OWZT`,&Z'7M?TCa+sjlCW!*g'_PT2fCdT,.mpV=GsQ:?_EbItj^lqt$XlHeY63_Yne;O8S/Tn3%6+3H>Xl5s;*!G?<cKsI>5$pi8Pa84F!%dET7c[mq@39mb6NJ0W:.?^@*hp"?XZ?).&>#'KaB"\JT+MYl^QE=3*5Iluh'2\s)U%4Y%Ykn:p3ZZf4M"eY`G@h+S6S'l&[j)[VUq$:kLc)#b)i/&>E-4VH:)J/Ud,0Uj&[u&AH$bkhcS#%bOLY*!%a?V/1H&:#XJ:R3kKmnY%4"Q9&?*^DECOr_M'&Iiap2UrsmXu'p3B6`n_hiA:T#&)P#U<+><T`b3Gtp6l$3FJmfm;oX0Yu?0_i0$d2SUBOGkq20WkcGX"11Ys%iab=i(d&6s;gNq&2Ph!-R%9'b7a]\P2NGV9fp)3-*OB-BHp"pnYCAjo]?./%\^J_=k[Pf!1/ENYa\2%G1,#7AiHa<?rCu71VC2t8%bk%F26\2I'VfU_2PMV6*5j'jY:uTpZKX"3mPUqW"%TAp^/W6Q;RcqEHU"h<-0!%tlCf[ZpnJfh*"S9M>-E4?E.MNIYEBcX*2ibD_%ij0ZU0])DlF(IgjX/!?&n@(_qT#0ZiP<imEhP@r^AiJi)m.#AP@pDS$_8`c.:?n67!ejh1>*@NJZe"/\hP2T@VjWTFB%S8sDA'pG%Jk+Re5XIbQh7073iZQj`G8Q-j.H98cD_^l=h*=t4I-NjY7oK>#DtkM&nQjeKcRg&PoGt2M[*a*IY=:=fo3;*Q#daOmY=?-T<i3:_%*@l3\BS_kMgd-P7VU]?\9*tOE$d`R#e@7u;6hXA?IPi&8p,LSY^ICSu/7@o]fAj.U'J$8;hbr@P8_?XqEPU@1d,NWMa[T^iKc]MJ%UCbhAa5S$CfPDM2f(nE;mFSFoVRF^+8BT6]]kHns9Y44(Q/.1B.+s+m2*4h1K:O]+ftY;pZ't@n(4]7<"Z8;S)"2e+9RFf`KXk!a%BDrGJ>`3#VmC;cU?-a498%9:(0nd\]pJpgq;"sTK&#8:?&A^9&\*r^O'_L&+V.5=3hq@MEI4iGuM8!W?4!410h-=XVK8%H[\*rRK%56(2aE;!EC7a8,0bAA#IHD\1?m:q3^^3O?YN/d..)":glqeYI[(Rd2)oC%XETu1.17eV[5XWZgIiCIGHF6c.4Q>p!U*'D3X0H?A)%gX'M&-n1R,iSh&O^RrQp2>R&FA[=t;/RD,ZS\,<4]%0D,+6IIVGsuBdbIB2cGM#(/=+#gu[g>PVmiG5:LQ[K=N1B5`?KOZp'!=sP%ZrE!R&bbiE4&&C@iP+CjSnF'go3C`/ba`kXr!F87p,#6sMRJ5=N-dM'ELA;L*`])?C`ONL_F&o'QC6%:Y_bZAS6WRRo4.$KarH*5%_(k_NZsqr"2l%9_4ukqG/s(L^%nN)6G#KbOgQdIV#39Td:H4d(NLVT,R9*`=Dm%;?kQ9_^jNtGMd-2E8F6Cp'29I`=khbX<3HX[,%FF(CRgc9J8WGFBSq"umS%\7qNSXqDmG7L0j#+\,ii7'c/;:c4;Q7Y(/%\7+)3.ju50':9LF3gLHlhuOud(*f9&`:S*3HX[,FKjVo%.Yl:\OR/,8FM:d1XMetB]qSfqS-`_2PrPQ"iTVq>#B"JT0[?q&<b;Uu[7/2JrA'V7p[gY7N3g3iTsNS8/"'[:ZdB*Maoi63;l&)A%A)0X1)!id.\iWd5H[K^r\]8-hp!8^Uigi*m]71UBea,\"pdN:\o?kHsjb=E"28i7]+_f6"XsrC-&AoE3V?Ep(O&1p'fLIWO?am;8%do_E(.ke\FortuCf/64NNG#QO/>42`ofa;cff[9oYo8uL<DKS?Y@KTT"go@RCpdj-0c4HdAOm]Bfo0q2;c[K=_31o^2@\d"/+_/\%cDjrn/:)$MON4Z9Tpe=s]saOBiN/n=^([,ALYe%I6nH'=D<'jqh'Dt>LYpd9a\@B$]bq`4XQIX,0pl7,=^ZO[KR4c-VqEpr*oCN)%N"^stY_H6YbHerujd_e%S-3>79"W'XYO-]h4.1`ugp??Wr4HOtIIEZ4W^[Mr?-^(N4ML1/.jr>?Pp&cE<8"o%U:_t[`nchhVPq_$%j(G'Q=2rH`'_>!3SVCU6LEZGlb`k1f\:<-f#!1:R@(g>&QTn^*iq'SC7C$QgQmuIg8R"/Sn@dnJq5CqVY;6$#GEqTbj'p=K#O>m)%pK@+$fJ?RD1PS^@:("kO$=8;Dd3ri(b"(/;<GoegdOeR?hF`7K4SE4b\TZi8mn"!f4MN],472V6aHBd$(&ihHA1-KYfMU]"b/KCb%N@^e$l_Uj2ab>\IFh:m#;l5U_pPrseABq?c9osGD3mJU?j5gHt@gDE7cfI=J/b+<#VK;4Y`$#^64.+I0j,uE7lY-p^Q$ukD8rjBI%aWV`D+f.lmO`<YnKR'"hb_8e`Y7*Mm8583.0s-Utrnk69,P,t9[mu2Bf\uJe3B"ul.urpTVI=kLkH*b(X4)E+CtJQ>o6Y"E"m[eg%*E/c-q=ht?A.-]OOb"c7F%5F'_*a<8QLs,A#^@$&fd#N=3=":mOJFgPHB+c*$l>!r7UqkI=LmRfqD4Gf]pn5kA"W_^,S#jsM.A;b%iQrjV2NLeWd'_Z?7ng+YY"]YHDEkm$qO"U5Bo;Pf>8BX]F-It]Nqj'OeZB4+d=o6EH"5HW/88IZ_VS&7,M,;_6r%oe?ZW1&\b.LO%J9da<kA0ZtY'`4C()&L`VN7]tc\J"Qr%\6IE,IeH\9p9P:7a*@br&hY?\I^Wq/FhY2J0nPdjmN9m<Tu?_XcY*U7pd0$d+672]:;)%iSsFeE%@6533Tl.g3blLE=kP6(6oEn]G>SBf"&Ou6tSSUE!qS\6rcNHUpk4*-RSDmmiE/,;t``=l9&[/*XTqU,j*6p6FFbE7c.iA%Ie$$'[@$nH\=Nk7EZ$)>oXT"nLhE5_kNqn#`k_J0G[C:'YXCUWrRqa78I1%+2b,U8SU1O"<u)=!Ko$tQb2ueDG<P(:L(=AnTul`R%37-F+HI4N[E"SuKj*LWZO2pN#f/(2:i%qsBN,N[P`q`/5LXWW#_Q9k0!dgMn#$![Teej6HI9;SY2Ud93-6lMs=o\S_#7JkGO]l+<%o8uH+1F'<Ae8TRKps)FD>=:sGoC$-D;PB[NA>DQ+f_cVd:s1%<;P>.]a$:#PI?+,-GHQ^uq@5:?pK9mBD8bpm0n(]p$\69kjE%69%Z!#:@7*k5!E:.@)0.I]s8EIOgL&:59E&4UHVbVrP5D*XsWGo#<2_6KpcHAH7F+*c?Af.+FOE9@)!Cq$a:LB-eWm3!/45",_\Atnr%mu@iVQ1B.mTXP"@.Pm]52mWs'3Fpe"k(7G.qLd*G*4OCBOXfNmSmC3RGB1#-V.[j/E!Sr:_EOh%D@jXdEA>*!oJ+,tAF?%;<P,a5%\'f;4;Qa[`qlbQija-[6]Up%E'e@m_R>94#jl*fC=<?nnC[(0&@NjSZ((5sD\:idT5UW=Gf8-a#EAHZcnZ4Np?"pt5lcD0U/:3L@%(YR!!m'bG,3t\%0L((]Df1(!He9B%s]6?nkCF'r>`Kt<Yil6t7;/iX\h5SeGQU\$FRa<J+`FAT3je=!N=*(Yd>W'cD2)JU5[^>IG%?(;ln=;SskYitf3O&Ld=H?o<F4aD3CG'e8OYX8QmEQbTP?XGlQ\pE02C,n0*G/'+,inh5no''*'Oh<2-FmI<B5/)d[bGZV)eXOU/%l$T)o=`0.a,P/W:alN&uY8WUeF&Gc*3fh`:6^7AdW9@8/?1Wa7ju`8KEbi*kUHQdAdJ7O,0r[=m&ZTHHM=Wl2^XL/,\YR`#"fL'm%I[PV4oA:h6;<$FYe%MJSH^Cfmaj'%'HReh$O`ZY>.=%O1DN*n&\]W,KGhUs]2ru?+Nr=%6pW`$0&\n;9^2(N&$EB/67f4Il))CS`%?E.l6779>V?/70,_^iHTB%,#jL[g^*B=AAThShKn2P&2PJ*4_nPYGfR'4_]!G#Y(5?tDKfDZ7jMF#KS[iXIG$S'I$F\<Vb[e'3#%%M!o.@f,2J\A^f?"e(F$#cC%BSN%)rHZelXg-_&E,cQ\lt\Y*b"qj`d;B@HZ9k@t%NFEY3:Q<hnKZg$g',OU=i<&U9f8i3#IES5GW%\TGh1Eu'm4B/b9A?5Au(kHr.=fPEV;4,"K59fEI!VU),\U"BFQl$R$p/0LG-:'oV7=O!7.B4lLI\^cV[VR*<g\2Rh^flVDL-&s_L%1M>/C'pq`!?">ja?2BrUcH'8DFEY3::@lZqflVDUYk*k#QVD+Z94sm=2,?-$?&.V]6k2\#D'9;&9t_:ZNpE<il&KY%^;Z!_!4dSq%`l+c^>@D`_/f&S:SXXc,\GPRh=;Uu#1le_5iAsR(*V.,l-e$PKnAta^gV.=OZOnWVPh]8i2:C=b.HAFt'IXhT;\2i*?+]HXP.8C$%Tj_3ijEU't<Ppf!M"]oIO_I7[Y%RouMp:XZ?oGK*=YI@U-"kK\0=H^mnSOHd^ZNgG_oP?^Eg9nA#3.IW+I)UXGJ<(#kJ$)=AT>:e%F>rqOG>i`#kIB["i_d(pk\cho-/35'bdhZ#(YqftGr.Ka^c>K]hMplHUstWS(.S`oXa>!i[kUVi!pn:ASVT@W#5hb'k7Du"7BA@A%Umq)qIRp8UNbB1Q<BN&GSV&nLB;InKTl\lF'L?7p)jBU6M3Hb5fOA3hTpD%sbkXYGBWA&XmUnmImIsT+J#5j)EeoH:9]ZismQ2<o%<TP)_juXIg<TYs/gHDbYlb8'`50gnXJnqV2#AtT2TCkl<jk3+H?-OUFL0F3qX@K.lpI1:U17,p_6!O1ZXM(nD9d&*J:'H<nk.&Lb%'[_oEoqTaL\]^,"f:8((h"U)C6prr7lZpRiUTQiE>;H/era;47+djeAF,ss+ADk":a$/".Y=+,)r4.*2GQuj9RGND%c[;8;SBu%k%Ms?h,SctVs5jFd9[VB+VM<B)o>\goQeJlOsL)G2[,>fC7]QHnYR*l($isg4`r(>uiGB;jZZ/CN8n#c;)_jq<RHiZ1]l'[Tj&4;d'%m\[ZHDmk$;S"'!2(IQ@TG>@>mqoKB=J&@hlqd*pIiQgnkk)fNun'P*Bg'Q/Zo-W$Ps#QT/JZoYPa&LaaX(pD5a16+[L]#"&+WYm[%F09IF^@e@EbS@9n+o.WUP/"DlB0FPNYW0!:^pqHIN<uc2o?M9`g[1^nN*-R1lS4;7k12["_U5Pu^%]c/NG5sLVR;uHM=W:\SAsWS%&a&%6%8;o(P[!mITl.2Q[unhg\f[pDPJji:dgIgB?$YmK!?^f+@sT**Aa]CM$jEiO]oP"IBadAfYXG1MLW/>a_Ye+3<D8@`Qo<!m%1%LaY.%UP0Q4Z%<d8U=-/aU'h#L`mY;f8ub)l>@\FZu):S+71jjga$d-_/S$51Fh;**7fVn#U02**:qu"9WY6Z#>\lIZX#!gUSqb%bCOW;O>sm'/[l7o8pesdl^e$%1l_L7Ss.sDqr^RE=kd43Obj=TFp6d.rg+c7mr\"rD"MSSKO[O*4`%S<kG#$"GRn#]q"3L+%i94\%_Ac8,F0\XjS'pf%%GTZ&EXuC:1@jFhK_K:tPai!%ErQ?DF/.:I`uE&gf+&_h:PU4.:a?Tq\`iHDjdZi?>0F#<HN]>-BrS;WqVG/;%2i@&r'+"NqG55?*mb"I;3SHZ@BJb\s(/CHehOW*ahHUu$Y,%U-X^3PCnjYp+)-G"B>%qmHdd8*lUKbc.O]7Xi2\kAOY/'oOqb+[8%DmHX3n5W488u?Vs?Ha^lpPiG77ubo$IpD-b,jOtgdVO#G%C9[,<@PL1T@cQp1Md\:EMar"rLf<`i8djY1TG_5@'l026\_+0P)M<&%%8+W%Kq4>U:30%?AYY/trq"[fgn@^^V.4RkWN?]^LF9(^I0kcbF?hQn3aMOf61^A,2I1!]93.KSKVi_"WBYheD0l$DT8hG@;?<[V%L>N.\h<oHP(]RW^hGIGW+1Fb,>S"K8;I92PEEYD[/?uHLFbS2th(U=ZZLuM-fp38LmK8NFYC61R?d!LP[i!(*2EaB8HtO\W\<j,N%j`rFRIhJkh:1D?=]ZmF=h+Z6Yj13aEjf(Ac:3R+4(>ui\d.4O&I,p32X]hf=`EB53nrFZ@7VoM8lP1L%Z[O`)AV"XXH=`[RDm:uA%g_o5+\=52.@987e/k=lY%N:L=BBQWXH<$-CQ2lO*m*Mq!_H,[AfkpK/Vk!QW,U5C-<H$(*G9WG\-I[o6<goY%%QI(@q(JkMS+#"Y%)E4=rD"<S3OpXb#msE#(J)>`*T\#_n[c;!:gXE0K-gLJ=#(3VZa"9)G<9A@^:*;Z)AYrUA5)OXJnk=U9DZ+Q`'Q`*@S=3p-a_-CO%/Et$+*Srf^!<$)Vr3!D0Z2b'-FNjhCT;jVO(80P)5f)`T+UcY*r%'jY2A)rfA-%"XTq(hqVT]+K;0B<-JBi/=I^/t0V\Z14Kk[jn%mHA8^2k4oir+,p*blP1S,>XF*kdpX<j8do:OnT/Gem?UI.Gl[8Z;#ftT5@'__Ct"lnL?*Z;SIZWV(pl(I"G>sK9u.c4,O!mV0jDN%/k@SX;EfmXoU?T^7477kq51g>ElLcJ/7&KF.d^\,@r/eUK?^n%d9Fg1EAj'QXaX2[Ek0uk2s&^h1Z%G1gU.3T%;!3(ceU,4*2bXL%]m^GrWScu"kLi\u?9`XHK\+mRIdct$bcb9m]mdSr\,$t&H1lU`g`o/fiPjU<k<G/G6.(QJ\,'7iQPo8bF75QmmpaFdrLC1]gs3I!%ra%h`%aj#KS2rM,eH:nPkBa/=J&6G@ap.d`S9`oUk:XGUNA'9t5PL"0YfGn;f8krWrN1N)Sj6ktf?ZU%MX2\6J$5JK'_M2s+M=(g%r>(Ldmc.Wg.IQ5cj'FsD(:T[3.I*<bn_H2MFh2qugp:t)[TpV]IZEYA'&;agE)0g7SXq%9hWeapH_'2'5IZ'0gok/\bnP-QT&O'@%pOI&6N78a5os;j!ik.ghjo"lLH/"X6nfGI3p%'X0F5H4Qdh1tcopao(5*,$jI,Dt'_nCLW[0YbJHT$ZL?9e$2f=499)/\.%GH[Wc%@&rLDS`a<Dp[^Mg]fboDlfW_t+.FeD][tJX^Y(&n@+ou+SC/[Ho3:6D^Hicemc0dDI)p_`$b-u$opfUnV`.`Hp%*;@T7_ldm9W!^%a0pGt+3;VLme*ojQf1u[H*Yld4jMU;Arb`*EuqL1Hi;aE*1C"pn%F1^Y.+7%I37??=h*&[pft+WVR]4CYdC"^5/&JOE#l?_oj5Dd%PMrdMD\;a?0ep&KeIT-p&2A:=eIObfMn%Bb4j_<uV_mMKI]gk;T\.,%St'`loB3S>;Ts()PNTMtl?iKrF<J?KDZS7<(aXBd&5J^e%lWugE>gZ!qlfXiNCRL;t][tIYI8'=>a8@='(?6GrX9%2gAG:HLVR0cD][tJY,j>MnYO#Etq%W;jo8:"^be8JnPCmlLm6-W:R3!F*%-ASoHqhPc8@i*HE?PBJU(VuVI]C(7EVR/e19qi[R1uUX"h49,,*[E)%hUK,f"S"[J25S5o43cu7C5O,p*Y!nIkUV=`Q,?Gjl#]?d%gj`s-EQG$bXdn`!`23-5.+*D\,h:l*@:cqFU0ZPjXDe)+edB.qWV1V+?iHT1d\5iM91=?DmtXipX]cj[H?/_+RJQl2GfliAa_(7B%EZ[N'%n!>VC@]&Wq0fU$\iNF?I9j<X;nog-m>mOEHmDkkZZLV@oUY;chtPlPlb22bb\qa9hb0SrmS<N-<n-eW3rJMiE"JFb/L(W]%fmdo&nBg1McJ=uUX4pH5qRRbH5(@LGgZmM,<%/e%Url4!:o^Bo08IGhD1+CdhAqQ@?dk!3Wpt2V&co224,M4o\9b5.kni3As!.[)%iTRf_f?J$Qp,^-R?b5oTr2/SF(BZ@pfbKTfTB,'=%WCG&Nt4t'_P@Nl0f`'ca/d+O\e6dke_&?Sp%hkhI/3L+H?Z2E9N5&XjQC'a%gBt>2POsq`LP@.\61P`LeP:F::1>VY\\8PH/+"+(T(e3kqnOI@W,(QbmTUG(X[:X$=u4QWgalU_9o"XjdUT,%O"\j2^/QcSe#119%dXGZ<ICPmd[C.R=o(RG*DI7f\AF&V`]=7O\q-#i/5kWq3dV?luGjBDB3s2I@&$Pk7a.XY_^RXre5Q0V>roie</R#m%YJFSE_roi8%,jiUmZ@4b*0Z5Ih.5>.aBS<iLdDUl@I#\+OY@Gm5U.>KrQca.&XC'Vb=umKC^eP:?cn+lI7$#;HrNMH`Pa.F`WjX6C9<mu^Z<fUP%OCN'5D\u@Di[?"bd)L5%,)T_1_YU=nBTp-`'Yeq<[+U@jpgR(tA1qKP7CDUmf`e8m*/=;f]if:#ihnN9ph-nO?GuC4L2q-B?\0_8%7BUK.<-TQ2:"93/CO;E;GTkQg2a4!%faE1j*Y`@lA9,9T6E1ULWus>[G@W+dJ?5Rh\[cnaA@p3hD-l#UC*AdaHPrb&L"p-"/ZgF`%bp6Ekf:*u'PfV_\(::@N)r?p8DZ"Q#J):)_/fbscXuK([9nB$YiG.*>/1?WaAXh9f#VVjjMrPgY@j*]n?YNSK*j_L7X3!u3r7F&s%0IL5NS:?fjam4D\;btJ4io*n6luel[oN"S2)9+.MS!\^ul(SG>i*Cr?rLJU8W#)t5m7q8"\C;Oj&,Pd^9)^TkI)_"\eKFQZ.]m0@%Kc\qF2I`;*3U<l8mg:FtKh-Cn3VM]@Te+0dX^Z4_20Y%!i'ong:KWT1%m89H\cgl>7gY(fmU&I^id3,GkU`:.W[lfL=H_7qUN5u'%=2Vn8j-[*`&3V?b3(I%&5OZL"/rDXfcS!:Y%$*h"%&<?O^:BL/)TQFr7#o4U6<^P+`aPQG9/sFLC(b$<<PcA",]t+o2h0qVe9_^Z%RJ^q63J\Ef"!-LZIB7R!WHe5s*\26-mp;6F;<,:8?0YET$V7,3mCn72SB7kR.iB=9>=sb;c3E[pBbZW3B]_=D*P/3OO\Io;h/K)E%KWm,E)Nm]<MI9BZOR%6ckl>E,ZCKBBZ'.*:Jn_Lk5F.CghUtf`:JWdT$Sp,%]Vhj2=JMpt)qo#clQ]>)o5B-D;94C18BDg)<f&5Q%U\@Gbs1I,XS6UJTmG5I1]52p;O^brEU%TZJ2#gPKeGT#H)X):<j0S>rV+[<*Q+["Mgq\6[ads8D"[&"Z^Q3H7m9N:h]djfe!Wk+>%EuoN2bh*;C9ocnHn#6bj*hC057Ge7i*dr"adP\S'=Y&_ub5MVn3mG15C+7PE4QY,Dc:[Dp)jcqlPVu`&3HW)c8YRpmDTe$k:Dn:g%]:.rZ%]V>j^oKh#q`C-aB)s0ej%ulo>Ph%RVfiBldZiN(4RFS/p$T[=1ITe7]4SbT#E^Tr8flL/C9==-h_d:+Z$hYIjTB,TLCkM]%5L4@md+VP/M9\+<T*!.ZhKXP'ng.#\McJ!f!C,q2PX>0I2:OYgk1`78<IIATmVe`pjH<L]60-:Md'Y5Xnc%lHLQ0IE<*]m!46Ne_%&fRfcEEe8^?KQWW/R\#%1gPH-=,5BBkt$PN27K`n^6lt.H>SPBD&u#("d/@lgTEp+ZNtN*U.B@\jH]:Z'90A(hcIsog&[5FER_Qf%k8qa;qk/!DkR4B,`=,re=O=9VFi^&hIkAdIcd*7#joQ$>D'FtADNsJiT^a5]Z3e`3s6`7U-bAbSPrRPjr8B/0WP+NgE+35m*%Q(R%[DKTi.QiZI6\d2EhRhb^+AP+FNl?uXI-oe'D1LC#EXY-^)oGfC`%S?R@+bj+"KXd:LOtO3/*$"Q?GV?cg`BA4`)&m>[3dp]OBmWU%XIF=:;[#o=5\=i6(59N_%$k9TCa[9+IUNgI,k_g*mN)O!PqA%U_V:c.\dI:kkQ2U'Ri<lEcUbetX0<S))q]W<#BpHUp[p=nZk,6"%Ap`hKfu0/b&A361NWAudX*\n;`rD_iNBStKaAJ0C5?)ud0E&FI4c!-8U[_&p\rnqVnRNhi$j3AoRQ:8r*>?R`k!"Xc<qGY\4?H1M%)r[0]%=nXX6a_J@U!_2Ci^AS:+'Yq5#RDN7#WVi%7Pu'/'hP'G?8*!SMBkI>)#T\-f6S%&^3tlqJ?_tD\oLim1dkA]>\oWGdY)ni%%h[fkqsQoN7%'-E=Eo)]_$;sC#2c&)=aLe@6jP)/:TKE[pF^hYi]mebTC!JPn<du+p`t3Q.Qf5sk??25`P[4+i%,CL>b%g=rga^X%\"Oq0ZW5Biq</$c!,3;I.b`oC]C@2O'VX1/9[sSH`KdAT(B&@0RpNZ8'g2+_'i9e`YMsg]YD,&eF&5b`8)q6:[&X3"`IBi#,L=ci%=:m%8/,o5Of(e\/f:5NWr]P8&!+at_(&a4Q.@mA!S7+?]U/a>Rn1(6fa[9!ClJ\0$c@^YL<-bG\K'4<5#)ojnaCG(2kbD2iD;4TO%L;t@L7e7)7_mf$s!g!/[U,SK;>T&Sc%&[#B<ZEGZN]7;,jsDR;`XEJujKZ_V$j17[iS.j%]k?CqD`jf5dgCOOZd-YMH*)YDE%_P;%L+0r/B<^+96VGDr;BRN,j]P4(,nMm59s(Y5='Jb,SYHoX(Xe\k50q:k_sTlV:3MQ27BGqsl'?e:Y611G@Rd&X[1`1Y6=9#m=e152%$,in+@tqZ;^6p4Lj%TVdA[W!1`HsMSRuSJ#0=5Q'P.rD/@2D,-G,I5<md;q$afhPSp!t@nP@(KAO!5@NqtX,lef'm"D#6,e#6Rde%.7BLKl'NuLH)(0,=F#fe4]2fI0d_FZQQ+>7L8?8;Yi6^o5@Cr[kqa>T]UJo5g9ifZYod0I@nJ$&g6Y"abCX<a:,h[Xq].WHG_&B+%d/7_r#(G%n!i.SW;R"n<ERJ4O;ciE?Nem.Op\Z4iQK*:i*a;+;-T[6Z,;h[oV1FQU&tRi7]^bW)D=g-34)Xu)he8);VA(*%)MY5F%XI@E3=f^pFkPLFt3,T`d)ki0A\LR'cL1-pOk3n<ci2jH/*X%e@pn[dma#DadoGaEpqb#grS<7TVK-GJp@K2t*rqX.Gr-sKYYE/@)%l)9tp_0fl_kbRcM)q;YTP>G=Jl;=;IE*61BPoC0-TK<(Y0-)sB$G'F]0eD'?7+/MK?<%AimOd:k5YPG=:a/]C;\J\0#TFTd,%Z.1%4n6=`+Mth9An\UOd1U"t4OdK<I$Q=+QpO[GrX2oC'=gKS:"2LXkqI]8OD9g)#hrr>aOT=I\5M%.MWuF3s"kF$kZcg"18GU*U1KXU%B%h)52k5=#g#*h"^j!:;:`c)C3Ag4uGY`PnBok;XT08^`obAQ\V=`#-Y*ct,h<OBG8[g4[>.fS`FW7I5dUVCt3iXKi'=i-j>nXRH%l)fHjO(a>VV:pO^^;UM\YdS.G\0(\]Amehu@\a@cP/jgL`)TfNQ+/7'>*""@3.;8oMX%s#Ui%WeP*P*\[4Rn^A[c<ID[PPp-0Zg:%35GW1A.7D#136I<HbTn8JK)OHX)N?2K&%NG(L$37!jTN9(mFn4KY\t%m$$orh'Ip.aQ^k_j"[E%TYon]?[giAq&/#PYP">aOeamX%/WL]HOKc2R\/Jl8:DVI,eH"CjcZmD6)tf\V#Z"r-?dO3>,uP]K8VbjW3llT7pan^foc9n$ZZe[_(PmE1=]P->Ib:__8::*JBf(cK%<5m^d$IV2A"5$sQUE]S\-'HqPiI*\b[=7oOo>VB\>ci#%L4^/LDWCSDk3mYq$6+1;n^0d`)kkg)9c=r_N[BG<7d52X#Y,O0qdBUP%+uYJoiFkP3YOs)u#\688:Ne(<_)Ldu6l6W2UClHu6=>\)]<`CfYk)]%rNiV%Qj-c?jfPq]V*$Z>rEulOYh2n?!GRpTfFQc<BkKR3%_N+>Be8?P@bkbshDkee1]^@;mbNPEHi:S\OnbRlH90-?NFK3B.EcmJe^g>IaEXRm;9ZbQ&%A\.8mZ):Ha:($k&s]\KR8Z^RQtsI#%7eMjB_p(IN.@5/):-F+:j/F0`;\(s&8Aht'L;dg1Lf8?C%7\UH0r&=lk/r0mGnC<lh4Q=npM=u)0?o%=(#1W5+RH6MnGY*Ln[L<r%lrj1Z]s:9TLeQt(BmjoTHttpR$(8\E.dP$5%j7f$A(l][[iaD-#JCikqr&@nDIS(^#C#JW&2r2PjP0q=p-VVFKSchq(-2rj^]2$e%/lDu8ULt(;.pM+&$aGS=njjLk&)`aM("DR[h\_,.L`N9*p9HAQcQkCk<c%0F[JfY6M%("4.BsT.MgW:#aM4(J/lQNN/?nIY[?oMW%9sHQd*E,jR].YgnIr&NHhR&1AP?18J38ULmjRls"oB`Bn.Lpd!$K@kZ9Ais"K*6M&m9JW>bQn_u'#L-ZA,S>u0Vukll2tXX1U6\J%_ME$$,mguqA)N=17#<tA!><K)946g'%3H#GlSsm3-8p*XH*eU*fc'!:HYYR*m;fL.o]k/gAi1;"qK!,#V.7tlVASZ.b5J&?_\<bG%LBH?\Q/r$_Tm-$MWM!.jbJ(C[<Ydq6_\G1(6rV"*bnHqT544d_9F.'s?3N#"Cm9[V2VC(46eYat9R`h99bl"OI.FV-?@7saF4;DK%VRejQ)X&*!H9sn(/&sZFnuOh(.,-"J@ElBrGe1_\3<msK6nI^2&aQMH2[4:pNiepj.IVK*)g*GSCN;60ZRaW_CI_@A&0o%+nRBj!%dZJp`bMuN[)TL)i"1>F*9-SYSf\$l!32M+:NBpV]MmF\qlj,/-Mg&.C"g.:>ER8S%"^2O^G(b<6"LB@3k--*hX?f)*[7"XfRY,Yq%f7)6R=qZ"%"K_>6CJ!13&_M.^[j?%Kj-G@97o3Z';Lq>8P]I#-O6s6:S.eO^qC&dqO\.XjJ\*Fq#"p/'6+tT\+UulWkB6tHQN^S+%G'4#_oSSrfoR?P@3MRm/B1L<2^;X4fG'8Q34P4p2#s13m&9bE+67\nV34'G]4;DhN$[g1X/>1H/-[NVJSf#B3*0T=rV_XF0C/!fC%HYM.Qj!Fni=!%WqSIn9])r)#bpr"#Qf,ii9.&FUA7H1:*"NWo1m'1.Mqk+Wuc)k513ABq<7[2&.rrP]$+YJ%r;."].C?mPRHAZbi%LtmWfmRuQtTY(kF$tQT@/iU9,2%es`Wep?e%BrV0;N3TY)]L,5)<;e8'`6WUrV]Ta[PaZ;fZb'n]ApP%ZtsPpW)_@InM]GA-0O.9%&5L[FckfI3)E0k8'%FMfa'=r*07Ek3mX7lT[fi:0(?;]"*us)L_Dt\=m<cFU-"8pSAhtfDefBb;F3L*<C?-qhN<q`iH-tc-ad<W_%',G.ShulcD<Ka+;d>g;U'9/^5>FA@[)kgQ-Ddusk+B@n5oDW1+;LtAG`O+j%IS1ob78lTToC%#@l!s[klFu>0SIp@`)tPU@!b&OL%+oQI'beS>#@`H(jHqpkp<AC8CJ9Vp;W]7$)m(mergVC'WIT8gK39/j"ZiX+Hp:D8Q!n%%!I`iW'4l(<Fn[amR2/Cq?Pi\9;KI+LU%2%G_`q*mo'UlkLee17mq4Z7o@(mW;*e^_9uD:gJCU;Aj.U\+FaCKlh\54_<P>TE"nC9_1ZU>OBL/7Rf7IE&JsSmD4hL.-XUMQS!!%\Zc@%PPp5).'NU<eZ$D0"A<J.YQuEV2U4t&8cna`X7LA\C..8IEerDpEbbSqqZn8ekboPa]I_!ME*!R/a8XJj#a/WZTcihSfM4S[%X0F3WIod*gl2`.oF]jBNk<#adbZUIAnoh67;^.Rm1fk7"HB@TX%JQYuotsh-:_2n6X8/%t<'=3`lZVR0&/!k>2`6YB+F;7-gseIO%!GNCCEDt>cLZ3G$/B0+7NLQA,4c$!nZJ!*<GJdEDfW6gG<9c`9-WC%db7!g"rWD"LPBt%1ap$E.a@+nb[>UKjb6!Lf#b>l'\1'GH%I\98f&&g\PDD$j:U@ArZ'A,Ds_ZiZO&/GkAiD^X'Xn."kIsYb#rr4L,=]ZAmf7.pS5nD5/Bk7<*]FJp[=fb9Z%[c6Rkn5a/GJFp^%QtOLiS,lQ,^Mr>>D9,]8+S#-0Pf)\InUN'qco=2L2-L'YDBSEI]XS&=c4nk=q"0;3<XlOhC<RVY6U[c_AdF('2EH!*OISfsOF?0n%\L/CTK,E?![sQP#1N6+_l^lmYR9h]5HPUZm<3ik5>Km]b]B]Za%dou-%#;s7W<^&+`*"96h:7-`XMQM#Q1!qR)UWD!&8!"1;\.X(%!n]XgJ9@Q+oq8suC-ao'OidW+^QV:rdOoI6X%Hne<$\BP<9:$j&o!Ug<9)gi6t5W1k]<,@cf,;2LVg+(]>8_qj'pURHo8b/k-0LE%/C<4Gl`im[-aFo[i&Nj,F#O6g%Uh/q-T:+12aGm;c11=?lNu7MSl!T88/;F8+:?j&#PK]b67Lab/0%#"Sd.NEU_j/A,*jD!#s=+,%]jpQa*4l>PILc&_hOS/dm4DrZVF8Uh<'7@eQ>7AY:eL[k\4)0<=O+H$_3>*t9.hn$_A!!$j8'N5!b'Vhs$R-G.0'FO`=*n$PJr2?%Qi\E"M4ji7+SOlk:&RIK3;lD[h".?ICq!R1=XAg_2^*3Dqi2U>.ME.+ZnS0pBmq9Vh;]qU*:3S8Q1"1,W0N')<'%usP0H_Mb/-Ot%6UYMYpiT(dC!CgBF$"f+R_#K8Z%C_8c/97XcBDq0EaNuf1\37VXKg@E$]W5H\,usr=$iD0c+?eGWEd8H=&]m>[EVJ4nYU\83'Z-1%H+Ct-8(_dQL$(Wi<:h<sL3O\m6oE8mlYL;]OqSE)IT$@[25X$%L)F,"*eGVD]FOi0'/F)*(rE':(c#&p"1.P0"?1m!L6*Oc.eo.\%`/%Fm'UADh=ed--\S\1m.VLqP8;L2"Kab'qg3U=$)'ZWaFJAAG;cMVB'cEFOnie&!ql]YsaUXaPpQX0b;H>u*@&H5K*lDLSGD@L;%<cg!hXPi_^XRne!-bp,!*Sm9^<e7kA`OS")*Kl-PdJD+R;H@Q\6s^Qfp0'*ob@XQT6Tg&jF/-m(rG3OKdU!qg_.iuu4t15q6Ue&/%gJAM?O@JPdl<0Nu_`B#4+lg-bf@%\pR?;3eo8B'"[jI`VajP2kFqE2%pOc</p@U&FnN"6)Zh3T"o.'FK^XZLBdrY_I@s[!6RnXr<%6d?^C.b;VN9kHPlcXa'p1*C27<]A"V":$n,:5.H&aFZQ\NpfO]a$5@'>$XWF[,f82eLBfA%n49/eko!_Q<`*AhD_g;;1A$Q"#.-3%Bge'>]#Q9abY&C@%Pls+QfstYcQaEBLWnC8,nLD$K]38HH=)/4a<<[#@ic"'+QotKZ\r#7pE?Mg4<c"<,Sc0T#-s)d:LuKd3eQYg%ZjeB$P]7TbQuOEI$kVBi5aWULS;`929@Yp'gA1H%o?.Pa>DN)`nWA'sMXI-(X/.EH>jKNO4!":4:RBp>"#sM)=0MhtC!LtZ85F<(%L11$t?+453`L$G<*@s;up/,*Cj2]q9Y\n;VIlpKk<IET_`fpr<&jKJ9EVESadG2u7n-bt!?GmoOmR6k0aQ+f<ckjYqiKWKAj38Wn%EKK*3cq&WJkmRI:B%"i&5//9\S0-iD[TkE(KGQtueUoj6di6dX>E1*bUH]Fai_mdWB`8:r;eXJNH/3E8J_9-#m).SN:AiO!82m'`%GFV+-GW%rYc4Vf5`_ZcP/*QL-=1^a&-ZT-=c\$p=gooZ`,CYT`^=5C0KR#Lm'g-B"'(tWlB$gQ4\IkouhQf4sRI<I03;/5Nf?!9Q%3^R2e;O?ME>5PmQcp@pQ0jc!iATgDP,+R"$l+Sb8m.F1NZB!O*p1g+7i]."r3WS3g\4PnChmf#7iHPo"Im(pMWibfkltQb4)QQ>5%`IAJt%N@+]#]XtrOhFiY*(#733$o+VeTIsYi,+&NqW#@AllRI-V/PF=#5icM<9$tVQ_rR709rF59bKl+!GQn>m`'/;q\RuLR;J[Q%ORPEdhW9QZp!<:"=S`-s=^l/RE4W`-QNChnD%+:1'P/]-kVkCB0uRj7P6=LW`Y$G47n=;+DJR5cmsGMrr.>'9Tj.`_MA(@n$_g?r%VB5Ntc$G\cf?&=ns*sJA1)WdrAs;FKic<Ia&'p!$cV?,1$Z#tZq#ad6l*^AQ@CpsDrpRAHDbbc8]l>_B9]WC7#7&p]WSQpMg;+VG%N+W8h']CY"L/jcQF`OHHksMM#f9S(6lD5$U@FqeG:hr.dc,:N(<konf3ts]'eBlX:K3l6@`'_pD%]pF?mRs6JksPRND0p>ki2(co%s#b1;^/t0!4&p$`Fp[dM^3ja9HFSI#NHVY9mCRV>s-UGN&"apim)?$ljEI&[lNKY2)s*+G'&91?QO6W"Ydh4Kl`5u+^Uk#YDq:9I%gMD&J[mHR0oc3XNoedHJFE^*A]o2&MZl.Kbd`5m>8aZ%s(/#(fX+lNml75*FGX2RXI>Zl>n:pVt-Je9dZD1&nN<pdKh$(D9aB[TK%-WrPFa\+@)hs4?U^tokI?<W8n%g>65H#u!U/kf?Kp%9;QOkUH0V"/;=S%dNFXU)8]g>;?PI:^&jJ6tIEHRqjJ-4qC2,GF5aIT2iS%`3u]]Y4c37!H4&`W?*F/j]"C,5dNlO3M_N`4.&o6/U:Z]i`SddS)sQUPAOC;X`?g/cB%!rC*M6lq5"3aai`g;$Qeb.[7FVMEW&4d%Q$>^K[1<KsZ:Q?9ZDKmsXnHPkU\L+WS/&WgjfIZG_AckeYEF-7(dA<&iA+hC+'^QVCQ199NUQeYpm!iXjKJ0g4#2j3Si0os&HPBo%Uj:jkL=`iUmi2q[[rEB$VCOEG2_N433cM9;K`"hW\g=[!F!8QqUOho<(9u<]J^M5EJ&)[2qj\2%a$L<BcbpkRZZXW4LS2]562#)f%=CgmS7dO4#@S\rpkrYWtbKkIH=h2?Z\O('g;Q0R&7O5]<.(RXl&Rq5!CF$n:RA*R7'Eure0La)qm.-UN[NBf=c64J%pnG-do,&fT%U2rPZPJbC%Z!8"?P46WJmN-W>VkUMtrW=h@oGO-%Y#p#?1)sg0)6FV7UR6MdaGgUV3JraH$@V=fk_13o\O!,edfi+IWO9n]E`[h6%Vb4,1j(FphUM=U'>"n6nG1Fm;kY)JgP[@Ae#]cCjbW!KCaICj-@4)Q&6K<33M!O9[;uo/oEhaOKf(/H0n"'H4os"*`ZE&jG"3S4K%TGiho:G7L?Kp<:QTXeg;!*UfsKIYo)0j.WA'B+Q])4^HZOY#N-'/7K[k"c>rrM?`R@A7ho6OIs_qcs_d_TZKYh9BrH.Fq8@+oQ5"%El.QP+M=t/[o'%.SR\PFchKC?Et4MsN5qHP@*8hRf^rg(9B91X\+<#0EM.1sMLK1CPR..9-NZ;R?7/#o_+=XZHjdub_oB"P?s=Qo%m,bs.PR&5J1\OU&)$rEc]>kj+G!t!Q51%f=&,(&,@t)k<IO(THJbO>8!/pV08k"+o4f+mo87DaRYbd4AmIdHYYZ*=QNgM<C&*N[m%"k)r\FqWad%fu2m7q;uskNW7TI`:Y'0M/*V(&0]?BtJpHd#Vppj^*>KDVX:cNn4No$gYL,Ghn_a?Gg/P!A#_P^=MJ0DMW@p\6"2;%N(4W:G[ioWMW#s'6X`oIcd@:'#@]l9d'$rca5TSFSEE'A\GD;k'W0M69SKSd^Kg#B0aHL<k"/1S.;s:h5fOOtQE%=of9YZ4\>eLi%.#AA5LgICX8*8o@Hf86]GJ(:K.?!@PS[)cmA3B!D(`WZ6&!'$'#j8I\#,aN'q,&"RO.!&IXm@Ftl:,Ws,#KDN9kf\0$D0<A4D)U-%nJ[upiYqu&(f"L/p0U70-*oVhN!r4H`TNEZB"DXk=._9(hL8#;lUp,%5)?Lkbh.BPq$u)VnHN,aZ%(aC=jmhcq"Ui-h]ZdH5o,O\%ipVsdh&qVZq'YTl2;KC507I+&*O;O]A4['C_XERDeL-)=/FX/&W::'p`+/hc*O;O]A20.%GK@Y,+XP-3q*3"TLA=8`)1=gE:eJS>%W-`aM]'d+\`<,anXqTCoZJ2YYPWMeWHE\h21aYqdQufL5_0,5@Cf;LO7ggKf_gB#so0*`B'Vr?/jGLoVrP`Yp*S,.KPNN\T<%bqo%ShS#(Mjm*?M4XsnT5`J!6J-`hdD!6R-<F_)HncMENSDFT<dfaT`8-COn(e!'?J'.?/,*6,<^RuL7Za\EGVXdNWOG4kZdV"=s4n_#%j<47o6N=mJN#%YCCf!^"cpJ/5a,Rkq/fU$"_;eiEr0GD7a/)OPh!+Ru_nUga!8X7eh].l4\KE?uL<=B;f+Bph)_-hR7::W*%:T#I%OFhcMs8@EK'D1TG+N:Zi789aI.@s+Ddn0fh6P-haP-Y(3s*$^7*hkmuTV>Rl8Ho,-<9&k9"]'_G02f"X[9a'%9JWb_;F*1.NN5n@%`sV*@:m/ULUbZR"!>lm,nI0b<.o$X9b?tI;_S8Nq?<RSFET9XNUDg'!nY8Ei'HhFd[tE(/PEL_dK:*j^-=VcM;mUK&3t+E@2oeb4%jAAk:%g+B)8ILSo>^0(i6Rbp(W_0qe'W,P`$GZosR5k5*5gl`;;PgCh`4C)Y.b9ToP<$WD6k]".&31\B-1EEbcGXu?*L%6g_EF79%\/?L^RKu:&P#)em8K"c[!2SYpk9R6bY`tpj[HJa$OURfr9bU&e+B_GpbYa7`(95bJ8QH:L<.nF/5j"?iB1\m[Ag\mo're@RdUFSD%;qY.*$q^$4EG6`"&A/E*R58;5W+7_k1H]7e`bA=GaY9,o&4%QJ%4G_COJL55.Bd8]j.d`L$ms"T#hL<kk2A>&`S#U^91h7gHRZ`i%5.KM7$n!P1#q.,,/0/p;i$Z.O0icXNYr?h[T--f4>?KVYdH6#=9_cZ\;[*m@6>@467NhhM#m[:aEVKj!O&?0H0X[=b6V<8L-jL&'%cX9^<B,C_*r%a5Sd_%&4k=#k'*$e3=%&SmK@>U0,L.>B_N:9YEjo&_oUfb1-$_gH)6Sb`\_F%HXc9EKq;=^D?W!8r-!2q*eKV,Uc%+%HN.MaYs$),:pHcVt!7PpA!W)1@O0'Ti_`/1Dd#+Xn"%>mCb9P$(Z16rXI$WG_fj'tP#:!E=W=A4i(bE>*lK-WrRh0Eg?3j4Ir-%KICp>(efdU!(gLt5"c6(@[9`Y6LFV+aer2Eb&ZM$Gm!2C7LgF_a#S[oMW+cb@*A\n`[qr-"f90:Oa0eua%_)CLk3rEU!LaQRYVE@%-WR$l.>6GCff0-@,U+@66s7">A:\JV8.iJm#GR\uMF_Sg=N1l-E0gZc[AnL9nt,)$?m#H%$$7Bf_%+BiY)e<G=;Zu-SOT!)O0&m'%[(Sq3Mm<Tj#^iF&DTeIkWedIr>7/DKLWBNd3_0l\&FEHfPSG,bbb\i<]'1n\]4u=8\7lUE'jDm+-(:tF-4-6\RRQ7ZB2V4TU/<5&%(+\!F.Fo0=(=UKb:8:ud(@*;$8JCF@bQ_rc_WG]9GY75NAp+%R`bjE<ibCVL$trN8lQF%)c0B?`[s9tZ_iW/Q_1sI2W*Bpni2jXL%&8*a.j3o$aoI2M)!+[rFZS>:B.5:tRB@jNCQ_\=n`Y6$FDsICg2b)q'_,qI]r2[261nPXV@f9#jXUPc`$4*'D'FnQt=efs]63R-t%buR]-0XP5J1ItC`-J`A,JB8!GhXX5)2G]]c4l?=7GhTtn:3"5o_L&BM=pGT`'nZf<-&W:bmM*Hk7^jWO_oH.fC1MlUC#f@'cielQ%T`gb04UZI3ONOh%dhSO+<'"fX"MC6_Ll2bbMC<!D#&@8+;pf"70U\,YW!>ba!.h(XCP9_2/!e**@QLOqp+(U5nm3b+K*f[mTit2u%_Wrsmd!?DED:u".C'bfC6./*UMFdp9&5B610poBTT_g^5\/E.g**G^SE?rN'#q4&tUJS]q->iiq)2[?%K@rltHu@+WFQQQ^-@dRh%__dc:8;]@%:Rc('XgH1Ujrcj]B<cm#-@Gbh0F/4XGG`KP%k's\7kJM\2]+dp;6m^[6l<$u2:t"c;7D=B@-ProDDF;hA<UlL5g93?%+@6s0eRf=iN7ORP6oDS!SR<="TVOA;7*PXuG?A3&fROBpZCrWHnStcq'.Sk!7Ua0T`m)E)6Ne`53HJa_&>AioDHZ1>f$(_:L?%(6%!.5NK9c?DFBb[9e?%Oh/9CbMcg0@/[g8)G4V1MF6q0FuhUe=VRW+@YpmLn-FB^Sb(>A@f7</CqX.EUDV6A$V//qYRb2<N1YRm<][%`Hq_c2D.1)`.iBkD+^V"%SOgdV,X-?C)0HSOC/hOWDAjV2%5]a>Khm5(])@H13?DP=NV&<AA+beV9hHuS=67;V(B'YRB1%bjd\*9%Pd@7_?D!)a<e16DEZ"=rEGL.nKJH"e1l!b`,o'L?Xu-Oum$e]3[W1Wf*gAD48fT,K:L=Z0,M`R^nK_:Tq@NLR)4(Occe46^^tKN=%J+`104.&Pf;RM(oFBjK=co25`Z-jf4GVTP7^pJXtdKUaagMds]l!Df>^0r->.0X]IPjT'<Agi9d1R)\fLuP*q'EKMg-l#QVWJ!k`%"g_K,+W1jo2.K`9dp3(DDl"T'/P-Ec%9E%qLu#Q(XL(F$V;i?Y7mUj_\%3A7)`IdSYrS"'ec@OE.SD?sTrflRBmF3!<_815-(qV9%=9?VNK[m"m.o99%Yph/4SAR,%BeEn9lZ.M0?"W`nO\_tk_EGTc%%T*$EQ&(&#gJRh:HkW@!+F%%967^q!X)jaLN0pb'/t3`(dnt@%1jRq;7-/Z_N#i$kMS7C(14'jVN'L8b^$S)73n)km%ZiNB;qBm!oER'O@;WrglY[*R)LH%EUrra5*F"VA-7]6+_a/JSpkUX1)c_<i%5T"e<mK!R^H5W?OdT2_\^s$C?#73O?HmNetK;HQD(bAec.,^Yj-EZbDPu.Q2UE%`q=i?-,DZu*J-Bj`]Z6Bc*eY<5p,,'rJ>n0D_%(f3/p)5?W_/T+l)@podKc*1-$*sHQbh('$n3Wf\7?XrM`N"Nkg&%Y[^:,;rFZG7^t$cQcal[Z'mJNe^lR?0^fku+k3W>(L.Z-oOH%C)SmY.\^IDe`jF05&E1](eiq"U&Y55Zske`3Jc:_)f&RgD$CZ0R1TlKc/O6%XRR;T/1J@i%\T%O"3p30(-q_?RcO019f!<A4<)4l%YWYO^"n7OfF9b+)R1i8i^1Q1ed+E4:+%HfN_l]%1"3qJ]+E3;eR9>G8W,4"NZFo>,d6(tO<U?qE\;15b@TSMO`;p%k=XoPG8<tJl%f=\b=WXf5c1htEQ()YXLROj1si@"&CeRYi''FTR+8@Bp3:"FG+=-F&g$#NTWLVsdt+BcWL&[aNFApRaH\a).h"sl\Hbe@9cap88,%f<'RRadoKS-?h'CE-JJabi_>f2YhPW5S_[$c+X6I-po?4'M!ngHs%?9`(qNo!C8JN$<Dfc'8T-Cf&DEs_*l[]C7oQFL;RPq.h"g=%.@)?!6YUYgJD")6&8JEuc2b3Bf`@uFJ?Wu'0:9.n)c1QY(k^I'$8b=WW5Ke[FU:S]^E"S8)FOcB`gU`Y84EmF)9%?6'H@&#pB^sT%jUd\eO>SgQh)O=:+[B.j<J)-fL/k.Kns-.aJaoZA9sls!)2K6C)VlhR2$AOd-)+<+/T4H?.O3L/cK-b9p=3-N9-p6AEpkc>+sN8I%`c&j"OT^nH#!W4m#l*UYO,QW+P^,_pRG1(d6.jsZG6u2*Lr!$kV2Wekjq%PB4hsc)O^bPj#q!roC>A/>(-i;$RGCOV-HtUD_ebr%%f[*fbDNbDC!eX?++rN=$_?<\5!)Y[sedCE5bbg@?KS=lB+j=c.Kk*m.Q7^/j<lnaDjd%`mEcqHS$GZ])'9ooa?jF#Img*@J=UV@;%(()!DU]Ndu(S/1ViFF(b\qr"4N0?"Q=3?7"oc4-s;(7<B1>O\sH(DbSR:%]q3@XR"PX;k[de!W=:'I$3*K)Yq5m$VgB9t+[#"jc?%)H7;s'X4rX[$6R09BeJh)`Krr,!p"MdE=e\LeughXO'jbZNf#)Wdp8O%DlO&L(e_($94I/]irSDmM0.k,]0(2d`,EDD2mls@2ao`%$'\W5oN@QQ.>Sq_C$P0K;`Y!ePCAsFI$nE95;Pqm:&VgE&T:m@aY]]QXOt(Zfic@()XEs9=L&#?92#s)?jEG2S*U5$Hps#U=-,@k%"bX=;XP[/'QA'l!-tDJ-l%q#$Cd8'<lsXLm.g<0i@p9<VJ2#8bCE[DDE/r&mn.gQ^k,c:\^mUDg(`1Y<"Hh.NN!fdF8e>Nf4KDrS%9dVOL<tN>LJ-gWK+A(c:L5>,FmOKu808F(`:GPBYQiVF`/>Q?4e"kH+@R<s\Oh-$&MON3LAg!s^Z_BaU2;#cKK@6VY$DK,r?r[/=%R3.+@76u;FTc4>jD9P7]7NrcWb^7R+AR:?g*Qf?l*@+=7=mNFd5r-@3Z5ZDEJqmJ3nPZ7;SHAR2YrFMO*t0@c,d!H8$[WFB6?m:i%kpH$]@kr&j+N?q_><p2=:>(4UZPQl"-/Dstq]duK4COPpJNYDsC#9\<rDGBCO6n+C_'o-C(4u?b(^!u=;Det4KCMedq[1ne`[R>c%O(fA)U`0c%=ZIVJX(Llk]W^H/,`Uk2Lsj0`!f?R"W#R_s'X=udnLIfdjt]N5Dn;Q"`Oiu0H=%4=JeB8'9M5D`P0(3K?qfS]N-]VF%-4j+G(h0dh%57u`%/)9*:j!3IF"!LYVHI;;I_^Jm_<0i%3n(>'&o:kVN'W+GNB[b@Vi5\l!0TdX9bT)`.1BqHYH*QQAh]o+)0)5a%!2^AXZ!Y*>mJgnfhKgM?Nq38NK)#puZN)FV+1i"g#O@8#-%gpT)jCWoN`_*IML]l:==u2ihg<*%b)FF9I3UPZ4TlOjGeV>clKYI0%aK.S\hbZ4XC9Z,u<%F?iV^!]&3;MQi__Nf'luZq4V4!9jW@";jpTfBpk!RlZ["d]QZl=j#UT?iNjPtU'S[hhKW4pXO[K;?P1D=o4%M)o"SbM[\[+m[,/#(i`CE-$AGbjG(%DB[MfXFe&BkIRC7OOPX]DBejkh\f$,5N[.>f7E=cY56l$TU"Fg[ei@.`eE>p>"cta0\KJ\%n316c6[j,/5CQ\G\L.H:*M..>7m6-QL"BlSBC;bc^.,8EpP40nd/+d)C<m(3V:":oa]TC=-D]=dh;ZWA7lXf#Wn]\?Pi(+#B%97o%9J+hs0!*T9^VF=5]?Db]hs+P5gHU"i2l0G<[49r-Q2mlU)m^nB-l0:m3b]F57d@\`Bjc>&$<=$K'N")<\$iKL#d&`\euo2sPpYjZ%7]3$%"]@C*"kWPl+%>[#a!Gm8XYrK$OPJrBI1j@Kf`LiHY+J(#f7(-P4lL`dikgHa$68_Ah.a*6k+5Wlpa2*E5DctIM_a&9fO<Q@%gBHDW^]iQ6ge2`GWM%2!Ijuf]]T-YU<s(DGX3#8@bD^fYXC#r-Eoii)C(ZeTlSf`mP.4[ef@LfW\VskVDR-XM`=9A[FtKj&.CTYc%;X)87VZf[8"cnkSqidhW6["PjX%C`Ypf@IaabM43VPnt-WbYg[TFdCf-)mK5ElVQY1rn!%2m4pU$WOK.VPA(V%8H3:Y9)ge\MgrU%*`0#1c).3-!o(ZCFG%P<0CI'7`SEm`Q+\%uC@%Pl24Eq#"B:hO2ZIT-N8%_WX<18@rA1TWTCLbH\pI?qQ^\1;DHEfIqfTrp-\.ag%6-<I8QT,?JoWjeo0Af#eT%`/pcL:d<@%#]9jhL+>K$07&c)c[@;U)<lX$'`Zfa9W.ooACD2Cob';708<W[C5h2h-j2W-%<k+H:5V%b9eN:Z$*^"96BeM0%_Ya.dsmE!^i^H6.c$edSUQ,3$$BLk=>p9B8A*he%qg:PR\h/FKF2Q%dn+foeeYn\;kC+*NfDh3#b"o`d3&&%_-`@Z2Ks2fE[`)$D@C2BW:1)9+AtFti5QXIGI'&`9dI6.)u[o,'PrT,;MWX5=*H1I??j$4g$,RUp.N'okI/eGE4+Lb\Mb0cikn!c%CY@`m6TOOj<B4m9PX/);Zh0MQN[B5_G0&[0bk:d=2;@+dJ2Af#$E``\ck>))$ZXXT,-,^\EoS:HNjK1L&k]:G;GR45/(Ig)n4%e=%]R)s>frN2#JW12?>*T5T2:k!W+EfDJ?-6`"*<I$uS_0,cZ(dLA24aM8G]irXht0[=``=m_RlW"Ml;V[H#]l@.FF?!>$j@q0K>geS%Q=*(;=WMZ4r)eQmk0ASgBt'>_l^;J-cO0*1>U.n\:.cheWYEJ@q7!d&1uUKO(O$5[-D_R3Nitirq@c]M4kW_0'-2".]_`@-aj[?R%fP1%N(aJlb9Oh'L%Ab89l5(FCh%85o'Hdb@r?)\<_:,<Od@)lu='[`/:oGf[`m%aR5sK2R`$YS0_+u"7CSbl^:Gdg&#MBJ3$.`+a%:`n-:p;\\d*O^@n_"[H'fd3r:i<<6"?$><c#_AOYrgJR;-%#`pAZN@MAZ9IU)p%)9$'/0rNGD0ic(-#$Vds]Nd.3"r2p><+rR66Y%eEWZSZd:FlD_ptE^9`+meg@At:!tKJ?)5Q<X6Tt@jg5(Hl)c-ani%Q%)lD:<p0a8jb8g\WecYM$Z&%`Bg!-*@Xf5%\Rfk6Gat3Zh%eg_uBrc2X5CMfof1#-g$6B)Q1%pCFH"B=;0RF4p(4T@T3A8oNli-g36mj:_OlN"osPIp$PGL>[CD\>Z,X`jpS>\>_a"Pe.J+hPDT%2W7p-W@5[M\Oqhl(`&q60UUJt&+&!0D(6bhODXAeLLD(0b4o)TNM4Wu1E;LQ*&*IUEhiTaHtp432.)T;!E(7kYfB\O"D)&'FJVKo%la/s@gmT3d^V+=TkGW1a]PV_Zg82SGQDPZP#plfjVIaZQ)$+AQf64']D<K9g.Yt/alOjtG-Be`e3bkC$"B=o,g@9u$elN/RW.;oK%dT.ZEqO6$J!aWY![)3i@VKrn@Or[rp\g[!XfPP)CVQ=$]7sh(Aa=F[Kgq[me;Jd.-_N^*""BM?>c"_XYK.UZ1>]q=Go<N.OUTi-[%"H++P=R#U$>JOkX"f950Qu":QH8Ut8L2u!^_SiG7T_0XEp2I5o>\3J=Y)k_d=,!NQ'GW"ngQa#FY!?B=ZRJDSmO)]Y_"L-L>+0Ud%Y#$Zn#0)sZ;W/*:,_)U//u)#W6X?@USu%ua:dMa-l`B`Qq8VCD#NpCdJA?L$>j_ee=rlR5@TG.Zq$'bnK5sgqi\'&tIa13J8Ma*i%TMHVreT#<;]er0DMBAUXNHj=H9YWI8Z&3P?_:qSj\?cs%27hoRZTi*Q9Qg`+S[3*40_oe02YdK#7HJM:b*eN"C7XUiM]umORQFoF%J"Ffp3S'e[HT;/],I'Dj]-NB;,auL'&/[];HqASeg+$CN.#,A#>,W$"SI(t=URgEF=8o&SU1p3,et`WKLB-U,Q!EdIBp$uoBs]c5%X9,n>'[X8N5%cSBW5o2&7Y7&[EP5@d#G)jGo?SX`[DffZ3&iC]2ktZ!B6S?jF7\iUJ@X(`fq$?M`H@)(MD_H,?E%R2gYCkrV7d=!%09d+dOZBVW!C#U;>)V(O$\FTb_WcSCN,!DsiAt<Cq59;@"U7DYPkqNl[ai'3:dIajpMhHmosH#6V(<S4PS#<S4k4%nM1G_5Xpp3\%N&BoPD?l-eAsRtU.g_mJW/9eDD/b=;TS[>m4']@&WmH3CN"Qt/g<o,%K:&=2dY+BfVT7Z+J[8Mt?*E-XL<pCQm['*gJ\f-_^Se0p%RK9o\j/e+DCGm\e$[g7KL'^i%j8@]fai88!^[BTbEMo8^\m]cp`NZCfpTFiSY'I(OaOUkpZ"B8`,V5R`?stBrINJ"XH9h+!/2S`9%1lOA>E'^b].B>B2\tl$F'j2"rDk3HEYS1m#pZe:N!nX8m("UQ;(K8SLB;G5m!Z#Q@Mmt"4197pF-fo5s++s]JiG5>WYM:*oj@7<5%hOesW)2?>*!<tKKQ`hWsjNdHVU@%C(p;e0?OK+P\%8`8;c7UBaSJ,`9NZqmq/KZGn#?-+;=cb-HatG/93rAQJ3(i]b?l#FdLs"P*%K^DTe8`E'2Rfk5MkpI&EH;Uo`Pr&]6&fbBC;!ngPLmDtU[J'tUjP'le.ikD?1r.ad[X,u%B\8`</>^-F\qHE>Um8)^D9XqF5%Llf%iASU#U(*#j'74+*ga]jCnbQO&-15oVT?(NSf@Q&6OX9NA8@=m9QCE[G*SEsVauT2sA^XCqiBlF!["rWU>-?T]2&RoH+GC'-96'X@%;XOkpG3bWu=#bNU+p:pK/_>E&0k'b9D)KKB'l9"hVG&fY8DDW)9.;eV3cn)<m+Usa/#b&1CurVg2[W$ZlV*N+@+q9_.Y*[`'21p(%d+,+t]rF)IgJNAZlkmqBY+98B)V?AXs-?fAo`Zm*';SodmkVZ:!$)W2s(4,_/GLM[$\")_;SSnrOJOCE-G+qo+ICc%.*H$hUql*T%V>d9r2ESiJ-MNDe&t:iSZD;'70AOs>5SEe!Nm^>ignckmKtnkHf-;uN2ZppK1GE^7O[VC,1k%\U1gLA<J=?WlHin/!@21_bWXcQ,%[8;XZZC2amo/!]\U"i]4$dDDBXmOYr@2[AU26R.;&q`7%e.3cPZ_9u(%!_mi>Zd#&LLIYg)6E/-/JGW;IXMT3F\i\QRq8,\Kgh;n%@[[11;SU(>=VVfMp*(MRB01+:&Z+k]2tmrU92+FY]+M6_4^kjT*Dfl_B.F/:^%mNr%\[3-YcHCkIJ$YPL6_fhqX^!u4?iuInA+Y5%^b:Qf>1<.FHbqZJ?&u$.3uAM[nS4b56sG#KEEniOkDnJc0<$Sn/j#19O,DbLV1@i:D/BSa@Q3do[bd_%?8Pmh.C-S;keN'W'BUB.%E%A:C2$*+beCS0=F@kWDE;?mD8`fI,0-1C>'uQ'TCF5qcI98/.VQq)[CB1NQg9ED35\6?AWdls(Br`g1[%\M-BUU,KjHXnqB*(G,%j:)N!p+)D0&FUbjQpp4bd33he^fG+#_2l1kHW7iU*dOcPe:D[<"a%FmK.9th).3)>E!0'*K3=i5&97N=L`9+TmjrCk"0e>64E(3N%ej-T:1Sg4$Q@eD2'+JVmP?S/B-(^DpQ'ptOC6Gao&X5t4KF''77QnYHYTT'+l>\(VrLEY+OJL5B6mBMM9bQ&t_U_pUZoPq;n1Z@u%jl^sM8\l([HY6L"0h?pQYDI-X"P.Z"'gjA>A:)FVFmSe@$bbDsN+,oQeH1H.VRk-dllf)PJAK;rZZT\<c)-<"_,A6S"U?rp_mYd5%&jS^/P;oRE```,XQQ)tL_NOlKa`8`O0m*q`j+*d:etcaF0-r3\H#p/8Y39S75LRS+8,q`2lj:QR/g+Dhp3&Ba'10mQOn%iCd;j,4%=`@/u-4PMPl"FEuL472a.kp<m7]TDb9IZJ(q.1DnX/b#R(tsY0Xes-8<lY1dF#/bo9K0.!K7Q`gr@Hij+?-fZ\WriGk$XZ'/*$U!%VIPrJl8KVq>Km5S`5UVLjN3k,^!S=9IjG8hD6YX&`LnRQH5E8*\/ZM#X@I&pLOa:H$#"fW\4Y59J5YS@/4hfu#V73C>4@Es).UKE%$Aqe^*i4<X@6i>]1f9\,XNEY]@0YGPHL9O&c$-#1/Za/#o'K=:6AV#/?YqWah-m[k+']q-A*+fhib!6"$*J^[";sKs?12nh/DK<N%<#aa);CRh]23huLk-M>$\ZGo9crsXa=C`8>7VgG"4[d\mdcc4A?&?#C]']rlOh0+*1=;>Ch?Y<BmtY@ITT'F;9l6:K@.&cmUqq25%SU6WtQ2776$.f.Bm=YL;nJd\,:u0GM/#tF_iR80<E-.7b@Qc:+BEh.datVr^hLXM,VMIi&W8Dbdi,Ztk+9"'!:$A@%O[6sfKJKDM%'t`g;miZ<08-$&N3,!/'$'m&5kfk33M5F*d+'+bOkfcP=B3l6PlVaskPXNb%BPO2sp.T+mFJn:n`U7lJ2\_"t+Tpq-9(o-cEf<Z$%:(B?Q1t@gYCUef(T%X'3Oc9Y@qWW[,iDOSZc%)Yk#":!5::A6HZ$]0"[9>r'jDhrJ"^p:ICFQ7LIX=]fVTciKg6G!sR.k4="."nH%9`F,h6q_ITC*/i>@B%Y=?)>u_r!l%@DFuVeZO!\G]2,kUqhjbYU3D.kQ2n"%"%s8u.tXZc>0DnaHAWooTgZqjqk:.L*^.A5K7@_5%54_26/q/?H5*mpoa[hDX.?HThi+E`<nDL.F*V;bt(n>F3P_@"o5\6?Nfr]0e_P$CkX:s5-P3XOg!>mW9R7f1_ag1&:9iE1#iU?G?%6/JWcK,E1l9M-mX0/jDfYf8HO#tY,_?\,mc=L&0t&Xj;"-CQ]\ie4S=r=Ele8=<cakZ:Ag*S9/Yo'1(&fWeL_dCl_?oCQSV@i/-1%40[0bUbX:!Yfa!H7l_mgF3XH1mHp:BUb6]o.XU0rV$d])#HN,?$)B?\m:q`Lg(!J73U^N*G;35K<sQ1C8R;_;PL@NP(&,1=J>uml%8SSVj!WB8$1nOne!HJ"fNWa1fDc_d5=SE2j7WEd*!p4C1i!sI`p<H>2RV:f4A?/i7Y^D_#&h7S&iFT!aI]\PaP<B.n,b^8AGc>3$%h@Ig)A4)l_#qB1/<6]0qZ+A*&Uon3dXN;S^m*_'o7\bN#g/C8IZ'qN>EXQ7t#:+7[)I.,UDZ[R`D&"8qhT-l$L]aZkPY>S#QPZK+%Ro,,U^(br+!\F87%)R0j?V1CXF]3lT-R\[ATn)jAd.C2^8WgX7gkQ1?7ak[<D)%I[*0-9QJo"gS:7egbb<LgLak@3a;N]N]TFD60%"d"jA]T4KF';Q79RJ$:a>l$%eDD38^l_C-?er+?-[e-W9VPiX"KWBKOED)V+>a)Ddj)kX`BUbWJ@=7DDk_HOp)B#/e6+$R$M08i8%lA),69XOf!C!$]f#D(,tgm,?C[K8Ork#,9b7T.6fXo8#['Me?iC$5m4MHVTCNBiRg9as"(D\K<F7(0QB6PFn7cKr\CgC4+jgdWH:%7O>:%-.b?>K!AHQhV2:!MV!DjMTL#N.pZ%l3NPkSi,&!h!_U!\YU$W1R?UPWGL*Zn,6TFU;mNc+#K+uhL5'c3J8gK40^(7nW*<tf%5+E9kG;XDBaRYVs\g"P9</-#/(0VI2pnFRE?cqd=_]c=I%AS'"^Iuh4,%G/AX``FN2T94R(:R3(-CJi^[k>AD%NF''af"G#b6C=L%MZXQ$N?O/D'htN4)H\D#:Uk'G9Jg>?6;H2Vj>UiW7Ydt"N`-n+bQt?+7`GreLfS3l9*"W1D:gA8PVP0fofBYD]7m'-e2/qnJgHsa%&@60ieF@1XZ)o6-eti\2@7bM?;h\dT&S;;?oFX3(2mWX'R*DXrZj>Pj'ZMd"f'b(,=t$FCIE0@K6rU$NlE,UimCgTtYT[]E&_9u\%@#[tr2'\b\:)!#_Kr,9AL,#<\*2S>7O<Aq5)=Ra%!HC16HE3.7,8&KWit.DQD7H[Z_.O'4r%*C#*#=dcXXJ+3B/j'd_I["I3o8j5%QT#DZ/AaWA*"\@K8n;0_f3q7V-e&E#k$\QOANkC3rK'7jm]E"<P8;oK@)4"CRUO$R>&cI+rC,^l:#!?5rY/2RX"?nBo4lGScO^-k%:&.HgimhCEqlLt2MQg7N,l8$tRhk4(R\78cTskCm@rPF_>*J*("qbaZQ80`Q\$lL)@;S':QBD#0j)'7.p.4O\i6$kMWQ?t2nn7Rr%_e^,#Y$@H%flb&I/nDk2dU3rA0D?;Q7.9UNX=[BsPepp<8]'3;XHll`o_&>o!>c<V,Je)GU:D)fbWum`SJ43!/CC'Y[@"(?N=9/L%8[RdKm5.H9QF_W)ZdVV'?C^"r#5aAF^f"iWf\>68StUJ>Mp7!bV&.N@fJMR&)iGZd`=FL)ets4CiDV:2p*Q[D=CXAXKI!4d:GSQj%[3Z+qgq;<S)ZtOm0-G.fp"1I'1hCGe'QmX:Y`oZSNa3U5A>.[DAA!7T1fXhJ'u87!;G+/L8;a)6=7L@TObor/1i#gT$ql+X.jJWR%:rf0>NG0EL2E4msD+kld%\T!Sm;?WQZ\O?0HKZ!l`gS<TBaa$7_PoCHdBq$`*4PAZ@G%<(o@dDV<39pc-1J^[,n$&TJRND]-*HO?%-%KS0g6+kq#]1HQ>7;`t07\<'"P"7GY3l1lFLfgQ"\b]$]d@nWLS[co8>-4GOklSe3$=(GI$rXn[D*/\*7Pt]N`1P1'Y@HqU#0-N%aoU0db!#m:Pq(jN"3R$,C>qBk*ZYfp@or7:JMsS^Pjm[:?r5l3=]7/9YmQ\Z&up$EQBA`i4>P<KM.[@A:(HY?o1]Ha39Nj?(;>s1%)8X2%jrVQ-_lRQH)I,Z;kSi"&Tam=1\0Ec3K@3<nR1sCh6Y--&UV7bXIRqX+BpqAV9M13+&iCo,X;T]_+j-V;DJ$(;R10S+WDcdO%e0PIuiA&S%^_Tao*B,UlUeOX=4A?(i9?VkLYdJID(:psd)=LlCXn8'IP:iLI[@K_$0ZN*1Y`-pK1bu_p,ghcng?*"GJB5a40&aT'%e)9A;Ek+imCkgnNr8r$130N<G)C\c%imX(sgRKW;!EeaoQ4\F]AMmO-*9CfE?6FQdLpTU)jgA6i4OZ,u"H"p.e;OCnZTQWfZ/C:#%dkKo?,UasdL'50iG[nRRFU%87P!lJd[e<(;QdW/0bk,"O)B'/mQJ/i[HdQmC++DSB9;obY8ctHD6+Gn;W\$eEMOW;7051ji<Y/&M%hQ_Z5K(hnQETH\*]k&lSWl$\keou<')cd\GBX'-EhRt$[bQN$_[dXq!FF<EWk_E"6/&2o3T6LD;[clVQ.'$a=Z$Sbn;,>TZ/QoT]%"GWIL&l13h,likR/>WK)-qRpA;/<KQNB0W$O"+r)'b"Zc+5o9^IN1fa,UEW],**FSKDBPslo-[n^67\c*n>XL:k%3X3M6F@>EZ3#%P;EKD`&)HqOqT@r*$)_KX*mQa^f'ZX,uHH".d]+@Slr#!mo+Z)nQ1r$:m]Rq,c\Ed1%@A>R]1rfSq2`qmH>YmDF=dkj+%=g-.<^R%prcQ*g67gVPjeao'*\b3$,3*#PE%#K0aC<C$!,iE0]O[W[n/bn@WtMYB'-2E2Wq1a>3.t&/=HXW3\<%'R1ZIS,3&nB7(3@%97T!/%b*"$qQa54reoE!fcD?BoTX:[?daG7p.3if:VJ0qf(^9T-c$e<RfZ8;p?X"!k!H!"AP(5GtoVCQJF*\eEn0(%Ke-L*_3Ec@Jg>!3a%+mjA9MQiK,)IT/@64&TTZI&PnDroNAZ(R;4ophmf][;Ap-m]*=O.\5cX<A^(7tOYB78#9H>q9jcibP:&V2\]bE.=p\=`>2$6ISq/%1kQ5g$Po%D\0D<16"cn=DL!2?nBMLqe-JS>Ki^O8X\XZCV@H=f];36JOXA/d!c"IrdlnOpB;CZj.'t:n<+?#''%KY/6FiM'Kbg%h%RNe=_-l[hKih29k>SA-U2K$XRdtGO+e]8Bt3,Jtp^8)2gA1:XF8f@fgXn&iABckNT7C/Yh*TSo]AWhW'3^l:fFt8sc0mr,e-T)WU%E8OX2RLg@f]Xh8"**AB&B\/!H8P\KPHt8s#'A\rJ<]\%QMeMcb',I0;Yk"#Hc,N"i"\nVc/2UFi1lV8.#YGDq+'KQm/0irT!Y\:r%\?dVGg?Sl/0ltl7om3("+BC6.@N<LcZpUdB2'IS`(,s0U,G"a$89ppJ?5mE.!L,)lEB=e\s+d>T(\(s=Q:_0XWtJ-+oP3EP/G/B"%aE[H2\3SN/!%Q@dQ6^IiP\#Mc3^b<`1@]rLgNpIp(",1,,+Bc+rUc#T2/bb0N*tUM/##29ea0oLYL5+Z;(Jpt_:[=@Pu6>>N<DS-%&DI#[3LSlWEbJu^NhG<iN*EUGEa3;TMhH<H,P.atN8"CcTTlg+>sMnM"lG-G>s_qj+DL743)9ecO&lZ0Sg8&?YjefZ6k;ccB,5nf%>66_Lrn<N'(T+X"i&aG`B!RHtLGP5B%cFH6>,F$i5cb)%7o&PJ,GANU=t$'sS15foj&4o\W@`c*_>5?K@t;P.Lp-lC`-%NS[3(:C%9H+^^Rcla&`d;43q*Jc-HU0VuLb&SdN%#.V?@F?Uf-H?,qO/aK7rmSm.]=<FIBA$s5hqHqM5jp"gp.qgh%q=/A08W+8KIHlDhG:D%[nd;F`L83+C<Hl1d(@hJM_hF\,iP2][]LY"Xnp&[9.pUP-Ri028YTf"<2sZ,4gV4=H913;,:FjcH3B4Yjp.?b*=9spEjYQbdI"<g%eY.gP%rL*bKr:aE\VDhmf=*#QLWD:&N)q"9J>ORm:n@'^&@0'1@U/VgK)$]cpq@>W7mH),.1%f1P`kOJ7*VBfW&G>Y[(df#MM<i$%>DK03%^+PC;,sYK,IjWJP_n3NnQ\B5fal&,5oUj,q1_&kZqf0uC,Q:]FdhNf=D2:rBc,lQ.4HQ"S7m7Dn3_hfRHu.XQ[qgh%*E6H%h/$f7,L[L`/E!AcUVQ#F;"fj,GE:kPFQ8Xp^_21j7UR5tp*rluV.g??[fs_;8?bW`2"dS@UX_#MMem^-*_/@MDTT2?rSt7nRW+E4%"m6/[L,&B@8M:Fbg_7A.jP;RXF4/,t;^Rrs:Ad\=Fdi1NhnscWBWRVA#b5T7<.\s@?>-OH*\tQu+A#ZK,/]S",]%PEP(ZufX<uk>%IN&C%3@#ed7tOBMMYuoq$mL(+83g*CTM3g&bm:O'$]+N#Js1aB%:_RhJl9Hu8C/2m%6#DI7rn1bkY^ScCG2DRW$]/$UsLEe%52<>%FLs"XhL1//i,GQ(&=,$WV%13#<^@O0J6*B%23ZP%"L"6G*>9gD<@$*\aK'*-;4cBmeV9lF#ZQh\M&qV0.Ps^HFsSC5Y]F>HU1.0X%CN<7n)jk<]K\lp7D<'!g-f6u3KWhTolsZ'UfbeDI2_r&0,k5\M>6=$bjA.VF>EWZ9a]g/NL3J5_Tgf=W:(SS\+8FRjh[(K<MP-iJ%>pR_.n_RA-RI4,!Q(5SKqa%%9$Cdo$N(&MtB4Nd6>"[3[W,C)&m7=0n'6NjjSdK!7%p0/[Yp='R5dLPeZtC/C$:rV8Ahj"F/>WKI%KTbhF<C.)*Obor/FK`jA-"f!+d7hZXToPc<^-Pi)%E>p-iM>UlP?2iPdCmlA'_pI^J.efh,gknC2CM-"d/'jkDF[%Z[jdba]nfa3%"2hu2+KR*rj-D7'U`13??I8QK@0mKX9GnP^=q5o\'o`6@=[:ap+l(1aRQ=7COJen*@<EV&?CeFtr5)."<ffWMgbZq\fp9%B7gro>%[S%SrIW*ZH,bS\QNf7GiQd=<U+j-k6Ae&T:0[I,WVJ40Ye/FdSfbgr&$YUUi<c"4ZnO=$A-m]*]\=aW<B*A<U3tbfCSa!&Cf6M'g%J;Ch$,j\<)YWHEQp-_0pdE(hJP(_`g(0LVQ_T8P6'khAg.AI_\2RMD(08\8'V60]XDgK_,]*n's))=pN8%!>0(0Xi3<dMZ@bILMi%2-86\`c<S&Ogs[ojgEp[1.!M%Obor/[#uqV&;ka!hWW<DdBRJ>=$lt11JRaKW1-A)3lW4`kLo-JInLD[T@u%en,A]nV]"VYO)U8,%J5`nU:^6]d2_!2m+:fl7ZO+\AL(>m5#WQ,P/HI.F%P/m+*U#F!!ZD0Tm3<`kQOkY,"RWmY<cU'+OXUI79M*`mJ0k;cB[<s9Zc*jh%RYEP?(.fskQW2BMGddF$iKYaHB;!D-IRmi9el\2O$nuU$Jo04-&\mf`/c,feJN'e9;":S<8X(C+]dB7>"+sK<#q`Um3dVIpL=_(^%Oq^$k;cIGak(N42Dd^5)6+iYe/HJi"C.j^L4';s0^EBo/X,5SnE&T"FDS:k;RAT3T.2U<Nj,%JXgld@<X-)r?"jm;d=9<I*$EPh3%F3k]9;FWAlLR=<"ZeT<lMui@1$CTn(Zfi'W"[G=T!<gCo=n(f#!UXC5;GGUohWVdsP`gZZ8'i)lL(Fp*,Jj2+U,a=C,-N=U<[i9t%P,K6!/a,ZYrDsWV4J/h\cm:^4ipU=u9]uHb.8!&a%V8Q3&\u$2;R3Z^3JP33)]5a,"G@.?$ife7]4(,+_AP*_hL1FJm?A"WU@UGU%A#q[9V<"9S(Gl>"c&HOhO_B;Ig=d'_0fLdIE_UYGg:/F:9adOIIRlcScQis0lpHq6K)JBk(haueN8`kHM;A[cNC,oYh8Kr'NQ*qP%2!er:Q>I8m(fj)4lm#UWW@@-32@(HX.S0Wj[<]q$XgpkIRPN9ZgHrZhYV'-5ic7a+en\0f>g!cIM1DH/RV:"u1e!K_N;3kgH;XG?%#oWoj&2\Aglr*a[ceA)A-mkV@k\B=E!L15hYRSS[m8Z\=:^OqB9Z\E1eV[W`H>#qaNVqM;ppA#TYRm7:b/AR'foZP5=.ruK%LC\A%UgV"^M4,%7h0:/GJfS*]8YS)u^g7&AFgWNPC0bZoiQ4DoU+$c%%'k'M6SVg'Rh#n_C=%Pq9bK<.T['Hlp<:D&e%@!"S>Lj+j9Mhd%$uaiT6>m0e9JgT"JH/pr+^&`'J8Y]J.2cs860a]]Akjf-#31F29$;2>NRln56n</+,lh_B^leg8Q)69DXd1?k'a`.t'MZ8sjp7FF%kbR.q8YTg,^_q`dHbnnnScduTV(D_tBs]/mY"L(e`c)G]$T2\>W/3tqQ8oFg*)hG6DEp/g5@M2`(0^3eCsNZhb.nX?H#]\<G^cQT%5adb31#T20J=u8W7+I^4V&s`s()RgVH(m[X`[t>,edr_f?4b@"!_\&'@9H6d3+LG?n]lagl>E'#*=9G?7+!KYH@^rL1H])&k%MV'%G@92=LVEUr8RoZ#<RR>C-4:5La;RY`!824c/A&WU@a(NDW"B*D1W2qg$D%WN%5'?7SMV@/37>;_$WV/7Gir2Pf"277dkJeA=&MYp%lBO11RM1K=$nL41cm3p=d^FTQ\sPB:FA6_N.%(;pc<-q$:<*?m^JY7Z$qNuWW$A58`hU=)6L,Xto9k8\g,U9Zp6E)\6]ih*@EOpg%3F<CV,J`EL4CQJZM+]aD$)#..>EYpqe+T6Wl>L4-.21#HPTB^!bT!q:@;;OseAa'r_UF7TTYi9_;`'GQ-7UGj1q_m$,<X$NL?#3X%qM_)SZQJab7095=)o#!ZV(YS9$LS(-bcXk;&Zc9VKH!*)YK*3Hpm*6VX0cGk$b=&@;^O-NK\^SFOGgOp$kGKD4SHS#,mu:*8&i.W%6qb=H,s[ukX<gH.0pou;iTHh%%$O^De-H)PZ$6'7kPLJPE*ZSg1^4qT".Krj9-BAem]jF<:R3sFp'P1J**@tg=5k<6cnkr3Hjbbb%m;8hCT=A9%gY<=ML^OXWVh"!`[;ehT.bQ$+h<0T+&qM>oS1nMG&gp@U7VLWiR:r$5dGnoBpqHAEH5DDb]Q0h+`?^;/iLh;Wqs]R'%LaIr`5&E!X._nqAYU!)GT^Q*r_tP[<(d;r'("s)uk157WmhuH+"qiB6(n_(0Jo.`H;8T_F@!dX<G12`WWkbtfM/"tdY6iGr+qm\=%GQsjX&;o.m2EFN+FIWH61(Ri]Z>.4H'!)CR/n#6`kZ.0\^gNl>LH[#k1`Vosb!`9RGO_0LpT5P.12pWcXjV=<+`V,5he>o;9>LYV%SlrR$e!:!6_=Em;.\*kWKWDSt6rPEbhj!O,:eV_s7Ye.'Na3U5ADp*J@(^hPgul&X!oe=\]((3H)6=Ob==&rX-ErqX[#i5d>h4pa%.)ruR=,cSQXV_:2j0gj`ahk)+oPI9Gr:2-;lUru=Tbpgn!%9soN+-%JPHmR#P9mBiPb%bL<,gQiK[W?0WJt,fn=1XUhL1E/)PJ_`%ie/aROuQmmg>9h(p9g^CD@gce9![:4!7uh!9OhaO?7FM27]c!sUY%B2B4t#.!]TOciWl1[9+pBl^tQ_p!mID?EB=e<IoA1$A7`b-%INgg,/=Q^X9'lrF]s1E,()cRI&63Y",s[tTAP!MI-YjTn=[Zep.20rMUs8j7oJpc1QlWJM?Z/[JLmeq6,W6e!1CGc9#F5?.^U1[L%=9Jkp&R%MX9JgT"(k"'$O<kAbXla0B:_WV5oit"k%E8eC<=&#W?qj0=/2btdE7G_+P-A[//0hP")jtB^6k]`<lVetQ)Zle0ec`ZY%aZPBa=%U6!&n%ocaWQ6e:ItUqbYU'PH#sB%7k@6=&=bWgr?s7H1HI3pp'lh8?#A@0Z6B726U:N!ZDL13Y$_gU)BDqCW(bX*&MD9/%'2;D)CUI)Ch/7!e_9cr)JPA-cn<gS&99r$5^MBl+3XpskcCc`ie=!ZiM-b%9J_1,NJ7bmO\/bn#=9\(9W[!Q!F@9Lnb\<eK:)g[l%iWnlIoh8l5iEm3NQ"UQ@6HGZh&cfI"-Z*/)0eC.TTgf<t"NPQ$!PX%Oats;^.OVX,dtZDF&mG0lN-?q2(4$'U!1bR)=+F$mb:(Aj%,_[-[:e)]ij++"o8u<C)XtqBV#"Kj,gX2/BO<]TP->a'^d62D>U(La:-qA]>.5>SsFsN:hRJ,AXZ:)Hchi80TCSQEa\-S$tZ;<Os%)=LlCQ"/ZGZW@.-gq])+<Gl1^WRHN_M5Es'-V3"A%n29&7^'NQl>YIe,n"q,^u-,1K%&.)%:aW!LaF,$!l>O%Y`-rL#pU*X+X^rt%,nap55NMQs"P.0e$#P9ZJo*2JBWil$LM?(8h>Q+r7g<C+JOrGKJWIr/MP3M_$LJ&VUbdV._uWU=UeG9KUJc\\7e&g++p9!@!;hZe%&_9^fi07,3!oTMFnn_"C\WPk/,)O>_ASXLEA!$HuV4G@U.3KO?o>Z,e_$/YFp9@EuPVe=R"%o:36PEH1H-6IFk=-ee13*9SXO_HF%OOn@PUN/+a<+9V&Q7TD5)]A+9:0,&Xctp_n#J>m9JN?`dP!g<U>=Q-G"X]ZndC`H*er/auJSDu@7gb5sg2NidZI!h8)"1cB/VjQ'%$;a@BQ6](N)l;Q]D%tSYgCn=T!:TdrZMW(G'2[5VA/YPLD+_#A``T'/_4;3HQ'RV"88!T%!H^e57PWKi;Q.tSYjc9c0W7/%^]dsl%dhnaE/&=+\j&Ak_?H-.-;+XsnBQuO^l#o:9`Bk5tj4Z9*$Pigp.>E9g=ph)o6"_k1r$R?L\0fAYg:/F:09\P-r/cN?-I\7\WiSt#%KR<99XX:&W[Cmp"J/akhb/BJIB4\]M]kp"X0@g>^06KP4ir\8,)57$F)*ac:S=++1`c/b/9$'@0Sg,*JUsQUfR:s`2TD"I,;<Y=(%1%?_b@(;Sf-`h=jj-D6XHaW2b=;*Fq2geSj=.h.?Ul8c]hR$*("=ViSb]/1+IT!$t^i:j?2Ae*S=!>(P!phU5TF(T4?N$B>i5"A\%)9&t')];u$P%`rXg@A2kL8]eBGE7GYEW`&p<?&DXTnSEGGk[U#pm7U14WS%hP8&kshr6R4!m:kOPsm$g1/VVK[^@37b"N`p\gFL.%".KrjCUTAqmW1ch]7D7nS1nMGU(3hJ,M_A^'2;CNHCQZ$g9l1'3NAr*,?W/^U1OOQ]?4%mj9!6(:stf>"Aku*o+K2cVa]?j.-YHh%#cH?'9^JoVmI"bS6J:>u=5frK@t:=PJo*t3c3'lL<LeRs+bL?K=sXJ7n51tsMK'g_"^_N:l7XE0*)M,^15u<p.OV_BN3UEZcP7Gt%+TbBFN#Pk#BZ/:6OWW[A;5($B,J9HWQtXWq/%LOt?Gn9i&gjcW@$3Xj.NA?QJeVNU$]K9_Lt6MI9)t5\GtX;[A'-RD79X)n.2,cn%b0GGajop%*6e=`HY)QYkE1[MsG;"dLS@2KaS1^8IShu.dJsWa<1#NMBJ@HV[H`'ub:"jmYLV-"f(_54"@Ds,:S.J<#On%iC;6#&]%!jJm\=JR48/Pi1$@X+Z'(2>Z/W98h-EId_PP\CPF<(aA(`XD06#judCCI/4KSIh(icj=+u`RnOfe-dBQ]Po.D3j5p$+7`lZ@!%bl%O'4=mlitH]1IB8(OmrM\_SohU_\f\NVN`(mi.<dfZBdhB>%F?V'3/eqQ@?nT=^Z?=Rcla&`d;3hQ/5I;1A&-(]'d\T%"4"?JIX43%if#<ZOuPO+b6[jQ^dM*JdH?1brD<,HD,>/BI)A6gKU8ngC.<_(^]DiS=_Nn\"N.&;Wbo/W:6[`FAV:gk:@UJ=-\!S.-;Lni#,+So%H)!aY7)sbS>42s/*QM:88\pr1?m2H/\T#H=?qC?h%[KtNQ(A\)KRa^:Q7X!$X?ala"uo!sf]SLg<&65pXHIg3RC<=G[AGN"5Jh5G%[*k6P*l.mk9pp6O,AYQU*FV>d^mZrs8\lr,M4,#QQ5%*?E:T&>Ul"CqD$cl86X,_P@a^PSY0d:a9iJuAS$Je2MR#qq*P!LX:2SdL%KmVSg`XaMS]:?;4LbknZ8`G[XK.B"c\-*c_[j/^N?]*-8,Sk^6d=A?U7Vlqs1*aGB&f<hUj](aj8V&1<P,br9;=0j^N:?0W0[[80%U/!31;!tes*'eA=AK&Ik^EC$&N#-d[+h1I&2'IU6c3VTD!3^9N)8XT3RV9isdnss\5GY:A1Id-`iDB9&?s&>G>I*00()lXJd$h<A%*kC6&g_R\N8kGMs!ZD/OcA:2mD<*Xm_G/e_<(M.:A5eNPM.kq8/6K64`k*%?2-XUpJ2giWOsEehZAd^H+uI]38bBEd/cALf3,Nd$%RcrD3_,Vmk_(/O75*kkA)TFaY8V2g[,0CGM14i.ITo#Wq_A*c%.tp0.neWoI7S-Yp'b&g+,n$m:4_=PQJoEU[=TZMZ_`DbU.Sg)p%_+I1:]0r/)g'n,/**>6&boDtp$`OGmN:06K)n3urpSG\#!<mIMdZsmu?eUYgc5."4G8etO_Ll*$U+$b:BZdc481Q$HPq7LDQkThW%V-0NU&Q!5m7!iO>4NbF`n88Q*,"12O7!4?pN,W>EQtXX\<LgA.+,VOC)]`OZkg6_W9,=+)"NJ%i`'$k"!lPDg>*?fA;[/SR!1M\X%icZTO;Cq(r76JM"#nL,F*jHt1GEqYq8mjXF9B)c^D6Er9&T*bR2,P:CQ4[HL$VWBgiq5EFk>S(A<G8/&ejP:qNE`]-L$-[5G:n^;%4(mBO&g5JcZ6Y:5V(<kHeH-CY;^?Z2gN;b:gt`%L,7b'@Z^MgBVAg"i;J<RuN-Cm=)?Bq5!"O7)5uuA7#t*/Y0Z3%0G=@*T=4,NU%.)SgX;\/>OPu^.PQ3>2Z=fAiW`qU\\;8F&N!lPsTQ6^IiPeAD#l\J4kAYN=_[(.99*iFu-;\L1L2K"opmVh`UdpHc1$VlC5%:d&&%-)C_LQn1[&LYUPe\<2WF9XN"fD<ZhgoF_u]At%r1[:',<6BtqhR/&%*Po!O(W(>>03`.K(/L+6i74+HYEL!G<m>%FYb8VJ5-9?<e%gldB'>[Y3k6/:S/,s[ukX<i]U>\tA;OY8E9P_hmoA^?'>+OikNXbdOW^(oq(jrmR$eO4arTi@MX@>pUS;G*m&d?YBInH'@uRCL8[%g=?d'h5?5B>n\6j2K$XRQ![q3q],.e6X'W1#ud-8EPdrOKY(JsU1m#=aj<g`9A4_)c\Nn+Qm2bF:D,N0TE-Z>oO*mul@"_e-%OEr%[Nn_md$>9hXZc9$^\ekdLq)kOG4\.!j(Y:+e3q?VNE^"JX1lCE!<mJnV_%r/Hmq^O3+#h3#ktjE6rPG[j+O!%;"Q_aFI8N\R`udX%Th9P]3\]F(+<L?c-%NulD6K-_@EK]!#b]^\:#(b^E\5aflU@%R2,19rJVTt5DT`G;<;/hiB8DGX^_21ZgCoku/AhP4#ShfNM5Es'%f8qmR(%Tj!0KNrCFP,<W,n"q+^j,U*\@ZI=?rrDFn`#gu'"h0iN<+gCJ@HU+%;gMCA+DbV6XFC3%'s2(QkKP]Q7S8&,NISfU;Zn]%,s[tTAQ[UgK]Q6B)5.*b1=7pI<:`[cqB=I<J^KTqU>sbC/QlbY&K1%$7l9lE/-4a`.8,g`@8ujCoUudE1]`'F`9s";jAWM\6S\.G%UVkSLa/KL\63_B4-D5c<\E^/0(h4&@PS22gP$S,\]_pM$?OR;S8R1U2)harsdmf+lM2jB1]JgV/p]BL3$f[%>>6;_\;jJ\KG-[DG%mW3r9VG*`1$/>;"c[$nroog*&GU63C!ZKoPd@OKSG`stCq#oe-QC8H]CTJ`'#Ue0<6rPF-Wlk$a.$A?%kg237Z"rBc/3N;*Ckmn)%mt/d]@iCKC!`[3S9+k6Tg+pNdNke%]-D"Tn45)K?csN8=bVp$ZrsnI5R]*E(j-D7Of)k!g$fWUQh@^sVR'Iuo1Su]J;ug[ea$M:0%3BDL!B3\#Q^f'ZX,uHH"b-.7IcPb\>:Kmn!LsqY8.^HEmKZgqS9^Idr90H_,XWR+u,;;7(JFGN#j-D5Q]m.Ql+U(`8$VWnScjTee%G<dU.CK8gkJ>6C8gl;Mm2FUOtU7k9p*h=!-4@tW<P!V_uZ9:R>:]j>jVTQ];KF.;Xb6Ug#+qm\=BX/dumY>'""\+9HM2jB1]Jh6+%(NJ=W1>]\emW7(p+O6@[f1DJdAJsGZ(RSmY,eBMMV&tRIQT$sI9m#aU?sFFs[9l2r=E(f>dkJdhOen:M$B[.L9!Fbo*=4#or]-#9%Z9B"\.Sh"K=.6)1e&EtB\=s@iG;"b&3c2'N3*j[i,Yj]3N6npU1=;=XoX1J(6IFc!d@k?m.nA#M"<,uNd@N-\K:SfHN2)]7Pjetl%1^4lO1i^-(C4a%gpa<cWCYAQXaJ7H;O_UW.eAa(C\=@o_p`Tf\M5Mp+if#<ZOuQso1;`_>'..nC,l4%8]cW+qVi;0b'-3u/DOD+)%EImW^$K<,)/HOjY.8,g`?clafaoIEPR^a@ENIc\A?GqaQP47\2i8J7(p-_0&<YOkgL!hINCra.6J-lp+Y7oGkg+pNF?=9KV'3B:u%c@./k3c/u+BqduH`[t><V@a[6?4cijD$^b$/8IfiB1s1J<cn4K&[sXAHp\krPgCPn[,-*@%<?0O132<X.&(;V3627kHY1*6:XdcI%T,pV7l]&2c5aYdYb6XASObor/<6h=WlA&X("\+9MM2kj\[q)1a/i):s+=cTHYQTb<VCY<uN%)pUpUS(-dhIWk-Z&4+U<@8G,M,?(%WJt-!BYrYE(!ur;d.eu&(ul/U.4(?),`Mh'C7]ZO,a;jD/\QsU]YLaR#RF(c^pkZu'm.b=5GTDOncDI73+L*o,gMd_f7`G'a@&rR%RV>;sqk<4ng?:4Jd;e<.pX[JOIe_*A^\Z-/gW0?niMn+%rUX'NU3PO4+2@\,DdVXSn%nn`0!'P,mU'9;pZG2`X8?q,!.EH]hYRM,%p"L"lrG[5`g!;n^oDef;AH1]-]O*>Vor&Y?O-oB1IdtTg:X_OVqN%74rn#IJIdqVHIer]kmskATa8b^d^A[KKYJ:,9VuM"[s7k%R%5Q5;Ps5q4Sl/TO.>X/5*k<Icdrq#SCCtBn]3A&![:<gi*(\[%&k!+6\O%5%K*Dh`mlZhRPRe`9ZC07rir:KXSpC`_*0'0Qu*e/BB%h;\:RfkZ3YPr&",,j%nFr`)_9;SL2I*)d=46/+21T1jN__=^;+D2YaR[tSs_FYA7BnunBT`:e=K`-lKoNeR.6[mtF_D,;JSqmGWb%2Q1'?@fNa8J,R%`orlCn?seDmn>4TSs#R(>]X`%$U3b2J2gNRN2(Vt5jX4.O>I^nTEIFtO[6]f;hrgJY$l?X"@b.`'@b*2NXtN<;%piemZEZ=]JZ\<O[X%pAeW0.&WoOF!klPB6>`hFBaF@):sF$d=c%t?45LV-F-PHrQDE/CS!orlEe4G&90MfWk?X@4e5QKd_*QhlW9%O+VI]3U6@rUF:US]U,f8]`)SQh;\9QppEDIm-ghoP$Ie9)>Q=[c?0Z^3i3P>@pW7:S8)#eE%PZCYPrlc@H58CRdK6-`T"=pU%4V\%lgB)*e_TMm]%uC!a89IIg$D"#T?H9\e25d.mFPg5IfdUe'A21i%a@HNSC[YM5M^-t=gQrE7R4<5nV16gf<U<!A&Y$'A`m,XA]L.C%g)p>^R_umXgbrABenfP12U-E3q<cJJWe93qU1UI<p$?_IMEQI6I\l&7*8?KTdmO$qUAR'ZgT"G`h=:bu[SX<\S[s!PB"R**3Fr_G%rd7FIo6`.O2[B9.(\:.HIA_.mfn,R>;SG,sfke"<WGZpoiDq>umJ$EemG%&UIqmkim]=Z?orMF@qtEnEU?3=uD_buagWSlUD7=J]%W7Gd?RGsBA)j`"r=^,..Gj_Y]eW[E]F?(oX>tun_MJCCZO=;6tCr)O6>-jc2MK6^;b7maCY^A,$9Bqbt-bc2?/j7`bMn8?8A9'j#%>"l0F.a7Rs/*dLZUFN_&@o^@R.<41<Xt/"=SCgm(f59eB(#3f\l+YoRMX@Hi0R0,a0n[&gM;.=6a"aj$f%k34-1JrYB&pCWM='>l%QJ4kDgc"9M$+<\GgZgLX[r"`R>Eg#:D.DRdr0fLtAef,hA`E&7W`$=+PNTNB'AKPb9L[d9Jo*=$i:3>I@t.0hh+!IPp/Bj'>W4CB%XibLS\krX?bmE!W'AMe,e$X$bm#S\N4`)\_gJaMhg/]P<X*/?e`jS=(L>"O4[ad5O[>cZG,Hm:u>A#gmqtfm\KsnhFr2kDOIGM]W%[OU/a<]@&:[Q3:rET3&TH:MB!Wl2?DCC]MCO&pWa>>HlnqS([0X<hZ:E%X5QS(2=l)qB&t2KS-:2CuuA^@#Po9:g8^RqLFRr&i.\%I&'QIeaeHaeGSR>Er"0B/.'gCB*kq_AofPN%XtQl)dY<BgRZT:Cnj&aELXM<O)8"^5&N_HpSf+_acC<%-9nrlh)[fH)LhBi)t)>Z%Car?O=4gcRDV!$#Cr>?D?<BE0Z-D^d!Lh\tD0W]NcbZJ'FVC5`fY7:=^c#H%"8KuhD73RPW7u1E!UB<mD0B@nE:X0Y%Xrk7)jXsh%G3=a*gT4HADECq%f*rN;!Le&b2T-3Cea'Z+)Ze+1=MtJQjg3\^NrZ>3[d@*M!gEc?D1s3bX.\9L@K`nJg7H4),Ch:WD1D;'[Dd%3%rV",f^\bu'J,JQGrUF6DqVr+DJ,A8UIP/CMq;&]t^RP6>^\RNh^O?%507SD!r:P8`qVfJe55si&^O6(Y5C`[IT76Xq]:XSU]taC!%qfpuNoUgU-dpp"^I=C_#r9rh;jnk*gr;I3KJ+fpMrUO=pjY,Nik(fSCI=Ln0LA1QshVE,LpkO@tl*9("g[=MprL[l3^\Re7IC`4u%b/BhaH)c>eq:+iArS0lglcXh^'9sr*9AJ`_Sc/Mj5()tF?f-A-\)75bn%\hI:I"jO?[qk5S,`0K+$TYPO5Ks,h`h#6i=CG;pA]U<%q!Ih5^E;@25CNOSa$9Lsl-H!rqW[%4s7M.sJ!\JUb3%T/o=+bkmlpY6XB6fA~>%AI9_PrivateDataEnd