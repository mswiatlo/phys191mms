%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 85raw_width.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: steven schowalter
%%CreationDate: 5/12/09
%%BoundingBox: 0 0 319 218
%%HiResBoundingBox: 0 0 318.1392 217.3467
%%CropBox: 0 0 318.1392 217.3467
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 7732 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0AFFFD04A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FF%A8FFA8FD07FFA87DFFA8FD7CFF5227A8FD38FFCF7D2853A8A8FD37FFA8FD%07FF7D27FFA8FD37FF7D524B687DFD38FFA8FD42FFA2689A4C59FD38FFA8%FD0AFFA8FD37FF52777D7D68CAFD7AFF537D7D7D6FA2FD37FFA8FD0AFFA8%FD36FFCA68A852A82E7EFD37FFA8FD41FFA270A87DA77D7DFD16FFA87DFD%19A8FD06FFA8FD0AFFA8FD36FF7E53A852A87D77CAFD15FF7DA8AFFFA8FF%A8A8A8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FF7DFD06FFA8FD41FF537E%A87D7DA868C3FD15FFA8FFCABCFFFFFF527D7D7D52A8FD0DFFA8A8FD05FF%A8FD0AFFA8FD35FFAF537DA87D7D7D53A8FD15FF7DFFBCFCCAFFA87D5227%F82727FD0DFFA8FD06FFA8FD40FFCA77A8A87D7DA853A9FD15FFA8FD06FF%A8FFFFFFA8FD0EFFA8A8FD05FFA8FD0AFFA8FD35FFB5BC84A87D7DA77E7E%FD15FF7DFD07FFA8FD0CFFA8A8FFFFFFA8FD47FFA27EA8A87D7DA87D7EFD%15FFA8A8FFA9FFFFFF52A8A8FD087DA87DFF525252A8FFA8FD06FFA8FD0A%FFA8FD35FF53A8A8A852A87DA853FD15FFA8FFA97FA9FFFF7D52522752F8%272752FD04277D7D7D277DFF7DFD06FFA8FD40FF7EA9A8A87D7DA8A877BC%FD14FFA8A8FD05FFA8A8A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFFFA8FD06%FFA8FD0AFFA8FD35FF53FFA8A87DA87DAF77B5FD14FFA8A87DA8A8A87DFD%13A87DFD06FFA8FD3FFFA97EFFA8A87D7DA8CF7E7EFD35FFA8FD07FF7D7D%FFA8FD33FFCA9477FF7DA87D7D7DFF7E7EFD35FFA8FD07FF5252A8FD35FF%8DA2FFA8A87D7DA8A8FF53FD35FFA8FD07FFA87DFFA8FD34FF7EA8FF7DA8%7D7D7DFFFF53A9FD74FF53FFFFA8A87D7DA8A8FF53FD35FFA8FD0AFFA8FD%33FFA853A9FF7DA852A87DA8FF7E7EFD34FFA8FD0AFFA8FD33FFA953FFFF%A8A87D7DA8A8FF7E93C3FD33FFA8FD0AFFA8FD33FF7E7EFFFF7DA87DA87D%A8FFA970CAFD36FFA8A8FD3AFF7E7EFFFFA8A87D7DA8A8FFA87EFD34FFA8%FFA8527D7DFD05FFA8FD32FFBC68FFFFFF7DA8527D7DFFFFFF4DFD35FFA8%7DFD3BFFCA77FFFFFFA8A87D7DA8A8FFFF7EA9FD33FFA8A8A87DA8FD06FF%A8FD32FFA953FFFFFF7DA87DA87DFFFFFF53A2FD33FFA8FF7D5252FD11FF%A8FD27FF7E7EFFFFFFA8A87D7DA8A8FFFFA27EFD33FFA87D7DA8FD07FFA8%FD08FFA82752A87D52A87DFFFFFFA87D527DFFFFFF7D7DFD06FF7D527DFF%FFFF7D7DA8FD07FF7E7EFFFFFF7DA852A87DA8FFFFA877CAFD32FFA8FFFD%04A8FD0EFFA87D7DFF52527D5252FFFF7D7D527D7D7DA87D7DFFFD047DFF%7D527DA87DA87D7D7DA8FD06FF54A9FFFFFFA8A87D7DA8A8FFFFFF6FBCFD%32FFA8FFFF7D7DA8FD05FFA8FD0CFF5227FF52527DA87DA8277D52527DA8%52FFFD0452A8A8277D52527DA852A852FD05FFBC77AFFFFFFF7DA852A87D%A8FFFFFF77A1FD32FFA8FFA8FFA8FD13FF52A8527D52FFA87D7D7DFFFFA8%A8527DFF7D525252FF527DFFFFA8A87DA87D7DFD05FFBC71FD04FFA8A87D%7DA8A8FFFFFF7EA9FD32FFA87D52527DA8FD05FFA8FD0BFFA8FFFFFFA8FF%FFFF52A8A8FD04FFA8FFFFA8FFA8FFFFFFA8FFFFFFA8A8FF7DA8FD05FF7E%7EFD04FF7DA8527D7DFD04FFA253FD35FFA87DFFFFFFA87DFD33FF7E7EFD%04FFA8A87D7DA8A8FFFFA8A87EFD32FFA8FFA82752A8FFFF52F8FFA8FD31%FF53527DA8A8A87D7D527D7DA8A8A87D5253FD31FFA8A8FFA85252FFFFFF%A8A8FD32FFAF54527DA8A8A87D7D7D527D7DA8A87D527E93CAFD30FFA8FF%A8527DA8FD05FFA8FD2FFFC39377FFA8FFFFFFA8A87DA87DFFFFFFA8FF7E%94CAFD30FFA8FFA87D7DA8FD35FFCF6FA9FD05FFA8A87D7DA8A8FD04FFA9%5AFD31FFA8FFA8525252FD05FFA8FD30FF54A8FD05FF7DA852A87DA8FD04%FFA954A9FD30FFA8FFA8A85252A8FD35FF53FD06FFA8A87D7DA8A8FD05FF%53A9FD30FFA8A8A8527DA8FD05FFA8FD2FFF7E7EFD06FF7DA87D7D7DFD06%FF7E70CAFD30FFA87D7D52FD35FFC97784FD06FFA8A87D7DA8A8FD05FFA9%93BCFD2FFFA87D7D52A8A8FD05FFA8FD2EFFBC69FD07FF7DA87D7D7DFD07%FF53CBFD2FFFA8FF52A87DFD35FFA87EFD07FFA8A87D7DA8A8FD06FF7E7E%FD2FFFA8FD0AFFA8FD2EFF7E7EFD07FF7DA852A87DA8FD06FFA853FD2FFF%A8FD37FFCAC353FD08FFA8A87D7DA8A8FD07FF71B5FD2EFFA8FD0AFFA8FD%2CFFCA8C77FD08FF7DA87DA87DA8FD07FF7E70FD2EFFA8FD0AFFA8FD2DFF%7E7EFD08FFA8A87D7DA8A8FD07FFA954FD2EFFA8FD0AFFA8FD2CFFAF4DFD%09FF7DA87D7D7DFD09FF539AC9FD63FFC36985FD09FFA8A87D7DA8A8FD08%FFA968CAFD2CFFA8FD07FFA87DFFA8FD2BFFA170AFFD09FF7DA87D7D7DFD%0AFF5384FD34FF7D7DFFA8A8FD29FFCA7E7EFD0AFFA8A87D7DA8A8FD09FF%8471BCFD2BFFA8FD07FF7D27FFA8FD29FFCFB54CFD0BFF7DA852A87DA8FD%0AFF7094FD2BFFA8FD07FFA8FD2DFF53A8FD0BFFA8A87D7DA8A8FD0AFFAF%53CACAFD29FFA8FD0AFFA8FD28FFC38C78FD0CFF7DA87DA87DA8FD0BFF7E%68CAFD34FFA8FD28FFA270A9FD0CFFA8A87D7DA8A8FD0CFF549AC3FD28FF%A8FD0AFFA8FD27FFB57085FD0DFF7DA8527D7DFD0DFFA94594FD28FFA8FD%31FFBC777EFD0EFFA8A87D7DA8A8FD0DFFA953B5FD27FFA8FD0AFFA8FD24%FFCABC697EFD0FFF7DA87D7D7DFD0FFFA2709ACAFD54FFCAB56985FD10FF%A8A87D7DA8A8FD0FFF857093C3FD24FFA8FD0AFFA8FD21FFCAC38C71A8FD%11FF7DA852A87DA8FD10FFA97769BCCAFD22FFA8FD2BFFC3B6697EFD13FF%A8A87D7DA8A8FD12FF856993BCFD21FFA8FD0AFFA8FD1DFFC9BD8C8D70AF%FD14FF7DA852A87DA8FD13FFAF77708CBCC3FD1EFFA8FD24FFCAC3C38D8D%69A2A9FD16FFA8A87D7DA8A8FD15FFA9A2938D8CBCC3FD1BFFA8FD0AFFA8%FD15FFCACA9AB58C8D699BA2FD19FF7DA87D7D7DFD19FFA8A293B58CB09A%C3C3FFCAFD14FFA8FD19FFCACAC3C3B5B693B58CB69BA8A9FD1CFFA8A87D%7DA8A8FD0AFFA8A8FF7DA87DFFFFA852A8A8A8FFA8A8847DCBA2948DB58D%B5B5BCBCC3CACACAFD0DFFA8FD0AFFA8FFCACAC3CABCBCB5BCB5B68DB58C%B58CB593BC9AC4A8FD21FF7DA87D7D7DFFA87D7DFFFFA87D7DA8FF7DA87D%F8A87DA8FFA87D7DFF52A8527D527D7D84FFFFA8A29BA1949469B58CB08D%B58DB593BCBCC3C3C9C3FD0AFFA8A8FFFFFFB58DB58DB694BDBCC39BC3A2%CBCAFD28FFA8A87D7DA8A8FF27A8FFFFA85227A8FFA87D7D527D7DA8FFFF%7DFFFF277DA852FD047DFD09FFCAFFA8C3A1A19BBC94BC93B58CB554FFA8%FD07FF5227A8A8FFA8FD35FF7DA8527D7DFFA852A87D27FFA8A8A8FF527D%7D52A8527DA8A87DFFA82752527D7D52277DFD12FFAFFFFFFFA8FFFFA8FD%07FF5252FFA8A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FF%A8A87D7D7DA8A8FFA8A8527DA8FFA8FFA8A8A8FFA8A8A8FFA8FFA8FFFD09%A8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFAEFFA8FFA8FFA8FD08FF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD05FFA8FFA8FFA8FFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD0FFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FD07FFA8FD24FFA8FF7DA87DFD17FFA8FFA8A87DFD17FFA8A87DA87DFD%18FFA8A8A87DA8FD26FF527D5227527DFD16FF7D525227527DFD16FF7D52%7D275252FD16FFA85252F85252FD26FF52A87D5252FD17FF7D7D525252A8%FD16FF7D7DA8A8527DFD16FFA8FD04527DFD26FFA8A8FD1AFFA8A8FD1BFF%A8FFFFFFA8FD17FFA8FFA8FFA8FDFCFFFDFCFFFD46FF7D7D7DA87DFFFF7D%FFA8A8FFFFFF7DA8FF7DA87D7DFFA8A8FD68FF5252527D52A87D27522752%A8FF7D7D52A8277D527D527D52FD68FF7D7D52A8FD047D527D527DFF7DA8%27A87D527D7D52A87DA8FD67FFA8277D7D7D275227FD0452FF527D275227%A8525227A852A8FD6DFFA8FFFFFFA8FFFFA852FFFFFFA8FFA8FF7D7DFDAE%FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-05-12T02:51:31-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-05-12T12:46:49-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-05-12T12:46:49-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>176</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qkXnrXrny/wCTtY1u&#xA;1WJrnTrWS4hW45+kWRagP6fxU+73IG4VSbyX5gufNOgaLq+p2MU1zdRXomhhQCNGhulhrxmdqEBP&#xA;i4u4rXizLRiqyqPRdIjUqtlAASzbxqd2JY9R4nFXHRdIMiyGyg5qCoPpr0YgnalP2RirpNF0iSNo&#xA;3soCjgqwEajYih3Ariq79E6V/wAsUH/IpP6YqtGi6QJGkFlBzYBSfTXopJG1KftHFVs+h6TKgU2k&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:B2757E203240DE11AC91D52DFC338480</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:BB757E203240DE11AC91D52DFC338480</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>True</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPS-ItalicMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.00.3x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times New Roman Italic.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.0d6e5</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPSMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.3x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times New Roman.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -217.347 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 217.347 li
318.139 217.347 li
318.139 0 li
cp
clp
[1 0 0 1 0 0 ]ct
31.518 176.247 mo
31.581 176.247 li
31.635 176.247 li
31.824 176.247 li
32.202 176.247 li
32.247 176.247 li
32.958 176.184 li
34.308 176.121 li
37.071 175.995 li
43.011 175.626 li
48.645 175.248 li
54.09 174.87 li
60.048 174.375 li
65.619 173.808 li
71.577 173.115 li
77.526 172.305 li
77.391 171.315 li
77.391 172.314 li
77.454 172.314 li
77.517 172.314 li
77.679 172.314 li
77.94 172.224 li
78.201 172.179 li
78.858 172.125 li
78.903 172.116 li
80.307 171.864 li
83.043 171.423 li
82.89 170.433 li
82.89 171.441 li
82.953 171.441 li
83.187 171.441 li
83.52 171.27 li
83.079 170.379 li
83.079 171.378 li
83.268 171.378 li
83.349 171.378 li
83.808 171.297 li
83.853 171.288 li
84.537 171.099 li
86.013 170.856 li
89.028 170.226 li
88.83 169.254 li
88.83 170.253 li
88.893 170.253 li
89.01 170.253 li
89.172 170.253 li
89.46 170.154 li
89.712 170.109 li
89.748 170.1 li
90.441 169.911 li
91.809 169.596 li
94.626 168.912 li
94.392 167.94 li
94.392 168.939 li
94.455 168.939 li
94.689 168.939 li
95.022 168.768 li
95.148 168.705 li
94.698 167.814 li
94.869 168.795 li
95.238 168.732 li
95.292 168.732 li
96.03 168.525 li
97.425 168.147 li
100.134 167.265 li
99.828 166.311 li
99.828 167.31 li
99.954 167.31 li
100.368 167.31 li
100.719 166.959 li
100.017 166.248 li
100.017 167.247 li
100.206 167.247 li
100.368 167.247 li
100.89 167.076 li
101.646 166.824 li
101.664 166.815 li
103.131 166.248 li
102.762 165.312 li
102.762 166.311 li
102.888 166.311 li
103.302 166.311 li
103.662 165.96 li
102.951 165.249 li
103.266 166.203 li
103.455 166.14 li
103.833 166.014 li
103.869 165.996 li
104.634 165.681 li
106.119 165.123 li
105.768 164.187 li
105.768 165.186 li
105.831 165.186 li
106.065 165.186 li
106.398 165.015 li
106.461 164.988 li
106.767 164.889 li
106.821 164.871 li
107.55 164.538 li
109.089 163.836 li
109.287 163.647 li
108.576 162.936 li
108.576 163.935 li
108.702 163.935 li
109.116 163.935 li
109.368 163.683 li
109.521 163.638 li
109.566 163.62 li
110.304 163.287 li
110.322 163.278 li
111.708 162.585 li
111.834 162.522 li
111.978 162.45 li
112.086 162.342 li
112.14 162.306 li
112.464 162.144 li
113.211 161.766 li
113.238 161.757 li
114.876 160.803 li
115.038 160.641 li
114.327 159.939 li
114.777 160.83 li
114.831 160.803 li
114.957 160.758 li
115.083 160.722 li
115.542 160.407 li
116.271 159.993 li
116.298 159.975 li
117.9 158.904 li
118.035 158.769 li
117.324 158.058 li
117.774 158.958 li
117.9 158.895 li
117.954 158.868 li
118.197 158.706 li
118.566 158.454 li
118.611 158.427 li
119.304 157.86 li
120.852 156.771 li
120.969 156.645 li
121.023 156.591 li
121.131 156.519 li
121.176 156.492 li
121.59 156.141 li
122.274 155.583 li
122.283 155.574 li
123.822 154.233 li
123.912 154.143 li
123.201 153.441 li
123.651 154.332 li
123.777 154.269 li
124.011 154.152 li
124.2 153.864 li
124.47 153.639 li
124.479 153.63 li
125.217 152.964 li
126.603 151.515 li
126.657 151.461 li
126.72 151.398 li
126.909 151.209 li
127.287 150.831 li
127.296 150.813 li
128.025 150.03 li
129.321 148.419 li
129.411 148.329 li
129.474 148.266 li
129.519 148.221 li
129.735 147.942 li
130.086 147.528 li
130.104 147.501 li
130.878 146.475 li
132.435 144.405 li
132.462 144.342 li
132.471 144.333 li
132.561 144.243 li
132.795 143.847 li
133.155 143.307 li
133.911 142.173 li
135.45 139.743 li
135.531 139.572 li
135.567 139.509 li
135.612 139.356 li
135.738 139.158 li
136.098 138.618 li
136.116 138.582 li
136.836 137.286 li
138.249 134.577 li
138.294 134.442 li
138.348 134.37 li
138.42 134.253 li
138.564 133.839 li
138.888 133.227 li
138.906 133.209 li
139.608 131.733 li
140.985 128.61 li
141.093 128.385 li
141.147 128.286 li
141.219 128.007 li
141.372 127.647 li
141.75 126.765 li
141.75 126.756 li
142.515 124.794 li
143.991 120.834 li
144.099 120.636 li
144.153 120.519 li
144.225 120.15 li
144.387 119.727 li
144.396 119.709 li
144.774 118.566 li
145.53 116.307 li
147.024 111.519 li
147.132 111.249 li
147.168 111.159 li
147.24 110.79 li
147.411 110.151 li
147.789 108.909 li
148.545 106.263 li
150.057 100.521 li
150.111 100.179 li
150.21 99.882 li
150.228 99.846 li
150.426 99.054 li
150.426 99.036 li
150.741 97.533 li
151.488 94.41 li
153 87.759 li
153.054 87.408 li
153.162 87.021 li
153.18 86.967 li
153.306 86.13 li
153.675 84.528 li
154.368 81.135 li
155.745 74.124 li
158.508 59.085 li
158.562 58.554 li
158.67 58.122 li
158.679 58.086 li
158.877 56.988 li
159.246 54.864 li
160.002 50.553 li
161.505 42.021 li
161.559 41.49 li
161.676 41.058 li
161.676 41.022 li
161.874 39.924 li
162.252 37.791 li
162.936 33.741 li
164.421 25.983 li
164.538 25.587 li
164.556 25.524 li
164.628 25.047 li
164.808 24.21 li
164.808 24.201 li
165.114 22.581 li
165.87 19.386 li
165.942 18.981 li
165.996 18.639 li
166.167 17.937 li
166.545 16.569 li
167.238 13.914 li
167.283 13.698 li
167.346 13.572 li
167.409 13.455 li
167.544 12.762 li
167.913 11.727 li
167.958 11.538 li
168.03 11.385 li
168.057 11.34 li
168.264 10.791 li
168.273 10.773 li
168.543 9.945 li
168.597 9.864 li
168.669 9.756 li
168.759 9.477 li
168.93 9.081 li
168.948 9.045 li
168.984 8.946 li
169.038 8.865 li
169.092 8.784 li
169.218 8.469 li
169.281 8.37 li
169.317 8.316 li
169.389 8.172 li
169.56 7.893 li
169.578 7.857 li
169.587 7.839 li
169.596 7.83 li
169.713 7.713 li
169.839 7.47 li
169.848 7.461 li
169.911 7.398 li
170.037 7.272 li
170.1 7.209 li
170.208 7.092 li
170.343 6.822 li
169.452 6.372 li
169.902 7.272 li
170.028 7.209 li
170.172 7.137 li
170.343 6.957 li
170.406 6.894 li
169.704 6.183 li
170.145 7.083 li
170.271 7.02 li
170.415 6.948 li
170.595 6.768 li
169.893 6.066 li
169.893 7.065 li
170.01 7.065 li
170.424 7.065 li
170.784 6.705 li
170.847 6.642 li
170.136 5.94 li
170.136 6.939 li
170.262 6.939 li
170.325 6.939 li
170.388 6.939 li
170.514 6.939 li
170.577 6.939 li
170.64 6.939 li
170.766 6.939 li
170.829 6.939 li
170.829 5.94 li
170.379 6.831 li
170.505 6.894 li
170.712 7.002 li
171.018 7.002 li
171.018 6.003 li
170.307 6.705 li
170.37 6.768 li
170.487 6.885 li
170.757 7.02 li
171.198 6.129 li
170.496 6.831 li
170.559 6.894 li
170.622 6.957 li
170.73 7.074 li
171 7.209 li
171.45 6.309 li
170.748 7.02 li
170.811 7.083 li
170.874 7.146 li
171.054 7.335 li
171.18 7.461 li
171.891 6.75 li
170.991 7.2 li
171.054 7.326 li
171.126 7.47 li
171.432 7.767 li
172.143 7.065 li
171.243 7.506 li
171.306 7.632 li
171.369 7.758 li
171.387 7.794 li
171.576 8.109 li
171.621 8.199 li
171.648 8.253 li
171.792 8.469 li
171.936 8.703 li
172.206 9.351 li
172.251 9.504 li
172.296 9.63 li
172.404 9.801 li
172.494 10.089 li
172.503 10.134 li
172.872 11.061 li
172.917 11.241 li
172.944 11.349 li
173.07 11.601 li
173.169 11.997 li
173.178 12.033 li
173.547 13.131 li
173.592 13.383 li
173.61 13.473 li
173.754 13.833 li
173.925 14.4 li
174.294 15.75 li
175.032 18.693 li
175.086 19.08 li
175.095 19.17 li
175.239 19.584 li
175.41 20.331 li
175.725 22.005 li
176.481 25.596 li
176.598 26.064 li
176.652 26.451 li
176.652 26.478 li
176.85 27.45 li
176.85 27.441 li
177.219 29.376 li
177.966 33.309 li
179.46 41.526 li
179.523 42.003 li
179.523 42.012 li
179.586 42.453 li
179.586 42.471 li
179.784 43.497 li
180.153 45.495 li
180.846 49.419 li
182.214 57.366 li
184.977 72.585 li
185.094 73.062 li
185.148 73.503 li
185.148 73.53 li
185.346 74.556 li
185.346 74.565 li
185.724 76.509 li
186.471 80.325 li
187.983 87.633 li
188.1 87.984 li
188.145 88.326 li
188.154 88.362 li
188.352 89.271 li
188.721 90.963 li
189.477 94.293 li
190.989 100.584 li
191.106 100.926 li
191.151 101.223 li
191.16 101.277 li
191.358 102.006 li
191.736 103.446 li
192.492 106.2 li
193.941 111.447 li
194.049 111.726 li
194.094 111.942 li
194.103 111.996 li
194.31 112.662 li
194.31 112.671 li
194.688 113.868 li
195.435 116.19 li
196.902 120.573 li
197.01 120.789 li
197.046 120.933 li
197.055 120.987 li
197.262 121.518 li
197.568 122.445 li
197.568 122.463 li
198.27 124.299 li
199.638 127.719 li
199.692 127.881 li
199.737 128.007 li
199.881 128.232 li
200.025 128.565 li
200.331 129.357 li
200.34 129.384 li
201.042 130.923 li
202.392 133.812 li
202.437 133.938 li
202.482 134.064 li
202.644 134.316 li
202.806 134.631 li
203.184 135.387 li
203.193 135.396 li
203.949 136.791 li
205.443 139.464 li
205.497 139.572 li
205.524 139.626 li
205.668 139.851 li
205.839 140.121 li
206.136 140.67 li
206.145 140.688 li
206.919 141.975 li
208.494 144.27 li
208.683 144.459 li
209.385 143.748 li
208.494 144.198 li
208.557 144.324 li
208.602 144.405 li
208.818 144.693 li
209.106 145.152 li
209.124 145.188 li
209.853 146.178 li
211.23 147.861 li
211.248 147.888 li
211.311 148.014 li
211.383 148.158 li
211.653 148.428 li
212.004 148.842 li
212.004 148.833 li
212.697 149.661 li
214.092 151.173 li
214.83 150.498 li
213.93 150.948 li
213.993 151.074 li
214.146 151.371 li
214.425 151.506 li
214.461 151.551 li
214.749 151.893 li
214.776 151.929 li
215.514 152.658 li
216.9 153.927 li
217.575 153.189 li
216.684 153.639 li
216.747 153.756 li
216.819 153.909 li
216.999 154.08 li
217.062 154.152 li
217.287 154.305 li
217.593 154.548 li
218.178 155.142 li
218.214 155.178 li
219.717 156.411 li
219.942 156.519 li
220.392 155.628 li
219.681 156.33 li
219.744 156.393 li
219.933 156.582 li
220.005 156.654 li
220.437 156.942 li
221.166 157.491 li
221.175 157.5 li
222.615 158.517 li
222.624 158.517 li
222.678 158.58 li
222.75 158.652 li
223.02 158.832 li
223.398 159.084 li
224.145 159.579 li
224.163 159.588 li
225.675 160.533 li
226.206 159.687 li
225.495 160.398 li
225.558 160.461 li
225.846 160.749 li
226.386 160.749 li
226.386 159.75 li
225.684 160.461 li
225.81 160.578 li
225.918 160.695 li
226.395 160.938 li
227.043 161.343 li
227.07 161.361 li
228.474 162.126 li
228.951 161.253 li
228.249 161.955 li
228.303 162.018 li
228.6 162.315 li
229.14 162.315 li
229.14 161.316 li
228.429 162.018 li
228.555 162.144 li
228.672 162.261 li
229.194 162.522 li
229.212 162.531 li
229.896 162.837 li
231.255 163.521 li
231.705 162.621 li
230.994 163.332 li
231.057 163.395 li
231.174 163.512 li
231.444 163.647 li
231.507 163.674 li
231.696 163.737 li
232.002 163.89 li
232.038 163.908 li
232.821 164.232 li
234.324 164.862 li
237.33 166.059 li
237.699 165.123 li
236.997 165.834 li
237.06 165.897 li
237.348 166.185 li
237.663 166.185 li
237.699 166.203 li
238.059 166.32 li
238.734 166.563 li
240.129 167.076 li
243.108 168.003 li
243.324 168.003 li
243.324 167.004 li
242.883 167.895 li
243 167.958 li
243.216 168.066 li
243.414 168.066 li
243.639 168.138 li
243.666 168.147 li
244.377 168.336 li
245.763 168.714 li
248.346 169.38 li
248.382 169.398 li
248.589 169.497 li
248.724 169.497 li
248.76 169.515 li
248.832 169.533 li
249.246 169.605 li
249.957 169.785 li
249.975 169.785 li
251.487 170.1 li
254.304 170.703 li
254.313 170.703 li
254.529 170.811 li
254.826 170.811 li
254.853 170.811 li
255.069 170.883 li
255.141 170.91 li
255.897 171.045 li
257.283 171.297 li
260.046 171.738 li
260.199 170.748 li
259.758 171.648 li
259.875 171.711 li
260.091 171.81 li
260.388 171.81 li
260.496 171.81 li
260.784 171.864 li
261.54 171.99 li
263.052 172.242 li
266.13 172.683 li
266.328 172.683 li
266.391 172.683 li
266.391 171.684 li
266.076 172.638 li
266.256 172.701 li
266.337 172.728 li
266.787 172.8 li
266.832 172.809 li
267.597 172.872 li
269.019 173.052 li
271.953 173.43 li
277.479 174.06 li
283.491 174.555 li
289.062 175.059 li
294.507 175.437 li
300.456 175.815 li
305.964 176.058 li
311.985 176.373 li
312.075 176.373 li
312.138 176.373 li
313.2 176.373 li
313.2 174.375 li
312.138 174.375 li
312.075 174.375 li
312.039 174.375 li
306.063 174.06 li
300.564 173.817 li
294.642 173.439 li
289.215 173.07 li
283.662 172.566 li
277.677 172.071 li
272.196 171.441 li
269.262 171.072 li
267.804 170.883 li
267.075 170.82 li
266.814 170.775 li
266.706 170.739 li
266.553 170.685 li
266.328 170.685 li
266.274 170.685 li
263.358 170.262 li
261.864 170.01 li
261.117 169.893 li
260.739 169.83 li
260.658 169.812 li
260.388 169.812 li
260.325 169.812 li
260.325 170.811 li
260.775 169.92 li
260.649 169.857 li
260.514 169.785 li
257.616 169.326 li
256.257 169.083 li
255.636 168.966 li
255.33 168.867 li
255.177 168.813 li
254.826 168.813 li
254.763 168.813 li
254.763 169.812 li
255.213 168.921 li
255.087 168.858 li
254.97 168.795 li
251.91 168.147 li
250.425 167.841 li
249.696 167.652 li
249.66 167.643 li
249.318 167.589 li
249.201 167.553 li
249.048 167.499 li
248.823 167.499 li
248.823 168.498 li
249.273 167.607 li
249.147 167.544 li
249.057 167.499 li
246.267 166.779 li
244.899 166.41 li
244.242 166.23 li
243.891 166.113 li
243.738 166.059 li
243.45 166.059 li
243.45 167.058 li
243.9 166.167 li
243.774 166.104 li
243.567 165.996 li
243.414 165.996 li
240.768 165.177 li
239.418 164.682 li
238.734 164.439 li
238.716 164.43 li
238.329 164.304 li
238.14 164.241 li
237.987 164.187 li
237.762 164.187 li
237.762 165.186 li
238.473 164.484 li
238.41 164.421 li
238.266 164.268 li
235.08 163.008 li
233.586 162.387 li
232.866 162.09 li
232.524 161.919 li
232.461 161.883 li
232.272 161.82 li
232.209 161.793 li
231.768 162.684 li
232.47 161.982 li
232.407 161.919 li
232.29 161.802 li
230.76 161.037 li
230.067 160.722 li
229.86 160.614 li
229.842 160.605 li
229.554 160.308 li
229.014 160.308 li
229.014 161.316 li
229.725 160.605 li
229.662 160.542 li
229.554 160.443 li
228.087 159.642 li
227.43 159.219 li
227.385 159.192 li
227.106 159.057 li
227.097 159.039 li
226.8 158.751 li
226.26 158.751 li
226.26 159.75 li
226.971 159.039 li
226.908 158.976 li
226.827 158.904 li
225.243 157.914 li
224.505 157.419 li
224.127 157.167 li
223.947 157.041 li
223.389 157.878 li
224.1 157.167 li
224.037 157.104 li
223.974 157.041 li
223.911 156.987 li
222.354 155.88 li
221.616 155.322 li
221.589 155.304 li
221.274 155.097 li
221.157 154.98 li
221.094 154.917 li
220.977 154.8 li
220.815 154.719 li
219.564 153.693 li
218.97 153.108 li
218.943 153.072 li
218.529 152.73 li
218.484 152.694 li
218.259 152.541 li
217.701 153.378 li
218.412 152.667 li
218.349 152.604 li
217.638 153.315 li
218.538 152.865 li
218.475 152.739 li
218.385 152.577 li
216.891 151.209 li
216.252 150.579 li
215.973 150.237 li
215.937 150.201 li
215.721 149.976 li
215.604 149.868 li
215.334 149.733 li
214.893 150.624 li
215.784 150.174 li
215.721 150.057 li
215.658 149.931 li
214.2 148.338 li
213.525 147.537 li
213.147 147.096 li
213.12 147.069 li
212.913 146.853 li
212.202 147.564 li
213.093 147.114 li
213.03 146.988 li
212.967 146.862 li
212.922 146.763 li
211.428 144.945 li
210.78 144.063 li
210.483 143.595 li
210.465 143.559 li
210.303 143.343 li
210.285 143.307 li
210.213 143.154 li
210.033 142.983 li
208.602 140.895 li
207.882 139.689 li
207.576 139.14 li
207.567 139.122 li
207.369 138.798 li
207.36 138.78 li
207.252 138.618 li
207.225 138.555 li
207.207 138.528 li
205.704 135.828 li
204.966 134.478 li
204.597 133.74 li
204.408 133.362 li
204.381 133.308 li
204.291 133.182 li
204.273 133.119 li
204.255 133.065 li
202.86 130.077 li
202.185 128.61 li
201.888 127.827 li
201.879 127.809 li
201.681 127.359 li
201.645 127.269 li
201.546 127.116 li
201.528 127.062 li
201.519 127.035 li
200.133 123.57 li
199.458 121.788 li
199.152 120.87 li
199.143 120.852 li
198.972 120.393 li
198.918 120.195 li
198.891 120.087 li
198.756 119.808 li
197.343 115.56 li
196.587 113.256 li
196.218 112.086 li
196.047 111.51 li
195.993 111.24 li
195.975 111.15 li
195.84 110.808 li
194.418 105.678 li
193.671 102.933 li
193.293 101.493 li
193.113 100.845 li
193.059 100.521 li
193.05 100.449 li
192.915 100.035 li
191.43 93.834 li
190.674 90.531 li
190.305 88.848 li
190.125 88.011 li
190.071 87.606 li
190.053 87.516 li
189.918 87.111 li
188.433 79.929 li
187.686 76.122 li
187.308 74.187 li
187.128 73.224 li
187.065 72.747 li
187.065 72.693 li
186.93 72.162 li
184.185 57.015 li
182.817 49.095 li
182.124 45.135 li
181.746 43.128 li
181.566 42.147 li
181.503 41.742 li
181.44 41.247 li
181.44 41.22 li
179.937 32.94 li
179.181 29.007 li
178.803 27.054 li
178.623 26.145 li
178.569 25.731 li
178.56 25.686 li
178.425 25.155 li
177.687 21.618 li
177.372 19.926 li
177.174 19.089 li
177.165 19.044 li
177.057 18.711 li
177.003 18.36 li
176.994 18.306 li
176.229 15.246 li
175.851 13.851 li
175.662 13.212 li
175.644 13.167 li
175.536 12.897 li
175.491 12.681 li
175.482 12.618 li
175.104 11.466 li
174.987 11.007 li
174.96 10.899 li
174.834 10.647 li
174.798 10.503 li
174.78 10.44 li
174.402 9.486 li
174.285 9.099 li
174.249 8.946 li
174.105 8.748 li
174.087 8.685 li
174.078 8.649 li
173.754 7.866 li
173.718 7.794 li
173.493 7.425 li
173.484 7.398 li
173.385 7.245 li
173.349 7.182 li
173.331 7.146 li
173.142 6.831 li
173.097 6.741 li
173.034 6.615 li
172.962 6.471 li
172.656 6.165 li
171.954 6.876 li
172.845 6.426 li
172.782 6.3 li
172.71 6.156 li
172.467 5.922 li
172.287 5.733 li
172.224 5.67 li
172.161 5.607 li
172.044 5.49 li
171.774 5.355 li
171.324 6.246 li
172.035 5.544 li
171.972 5.481 li
171.909 5.418 li
171.792 5.301 li
171.522 5.166 li
171.081 6.066 li
171.783 5.355 li
171.72 5.292 li
171.432 5.004 li
170.955 5.004 li
170.955 6.003 li
171.396 5.103 li
171.27 5.04 li
171.063 4.941 li
170.766 4.941 li
170.64 4.941 li
170.577 4.941 li
170.514 4.941 li
170.388 4.941 li
170.325 4.941 li
170.262 4.941 li
170.136 4.941 li
169.722 4.941 li
169.371 5.292 li
169.308 5.355 li
170.01 6.066 li
170.01 5.058 li
169.893 5.058 li
169.479 5.058 li
169.119 5.418 li
169.83 6.129 li
169.38 5.229 li
169.254 5.292 li
169.11 5.364 li
168.93 5.544 li
168.867 5.607 li
169.578 6.309 li
169.128 5.418 li
169.002 5.481 li
168.705 5.634 li
168.498 6.057 li
169.389 6.498 li
168.678 5.796 li
168.624 5.859 li
168.498 5.976 li
168.435 6.039 li
168.309 6.165 li
168.192 6.282 li
168.066 6.534 li
168.057 6.543 li
167.94 6.66 li
167.823 6.894 li
167.661 7.173 li
167.634 7.209 li
167.589 7.308 li
167.499 7.443 li
167.436 7.533 li
167.31 7.848 li
167.247 7.947 li
167.166 8.055 li
167.076 8.334 li
166.905 8.73 li
166.887 8.766 li
166.86 8.865 li
166.806 8.946 li
166.734 9.054 li
166.383 10.107 li
166.221 10.539 li
166.122 10.737 li
166.068 10.836 li
165.996 11.151 li
165.609 12.231 li
165.501 12.798 li
165.429 12.924 li
165.375 13.05 li
165.285 13.464 li
164.61 16.056 li
164.232 17.433 li
164.043 18.198 li
164.034 18.234 li
163.962 18.648 li
163.908 18.99 li
163.161 22.167 li
162.846 23.805 li
162.657 24.669 li
162.657 24.696 li
162.594 25.101 li
162.486 25.479 li
162.477 25.515 li
160.965 33.381 li
160.281 37.458 li
159.903 39.573 li
159.723 40.608 li
159.606 41.067 li
159.588 41.139 li
159.525 41.733 li
158.031 50.211 li
157.275 54.513 li
156.906 56.637 li
156.726 57.663 li
156.609 58.131 li
156.591 58.194 li
156.528 58.788 li
153.783 73.755 li
152.406 80.739 li
151.722 84.096 li
151.344 85.752 li
151.227 86.535 li
151.119 86.913 li
151.101 86.967 li
151.029 87.372 li
149.544 93.96 li
148.788 97.092 li
148.473 98.586 li
148.302 99.279 li
148.194 99.621 li
148.167 99.693 li
148.095 100.098 li
146.61 105.732 li
145.863 108.342 li
145.494 109.602 li
145.296 110.295 li
145.287 110.331 li
145.242 110.592 li
145.152 110.817 li
145.134 110.853 li
143.622 115.695 li
142.875 117.936 li
142.506 119.043 li
142.326 119.52 li
142.299 119.601 li
142.245 119.862 li
142.182 119.988 li
142.155 120.033 li
140.643 124.083 li
139.905 126 li
139.536 126.855 li
139.347 127.296 li
139.311 127.368 li
139.257 127.584 li
139.185 127.737 li
139.167 127.764 li
137.79 130.896 li
137.124 132.291 li
136.764 132.957 li
136.719 133.038 li
136.611 133.371 li
136.557 133.443 li
136.485 133.56 li
136.404 133.794 li
135.072 136.341 li
134.406 137.547 li
134.055 138.069 li
134.046 138.087 li
133.848 138.42 li
133.785 138.519 li
133.713 138.744 li
133.704 138.762 li
132.237 141.084 li
131.499 142.191 li
131.121 142.758 li
131.103 142.776 li
130.968 143.001 li
130.932 143.046 li
130.815 143.154 li
130.725 143.343 li
129.276 145.278 li
128.547 146.25 li
128.196 146.664 li
128.169 146.682 li
128.007 146.907 li
127.998 146.916 li
127.872 147.042 li
127.836 147.078 li
126.504 148.725 li
125.856 149.436 li
125.496 149.796 li
125.307 149.976 li
125.244 150.039 li
125.181 150.102 li
125.172 150.111 li
123.813 151.533 li
123.174 152.118 li
122.814 152.415 li
122.697 152.514 li
122.499 152.82 li
123.327 153.378 li
122.877 152.478 li
122.751 152.541 li
122.607 152.613 li
122.454 152.766 li
120.996 154.053 li
120.321 154.602 li
120.312 154.602 li
119.979 154.881 li
119.835 154.98 li
119.754 155.034 li
119.556 155.232 li
118.098 156.267 li
117.423 156.816 li
117.081 157.041 li
116.946 157.131 li
116.883 157.167 li
116.73 157.239 li
116.631 157.347 li
115.236 158.274 li
114.507 158.697 li
114.48 158.715 li
114.192 158.904 li
114.138 158.922 li
114.066 158.949 li
113.877 159.039 li
113.733 159.12 li
113.652 159.201 li
112.284 159.993 li
111.564 160.353 li
111.195 160.542 li
111.132 160.569 li
110.898 160.731 li
110.817 160.785 li
110.682 160.92 li
111.393 161.622 li
110.943 160.731 li
110.817 160.794 li
109.458 161.469 li
108.837 161.757 li
108.513 161.865 li
108.288 161.937 li
107.991 162.234 li
108.702 162.936 li
108.702 161.937 li
108.576 161.937 li
108.162 161.937 li
107.937 162.162 li
106.722 162.711 li
106.083 163.008 li
105.759 163.116 li
105.696 163.134 li
105.507 163.233 li
105.381 163.296 li
105.831 164.187 li
105.831 163.188 li
105.768 163.188 li
105.579 163.188 li
103.896 163.818 li
103.167 164.124 li
102.825 164.241 li
102.636 164.304 li
102.411 164.376 li
102.186 164.601 li
102.888 165.312 li
102.888 164.313 li
102.762 164.313 li
102.573 164.313 li
100.989 164.934 li
100.26 165.177 li
100.035 165.249 li
100.017 165.249 li
99.603 165.249 li
99.243 165.609 li
99.954 166.311 li
99.954 165.312 li
99.828 165.312 li
99.666 165.312 li
96.849 166.23 li
95.499 166.599 li
94.86 166.77 li
94.536 166.824 li
94.392 166.851 li
94.131 166.977 li
94.005 167.04 li
94.455 167.94 li
94.455 166.941 li
94.392 166.941 li
94.266 166.941 li
91.35 167.652 li
89.955 167.967 li
89.28 168.147 li
89.01 168.21 li
88.947 168.219 li
88.695 168.3 li
89.01 169.254 li
89.01 168.246 li
88.893 168.246 li
88.83 168.246 li
88.722 168.246 li
85.644 168.894 li
84.114 169.146 li
83.421 169.335 li
83.178 169.371 li
83.079 169.371 li
82.845 169.371 li
82.503 169.542 li
82.953 170.433 li
82.953 169.434 li
82.89 169.434 li
82.809 169.434 li
79.974 169.893 li
78.633 170.136 li
77.985 170.19 li
77.949 170.199 li
77.535 170.262 li
77.463 170.28 li
77.202 170.361 li
77.517 171.315 li
77.517 170.316 li
77.454 170.316 li
77.391 170.316 li
77.319 170.316 li
71.325 171.135 li
65.403 171.819 li
59.859 172.377 li
53.937 172.881 li
48.51 173.25 li
42.894 173.628 li
36.963 173.997 li
34.218 174.123 li
32.823 174.186 li
32.157 174.249 li
31.824 174.249 li
31.635 174.249 li
31.581 174.249 li
30.51 174.249 li
30.51 176.247 li
31.518 176.247 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.905882 0.901961 0.00392157 0 cmyk
f
33.0142 175 mo
33.0142 174.625 32.8267 174.25 32.5767 173.938 cv
32.2642 173.688 31.8892 173.5 31.5142 173.5 cv
31.1392 173.5 30.7642 173.688 30.4517 173.938 cv
30.2017 174.25 30.0142 174.625 30.0142 175 cv
30.0142 175.375 30.2017 175.75 30.4517 176.063 cv
30.7642 176.313 31.1392 176.5 31.5142 176.5 cv
31.8892 176.5 32.2642 176.313 32.5767 176.063 cv
32.8267 175.75 33.0142 175.375 33.0142 175 cv
cp
0 0.992157 1 0 cmyk
f
36.5142 174.625 mo
36.5142 174.25 36.3267 173.875 36.0767 173.563 cv
35.7642 173.313 35.3892 173.125 35.0142 173.125 cv
34.6392 173.125 34.2642 173.313 33.9517 173.563 cv
33.7017 173.875 33.5142 174.25 33.5142 174.625 cv
33.5142 175 33.7017 175.375 33.9517 175.688 cv
34.2642 175.938 34.6392 176.125 35.0142 176.125 cv
35.3892 176.125 35.7642 175.938 36.0767 175.688 cv
36.3267 175.375 36.5142 175 36.5142 174.625 cv
cp
f
40.0142 174.625 mo
40.0142 174.25 39.8267 173.875 39.5767 173.563 cv
39.2642 173.313 38.8892 173.125 38.5142 173.125 cv
38.1392 173.125 37.7642 173.313 37.4517 173.563 cv
37.2017 173.875 37.0142 174.25 37.0142 174.625 cv
37.0142 175 37.2017 175.375 37.4517 175.688 cv
37.7642 175.938 38.1392 176.125 38.5142 176.125 cv
38.8892 176.125 39.2642 175.938 39.5767 175.688 cv
39.8267 175.375 40.0142 175 40.0142 174.625 cv
cp
f
43.5142 174.125 mo
43.5142 173.75 43.3267 173.375 43.0767 173.063 cv
42.7642 172.813 42.3892 172.625 42.0142 172.625 cv
41.6392 172.625 41.2642 172.813 40.9517 173.063 cv
40.7017 173.375 40.5142 173.75 40.5142 174.125 cv
40.5142 174.5 40.7017 174.875 40.9517 175.188 cv
41.2642 175.438 41.6392 175.625 42.0142 175.625 cv
42.3892 175.625 42.7642 175.438 43.0767 175.188 cv
43.3267 174.875 43.5142 174.5 43.5142 174.125 cv
cp
f
47.0142 173.75 mo
47.0142 173.375 46.8267 173 46.5767 172.688 cv
46.2642 172.438 45.8892 172.25 45.5142 172.25 cv
45.1392 172.25 44.7642 172.438 44.4517 172.688 cv
44.2017 173 44.0142 173.375 44.0142 173.75 cv
44.0142 174.125 44.2017 174.5 44.4517 174.813 cv
44.7642 175.063 45.1392 175.25 45.5142 175.25 cv
45.8892 175.25 46.2642 175.063 46.5767 174.813 cv
46.8267 174.5 47.0142 174.125 47.0142 173.75 cv
cp
f
50.5142 173.875 mo
50.5142 173.5 50.3267 173.125 50.0767 172.813 cv
49.7642 172.563 49.3892 172.375 49.0142 172.375 cv
48.6392 172.375 48.2642 172.563 47.9517 172.813 cv
47.7017 173.125 47.5142 173.5 47.5142 173.875 cv
47.5142 174.25 47.7017 174.625 47.9517 174.938 cv
48.2642 175.188 48.6392 175.375 49.0142 175.375 cv
49.3892 175.375 49.7642 175.188 50.0767 174.938 cv
50.3267 174.625 50.5142 174.25 50.5142 173.875 cv
cp
f
54.0142 173.563 mo
54.0142 173.188 53.8267 172.813 53.5767 172.5 cv
53.2642 172.25 52.8892 172.063 52.5142 172.063 cv
52.1392 172.063 51.7642 172.25 51.4517 172.5 cv
51.2017 172.813 51.0142 173.188 51.0142 173.563 cv
51.0142 173.938 51.2017 174.313 51.4517 174.625 cv
51.7642 174.875 52.1392 175.063 52.5142 175.063 cv
52.8892 175.063 53.2642 174.875 53.5767 174.625 cv
53.8267 174.313 54.0142 173.938 54.0142 173.563 cv
cp
f
57.5767 173.188 mo
57.5767 172.813 57.3892 172.438 57.1392 172.125 cv
56.8267 171.875 56.4517 171.688 56.0767 171.688 cv
55.7017 171.688 55.3267 171.875 55.0142 172.125 cv
54.7642 172.438 54.5767 172.813 54.5767 173.188 cv
54.5767 173.563 54.7642 173.938 55.0142 174.25 cv
55.3267 174.5 55.7017 174.688 56.0767 174.688 cv
56.4517 174.688 56.8267 174.5 57.1392 174.25 cv
57.3892 173.938 57.5767 173.563 57.5767 173.188 cv
cp
f
61.0767 172.688 mo
61.0767 172.313 60.8892 171.938 60.6392 171.625 cv
60.3267 171.375 59.9517 171.188 59.5767 171.188 cv
59.2017 171.188 58.8267 171.375 58.5142 171.625 cv
58.2642 171.938 58.0767 172.313 58.0767 172.688 cv
58.0767 173.063 58.2642 173.438 58.5142 173.75 cv
58.8267 174 59.2017 174.188 59.5767 174.188 cv
59.9517 174.188 60.3267 174 60.6392 173.75 cv
60.8892 173.438 61.0767 173.063 61.0767 172.688 cv
cp
f
64.5767 172.563 mo
64.5767 172.188 64.3892 171.813 64.1392 171.5 cv
63.8267 171.25 63.4517 171.063 63.0767 171.063 cv
62.7017 171.063 62.3267 171.25 62.0142 171.5 cv
61.7642 171.813 61.5767 172.188 61.5767 172.563 cv
61.5767 172.938 61.7642 173.313 62.0142 173.625 cv
62.3267 173.875 62.7017 174.063 63.0767 174.063 cv
63.4517 174.063 63.8267 173.875 64.1392 173.625 cv
64.3892 173.313 64.5767 172.938 64.5767 172.563 cv
cp
f
68.0767 172 mo
68.0767 171.625 67.8892 171.25 67.6392 170.938 cv
67.3267 170.688 66.9517 170.5 66.5767 170.5 cv
66.2017 170.5 65.8267 170.688 65.5142 170.938 cv
65.2642 171.25 65.0767 171.625 65.0767 172 cv
65.0767 172.375 65.2642 172.75 65.5142 173.063 cv
65.8267 173.313 66.2017 173.5 66.5767 173.5 cv
66.9517 173.5 67.3267 173.313 67.6392 173.063 cv
67.8892 172.75 68.0767 172.375 68.0767 172 cv
cp
f
71.5767 171.563 mo
71.5767 171.188 71.3892 170.813 71.1392 170.5 cv
70.8267 170.25 70.4517 170.063 70.0767 170.063 cv
69.7017 170.063 69.3267 170.25 69.0142 170.5 cv
68.7642 170.813 68.5767 171.188 68.5767 171.563 cv
68.5767 171.938 68.7642 172.313 69.0142 172.625 cv
69.3267 172.875 69.7017 173.063 70.0767 173.063 cv
70.4517 173.063 70.8267 172.875 71.1392 172.625 cv
71.3892 172.313 71.5767 171.938 71.5767 171.563 cv
cp
f
75.0767 171.125 mo
75.0767 170.75 74.8892 170.375 74.6392 170.063 cv
74.3267 169.813 73.9517 169.625 73.5767 169.625 cv
73.2017 169.625 72.8267 169.813 72.5142 170.063 cv
72.2642 170.375 72.0767 170.75 72.0767 171.125 cv
72.0767 171.5 72.2642 171.875 72.5142 172.188 cv
72.8267 172.438 73.2017 172.625 73.5767 172.625 cv
73.9517 172.625 74.3267 172.438 74.6392 172.188 cv
74.8892 171.875 75.0767 171.5 75.0767 171.125 cv
cp
f
78.5767 170.75 mo
78.5767 170.375 78.3892 170 78.1392 169.688 cv
77.8267 169.438 77.4517 169.25 77.0767 169.25 cv
76.7017 169.25 76.3267 169.438 76.0142 169.688 cv
75.7642 170 75.5767 170.375 75.5767 170.75 cv
75.5767 171.125 75.7642 171.5 76.0142 171.813 cv
76.3267 172.063 76.7017 172.25 77.0767 172.25 cv
77.4517 172.25 77.8267 172.063 78.1392 171.813 cv
78.3892 171.5 78.5767 171.125 78.5767 170.75 cv
cp
f
82.1392 170.188 mo
82.1392 169.813 81.9517 169.438 81.7017 169.125 cv
81.3892 168.875 81.0142 168.688 80.6392 168.688 cv
80.2642 168.688 79.8892 168.875 79.5767 169.125 cv
79.3267 169.438 79.1392 169.813 79.1392 170.188 cv
79.1392 170.563 79.3267 170.938 79.5767 171.25 cv
79.8892 171.5 80.2642 171.688 80.6392 171.688 cv
81.0142 171.688 81.3892 171.5 81.7017 171.25 cv
81.9517 170.938 82.1392 170.563 82.1392 170.188 cv
cp
f
85.6392 169.813 mo
85.6392 169.438 85.4517 169.063 85.2017 168.75 cv
84.8892 168.5 84.5142 168.313 84.1392 168.313 cv
83.7642 168.313 83.3892 168.5 83.0767 168.75 cv
82.8267 169.063 82.6392 169.438 82.6392 169.813 cv
82.6392 170.188 82.8267 170.563 83.0767 170.875 cv
83.3892 171.125 83.7642 171.313 84.1392 171.313 cv
84.5142 171.313 84.8892 171.125 85.2017 170.875 cv
85.4517 170.563 85.6392 170.188 85.6392 169.813 cv
cp
f
89.1392 168.438 mo
89.1392 168.063 88.9517 167.688 88.7017 167.375 cv
88.3892 167.125 88.0142 166.938 87.6392 166.938 cv
87.2642 166.938 86.8892 167.125 86.5767 167.375 cv
86.3267 167.688 86.1392 168.063 86.1392 168.438 cv
86.1392 168.813 86.3267 169.188 86.5767 169.5 cv
86.8892 169.75 87.2642 169.938 87.6392 169.938 cv
88.0142 169.938 88.3892 169.75 88.7017 169.5 cv
88.9517 169.188 89.1392 168.813 89.1392 168.438 cv
cp
f
92.6392 167.25 mo
92.6392 166.875 92.4517 166.5 92.2017 166.188 cv
91.8892 165.938 91.5142 165.75 91.1392 165.75 cv
90.7642 165.75 90.3892 165.938 90.0767 166.188 cv
89.8267 166.5 89.6392 166.875 89.6392 167.25 cv
89.6392 167.625 89.8267 168 90.0767 168.313 cv
90.3892 168.563 90.7642 168.75 91.1392 168.75 cv
91.5142 168.75 91.8892 168.563 92.2017 168.313 cv
92.4517 168 92.6392 167.625 92.6392 167.25 cv
cp
f
96.1392 166.875 mo
96.1392 166.5 95.9517 166.125 95.7017 165.813 cv
95.3892 165.563 95.0142 165.375 94.6392 165.375 cv
94.2642 165.375 93.8892 165.563 93.5767 165.813 cv
93.3267 166.125 93.1392 166.5 93.1392 166.875 cv
93.1392 167.25 93.3267 167.625 93.5767 167.938 cv
93.8892 168.188 94.2642 168.375 94.6392 168.375 cv
95.0142 168.375 95.3892 168.188 95.7017 167.938 cv
95.9517 167.625 96.1392 167.25 96.1392 166.875 cv
cp
f
99.6392 165.563 mo
99.6392 165.188 99.4517 164.813 99.2017 164.5 cv
98.8892 164.25 98.5142 164.063 98.1392 164.063 cv
97.7642 164.063 97.3892 164.25 97.0767 164.5 cv
96.8267 164.813 96.6392 165.188 96.6392 165.563 cv
96.6392 165.938 96.8267 166.313 97.0767 166.625 cv
97.3892 166.875 97.7642 167.063 98.1392 167.063 cv
98.5142 167.063 98.8892 166.875 99.2017 166.625 cv
99.4517 166.313 99.6392 165.938 99.6392 165.563 cv
cp
f
103.139 164.563 mo
103.139 164.188 102.952 163.813 102.702 163.5 cv
102.389 163.25 102.014 163.063 101.639 163.063 cv
101.264 163.063 100.889 163.25 100.577 163.5 cv
100.327 163.813 100.139 164.188 100.139 164.563 cv
100.139 164.938 100.327 165.313 100.577 165.625 cv
100.889 165.875 101.264 166.063 101.639 166.063 cv
102.014 166.063 102.389 165.875 102.702 165.625 cv
102.952 165.313 103.139 164.938 103.139 164.563 cv
cp
f
106.702 162.875 mo
106.702 162.5 106.514 162.125 106.264 161.813 cv
105.952 161.563 105.577 161.375 105.202 161.375 cv
104.827 161.375 104.452 161.563 104.139 161.813 cv
103.889 162.125 103.702 162.5 103.702 162.875 cv
103.702 163.25 103.889 163.625 104.139 163.938 cv
104.452 164.188 104.827 164.375 105.202 164.375 cv
105.577 164.375 105.952 164.188 106.264 163.938 cv
106.514 163.625 106.702 163.25 106.702 162.875 cv
cp
f
110.202 161.563 mo
110.202 161.188 110.014 160.813 109.764 160.5 cv
109.452 160.25 109.077 160.063 108.702 160.063 cv
108.327 160.063 107.952 160.25 107.639 160.5 cv
107.389 160.813 107.202 161.188 107.202 161.563 cv
107.202 161.938 107.389 162.313 107.639 162.625 cv
107.952 162.875 108.327 163.063 108.702 163.063 cv
109.077 163.063 109.452 162.875 109.764 162.625 cv
110.014 162.313 110.202 161.938 110.202 161.563 cv
cp
f
113.702 159.625 mo
113.702 159.25 113.514 158.875 113.264 158.563 cv
112.952 158.313 112.577 158.125 112.202 158.125 cv
111.827 158.125 111.452 158.313 111.139 158.563 cv
110.889 158.875 110.702 159.25 110.702 159.625 cv
110.702 160 110.889 160.375 111.139 160.688 cv
111.452 160.938 111.827 161.125 112.202 161.125 cv
112.577 161.125 112.952 160.938 113.264 160.688 cv
113.514 160.375 113.702 160 113.702 159.625 cv
cp
f
117.202 157.313 mo
117.202 156.938 117.014 156.563 116.764 156.25 cv
116.452 156 116.077 155.813 115.702 155.813 cv
115.327 155.813 114.952 156 114.639 156.25 cv
114.389 156.563 114.202 156.938 114.202 157.313 cv
114.202 157.688 114.389 158.063 114.639 158.375 cv
114.952 158.625 115.327 158.813 115.702 158.813 cv
116.077 158.813 116.452 158.625 116.764 158.375 cv
117.014 158.063 117.202 157.688 117.202 157.313 cv
cp
f
120.702 154.688 mo
120.702 154.313 120.514 153.938 120.264 153.625 cv
119.952 153.375 119.577 153.188 119.202 153.188 cv
118.827 153.188 118.452 153.375 118.139 153.625 cv
117.889 153.938 117.702 154.313 117.702 154.688 cv
117.702 155.063 117.889 155.438 118.139 155.75 cv
118.452 156 118.827 156.188 119.202 156.188 cv
119.577 156.188 119.952 156 120.264 155.75 cv
120.514 155.438 120.702 155.063 120.702 154.688 cv
cp
f
124.202 151.688 mo
124.202 151.313 124.014 150.938 123.764 150.625 cv
123.452 150.375 123.077 150.188 122.702 150.188 cv
122.327 150.188 121.952 150.375 121.639 150.625 cv
121.389 150.938 121.202 151.313 121.202 151.688 cv
121.202 152.063 121.389 152.438 121.639 152.75 cv
121.952 153 122.327 153.188 122.702 153.188 cv
123.077 153.188 123.452 153 123.764 152.75 cv
124.014 152.438 124.202 152.063 124.202 151.688 cv
cp
f
127.702 148 mo
127.702 147.625 127.514 147.25 127.264 146.938 cv
126.952 146.688 126.577 146.5 126.202 146.5 cv
125.827 146.5 125.452 146.688 125.139 146.938 cv
124.889 147.25 124.702 147.625 124.702 148 cv
124.702 148.375 124.889 148.75 125.139 149.063 cv
125.452 149.313 125.827 149.5 126.202 149.5 cv
126.577 149.5 126.952 149.313 127.264 149.063 cv
127.514 148.75 127.702 148.375 127.702 148 cv
cp
f
131.264 143.438 mo
131.264 143.063 131.077 142.688 130.827 142.375 cv
130.514 142.125 130.139 141.938 129.764 141.938 cv
129.389 141.938 129.014 142.125 128.702 142.375 cv
128.452 142.688 128.264 143.063 128.264 143.438 cv
128.264 143.813 128.452 144.188 128.702 144.5 cv
129.014 144.75 129.389 144.938 129.764 144.938 cv
130.139 144.938 130.514 144.75 130.827 144.5 cv
131.077 144.188 131.264 143.813 131.264 143.438 cv
cp
f
134.764 137.75 mo
134.764 137.375 134.577 137 134.327 136.688 cv
134.014 136.438 133.639 136.25 133.264 136.25 cv
132.889 136.25 132.514 136.438 132.202 136.688 cv
131.952 137 131.764 137.375 131.764 137.75 cv
131.764 138.125 131.952 138.5 132.202 138.813 cv
132.514 139.063 132.889 139.25 133.264 139.25 cv
133.639 139.25 134.014 139.063 134.327 138.813 cv
134.577 138.5 134.764 138.125 134.764 137.75 cv
cp
f
138.264 131.438 mo
138.264 131.063 138.077 130.688 137.827 130.375 cv
137.514 130.125 137.139 129.938 136.764 129.938 cv
136.389 129.938 136.014 130.125 135.702 130.375 cv
135.452 130.688 135.264 131.063 135.264 131.438 cv
135.264 131.813 135.452 132.188 135.702 132.5 cv
136.014 132.75 136.389 132.938 136.764 132.938 cv
137.139 132.938 137.514 132.75 137.827 132.5 cv
138.077 132.188 138.264 131.813 138.264 131.438 cv
cp
f
141.764 122.25 mo
141.764 121.875 141.577 121.5 141.327 121.188 cv
141.014 120.938 140.639 120.75 140.264 120.75 cv
139.889 120.75 139.514 120.938 139.202 121.188 cv
138.952 121.5 138.764 121.875 138.764 122.25 cv
138.764 122.625 138.952 123 139.202 123.313 cv
139.514 123.563 139.889 123.75 140.264 123.75 cv
140.639 123.75 141.014 123.563 141.327 123.313 cv
141.577 123 141.764 122.625 141.764 122.25 cv
cp
f
145.264 112.438 mo
145.264 112.063 145.077 111.688 144.827 111.375 cv
144.514 111.125 144.139 110.938 143.764 110.938 cv
143.389 110.938 143.014 111.125 142.702 111.375 cv
142.452 111.688 142.264 112.063 142.264 112.438 cv
142.264 112.813 142.452 113.188 142.702 113.5 cv
143.014 113.75 143.389 113.938 143.764 113.938 cv
144.139 113.938 144.514 113.75 144.827 113.5 cv
145.077 113.188 145.264 112.813 145.264 112.438 cv
cp
f
148.764 99.1875 mo
148.764 98.8125 148.577 98.4375 148.327 98.125 cv
148.014 97.875 147.639 97.6875 147.264 97.6875 cv
146.889 97.6875 146.514 97.875 146.202 98.125 cv
145.952 98.4375 145.764 98.8125 145.764 99.1875 cv
145.764 99.5625 145.952 99.9375 146.202 100.25 cv
146.514 100.5 146.889 100.688 147.264 100.688 cv
147.639 100.688 148.014 100.5 148.327 100.25 cv
148.577 99.9375 148.764 99.5625 148.764 99.1875 cv
cp
f
152.264 84.5 mo
152.264 84.125 152.077 83.75 151.827 83.4375 cv
151.514 83.1875 151.139 83 150.764 83 cv
150.389 83 150.014 83.1875 149.702 83.4375 cv
149.452 83.75 149.264 84.125 149.264 84.5 cv
149.264 84.875 149.452 85.25 149.702 85.5625 cv
150.014 85.8125 150.389 86 150.764 86 cv
151.139 86 151.514 85.8125 151.827 85.5625 cv
152.077 85.25 152.264 84.875 152.264 84.5 cv
cp
f
155.764 68.375 mo
155.764 68 155.577 67.625 155.327 67.3125 cv
155.014 67.0625 154.639 66.875 154.264 66.875 cv
153.889 66.875 153.514 67.0625 153.202 67.3125 cv
152.952 67.625 152.764 68 152.764 68.375 cv
152.764 68.75 152.952 69.125 153.202 69.4375 cv
153.514 69.6875 153.889 69.875 154.264 69.875 cv
154.639 69.875 155.014 69.6875 155.327 69.4375 cv
155.577 69.125 155.764 68.75 155.764 68.375 cv
cp
f
159.327 49.875 mo
159.327 49.5 159.139 49.125 158.889 48.8125 cv
158.577 48.5625 158.202 48.375 157.827 48.375 cv
157.452 48.375 157.077 48.5625 156.764 48.8125 cv
156.514 49.125 156.327 49.5 156.327 49.875 cv
156.327 50.25 156.514 50.625 156.764 50.9375 cv
157.077 51.1875 157.452 51.375 157.827 51.375 cv
158.202 51.375 158.577 51.1875 158.889 50.9375 cv
159.139 50.625 159.327 50.25 159.327 49.875 cv
cp
f
162.827 33.25 mo
162.827 32.875 162.639 32.5 162.389 32.1875 cv
162.077 31.9375 161.702 31.75 161.327 31.75 cv
160.952 31.75 160.577 31.9375 160.264 32.1875 cv
160.014 32.5 159.827 32.875 159.827 33.25 cv
159.827 33.625 160.014 34 160.264 34.3125 cv
160.577 34.5625 160.952 34.75 161.327 34.75 cv
161.702 34.75 162.077 34.5625 162.389 34.3125 cv
162.639 34 162.827 33.625 162.827 33.25 cv
cp
f
166.329 19.503 mo
166.329 19.125 166.14 18.747 165.888 18.441 cv
165.573 18.189 165.204 18 164.826 18 cv
164.448 18 164.079 18.189 163.764 18.441 cv
163.512 18.747 163.323 19.125 163.323 19.503 cv
163.323 19.872 163.512 20.25 163.764 20.565 cv
164.079 20.808 164.448 20.997 164.826 20.997 cv
165.204 20.997 165.573 20.808 165.888 20.565 cv
166.14 20.25 166.329 19.872 166.329 19.503 cv
f
169.83 11.187 mo
169.83 10.809 169.641 10.44 169.389 10.125 cv
169.074 9.873 168.705 9.684 168.327 9.684 cv
167.949 9.684 167.58 9.873 167.265 10.125 cv
167.013 10.44 166.824 10.809 166.824 11.187 cv
166.824 11.565 167.013 11.934 167.265 12.249 cv
167.58 12.501 167.949 12.69 168.327 12.69 cv
168.705 12.69 169.074 12.501 169.389 12.249 cv
169.641 11.934 169.83 11.565 169.83 11.187 cv
f
173.331 8.937 mo
173.331 8.559 173.142 8.19 172.89 7.875 cv
172.575 7.623 172.206 7.434 171.828 7.434 cv
171.45 7.434 171.081 7.623 170.766 7.875 cv
170.514 8.19 170.325 8.559 170.325 8.937 cv
170.325 9.315 170.514 9.684 170.766 9.999 cv
171.081 10.251 171.45 10.44 171.828 10.44 cv
172.206 10.44 172.575 10.251 172.89 9.999 cv
173.142 9.684 173.331 9.315 173.331 8.937 cv
f
176.823 14.877 mo
176.823 14.499 176.643 14.121 176.391 13.815 cv
176.076 13.563 175.698 13.374 175.329 13.374 cv
174.951 13.374 174.573 13.563 174.267 13.815 cv
174.015 14.121 173.826 14.499 173.826 14.877 cv
173.826 15.246 174.015 15.624 174.267 15.939 cv
174.573 16.191 174.951 16.371 175.329 16.371 cv
175.698 16.371 176.076 16.191 176.391 15.939 cv
176.643 15.624 176.823 15.246 176.823 14.877 cv
f
180.324 26.001 mo
180.324 25.623 180.135 25.254 179.892 24.939 cv
179.577 24.687 179.199 24.498 178.83 24.498 cv
178.452 24.498 178.074 24.687 177.768 24.939 cv
177.516 25.254 177.327 25.623 177.327 26.001 cv
177.327 26.379 177.516 26.748 177.768 27.063 cv
178.074 27.315 178.452 27.504 178.83 27.504 cv
179.199 27.504 179.577 27.315 179.892 27.063 cv
180.135 26.748 180.324 26.379 180.324 26.001 cv
f
183.889 42.5 mo
183.889 42.125 183.702 41.75 183.452 41.4375 cv
183.139 41.1875 182.764 41 182.389 41 cv
182.014 41 181.639 41.1875 181.327 41.4375 cv
181.077 41.75 180.889 42.125 180.889 42.5 cv
180.889 42.875 181.077 43.25 181.327 43.5625 cv
181.639 43.8125 182.014 44 182.389 44 cv
182.764 44 183.139 43.8125 183.452 43.5625 cv
183.702 43.25 183.889 42.875 183.889 42.5 cv
cp
f
187.389 61.75 mo
187.389 61.375 187.202 61 186.952 60.6875 cv
186.639 60.4375 186.264 60.25 185.889 60.25 cv
185.514 60.25 185.139 60.4375 184.827 60.6875 cv
184.577 61 184.389 61.375 184.389 61.75 cv
184.389 62.125 184.577 62.5 184.827 62.8125 cv
185.139 63.0625 185.514 63.25 185.889 63.25 cv
186.264 63.25 186.639 63.0625 186.952 62.8125 cv
187.202 62.5 187.389 62.125 187.389 61.75 cv
cp
f
190.889 80.875 mo
190.889 80.5 190.702 80.125 190.452 79.8125 cv
190.139 79.5625 189.764 79.375 189.389 79.375 cv
189.014 79.375 188.639 79.5625 188.327 79.8125 cv
188.077 80.125 187.889 80.5 187.889 80.875 cv
187.889 81.25 188.077 81.625 188.327 81.9375 cv
188.639 82.1875 189.014 82.375 189.389 82.375 cv
189.764 82.375 190.139 82.1875 190.452 81.9375 cv
190.702 81.625 190.889 81.25 190.889 80.875 cv
cp
f
194.389 96.75 mo
194.389 96.375 194.202 96 193.952 95.6875 cv
193.639 95.4375 193.264 95.25 192.889 95.25 cv
192.514 95.25 192.139 95.4375 191.827 95.6875 cv
191.577 96 191.389 96.375 191.389 96.75 cv
191.389 97.125 191.577 97.5 191.827 97.8125 cv
192.139 98.0625 192.514 98.25 192.889 98.25 cv
193.264 98.25 193.639 98.0625 193.952 97.8125 cv
194.202 97.5 194.389 97.125 194.389 96.75 cv
cp
f
197.889 110.063 mo
197.889 109.688 197.702 109.313 197.452 109 cv
197.139 108.75 196.764 108.563 196.389 108.563 cv
196.014 108.563 195.639 108.75 195.327 109 cv
195.077 109.313 194.889 109.688 194.889 110.063 cv
194.889 110.438 195.077 110.813 195.327 111.125 cv
195.639 111.375 196.014 111.563 196.389 111.563 cv
196.764 111.563 197.139 111.375 197.452 111.125 cv
197.702 110.813 197.889 110.438 197.889 110.063 cv
cp
f
201.389 121.125 mo
201.389 120.75 201.202 120.375 200.952 120.063 cv
200.639 119.813 200.264 119.625 199.889 119.625 cv
199.514 119.625 199.139 119.813 198.827 120.063 cv
198.577 120.375 198.389 120.75 198.389 121.125 cv
198.389 121.5 198.577 121.875 198.827 122.188 cv
199.139 122.438 199.514 122.625 199.889 122.625 cv
200.264 122.625 200.639 122.438 200.952 122.188 cv
201.202 121.875 201.389 121.5 201.389 121.125 cv
cp
f
204.889 129.688 mo
204.889 129.313 204.702 128.938 204.452 128.625 cv
204.139 128.375 203.764 128.188 203.389 128.188 cv
203.014 128.188 202.639 128.375 202.327 128.625 cv
202.077 128.938 201.889 129.313 201.889 129.688 cv
201.889 130.063 202.077 130.438 202.327 130.75 cv
202.639 131 203.014 131.188 203.389 131.188 cv
203.764 131.188 204.139 131 204.452 130.75 cv
204.702 130.438 204.889 130.063 204.889 129.688 cv
cp
f
208.452 136.688 mo
208.452 136.313 208.264 135.938 208.014 135.625 cv
207.702 135.375 207.327 135.188 206.952 135.188 cv
206.577 135.188 206.202 135.375 205.889 135.625 cv
205.639 135.938 205.452 136.313 205.452 136.688 cv
205.452 137.063 205.639 137.438 205.889 137.75 cv
206.202 138 206.577 138.188 206.952 138.188 cv
207.327 138.188 207.702 138 208.014 137.75 cv
208.264 137.438 208.452 137.063 208.452 136.688 cv
cp
f
211.952 142.25 mo
211.952 141.875 211.764 141.5 211.514 141.188 cv
211.202 140.938 210.827 140.75 210.452 140.75 cv
210.077 140.75 209.702 140.938 209.389 141.188 cv
209.139 141.5 208.952 141.875 208.952 142.25 cv
208.952 142.625 209.139 143 209.389 143.313 cv
209.702 143.563 210.077 143.75 210.452 143.75 cv
210.827 143.75 211.202 143.563 211.514 143.313 cv
211.764 143 211.952 142.625 211.952 142.25 cv
cp
f
215.452 146.688 mo
215.452 146.313 215.264 145.938 215.014 145.625 cv
214.702 145.375 214.327 145.188 213.952 145.188 cv
213.577 145.188 213.202 145.375 212.889 145.625 cv
212.639 145.938 212.452 146.313 212.452 146.688 cv
212.452 147.063 212.639 147.438 212.889 147.75 cv
213.202 148 213.577 148.188 213.952 148.188 cv
214.327 148.188 214.702 148 215.014 147.75 cv
215.264 147.438 215.452 147.063 215.452 146.688 cv
cp
f
218.952 150.813 mo
218.952 150.438 218.764 150.063 218.514 149.75 cv
218.202 149.5 217.827 149.313 217.452 149.313 cv
217.077 149.313 216.702 149.5 216.389 149.75 cv
216.139 150.063 215.952 150.438 215.952 150.813 cv
215.952 151.188 216.139 151.563 216.389 151.875 cv
216.702 152.125 217.077 152.313 217.452 152.313 cv
217.827 152.313 218.202 152.125 218.514 151.875 cv
218.764 151.563 218.952 151.188 218.952 150.813 cv
cp
f
222.452 154.063 mo
222.452 153.688 222.264 153.313 222.014 153 cv
221.702 152.75 221.327 152.563 220.952 152.563 cv
220.577 152.563 220.202 152.75 219.889 153 cv
219.639 153.313 219.452 153.688 219.452 154.063 cv
219.452 154.438 219.639 154.813 219.889 155.125 cv
220.202 155.375 220.577 155.563 220.952 155.563 cv
221.327 155.563 221.702 155.375 222.014 155.125 cv
222.264 154.813 222.452 154.438 222.452 154.063 cv
cp
f
225.952 156.5 mo
225.952 156.125 225.764 155.75 225.514 155.438 cv
225.202 155.188 224.827 155 224.452 155 cv
224.077 155 223.702 155.188 223.389 155.438 cv
223.139 155.75 222.952 156.125 222.952 156.5 cv
222.952 156.875 223.139 157.25 223.389 157.563 cv
223.702 157.813 224.077 158 224.452 158 cv
224.827 158 225.202 157.813 225.514 157.563 cv
225.764 157.25 225.952 156.875 225.952 156.5 cv
cp
f
229.452 159.125 mo
229.452 158.75 229.264 158.375 229.014 158.063 cv
228.702 157.813 228.327 157.625 227.952 157.625 cv
227.577 157.625 227.202 157.813 226.889 158.063 cv
226.639 158.375 226.452 158.75 226.452 159.125 cv
226.452 159.5 226.639 159.875 226.889 160.188 cv
227.202 160.438 227.577 160.625 227.952 160.625 cv
228.327 160.625 228.702 160.438 229.014 160.188 cv
229.264 159.875 229.452 159.5 229.452 159.125 cv
cp
f
233.014 160.813 mo
233.014 160.438 232.827 160.063 232.577 159.75 cv
232.264 159.5 231.889 159.313 231.514 159.313 cv
231.139 159.313 230.764 159.5 230.452 159.75 cv
230.202 160.063 230.014 160.438 230.014 160.813 cv
230.014 161.188 230.202 161.563 230.452 161.875 cv
230.764 162.125 231.139 162.313 231.514 162.313 cv
231.889 162.313 232.264 162.125 232.577 161.875 cv
232.827 161.563 233.014 161.188 233.014 160.813 cv
cp
f
236.514 163.063 mo
236.514 162.688 236.327 162.313 236.077 162 cv
235.764 161.75 235.389 161.563 235.014 161.563 cv
234.639 161.563 234.264 161.75 233.952 162 cv
233.702 162.313 233.514 162.688 233.514 163.063 cv
233.514 163.438 233.702 163.813 233.952 164.125 cv
234.264 164.375 234.639 164.563 235.014 164.563 cv
235.389 164.563 235.764 164.375 236.077 164.125 cv
236.327 163.813 236.514 163.438 236.514 163.063 cv
cp
f
240.014 164.313 mo
240.014 163.938 239.827 163.563 239.577 163.25 cv
239.264 163 238.889 162.813 238.514 162.813 cv
238.139 162.813 237.764 163 237.452 163.25 cv
237.202 163.563 237.014 163.938 237.014 164.313 cv
237.014 164.688 237.202 165.063 237.452 165.375 cv
237.764 165.625 238.139 165.813 238.514 165.813 cv
238.889 165.813 239.264 165.625 239.577 165.375 cv
239.827 165.063 240.014 164.688 240.014 164.313 cv
cp
f
243.514 165.313 mo
243.514 164.938 243.327 164.563 243.077 164.25 cv
242.764 164 242.389 163.813 242.014 163.813 cv
241.639 163.813 241.264 164 240.952 164.25 cv
240.702 164.563 240.514 164.938 240.514 165.313 cv
240.514 165.688 240.702 166.063 240.952 166.375 cv
241.264 166.625 241.639 166.813 242.014 166.813 cv
242.389 166.813 242.764 166.625 243.077 166.375 cv
243.327 166.063 243.514 165.688 243.514 165.313 cv
cp
f
247.014 166.563 mo
247.014 166.188 246.827 165.813 246.577 165.5 cv
246.264 165.25 245.889 165.063 245.514 165.063 cv
245.139 165.063 244.764 165.25 244.452 165.5 cv
244.202 165.813 244.014 166.188 244.014 166.563 cv
244.014 166.938 244.202 167.313 244.452 167.625 cv
244.764 167.875 245.139 168.063 245.514 168.063 cv
245.889 168.063 246.264 167.875 246.577 167.625 cv
246.827 167.313 247.014 166.938 247.014 166.563 cv
cp
f
250.514 167.75 mo
250.514 167.375 250.327 167 250.077 166.688 cv
249.764 166.438 249.389 166.25 249.014 166.25 cv
248.639 166.25 248.264 166.438 247.952 166.688 cv
247.702 167 247.514 167.375 247.514 167.75 cv
247.514 168.125 247.702 168.5 247.952 168.813 cv
248.264 169.063 248.639 169.25 249.014 169.25 cv
249.389 169.25 249.764 169.063 250.077 168.813 cv
250.327 168.5 250.514 168.125 250.514 167.75 cv
cp
f
254.014 168 mo
254.014 167.625 253.827 167.25 253.577 166.938 cv
253.264 166.688 252.889 166.5 252.514 166.5 cv
252.139 166.5 251.764 166.688 251.452 166.938 cv
251.202 167.25 251.014 167.625 251.014 168 cv
251.014 168.375 251.202 168.75 251.452 169.063 cv
251.764 169.313 252.139 169.5 252.514 169.5 cv
252.889 169.5 253.264 169.313 253.577 169.063 cv
253.827 168.75 254.014 168.375 254.014 168 cv
cp
f
257.577 169.438 mo
257.577 169.063 257.389 168.688 257.139 168.375 cv
256.827 168.125 256.452 167.938 256.077 167.938 cv
255.702 167.938 255.327 168.125 255.014 168.375 cv
254.764 168.688 254.577 169.063 254.577 169.438 cv
254.577 169.813 254.764 170.188 255.014 170.5 cv
255.327 170.75 255.702 170.938 256.077 170.938 cv
256.452 170.938 256.827 170.75 257.139 170.5 cv
257.389 170.188 257.577 169.813 257.577 169.438 cv
cp
f
261.077 169.688 mo
261.077 169.313 260.889 168.938 260.639 168.625 cv
260.327 168.375 259.952 168.188 259.577 168.188 cv
259.202 168.188 258.827 168.375 258.514 168.625 cv
258.264 168.938 258.077 169.313 258.077 169.688 cv
258.077 170.063 258.264 170.438 258.514 170.75 cv
258.827 171 259.202 171.188 259.577 171.188 cv
259.952 171.188 260.327 171 260.639 170.75 cv
260.889 170.438 261.077 170.063 261.077 169.688 cv
cp
f
264.577 170.438 mo
264.577 170.063 264.389 169.688 264.139 169.375 cv
263.827 169.125 263.452 168.938 263.077 168.938 cv
262.702 168.938 262.327 169.125 262.014 169.375 cv
261.764 169.688 261.577 170.063 261.577 170.438 cv
261.577 170.813 261.764 171.188 262.014 171.5 cv
262.327 171.75 262.702 171.938 263.077 171.938 cv
263.452 171.938 263.827 171.75 264.139 171.5 cv
264.389 171.188 264.577 170.813 264.577 170.438 cv
cp
f
268.077 170.688 mo
268.077 170.313 267.889 169.938 267.639 169.625 cv
267.327 169.375 266.952 169.188 266.577 169.188 cv
266.202 169.188 265.827 169.375 265.514 169.625 cv
265.264 169.938 265.077 170.313 265.077 170.688 cv
265.077 171.063 265.264 171.438 265.514 171.75 cv
265.827 172 266.202 172.188 266.577 172.188 cv
266.952 172.188 267.327 172 267.639 171.75 cv
267.889 171.438 268.077 171.063 268.077 170.688 cv
cp
f
271.577 171.313 mo
271.577 170.938 271.389 170.563 271.139 170.25 cv
270.827 170 270.452 169.813 270.077 169.813 cv
269.702 169.813 269.327 170 269.014 170.25 cv
268.764 170.563 268.577 170.938 268.577 171.313 cv
268.577 171.688 268.764 172.063 269.014 172.375 cv
269.327 172.625 269.702 172.813 270.077 172.813 cv
270.452 172.813 270.827 172.625 271.139 172.375 cv
271.389 172.063 271.577 171.688 271.577 171.313 cv
cp
f
275.077 171.5 mo
275.077 171.125 274.889 170.75 274.639 170.438 cv
274.327 170.188 273.952 170 273.577 170 cv
273.202 170 272.827 170.188 272.514 170.438 cv
272.264 170.75 272.077 171.125 272.077 171.5 cv
272.077 171.875 272.264 172.25 272.514 172.563 cv
272.827 172.813 273.202 173 273.577 173 cv
273.952 173 274.327 172.813 274.639 172.563 cv
274.889 172.25 275.077 171.875 275.077 171.5 cv
cp
f
278.577 172.25 mo
278.577 171.875 278.389 171.5 278.139 171.188 cv
277.827 170.938 277.452 170.75 277.077 170.75 cv
276.702 170.75 276.327 170.938 276.014 171.188 cv
275.764 171.5 275.577 171.875 275.577 172.25 cv
275.577 172.625 275.764 173 276.014 173.313 cv
276.327 173.563 276.702 173.75 277.077 173.75 cv
277.452 173.75 277.827 173.563 278.139 173.313 cv
278.389 173 278.577 172.625 278.577 172.25 cv
cp
f
282.139 172.375 mo
282.139 172 281.952 171.625 281.702 171.313 cv
281.389 171.063 281.014 170.875 280.639 170.875 cv
280.264 170.875 279.889 171.063 279.577 171.313 cv
279.327 171.625 279.139 172 279.139 172.375 cv
279.139 172.75 279.327 173.125 279.577 173.438 cv
279.889 173.688 280.264 173.875 280.639 173.875 cv
281.014 173.875 281.389 173.688 281.702 173.438 cv
281.952 173.125 282.139 172.75 282.139 172.375 cv
cp
f
285.639 173.125 mo
285.639 172.75 285.452 172.375 285.202 172.063 cv
284.889 171.813 284.514 171.625 284.139 171.625 cv
283.764 171.625 283.389 171.813 283.077 172.063 cv
282.827 172.375 282.639 172.75 282.639 173.125 cv
282.639 173.5 282.827 173.875 283.077 174.188 cv
283.389 174.438 283.764 174.625 284.139 174.625 cv
284.514 174.625 284.889 174.438 285.202 174.188 cv
285.452 173.875 285.639 173.5 285.639 173.125 cv
cp
f
289.139 173.125 mo
289.139 172.75 288.952 172.375 288.702 172.063 cv
288.389 171.813 288.014 171.625 287.639 171.625 cv
287.264 171.625 286.889 171.813 286.577 172.063 cv
286.327 172.375 286.139 172.75 286.139 173.125 cv
286.139 173.5 286.327 173.875 286.577 174.188 cv
286.889 174.438 287.264 174.625 287.639 174.625 cv
288.014 174.625 288.389 174.438 288.702 174.188 cv
288.952 173.875 289.139 173.5 289.139 173.125 cv
cp
f
292.639 173.188 mo
292.639 172.813 292.452 172.438 292.202 172.125 cv
291.889 171.875 291.514 171.688 291.139 171.688 cv
290.764 171.688 290.389 171.875 290.077 172.125 cv
289.827 172.438 289.639 172.813 289.639 173.188 cv
289.639 173.563 289.827 173.938 290.077 174.25 cv
290.389 174.5 290.764 174.688 291.139 174.688 cv
291.514 174.688 291.889 174.5 292.202 174.25 cv
292.452 173.938 292.639 173.563 292.639 173.188 cv
cp
f
296.139 173.813 mo
296.139 173.438 295.952 173.063 295.702 172.75 cv
295.389 172.5 295.014 172.313 294.639 172.313 cv
294.264 172.313 293.889 172.5 293.577 172.75 cv
293.327 173.063 293.139 173.438 293.139 173.813 cv
293.139 174.188 293.327 174.563 293.577 174.875 cv
293.889 175.125 294.264 175.313 294.639 175.313 cv
295.014 175.313 295.389 175.125 295.702 174.875 cv
295.952 174.563 296.139 174.188 296.139 173.813 cv
cp
f
299.639 173.813 mo
299.639 173.438 299.452 173.063 299.202 172.75 cv
298.889 172.5 298.514 172.313 298.139 172.313 cv
297.764 172.313 297.389 172.5 297.077 172.75 cv
296.827 173.063 296.639 173.438 296.639 173.813 cv
296.639 174.188 296.827 174.563 297.077 174.875 cv
297.389 175.125 297.764 175.313 298.139 175.313 cv
298.514 175.313 298.889 175.125 299.202 174.875 cv
299.452 174.563 299.639 174.188 299.639 173.813 cv
cp
f
303.139 174.313 mo
303.139 173.938 302.952 173.563 302.702 173.25 cv
302.389 173 302.014 172.813 301.639 172.813 cv
301.264 172.813 300.889 173 300.577 173.25 cv
300.327 173.563 300.139 173.938 300.139 174.313 cv
300.139 174.688 300.327 175.063 300.577 175.375 cv
300.889 175.625 301.264 175.813 301.639 175.813 cv
302.014 175.813 302.389 175.625 302.702 175.375 cv
302.952 175.063 303.139 174.688 303.139 174.313 cv
cp
f
306.702 174.438 mo
306.702 174.063 306.514 173.688 306.264 173.375 cv
305.952 173.125 305.577 172.938 305.202 172.938 cv
304.827 172.938 304.452 173.125 304.139 173.375 cv
303.889 173.688 303.702 174.063 303.702 174.438 cv
303.702 174.813 303.889 175.188 304.139 175.5 cv
304.452 175.75 304.827 175.938 305.202 175.938 cv
305.577 175.938 305.952 175.75 306.264 175.5 cv
306.514 175.188 306.702 174.813 306.702 174.438 cv
cp
f
310.202 174.75 mo
310.202 174.375 310.014 174 309.764 173.688 cv
309.452 173.438 309.077 173.25 308.702 173.25 cv
308.327 173.25 307.952 173.438 307.639 173.688 cv
307.389 174 307.202 174.375 307.202 174.75 cv
307.202 175.125 307.389 175.5 307.639 175.813 cv
307.952 176.063 308.327 176.25 308.702 176.25 cv
309.077 176.25 309.452 176.063 309.764 175.813 cv
310.014 175.5 310.202 175.125 310.202 174.75 cv
cp
f
gsave
18.135 0 mo
18.135 194.004 li
318.141 194.004 li
318.141 0 li
18.135 0 li
clp
317.916 0.216 mo
317.916 181.098 li
318.105 181.098 li
318.105 0.216 li
317.916 0.216 li
25.542 0.405 mo
318.105 0.405 li
318.105 0.216 li
25.542 0.216 li
25.542 0.405 li
25.731 181.098 mo
25.731 0.216 li
25.542 0.216 li
25.542 181.098 li
25.731 181.098 li
318.105 180.909 mo
25.542 180.909 li
25.542 181.098 li
318.105 181.098 li
318.105 180.909 li
0 0 0 1 cmyk
f
grestore
87.7329 181 mo
87.7329 177.563 li
87.5454 177.563 li
87.5454 181 li
cp
73.6704 181 mo
73.6704 178.938 li
73.4829 178.938 li
73.4829 181 li
cp
59.6704 181 mo
59.6704 178.938 li
59.4829 178.938 li
59.4829 181 li
cp
45.6079 181 mo
45.6079 178.938 li
45.4204 178.938 li
45.4204 181 li
cp
31.6079 181 mo
31.6079 178.938 li
31.4204 178.938 li
31.4204 181 li
cp
0 0 0 1 cmyk
f
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 53 /five putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-/five <1C60D8A8C9B7A73D986C0D7DE9D329253DCB6E971CF9F86B9AEBF9128F879E3BA076A7524F8AC6EF0948A0BD36A1BBAD3176809EA5D8C10BC04F27D1FCF8D9BA3577509C082FF1EE49DF22B08F8B21F3A6C3932A3BC82C6C594431B4032E2BEF80E15787B3E427A047FD8FD191291F42BAC74588B21DCB1EB3232C29BA67B72B9A00CCBC571F0227C6EF50964CF91F1B0EC573A04AE3E4DF9447B77BD2A0A959F534BEC79AECEF51C27F8D677FD06B99742B747A695088E88EBCC4A6BCCC7402ABFDFE9926161D96> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBSW+Times-Roman /Times-Roman findfont ct_VMDictPut/ZWYBSW+Times-Roman*1 [48{/.notdef}rp /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]ZWYBSW+Times-Roman nfZWYBSW+Times-Roman*1 [9 0 0 -9 0 0 ]msf81.4751 192 mo(150)[4.5 4.5 0 ]xsh157.92 181 mo
157.92 177.563 li
157.733 177.563 li
157.733 181 li
cp
143.858 181 mo
143.858 178.938 li
143.67 178.938 li
143.67 181 li
cp
129.858 181 mo
129.858 178.938 li
129.67 178.938 li
129.67 181 li
cp
115.795 181 mo
115.795 178.938 li
115.608 178.938 li
115.608 181 li
cp
101.733 181 mo
101.733 178.938 li
101.545 178.938 li
101.545 181 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSW+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7A73DB6D2877672A15D933475028E1A563F35D9B429BC044364BBEA6C8D8E288B5629F6BF21219495DF799C22E6D194E7EF19D2BF50638A5DFD525E61CAA756DFB58BC6CF02B70355716B1567E587BDF24EE1CD60FDA306A5E8E3EC9A065FDF865555F45DE4B3A9666958B7C5B64C412BD6705A27F81BA359AA5385B74802E199214ED2C08D85C8D9515B8A71A37E696B11B788D46272326187B79B809C5ABF82FEBD4C4DE257125A17BA43> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSW+Times-Roman /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/ZWYBSW+Times-Roman*1 [48{/.notdef}rp /zero /one 3{/.notdef}rp /five /six 201{/.notdef}rp]ZWYBSW+Times-Roman nfZWYBSW+Times-Roman*1 [9 0 0 -9 0 0 ]msf151.647 192 mo(160)[4.5 4.5 0 ]xsh228.042 180.999 mo
228.042 177.561 li
227.862 177.561 li
227.862 180.999 li
228.042 180.999 li
214.047 180.999 mo
214.047 178.938 li
213.858 178.938 li
213.858 180.999 li
214.047 180.999 li
199.98 180.999 mo
199.98 178.938 li
199.791 178.938 li
199.791 180.999 li
199.98 180.999 li
185.985 180.999 mo
185.985 178.938 li
185.796 178.938 li
185.796 180.999 li
185.985 180.999 li
171.918 180.999 mo
171.918 178.938 li
171.729 178.938 li
171.729 180.999 li
171.918 180.999 li
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSW+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B7A73D94A9F40BC631635D93782351ED8A5F0B041154B50ADFD67B52AFA0970AEE10CFF4587FA64B7C1AB4D8B074E00A1BB2BDDE2ECD9CC66A> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSW+Times-Roman /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/ZWYBSW+Times-Roman*1 [48{/.notdef}rp /zero /one 3{/.notdef}rp /five /six /seven 200{/.notdef}rp]ZWYBSW+Times-Roman nfZWYBSW+Times-Roman*1 [9 0 0 -9 0 0 ]msf221.827 192 mo(170)[4.5 4.5 0 ]xsh298.233 181 mo
298.233 177.563 li
298.045 177.563 li
298.045 181 li
cp
284.233 181 mo
284.233 178.938 li
284.045 178.938 li
284.045 181 li
cp
270.17 181 mo
270.17 178.938 li
269.983 178.938 li
269.983 181 li
cp
256.17 181 mo
256.17 178.938 li
255.983 178.938 li
255.983 181 li
cp
242.108 181 mo
242.108 178.938 li
241.92 178.938 li
241.92 181 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSW+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7A73DB9AA6386F0D433AA59FB601CE68D9D6220D80F865EFA1568339E25269162989F3B16CF5E1B85465E9B09AD3E1F38EB0BC3CC5B97FD7D595D378E5AF532DAC1C0173C6C74DAC1A5EFEB2094038777E094111D458CECDBEE2BFAFA1B194747D5AC182EDAECA7759C2CF7DA7B573AFBC7EB901C25328CA8529A5AF9870597DA9D6CE71ED45E3423137009ACC2E00FA606E5775C8BEB1D188095A69B5C3B51980741130E91409210303836D6B9BCD44F7FE0CC1ED555E839C2D5D70041FF279A3E977285D9F41DC64AB105D99B2CC098F9CEE3C23260EF9612DAD441A57B770C0516F587622E5D85261682E95C452BF079> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSW+Times-Roman /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/ZWYBSW+Times-Roman*1 [48{/.notdef}rp /zero /one 3{/.notdef}rp /five /six /seven /eight 199{/.notdef}rp]ZWYBSW+Times-Roman nfZWYBSW+Times-Roman*1 [9 0 0 -9 0 0 ]msf291.999 192 mo(180)[4.5 4.5 0 ]xsh25.6392 178.719 mo
29.0767 178.719 li
29.0767 178.531 li
25.6392 178.531 li
cp
312.295 181 mo
312.295 178.938 li
312.108 178.938 li
312.108 181 li
cp
f
ZWYBSW+Times-Roman*1 [9 0 0 -9 0 0 ]msf18.1392 181.594 mo(0)sh25.6392 135.781 mo
29.0767 135.781 li
29.0767 135.594 li
25.6392 135.594 li
cp
25.6392 146.531 mo
27.7017 146.531 li
27.7017 146.344 li
25.6392 146.344 li
cp
25.6392 157.219 mo
27.7017 157.219 li
27.7017 157.031 li
25.6392 157.031 li
cp
25.6392 167.969 mo
27.7017 167.969 li
27.7017 167.781 li
25.6392 167.781 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSW+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSW+Times-Roman /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/ZWYBSW+Times-Roman*1 [48{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /six /seven /eight 199{/.notdef}rp]ZWYBSW+Times-Roman nfZWYBSW+Times-Roman*1 [9 0 0 -9 0 0 ]msf18.1392 138.695 mo(2)sh25.6392 92.9063 mo
29.0767 92.9063 li
29.0767 92.7188 li
25.6392 92.7188 li
cp
25.6392 103.594 mo
27.7017 103.594 li
27.7017 103.406 li
25.6392 103.406 li
cp
25.6392 114.344 mo
27.7017 114.344 li
27.7017 114.156 li
25.6392 114.156 li
cp
25.6392 125.094 mo
27.7017 125.094 li
27.7017 124.906 li
25.6392 124.906 li
cp
f
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSW+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSW+Times-Roman /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/ZWYBSW+Times-Roman*1 [48{/.notdef}rp /zero /one /two /.notdef /four /five /six /seven /eight 199{/.notdef}rp]ZWYBSW+Times-Roman nfZWYBSW+Times-Roman*1 [9 0 0 -9 0 0 ]msf18.1392 95.7969 mo(4)sh25.6392 49.9688 mo
29.0767 49.9688 li
29.0767 49.7813 li
25.6392 49.7813 li
cp
25.6392 60.7188 mo
27.7017 60.7188 li
27.7017 60.5313 li
25.6392 60.5313 li
cp
25.6392 71.4063 mo
27.7017 71.4063 li
27.7017 71.2188 li
25.6392 71.2188 li
cp
25.6392 82.1563 mo
27.7017 82.1563 li
27.7017 81.9688 li
25.6392 81.9688 li
cp
f
ZWYBSW+Times-Roman*1 [9 0 0 -9 0 0 ]msf18.1392 52.8906 mo(6)sh25.6392 7.09375 mo
29.0767 7.09375 li
29.0767 6.90625 li
25.6392 6.90625 li
cp
25.6392 17.7813 mo
27.7017 17.7813 li
27.7017 17.5938 li
25.6392 17.5938 li
cp
25.6392 28.5313 mo
27.7017 28.5313 li
27.7017 28.3438 li
25.6392 28.3438 li
cp
25.6392 39.2813 mo
27.7017 39.2813 li
27.7017 39.0938 li
25.6392 39.0938 li
cp
f
ZWYBSW+Times-Roman*1 [9 0 0 -9 0 0 ]msf18.1392 9.98438 mo(8)shgsave
18.135 0 mo
18.135 194.004 li
318.141 194.004 li
318.141 0 li
18.135 0 li
clp
318.014 6.90625 mo
314.577 6.90625 li
314.577 7.09375 li
318.014 7.09375 li
cp
318.014 17.5938 mo
315.952 17.5938 li
315.952 17.7813 li
318.014 17.7813 li
cp
318.014 28.3438 mo
315.952 28.3438 li
315.952 28.5313 li
318.014 28.5313 li
cp
318.014 39.0938 mo
315.952 39.0938 li
315.952 39.2813 li
318.014 39.2813 li
cp
318.014 49.7813 mo
314.577 49.7813 li
314.577 49.9688 li
318.014 49.9688 li
cp
318.014 60.5313 mo
315.952 60.5313 li
315.952 60.7188 li
318.014 60.7188 li
cp
318.014 71.2188 mo
315.952 71.2188 li
315.952 71.4063 li
318.014 71.4063 li
cp
318.014 81.9688 mo
315.952 81.9688 li
315.952 82.1563 li
318.014 82.1563 li
cp
318.014 92.7188 mo
314.577 92.7188 li
314.577 92.9063 li
318.014 92.9063 li
cp
318.014 103.406 mo
315.952 103.406 li
315.952 103.594 li
318.014 103.594 li
cp
318.014 114.156 mo
315.952 114.156 li
315.952 114.344 li
318.014 114.344 li
cp
318.014 124.906 mo
315.952 124.906 li
315.952 125.094 li
318.014 125.094 li
cp
318.014 135.594 mo
314.577 135.594 li
314.577 135.781 li
318.014 135.781 li
cp
318.014 146.344 mo
315.952 146.344 li
315.952 146.531 li
318.014 146.531 li
cp
318.014 157.031 mo
315.952 157.031 li
315.952 157.219 li
318.014 157.219 li
cp
318.014 167.781 mo
315.952 167.781 li
315.952 167.969 li
318.014 167.969 li
cp
318.014 178.531 mo
314.577 178.531 li
314.577 178.719 li
318.014 178.719 li
cp
312.108 0.3125 mo
312.108 2.375 li
312.295 2.375 li
312.295 0.3125 li
cp
298.045 0.3125 mo
298.045 3.75 li
298.233 3.75 li
298.233 0.3125 li
cp
284.045 0.3125 mo
284.045 2.375 li
284.233 2.375 li
284.233 0.3125 li
cp
269.983 0.3125 mo
269.983 2.375 li
270.17 2.375 li
270.17 0.3125 li
cp
255.983 0.3125 mo
255.983 2.375 li
256.17 2.375 li
256.17 0.3125 li
cp
241.92 0.3125 mo
241.92 2.375 li
242.108 2.375 li
242.108 0.3125 li
cp
227.858 0.3125 mo
227.858 3.75 li
228.045 3.75 li
228.045 0.3125 li
cp
213.858 0.3125 mo
213.858 2.375 li
214.045 2.375 li
214.045 0.3125 li
cp
199.795 0.3125 mo
199.795 2.375 li
199.983 2.375 li
199.983 0.3125 li
cp
185.795 0.3125 mo
185.795 2.375 li
185.983 2.375 li
185.983 0.3125 li
cp
171.733 0.3125 mo
171.733 2.375 li
171.92 2.375 li
171.92 0.3125 li
cp
157.733 0.3125 mo
157.733 3.75 li
157.92 3.75 li
157.92 0.3125 li
cp
143.67 0.3125 mo
143.67 2.375 li
143.858 2.375 li
143.858 0.3125 li
cp
129.67 0.3125 mo
129.67 2.375 li
129.858 2.375 li
129.858 0.3125 li
cp
115.608 0.3125 mo
115.608 2.375 li
115.795 2.375 li
115.795 0.3125 li
cp
101.545 0.3125 mo
101.545 2.375 li
101.733 2.375 li
101.733 0.3125 li
cp
87.5454 0.3125 mo
87.5454 3.75 li
87.7329 3.75 li
87.7329 0.3125 li
cp
73.4829 0.3125 mo
73.4829 2.375 li
73.6704 2.375 li
73.6704 0.3125 li
cp
59.4829 0.3125 mo
59.4829 2.375 li
59.6704 2.375 li
59.6704 0.3125 li
cp
45.4204 0.3125 mo
45.4204 2.375 li
45.6079 2.375 li
45.6079 0.3125 li
cp
31.4204 0.3125 mo
31.4204 2.375 li
31.6079 2.375 li
31.6079 0.3125 li
cp
f
grestore
243.431 27.9175 mo
243.431 27.4487 243.197 26.98 242.884 26.5894 cv
242.494 26.2769 242.025 26.0425 241.556 26.0425 cv
241.087 26.0425 240.619 26.2769 240.228 26.5894 cv
239.916 26.98 239.681 27.4487 239.681 27.9175 cv
239.681 28.3862 239.916 28.855 240.228 29.2456 cv
240.619 29.5581 241.087 29.7925 241.556 29.7925 cv
242.025 29.7925 242.494 29.5581 242.884 29.2456 cv
243.197 28.855 243.431 28.3862 243.431 27.9175 cv
cp
0 0.992157 1 0 cmyk
f
239.681 38.2095 mo
244.681 38.2095 li
244.681 37.2095 li
239.681 37.2095 li
0.882353 0.768627 0 0 cmyk
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TimesNewRomanPSMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 68 /D putdup 70 /F putdup 76 /L putdup 97 /a putdup 101 /e putdup 105 /i putdup 110 /n putdup 111 /o putdup 114 /r putdup 116 /t putdup 122 /z putdef/FontBBox {-568 -307 2000 1007} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings13 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB222483BD74F8B> |-/space <1C60D8A8C9B8707C25> |-/D <1C60D8A8C9B6079F62679EB6BE171B70F78590F81AB62F69F1BD2EFC86EAE566847745E296D0CF61872DA4D8690C62AB23EE8E1DEB0EAD4BD93A2494CA759A81248BAF55E0D2E2E5FE71261287BF00F8CDF501793AB3272F80F7AE3E407CA730AC3648B3AC2D58C8D1FD60CD7DB1F886A79A4080D8870256B6E127906D500379950803F077453028FB6169> |-/F <1C60D8A8C9B7EF322BE6235043C5A7A6ECCDDDC390BE41D3E01CEDAA91CB335118BB7C10CD87A1A789356A0826D033ECDD0352DC64AE55B383C11F3EB18A6F42CD78A260CB051779A3B4D92350DD65D27B671C1609DC36FBFF44C40F44FB014C0462CFF40EA9650CDFB895B99B69FA8BD3EB8152DF452581818551FCC7745E9E79F62FD5E1668E4EFD8B2F33AB5D5ED30AB06AFD78EF98B1A68AA26FC8B4D7DDC1356637FA048F199EDF19A428> |-/L <1C60D8A8C9B7D8BE1910D0EBEC744B6638E6ED4C6FC0AF39F5B8B10BFA09270956A997B577BBD8E3EC179B174ED931484CCFFCF819D4978AE37145A7A3C221DF78A5AAD08DFCBE2638BCFCF6B4930FFFAD1163890B85697ECB905727AF12A0E5C1679B01834AD8D0C4111313E17E548887938F4F64DA1DB39BD7CD68748B847D2C24AD687E0CDB56> |-/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272EF1EF1464C3F0D45D7CBB8749AF571E09> |-/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984A59E1CFFFD06EA629758085868D3F5F7204292> |-/i <1C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE365B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A640085090E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCBCB8CA3E9F85837FAC6> |-/n <1C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7BC81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD9D4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494DF60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B280026130687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F2E277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6A0027198438FE663C2EACF82CEB86F7C727594> |-/o <1C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD4416250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF996A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA436702294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68D9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |-/r <1C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2CE6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E983E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B53A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA455AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D8C360275B503E4954E912CD342> |-/t <1C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED29448713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC43DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E798B36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |-/z <1C60D8A8C9B77FE2C18484DB453227C527C164B5A1471C4657A5A14A46A1D3A0BD899640627BE2A7B9DB921E26CD53975830B919737E4B957FDCE605D77DC327B798A39B69F36340D55162C5C44140DACBE16FE7873A74F99AB90B7497> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBSX+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut/ZWYBSX+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 35{/.notdef}rp /D /.notdef /F 5{/.notdef}rp /L 20{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /.notdef /t 5{/.notdef}rp /z 133{/.notdef}rp]ZWYBSX+TimesNewRomanPSMT nfZWYBSX+TimesNewRomanPSMT*1 [7.5 0 0 -7.5 0 0 ]msf251.137 29.3745 mo(Data)[5.41602 3.3291 2.08398 0 ]xsh251.554 39.3745 mo(Lorentzian Fit)[4.58105 3.75 2.49805 3.3291 3.75 2.08301 3.3291 2.08398 3.32813 3.75 1.875 4.17188 2.08398 0 ]xsh300.306 43.5415 mo
300.306 43.2915 li
235.556 43.2915 li
235.556 21.7085 li
300.056 21.7085 li
300.056 43.5415 li
300.306 43.5415 li
300.306 43.2915 li
300.306 43.5415 li
300.556 43.5415 li
300.556 21.2085 li
235.056 21.2085 li
235.056 43.7915 li
300.556 43.7915 li
300.556 43.5415 li
300.306 43.5415 li
cp
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSX+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B81F2C3AC09B674C4ECE2BEF4D70AD3508D915EA9AE12419376F6EEF231ECE8179CA4531F29291ACACE060AEF98AD6F2FFF2BEA533946FFA1C8BC3953D72A31BB8ABD9782D71B2146F964D99646263E2D414F84FA049D36B9B13B7F6C8AA7A4A5EB0> |-/parenright <1C60D8A8C9B81F2C3CA029BC286E27661FD7F18B990CFF4A0AF58404A2F35E11D14FBA406192D392AD203A879E34B8FA3132863211808E5BD63BDAA607B8E04E23E92C61AAA8B57E5E7609689020D20EB927A1EC6CC0BC06B540A016D558248DC4A3E8183F5F> |-/three <1C60D8A8C9B7A73D83638F79AE86E17D4CE334FAA90E146D21CDA0FEB71815E9499D6C6A6E581E78F34038D792771470EBF894DABD777E9B4FDE68E7E1544BCF1EFB2DCE59357B716B4D2ADF3EAC3A9FF8BD07EC79AF5536B9B74185F8F7489AD909079119E88D2BB755D6F6AC02C01BDFADB347EC55DAC49C8BB047661CC7AAA3BDC1DB8E01EC56137B53ED31B24F4502353853D049BB0515CA4217D33D10484933F30AD1EAA43CFDF00AFA5462EE9B1772CE60A3392B8D9C1A3598CF2273E36A1FF3A58B2E24B1EACE5E34650257902678998DAAFF235764CCCA143A> |-/five <1C60D8A8C9B7A73DB97C1FD4849B14157B765BEEE66B9438731A1E1DBF6D904609867EBF49E3E19DC6BA786F7382AB36C8CFA3690DF4F8E7A258691DFDD71792965BBA1DCE407BE309901C1513A762BED3C73A852D4EDA1BE20A2B364C59E2224D36D9C8BEE5DE8D6C54C49D0F66DB7448A8FCE0E63D5DEE7BBBA026A808CDA9AD5556005639017FF42B963FB833B4B64B6445B350600BDCDD563F> |-/eight <1C60D8A8C9B7A73DAB2BA6B835CAFB4C9A41096F555C470FE6294A707AE711C017C95446B200870C2B6A47FB931BCEBEB5BBC6B53605850C75701306FD83F9DC906687C2B3A2C9C0DB9DB68E95D3478DEA01153491C8534F5AD899980F04C195BFB522EDEF282420AA1F12E08397ECA941D5934294BD451B3952E6229D3E7987DD36FC8E43559904E0205D3416EDD1402AB05184D2018B2C7B816330FD0C2740A24C74F80E34F93317BBB1D6B8C4D916C15B7FF1D533D7762324A1017022A27246D93B9768262BFCC673CAD6781894C98679A5889F9338F377D1995AEDF5695FBA7A65628522691535557B2045419DD63F87D7A64B6A962B> |-/equal <1C60D8A8C9B7E7C1C5666C28B48CD4A694178AF152D7001F5F174D4D8F120B3533D4> |-/H <1C60D8A8C9B6079F62C8472A58E49E4C65298F7DBB13584B0C608B103B8F2B0C72AF215D43C457FE4678B9114F992A1CA0DD95AD962EE67821EBE89C76AF7B7C203022FE3C67E29F7C9AA5921E4D15A2645D93C73845A47B6C4F855F057FBA3B47AC2707354E73F37A88912B11BC586C19F99285C7E09F7C6AE400A135AD2578B2C1702C267512A0254A355FAF242A3E032C2D5773AA8E4D90998616B06DE2126832E624AA95B6CEA6DE0CF980ABC5058497B243E4F1F614D2E3330AC509CE2BF6F280235C57C7347C7DBE389D9DA8C428E4F439ED717BD43889835C90DE66BDF27965E2CAF6D3F8A236> |-/R <1C60D8A8C9B64EDFFA947759DE5E4889D88CE18F8690AE99A205DDE2B03BD344BEA750622B2A044F453846260E52F609F4B4A04ACF011765AB379E687DE6B09D424D16AEE22850269A8AC1FBA0CB1130D1AA42D9BB70A20B4BABF919356C91EFB227A4D8127EEE951F8E9564FE86E42C72F4A2240B89192C9DDC8F972B78271704B555EEFB95806003600DA3EB98ED971FD7E60CB5D9582744AABB3235A69A23AA1EE2086410DF2F65A7A8081CD915B1599189D60C09010312710E9ABC20DA4562DBD2C8D044173C4F2A486F4032CE9228CB8A1897A7C6FF5127> |-/S <1C60D8A8C9B7EF32243DA21D5631D8766D74D715030BA7905332A0CFAC49387DB487F69FE973B04989A1F5B84226AC0574A3AC8A92A20A67AC6A93CF1F8D7D050DEAAE8CF31B4A5FB504F0A0814E8C9022E7C7EFFB00070B62EB780F5BFD7AC1407620155D4B738E953EA9E8519FCB3635DEED6C82D9AB968BE1131CEEB6B072A246B745E2E47F0890CD4A4DD5061C30741173A5782D0F5AE0E645337518CA765AC1ABF9ABB13F9D6F8666630C08F558B2481DB7C0FEA08930FF35DE904907DBC222EF06C7863FAB3917A57116C566327E1977A70091D7628A2440BE3AB444BD01341C54F829742469A9B1CF3048C0B204E355F432B93B12EA12C84F80CE13D22435E5FCC1B5A000DE> |-/V <1C60D8A8C9B6079F6D060A2FEA7FC1569E0C14DA541DD91C00EBC3777BDE67491C2EA2113C451959D17D324EE8DBB436A0F30BF65402B93EFD32E095FD4A5BC20760673D3864924C1ACF695D3BD682644F24B440E38C1FF24D4CC16712B502AE5F89EDD273AE3A1DBED84FBFBD9B8AF85ACA697ED4658DA6CFEAC078154F7D9BB4AB2053> |-/W <1C60D8A8C9B5D6EF4CB383496C62617B8BD4FD4927BDE48152A6FF6216428592F5AFA3D18F24C53020F77DA565222C98E1F496EC6F2EE4EB22E43F233D8D98DB46EC3FFD79A8A395ED6571E9EE52C2D64F4FF1F26706DF3355CFC8C908EAA86ADD43E05EADD0D2F7D3DC578FF752F1D87291BBD55E577C117CD30BA3049BD39543241DD7DCD07617FA8A494E710E269F478E2E95BEC8AA7E710ACD0612E8921B3DAA59E93D8AA4276CD08DDB3A9B4D762893C74EF3108E125B72E190D045E652A0B8E8729169D251777FA84DD9EC852ADB1FB8FFEDFE199F837B9E862E992403453891> |-/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9AF110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D399924398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D6603C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83F23AED1F56FC130F21> |-/d <1C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D203065B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD3329A86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB857EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5CCB01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD104E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A618879362783A36815EA1CE5876FAC4F83CDFE1BD4A> |-/g <1C60D8A8C9B7A73DAC44F2C448ECAF253E44055AA4AFC4D4E618BBF7F60847F4AD57852D125F52503D138EEBB5C35DB7E6FF089D85EF3D59177D6853B7FF4DCA48A2C6450DAF6AE7485D918680B6246955433B7E96C0D52B86F6985D93AEA8FD99F7CE5A6EDF9F82F3DCD54C24AC7F5725E8D752728B16161496E9D02EA707BCC03E7CE1BDA2E3632B4A11707F59DF2FD8556EC51A6594DBA10EC63EB7A8585255CC0C8C8B32CD6316A41829AE725CE606F4A4FD4DA668556D79F4AC25BF9E697A5DB9F54B573E1EAA6D791100EAD10708C7E706E8CBDD596589510D4EA45E3CA12E8144CF2A4E025D5293F77BF25BA77276DF7C97999133B17612ABFFD70E77479B9C8ABBB3A51D3A6F6F66CA99610B1A23618D13E1A07B26D29ACFC8191E5B2829F3C990A5C474E53FC8B282F11A7FFA86D56BD2349AEC811B22D3002781921B9EDDEAA1B62C5F206266BA751F865F9A5F5AF517BC35F6F732012015D0BB42652388A219FCF002C2C0335D2D190C0C425C4FA28367480051E56A90DD46F1C707> |-/h <1C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435E027FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194A0134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2D9C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B585E2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED8E36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15E97FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C4483796F735A795EACD82F245D81FB43B5> |-/k <1C60D8A8C9B7A73DB907772911B7C2CEAC1D2074B2642ADEDFBA1679ED254D30D2D9A5BDAE41A6A7C0D78C5D75E9522858A70EEA458FC30CFDA879F9C1CE85600A63BE4554ACA119AD822CC5727738E5E5FAC782F5B6F69100B3F9A42C95FB8AA53FD907276C4A477291A36A9FD6B1870ACEAFC297FB6D4CC1F0091BA09524439681D5D4A76F017EDD23AA69786F58BFB619D5D45A35621B583AF1C763E994CD0C086A4B52B5442078A662891B62F92DB77130357FD06A533719ACFEBED1A5224DAFB3F947A309ADA52BC46E57C120F32619B58880DFB59CA5AB15473CEA89B7> |-/l <1C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C4304B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B6828D244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE5527D6441CE02F5A28D63A618F> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSX+TimesNewRomanPSMT /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 51 /three putdup 53 /five putdup 56 /eight putdup 61 /equal putdup 72 /H putdup 82 /R putdup 83 /S putdup 86 /V putdup 87 /W putdup 98 /b putdup 100 /d putdup 103 /g putdup 104 /h putdup 107 /k putdup 108 /l putpop%ADOEndSubsetFont
/ZWYBSX+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 9{/.notdef}rp /three /.notdef /five 2{/.notdef}rp /eight 4{/.notdef}rp /equal 6{/.notdef}rp /D /.notdef /F /.notdef /H 3{/.notdef}rp /L 5{/.notdef}rp /R /S 2{/.notdef}rp /V /W 9{/.notdef}rp /a /b /.notdef /d /e /.notdef /g /h /i /.notdef /k /l /.notdef /n /o 2{/.notdef}rp /r /.notdef /t 5{/.notdef}rp /z 133{/.notdef}rp]ZWYBSX+TimesNewRomanPSMT nfZWYBSX+TimesNewRomanPSMT*1 [5.38759e-10 -12 -12 -5.38759e-10 0 0 ]msf9.97266 117.167 mo(Signal \(V\))[-6.67383 -3.33398 -6 -6 -5.32617 -3.33398 -3 -3.99609 -8.66602 0 ]yshZWYBSX+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf141.473 213.667 mo(Width \(kHz\))[10.8457 3.33398 6 3.33398 6 3 3.99609 6 8.66602 5.32617 0 ]xsh56.6392 87 mo(Rb \(F=3 to F=3\))[8.00391 6 3 3.99609 6.67383 6.76758 6 3 3.33398 6 3 6.67383 6.76758 6 0 ]xshZWYBSX+TimesNewRomanPSMT*1 [6 0 0 -6 0 0 ]msf49.1392 81 mo(85)[3 0 ]xsh177.642 181.503 mo
164.142 181.503 li
164.142 181.098 li
177.642 181.098 li
177.642 181.503 li
177.642 180.909 mo
171.918 180.909 li
171.918 178.938 li
171.729 178.938 li
171.729 180.909 li
164.142 180.909 li
164.142 27.4406 li
164.421 25.983 li
164.538 25.587 li
164.556 25.524 li
164.628 25.047 li
164.808 24.21 li
164.808 24.201 li
165.114 22.581 li
165.536 20.7957 li
165.659 20.7294 165.777 20.6507 165.888 20.565 cv
166.14 20.25 166.329 19.872 166.329 19.503 cv
166.329 19.187 166.197 18.8712 166.006 18.5973 cv
166.167 17.937 li
166.545 16.569 li
167.238 13.914 li
167.283 13.698 li
167.346 13.572 li
167.409 13.455 li
167.544 12.762 li
167.638 12.4983 li
167.857 12.6157 168.09 12.69 168.327 12.69 cv
168.705 12.69 169.074 12.501 169.389 12.249 cv
169.641 11.934 169.83 11.565 169.83 11.187 cv
169.83 10.809 169.641 10.44 169.389 10.125 cv
169.172 9.9514 168.929 9.8077 168.676 9.73509 cv
168.759 9.477 li
168.93 9.081 li
168.948 9.045 li
168.984 8.946 li
169.038 8.865 li
169.092 8.784 li
169.218 8.469 li
169.281 8.37 li
169.317 8.316 li
169.389 8.172 li
169.56 7.893 li
169.578 7.857 li
169.587 7.839 li
169.596 7.83 li
169.713 7.713 li
169.839 7.47 li
169.848 7.461 li
169.911 7.398 li
170.037 7.272 li
170.1 7.209 li
170.162 7.14214 li
170.172 7.137 li
170.24 7.065 li
170.424 7.065 li
170.55 6.939 li
170.577 6.939 li
170.591 6.939 li
170.618 6.95291 li
170.622 6.957 li
170.73 7.074 li
170.874 7.146 li
171.054 7.335 li
171.063 7.344 li
171.126 7.47 li
171.236 7.57716 li
171.071 7.65445 170.913 7.75772 170.766 7.875 cv
170.514 8.19 170.325 8.559 170.325 8.937 cv
170.325 9.315 170.514 9.684 170.766 9.999 cv
171.081 10.251 171.45 10.44 171.828 10.44 cv
172.074 10.44 172.317 10.3595 172.543 10.2339 cv
172.872 11.061 li
172.917 11.241 li
172.944 11.349 li
173.07 11.601 li
173.169 11.997 li
173.178 12.033 li
173.547 13.131 li
173.592 13.383 li
173.61 13.473 li
173.754 13.833 li
173.922 14.3913 li
173.862 14.5493 173.826 14.7131 173.826 14.877 cv
173.826 15.246 174.015 15.624 174.267 15.939 cv
174.297 15.9638 174.328 15.9876 174.359 16.0109 cv
175.032 18.693 li
175.086 19.08 li
175.095 19.17 li
175.239 19.584 li
175.41 20.331 li
175.725 22.005 li
176.481 25.596 li
176.598 26.064 li
176.652 26.451 li
176.652 26.478 li
176.85 27.45 li
176.85 27.441 li
177.219 29.376 li
177.642 31.6031 li
177.642 180.909 li
177.642 21.3763 mo
177.372 19.926 li
177.174 19.089 li
177.165 19.044 li
177.057 18.711 li
177.003 18.36 li
176.994 18.306 li
176.4 15.928 li
176.647 15.6152 176.823 15.2418 176.823 14.877 cv
176.823 14.499 176.643 14.121 176.391 13.815 cv
176.19 13.6543 175.964 13.5195 175.73 13.4427 cv
175.662 13.212 li
175.644 13.167 li
175.536 12.897 li
175.491 12.681 li
175.482 12.618 li
175.104 11.466 li
174.987 11.007 li
174.96 10.899 li
174.834 10.647 li
174.798 10.503 li
174.78 10.44 li
174.402 9.486 li
174.285 9.099 li
174.249 8.946 li
174.105 8.748 li
174.087 8.685 li
174.078 8.649 li
173.754 7.866 li
173.718 7.794 li
173.493 7.425 li
173.484 7.398 li
173.385 7.245 li
173.349 7.182 li
173.331 7.146 li
173.142 6.831 li
173.097 6.741 li
173.034 6.615 li
172.962 6.471 li
172.773 6.282 li
172.71 6.156 li
172.467 5.922 li
172.287 5.733 li
172.224 5.67 li
172.161 5.607 li
172.053 5.499 li
177.642 5.499 li
177.642 21.3763 li
164.142 17.7973 mo
164.142 5.499 li
168.967 5.499 li
168.705 5.634 li
168.571 5.90854 li
168.498 5.976 li
168.435 6.039 li
168.309 6.165 li
168.192 6.282 li
168.066 6.534 li
168.057 6.543 li
167.94 6.66 li
167.823 6.894 li
167.661 7.173 li
167.634 7.209 li
167.589 7.308 li
167.499 7.443 li
167.436 7.533 li
167.31 7.848 li
167.247 7.947 li
167.166 8.055 li
167.076 8.334 li
166.905 8.73 li
166.887 8.766 li
166.86 8.865 li
166.806 8.946 li
166.734 9.054 li
166.383 10.107 li
166.221 10.539 li
166.122 10.737 li
166.068 10.836 li
165.996 11.151 li
165.609 12.231 li
165.501 12.798 li
165.429 12.924 li
165.375 13.05 li
165.285 13.464 li
164.61 16.056 li
164.232 17.433 li
164.142 17.7973 li
0.262745 0.207843 0.211765 0 cmyk
f
177.642 31.6031 mo
177.219 29.376 li
176.85 27.441 li
176.85 27.45 li
176.652 26.478 li
176.652 26.451 li
176.598 26.064 li
176.481 25.596 li
175.725 22.005 li
175.41 20.331 li
175.239 19.584 li
175.095 19.17 li
175.086 19.08 li
175.032 18.693 li
174.359 16.0109 li
174.647 16.2244 174.988 16.371 175.329 16.371 cv
175.698 16.371 176.076 16.191 176.391 15.939 cv
176.394 15.9354 176.397 15.9317 176.4 15.928 cv
176.994 18.306 li
177.003 18.36 li
177.057 18.711 li
177.165 19.044 li
177.174 19.089 li
177.372 19.926 li
177.642 21.3763 li
177.642 25.1096 li
177.456 25.3838 177.327 25.6893 177.327 26.001 cv
177.327 26.3127 177.456 26.6181 177.642 26.8924 cv
177.642 31.6031 li
164.142 27.4406 mo
164.142 20.8101 li
164.359 20.9238 164.591 20.997 164.826 20.997 cv
165.071 20.997 165.311 20.9175 165.536 20.7957 cv
165.114 22.581 li
164.808 24.201 li
164.808 24.21 li
164.628 25.047 li
164.556 25.524 li
164.538 25.587 li
164.421 25.983 li
164.142 27.4406 li
166.006 18.5973 mo
165.969 18.5435 165.929 18.4912 165.888 18.441 cv
165.573 18.189 165.204 18 164.826 18 cv
164.591 18 164.359 18.0732 164.142 18.1891 cv
164.142 17.7973 li
164.232 17.433 li
164.61 16.056 li
165.285 13.464 li
165.375 13.05 li
165.429 12.924 li
165.501 12.798 li
165.609 12.231 li
165.996 11.151 li
166.068 10.836 li
166.122 10.737 li
166.221 10.539 li
166.383 10.107 li
166.734 9.054 li
166.806 8.946 li
166.86 8.865 li
166.887 8.766 li
166.905 8.73 li
167.076 8.334 li
167.166 8.055 li
167.247 7.947 li
167.31 7.848 li
167.436 7.533 li
167.499 7.443 li
167.589 7.308 li
167.634 7.209 li
167.661 7.173 li
167.823 6.894 li
167.94 6.66 li
168.057 6.543 li
168.066 6.534 li
168.192 6.282 li
168.309 6.165 li
168.435 6.039 li
168.498 5.976 li
168.571 5.90854 li
168.705 5.634 li
168.967 5.499 li
172.053 5.499 li
172.161 5.607 li
172.224 5.67 li
172.287 5.733 li
172.467 5.922 li
172.71 6.156 li
172.773 6.282 li
172.962 6.471 li
173.034 6.615 li
173.097 6.741 li
173.142 6.831 li
173.331 7.146 li
173.349 7.182 li
173.385 7.245 li
173.484 7.398 li
173.493 7.425 li
173.718 7.794 li
173.754 7.866 li
174.078 8.649 li
174.087 8.685 li
174.105 8.748 li
174.249 8.946 li
174.285 9.099 li
174.402 9.486 li
174.78 10.44 li
174.798 10.503 li
174.834 10.647 li
174.96 10.899 li
174.987 11.007 li
175.104 11.466 li
175.482 12.618 li
175.491 12.681 li
175.536 12.897 li
175.644 13.167 li
175.662 13.212 li
175.73 13.4427 li
175.598 13.3991 175.463 13.374 175.329 13.374 cv
174.951 13.374 174.573 13.563 174.267 13.815 cv
174.124 13.9883 174.002 14.1848 173.922 14.3913 cv
173.754 13.833 li
173.61 13.473 li
173.592 13.383 li
173.547 13.131 li
173.178 12.033 li
173.169 11.997 li
173.07 11.601 li
172.944 11.349 li
172.917 11.241 li
172.872 11.061 li
172.543 10.2339 li
172.664 10.1667 172.78 10.0868 172.89 9.999 cv
173.142 9.684 173.331 9.315 173.331 8.937 cv
173.331 8.559 173.142 8.19 172.89 7.875 cv
172.575 7.623 172.206 7.434 171.828 7.434 cv
171.626 7.434 171.426 7.48838 171.236 7.57716 cv
171.126 7.47 li
171.063 7.344 li
171.054 7.335 li
170.874 7.146 li
170.73 7.074 li
170.622 6.957 li
170.618 6.95291 li
170.591 6.939 li
170.577 6.939 li
170.55 6.939 li
170.424 7.065 li
170.24 7.065 li
170.172 7.137 li
170.162 7.14214 li
170.1 7.209 li
170.037 7.272 li
169.911 7.398 li
169.848 7.461 li
169.839 7.47 li
169.713 7.713 li
169.596 7.83 li
169.587 7.839 li
169.578 7.857 li
169.56 7.893 li
169.389 8.172 li
169.317 8.316 li
169.281 8.37 li
169.218 8.469 li
169.092 8.784 li
169.038 8.865 li
168.984 8.946 li
168.948 9.045 li
168.93 9.081 li
168.759 9.477 li
168.676 9.73509 li
168.561 9.7023 168.445 9.684 168.327 9.684 cv
167.949 9.684 167.58 9.873 167.265 10.125 cv
167.013 10.44 166.824 10.809 166.824 11.187 cv
166.824 11.565 167.013 11.934 167.265 12.249 cv
167.383 12.3431 167.508 12.4283 167.638 12.4983 cv
167.544 12.762 li
167.409 13.455 li
167.346 13.572 li
167.283 13.698 li
167.238 13.914 li
166.545 16.569 li
166.167 17.937 li
166.006 18.5973 li
169.389 6.498 mo
169.389 6.498 li
169.578 6.309 mo
169.578 6.309 li
169.83 6.129 mo
169.83 6.129 li
0.984314 0.976471 0.239216 0.113725 cmyk
f
164.826 20.997 mo
164.591 20.997 164.359 20.9238 164.142 20.8101 cv
164.142 18.1891 li
164.359 18.0732 164.591 18 164.826 18 cv
165.204 18 165.573 18.189 165.888 18.441 cv
165.929 18.4912 165.969 18.5435 166.006 18.5973 cv
166.197 18.8712 166.329 19.187 166.329 19.503 cv
166.329 19.872 166.14 20.25 165.888 20.565 cv
165.777 20.6507 165.659 20.7294 165.536 20.7957 cv
165.311 20.9175 165.071 20.997 164.826 20.997 cv
0.172549 1 1 0.0941176 cmyk
f
168.327 12.69 mo
168.09 12.69 167.857 12.6157 167.638 12.4983 cv
167.508 12.4283 167.383 12.3431 167.265 12.249 cv
167.013 11.934 166.824 11.565 166.824 11.187 cv
166.824 10.809 167.013 10.44 167.265 10.125 cv
167.58 9.873 167.949 9.684 168.327 9.684 cv
168.445 9.684 168.561 9.7023 168.676 9.73509 cv
168.929 9.8077 169.172 9.9514 169.389 10.125 cv
169.641 10.44 169.83 10.809 169.83 11.187 cv
169.83 11.565 169.641 11.934 169.389 12.249 cv
169.074 12.501 168.705 12.69 168.327 12.69 cv
f
171.828 10.44 mo
171.45 10.44 171.081 10.251 170.766 9.999 cv
170.514 9.684 170.325 9.315 170.325 8.937 cv
170.325 8.559 170.514 8.19 170.766 7.875 cv
170.913 7.75772 171.071 7.65445 171.236 7.57716 cv
171.426 7.48838 171.626 7.434 171.828 7.434 cv
172.206 7.434 172.575 7.623 172.89 7.875 cv
173.142 8.19 173.331 8.559 173.331 8.937 cv
173.331 9.315 173.142 9.684 172.89 9.999 cv
172.78 10.0868 172.664 10.1667 172.543 10.2339 cv
172.317 10.3595 172.074 10.44 171.828 10.44 cv
f
175.329 16.371 mo
174.988 16.371 174.647 16.2244 174.359 16.0109 cv
174.328 15.9876 174.297 15.9638 174.267 15.939 cv
174.015 15.624 173.826 15.246 173.826 14.877 cv
173.826 14.7131 173.862 14.5493 173.922 14.3913 cv
174.002 14.1848 174.124 13.9883 174.267 13.815 cv
174.573 13.563 174.951 13.374 175.329 13.374 cv
175.463 13.374 175.598 13.3991 175.73 13.4427 cv
175.964 13.5195 176.19 13.6543 176.391 13.815 cv
176.643 14.121 176.823 14.499 176.823 14.877 cv
176.823 15.2418 176.647 15.6152 176.4 15.928 cv
176.397 15.9317 176.394 15.9354 176.391 15.939 cv
176.076 16.191 175.698 16.371 175.329 16.371 cv
f
177.642 26.8924 mo
177.456 26.6181 177.327 26.3127 177.327 26.001 cv
177.327 25.6893 177.456 25.3838 177.642 25.1096 cv
177.642 26.8924 li
f
177.642 181.098 mo
164.142 181.098 li
164.142 180.909 li
171.729 180.909 li
171.729 180.999 li
171.918 180.999 li
171.918 180.909 li
177.642 180.909 li
177.642 181.098 li
0.74902 0.678431 0.670588 0.901961 cmyk
f
171.918 180.999 mo
171.729 180.999 li
171.729 180.909 li
171.729 178.938 li
171.918 178.938 li
171.918 180.909 li
171.918 180.999 li
f
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TimesNewRomanPS-ItalicMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdup 61 /equal putdup 120 /x putdef/FontBBox {-498 -307 1353 1023} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704AA3988900AFCFF05DD> |-/space <1C60D8A8C9B8707C25> |-/zero <1C60D8A8C9B7A73DB95E4C3B2CBDAA180DE16ED2E0B54D373FA0624F4D4D6AEC3868DC3B6FCE2354D83BCFB00DD4446A756F968EEE24EB76F936C153C554CF6C4FC531FF7FF83B6E48CEE21091E0E09B4C454DFC4E65880C366E13FC5BC8A513523C320C7B30F5347C743B956722220B3BEF7EACE8E5F9F591092F7BD516A6AD1802BEF3B681970F31BDF1B1A76203F2B6ADF0680B5FEC4F306B1764ABEA599CAC4C746792036F08DB0B307F28AC5ED1> |-/equal <1C60D8A8C9B65648F95751FAB6ED1FA6A9E711BDE78207211AD63FE41946D8888717> |-/x <1C60D8A8C9B77FE28E7B59861DA633FA42A38BF207DC4A11329E63F668010B05585B22E39E733F2B39E647F14D7DCD27965006EEC01D3FBB556E503629E45F186BD20587B6FF8BB4E525ABE63E26F210C9F85E012A8DB6F803B316624083082E536A1274247334ADD37479C48FDB7D8ADD850A8832DF9217A2BFFEECF6DD96F21564B9189ECF65AD0E783A58F9E296A99147AE132DD5B0142AB4EA5741668F4195BDF7097E5D12CB419F2F282E538E1EB21217502E3C6B11740802EC650F4D2ADCD4B1772219DAF6BE6429CF2030BDF9C05BA7A5D790670BD325C71A55CFEDEE3AFA9492A129CF25024BDA2414AE27F397E2DB63BB72C98E3704AEDCD4D4A43DA02887C90FEE11520BD99634849C2457543FCB5BD3F0> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZWYBSY+TimesNewRomanPS-ItalicMT /TimesNewRomanPS-ItalicMT findfont ct_VMDictPut/ZWYBSY+TimesNewRomanPS-ItalicMT*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 12{/.notdef}rp /equal 58{/.notdef}rp /x 135{/.notdef}rp]ZWYBSY+TimesNewRomanPS-ItalicMT nfZWYBSY+TimesNewRomanPS-ItalicMT*1 [12 0 0 -12 0 0 ]msf180.639 178.5 mo(x  = )[5.32617 3 3 8.09766 0 ]xsh%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginZWYBSX+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8707CC95A9B5DFDE3A4AF8C8BB7D0C82C30C322ED94985BC6C2F162CD480F8280AD954FE8DC511B40B423DB4A6012D9C419E4DF4F375C6ADD098717CA70F621> |-/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F589D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C02720FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF41DB28C0847307B8DCBC66> |-/six <1C60D8A8C9B7A73DB682174C160AB8115D90A4524BD5B352C23110F23EE4E20266716093AE0643A076F6C57BA527F49BB819243E28C4CA7F711F41FA01318856C15674E51D546E83D25FE9DB7A4B9EDFDDE57E488CC507C2304526D6E80E07D1EEFCA86373B2F664DD3DA4646061C700F112AB44ED3896FA596FE814436AD1F1DC5FEDB207A575A17735F66E79BF0D0E423C92F1E9255D38F15B49459F3693E95DCE92EBF25C243713EDA9138A49C42AA83683249878EEA825672AC6D99C32B9109B3D5797A7> |-/seven <1C60D8A8C9B7A73DFE31854B8CA51F015562FECC80A8475F282F772252E10D05B7D43981266F60616595AB1BFBC47BFB03D1BE> |-systemdict /gcheck known {setglobal} if end {end} ifendZWYBSX+TimesNewRomanPSMT /Encoding getdup 46 /period putdup 49 /one putdup 54 /six putdup 55 /seven putpop%ADOEndSubsetFont
/ZWYBSX+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 2{/.notdef}rp /one /.notdef /three /.notdef /five /six /seven /eight 4{/.notdef}rp /equal 6{/.notdef}rp /D /.notdef /F /.notdef /H 3{/.notdef}rp /L 5{/.notdef}rp /R /S 2{/.notdef}rp /V /W 9{/.notdef}rp /a /b /.notdef /d /e /.notdef /g /h /i /.notdef /k /l /.notdef /n /o 2{/.notdef}rp /r /.notdef /t 5{/.notdef}rp /z 133{/.notdef}rp]ZWYBSX+TimesNewRomanPSMT nfZWYBSX+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf203.063 178.5 mo(161.7 kHz)[6 6 6 3 6 3 6 8.66602 0 ]xshZWYBSY+TimesNewRomanPS-ItalicMT*1 [8 0 0 -8 0 0 ]msf186.639 181.5 mo(0)sh171.389 181 mo
171.389 180 li
170.389 180 li
170.389 181 li
cp
171.389 179 mo
171.389 178 li
170.389 178 li
170.389 179 li
cp
171.389 177 mo
171.389 176 li
170.389 176 li
170.389 177 li
cp
171.389 175 mo
171.389 174 li
170.389 174 li
170.389 175 li
cp
171.389 173 mo
171.389 172 li
170.389 172 li
170.389 173 li
cp
171.389 171 mo
171.389 170 li
170.389 170 li
170.389 171 li
cp
171.389 169 mo
171.389 168 li
170.389 168 li
170.389 169 li
cp
171.389 167 mo
171.389 166 li
170.389 166 li
170.389 167 li
cp
171.389 165 mo
171.389 164 li
170.389 164 li
170.389 165 li
cp
171.389 163 mo
171.389 162 li
170.389 162 li
170.389 163 li
cp
171.389 161 mo
171.389 160 li
170.389 160 li
170.389 161 li
cp
171.389 159 mo
171.389 158 li
170.389 158 li
170.389 159 li
cp
171.389 157 mo
171.389 156 li
170.389 156 li
170.389 157 li
cp
171.389 155 mo
171.389 154 li
170.389 154 li
170.389 155 li
cp
171.389 153 mo
171.389 152 li
170.389 152 li
170.389 153 li
cp
171.389 151 mo
171.389 150 li
170.389 150 li
170.389 151 li
cp
171.389 149 mo
171.389 148 li
170.389 148 li
170.389 149 li
cp
171.389 147 mo
171.389 146 li
170.389 146 li
170.389 147 li
cp
171.389 145 mo
171.389 144 li
170.389 144 li
170.389 145 li
cp
171.389 143 mo
171.389 142 li
170.389 142 li
170.389 143 li
cp
171.389 141 mo
171.389 140 li
170.389 140 li
170.389 141 li
cp
171.389 139 mo
171.389 138 li
170.389 138 li
170.389 139 li
cp
171.389 137 mo
171.389 136 li
170.389 136 li
170.389 137 li
cp
171.389 135 mo
171.389 134 li
170.389 134 li
170.389 135 li
cp
171.389 133 mo
171.389 132 li
170.389 132 li
170.389 133 li
cp
171.389 131 mo
171.389 130 li
170.389 130 li
170.389 131 li
cp
171.389 129 mo
171.389 128 li
170.389 128 li
170.389 129 li
cp
171.389 127 mo
171.389 126 li
170.389 126 li
170.389 127 li
cp
171.389 125 mo
171.389 124 li
170.389 124 li
170.389 125 li
cp
171.389 123 mo
171.389 122 li
170.389 122 li
170.389 123 li
cp
171.389 121 mo
171.389 120 li
170.389 120 li
170.389 121 li
cp
171.389 119 mo
171.389 118 li
170.389 118 li
170.389 119 li
cp
171.389 117 mo
171.389 116 li
170.389 116 li
170.389 117 li
cp
171.389 115 mo
171.389 114 li
170.389 114 li
170.389 115 li
cp
171.389 113 mo
171.389 112 li
170.389 112 li
170.389 113 li
cp
171.389 111 mo
171.389 110 li
170.389 110 li
170.389 111 li
cp
171.389 109 mo
171.389 108 li
170.389 108 li
170.389 109 li
cp
171.389 107 mo
171.389 106 li
170.389 106 li
170.389 107 li
cp
171.389 105 mo
171.389 104 li
170.389 104 li
170.389 105 li
cp
171.389 103 mo
171.389 102 li
170.389 102 li
170.389 103 li
cp
171.389 101 mo
171.389 100 li
170.389 100 li
170.389 101 li
cp
171.389 99.0001 mo
171.389 98.0001 li
170.389 98.0001 li
170.389 99.0001 li
cp
171.389 97.0001 mo
171.389 96.0001 li
170.389 96.0001 li
170.389 97.0001 li
cp
171.389 95.0001 mo
171.389 94.0001 li
170.389 94.0001 li
170.389 95.0001 li
cp
171.389 93.0001 mo
171.389 92.0001 li
170.389 92.0001 li
170.389 93.0001 li
cp
171.389 91.0002 mo
171.389 90.0002 li
170.389 90.0002 li
170.389 91.0002 li
cp
171.389 89.0002 mo
171.389 88.0002 li
170.389 88.0002 li
170.389 89.0002 li
cp
171.389 87.0002 mo
171.389 86.0002 li
170.389 86.0002 li
170.389 87.0002 li
cp
171.389 85.0002 mo
171.389 84.0002 li
170.389 84.0002 li
170.389 85.0002 li
cp
171.389 83.0002 mo
171.389 82.0002 li
170.389 82.0002 li
170.389 83.0002 li
cp
171.389 81.0002 mo
171.389 80.0002 li
170.389 80.0002 li
170.389 81.0002 li
cp
171.389 79.0003 mo
171.389 78.0003 li
170.389 78.0003 li
170.389 79.0003 li
cp
171.389 77.0003 mo
171.389 76.0003 li
170.389 76.0003 li
170.389 77.0003 li
cp
171.389 75.0003 mo
171.389 74.0003 li
170.389 74.0003 li
170.389 75.0003 li
cp
171.389 73.0003 mo
171.389 72.0003 li
170.389 72.0003 li
170.389 73.0003 li
cp
171.389 71.0003 mo
171.389 70.0003 li
170.389 70.0003 li
170.389 71.0003 li
cp
171.389 69.0003 mo
171.389 68.0003 li
170.389 68.0003 li
170.389 69.0003 li
cp
171.389 67.0004 mo
171.389 66.0004 li
170.389 66.0004 li
170.389 67.0004 li
cp
171.389 65.0004 mo
171.389 64.0004 li
170.389 64.0004 li
170.389 65.0004 li
cp
171.389 63.0004 mo
171.389 62.0004 li
170.389 62.0004 li
170.389 63.0004 li
cp
171.389 61.0004 mo
171.389 60.0004 li
170.389 60.0004 li
170.389 61.0004 li
cp
171.389 59.0004 mo
171.389 58.0004 li
170.389 58.0004 li
170.389 59.0004 li
cp
171.389 57.0004 mo
171.389 56.0004 li
170.389 56.0004 li
170.389 57.0004 li
cp
171.389 55.0005 mo
171.389 54.0005 li
170.389 54.0005 li
170.389 55.0005 li
cp
171.389 53.0005 mo
171.389 52.0005 li
170.389 52.0005 li
170.389 53.0005 li
cp
171.389 51.0005 mo
171.389 50.0005 li
170.389 50.0005 li
170.389 51.0005 li
cp
171.389 49.0005 mo
171.389 48.0005 li
170.389 48.0005 li
170.389 49.0005 li
cp
171.389 47.0005 mo
171.389 46.0005 li
170.389 46.0005 li
170.389 47.0005 li
cp
171.389 45.0005 mo
171.389 44.0005 li
170.389 44.0005 li
170.389 45.0005 li
cp
171.389 43.0005 mo
171.389 42.0005 li
170.389 42.0005 li
170.389 43.0005 li
cp
171.389 41.0005 mo
171.389 40.0006 li
170.389 40.0006 li
170.389 41.0005 li
cp
171.389 39.0006 mo
171.389 38.0006 li
170.389 38.0006 li
170.389 39.0006 li
cp
171.389 37.0006 mo
171.389 36.0006 li
170.389 36.0006 li
170.389 37.0006 li
cp
171.389 35.0006 mo
171.389 34.0006 li
170.389 34.0006 li
170.389 35.0006 li
cp
171.389 33.0006 mo
171.389 32.0006 li
170.389 32.0006 li
170.389 33.0006 li
cp
171.389 31.0006 mo
171.389 30.0006 li
170.389 30.0006 li
170.389 31.0006 li
cp
171.389 29.0007 mo
171.389 28.0007 li
170.389 28.0007 li
170.389 29.0007 li
cp
171.389 27.0007 mo
171.389 26.0007 li
170.389 26.0007 li
170.389 27.0007 li
cp
171.389 25.0007 mo
171.389 24.0007 li
170.389 24.0007 li
170.389 25.0007 li
cp
171.389 23.0007 mo
171.389 22.0007 li
170.389 22.0007 li
170.389 23.0007 li
cp
171.389 21.0007 mo
171.389 20.0007 li
170.389 20.0007 li
170.389 21.0007 li
cp
171.389 19.0007 mo
171.389 18.0007 li
170.389 18.0007 li
170.389 19.0007 li
cp
171.389 17.0007 mo
171.389 16.0008 li
170.389 16.0008 li
170.389 17.0007 li
cp
171.389 15.0008 mo
171.389 14.0008 li
170.389 14.0008 li
170.389 15.0008 li
cp
171.389 13.0008 mo
171.389 12.0008 li
170.389 12.0008 li
170.389 13.0008 li
cp
171.389 11.0008 mo
171.389 10.0008 li
170.389 10.0008 li
170.389 11.0008 li
cp
171.389 9.00081 mo
171.389 8.00082 li
170.389 8.00082 li
170.389 9.00081 li
cp
171.389 7.00084 mo
171.389 7 li
170.389 7 li
170.389 7.00084 li
cp
f
188.639 94.25 mo
151.639 94.25 li
151.639 95.25 li
188.639 95.25 li
0 0 0 1 cmyk
f
155.194 90.7949 mo
151.659 94.33 li
152.366 95.0371 li
155.901 91.502 li
f
151.34 94.7188 mo
155.194 98.5723 li
155.901 97.8652 li
152.047 94.0117 li
f
184.59 91.502 mo
188.125 95.0371 li
188.833 94.33 li
185.297 90.7949 li
f
188.444 94.0117 mo
184.59 97.8652 li
185.297 98.5723 li
189.151 94.7188 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/ZWYBSY+TimesNewRomanPS-ItalicMT*1 uf/ZWYBSY+TimesNewRomanPS-ItalicMT uf/TimesNewRomanPS-ItalicMT uf/ZWYBSX+TimesNewRomanPSMT*1 uf/ZWYBSX+TimesNewRomanPSMT uf/TimesNewRomanPSMT uf/ZWYBSW+Times-Roman*1 uf/ZWYBSW+Times-Roman uf/Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (steven schowalter) ()%%Title: (85raw_width.eps)%%CreationDate: 5/12/09 12:46 PM%AI9_DataStream%Gb"-6k?9ArdjTN[_"V4=#%r.#BG6pGR#K-pS,e0T%eJ!BIdCi7.YUXcj=k6'mlYsA1I/"k.]HCIUajLTcOFN>G'EGD)ucDu$6ns#%e!r@Zi4PeSpA"TOmWE/OX:n5S\MR9E,nm#OWEg@LB)U"_H9!%T3g3-afGfhu)/oLMA)KLcI%iP/mpi9I)udmIlSVj1RSQPn_%]n_%mIiW*kk21;(nd4(npK<i%kbE*3P..!N?1k7]l"4mAF83s7\a;!dp>tbg#GK6eEqBN_f<FGou]!!b'9VORrs)Fo3&i])/$SpQ\8hQ%N^mEFTHU)X_r%9bGgPa#g7:knp.kLpO'YW?7B2CJ^?J=h#g90U4R,Z?m."&5a,H@CV'MHBd-kKp/YT.q5Ia*BNW,#"?;C(J_"2^3%ZTFS8)q44on/<Q[D`dnpY;,G&q3*cjQLG6eN.,O@VDZa4E@mau][9-qRmaA'B]Q9V]q)pLSc<6IS@6"]l#?2^#(5*@&PQcVe!oe*%TWtCTcC<lS;L1LlFiLgT(Zkh[8LC(#%GREp*]3i(e8#%"3;al%rZi4r)ro8i'TqL]2hOt:.-),3LMGjFB0;lian:QhB5frF_nG/#%4Q^_e`pDft7*;"YAZq36&5q^@6"0:#*pjLq!=c9!;eU2(d<&ZQ]:[nFLA!,t09<_^FUD'!2bebZY/etZs(1mgkp%,7FP7VZ4sQN=%T;h4N)*5AQ!,fO_R11'?^m1#TU7$QiQU;EM-o@e1">_>2hFcsLDskpc.#UIm6kOkpPOMM:iFb@#8js>@M^#eK7<g>?jDCk!?^%[V%8Z7nJ_G`2r[?=+[Pt[K9XA)iP3jK0:AFpDHQ=[!@b>8TGJtGjiT8-VG4FERC_jc#plBFp1[T#jGiTjAJhNpjq)q&6E?d^"tOh?B$%fm?Tgpu*UMJhb);W!-[?,:2ed7.:lT^kgnrN147-HjaG9TC;t.JtLC&_%UN#7Kbqah!c7T@8$Zb@$AB]=thT($$Aid-tDiN4XW39%=<q"#TB&X#Emf<_GLADO*I?#nLt*XJTGEIsIR6\<#0Egc4#1=8)f!4afF/FpODeQTn.VC$FCbC0-g<XU^e^m4j+Et7(($6;]Fsu>%OjO1$SC%k:1X\L>Ff7au`pc;a:3mF6-iG6.8]tqa8.G8'lG2U#A]!ZhCGKYq(<-SDTba>?(a$R#q%eEG*>k?fcR>9b*J-9QJP\;#%@7Dc+g7[V^;@"kYFi!4)i19M#@%G(ZG_;To).@#"I>:u73bb.4:Yq:bUuu9"&o&b7:2iR(.,fZ/IautD^@D!OC/n=N_im^iKXr&W%X7QX(X#.aq\iS"CbN_2TNu05&CD@eiYH5JI/npZ"an$MO#JURHjQSlp+E,cejI[][BD"4ZkOBd.#QI_PPCKPGGufEYJ*Ae8:8\ur%2#WccOuMZEnh6=Scg#H>cf6Ym8;[24r$rQ)Zhg0hj-5%HT>TI#:GT-7R6?\iBRGDrQP-+rQUQr=:<KG,-1X:ua8S!s+,MGqg/`]-%J%^(WAm`0*YC'X6;XcbJ+AXFS<=(r^_;?H:OY<O<696:L<XN;ne3^Z6J"\gn=i=)APIVsGKYN1\8O1%EA6R8Nq1Qu7&NsW?ZS)sn%,+Cp!OA+iDW!DN\6A/uNK"b9ZP&K8o&_99,M>EGJZ>$#".]Tm%*akj)(fM3Z>:T,63_%V??H-h.[;D'B;ahNN["uFg6!sBiN!kWY%Ugd';B;oE9)$#T2J0(Br(#`rl:H"2%.[&AVDEaPbCDgO^NuRqG^+YTD6[pEGN2cc0D_[hSS*1e'b"7Xe-.HBfT-^7eq*\=X$Rmo>%ZrKihJBK''!@6)Te<6p*%bDrT6H<<gMV<LsH^.7bnnErhPtDd"ge,=0[@uK'g4n%UPf!#m<;V5q(@d>0=P^(&n3l658NeJQrtLo&%Af#\>lPZC*2T%4DFUk]tMRF#i!fSFY&u%8!)>Xa2"X->(%)38Cb5q!@A[U^bG:Js"j-K>I19SXme]C:rHEP4=l>_YG_>fi5P_9Br%5Z[)R,_*(*Js\fu/@)i`)m+"`G1\q:Fdsp0=9C"CQ).H;X94'*P0$c>qmal1:D^<g((Q92Yc[jjjZ0&gnWtRV4FRJ<cPWCpPXIuY%gL?Ig-5#8DIu2oiZ`Wk'1>io4bG9Ql^/YH<U+F/R-#Mq^_6&t>?Jp=U;rn\u]L,AuR2<2ED12<FDl#r,kC`r9.n^Ra/LTdD+ld"`%.@$\1_Z4'RrLG0KRB7qj/4-+J/<!mllPm`NR*^kOXuR*c@Zg1>QuPN@4Sp%-!?:,_CfoBWCJrHV!)!EQ$Wq+r?`?lD1OGk+8J:ep%$<SP7$N2H&d*Fmn$ZgGQ:+--'-E.uEi"a7#7n6cq>aa+BDEqTnG778>02VZ]'&ut]9H[UM\2-r2l\F2D7a4m>Zec6!^j4QgkUiSX%KGSC\5mc[V^l@q7&?#e\W;IXKj].6nrlL(O`tD'"glPY=f]3L:!iWrt8EEU*MGXn/kU1]^=As3*Bi8=p9h(el6r#CNaa>W:?deF;%>s6aT12>5Y80X]npe%lU81T;79sh:*=mMGY9IMts=0[?E6H>mo-&PQ^LRok]1-X7nklH-+O?W/kZqE2)A=SKC6.D`L8)"[U)u(1F%3iD6p7a+3:Gu5>U.6Y\XCS(#\A2-^1f$kECprXh-L,if89u.:T/$aR9=Z.`f-:XQ9%1]QW2FlIYMd!o$;9#Y.".urpOc!,\l(DNX%6mN'6P'f3L"Z!]CX!j3-,qsYcWFI<CVW3u)XWpt7L2kB\XE1)2I]:qfKHfRG16]<gfI9-=q&K:'d!SIEpUJ8C3QOcI)W7Rrdj24K%1cj(7*1i?^As0?r1e<0Kabq"JkrD;]"qTFC:c(dP!N]4q>bk9Y99hkZGVhAZV*K8Tl(][qTELJI5aTEp&?Sd^J4UXJ-ti,Wb=U&m%`2&nuOE*_c6itQM$GgT)Bds1',<c9]$V!Ym2RZk@-Eos<81FDI+ChrU7[BTt/7Y5B6MSc'(lBrc/1fQXd]K?.iJIF,,Ht+:/Eso^%==(BViMATVckj>ecqJ'Y'HLf%3YBb5;OM'_aW07L"Ck-/Jo@ml-*(4`"sQSr$-e5rC?ho>(i:mfip[?k$sX^T.8't0`jDK-nO1B*%bSKB7'o5>3kqlrg)s/_[HR38$Ficm/6u1alN#>$-:cC\=LZdfA79i':qG&k:_4Y?H4BYAaQTXLmBMSD,KN=6/QqGN34J!!JV7O=,%99Obpi]M$`!8-3r`"^/U@IjZ\<k1OXT.U-21:tI)*HX*5%j:6%&U^gBM@<FZn#5u72!T?ac3i2jSE#"LRR1q(W6&5bBm[a66(g.S%i=l'@qOI`EOuKHjSubf=)Uus(RIL!F([s;gH:TW$%Gi5^1J)@,,bf4NQO40ORYS0Q)*B,/#_-G!#-Gp4*q`0ldKS,EqAQc%Cg._k%L6pHCdKJ%#+'GOrl_=C:YOh6@l;[mt#Z6i)BL6K7.Jfkj@8"hM-o$-UUSfmG%%\'_.8apCZFha1&jcT<)X09S!at'FMg61P7`>H,%,B_B58Qj1NTH5:EV"5h$k:eb33H>FQM(%N-hg2DZkUg=5TV#,a<+:6Cpa6U]*q_LJn04S+am:;dbU0(8V3"S+ALmkiQ4Tg#+iU6>%d79%Bc=B-!ih2j)0;2B>B3;([lAh+,;Z0hMa&N")s#g>]lCL;lU/5tR7KM5HorS4+NLiETQpi$#/9Q*L*k/nP[%[?,X"P)3PAr[5%Ab2M9&gm@OD*V0IJPW7):nJJN(HA^P+i4hF,bZIB%:XcSeN]i]!Ep_4`V:YVS,B'60aicP-59#C=NhMDbRUH"'lA`YGjm74*X+a.%r09'akL=L7k7[P*ktd/Q:q7Y=oro4=>Y!=OP%j&eA(EZ!(&fSbR<D6);"d-L:?0Zbe@3ZR"7)Cq$rn&h;e2^[NuPN]0cnDpO:l$Q%&DfYp,R[)A^cY,4Apl6GZ:.)q*l#HLBZ"^Cq("\r_hS2Em5&+0LV;XoH)LS"hqW=NZ]XG(,KfQ6fl5Z5F9eGON`Suq5KAbu3j<*7%caLHV0mYX4B?04Y4Q#G2]=hMq?>Qu\dn]ggg?l:0nI&CB'<`il1e<l9DCs^YFiUUes.e3A45Ng"ORF-unJ5oQK>7&s464kNk0o@]%BpU[6-$?ef3aJT-!&sA'%nYS#WB8VZ*@c2eUan6!F[iCVe>f,89W?caI"$7YnM]Z?V\<tlI)dV`cF=+SQulLCit-.SHG.T\5&-#W%"/E%ZqP)ja[$s43V(n#+5cqHSXl8Ki\GQ(ZNDITSG,O47s27JN'QC=nE8'`-`3[GX`MD+QI!LsN;/\AWG6]q3')VX*1Pkd<`a[8!%4na4^DLZb);r'_ErpD]lX]Z/U=G6r/VpKp+SI#_14oEVKhYFe6C\7.hLq:1"7Lsp?I.bl+U</tp`odb)Ff.Hop,X9oond(Ne*D-H%0_3>adH\ZVA2:HTf]]MJHjDPaBVR3!4+7#7'/Dm/DNm;G2Xuu7:(#b3^UcZQ$ITWY5:V/2N#Q:sMmMpbpCseFV;M%S2s6$IFO>Uf%Gp(2u&V;fT"+fC@<nCK\1$L),`"/g3oP6FU+;44_ZPjH.CAuKkas\a1.h^>OPO`38\K38dN_-&T;X$Ns*ZOhWWDOltC>*97jAd.2%C,5%n2.)Q(kVl[TT_EG]<,8l1Jfm^TXCtE-CGts(N+`)q@l?dAE&d(Z`*3]CS`dG;K6@kTp"RTihoU,hd7Y+cK\9=Ecl,5!>K0n!%KS8U,_k,oB=)i(7&s7;56lJHUO>Z47*R?dUIn$!JTPFYV9L@00:UGiGq%*M9?7>noeratDI8o&@];i=%U;tT-P,BkYbGW9<,-B/Z%XO0BGa`r%!JQU+fO+q'D3T1<9hK0[?5iBJrVg73)Li6&#NF'6onI\8Nki;0Bph2d+cWZ.*G#=/rO:S;cZlHjEG<QsP%kf<iLku0D%o($fNhADpsrhdAje+#c&2f3dC?D7fL0s(E>$pHaZ6/nPX&$^`_c(BH+fW3'7Dr&JJ"T<I"*LDSr+lLOb5(Y`XqIOT"?BrRKg$!\M%1%YUSm:!?]]kgBW]X](m;j3l@QB=Zjq#Zg^]74ro=fg!k"`<#+*CBteVtZq]N<B^eQklWMh9<IZNcRQH/VmgSHZS6#jNDm3*;5Wr%l!GmqUrBhXlMl(D\ATHt/d;I-o8mVh,Ga[NqHjI2e[C3_?N)mmSo5aFNA[8Eb7&pCHNb%-[fEX1Y;,IDhr@6#gBCa>Q//#'<GL$J%>QX)&of>$]OG;>1DQV:](lnJ3[,KHmi3,mo37;nH.7"U'Hf#[$m$`ZC66*=k<X<$X.N4*@&Hm<)Dn[-b%drcWX+Y9F\00g<A'c'>%EOjLCYTH9JLnEp7&h-`t9`Wr"ZG(#%SgV\A%>5Kmruc4JM4Y9>QA?Wq):YM!&:o_22u4P5`"ToMp(7C=D`R7iqZ#$^_ML;A_]SMi%K)YO77K;mMhD=Wl/*CcEdYDUCmf@,tA/r3&04OVskdLjlY9a,u?k_>1".&t2^^C)O=Rk8L/,_P;'E8QpjT!h>T2B<4esjB7!+m)S%nD?S8'd*e-8Jnh0=kC@L/UEDe*b(<_cZ<WeQ]5;VW=HH,QVI4f2("@A@6a[NB.fn=ZK8X@.K*Z4(?+%Ke=:[hk(\^C/0c?`Nk?S,%(Rk/LBJF8C:h\69m46A%+eGoaS38+>J>Y"Xi>^fApmLlrF%FVB!YBqRIZS@U,\fij?LEc7j;\*K)34b+;VE?R+1-@MOgd1N3rI_?%:7^?oI_f070q:tSX5ZP]2#QUbb417nlM7[?1%">12t2%+2aFRAW0))/M+i$b?$8>JOBV[+'5M8g;lfTAmBt!*!N@;gj2Yi1Pdg-l%q?OAHGT59V9^7*b`fj]8p2?hd=3t%IX3mEA\kkSqW&HthK2eU/RHU7AQXU3ij,OMcoS0K?:>64i=Nr]8k-F#^G&[^2mp^*h3,Ue+%F$'`knS)dBC&1oL"E02)=6&a-R_=_#_KVO#s%Nkao9\d>%TWO?MMC)tAs;J`s6k!6IuY!pP6Qh0OMPUe\L#:GHsNDZr"jM;rsu/P%o'r@P@VP`n07uj"g\TgQMa]fMj$ahc]'_D$emnYS[ls\11W-TZ^WV344r"a-ABJUc?QIeEF#,@Jo3WOT45n"a>^s@hMuWKaP[c0_%7e=[FB`@qqULAnMeM*H0.8gJPSW>3[T>8^Mk.g^F&HA-dh$drV<X56]nup5d,c1M-0(_6S7N8<oX7eneYofHPl47l%?(/nJPN<u8%fub9lg22JSUYhI:(^PUH)GUaL)SIaLbS48Em85f3MBlBR)YV0CT<cMolte`T?8j!EVY`TK3B)l_*Ap<WZ$4X`c[+7>V4U)Qd25ZK%_oB4RD8@qRoKC5D20?!i0a8BkX4*LIa51F'f,1mW_4#[oVObJ]6UiqY012hM3uPp20&@pkqr7!Igm&#_:^as"lV,$W!TOc;eO*;P%S,X?K,9D!IqaksWYXmr!NF0o,,?2Lnq.(Zm-7n]Mj\c$qM$]VcdrAkO))Vuu[f2pPFPCJ,fShgK#lt/CHpWpJZuoY?"5^<J,0c.9%s22+J8kiVN&XU_(G`)jD>ASM]NFoZOSc2JuN=d0!<BQO++O=8/$pJ<`c]7a?3+>f&GWtH#]<f4`I_ZP%)g#:tmBZD$elkWg:#)SE%=7ppa.@W@1ERX/P)H5-hFkCI$i2[05D^J5D]#PBFFBm2De@rX#$OEE2=,7i#_f<<;T'qb"IQj:e?L(1rG^0B:N*"c9ZJ'OT@W<,%%8$:c=9SKloU[uMep&ma>X&:kT4`&+L;8Ananml7<&Xm"45X%:+4r^OsI_):$i]04h>G)ON24eo_G?Sm@M%DQm:52Kq!VWO<kH&W1%MFUR^)ND%H0NA#4hX1C@_hXF.6\GX5C8_o#YbBRW8]ub@4\so%f35Y1.UhO$iG\6J_SgM!-EcC;UimWMLLBej*^*rH#*.n0)FA[,%_pL2J!k/O#LCalEMg:$h/jDl)eju13CJ*\l>`id(O[Z93@nT$cns/fK*L<=81XNo>[AsCq,72B?Oj`#7RS8(52JEcP0O%$JqrZin%>$ogOgjCnmpX/<`^icPED:aa\s.]&fYF(!sMPJQYeqN_]@M$KCY3'gsAPkd[lt_V]M`?t5m->9G7U\s]<Ei;o5JrPC8S@<fmE8>N%P[1^ZPO@V,U!oZ./)mOF;EMn'ip`_tlaWnFQo)G(IUcnqQ.-\tl[!W[>J2a(3s3EMVk@YVF;8O?Cq9pc3SMt'[q!<1/8YV[6,aAQ%LVAN's.SL^;%$#"D-J?N#Z+A/H]:nhb@SB%XSXpPm/P"c@=rY3GO#K`5SfGBRr5r+;`=#<Q2-II#udjZWb=s+,M%+W/@uC,65N42%LMC>DDSJP=XL'l)j,"4cECGPd:)g;^%=`=o=^_mpl=u]>MqV>mOgM2"W=oqnY?b+.HL7H0VUmG8)joC8S9taBZ$(%BrYQ.3(@GiK%"-%%(dJ((J4Gb6L#I`gr<Ro1J\XJ#/@UgX(_=HE`k,0.VK^)De1nE)=c0LMe#O</GmI<TZH?h<*j(cg;SkQ4/\,%fph9kNfZ/^7I%`SpHIklR^f7l#k($YutCLPg(D2nYtXe1cT@CfsEsE=O*[#]Z':\,"'K(jH"3hV*!#oY%8JfEb_&Ha49n*ShX*7jM'NScDi^']bjg%Dl+-U1aaZu0`H/0+/mIl)Y];<XU2:\401$SH8_LR<#YF5Ir#B)f4b[@Fsoe%VVRj'0='[2'8XeOW.VX]PJe:omV(0__SC7l@TmD"%CU-eDk)??rN7a^RCMS+0*3cP#k^4R'pm9gHJX%EjD.$_K`rj4r9]p4/,J3nhZm!E2L-LY'G>`]bb"P)fCf0A%ZsoRse$A)O_bnTH%?,.1%2FGM"g9X4q:57*^(GK:KZU)bL6bp)KK)p$7RlaSg/LN00Ge-MDJQhCek.U4?On%4o,3J\6\@KAaHjP-!&f_<P&.KOPhi*q"%*A@f3"3&BYFiIrp7BauGB!cO-5Z3#4,IBkU*PlW*mlYS<f9Us;SA!#d+/]d+%ZCTq%3HkP;rPX+At4d7cU-U.YGheW$.@[17T<]!%.=^:m]Ahf:1fsI6b<M9:lhs<3K6o^Wh?r6?lf=Bc3$(`,aPGUUa7"q`UM4)F't`u>h`oOc>4b8Km=[.FrMfVpD,0YU%t4l"Leu7k%Jmu84'<<l<.f6ZNM7@\^q^!7h]H;*XpQIu.FZOo3$uHb@j4p^Q5-*Oer.WU0h[Op>pkcs;M9>8Qo1gcOFs=uGn]Nn_XX&Z\]8-;i%]!0kZ'aoeje&:\'kuhrN+90UWTkn>.nE#:('^5I^&JUS,7UqJN[)6`+@U+<\0o3k:Ta6i<gfHTp0p`[)aer\LalD9:^6aSRH]`*E%n$u'(P95hr)M<)!m^nm65J,'M,K!EhGb<l<Lf^lXVeCI5q9nZ(oPbM:mS2';-[gZ1bIdoKK(Ke4#%u$^\'c8B4c]+UjVM:tipF0T%g+,eQD!9EkGUuN,^@5(Z`"t'+*l)%"I*nG$4.&sl(]!pAogNq_&e$@b*L[\QL;+;>&6`GHGSg[+AaA))TS`,[V]b=GC_R:Xd/9``%_Vo+g%6^#(>^Q@QT^CA!jDOnD9:p6EkpCp/=[OC[CqAt_&<Esq!V@O"cjUqlC&FD1*?c=ocR=dXM82BQiUtI2%&h2W@,Ju-orf;C%FrolHHf?t@i_4p;-(cflJ6"RTc1hqVMWVl;eihp^AFo6ZdN%K$rm!eVs*S8[1q_S+p<8&5r!7+ZF7\ha4CO7Xl1'T\jcUFW5W;<m%l)fNHHYE\K.t+cS(as>?j&hM7gOf'"Zi\tDb2r/gq++/n2'IJ("9_:`'e"Z#Ap(#DTjtdkfeL^N351<#@A&E!RmfIh4c`qXG8S$0%q)O^HV.m"HobbMCTVKYd-.(^5\%?>XZo*;*o+)%u#RUTZ?4:]M->-t'5UW%r>fd=dj\Qf`:Zap=i+%#@=$&oKbf74kC*Y?]Ei%6c%S-@:#VE^2<*#a>/'KW:;Xu*f)2$[=Ag>B&V^1sN1b?*pibE6[4IBbFV`=U\]b>1^=BJtI+SYO7/J;33:<pG+A;H"ebd-C/s.g>bd%%:GhG$6<n3&W8f?"-oHu>d]'H1'`-<0hYRi>A7$/(VNQIX\(`Y($KAuG8.:^qAeX8WkU?2TVpdR[8]3ZWB`Uq%G9Fqm]e(bS$V2C%]+rZoGK7D=k!5up9oo=_>n?=kNqMgWIpr`V0$pSYXFQm^pX-mK$5AIg$apnd5>%".VEgat[r7Qt^Gg&23=DK5E0nOZj#q3Bf(3)>%-f[FPQi_\_H`1-M*HhnpT.3[!@Tp!Kgj?;00F(d]nJ`"fX(*rYj7.D:P6,TY6,TE_:ukGM,[_Q1e$<<.AB$D[cN2D6*70WB_!bLt%i<TJ?*ucM#B)!4:5_%i+RMS+hs2X`N#6l[=*r0;/e%b%&kKd]>)P,p'kN>\hC%>1):c'iEicg?34U`#L3hV>5ST^B@-#kH!5Lm*W%:3]!OrX;'Po0AN=NW$mi"T^dVH2IlN4s>.?7=f'R@YU"o&,1uH"R'9r>1KAaW=[ro6S.)mAu=*2KPB<kA-Pc7pZV!\gF'H,,P/BB%&1s?'7*"T[(_OYgQZ.D;pIMnEmTgOKgGuP:[*Ma56ik&nQRYdd>kRqi;VrB@q'jKegS[WDYOgP;mlkU][`Da]Nj$^a!lh%63d6ef%R9G":*8tf'2LSVEA)-J!=hs<>Jue]r@h`Eon+V4bGihZ<aP1u8<T3@\^4#S'\BH4oXkeCp&(S,nN'17Qq^jgDp%:=hT.K-,hHk4u%S#KJq[hrW$hq[P8;omtaQPB2jr=Q;\.s#X:?.%s)&Q_cZAVRJ#p[p6_6RJ/=gI?^[hh<kE\'7W2\,B@5`)uVc5J>c1Z1tmfjNi=/%Y/T.=OFR0lh6t1&ib`YH]/P-ns&tdpqK@H<kP-X7A-*MEgT3&/3BA:$NLWe3p3_58aZ%2k4D,):K_L/G/$$._iP"(H[H;<i)S/sD%k(?O(I2gH@-g+0!51gtQ<T=KbD'rt1RZ5@C]H8#S4((s`*Xbc?a4nI0EA*'h\5GL,CZY/uph:RnFu*UY\\CYS+qedm^^_H&MEBH5%-0@s>e9b6lB)F2CfKhFV_[IJGLp_]u.JELJ]Y!&0U@kum7)i!adNJ;))oBo"AX&TE(M=XuXTb0g$MjFD6Z\pKj+A4GCqV$s)l9uL%7VI?nV;'dj"]2!3?ZaU4<^>Os:mI2dA)/P'AI[#[p@b?jF?IZu-ON\tJ6qL!X1HK)Q?sGsbR6`+7R0%9l"3Ql3hF%V0h\1,g+7au%>7t'K0<3g*@$Ru\>677Wm0f4FZ/o?nMR@F2(2Sc7(!qsud.I.aK/HKP7l58DLg\S#l;g0Rk"'2B';=@S?^/hl-F7VsF4XEMdS&,r%T#\%8)8%4P$,7%O8\MT+[r=trA>elYk:,dWY&d_F,KtjM<b*0SI<`\#C4&GFnZ4V@WJ>/_F6SA`d)<?3hfs+N4bV+3-@^*4AP<@l%U?%MkTDX3G^";Q:H:Je:9`Zfc'!@sM+Tg+Cf.PJ2[\*P44D;*=1A_tC*NK*Di/=e&ZA-20\pR?HdiX^Y+i+Z9q$eB=1]g'rH%J<+%m&QN"`P4G;5Q!blH,q#,SMKMo;T5A'OWsMkU0e>(`+*:rF(1rk/<R*0*<2\l__sLoT>Hf6#VUU0&htIMrc.<ZIn7UD;s+ZR,\Ai7%T7pD1M+(r5^7d=(%eJlR43lc%GX5lb2[*]bNC@)/k).g7O!=b`RD$?hAT8gi`hV#*@<fil0cS=uOf>sXK-g(@[fWl-X=#or@m,m8%&R$hk!6Y'QS;e^$UTA/pkqGT"L[gr0i&7H*F5/oJVY7^>S/qX&\C9i7kZ29bjj%MY\?/gY0mcTKG0$:VFfSD)3-R`JDRr(if=?iW%+,keu,O4Ha_fGRYml[Ue1+I?SIk,Q1aj3-C^miT7bIJPU-%or,kN1006=\WEbbb)4LbFDu$aeF(N/u4.k(r=sCN2s.$7-AO`jE#5%`3LgKqi6[#f,[)E>B`g#f7(pb\*L1"/uW:'FU($E#O-PI&VVTHp9(co.oa2Z&mf4];l9qU+11X&fd7m\T?76B:Y%B=aTZ@UZone$%&8\,[IH4na(5'90_WhrsQ?k.,DG$_^\LI>GO6nqZSoLc7RP>nl3Z?Pd`(D1lTeTkeUfc<k=,hgRDLQ_1CmXt;ekSZ3_4'R`Y-b)K%g#n$irFQ%RM;%imSJ#s=nqjoY<-mT[-.)L;jA!fmWH,o4r;CH"bob@/0q7"+T0^a"kuBb\o;CRF7V$M07_Q5O@K8Uch76`cA#_dK%1kg2Fif/BQr'%1k@h*h@@Mo!`"J41t0`spM'P#Xr`V_F=K3s8i.c_Z-/=@'t/Jlco5:c.r6(NPWn?E>ecW".!fVY)=)UQgMRT<u'%G#1pM0pI<V2"k&a[rtQJMdo93)oa*:%<`'Ee73Aj"e2bV0a1W!iD_>Ld;#rQL]\H$*O4!DTdt_1o?"QgB[P;"G8I\2!gWR=Q^ZBU%M2el0<8s=T%Ip<mlK#qf7)+T</ue8Te=5o:`!%&JHWp(*!9i2V)Vi#$"tlDa.e>>`HdO5CgaRm8iFEI'GA4YQ@.1^=!65I%!,W.d%4GeG-]4V+ej7E&"f4fJB'r5X/^e.O%jGT.8/Tgg+5[hfjEo3^I`Wqf`kmW$O?]]Fh3O3nP0>DgkDZs\)b&t[Ii=9#a9AG[I-r8DI%n_!aPn"8g1\:p&WiEalX8AqXS`l<nMK`6hbf-RHE:l?5,L]$DF)b5G<AHWKQZ'<V^pmm\*-6D%"Sn[onX;r:H,"ULPIlS=?o%6#`%:(WZ%iQ;6(%9>,^(\deHng?4V5<#=UitaA+`B93-IuT3ST@eI+bZKGAe"Bd=%l9PN<L'FfC[nXkGMu5;<i&<aAj/$LH?$s\@?%bg%F]jVg;ifq;;%T0pKN8bp*#]TF/$>5Vg4%BPSU:9XPWh,cMSCJ$4EKTd&%ks6/N4fejN?(eb5b;B]N^'j@(D=0@h<d[LiM!W!BYTn%B1^4JFP.Z;H#lK^'oW(6UU#ELZWgr0\Qj=h2tm+^Ae^s&0^>0p0DfAPDAa6/1^2`:kOmiOhhi?$l_$o@A6:\d._^-_0/.=\^oBSH%ge,Yh(!;^VBd^Q<Dfh,'XI[F97MSp-dG'rS,bMfUQn.R@h+gBm33R6agq)<M5k^,"h[;<MWjkpn9'BEgDAo$R]uOcBb4`7TG;V&-%D/MFqL.mq%d(n%JhNcf'A,OtG*3J@hUNubq]6HlK>Rs?Bq(J\O2=2N[VT_$RJsm>IV8Y<nIFs?7j[BQZI7*@R*K<(f'6W%KY`WeV%EPju1HP8>+&a6Z0^4tTp7RcINJ:>APQ52=N>\UVVj/,ue%J6Af"Y?7,0rPJF=gR\<@]o:c`N]dtACSg3H`ms(X)-i8Ro5WTrVjM=%XWAD076d.sj`(\E-pN`r28+ks9rus&5-/ITG&SstMS7'F=?A-&+:PAcr@k#f>EdcXD[_1e-9Jk`._2f=Q]<VX.r!Yg.#3f1Yd%&J%@FK%-p5pr'iVhd4rB-3o7r`DBrQDC@/C`.9)eo*<CTlWb&VrVL(sa\HiPt'?_!`3]B5<W=W#aL<a%hMcG#jVG_Q@d[@c<j3iU(3M%a7!1MU'Zb3"\@:e6>!nLV-t\^R?NAnJ=DBLPD+(H''dX2e5[KS)MVZ\qFlDulm-=mVGf%q"_kCAL.hdJ[I%+-FecsBdr`jI$MC[)%ea7rp14c51`YL<^d7iCWBUKq)rR6N,>M$9Pa?5H[(O+$U7H$S`1l*G$p[B$=@S$gD(d#"0OnNH"98;(r)S9T#\TX\4f9`<Q>(]Fq%PaWo'jC8\.Oo&frBZu`TYmRG]2jIX7LIB3HDJZqP8WDN7MF*!,F;90raMQ@pDGH/<;H=LjY"NhR@1=Np=C*6>ZM9#-ECt@PEi(WX%:1h'3o(^DA]1*g5/lRqBNo!C;#FEEKF6MsHkj[7GCWN2ZSN"lf@i/E-LX&)9Nh5(3EXnX#:mODF>(!C4d+N'Yd;6XaF6MsHkS3o*%`>lInD$HPo/\#7"SL&T%#+]nFi*n]gp@TP`G9&\cp).tLR9WDGd+QH,C\B8[b+UTo,TGgP_%6-BE#%`6dHdn*J:7r*b^HCJ?#kan%6FmYblZ:.7d^tm4MdOFbM9c@=rp,Lj/)0c<a#')e]?B4M:O3h@24dbuRI5nJjokWfB[N^&jK_FqK4#^jT7;-4)VUCPa)ltMj."5^%F#uS!:C0)DOuOJoUts0:If<o@mc:pa>q^)Yk+'q5*P#?CgV+DhoH(%%:tI@tqWqC0_&t(G:irs$kAf`EIOd&=Y>U.qE^bm>0:T#\%4O@UtMbjt5,c#LegN&u1L7H3!ar;s%#G'a8@Ve@sbfp\<8p6>jARj3Q6Ejit2MIhjM/[VR]42@G@HQVoELS>/\l<kZT_,`g1+h2I%ANMlsjug?8KbW=Q8LtioHFG&2\e,S2U&+6$J=,?=l3'[Q;\g1EA?D?MI3'6dnP,Q2_$0E)hIcIjEfiIJ-f$;KF]qplWFJVRdG"IM%Opa-QZAF.I\2GUG3p#ll`P=-ia(N)R][6MFpL'HTQL5]58?ag*V47g+hH5.gK*9NNrggqU!K.B7FSB6IN&a<'08;3$PsMF1?_Ubf%""&/a:7i9!lkrm9C^']`D)6pr`GUqQk)_18)R/'7X#MmT]XiAYmeg4=b`qc;Hdb@J[B8+V#["Z7To!WqVS3e#R3#$]LVluRRC9th%IA37PmqS!p4!QX!O$uG>UpsQG2nHoi_8P2`o=.,B@qoi$IKPLK(`8@qG!Jfrr.2`;TLAo.:HkZafY3Z>5"4cOpc1sT:Hr%,JlWRV%j50+lHJCTl9Bpg^dDm#*nH_p.QE+Wt`?riI+nq"RU.mJsj$hcc$YIBrZCdXJ`O`F<7n+CHB6K\bC,pU/mum37Q0%PsSG-dI.D85`%IqnVs5Y@1IO,Sh5XB^S[PEe9d*l#4M$#J:!W\-1$'2+CF_0=kT,L\k[6Ndu>RM8ja%F*gn=mA*qS;+J.8&dY9("1Hp#S8mhPN%_0%p;4@,N6C9%2,;7C4U5E9/3RX>j;a/W2a4DrO%u8::gGNnVm,krNSHV>>WG2iH!FQ*iaFG#,'DDbV.5b2V_2FkSVIt;$r%O^iJp6#%(I'k&lqBskX0W:AE1^4010KgIU"nh]\W17.[ZXBkVN=oUNp:Qcn]B?W:rhWX6_GL[OZUR2<)aWTMG\K)=6>_XkOQ:"(%^DVHV#b5%DVb,-9@MN[q/A5(Wb]h6>=4(DMgRKC)6'\"_eHC[h.3iCR1ErU/_?O(Ve2bWQE%2l5+MR3,jWU.A+QG@LpN]1jmq@Y'LP@Fdb?hE%]AXY`lTr0DN7gmc0\7nM0j!_Z78+tA8m"T*H74.#C<+It;2*N;'osNWp'YbNj^Tl].sg7/.Snj1SRlj.NL=%Z\Rh^$s)F1-8Fu*Q%^uhP//KXG@'_-g;0bL>YOrl\Q&\)&"O)>G]osi(SE]>qqKf[QR/5Tj-H_Ch%-L]/]Mb@aDq8EFTbd;@\)-m+s@,))pKWA4Y\/k0P%\BrnL\=M01]"kFU)I&8;O1Wmu4\X9",RPL*1lQ?*WX-bK$u51?E,IF/)]RB]dMJGKf_tY%;X`5*Oa=d6N7=3O[:H*()ppNRUnUo@%P*$+=X<Sr)g0$Q`'scH`k+UYkF3`l*/.ejL;[l#^<nSJ4AQU&#0>mY=X^B6pg3-2iE/G?>a`.8N.bkAD5qe<,kA`E8f8p?;_,t_@%G,8=kS=Nr"_75e%L%G(V411qb3+=1JP2S5o*)kg$.Yc1S)N-Ig>3nY%8:8hj8Eb7e(=0&YYr@T"4#Y7+`MSXng2I#$N=!hhrV`_o%;/^>pQq-1&j;*)60$^`@.;UW^=480'Cm'dLO2YtEE#')sW(V*X[k?rXW>JT7@F*nr4\Xc_&U4#%beWmP$>p*`JW&?bE*7GA(HUC6%I?DD>4ktjB!uJc1qEh[E,lDckp%#i\Bg';O++@*e)!qi`ZlQ;cI8cc$51qMqPO*H1kHm5"-+clp[YEMZ;tV#OM6B0clh\XGmk"6C%QgFD][02@?e^d/UlEda;=,Rr[h;7L]h0]MbTIdtjY16RmC<X]'aZJ8K^"O`^>od5:1aPMp)dG:<!As<]3k>i]X:i;iD)1GhJj6ZL%C.retX]T5gq1%CJ9e2kGgC1\LQa$ZSSp[,G=p"B1CaNq`p[S&'G$!]ED]<:'Q>71ea+(?f]NO!j*p1T@RMVG62_AoPm/(&;)pde6%Ibd#t0^:YuPW=ZLf9(SLSD'B1g5oO>Zd]C%m,`EJ(aa1nVqT++38A#?:NK\$dP#>]ThZX,]'Y`!Q`TXh0o`_IkpADHmFUFkL)"Wi%dnLjr8'^t.4I:<HfiTffb3!"e`u@NjEIG:i^9)j@SC3Yl$Fr06gasO+?T+Vr+,O"%m$)")\@XB(\S&h]kt7;Dj2)U;0AK&tH?%I]%Xj;'afD='\9kV#+Yh!VO1MrWV/_?CbBBJ\=oCT2O9kTbbB79@3ZIs>3!?`.4MCW5dklsOsl($&1=Zi0kENf$jflT-:]Z+bKZWoQX%<EO#pS_4E"*+j'@FCo^&Ba4<(flZia3j[Rf>r%np/=4X*B4Qj8\iJkAF$oBlZK]SFGL#&P3L`d%/>bj?h3YKr2P!Gd>(?+SZg#]r%:Q6N#=#QUP/tIirZskqa=]<J2ODE%:Ze=;C@lBl\0&9,:F%jk^"Cm@$dlCfP:"aW#\TCr2XYlTnCgCamb$.e&STU1N3j\(pEp69W%PZH#*1X#_PZ!LMUVDHDl1YYQ+/Xt%%L5`CgX(TnLjjMi7Q'UWQSUP(Vo=frq3jW'P2eN\)D')$0g_kX^3*:SsAS*]a]Fu\QWYk>A%FCnS%pT`1)Q#78-(q4I`>qBr%SXI@T7_;dh^,iUi$13.gNnT1K4IOu@CQ*mgM5N!snZ=#:bB$54hE-XbBG^*";<N-lQ_n&o]n0:W%.I>Q`Ki2E5Q5g)iAK=CJ(nQ\!Fh3bZHAb>LP(2J;Ms/*(]#aeuV)pWgP1SJ,0P5d]h%D3JrgGp8pPc1uc(2Q:JmNQ.MDGHDF16IC%ZC>Xt>f8!W,2J..g]<1M]]dWe@]\%C/8go\#ZFk!RQEr=g0Jfu,ZWN)F6E+!3$]A"=!`UM2<J&#:)D&(_B).HD!&slb.0X4=EI`d%._&9MEtN]]'Pe/!^2aE/cJip^rG/l]iHdPuXB[)&%GsnC^oZpTaE2X%,4)++#U2(c'*V?&=`]YSNMWRX8C2p'hO)s'9QW>\W8ukU%Frq0IFoHMP6fID3<?oD"/-DR]b^<[WN_.4Ha6fss;i=j7&UA\?l*_VE($PXg`&1gW8X_uWW\_,+RooRD$-X^HIWle+P2(B^TJ;5_%(!cr<?f.E9.qYYu(E%)jd3A0oi$q6"CIm/K:u;`(:80q,qJNg/ZN9W3grN*U.CF<T?s$Xr%>M:@%g]s0jdG?$94U5@(JeS/O6VCA%<o2UXXfQtD!,9KM&l7j1lZR)2L),SFV=u7H9kA:1aRD/E/4-@tX_AYVh/Ki*Ic[jogf`^PXm=hYHGeQrg:5<FmbD>:Y("8/]d[mm%AS?G.h4cji/S@`&h3@(:\`]>%U1m4[,00DA1REs+c8XOH7btSuT6U0S)r>,Ga,k?)OHT$4bosW9Xt3(%M7*89kq2--hXuish/SR(%i?Il5%>hLe#&i(U0itk*pSP?pD]H6mH=H9T_ms^ok-rYW<3;3Y>iJ5Vq;</^Q)[u"!djhQ/Aq=/aWr33.J@/;`jA,He'<EkkHReu%EZ8EhNI=rBW,#-cG@S.X`dV0o8kZpq*b2Y0qZ:qPI>eV[f63to6d5aC/s;Uk.EsKnQr'\slu+8j&GVVi2/LS*\Dje/'LTc4H0q$M%e1Q('@m6bu"`laMMrqN--SBRY==ft@N[nj\KqkUUk?KkllalL=+%t9pCp=u3gdBoBh%Uq-*7r6MF'NS-+G*A!]Z7f_32inP+E9;9%iTXfBkT!PLj0:;oU.KYYng!5hh853t?aph4J[E-RcL$OH<I%6*\nsgtk[4#Q#%%1!mM,+3CY,K`*juM$,?nDo\$9e<%l^)na.dlQ%>^t/WT($HBj.+BMHICi;!@X@a-"6,/[fjj=50e'tJSt',op-?>[`<<1%pSHk"&tn]2VJ#n=QRGs.gNgnI:]54[FStNR\o$u"Rk+$%3%&cJR=@e]Z*!?+n7Ir?B9R;E;4:&,5g,;a3u'0FI3$t2:*B4@Q/rjh"'XNc"R>N<-aa&Kj]Hq$YL-S1XEJ+Y*reYV,+*jppFY]>%5/q?Oc2%O_(6b6&DoIJ>a*NRq8p<fsP-kfl1+ud_g;uH4Jc;2'/Bu2clpq_1WjJ8-d6On;CA*8s#CS3U*]@_TMqR2eahl#-l63FC%J.?[-gKVnWhX]bFM!=HAf]kf0<\ch!a/u5>d:!A4LK:C!1'CY277,_gaX"79E^S1s.kP:G?7hV2jq+;u!'OISBe:1V"64H]8Y7)s%R:QCJDK^#'Mf_OS?+V$'>srD;>q`fJ\'gJsbf@^A:C&[8%eHg4(*@U;rm$`SI'AZoW=.mTX1P!#8+5e3@3!Ku%>QC8@@-.3C)TpT%R")3IUgM='++l,[Q+*h<#>jk\1#\G$Z2e/N;Q?D/<)sdjkDM><;FPo_bmKHpK1:+Gh@=)PrAsCJ]AYH'de[e@VRWmg1K\is@UnG7%D22C?A/Y@DMk3%An>Z>]7tq!FK7hSLp/:Y<D:X$&Rkl8\WIR_enP2r^b!,Alg>SQS"k'-65(iE<]Y@A5NO@&LZTdQfPr>f2e<aaN%raOLEiRh!J^L&.Le+1d'oh7p.WLRHcU5fUjYfbmY`gk6ep\f[W6L6A]?D'#GMI-QtNk%91?u3q@8'E^MGfR)d`[icedq&lm`_?%m%ZReAN3Ii0cZ[QSY"m@iL&DntLF;CP(*'iNH?T&:23IgUo=b(C2!6oFi[qK78)th]oW+E77k@VdZ#>c)5Z:#J$>C7p+EiCTT[lJt>%2R9qG5\G/fHM>ZJ$h0m&4t=0;q,fiO5C4iO3@3EmD(U3nR]0l'p.P3t]l5S;LRg*[o=2fh.[T^?[(_%Z;EdT(gfc>lZcs@jgSK9E%VjdVfQh":L2f=8GNofOh,/%t[)f"VarEPj%[>'&,lu2Q$lte*9Hi4^E)etdfrT8m4^"%&C32O04rTq3a<qfZJHEWr@et'>Ifha&6%"/_UZ/(]sm6$!Z?^=Q0V_Xpkn^t:^9oioK8@a=`Eg%u`tR9WDBlXq3+hRm4`rlY%`rKcqW/oe)P4FLs_os;E(_>V&r91Pp5FK_>8%XaUbbE3A[&Zd5"9.!`dYrL>WteoS$eqlI.^V7W5Pl=]5AGB)Q#mU!ZiUS&F6f?aFs^GXif(NPuCp"\lrqEDWYme'L^0tl+UDT?M6%Hi<<Kgl1tS/:4Rm]qo<]CVAB6I^\Ji\#sX)Ek'_^T[N++^\OG=jmMeOM0nBoqO.1gC]gibn+Bm/.rC,irN&o5G^$`qbBs3=YkDAX%lY!C*W;#haT(cW@X5Dq2nL\gXJD#?uX62V_DtPpSnL]*kTBY3tZGYpHX33T[lXr(oZ3XGZ[bAEDDR.\k^Xl9'h_JIt[X;nBHi98W%`g=3ec\0Y%\,*4S+.oUW2-o"X\+7W^oKKuHh!8VAs3bGTXE:Z';CC`\I'90U6#AaCE7oU:lu2PQZ!Nd.f?[dJnZ:t]5K?]leoIsd%rN1O,hT**q2f&CV^/b!4fr]_H`*A_clfX?<O(iD>p\NQ5k9tN_Xa%%AX^<T>GBh_YYFgtAAnm0#.CSf\IeIA8SsM=ilXt.E;u:-3%3DUF"qCQ2YRbd:BD-'ndi0V"+ci-s0\#7K_98L!ee^#[GeEsqup'IuL,%C4lrTk2,c1S?\n+F"^LkT(3gisN=-,eNolF3,j@stPQ%rT8^bks3GIlSl::Fgq3-`*9gef?^$4a9fF1cV!HGm5*`WCZ.P?!kU,-g9pfTbJ]CC>uYDLa_DH5YIe/cOLV6aViefNKdPt<Y:b0m%_^djrU>RaEct!JN[-\u31!1E0+4`OLnbD%RHPE+?SRhQgrJe%&YYi29+J5YH^:e?AIK#T&[LX?D^7DaUQS5fISIP$/r'Da^hX:&H%ppU&UjGLqF3*6$<B"6:R<IlY0]2c"],tGN2nTg\+p-1aOMdGS)]/^O9me4/;a42MD+5@kqm;[>gq_RY(H5GM2,./Qfg>'3rhVK;;%\GETm7@aB`I+[E7cN72.n[KDX:L8dfiu((k)pdg6^gnh#%19rE'J_aoU>:"SU2hl9*8S:lIJQ:breJ\!oPQ>F^Uu"fCk)EY2`Bal%H!mu1nfLNqp-nTMTs,?-p[O5Un%Mq8,b;^1.3WDDg!]8iTA/Y<;;('XP_[V2_:bZK$)EbcIF6iFUq$PiACuT[H^UB-Z8*%Za6].>%hg5`ka61jSbt+\h6[2D^3T<ZAdi;HcBUs,(Mt?pYo.AY6q3A7HhHP6o>7Btuc_%amWU>D/`%/!8Q`B(]rj__l-Xp1PqW4KaZL9s'%=1t`o+]/HAar`2^VVAiChRV^*`cphnj0mn#.\u+=8FYgKb"d?CX,V0k]01ocLV@G&D#5Dh%i&I8G8#tCnXERd^;n:pS=<sFRp17g%cgU#.NAqHDWZUV/I:GB"V4qpp7Xs6QprMX]!W)-M(Rt)&r+@7/^D46=rflFEYrI18Q5C`,Gmb_7L;'Viab?9-4253K%+E6j+:=0,%qH0"r'8R#iMliUYR>WGQ\SQatSRbObmp?YCR*)e*#H=B:YJ/GFi*\dNH-t9en$<i+W;8j%4k1%qMrV>D!bku5=n^j,f0FUK;s*Og%na_-"/^m$=k9HE3)T_%#(rCGAKLFKd(q$Xe'OE0E1\B[qa,_:VGZaR2K$,CHm5e8\;->=LPsS$bmc6&\!EPRW]X4+sm-"LFmH$bV%4Ne<fGgU"12]Es)'>Jo1j(C;83:A_EMpT5L[gDN@#XGK;`?2-1@bqueG;Sj3Ve@71f\=]!%X)T`]qY/$@@;eBQ639:rd!%?A^\%;%1R>RnMh^pZ=2e[c/I##!=)tlW3niiR(67/AE_80g#G0?3XUm*Qr3K:oEdTD@HhC**?B5Oe)0eMA?HnBV+=Mj;=DE?nC2ll@bm08I%<f_msY@jG?^%(6SE$-51BWdd5&c\\oH[2`d6StSkHek],@+k"b?RP@'OKAE%n*%W9fe]c4(aJe;`j]Aq!GY%G`_;/-d0\bHLkP+h%#`g'JG^FCI3S`kei,AeXiI.t.WX#.l@Bmj\#m\Q5R[qP2p;&(*+hFQHNOVf@5)7NXhN+noJ/+-p"B:\JJQhV0/84Z#8@@JG.;llk%KD5Ho&.eAL0F%hdX&8q^GI5]uJIGbt)*EiX?[QWRj"BqcC)FJ+.H*=8j=Snjr9cB_5"OL0o'\fr2Oq&/oD!C?NBrD^DB4539'8K&%3CFZ3=#XT1I-%+WbjUt"k#n`*<"l;"l1U8&I;1.ba\OdH^,b,*G>ToJg&'M39M[2OqkQHk?8,QejuM#f.d(V&9bbFPO"3K?-m-Pq%mg6tHqfAdrm6=4i)[S%SHEDU"q.mmne#S=N&@P#4;qqlEY2\9\p8PRXh.h_1HXW$`gb+\"VY;8J]+S3_`gri`CLjF0"6i&?c-KPt%_$`kKE[FfS2"8M9!E#W*fmgZ.,cCCqOM<Jj[#2CLRiIGMC$oWQm:,U5n]<NC("H'>GZ[;RW`?Qma](SB_qQ4thP4\8dgYX5Ac<U-%"jLfJ0Ri_ag(fLZb.5&SU;c,M&DVTa7jNP3"K5#0*6;B_GndPPV+6<bbP)Qu\eYfp#B?Gdm&LDG?ENWPgq@5EhL0c5jX\GfL6)7Q%7Cp:f8EnF3a]P;BC:'bT#gc'@=EkY=G5jQN_'FX'I3cItT;U%0<\BcQ9.:qFnsIn=k\p-h.a?^H]U0_3QML))=,!?iQm\l^KQ!*`%T_Us((0,)*J`8aUcOcfH,OsmA\#b/5af_QK\I3C6Tb$(_Gtd_dT?I>577Z-M-aB11gaRNkHpIa$_^\WoTO#=C:qU#8Q1;7fBPN\%%rQ(&FYb0Zi7G%8'ps?ZQNcp@+Zl!/'KC4Hhnu07j4BKiqrTSY>`eSY/+n0bo]q2U3C%F6?Ta8JMhk:F85jC45\D(]j&^j6-T-KS@%07fOG;"+;PDKnR_29GsATs5_0EtNORQ;[gWKJA=Q?%@U)leGgMH=N!*oLL[\Hs=S!">a:1=1Y/OL`mX)Aa()3]\Q2PC?Q.oq5/]L%DSY:flBcQd8>1&tWau!3gHR*Fa8<c9(,=J>hhr-9'"7OgJG^gq>`P2drnLNT2ZQ\J>MF3njPlUTpsMNt=1o,D@GcPC@(e/K4fB+#%V&&Mh1'cH0@qBl!\-um6E?+FR%)V#ThVL=pK@"'e5?7AR`<q(AR(@XVrG-$,"s;dB-FJDO[<&I*"K@48)[DnkUOSO"@mW][Ta%eM%_Bni+O5Z,Y(W!oGF&,45$&ZQ?+Jpc?kfGp'N!H!p'PQglb_(&fNOe))fNAS!@h6:^]L][Gj4rZNF$(_^!mRk5(IU8]RIisAdl;37%T\rOWn&&R1$5/r;83m.$+p"T%',2FC)AMu@I.%II;HuYA`t/.EdG/f#4jWgm36_:/(^`TY4URnj$7J_9!MV;0,qb:0EshF-RJBer%pnZ%'[QPWZkJ?.N;XiD]"]#jY<*j&Rh_g.A=O`KDBXfG+@YQfQ'&kT_R_T0Z>;Y<5!B@W$ne59)$#k!>m+2?2(Rl-?Q;`%95%F^,%F]C'G6p;B/Z)f[8Z"g!_`E):,p(C;A\K"Ip]H)!0W=l=]1]A*Aq$J[[\d`GEO)T`Eg44K]f-3r1e'MhL#$H0LY\=b'B*4+ULnOj,%1&&SanPQ4;B^D:j%>`=n5-9fB".O]bU>dDiqf/qH4F[$!N:NJ`.a8bhdp\tTa#n6KZ;Idc_TM+ZU$&]UWrZ5Gr<?t!3'pH@kEjI%%n(N*<N=a"oj0OK[W(;"bWq'B<35:C"=SYmQXu&0#;8tT-N5jX2;;"!f0>:\61ffI!>Vci\4s[2A=W\37\Qp]02ud>;?>Y5?=EDD6%2PJ,S['il`e*0IKo<%5*D"/7DQ,n>'R5\EU:)&9R?P7`Oa?B)>MT^CrDSLIVCpD7D*Y41o9&6qFX3RdgJF\WkD77dUb,L9sQCC1g%%e9RbpHsaE^CM$&E("=?OhG(\Ze3,pbj8H;01J]@"V2t!HFTp$Z4D/g@psL%8$d4,h#T,(2F^m2Jm2rLO)Iee_R84)iiX@9ST&4@%g\1Ea@BWmheBGB84?;$cJiK3CT(Asp6Z;-nZ&Mp&h8+K5#o1KgjafY,GkY%VSj%+_'FELls)YVGIG&94<j:&pXPrPtb==Zh`1>/e%fG+p8Vgt)U%fY#rT7"MH(:FR++8/K-0:E2eq`^qSD.W)%(332["jaoM98i&jh"BL6*l&MF%![il(IV'=Y@&Bd7bHjKODc0&DQlQf%8E;'HDP*Q!afZf[B;eg*J9'WM>Ql\G7m/tR/6*m_.(,.'2YYp.]oMNCahdt?o0d1tGX)3.A,RjTp&P.Uhuab2`t8L<!6\N7"s*f&%YalO:d<8Orq+bL@>:a))j"nHr\#sJX>c1^d'Y!goQP>#2gN+N_'ImO`$FW1<D;X;4(o^#7[f3t\8%uKr&5;fhE)UD<qZrG[@I;+F%A*h\XZQ],YM2)\(K0d"ji;/RR6VMrPKR.3/7Sl;Bd#(VQpbMkGe5@'iTLX(n!m9c)<mE,Q4D;W=9,7F#cKL<ET(=4A*<q5#ZMu*u%hGH\7PW,9'P7:VT[@:T*`OO/(a.=LQL^_8cZ*G=7J-a\el61\aDV0hj_7dpqcu6`D<).Z\ROHkJ4fiM=BY4IX9K3f*J#m3UM:dj>%RbiP\iCu4)8*;TBTsFb`,98(;,d075#B\#/Yg?;2NPg/I,rIT^=eo7[p<]7F*.SPQ!WMBnhu%jcY[=m]^PepM^MlsNYZk"[I9hY$%H&V5is5=D%1*eW"*/\r!V*-P;Gi6]8p^Sc%YoBP4X&A0,n0o\>F""i*$It(VI)u_G^c/=E6T"]/`Cc:(s6Spe>Wg`V_gkYkhnfUS%_(T]X-[WuV^X$M*6R'9Bi(c)q/?HDsC:7.Gf/6ai+h<Ptli*I\[3O0tMi%;[A?.tI`HR!87sX`8%P@4hFbMp%VpLmX]V0YDm1S6g%5dFPG'au"BMRA@_LnN:/eQOS<o?@Fck_6oB;,G6EEh^j*"hd4GK7*J""MI+F1TbT?Jf]hqn=<<3qj#oEj)2P=qnR5cmMLXt=#=g@%.dS"kdEF#o5OtQhU=fjuhqp$olOiTO_B%f@Y"QE3$?n=mji)Sj+Pu;UY,H:EM%&DBU\9,OSWlbnMEiuf*nmZhDd[?;G`an?GGH-r%,r?3t">H0Xf^^Pe[i'/;<W\00GCTXE&0-`T*`B+jRNR3+/I'`u.l.?VRlh27Hg;K>8tC`R-$ai8P.,1sh##c)[W!'s5G_,9U>)O:%XQe2Q!U[_dPYnAqB&\0n.52\BhtK_[`;X7s8GhC>2Lsh/(_8oQQrGMIJi&?MW2:,<GBrsM,_Fr^J)j\]Armb>s,,SJ@N#AZ'j;nT%:i6P/2qc5Kqh;6fW6jA.>e?X]ZV:8\n.A/V?iSF9XiEN8i$+1rLZZ*8:3<A(rJ-6'4Z!r5I98C1k@\B85d!5p+K6b.;e.KcEtG5n%?2f[2Z-=5$jYW!ZjOt41m->qfh65*jH'E;nN08*"FeuK9U^UV59oq]gm"Y'0rmR-%?ik5"S\n9lDcJDFBFS5o_hUPX%'N+YFW/Pu%7q#%=$D72T@NB/T@1ctNpXl/F0,$daBDL+9=2?qI0VK0KVe9[W*Zni#*aud2TFpW`jue2-O[NJE9)c7pPX((UrV_Wua<;Vt2-JpC%WNA9[fa:gZ,K+#ZDuCl:RmND://D%hC.F89N%V;c@SYe*g+N9u(]%&22$2=;/KIKum;VK18L<8eid2G=njtBp\WW#;(>*(T/9NH:%>qU;@N<6D_I'NLd^:D-j!\\"4m3c]HRCpS4X_mM:NcqtF/_hoNiZripp,6BOO1/P#9)F;>D:>]^!Oo!<Upr>Z!16X0Z3==g.nI&.%:G)C"b#R*\lhCfGcWB1kGdmTu!lUL3>Y0IEc3;^N-'\TGWT%)U=Ah`+SuYD0?;8cOdV*4)%%Lg/gjXb/SX8lrEWD*/^oA)%iT(d:%5sTV8pS%)*s'Ap=q9N`ujHWFN\kjmR,5$-$(HK*Wn:a&]Q[AIlm'UaVTA;2"fZcF8R:f8:!tU&:K\VGeH8CK4@K=?BW=otT0f6?$%ji/P7XRNkV&gCFF-_$e*;`+AI_L!\gK1ZcL)KMp+VUU#OhtC=oJ4A^/'EeOqK;;WI]NcolotFZW7""KK+%%=#]$m.^80)MqQ\E<C%=Tk$'5`>9n<%.2.>L(YS80dPm<eT1hT.Zk9g36kJSIFLE0m%n4F(QMCi0N6a9R,H3mt.$%_F?HKYV1Y#phg:&Yk9+f2fh2^h]i)G%"G)2F+o&]K7#T&d#/LWnr:PV;30#2RfI*$F?c,QoNJaeRFTu7(I=p,FmZUN@&9j#3a0MpXRRR:KOYAs,S^WT;c0X2hR+m)'^``qR%B/g4H;:V\s26E2qhtCS)dC!DRf3maKAk?;j1cHSIhSIc"PF@h*W[oCk,ur*uh]ut"o)`GP=s/knWjcI/=4(E\OO7VJ_0bn`4V]#[%S`>Ohp@_(J#"mps-8\GSgdaoUdU!_dc[s]R=8D$rl*9[]27m3](<Cs2E#?="`?pAE3BXG06okh*!GS3[;]4V'/Th5YC_H,U;],)!%r::TkbpV&+Qq'GSU3b9sm4[Hpa(Nug_Sfcke%eCY#l,s:g@.KNo.WeA-.muRMG`NP$,K4_XtFLN:=N]uU6T%*3<qdC\sM9qn@_a\%cm\l9LVQ+YP3=,e3m[oCY./+(>2s6"E=(^%@<$(lGVU*1Wg0CD0sI9I&Vt!A7,1XRpd,sGjo!j6'&0UV7/FWi(Q\@t?UKRR&-o,g%F'3`@54+aUgm7(\3JV->"ueEK&&XmX^4%PrjNZp`=ACu;?n\KuNAT(Cqm.-Ko+>;GC$L^E_.PO-1P`*@RG;X7h$dP)1)VNDfk.f5%360LN?+8=hHE>^q<e!3m<2rCZ[!0ecl<=R(XHr\JU6ltq%S7/6]cV!EA6R81T0uYV_5\LnLu8k/!Fn9Q,r\r07*=Hld]O84[,*:/%OJV6gi;7F(Y:ZO]$i??Jft6sJ9N=q-WRd(DR@8`$?"27r<i%Hq@NngEd9?H#i/h1hJfg#?9[-QLfj>gDmc?rpBg*WLOK%/nE@4a&%QDp4N346sIRTD@J&?"0`F:bCeQ,T_cP@u=?<tqQt2hR*+/l9g3.6\!YSN*1P<S!Q/[D_bqCo-H-]>6j$10c#;+n40`n<FiWr$Sjk%7tJ7a3$h_YfPg"&:pE!6V&?%_*BobmX5?Bf<66j-Eu/Mh#PK;*9`d!'cNE%^8g<s+oGC`[go50A>"O:FLPgnW>T=nRHPH8+1RI9"%GIOg79d=Ng/KqH.04eaKU9Uf($gl.<LokB`.D.8;J6/QdNHulT!+U#H;6Rh:E,8>?ocIcG*l"78*EYKhV)7M_=lKbjOSJ=k1"$aH%-gNV0Z2NZSUL&WT:uB6,%,g\rBYa[6TAGMI+M!Q_i=t09au&]kJ^:=mRSe3?2:I_Le=I2\O+K"k9VI>gL`\(rit0Wfnt/E=n6!D8%=fPX7^uI@5nur=KSS3pCVp/Mr(Jdc=NP)o2g>4>S4]efad^likck[=PKj3@dD=<`Z@fa>$+5T6O/a&H1\o>W&Z8bQaEC<6=p.Lm"%V*c^Jl)@CWYi7k7\2*j"C,i$-EiWuLN@p9!g$4HI*I.Kh]_:[+k%d2G4,J/+dZFc)]Gr?:59XY-jg#HQqQ-%jJ*s'i3^OP\H%PCC%5Z0!-K//f_B].,od3/?YcH&U$B[4Kp%b\p]\C6`XrnpdqmnR(fphP%ts$>W4nMC.DnG/[irZ8hL4"W?q>56!$/XjmRS,Du&#_.A6%E2VOhP-E3U&J'uK%3JX+6kXX[6P[9*Cu@1SrVD?h<K0f)E8`QK`T^[XCemY`>O^=-O:TIF79Gg>f3-<5^e0L%hK':g":@KSl1e8$%W[miY6,/1siAP<[rWiZ<]>ApYY\FaKjLgE/5:l`[g>AK\5Q5*Mmoaa2H7@hAnV>`*.;^O3dFqY[V7GWQnFRe7rb1[\Db;N8?ub-I%U$K\aYR[hbbfaHJhS!$Pn40c^([(A8#_/rK;;6RhiVt\i(]M.dF1dRHIgBaNZ7>d_;nc;j.k0o1<;8i%5>hse"V]k@$2*=!e=4/C%N%4`3k?gCOgg9d9D"ME_ngk]nSa'MmJlG/5&b^'kpG\N'r9adAK7=L,TQ.<uGp-KD9l:/ldorOf`RNGF!gK5)7+s<'-P^0#B9"..%FM6mi5_CdC6R'nu`FCl*6/Wu=C.:4cd.J;$ET?bt@_B!D/PmT_2l[PR>Kq75d62DglE%ZMV."mLJ`>sT3?5kthhP3n0`(UM<';PT%?q>geNIbL1en?/-Q`W#ALG'.:WuQnG24sL"p?j_Q<]qGd>icO-Ka%k_0tOb7dL9'r6!(S3^@jt:bL[lo*.:n%fH^n^cC#o]'bi>D%lW0/;#kN,Lop9k)83u?f,1-*;^S[s_4'C6<88<A0FJIhZl<?7lQjQi$V`tK-YZm)2"</E@"#(8gpaff`C3J[4rb,W^T'+D7R4*[W%;.<`CnYGAe7n^_2=G60IY+j[<TT[;3"WbT4]4t'g*%O"'PQk2BZdZ,&Ip%)!_D,L?aaM>4(bCg>;)Bd_ho"/0\TF>d\pX!lE'E"*%#J)5D*8F+GPu:1oA^aj&@p6Sp"-#V;,`+9NPd9pl!GrD3!T1KF4/JJ-ngY'>^q:$q>h-V!qtgR<r%oN1g5(2D#DWSh*PRfm.8[ir%mXaQ*[Z/j]YD/#*UB;\7FI`FCr8mSphP*@M3PVb@Pf_mT+s<.@]cC2Mnu,oKB[d/,aW)CBVjR`Lbm*`95VIPG=a8j4d=+sJ/gC:L%jY1.e8%AE,]Ps'kXB=ITASHg3aB&N/][LbCNoD.UJ^n=CGU6K1Su6k:9I[^OQ<g$?h8m_EijJ_7a[&E2%j;/ga5V99+_W;'C`#,G%\*pL;`KsA1aOi"L\<<-<R!L-\Zac!Zl64)Dho,!r:Isf`\kt=\Y[9ZiN)[]b<a'05FKpUWr@!Ts8-jf0,jOVc@fH]Jp-"u(R3"?l%+TN'/nlETc?22pHlQ[S*0$;Oa?9ngdV/$Ll#\e:fo,COVBAI2aWX66`<a0/0OH50:XG/B)).30I9=IhZC@VZ@SJ4=Bh=H=aa&aOm%C6eSTS[fJ4DGFF^&?.#sRcYOVXC-bd_5In/,r/@%0M/"\$'eI/dUGiQgaskR`,tg.:9tLS_f#Z8E>`.LWVW&PA-G/%2BL4[4a'DO%3(B%gf"i,#3s*$lAZdh;4#JFd38"9doqMY'?CMM:+%9Ee*Q@@+"Z4@l))NWb/RI?ne]6f**,6*@7WNlUg\Wrk&rn[#Aa3/=JblU7%jWhN\##KcMMtsGMahF-g\/GXHlTM,:*hL<b55`$Sj+*rOA*m*NU'5Wc-%a4O3Cg`2W[Em],Jf4Q5e:n#>g]m/HL@s`q["kJb?dm*%'7CkLPA$kFR*J,=gX.uR6,(^PCQTIP$5OiFit3U`r.lRtT#^UC<q]rNY$ci[O3E=LDj41o:P7@;o!G+'#]!dH__(cfYPlqKp6GWu%<R$G!r_n*YCL36H^EMTpes+\d:$#&LLq1sHqNT^VWu0\XKd/lCips*;95kH^3DU-8XW1Zbj-@&i6m[B:WsG]Qg.Gq@ob'8('%[uK%bhsb(X#Ll0I-^8=cuqjID-b\2Z_HTdATm5!Q4T!I^a!`lg1,sMO*3CC?.ZVnlnam>Cjf9fCYR![A[oK'#;2B,2,qc)'sd^Kf?RB=%?YLmSQsOZQb-+V*cg8nmX'9sd?UD?B/[&'Pn2bnXU'L-N^58k6oN'BKZZ):HZ,sO(L[YY)X#q@fEZ\p>IZN3#^-\.N4jTXbpK5TW%_I"M_Mm1r64eY7TrM.CPP?jbNpn'_+=?T+ET01sIp;H'bhX\]+:]A[k-^Bj?Dd#Ilin(MCB7)H%IWbtQLhG<QcQ;\*D9s>i`gtCl%kO3+nfUDIpK;gfiNG!2#a2dF4U!jpg4'lr:oQt=*@>4!nU6S*(&8'lg0)nm/YP/ui&+8u'W3-BEb!$f,NAMY8^gYP*4F`NBOfpB`%p&5QpKkHem3%V]"MfNG33EabpJ6LrTIS0=+p7h#P@Hq1[g4mj(nC8QG2m\Xoq8q$`4?5r6p?lFeiKJ@b*5=UUfI'tYcgJ7rDq=^*%eC[PiruE.Wkd<5l-a,Z-,'RroP)U*12E$d5_080u]0rFNIe*`T]`VV`E:j;,!m#ZmiAPi(9om_)7]C%Pj7V^-'5lITlG$`d_?[T6%'pO'D@j)Ir/,!NUO)_Vj@-<FH'd*N.B^(3B9*_Yr#Wn=L,9Og=/Z*n4=&iKNW(/j;oMRqq-%LG%B[6Q0^1I#jMkc+%XoP8r<"IW^%;G?[K_nZb^RYqEXi6.N2amI\F7Z.@M7SrTrru0POP'XM7)a[pAakLhncI.+o3++jWH;8t#-K)7=m7Hr:q(P"cT??`Jj/CtrJ=C,k%;RrmKaRT9uT=hi!&6!B8kXQR5+%W_W&9Ed;TWM=XC(ZNI&[JaC\]E_!,,VaUG<9`ZO8N(bFHPmc2q-K%IUHp`kPT"sO^nY"C@O?&%efL?c^2/]bc=ATl4o^d.*G'/qK6qW?5jgZ)7fDt@Mpl6rmT*:5QZdhIeVN?[!4)"A]I"O6;?dLpneZG(CdqB46EO$'0TAV;n(;lj%XkckD)&LI;07$atb-FO]/3pE<Qt7mYm8n[ti8Lf[ZJRDiHeY'4[RWh;21D;on!!mRhPgcC[+M8]^S(+PW=BB,q3pV58-HckNj*Tc%HR5s4XnN*]!k=1sAAu.kdhkqM\rdCb]_WB_en0,i@ZM*E&EO/jF`?DDR"J@7?+nB$%L;l>f&]i1g-ocON5!c.<Xo#_Nu(RbL)f=W%>bZLiBVLS,,:)Kp?KA>(_e,Y1%1n826\CLpr']8/_DRs.Cj+5]8?qiZF_l6L0g=!+X_/Z09hm_RD0im.*Le(+C,e4o%;-]NSTIPQ%&*l@Df^,DD4SrnWle(R"@n+T+46tPcUgnfCb$*+P2EU/*He.>*c8mk!^uJer=iY,%*A;ZgVMhd@c.7O@XNgF.FhHFRY&;QH2J[hh%2qN<*Z.VF2mS:N'jK)k_e$%AOf!/?[q"3m[Sonjmd]n,pot&F02X?"ho]u1?F_l6L0uhjLcT3t"_!:RXjj,stS"+T%Em&TrFf]%Q%4m<enCoq=jS"4Z6g'R(WB-!I!?us3]P%Pf)STMO:$1!mi*Ll_Qdb#Ja3Y%XLFM-*0laCFH]9:5cT64snd]lH%Ccq#ch/a^dcMr+7%iW&=+KU:P:?tQ@r67i.']+5t_1+b,i%tSE<A1&S6k'[M/@rj^Dle[Cn,#%/Q=q%TQ+2VO#CK%o[EK0i,*l$f*MlZ54+R4[JL3djd%eo!?ir-hUce!\KN:a&]^F[!EiC?&*&m,>Y=57[Vs5?"kS(XcV5O['E`.'5Bj!F47"#JJZ=a'Xm?a4!Aa2=1kYNU\*/#)XJIWjUl=%2rc3,l_s6S2h64lePU2U.L>njFk"=?L\#-*rt#/"bg<P/%i:G?6oloEi=B6iU2In/:6Yn_H5.*h'UOp?%ogIpd2tsK"#N8(N>hZR%&\KLTO)M5[rJt$5MV^/Xo.0!@".X.fO;)26.cD*F+bkI=EIjo7l/<8m@kt0iJ;fqm?mq^+d_%h;OtiP/8^f`b(hlHmVj'TLU.<u^%<0ZNI:INoQ3^Gum@^K:+B:hc#,V;X9&LCmK!@;cb9i<JR@mtDH(F7+18-uDo02'P)-'GX(;BiGNFLWO@`E4G_*A=(`</eMg#YL6!%8-p;nY)KfZMQrmDN7Cg!kVIjU,QifW<g7'7Q=`8k3410R8rV)N$9Xg@ZnbHW-IPL#(7JZ89.#-RR6jk.SQuh9"tGJ"=t*#j5[QuE%6tO#/6m_nkdRn")X%$k:r'5hO+NjJAoj$Q,!n\TjN(ehsN)l\WCk14Pg.S#G5nrQ/TQ^g;7(X_CD%e\OQd?cZXE!g(F?;c"Nf%@.%0TiLi"I%DFK,<(a(^9-Hdd0=*5/e'^Wm.Hp]L^2XLbaFT2'e4UM*4^P,aA/(N)#hEN-7cuW=gF1(aeXI`5cOCp7Y$tRoJ^00ijHH%"X9umWF_kJTf,;"^m;:EVFXjg'#SRT4cqDGl7`pX9kuqecYQ_*)#I"k%%AJQiCG^--#6/pGHrtC&n=iQ7j%9Y$>B"85c4aM,T,fD%&SiZ.86?Mg,AC%P7YQ_5#oc6`&NM=NBMVI9KJN6E7^=;>hnc'%UOP)0Otm=M3r=LS`RH(m7S+b(<(<fT9!GQIaD=3M"dQrhJl&KJ%B-`M["JpcP;FZd\]h67G!?J2W5ne?\UbqCJP*($AnXLlBF@&9BP0/?/b(c(D"[O#1ogtb7+MkD#Td$cT'++h=6ut]C'Tm%iOapAr%Al<0d,SccdTI&679[G&L"dEPf2o4-r&lWp>U":Q"`!M^V-h0f\'%RIo8PgV37ANRme54.54fP`b,SAEqM*BkSYeH;F;SX\08SLE2%L6Z3]P#UOeMW#:b;b/@G*)`ft8^TDHMF=k@aN@D^KFfGEQ$p\"$2q\$Q=B&PWNn\+Q9m'tp4E_HPep!iCaGkk\kB;^OHNa"fMn^;%C/-K)SlYNH'I3.T_V$=K-t/p>@[oWQf$knjd`Rdu\-/=\_5/Sb!QBs?3R+<hPsqPV<C7?#Ko--a=]Qk+9opcDlG?("(b03<Caa#7%ZpDZ/)Pb.Vb*6X?=G]-^;bD<*V97rKP^5`(<+08,!M)f]Pp@@`;uoP;JHV[T87H.F&SYQ_ctPUX+Oo&JAb&S.=el>t<)U(cR3Ei;%A.?YF+%$Y+3[uBD&h49RYp'32NIFBn-h&::5+*T2fDn:<9F25#>[Si\?:raKAC*JjjE[R3IYB0k5:4(2>j4o*)h=[8*6FF1JY\Ou%&lAs(CoPKt-@jS[$rO%D7)M27<""ni<222cb*#AZaJu3]d`)nS<^8^3<g<iV0Kr@?Walu1Wart;)9NS,)&/lVm"l,rX`dmF-qc(L%<L,'Z=WI`YT9u?LJ])O:-SfHEap<B_UQ8rYZD&c-1/``^%7Pq^A<*AiMHG`+)?!0ELHo>>9&b*n`#`U\A6su-Zek52b+O^E@ZRn:%][@Nu)&K-7Y=O6@aFL*e?qCPrrJDB3.eN@\&]$9cD%\53?Yk>A,9\a.&SXX72IB+IY9]O#bnVMeRnB+L9[f$,8*q/GO>OihebMce%7D'4hU,ldV-$=gh&![H!^/O/FTp@,1TmTAr-oKGSD:S^oe""j%`mSEnm@tA*1p1pk;X%NdP**HK)0o1X.'[>3Za&KpneYMGBbbN;%XnB%VCrS6ZBm%*DL6t`TPZm.94trQplR23)X\+g4i(CX[65c&ap4T_"/B_]-Xs,>oS"b:-Lp:TH`R8Bc+XpR5#F4/'!^OnI8LgSQ%&C@DP3au5,*3:_pPoRG7"O@u9@Vh.j<YE_<>Z/O%POBWnk_D9#b-2]sPTl["KG#ab'+..!Xt<X.Q?^db-B7jmq]r"@T,8kF.L#BB%IhRNhdK,)!6('_sNR\87JVb[=e.`L"$7\quL.bi=\\Ko7/)4=d<:,I,+C<8@l7I=Xd*R0F[3RH'aYCXH(a:t;Xi7@H<O[T97GhUf%?'*EC;Z2Ol(c!=IJa-BiX:h\OFB]2%,>L+t\Y`IpR[,5K3f8AZ9;mu8<b;?%B]rUHB-[N,0%,j7KEs>3UJkog.*aYq3\I2XfP$\&%8k:D2!0e')T6V8"Oh!5FMUj1)NhVanHQk"5G\0)R$!fl[;M3[rlBI1U"d5,7'<OP/=G_<&1tE8'$)E4T8f18P.&$p0W.IVqK1T%_%5ugZ6i>>iSG6]nrkbFe.(SQB4PF>:G"drCP7D6PEF]PG%%CR])MaS!]`Qj/M6":5=ZcK098eF09Cf+Ze^4`GlJgZ1r3hV!8]5"E?%P(XpB^+f#bC?%[LT^`F]bc`:k1FO\9%ZE#s@?gU2TR]532NpVNKd<Koa+[\b4;U\c8;_I5WD&r&/3)1p,#Ljnap]TYkZ7U::mCg+%Mu25"95`e4?h!uKqaH#TCp'82c/*i2Z,o=e!q5sh0b>mp6#/"Zd%,/Gj)t:gpQAP><0@,i,71^/!?THrFcggHMIa'h;RG,I>dc_+%Bi'A<bTUVJqdqdr"RF^qOqA=oTN`;:aDA%+Wqm^?'V4U32T@<E!M*YDRp<6RYfqFGS675<3AsSi9Z1WT:,sCE(KSN9W6d4/8A^g]%H-pfE/;(15lR[!LdX&^n,"tlEat<hlWeMhA#u\:,#+bWj3Ak8\dAfW02G"97[BWHHG1%uWV@QAp_Se<A:/mCDlUY'i3.#2Bb.47h%-*.`%&h/B:'iXFY#*S&2hD6Jg6?Z%$,Z["PkA]-=@g47`Unh*<\Ng1FmAN*&Xapu_GF9(U\$(E4/m.1h\Z3^]hbMWX)BGe7?)"Ub%JRoQQ/l&KeW?jL4+p/?5pmMRL\IF?,[8eS;`fcI(fJ8W;/u8HK)<'5&.B-u<]lCa1`YJfA@T7B@Sjq"=FBZ=REk6:25u!nh;!B_2%5#<i9Pa=+;'dK%\18YTug6G;C?r2G8KME[;[s0;=bO`?V02&<F$3jk.VU_>Ir7i)K_&&!VeFb,BYuV2IY+8#T`^MD--RkpUZmJ6p%-l&hA7'rO]8Q#.E!@e&`:YEVYs"Df=?FJUl?M\^BEPt]IZ+)Fpr4daQV#U"Rq!0NhrctTVMn.;=aCgCJ]F'7f=bDIQF6&H5MuHpB%q`]DBfj96$lJ.4lFNeLqd'`_efshb^=9(*>\AM9i>]+9S-:+Oe6pan:%StPEGjGI`mnB2(bX^Et_J-c@Jb0@):[ft/h9-n\DMR;;%I8#kKP22(KWU)DU9J:OdSJA)H[48;Q1R@Ynp0Gng_jhgP.PCoH!CTgtUh*FmE[^&3El0LDTcQ:nh&t]VKc(X`!nC+1_#QPNs)-Wp%L!ZPZdN$JS;.?C2YO-BGI8#n)+(d3?X$&$4ni?9b<o:Buo?p`MR_?.Jc=b2_o>B8tI<M9+^h7N$l&qo]UG7e>f5W")3KM/A"(YM5%#c>Jp&^1I'9gb<SZR3D;X\2cEEF-:&*ja#Be743`*CU`ZBD=T%4%!60obmH7Fb6LPo,TKm67fE6b+=AKJ$aAg+jo#3+Gho&32n)^%pd2a+r$osEkRYK5Otc@Wbr%!an"tF'%%1ETMn,>hg([*#"LMDJR47.+`kEs\j,>+DYnX0oN,]K2:SZGTX6^(I7G=bY$r[kP4f`[L%_:/t(N3W;<Al:V9A*Af*002"hUWY5YT`?*jM#\A3lbtg=<+kD>dGHNm\he-.d3$PM2?XSW).?`LQjCT&c0AsR2`XKm#r_ejMCmJ2%(-$E0\!(pm3hUa-HJ@)bFR7AhNi(uJb.hHGc3`/7CL0`'*)MuRHOj.LAS:U<KHuRlL]gFJJ]:-@84<TKQS8Pg>k?EL:.VbS-0C'u%d`!Ts`Co2NX.WU&ArbA#J_IcC3ecrpMCu:7Gb3=$FA=a#OeJC_ffr8S]dDFVKK6;s!C9sV``Wo$(F7i!OK>_Ore4nM%Cq!XH``T>%qk54].<>.s1Bm=cCN@KoXMn0VFFdVul7=4NTDJt3BR>M[8$-p,,t[38`soXeHbo%KF9'mrj+EgSm8L^(j263:`"hEd.[qu"X^,\B%(U/$Z8[?SC-nC)hX6d<=i*uj$E7T%GV33:X>_R\_I.oTo7hNdi`c,0jY5UFgn_*Em&Zn]"l:Fbb&@-5L)d"@,@mW"Q<%XRW;>]!P%k_`@ZNj1&W*PnU4P\[Tt;3ep8TX)qh<E"BulRBs*T8-HJ&D)Om5NWPT(fB01fQ9t>H'R#:/!mr'BK-?Tr1o$P=-0J4c<#B?SodsN%SZ8S:RYocBXGW!jPZuB,j&rVkWG&Rp8G#;?[K]=+0U79A*TWls,D^GmR20?Z)eiIbe+,Lc8bm8fk"f-4Rk@;Z;lWrP<3ENS>n+uF%S9gfie-jpZ5NaO\'2R=/ro$8SVdH):GAl;)pY=dDNNGF9VMgnfVB:_5I?S3f_5TnLc5la4!!>D4AS3euI2@u7:ee'SC6<bo:(lo_%`*grjc+Y_V4Yl]gQVG"N6a2+$^;r8fA;Kf$!I;m]\7G>5g6-Sng?'`N/<=^`RNm9YC&3K71n?=lE@M:\p)?M14('FP1Rbhj<";BE%OFonC"L26?DMp95NAT=*^k/e[A?u<BTaMjN701Hfn#B>FV;+2(E^_niN3Jho8bX)o\q")bF2$WinYE5#9c[B]n>!4FF#$aZMc4lO%"Zn1l:,b&d3m(<&UCs*l#7p"k=A6G9.KF&e!@BC#e#\Sn9p-45'nPS&'YMU/P(F,]`C@e(6H(ClmiUMf<ZR&VSWd%#UBQ'06*44"%(=M\\fW8F!,FOBD,g3W\VeQ$(YrNpHAp-VbM5M[pW^17/.uIpH=3;,@19dG1"C]$KNQ3h=:EY#XRTb0Fc-CNKBLG:9CHE`cZ=m./%a^O'j]BESa15<>5#Ri^YKPeQ8GiHC27f8NA;El9LM)l`A2')+BSlQ/EU"TOgH&02$=tk#uP)QgZg-4^)!94>e`'fdU'/IGidh"Xe%?oe_aOd$;]_=bq*s%PkcGcU%]=(_]:<rhYhNo^/#Ca_a\n]e6KZ:C9poI_R6g@)0hH8pMF@^d\YeHFVliW7A,>:8iqUabQ76aaim%%M0hn4tgmFJ88rE5]!Q'!TY,,p)6J^@Tp>EbU1o+_Cc!]"t!I*.8`frb&8%XLQgJ/,Eo@dCHo^u'@)$V@j2>"NAXe..=*\I]DoB`%"$<b4O25Zo+k0(U&=hCoJ0!-J%%iXJ+E1#5*4gt0-")C<19fT]J;!'(C8-ge`gm0s'k]_4r9eJT?'C-^[F6XVUaUa+Kd5R\EM%'#%nnCQ[:b1iIatTO`8b#X.SJT_C1b$T[M$oV`lm_,\4V!(8j6Z%b>m/m"".57icZ>V)Q0e>u@M=W2`<a[(muF(KMh`)W]C;g6GILHA%8T7,1L99I?3J?Ul,nK'QeBj*!d",l]Cg@I-VsUp^=W-Q>DO2'02!XjDWorE!<8F"(_pIE\/`c?(Wa`m)9&7i5AZJO9$c<QO4>1ZP%k3!L$-c:-,-kQ!3q.DBJ0p`,GE-m46q,KCtRM&jf4EsR,Ge@DFq$s$3rnVl7b1L"71Oq:afd??W)Lb9:mO[sK"Hf"S\Hp6F'6h!a%,ct)-o]17UPJK5PorKZ;F9'tML$)A6O<&6VQ6%bL7f]<N0SE-Zdt7d?K$B`gD6o1?2cS)G#'0<-CfH!Yg@P40nsbUe_$gVe['\b]%4`RX-&T<LHkUT6)Vg+4AVqr%5@8^-%a\&1q5u.f"U%':njKu:B.q6i0EQCfl$K*(PPg:q9KFg;`B]o]q8?2C-MUO1YHDCupg9Hm/%pg0I)#[RPA?9'ce'%i/6%C3M(p^3gAS7U9f-,i7H#Y5,iSL=(CYU<CGJg>.V[:-fje&U^6K^Y,##87b?2bH&":]RW]i8H\=(/nj+%jZXh:1XInX+rOLX1l&ZsMWa[T-_E8h>%:mg85t5A)GaRpBrmYc"fh\s>EH:o1(.gk01W?!R[L&[J;aaGR-2T&Wg@fOLmueU9GD(+%7E&5h`CI0.#&IF#Y(RN\/LSZm:o,H)[=A<K;[o\'Yg,:u<ba2k;`lO`P7<75B8?t0^8R7/3_,XLBGM9b]29><$S^H6H5(#bdJ8[W%`1*j3m1*bidO60a2>#oc@mBHkA[>%FpJT!DO@F+Ygr61EF+g"/\dfbcW*h>oQD<7TOMh<:S<]3V+PiDj-TOZT425K(3keH#?sT&U%%$2oQ4DcMO#'7(X;a;cQB"=qHOMl@AVMH/]n2,M"ji0Xhd`#q1L+"cEHJr!!bAeN*Q7@_F(S.:U*c*B`E"\0=94t#]0k)p>Z7',e%l31^(<0:F]aVUD3K?,-j.DgWZ0dJo=:719JPlX=<3RZ.%X<LCtF0a;s#3NG2?2\iYij7UcJm+$mpm>dD(lI`h5V9>[-!:.<"j;@@%5c#.V@kF7G#e24NE0A7]D&."W$JN-448#?I4'&SW_HMFk9qp%B()<$b01WnkD[p6d-t6PDVQSsbHKbpr-pLBt!-*^;n]gle^Vl&3%YgpDMB^3RR1J@"%S]9&e8uIaCZL^2U2G232'TC5@9q)m!0cCk*h,ob,U+o4pD.cu!"`@M.P$CVsX=VN1bdtqGG@jYk!^/*"NQPe8%bct,P>/_G?,%+G<W#(PrJ'M,C-D!UoIFcHZPgiX=\h-O7FtjP'Yo0Nm-,>-(q[B,r`[<Q<9,6-.h8</^"kVq)M6d9W=b;Bn;$_;u%BE[Et'C//pB$W6AdEBgpit;^F%FkIBEgtEgSWL/H5^;.O!\@FbV5P,[iE.6EZO/<F]MoP?4CYJ@Oi6DtHPB;'3^rFpSTLD*SgKlF%a\$7[2=ROj9OII#-!>?SOnfmea@)[S1E>-VFdppD>Ta37XMlkW$"`@C!5XU@8ZZW+-^d$C5DLgI40=4rBi$!E/')g4A0Hg0FDjn0%FIC>b":MXae1_M]IQ+M(<c.ID-b&CIr)Y2G7FcBZ`Ag7Q0]I*7)%4]Jd@HW>A&R?G:f>5u]E5!h25LCYM_m<B%4In%hubA7((M%S%*.t$s"`&O\Tfm76Af/W_@+6Y,;&>16<FR-\:[M<rEBs%KO]4.q-.Eqm*/f#e1uWO"X#/Tu4iT[5Xa5t>&m.$Q:mnTT4R=3d0q<;/%d!$@fI>,8YlC9N!'Mu(N;c(dhX5&h-^drDi?nJE?`RHpGF4`gcdon/k"pG'@EriiJjh//sr0Oo:><W]kd$8L,cnuU.G!p*#\Oiq/%WXof_$G2hVQ\BmC#/`dn*jA([4P#U]QC3j8S-1BX.#;`V\9TBR+,$H@d/9)XbeZ58kVjGHk#mIeVomK;2J8nLS-7PC(hS/0<F@#,%V^uWd>FL\MqX,ugK>nYBXAS"_f<1$]%C)\nf^c#ma/3kEUZs+#l1*H\PTOBl-N]2HL*Nluo;mu5!\'dQ/I!F_PGQa*"J`+rXEdgd%B"Nf/Hk'@oG$59me"B+5Y9<S?+q&,[YA'QG(9iQ=0bbDs+Q2I!Vs"UY:6+\p4`;5FD$6_-N*j!Y'F5!-#YVX&/D/$r&hmp=683CM%,l><+-)"I'23PBN(?6V"W2q"^?)Jd*r@ZDR0r[Nl(gu<9QJW+*o$+,Ki*7EZ=5TNLGDQhfIT#(C0H=b?nK1-a8UY@Kjpa6,Bc7!Z%+cN%H^0j/,%LmMGfORj$4O@(cbCOYi0,>W3&02O"_*L:mHl?R:8&mg8YZ2D>_:/r[7Ya0bP"LG6bX%/s@VI\7SJPsbJaV"H(]B0?%[ASdWqJ%Ni2Ibo"2,=#%oF#t$/k_0+rX#W'X`AOk'h%a=O[6U"bE'-C(BP*[8TlfZUkGt)U3>J#?(45i1Prmc,tA1-.p*d]'[a:$%5!Nt,IMg69JOPE+T98OX<G'DCg(A.!9m]9(.Qt9ZB.5^N*i&Y),OT']>`nqLLpD[E`HKn0'9HU7'mZ6B3GE]amO/7E>2s^3;\fnn%-XkS<'8r:]1QSjRHd`lGX?d]U\gkXbXXUA7Aeu-`gR5!K=[cdh(Sn*=cE""aIu".R+!qLod5?ek7#i5Hf)@a'!e'Etm,LK55g5'[%d<*15LuuP-2)qfp_91+.8hW^s/d2kgP[RHX16;PVC"`kaCtOJodJT_e"OEO441-_ajuAY^e7)15fJDD3j+DVW@]"t-:b28eY:rb6%G1OY`FWckDYhOUM"qnoF4s+\7f#*Vb!5C6AF("W!SoNi3X>2c)b/]$7!L+=(naIh,#q-K4O58"3q78:'kh1c5hjk8'`9G.<Nb>t`%CG`)\a;*T+G[&"l(&gVb*jT1D#bCh]1mP+=4`PWQTg@G9j0p(MoKY>K"pY3riZsio5]*t&pOI0Il]g`D)KAt/=Vg='d<*56f2:n0%cI9/7>L6Jhap2:V47Hgo?0-@lgNQMPVidM7NpEoYBK_U^j!or.,=D=X8*;CO'5oYsV(V4!At##5M'h.keQi]8SKli8?Z3gL6@5a4%0rtH<o\i<^`SdUA..W>u=W.atd)6=E\>XM\^ofX3BEbZP7D*Lq_h#)F/dcR-Z)@fJl!g)"(Mn_EZG(,[q]rp]+KiF=?h'J-O]=9p%d3Ka3QR0NL)/LPk-Xpb]/nuf//9Zp%8f?`M^nYa*_E!43[P76]OJZ2T[6ZQY'n2--cO"?SPrX9NeTf[c8BsPr)2^rdC.bn[P=;01%KrDBK*(r#$4"!X:$S6/2g90]lUu=[iK']c>cR#FCrjf=-Og=)^:Vm)5[`*HZ<2Y6Ml4G57a'.$&L4#e=643E+fA9U1RgqZR'YQa:%0XbJBkQo>68Ji-:7t5+`\G=Fd:qR;$2X@X(U%qaFEuKW6W3K%;YbXN<.k=$VKl_EpGY,VM8f=B;QP<S?#qnnS=26f?R=cc]1'OaV%n)LnV4@cd4+a6%>pF-VBC;*NIq,Z]:iJN@n\2>.g=Yj]i?511Bm(f9Rf\g>YSHg5Nl49a31kdHEk#0$,``6X#/h+Mr6!1.m#ij@m%ao``qh1jR!DHg75OPW9bXubbH6FLCsYeN7uk6M0[G5p3-`L+l9DYs;8_Z[)&jMF",E#5j@f>!TrGShW2fA@!?SrdS-LLU*^e7N;r%`g'<J$%QN?G:_s+H?_orR.M%-qDL+G1I%V[+:tg^.h4\4nYFjsKHB$\lLSH!-j(YfSe=S>pC,fiq"ttO3<=[9-?cD#(bH>uj<2sa%nnMd)TQLmWfEr2dR:dA[X@/`pck6c7kGF6/!#cIuU'E]*iEY1_Ss#Ni,Ktp=$O!%'NOOl,L-0*pNj-hrOG:P\VXfIt1>:D<b"^I9%hY,T7`H]OlN\AX#50_H;6S?"r]kO$Hf(!(NdPn49g!1rIR\".mjI-]E1#9L#T#G?>AR+Kf]WYFXJl`c\4tW@g%7UVHnLt;>N&VZl%:_t"Inp7[$?KcqO,!BDDY[WiU&DGp6R.Z%ka!+s$[/b#6e"XDB5hU9G="!q/Mk^tc/hI04N@"e?'ELN^:1C;_)V*>fVIV\lIN$91%d#(52/3&]K-8T6.9C?R7X+K=`&B6b?`\-k]CCh6eI(+,RI(4>t3FQ&dVWMpI76bUkbR)IEAFR.7n&u0T=p%W<'?JGa+T)hpRP(oT%\"*XsAI/KfY8b22.o>Z2Y\4:H0`^go7SWpm#o(Kk9WJ@25s-IdYVtijEtkUs#dqlYHC=ZdFmZf->T(g?lZI@ZlH]1kLZ,ZIJBB(P%2GjPLQ8nt*Df-uOJhp,i8=i+EQb,"LRn\tsGQZ$91Q6HR_kn$E.9W\5V1i#(X[q,f6!#`7B?K][[\\"gb@@E+/MaaF6l6:JLd`3r%9jL,EAo*t("P!_2^M5TjYsZ`VD0%uU^<MKQh3ML&=1Fhgj[n37+=RL.,S7<<M+ho*2hP7n<LMjH+]L?P>%MbEK*[n\(sMONH1B5V%MU05)gf:0)3?1IlF2g\Fd@@NaA1Ua^1YR?+RElr;?[$ff08@".RQedR!4qhr3=ns'b2C9!apA3UXVeN=%8iH+Yt5dV$bMl:FGekq%`Y=9'b7":Xr7"P'BEOP$6TIH:Uc_uQV2G[:7JsQ2ja>9/D0`W+&@EOF)\b2cbWVNN@!MDm/tM?1-o;W*+5kA>kM#'MFOQY7)SMPI%aVVI4;+`SmNKm\)@BIl.ZV"bcA%NUPg^%?2A8?Hifsog4=#1a`^oYJY?U1dn3FD=0n74fg`PI/H9G7_Dj+_F`TR1_VhH)/>i3nlT%Y1W3)i9"4N/oNR`<YKI$e$s?\98ep0*2V`Y0OR\d_=SEM[uH+YdjP?O5Y.jK(,?$h<GN`#7?q>^:gn=27C42kN3[+tTJ=Ulm);3P%.m=VBU8fDnqSUeS8(NSrGQgXhRo9(uoQ/fr61(F0%8]\@nhO;OgWF\RXQ/$3Eb']u6H10M6P(jm_kN$!,#'Sa'Vbp_,%?5gY.p5S%_;B+A.MGMoW_>#`"U2_S-4=E3RXB[uqWE7FBAuK`fc[VXSfjlqIO.#Id?Dob'7XRPjg?H*m[5mE&3RH7\8sb_VQOO]]2W&*:3^*]%AIi.T,XKVcp!Z7>.sa#K;u?i('&D]4DhFN_D)\@LZbeK#I+V0plmoSoKg-0(LFUV,2LO$m8\U+.4,]-ZH(W8Gn(2F,Zsj]9?L41:%(^&`=GK2\7<U4g87$Zo[Q&R;/4B>*6<bOu9%f%->/"[&h$j3Ckr=q8t.LBa19O7-eG<iU\Ai!SsXJ571=H]].8eN6.q)n+U,,o\&%Yef;RbW>n>hFY4X5c&69&\QJ0,=/WE?GEYYSg0PWjGjFD993[e71`L]bJ@^d=@d[reFfcA'?/Q8Z02R2!%k5q`@5j%'XIr5]7Zo1%`o?gC%"g0/o2V?8,lY.!hg!sW4(^-!&mc&U(jRmBNfnBH].B$,"U#%4hC#\.gh8Nc"CD-^"d7m$EI*mW<et<f6ZRaR*d1'C",]r9%M3T&OP'/ed1p*c';an)?$]KWLBIa`_K+^a[_7$C2$YfAHEW&hQ;-tR4Ed?eI!=@X>]MO-Z(q=W0oqraDUk$@:"`=XAhe0af]QZts%CP+mo]J+obELd.3P)ubF(eHm7@Nq6p73R&<^B%""ghr'M@qnE0`naS;$HQ");1of#31L?ZlKXT)l6c%,+X$UkU]fR0:_)b,0,7"a%^=0=_.?CB*(#LTB$'dua&on-;Nn,>;RHNW[5HYRXXG5d;8PR'2!j"jgg`E\(<0F&u,djQ`9GQ*D/?f7LTWLnDMcQWEapPR^'j=/f%^ICI,nA:Bb+6GE^<l^ZZ.4Mm6dZ*EOlD2;O.2k?8^ZrV+=4VXkZ;h0O[>(F^apPGuMMT+lWL$`rQMsSk7odJOdoli%6Dm\CGW8.[%SmnQ^IM\Uc=_LXkBIhSU<G*Harupr_dW:/70FHfN!\)oFErjB:)h9FFP0Q+"]s9n8i\R_o8:&W:bDcc#1ea<_BnDPaRh[segq!K5%/kp5N=A6VZ)>^$5'+h^^R4&X#8MNiU:hkNBU/2D^E?t]C]?k;W^]<Bs"RfPkN3a>GeLfc0eAc@8M(*0#]Jr/c8S-a1@$(FFmN6sn%ZX-H^6:GHj@$("jV;H0`:QkB!P)n!U>iEfYL8m'4A6SYY3NACT_+BiDa<T)cJWO+=i<\%(ll#p:MWr#FmqP$&iKo6SFLVB#$c"O6%\!6[MYS-VBg-jDITm$PX0]V+9[q30G!0s9]h]e&Kf+M3T[`lo&4BImXRUa4*m]K#GW>Dd];+\'U(/V@PU`WS`CVKsX!("F9jB.YP%^u_H)ER?gNcJ`<4?&@OM^g-hZ^>cKX8W2>ACNl?s2$eC-@+FUO&6l,.LMQ=p&?OIqOEN@0c/77J"ls\_H<)=7(M'62!Z8O<JJJ/d%PS3Y'G4@O"_WN%Q@?JISm'hAQ(a?_8I71eS1?!08Uu<^em7INO!cmt[q23M:PH:iIgSC`]Gnkb<1k]jY!&sl/K`^i5b]`.L?16e/%UAEUB"cb+W"XUl^ONG'mKp"&re"W"9,;#SP`@pi=%b]b<T\p/tX@h/H+FhjnEk/e1BKO;n*>XO+?=9r83FD<EGg]Sl[Rj!<2L1tA%=*06CMfs-.$\X'i&N##[Tk[_]H(P,JG,l<W$*8S*CZd3<_:/kJ\gSlie*Q@>]>:2bZEQ43d+"Ne>:qB?YECA10&!2NE"p*W/.1aT%JmA7q^>cKeal;@WlfXk7BjY66/r&nhkZnV7[)MGPBX_I&&SOsIm*Yt'_^fo<J`@)<Lg@okr,rU'!n]+:[m^nN7bU+-gcZ&N$>Si7%WU[sb_iPR96)IYY@Ob5pEk-N6b\AJ[pFn"YF90#Mk'Y-Til*A=s'mA](gb)k,rIRO@^cg1/%`;q(e+SOE,aS!$dWH<(:[taRho2@%h7TDL/b#WQ(=&8'J3m]$h94_K<UgkYW!D\K"g:9j*RNkb`F$%b@'?DK25#i1/%iGC0G0&+/=O?AKIHg,J5M9?+J@r[!SU*Z]3Tr0%hHdo[d`n5jk%Q``;i\)H@94UKOM<<>po>)qS-T;CdnunnUBE4m>:"GOj_B,hcFdhRn'kZd<=W17AV=n5!`OtVB7,UbcAQVZ?^^<S%TrIn4Rr&!JKt7'_.%D(^8E8hA"M=LJUF\8_mkDOu?>uS5_mM#!M\6"8.)Op>),4hE[!S:#je7*[f&]PWQ7(nL5t@@6>ZGG9A?Ma;%g(6NTJ]ndR98QI<]4H=CX]]l6K<#WnWP@mJg8ueJg?osm.ouX5a"?\$E],R.d+m;\"dIq+,(Yk>aQt_pDDf_ajb,AE/R)n[J=q'C%Lrh*-m\VTDd&6Vdb"WO0$+mUQTM1)[?h!sbnBhO":CfmpIs)?Q)THY%0^H\pZ1)b*CH2Sd;"2!@c*8l"FlP'"aBeK`<bUWf2JLdA%pN!sV/(e"-/_1*81kAF4I.Q3Go#P_R1)X[m"et_!?]*[9`%S3;11UUjmlXn]J1HD4>oHOABVKbW8$^^@"A<k1B^J<]8%Md+>PfR[%CH`(MbW(7,6ZVr<JJFjISJ5?q+H1CY9Pd"l6o$'O[394s>OH;Z8.3bpIPr$`6C:g`-A$J8C0j.]C=\"Qh@G-0^C"lkL`0a.i1>KT%0\YW[<G[K]%GiGE`df$4"!1%<&S^e'(2eh&4MkRk#Id]AQSlT#mbZL0ncqJ;/d<uS$:M'_gF!Ig!(q3SM?]NJTm8,Lk&Ih4#F?DO%8uQq&&IDnK?4fF9nK%_";(ih!/)qNLqOh1oi-f_:lU=f9]T:nI<2s<3L7g_F'1+$?a8=pHGFp>nA1\*g4D$\0/b;^Do+RCrkEDg-%].m82QluJt/Ie5V-dL7"i[r9&O5/fc-SGd6$ft(a;-/]LarF4:)?TV'.JXIR1G@A#(VT)Vb"iMYPWQ&.iI7,FTo4YQE4_^_Z:<=u%(6@!S$C<%I!uGVFdDJJJat_^$n#U"SBL2dj4f5^f3BKU@e#[]Wgu(TL,'C3m#FDq\+D0WcQ_@u2+"(f!2_*UEXkHE<\Z3&D.B$!^%auiA[<=/r=/1O4Dl\(^IU%V,>FX-r:_57R=_Cqr>d8\f$!g'HWjk*T)P,#9R2OJW@\bbK:`Fm)PN8-(Ao,]]!i5(ra0ot4*B6`6E%f5F8G`L@+.aV<T,^a?u=%$ZBG**@-<>>-1eiBlbuCe!UpjJJcC8tZVj\8+BpY<rhU0J#6fdm:B@%bcJFfOaXc6sC-@AnjcFGiQI3%Vu,i<?N0@G0AGmGcbKMZ&oYOt.Fc,hSh0-9rUVh3%TL@&0@qdcbl@V>h90_A$;V;35j^9t&!f(m?&4P5AnUqOh`^N.neRh$ne4pY%5i2[u4N=S7jX3upIeBVrOmfoK5J@!<bIa,@q/Y7Ss4Qf6s5K<X-lfK>:=Na1&NHA>@I&HJ0]cHI!$aUlFA-iuk[8F&cQlj-_P(<K%)g2Z!g\gu-015O%gOK6Jql`e\If<+bhS/sE]<C,LremT/4PkP_md%@^0'V8@I/i/D8H6TN$]M[Q[bL8cI]5QI6@(_S+O]-g0^gV*%%SM*p`-2t<VE>7'AI8fDSco/9P_[AQCn^Vq/AuK^K$,G\GWiU@/4b!i4[:G)89b=[4:r?%H7!OW'db8WZAnFQYn?\*#qVr9FKS+A%O!Pg1c,gJCQh3t"C.+YS?iEnEV95Pf?N$j(WLq*YKib_h,YS!Z7Jg@nGOD$OAifr;nElEi='W=@WcueE/[T4'!eSaf:(nM/OrRC,%(_R`'BT<P6T"QF8qpD9#5,B_%1gtk\*UK*[MZndn=@Rs,cS5^njba=@:3G!6[-HW!]H7hk.+lC2pnTnZD#)K2Cl+'dHC2Kh.EO;!%FJg"/+X2E;/]+Em"n%fJn3M-jlZ&omUcGllZ+cD21dCI:P9lgB+)ciTr]^7h+#L!<UHBc0QJY/4SrG#9L>eB[1R^%=8EC[/bqY6@%Q02%3^4TpSF?G<k>TjsLGV5aO7NLrB5*?nTNd3`+8WJd==<4$]W.BlM7m9GL!YJAPZ%XWWV&PtM-;YZqL*WA8BT<\B'$k5Jdm;"\%SrG!s*/4flcY1>>iI_+-0UcL!NZ1+,8@li)B!QbGP!mRHq"0\9ROa,"5'XOQ*$b.FG-^X<>Bh@C]kY[/Q`[O'QS$nWF_cC(F\>2N%i>OiY_Bn5es&ie,ro7M$!KG"RJ7R)PT^hLlaA5<Q$PLeX(*oZgP??W4:*QIf'LP@i<[&dG9?-/O94[(PaT/n2'A;_8@E&':"<$T$%@>t1[5t63&(o)R^f]RIGd+R15dsZE>mcCc>r;;H`+91*)kJqMu^O,S2DpK6HB7G_A])DQYDr5qdqtu@*O5$"^5JR6fnb.n8IsLe]%pWrk'IXM1jg%3bcfcQffk<ESVmJB*UfB:n:)ukB<hd%><IJ;"Ro3_FTMt?kij4E`a^?Lf7Ys\L$Mu31Vhu)`6nAYDHhcFarW,2M'%r1g:Hm8s5iGs@<+b'j`EG@gf$^+nN(_[Q'k,>-qG+qE=W<(]^A%)c3?.MmcVEHGa;-&cpUgGk#?Dknf[QEbm'M!W34G(o<4Y>^Ie%b:/\g4q7]U%<LSG4]B#VrKmqL:MB-_`B>=24k_\74hHG2@5c!L9C`Kh57&'&]3-:Q9$"tCWdP%.B144nT!Y$*EAPi;p6s5V#(diI%&abPa(:&O"7kY@\-78D?TjBj)?Cf`He&Ln?M'8aZT$H5/X)T5!haReEr>.-\q$YA^cZ1qC"Ec&>ok].C@]X_nWkC/]qr-Y5CO&QU%iV(6_<TcLecRQ3UleZqaW;^9WXn<I6Kqei0_:&D_36,B;jeM5V+L3gakdf$8YDb:h'0:sf?QiRlmsg"^jf7LEh:1U`L[EiFeGlUW%)'-Q"fDOm1hu?X(s+kF[b/D4o0C0E`/VT1Umg%I"2ku^u($WJmW3C]W,Pr?WhoIp/Il2\QYtP$GjdK-+qr<`7kg`iX%*hX-eLT*Z%(K:9cp@GKHp:n&jf-=t:RphOhO3b:YmkjkgR!(<qIhci-:V#`4N!*M=jB(@\@__*.GHa5LEZa*E;gT#-dKkX,m'Ae6lV6E=5V(0I%rXW`^6hk^Z1((21ER=)]njgpCp2nJ*'%Z*B[VZ;F@bhl8KZ=&1Re;8J)-3PF"RrBJqs"tNT7-6@q85G2qtd?PIs_(On,NCKZd8Wk%Rr@0_p;<A<^O,k:jdY_rr9q,(2t,Vr]PmiJHuf,H_qXXPFn4qeq`hdoCSs;$JGlh#rpa(io^[J321B8X~>%AI9_PrivateDataEnd